[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a new list that contains only the elements that are common to both lists\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements\n",
        "num_ids": 71
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code goes here...\n    for i in test_tup2:\n        if test_tup1[0] in test_tup2[1:]:\n            if test_tup2[0] in test_tup1[1:]:\n                return (test_tup1[0], test_tup2[0])\n",
        "num_ids": 83
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n",
        "num_ids": 22
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # if only one is given, return that\n    if len(test_tup1) == 1:\n        return [item for item in test_tup1 if item in test_tup2]\n    # if both are given, return them in a list\n    elif len(test_tup1) == 2:\n        return [item for item in test_tup1 if item in test_tup2]\n    # if none are given, return it in the list\n    elif len(test_tup1) == 3:\n        return [item for item in test_tup1 if item in test_tup2 and item in test_tup2[0]]\n    # if all are given, return them in a list\n    elif len(test_tup1) == 4:\n        return [item for item in test_tup1 if item in test_tup2 and item in test_tup2[0] and item in test_tup2[1] and item in test_tup2[2]]\n    # if any of the other three are given, return them in a list\n    elif len(test_tup1) == 5:\n        return [item for item in test_tup1 if item in test_tup2 and item in test_tup2[0] and item in test_tup2[1] and item in test_tup2[2] and item in test_tup2[3]]\n",
        "num_ids": 338
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1).intersection(test_tup2)\n    return shared_elements\n",
        "num_ids": 33
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # get the length of both lists\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    # if the two lists are the same length, return None\n    if len1 == len2:\n        return None\n    # if both lists are empty, return None\n    if len1 == 0 or len2 == 0:\n        return None\n    # initialize an empty list of shared elements\n    shared_elements = []\n    # go through both lists\n    for i in range(len1):\n        for j in range(len2):\n            # compare the two given values and return the shared element\n            if test_tup1[i] == test_tup2[j]:\n                shared_elements.append(test_tup1[i])\n                return shared_elements\n    # if any shared elements are found, return None\n    return None\n",
        "num_ids": 210
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements\n",
        "num_ids": 68
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1, list2 = test_tup1, test_tup2\n    hash1, hash2 = [], []\n    # if not given test_tup2 \n    if type(list2)!= list:\n        return \n    for i in list1:\n        if hash1.count(i) > 0:\n            hash1.remove(i)\n    for j in list2:\n        if hash2.count(j) > 0:\n            hash2.remove(j)\n    return hash1, hash2\n    \ndef test_similar_elements():\n    '''\n    Test that similar_elements works correctly\n    '''\n    test_tup1 = ('a', 'b')\n    test_tup2 = ('a', 'b', 'a')\n    # test_tup2 = ('b', 'a')\n    test_tup3 = ('a', 'b', 'a')\n    print('Test for similar_elements:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', ('a', 'b'))\n    print('Actual output: ', similar_elements(test_tup1, test_tup2))\n    print('Expected output: ', ('b', 'a'))\n    print('Actual output: ', similar_elements(test_tup1, test_tup3))\n    print('Expected output: ', ('a', 'b', 'a'))\n    print('Actual output: ', similar_elements(test_tup2, test_tup3))\n    print('Expected output: ', ('a', 'b', 'a'))\n    \ndef test_simple_set():\n    '''\n    Test that simple_set works correctly\n    '''\n    test_tup1 = ('a', 'b')\n    test_tup2 = ('a', 'b', 'a')\n    print('Test for simple_set:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', {'a', 'b'})\n    print('Actual output: ', simple_set(test_tup1, test_tup2))\n    print('Expected output: ', {'a', 'b'})\n    print('Actual output: ', simple_set(test_tup2, test_tup1))\n    print('Expected output: ', set())\n    print('Actual output: ', simple_set(set(), test_tup2))\n    print('Expected output: ', set())\n    print('Actual output: ', simple_set(set(), set()))\n    \ndef test_remove_duplicates():\n    '''\n    Test that remove_duplicates works correctly\n    '''\n    test_tup1 = ('a', 'b', 'c', 'd', 'a')\n    test_tup2 = ('b', 'a', 'b', 'c', 'a')\n    print('Test for remove_duplicates:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', {'a', 'b', 'c', 'd'})\n    print('Actual output: ', remove_duplicates(test_tup1, test_tup2))\n    print('Expected output: ', {'b', 'a', 'c', 'd'})\n    print('Actual output: ', remove_duplicates(test_tup2, test_tup1))\n    print('Expected output: ', set())\n    print('Actual output: ', remove_duplicates(set(), test_tup2))\n    print('Expected output: ', set())\n    print('Actual output: ', remove_duplicates(set(), set()))\n    \ndef test_count_unique():\n    '''\n    Test that count_unique works correctly\n    '''\n    test_tup1 = ('a', 'b', 'a', 'b', 'b', 'a')\n    test_tup2 = ('a', 'b', 'a', 'b', 'a', 'b')\n    print('Test for count_unique:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', 2)\n    print('Actual output: ', count_unique(test_tup1, test_tup2))\n    print('Expected output: ', 3)\n    print('Actual output: ', count_unique(test_tup2, test_tup1))\n    print('Expected output: ', 3)\n    print('Actual output: ', count_unique(test_tup1, set()))\n    print('Expected output: ', 3)\n    print('Actual output: ', count_unique(set(), test_tup2))\n    print('Expected output: ', 3)\n    print('Actual output: ', count_unique(set(), set()))\n    \ndef test_check_equal():\n    '''\n    Test that check_equal works correctly\n    '''\n    test_tup1 = ('a', 'b', 'a', 'b', 'b', 'a')\n    test_tup2 = ('a', 'b', 'a', 'b', 'a', 'b')\n    print('Test for check_equal:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', True)\n    print('Actual output: ', check_equal(test_tup1, test_tup2))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equal(test_tup2, test_tup1))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equal(test_tup1, set()))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equal(set(), test_tup2))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equal(set(), set()))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equal(set(), set()))\n    print('Expected output: ', False)\n    print('Actual output: ', False)\n    print('Actual output: ', check_equal(set(), set()))\n    \ndef test_check_equals():\n    '''\n    Test that check_equals works correctly\n    '''\n    test_tup1 = ('a', 'b', 'a', 'b', 'b', 'a')\n    test_tup2 = ('a', 'b', 'a', 'b', 'a', 'b')\n    print('Test for check_equals:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(test_tup1, test_tup2))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equals(test_tup2, test_tup1))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(test_tup1, set()))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equals(set(), test_tup2))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', False)\n    print('Actual output: ', False)\n    print('Actual output: ', False)\n    print('Actual output: ', False)\n    print('Actual output: ', False)\n",
        "num_ids": 435
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_in_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_in_fact(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False\ndef is_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_prime_prime_prime_prime_prime_prime_prime(n):\n    '''\n    Writ",
        "num_ids": 4
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0:\n        return True\n    elif n%3==0:\n        return False\n    elif n%4==0:\n        return True\n    elif n%5==0:\n        return False\n    else:\n        return False\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef divide(n, d):\n    '''\n    This function takes a number and a divisor and returns the integer number\n    '''\n    if n%d==0:\n        return n//d\n    else:\n        return n//d\n",
        "num_ids": 27
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if input is an integer\n    if n < 2:\n        return False\n    # Check if input is an integer and if n is the\n    # sum of two divisors\n    if n == 2:\n        return True\n    # Check if input is not an integer and if n\n    # is the sum of two divisors\n    if n < 2 or n % 2 == 0:\n        return False\n    # Check if input is a multiple of both\n    # divisors\n    if n % 2 == 0:\n        return False\n    # Check if input is divisible by both\n    # divisors and n and if it is not a multiple\n    # of both\n    if n % 2 == 0 and n % 2!= 0:\n        return False\n    # Check if input is divisible by the\n    # divisors, n and if it is not a\n    # multiple of both\n    if n % 2 == 0 and n % 2 == 0:\n        return False\n    # Check if the square root of n\n    # is greater than 0\n    if n % 2 == 0 and n % 2!= 0:\n        if n ** 0.5 > 0:\n            return False\n    # Check if the square root of n\n    # is less than 0\n    if n % 2!= 0 and n % 2!= 0:\n        if n ** 0.5 < 0:\n            return False\n    # Check if the cube root of n\n    # is greater than 0\n    if n % 2!= 0 and n % 2!= 0:\n        if math.pow(n, 0.5) > 0:\n            return False\n    # Check if the cube root of n\n    # is less than 0\n    if n % 2!= 0 and n % 2!= 0:\n        if math.pow(n, 0.5) < 0:\n            return False\n    return True\n",
        "num_ids": 439
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_even(n):\n    '''\n    Write a python function to identify even numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_odd(n):\n    '''\n    Write a python function to identify odd numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_prime_or_not(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_prime_or_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_prime_or_not_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_not_prime_or_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_not_prime_or_not_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_prime_or_not_prime_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_odd_or_not_prime(n):\n    '''\n    Write a python function to identify odd numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_odd_or_not_not_prime(n):\n    '''\n    Write a python function to identify odd numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_even_or_not_prime(n):\n    '''\n    Write a python function to identify even numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_even_or_not_not_prime(n):\n    '''\n    Write a python function to identify even numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_even_or_not_not_not_prime(n):\n    '''\n    Write a python function to identify even numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_prime_or_not_prime_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_prime_or_not_prime_not_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_not_prime_or_not_prime_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_prime_or_not_prime_not_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_not_prime_or_not_not_prime_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_prime_or_not_not_not_prime_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_not_prime_or_not_prime_not_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            return False\n    return True\ndef is_not_prime_or_not_not_not_prime_not_prime(n):\n    '''\n    Write a python function to identify prime or not numbers.\n    '''\n    if (n<2):\n        return n>=2\n",
        "num_ids": 17
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    i=2\n    while i <= math.sqrt(n):\n        if (n % i == 0):\n            return False\n        i += 1\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is prime\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    flag = False\n    if n == 2:\n        return True\n    elif n > 2:\n        for i in range(2,n):\n            if n%i==0:\n                flag = True\n                break\n    if flag == True:\n        return False\n    else:\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    flag = True\n    if n < 2:\n        flag = False\n    elif n == 2:\n        flag = True\n    elif n%2 == 0:\n        flag = False\n    elif n%3 == 0:\n        flag = False\n    elif n%4 == 0:\n        flag = False\n    elif n%5 == 0:\n        flag = False\n    elif n%6 == 0:\n        flag = False\n    elif n%7 == 0:\n        flag = False\n    elif n%8 == 0:\n        flag = False\n    elif n%9 == 0:\n        flag = False\n    elif n%10 == 0:\n        flag = False\n    else:\n        flag = False\n    return flag\ndef is_positive(n):\n    '''\n    Check if n is positive or not.\n    '''\n    if n<0:\n        return False\n    elif n>0:\n        return True\ndef check_round(n):\n    '''\n    Check if n is positive or not.\n    '''\n    if n<0:\n        return False\n    elif n>0:\n        return True\ndef is_even(n):\n    '''\n    Check if n is even or not.\n    '''\n    if n>0:\n        return False\n    elif n<0:\n        return True\ndef is_prime_progression(n):\n    '''\n    Check if n is prime or not.\n    '''\n    if n==2:\n        return True\n    elif n==1:\n        return False\n    elif n<2:\n        return False\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    elif n%4==0:\n        return False\n    elif n%5==0:\n        return False\n    elif n%6==0:\n        return False\n    elif n%7==0:\n        return False\n    elif n%8==0:\n        return False\n    elif n%9==0:\n        return False\n    elif n%10==0:\n        return False\n    else:\n        return False\ndef is_prime_progression_sequence(n):\n    '''\n    Check if n is prime or not.\n    '''\n    if n==2:\n        return True\n    elif n==1:\n        return False\n    elif n<2:\n        return False\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    elif n%4==0:\n        return False\n    elif n%5==0:\n        return False\n    elif n%6==0:\n        return False\n    elif n%7==0:\n        return False\n    elif n%8==0:\n        return False\n    elif n%9==0:\n        return False\n    elif n%10==0:\n        return False\n    else:\n        return False\ndef check_prime(n):\n    '''\n    Check if n is prime or not.\n    '''\n    if n==2:\n        return True\n    elif n==1:\n        return False\n    elif n<2:\n        return False\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    elif n%4==0:\n        return False\n    elif n%5==0:\n        return False\n    elif n%6==0:\n        return False\n    elif n%7==0:\n        return False\n    elif n%8==0:\n        return False\n    elif n%9==0:\n        return False\n    elif n%10==0:\n        return False\n    else:\n        return False\ndef is_prime_sequence(n):\n    '''\n    Check if n is prime or not.\n    '''\n    if n==2:\n        return True\n    elif n==1:\n        return False\n    elif n<2:\n        return False\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    elif n%4==0:\n        return False\n    elif n%5==0:\n        return False\n    elif n%6==0:\n        return False\n    elif n%7==0:\n        return False\n    elif n%8==0:\n        return False\n    elif n%9==0:\n        return False\n    elif n%10==0:\n        return False\n    else:\n        return False\ndef is_not_prime_sequence(n):\n    '''\n    Check if n is not prime or not.\n    '''\n    if n==2:\n        return True\n    elif n==1:\n        return False\n    elif n<2:\n        return False\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    elif n%4==0:\n        return False\n    elif n%5==0:\n        return False\n    elif n%6==0:\n        return False\n    elif n%7==0:\n        return False\n    elif n%8==0:\n        return False\n    elif n%9==0:\n        return False\n    elif n%10==0:\n        return False\n    else:\n        return False\ndef is_small(n):\n    '''\n    Check if n is small or not.\n    '''\n    if n>1:\n        return False\n    elif n==1:\n        return True\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    elif n%4==0:\n        return False\n    elif n%5==0:\n        return False\n    elif n%6==0:\n        return False\n    elif n%7==0:\n        return False\n    elif n%8==0:\n        return False\n    elif n%9==0:\n        return False\n    elif n%10==0:\n        return False\n    else:\n        return False\ndef is_big(n):\n    '''\n    Check if n is big or not.\n    '''\n    if n>1:\n        return False\n    elif n==1:\n        return True\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    elif n%4==0:\n        return False\n    elif n%5==0:\n        return False\n    elif n%6==0:\n        return False\n    elif n%7==0:\n        return False\n    elif n%8==0:\n        return False\n    elif n%9==0:\n        return False\n    elif n%10==0:\n        return False\n    else:\n        return False\ndef prime_check(n):\n    '''\n    Check if n is prime or not.\n    '''\n    if n>1:\n        return False\n    elif n==1:\n        return True\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    elif n%4==0:\n        return False\n    elif n%5==0:\n        return False\n    elif n%6==0:\n        return False\n    elif n%7==0:\n        return False\n    elif n%8==0:\n        return False\n    elif n%9==0:\n        return False\n    elif n%10==0:\n        return False\n    else:\n        return False\ndef is_prime_progression_sequence(n):\n    '''\n    Check if n is prime or not.\n    '''\n    if n==2:\n        return True\n    elif n==1:\n        retur",
        "num_ids": 24
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            return(False)\n    return(True)\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return(False)\n    if n == 2 or n == 3:\n        return(True)\n    for i in range(5, n//2 + 1, 6):\n        if not n % i:\n            return(False)\n    return(True)\n",
        "num_ids": 73
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 1:\n        return nums\n    else:\n        dummy = [0] * n\n        heap = []\n        for i in range(n):\n            heapq.heappush(heap,(-nums[i],i))\n        for i in range(n-1,-1,-1):\n            _,pos = heapq.heappop(heap)\n            dummy[pos] = nums[pos]\n        return dummy\n",
        "num_ids": 112
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n",
        "num_ids": 35
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    output = []\n    while len(nums)>0:\n        val = hq.heappop(nums)\n        output.append(val)\n    return output[::-1]\n",
        "num_ids": 61
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n-1,-1,-1):\n        heapq.heappop(heap)\n    return heap\n",
        "num_ids": 67
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n",
        "num_ids": 21
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = [(num,i) for i,num in enumerate(nums)]\n    heapq.heapify(heap)\n    while len(heap)>n:\n        curr_num = heapq.heappop(heap)\n        if curr_num[1]<n:\n            heapq.heappush(heap,(curr_num[0],curr_num[1]))\n    return heapq.heappop(heap)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = [(num,i) for i,num in enumerate(nums)]\n    heapq.heapify(heap)\n    while len(heap)>n:\n        curr_num = heapq.heappop(heap)\n        if curr_num[1]>n:\n            heapq.heappush(heap,(curr_num[0],curr_num[1]))\n    return heapq.heappop(heap)\n",
        "num_ids": 119
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n<=0:\n        return None\n    heap = []\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n        if len(heap)>1:\n            hq.heappushpop(heap,nums[i])\n        if len(heap)==1:\n            if nums[heap[0]]>nums[i]:\n                nums[heap[0]]=nums[i]\n    return nums\nnums=[1,2,3,4,5,6,7,8,9,10]\nprint(heap_queue_largest(nums,6))\n",
        "num_ids": 165
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    # return the smallest number in the list, with increasing order\n    def get_smallest(nums):\n        heapq.heapify(nums)\n        smallest = nums[0]\n        for num in nums:\n            if num < smallest:\n                smallest = num\n        return smallest\n    # loop through the list of numbers and update the heap queue\n    for i in range(n):\n        smallest = get_smallest(nums[:n-i-1])\n        if smallest > nums[i]:\n            # mark the number as visited\n            heapq.heappush(nums,nums[i])\n    # return the largest list\n    return [nums[i] for i in range(n) if i < len(nums)-1 and nums[i] > nums[i+1]]\n",
        "num_ids": 205
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap_list=[]\n    for i in range(n):\n        heapq.heappush(heap_list,[nums[i],i])\n",
        "num_ids": 41
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    maxheap=[]\n    for i in range(len(nums)):\n        heapq.heappush(maxheap,nums[i])\n    for i in range(len(maxheap)-1,-1,-1):\n        nums[i]=heapq.heappop(maxheap)\n    return nums\n",
        "num_ids": 84
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = str(x)\n    return len(x) == 1\n",
        "num_ids": 19
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == x == x:\n        return True\n    elif x & 1!= x & 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 40
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2:\n        return False\n    else:\n        for i in range(2, x):\n            if x%i == 0:\n                return False\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x%2 == 1 \n",
        "num_ids": 11
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = str(x)\n    if len(x)<=1 or x==0 or x==1:\n        return True\n    elif x[0]!=x[1]:\n        return True\n    else:\n        return False\n    \n    \n",
        "num_ids": 63
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x%2==0):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x!= 1:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x= str(x)\n    if len(x) > 1:\n        for i in range(len(x)-1):\n            if x[i] == x[i+1]:\n                return False\n    else:\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #text = \"Hello world, Hello world, Hello world!\"\n    text = re.sub(\"\\s+\", \"\", text)\n    return text.split(\" \")\n",
        "num_ids": 42
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Splitting the string\n    text = text.split(' ')\n",
        "num_ids": 19
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # create regex object\n    regex = re.compile(\"[^a-zA-Z]\")\n",
        "num_ids": 28
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    letters_count = 0\n    for i in text:\n        if len(i) >= 4:\n            letters_count += 1\n    return letters_count\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    letters_count = 0\n    for i in text:\n        if len(i) >= 2:\n            letters_count += 1\n    return letters_count\ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation in a string.\n    '''\n    text = str(text)\n    pattern = r'[a-zA-Z0-9]\\s*'\n    return re.sub(pattern, '', text)\ndef remove_stopwords(text):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    text = str(text)\n    stopwords_list = ['i','me','my','myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself','she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that's\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few','more','most', 'other','some','such', 'no', 'nor', 'not', 'only', 'own','same','so', 'than', 'too','very','s', 't', 'can', 'will', 'just', 'don', \"don't\",'should', \"should've\", 'now', 'd', 'll','m', 'o','re','ve', 'y', 'ain', 'aren', 'couldn', 'didn', 'doesn', 'hadn', 'hasn', 'haven', 'isn','ma','mightn','mustn', 'needn', 'need', 'wasn', 'weren', 'won', 'wonn', 'wouldn','mightn']\n    new_text = re.sub(pattern,'', str(text))\n    for word in new_text.split():\n        if word not in stopwords_list:\n            new_text = new_text.replace(word, '')\n    return new_text\ndef remove_stopwords_no_punctuation(text):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    text = str(text)\n    stopwords_list = ['i','me','my','myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself','she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that's\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further']\n    new_text = re.sub(pattern, '', str(text))\n    for word in new_text.split():\n        if word not in stopwords_list:\n            new_text = new_text.replace(word, '')\n    return new_text\ndef remove_stopwords_punctuation(text):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    text = str(text)\n    stopwords_list = ['i','me','my','myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself','she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that's\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further']\n    new_text = re.sub(pattern, '', str(text))\n    for word in new_text.split():\n        if word not in stopwords_list:\n            new_text = new_text.replace(word, '')\n    return new_text\n",
        "num_ids": 364
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # convert the string to lowercase to remove punctuation\n    text = text.lower()\n    # find all words in the text\n    words = re.findall(r\"[^a-zA-Z0-9.\\s]+\", text)\n    # return only the words with at least 4 characters\n    return words\n",
        "num_ids": 76
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find_word = re.findall(r'[a-zA-Z]', text)\n    if len(find_word) < 4:\n        return find_word\n    else:\n        return None\n",
        "num_ids": 52
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex_pattern = r\"[a-zA-Z0-9]{4,}[a-zA-Z0-9]|[0-9]*[a-zA-Z0-9]\"\n    match = re.search(regex_pattern, text)\n    if match is None:\n        return \"Error\"\n    else:\n        return text[match.start()+2:match.end()]\n",
        "num_ids": 103
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text) == 0:\n        return []\n    if len(text) == 1:\n        return [text]\n    list_word_long = []\n    for word in text:\n        if len(word) >= 4:\n            list_word_long.append(word)\n    return list_word_long\n",
        "num_ids": 78
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_chars = 0\n    for i in range(0, len(text)-1):\n        if text[i].isalnum():\n            long_chars += 1\n    if long_chars >= 4:\n        return text\n    else:\n        return ''\n",
        "num_ids": 65
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    lst_long = []\n    word = []\n    for char in text:\n        if len(word) > 4:\n            break\n        if char.isalpha():\n            if char.isupper():\n                if char in word:\n                    if word.count(char) == 1:\n                        lst_long.append(char)\n            elif char.islower():\n                if char in word:\n                    if word.count(char) == 1:\n                        lst_long.append(char)\n        word = []\n    if lst_long:\n        return lst_long\n    return \"Not found\"\n",
        "num_ids": 147
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i ** 2 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for number in nums:\n        result.append(number * number)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # your code here\n    squares=[]\n    for i in nums:\n        squares.append(i*i)\n    return squares\n    #raise NotImplementedError()\n",
        "num_ids": 47
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for num in nums:\n        squared.append(num ** 2)\n    return squared\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sqnums = [num**2 for num in nums]\n    return sqnums\n    \n",
        "num_ids": 26
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # create a variable to hold the squares\n    squares = []\n    # iterate over the list\n    for num in nums:\n        # check if the square is less than the current number\n        if num < nums[0]:\n            return \"Error: less than\"\n        squares.append(num**2)\n",
        "num_ids": 77
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums.sort()\n    square = []\n    for i in range(len(nums)):\n        square.append(nums[i]**2)\n    return square\n",
        "num_ids": 45
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = []\n",
        "num_ids": 10
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #find all the rotations of a string \n    rotations = 0 \n    for i in range(len(str)-1): \n        rotations += str.count(str[i]) \n        \n    #print(rotations)\n    return rotations \n",
        "num_ids": 65
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if(len(str) % 2!= 0):\n        return -1\n    \n    rotations = 0\n    \n    left_index = 0\n    right_index = len(str) - 1\n",
        "num_ids": 50
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    dict = {}\n    for i in range(26):\n        dict[chr(i+ord('a'))] = 0\n    for i in range(len(str)):\n        dict[str[i]] += 1\n        \n    for i in range(26):\n        if dict[chr(i+ord('a'))] > 0:\n            print(\"rotations needed:\", i+1)\n            break\n        \ndef find_Rotations1(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    dict = {}\n    for i in range(26):\n        dict[chr(i+ord('a'))] = 0\n    \n    for i in range(len(str)):\n        dict[str[i]] += 1\n        \n    for i in range(26):\n        if dict[chr(i+ord('a'))] > 0:\n            print(\"rotations needed:\", i+1)\n            break\n        \n        \nif __name__ == '__main__': \n    #  str = \"aabbcc\" \n    str = \"aabbccbaaabcd\"\n    find_Rotations(str) \n    find_Rotations1(str) ",
        "num_ids": 166
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if(str[0] == str[1]):\n        return 1\n    else:\n        return 2\n",
        "num_ids": 28
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(str): \n        rot = 0\n        for i in range(0, len(str), 2): \n            rot += 1\n        return rot\n    temp = rotate(str)\n    return temp\n",
        "num_ids": 52
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) % 2 == 0:\n        # if even number of rotations\n        return str[0]+str[1]*2+str[2]*2+str[3]*2+str[4]*2\n    else:\n        # if odd number of rotations\n        return str[0]+str[1]*2+str[2]*2+str[3]+str[4]*2\n",
        "num_ids": 101
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    rotations = 0\n    str = str.lower()\n    for i in range(len(str)):\n        if str[i] == 'r':\n            rotations += 1\n        else:\n            count += 1\n    return rotations-1\n",
        "num_ids": 66
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str) - len(str)%2):\n        if str[i:i+2] == str[i+1:i+2+1]:\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for rot in range(0,len(str)-1):\n        if str[rot] == str[rot+1]:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    dict={}\n    for i in range(len(str)):\n        dict[str[i]]=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if(str[i]!=str[j]):\n                dict[str[i]]=dict[str[i]]+1\n            else:\n                dict[str[i]]=dict[str[i]]+1\n    min=dict[str[0]]\n    for i in dict:\n        if(dict[i]<min):\n            min=dict[i]\n    return min\n",
        "num_ids": 148
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = ch.lower()\n    if ch in s:\n        start = s.find(ch)\n        end = s.rfind(ch)\n        s = s[:start] + s[end+1:]\n    return s\ndef remove_digits(s):\n    '''\n    Write a python function to remove the digits in a given string s.\n    '''\n    digits = ['0','1','2','3','4','5','6','7','8','9']\n    for i in digits:\n        s = s.replace(i,'')\n    return s\ndef remove_prefix(s):\n    '''\n    Write a python function to remove prefix of a given string s.\n    '''\n    prefix = 'hijooijhij'\n    return s.replace(prefix,'')\ndef remove_suffix(s):\n    '''\n    Write a python function to remove suffix of a given string s.\n    '''\n    suffix = 'hijooijhij'\n    return s.replace(suffix,'')\ndef reverse(s):\n    '''\n    Write a python function to reverse a given string s.\n    '''\n    reverse_str = ''\n    for i in s:\n        reverse_str += i\n    return reverse_str\ndef sub(s):\n    '''\n    Write a python function to find the sub-string of the given string s in the given string s.\n    '''\n    sub_str = ''\n    for i in range(len(s)):\n        sub_str += s[i]\n    return sub_str\ndef char_to_int(s):\n    '''\n    Write a python function to convert a string of characters into their integer value.\n    '''\n    char_dict = {\n        \"h\":\"1\",\n        \"i\":\"2\",\n        \"o\":\"3\",\n        \"n\":\"4\",\n        \"j\":\"5\",\n        \"j\",\"h\",\"i\",\"o\",\"n\",\n        \"k\":\"6\",\n        \"l\":\"7\",\n        \"m\":\"8\",\n        \"l\",\"k\",\"j\",\"i\",\"o\",\"n\",\"l\",\"j\",\"h\",\"i\",\"o\",\"n\",\"k\",\"l\",\"j\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"j\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"l\",\"k\",\"j\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"j\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"l\",\"k\",\"j\",\"i\",\"o\",\"n\",\"l\",\"k\",\"j\",\"i\",\"o\",\"n\",\"l\",\"h\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"l\",\"k\",\"j\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"l\",\"j\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"l\",\"j\",\"i\",\"o\",\"n\",\"l\",\"l\",\"j\",\"i\",\"o\",\"n\",\"l\",\"h\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"l\",\"k\",\"j\",\"i\",\"o\",\"n\",\"l\",\"h\",\"i\",\"o\",\"n\",\"l\",\"l\",\"j\",\"i\",\"o\",\"n\",\"l\",\"h\",\"i\",\"o\",\"n\",\"l\",\"k\",\"j\",\"i\",\"o\",\"n\",\"l\",\"h\",\"i\",\"o\",\"n\",\"h\",\"i\",\"o\",\"n\",\"l\",\"h\",\"i\",\"o\",\"n\",\"l\",\"k\",\"j\",\"i\",\"o\",\"n\",\"l\",\"l\",\"j\",\"i\",\"o\",\"n\",\"l\",\"l\",\"j\",\"i\",\"o\",\"n\",\"l\",\"l\",\"l\",\"l\",\"j\",\"i\",\"o\",\"n\",\"l\",\"l\",\"h\",\"i\",\"o\",\"n\",\"l\",\"h\",\"i\",\"o\",\"n\",\"l\",\"l\",\"j\",\"i\",\"o\",\"n\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"j\",\"i\",\"o\",\"n\",\"l\",\"l\",\"l\",\"j\",\"i\",\"o\",\"n\",\"l\",\"h\",\"i\",\"o\",\"n\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",\"l\",",
        "num_ids": 1604
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)!= -1: \n        s = s.replace(ch,\"\") \n        return s \n    else: \n        return s \n",
        "num_ids": 43
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ans=\"\"\n    j=-1\n    for i in range(len(s)):\n        if (s[i] == ch and j>=0):\n            ans+=\" \"\n        else:\n            ans+=s[i]\n        j=i\n    return ans\n",
        "num_ids": 66
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if(s.count(ch)==0):\n        return s\n    else:\n        return s.replace(ch,\"\")\n    \n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[:i] + s[i+1:]\n    return s",
        "num_ids": 43
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    n = len(s)\n    if ch == '#':\n        print(\"#1\")\n        return 1\n    elif ch == '$':\n        print(\"$1\")\n        return 1\n    elif ch == '$' and n == 0:\n        print(\"$1\")\n        return 1\n    elif ch == '$' and n == 1:\n        print(\"$1\")\n        return 1\n    elif ch == '$' and n == 2:\n        print(\"$1\")\n        return 1\n    else:\n        print(\"#0\")\n        return 0\n    \ndef count_Occ(s,ch): \n    '''\n    Write a python function to count the occurrence of a given character in the string.\n    '''\n    n = len(s)\n    if ch == '#':\n        print(\"#2\")\n        return 2\n    elif ch == '$':\n        print(\"$2\")\n        return 2\n    elif ch == '$' and n == 0:\n        print(\"$2\")\n        return 2\n    elif ch == '$' and n == 1:\n        print(\"$2\")\n        return 2\n    elif ch == '$' and n == 2:\n        print(\"$2\")\n        return 2\n    else:\n        print(\"#0\")\n        return 0\n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    n = len(s)\n    i = 0\n    j = n - 1\n    while i <= j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\n        \ndef is_prime(n): \n    '''\n    Write a python function to check if a given number is a prime number or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n",
        "num_ids": 103
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.lower()\n    l=len(s)\n    index=s.find(ch)\n    if index==-1:\n        print(\"The character is not present in the string\")\n    else:\n        if index>=0:\n            print(\"The character is present at index\"+str(index))\n            for i in range(index,l):\n                s=s[:i]+s[i+1:]\n            print(\"After removing the character from the string\"+s)\n        else:\n            print(\"The character is present at index\"+str(index))\n            for i in range(index,l):\n                s=s[:i]+s[i+1:]\n            print(\"After removing the character from the string\"+s)\n            \n            \ndef main():\n    '''\n    This function takes a string as input and prints it in reverse order.\n    '''\n    s=input(\"Enter the string: \")\n    remove_Occ(s,ch)\n    \nmain()\n",
        "num_ids": 29
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0]==ch:\n        s=s[1:]\n    else:\n        return remove_Occ(s,ch)\n    return s[:-1]\n",
        "num_ids": 43
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    temp = s.replace(ch,'')\n    print(temp)\n    print(\"*\"*30)\n    print(\"Concatenated String: \" +temp)\n    return temp\n",
        "num_ids": 46
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M[i])):\n            sum += M[i][j]\n        M[i].sort(key=lambda x: x[0])\n        M[i].sort(key=lambda x: x[1])\n        M[i].sort(key=lambda x: x[2])\n    return M\n",
        "num_ids": 98
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_sorted = []\n    for i in range(len(M)):\n        M_sorted.append(sum(M[i]))\n    return M_sorted\n",
        "num_ids": 45
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N):\n        current_sum = 0\n        for j in range(N):\n            current_sum += M[j][i]\n        temp = [M[j][i] for j in range(N)]\n        for j in range(N):\n            temp[i] = M[j][i]\n            M[j][i] = current_sum\n        for j in range(N-1, -1, -1):\n            M[j][i] = temp[j]\n    return M\n",
        "num_ids": 133
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n",
        "num_ids": 10
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    return sorted(M, key=lambda x: x[0])\n",
        "num_ids": 45
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    s = sum(M)\n    i = 0\n    j = 0\n    while j < n:\n        while i < n:\n            if M[i][j] == 0:\n                i = i + 1\n            else:\n                break\n        while i < n:\n            if M[j][i] == 0:\n                j = j + 1\n            else:\n                break\n        if j < n:\n            i = i + 1\n            j = j + 1\n        M[i][j], M[j][i] = M[j][i], M[i][j]\n    return M\n",
        "num_ids": 153
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    c=0\n    for i in range(len(M)):\n        c+=sum(M[i])\n    for i in range(len(M)):\n        for j in range(len(M)):\n            if sum(M[j])>c:\n                M[i],M[j]=M[j],M[i]\n    return M\ndef print_matrix(M):\n    '''\n    Print a given matrix.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            print(M[i][j],end=' ')\n        print()\ndef check_matrix(M):\n    '''\n    Check whether a given matrix is complete.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            if M[i][j]==0:\n                return False\n    return True\ndef main():\n    M=[]\n    while True:\n        M.append([int(i) for i in input().split()])\n        if check_matrix(M):\n            break\n    print_matrix(M)\n    M=sort_matrix(M)\n    print_matrix(M)\nif __name__==\"__main__\":\n    main()",
        "num_ids": 136
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i] = list(M[i])\n        for j in range(n-i-1):\n            if M[i][j] < M[i][j+1]:\n                temp = M[i][j]\n                M[i][j] = M[i][j+1]\n                M[i][j+1] = temp\n    return M\n",
        "num_ids": 106
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_matrix = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ",
        "num_ids": 2012
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    count = 0\n    srt = []\n    for i in range(len(M)):\n        for j in range(i+1,len(M)):\n            srt.append(M[i][j])\n    for i in range(len(srt)):\n        count += srt[i]\n    for i in range(len(srt)):\n        temp = []\n        for j in range(i,len(srt)):\n            temp.append(srt[j])\n        srt = temp\n    return srt\n",
        "num_ids": 131
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l*h\n    b = h*(l+h)\n    c = b*(b-l)*(b-h)\n    return(3.14159*a*b*c)\n",
        "num_ids": 51
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b)/2*(h**3)\n",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = (b + l)/2\n    b = (h/2)\n    # print(a,b,h)\n    while a > 0 :\n        if (b**2) + (l**2) < (a**2) : \n            a = a/2\n        else :\n            b = b/2\n    return b * h * 3.14\n    # return \"Triangular Prism\"\n",
        "num_ids": 98
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 4*(l*h)\n    return volume\n",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (h*(b**3))/(3*(l**3))\n    print(\"The volume of a triangle is :\",v)\n",
        "num_ids": 36
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #pass # remove this line when you implement this function\n    \ndef area(r,h):\n    '''\n    Find the area of a geometric shape.\n    '''\n    pass # remove this line when you implement this function\n    return (r*h)/2\n",
        "num_ids": 23
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #variables\n    length = (b+h) / 2\n    height = (b+h) / 2\n    vol = b * h * (4 / 3)\n    if h <= length:\n        vol = vol * (4 / 3)\n    else :\n        vol = vol * (2 / 3)\n    #testing\n    print('Volume = ', vol)\n",
        "num_ids": 88
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l + b\n    b = h + a\n    c = a * b\n    return (c)\n",
        "num_ids": 29
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(l*b*h) \n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b)*h\n    print(\"Volume of the triangle is :\",volume)\n",
        "num_ids": 25
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for c in text:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            if text.lower().count(c) > text.lower().count('_'):\n                return False\n        else:\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Loops through each character in the input string to check if it is a sequence\n    for i in text:\n        if i.isalpha():\n            if i.islower() == True:\n                if i.isupper() == True:\n                    return False\n            else:\n                if i.isupper() == True:\n                    return False\n    return True\n",
        "num_ids": 85
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[^a-zA-Z0-9_]')\n    return bool(pattern.match(text))\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lower = text.lower()\n    count = 0\n    for word in text_lower:\n        if re.search(\"[a-zA-Z0-9]\", word):\n            count = count + 1\n    if count == 0:\n        return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Case 1: Input string contains only lowercase letters.\n    if re.search('[a-z]', text):\n        return True\n",
        "num_ids": 35
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    letters = re.compile(r'[a-z]+')\n    num = re.compile(r'\\d+')\n    upper = re.compile(r'[A-Z]+')\n    special = re.compile(r'[!&#$%()*+,-./:;<=>?@[\\]^_`{|}~]')\n    special_s = re.compile(r'[!&#$%()*+,-./:;<=>?@[\\]^_`{|}~]+')\n    result = False\n    for letter in text:\n        if (letters.match(letter)):\n            result = True\n            break\n        elif (num.match(letter)):\n            result = True\n            break\n        elif (upper.match(letter)):\n            result = True\n            break\n        elif (special.match(letter)):\n            result = True\n            break\n        elif (special_s.match(letter)):\n            result = True\n            break\n    return result\n",
        "num_ids": 248
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #    LOWERCASE LETTERS\n    lower_case = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for char in lower_case:\n        if char in text:\n            return True\n    return False\n",
        "num_ids": 96
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Set the variables and the regexes\n    lowercase_regex = re.compile(r'[a-z]')\n    underscore_regex = re.compile(r'_')\n    #Run the regex and check if the input string is lowercase or not\n    if lowercase_regex.search(text) and underscore_regex.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 102
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.findall(r\"[A-Za-z0-9_]*$\",text.lower()))\n",
        "num_ids": 33
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    text = text.lower()\n    \n    return text.find(\"_\")>-1 and text.find(\"-\")>-1 and text.find(\"_\")>-1 and text.find(\"-\")>-1 and text.find(\"_\")>-1 and text.find(\"-\")>-1\ndef text_lowercase_letters(text):\n    '''\n    Write a function that returns true if the input string contains sequences of lowercase letters.\n    '''\n    \n    text = text.lower()\n    \n    for i in range(len(text)-2):\n        if text[i:i+3].isalpha():\n            return True\n    return False\ndef text_lowercase_punct(text):\n    '''\n    Write a function that returns true if the input string contains sequences of lowercase letters.\n    '''\n    \n    text = text.lower()\n    \n    for i in range(len(text)-2):\n        if text[i:i+3].isdigit():\n            return True\n    return False\ndef text_lowercase_numbers(text):\n    '''\n    Write a function that returns true if the input string contains sequences of lowercase numbers.\n    '''\n    \n    text = text.lower()\n    \n    for i in range(len(text)-2):\n        if text[i:i+3].isdigit():\n            return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if len(a)!= 4:\n        return \"Please enter 4 values for side length.\"\n    return a[0] * a[1] * a[2]\n",
        "num_ids": 41
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2 + 2 * a * (a + 1)\n",
        "num_ids": 18
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = (a * 4) + (a * 1)\n    return perimeter\n",
        "num_ids": 22
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    print(a)\n    perimeter = a ** 2\n    return perimeter\n",
        "num_ids": 20
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int:\n        raise TypeError(\"a must be an integer\")\n    if a < 0:\n        raise ValueError(\"a must be positive\")\n    return a ** 2 * 4\n    \na = int(input(\"Give a side: \"))\nprint(square_perimeter(a))",
        "num_ids": 74
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Your code here\n    return ",
        "num_ids": 11
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4/3)*a*a\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int:\n        raise TypeError\n    elif a < 0:\n        raise ValueError\n    elif a == 0:\n        return 0\n    else:\n        return a * 4\n",
        "num_ids": 52
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [string[i:j] for i,j in zip(string[0::2], string[1::2])]\n",
        "num_ids": 32
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i] == string[j]:\n                output.append(string[i])\n    return output\n",
        "num_ids": 57
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Declare result as a empty list\n    result = []\n    \n    # Iterate over string \n    for char in string: \n        # If char is in the second string\n        if char in string: \n            # Add to result \n            result.append(char)\n    \n    # Return result \n    return result\n    \n",
        "num_ids": 82
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    arr = []\n    for c in string:\n        if c in arr:\n            arr.remove(c)\n        else:\n            arr.append(c)\n    return arr\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    list_string = []\n    for i in string:\n        if i.lower() not in list_string:\n            list_string.append(i.lower())\n    for i in list_string:\n        char_list.append(i.replace(\" \",\"\"))\n    return char_list\n",
        "num_ids": 78
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #convert string to lowercase\n    string = string.lower()\n    #convert string to list of characters\n    list = list(string)\n    return list\n    \ndef list_to_str(list):\n    '''\n    Write a function to convert a list of characters back to a string.\n    '''\n    #convert string to list of characters\n    list = list_to_string(list)\n    #convert list to string\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    return list\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of characters to a string.\n    '''\n    #convert string to list of characters\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    return list\n    \ndef encrypt(string, key):\n    '''\n    Write a function to encrypt the string given as parameter. \n    '''\n    #convert string to list of characters\n    list = list(string)\n    #convert list to string\n    list = list_to_string(list)\n    #print the list of characters\n    print(list)\n    #encode the list of characters\n    list = list_to_string(list_encode(list))\n    #print the list of characters after encoding\n    print(list)\n    #decode the list of characters\n    list = list_to_string(list_decode(list))\n    #print the list of characters after decoding\n    print(list)\n    #print a list of characters with 0s\n    list = list_to_string(list_convert_to_binary(list))\n    #print the list of characters after converting to binary\n    print(list)\n    #encrypt the list of characters with a modulo\n    list = list_to_string(list_mod_divide(list, key))\n    #print the list of characters after modulo\n    print(list)\n    #decrypt the list of characters with a modulo\n    list = list_to_string(list_mod_divide(list, key))\n    #print the list of characters after modulo\n    print(list)\n    \ndef decrypt(string, key):\n    '''\n    Write a function to decrypt the string given as parameter.\n    '''\n    #convert string to list of characters\n    list = list(string)\n    #convert list to string\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #print the list of characters\n    print(list)\n    #encode the list of characters\n    list = list_to_string(list_encode(list))\n    #print the list of characters after encoding\n    print(list)\n    #decode the list of characters\n    list = list_to_string(list_decode(list))\n    #print the list of characters after decoding\n    print(list)\n    #print a list of characters with 0s\n    list = list_to_string(list_convert_to_binary(list))\n    #print the list of characters after converting to binary\n    print(list)\n    #decrypt the list of characters with a modulo\n    list = list_to_string(list_mod_divide(list, key))\n    #print the list of characters after modulo\n    print(list)\n    #decrypt the list of characters with a modulo\n    list = list_to_string(list_mod_divide(list, key))\n    #print the list of characters after modulo\n    print(list)\n    \ndef list_convert_to_binary(list):\n    '''\n    Write a function to convert a list of characters to a binary string.\n    '''\n    #convert string to list of characters\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    return list\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of characters back to a string.\n    '''\n    #convert string to list of characters\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    return list\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of characters to a string.\n    '''\n    #convert string to list of characters\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    return list\n    \ndef list_mod_divide(list, key):\n    '''\n    Write a function to convert a list of characters to a modulo format.\n    '''\n    #convert string to list of characters\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert list to string again\n    list = list_to_string(list)\n    #convert lis",
        "num_ids": 639
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return_list = []\n    for i in string:\n        if i in string:\n            return_list.append(i)\n    return return_list\n",
        "num_ids": 39
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\n",
        "num_ids": 9
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # assume the first string and second string are immutable\n    # if the second string is a mutable object then first string should be mutable\n    if not string:\n        return []\n    # create a list to store the replaced characters\n    result = []\n    # create a set to store the repeated characters\n    seen = set()\n    # for every character in the first string\n    for char in string:\n        # if the character is in the second string\n        if char in seen:\n            # append the character to the list\n            result.append(char)\n        # if the character is not in the second string\n        else:\n            # if the character is a duplicate of the first character\n            if char!= string[0]:\n                # add the character to the list\n                result.append(char)\n            # if the character is a duplicate of the first character\n            else:\n                # add the character to the list\n                result.append(char)\n        # add the character to the set\n        seen.add(char)\n    # return the list\n    return result\n",
        "num_ids": 245
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    for ch in string:\n        if ch in string:\n            lst.append(ch)\n    return(lst)\n",
        "num_ids": 38
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Test all possible combinations of integers\n    for i in range(len(arraynums)):\n        if i == 0 or arraynums[i-1]!= arraynums[i]:\n            print(\"--\", end=\" \")\n            is_duplicate = duplicate(arraynums, i, 0)\n            if is_duplicate == True:\n                print(\"yes\")\n            else:\n                print(\"no\")\n        else:\n            print(\"no\")\n",
        "num_ids": 113
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    a = arraynums\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Define a set for storing duplicate numbers.\n    dupset = set()\n    for num in arraynums:\n        # If num already exists in set, then return false.\n        if num in dupset:\n            return False\n        # Add num to set.\n        dupset.add(num)\n    # Return true if there are no duplicate numbers.\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    count = 0\n    for num in arraynums:\n        if num in arraynums:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = duplicate(arraynums)\n    assert len(result) == 1\n    print(f'{result[0] = }')\n",
        "num_ids": 35
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert len(arraynums)>1\n    duplicates = []\n    for i in arraynums:\n        if i in duplicates:\n            return True\n        else:\n            duplicates.append(i)\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    for x in array:\n        if x in array:\n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = arraynums.copy()\n    arraynums.sort()\n",
        "num_ids": 22
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    arraynums.sort()\n    print(arraynums)\n    for i in range(len(arraynums)-1):\n        if(arraynums[i+1] - arraynums[i] == 1):\n            print(\"Repeated\")\n            break\n    else:\n        print(\"No repeated element\")\n",
        "num_ids": 85
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x >= 5 and x <= 10):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%4 == 0:\n        return True\n    else: \n        return False\n",
        "num_ids": 24
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x == 1):\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1: \n        return True\n    elif x == 2: \n        return False\n    elif x > 2 and x <= 10: \n        return True\n    elif x > 10: \n        return False\n    else: \n        return False\n",
        "num_ids": 66
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x >= 0 and x <= 100)\n    # If the input is a positive number, you should return True, otherwise, you should return False.\n",
        "num_ids": 37
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 2 == 1)",
        "num_ids": 11
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 1:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x>=0 and x<=20\n",
        "num_ids": 14
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = ''\n    while num:\n        rev_num = str(num % 2) + rev_num\n        num = num // 2\n    return rev_num\n",
        "num_ids": 43
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num>0:\n        int1 = num % 10\n        num //= 10\n        reverse = reverse * 10 + int1\n    if reverse == num:\n        return True\n    return False\n    \n",
        "num_ids": 55
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if rev == 0:\n        return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = int(len(num)-1)\n    if int(num[0]) == 0:\n        rev = -1\n    if rev % 2 == 0:\n        return int(num)\n    else:\n        return int(num[::-1])\n",
        "num_ids": 71
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    num = str(num)\n    if len(num) == 1:\n        return True\n    else:\n        if num[0] == '0':\n            return False\n        else:\n            rev_num = int(num[1:])\n            if int(num[0]) == 1:\n                return True\n            elif int(num[0]) == 2:\n                return False\n            else:\n                if rev_num < 2:\n                    return True\n                else:\n                    return False\ndef is_prime(num):\n    '''\n    Write a python function to check if a given number is a prime number.\n    '''\n    if num == 0:\n        return False\n    if num == 1:\n        return False\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revnum = int(str(num)[::-1])\n    if revnum == 0:\n        return 0\n    else:\n        return revnum\n    ",
        "num_ids": 39
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num >= 2:\n        rev_num = rev_num * 2 + num % 2\n        num = num // 2\n        if rev_num == num:\n            return True\n        elif rev_num == 1:\n            return False\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = ''\n    for i in range(len(num)):\n        rev = num[i] + rev\n    if num == rev:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return True\n    if num==1:\n        return False\n    return rev(num//2)+rev(num-1)\n",
        "num_ids": 39
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #Your code here\n    rev=0\n    for i in range(1,num):\n        rev=rev*2+1\n    if(num==rev):\n        print(num,'is one less than twice its reverse')\n    else:\n        print(num,'is not one less than twice its reverse')\n        \n    \n    \nif __name__ == '__main__':\n    #n=int(input())\n    num=int(input())\n    rev(num)\n    \n    \n    ",
        "num_ids": 119
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maximum = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] > maximum : \n            maximum = arr[i]\n    return maximum\n",
        "num_ids": 48
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == []:\n        return 0\n    max_num = arr[0]\n    for i in range(1,len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n",
        "num_ids": 65
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # define list of numbers as an array\n    list_of_numbers = list(map(int, str(arr)))\n    \n    # define result as 0\n    result = 0\n    \n    # iterate through list\n    for i in range(len(list_of_numbers)-1) :\n        # iterate through digits\n        for j in range(len(list_of_numbers[i]) - 1) :\n            # assign the first number to result\n            if (list_of_numbers[i][j] > list_of_numbers[i][j + 1]) :\n                result = list_of_numbers[i][j] + result\n            # if current number > largest number append it\n            elif (list_of_numbers[i][j] > result) :\n                result = list_of_numbers[i][j] + result\n    return result\n",
        "num_ids": 212
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_Num_Eq(arr):\n        '''\n        Find the maximum element in array.\n        '''\n        max = arr[0]\n        for i in range(1,len(arr)):\n            if arr[i] > max :\n                max = arr[i]\n        return max\n",
        "num_ids": 46
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Time complexity: O(n^2)\n    # Space Complexity: O(1)\n",
        "num_ids": 25
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr :\n        if len(i) > max :\n            max = len(i)\n    return max\n",
        "num_ids": 36
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    n_max = -1\n    max_num = -1\n    # print(n)\n    for i in range(n):\n        num = int(arr[i])\n        num_max = 0\n        while num!= 0 :\n            num_max = num_max * 10 + num % 10\n            num = num // 10\n        if num_max > max_num:\n            max_num = num_max\n    return max_num\n",
        "num_ids": 115
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Step 1 : initializing an empty array\n    arr_len = len(arr)\n    ans = arr[arr_len - 1]\n    \n    for i in range(arr_len - 2, -1, -1): \n        arr[i] = arr[i] + arr[i + 1]\n        \n        if arr[i] >= ans: \n            ans = arr[i]\n    \n    return ans\n",
        "num_ids": 104
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_Num(array, n) : \n        # return max of array \n        return max(array)\n",
        "num_ids": 30
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 :\n        return None\n    else :\n        if arr[0] == 0 :\n            return arr[0]\n        else :\n            return max(arr) + find_Max_Num(arr[1:])\n",
        "num_ids": 60
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (-x)<=y and (y)>=-x",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x,y\n",
        "num_ids": 8
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # TODO: write your code here\n    # copy your code here\n    return not(x==y)\n",
        "num_ids": 28
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return -1\n    elif x<0 and y>0:\n        return 1\n    elif x>0 and y>0:\n        return -1\n    elif x>0 and y<0:\n        return 1\n    elif x<0 and y<0:\n        return -1\n    elif x==0 and y==0:\n        return 0\n    elif x>0 and y==0:\n        return -1\n    else:\n        return 1\ndef make_string(x,y):\n    '''\n    Write a python function to print the given string.\n    '''\n    string = str(x)+str(y)\n    return string\ndef make_string_two(x,y):\n    '''\n    Write a python function to print the given two string.\n    '''\n    string = str(x)+str(y)\n    return string\ndef multiply(x,y):\n    '''\n    Write a python function to multiply two given number.\n    '''\n    result = x*y\n    return result\ndef read_file(filename):\n    '''\n    Function to read a file.\n    '''\n    infile = open(filename, \"r\")\n    return infile.readlines()\ndef convert_to_int(x):\n    '''\n    Function to convert a string into an integer.\n    '''\n    return int(x)\ndef convert_to_float(x):\n    '''\n    Function to convert a string into a float.\n    '''\n    return float(x)\ndef count_numbers(x,y):\n    '''\n    Function to count the number of characters.\n    '''\n    count = 0\n    if len(x)==len(y):\n        for i in range(len(x)):\n            count+=1\n    return count\ndef print_line(x,y):\n    '''\n    Function to print line.\n    '''\n    print(x,end=\"\")\n    print(y)\ndef parse_string(x):\n    '''\n    Function to parse a string into a list of strings.\n    '''\n    return x.split()\ndef print_list(x):\n    '''\n    Function to print list.\n    '''\n    print(x)\ndef check_for_op(x,y):\n    '''\n    Function to check whether there is an operation between the string and the given value.\n    '''\n    op = 0\n    if(opposite_Signs(x,y)==1):\n        op = 1\n    else:\n        op = 0\n    return op\ndef get_dictionary(x):\n    '''\n    Function to get a dictionary.\n    '''\n    a = x.split(\";\")\n    d = dict()\n    for i in a:\n        if i.find(\"=\")!=-1:\n            i = i.split(\"=\")\n            d[i[0]] = i[1]\n    return d\ndef concatenate(x,y):\n    '''\n    Function to concatenate two given strings.\n    '''\n    s = x+y\n    return s\ndef replace_a_b(x,y):\n    '''\n    Function to replace all occurrences of a and b in a string.\n    '''\n    s = x.replace(y,\"\")\n    return s\ndef replace_a_b_f(x,y):\n    '''\n    Function to replace all occurrences of a and b in a string.\n    '''\n    s = x.replace(y,\"\")\n    s = s.replace(y,\"\")\n    return s\ndef check_for_a(x):\n    '''\n    Function to check whether there is a substitution in a string.\n    '''\n    if(x.find(\"=\")!=-1):\n        a = x.split(\"=\")\n        return True\n    else:\n        return False\ndef check_for_a_b(x):\n    '''\n    Function to check whether there is a substitution in a string.\n    '''\n    if(x.find(\"=\")!=-1):\n        a = x.split(\"=\")\n        b = a[1].split(\"&\")\n        return True\n    else:\n        return False\ndef find_dictionary_value(x):\n    '''\n    Function to find the value in a dictionary.\n    '''\n    if(x.find(\"=\")!=-1):\n        a = x.split(\"=\")\n        return a[1]\n    else:\n        return \"NULL\"\ndef dictionary_to_string(x):\n    '''\n    Function to convert a dictionary into a string.\n    '''\n    s = \"\"\n    for i in x:\n        if i.find(\"=\")!=-1:\n            s+=i\n    return s\ndef string_to_dictionary(x):\n    '''\n    Function to convert a string into a dictionary.\n    '''\n    s = x.split(\";\")\n    d = dict()\n    for i in s:\n        if i.find(\"=\")!=-1:\n            i = i.split(\"=\")\n            d[i[0]] = i[1]\n    return d\ndef is_duplicate(x):\n    '''\n    Function to check whether a given string is a duplicate.\n    '''\n    if x.count(x)==1:\n        return False\n    else:\n        return True\ndef split_string(x):\n    '''\n    Function to split a given string into a list of words.\n    '''\n    return x.split()\ndef reverse_string(x):\n    '''\n    Function to reverse a given string.\n    '''\n    return x[::-1]\ndef convert_to_list(x):\n    '''\n    Function to convert a given string into a list.\n    '''\n    return x.split()\ndef calculate(x):\n    '''\n    Function to calculate the sum of two numbers.\n    '''\n    return str(multiply(convert_to_int(x[0]),convert_to_int(x[1])))\ndef is_valid(x):\n    '''\n    Function to check whether a given string is a valid string.\n    '''\n    if x.find(\".\")!=-1:\n        return False\n    elif len(x)>=4:\n        return False\n    elif len(x)==1 and x.isalpha():\n        return True\n    elif len(x)>=3 and x.isalpha():\n        return False\n    elif len(x)>=2 and x.isalpha():\n        return False\n    elif len(x)>=1 and x.isalpha():\n        return False\n    else:\n        return True\ndef is_valid_string(x):\n    '''\n    Function to check whether a given string is a valid string.\n    '''\n    if x.find(\".\")!=-1:\n        return False\n    elif len(x)>=4:\n        return False\n    elif len(x)>=3 and x.isalpha():\n        return False\n    elif len(x)>=2 and x.isalpha():\n        return False\n    elif len(x)>=1 and x.isalpha():\n        return False\n    else:\n        return True\ndef get_list(x):\n    '''\n    Function to convert a given string into a list.\n    '''\n    return x.split()\ndef is_valid_string_two(x):\n    '''\n    Function to check whether a given string is a valid string.\n    '''\n    if x.find(\".\")!=-1:\n        return False\n    elif len(x)>=4:\n        return False\n    elif len(x)>=3 and x.isalpha():\n        return True\n    elif len(x)>=2 and x.isalpha():\n        return False\n    elif len(x)>=1 and x.isalpha():\n        return False\n    else:\n        return True\ndef reverse_string_two(x):\n    '''\n    Function to reverse a given string.\n    '''\n    return x[::-1]\ndef find_list(x):\n    '''\n    Function to find a given list.\n    '''\n    return x.split()\ndef convert_to_list_two(x):\n    '''\n    Function t",
        "num_ids": 5
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y<0):\n        return True\n    elif (x>0 and y>0):\n        return False\n    elif (x>0 and y<0):\n        return False\n    elif (x<0 and y>0):\n        return True\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x > y or (x < 0 and y < 0)\n",
        "num_ids": 18
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return False\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0:\n        x=x*-1\n    if y<0:\n        y=y*-1\n    return (x,y)\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<y): \n        return (x,-y)\n    else:\n        return (-x,y)\n        \ndef main():\n    '''\n    Write your own version of the above function to do the same operation.\n    '''\n    x=int(input(\"Enter first number:\"))\n    y=int(input(\"Enter second number:\"))\n    print(opposite_Signs(x,y))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 58
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    result = 0 \n    if(x > y):\n        result = 1\n    else:\n        result = -1\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n-1))/2\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    elif (n == 2): \n        return 3\n    else: \n        return n * (n + 1) // 2\n",
        "num_ids": 60
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    else:\n        return n*(n+1)/2\n",
        "num_ids": 39
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n // 2\n    if a%2 == 0:\n        return (a//2)-1\n    else:\n        return (a//2)\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 2 or n == 3:\n        return True\n    elif n%2 == 0 or n<2:\n        return False\n    else:\n        for i in range(5,int(math.sqrt(n))+1,6):\n            if n%i==0:\n                return False\n        return True\n        \ndef is_prime_number(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if num == 2 or num == 3 or num == 5:\n        return True\n    elif num%2 == 0 or num<2:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(num)),6):\n            if num%i==0:\n                return False\n        return True\n    \ndef is_prime_number2(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if num == 2 or num == 3 or num == 5:\n        return True\n    elif num%2 == 0 or num<2:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(num)),6):\n            if num%i==0:\n                return False\n        return True\n",
        "num_ids": 80
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n * (n + 1) / 2\n",
        "num_ids": 36
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==1:\n        return 1\n    if n%2==0:\n        return n//2\n    else:\n        return (n+1)//2\n    \nprint(is_octagonal(13))",
        "num_ids": 53
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 6\n    if n == 4: return 9\n    if n == 5: return 18\n    if n == 6: return 27\n    if n == 7: return 60\n    if n == 8: return 81\n    if n == 9: return 144\n    if n == 10: return 243\n    if n == 11: return 739\n    if n == 12: return 1092\n    if n == 13: return 1153\n    if n == 14: return 1218\n    if n == 15: return 1333\n    if n == 16: return 1460\n    if n == 17: return 1581\n    if n == 18: return 1762\n    if n == 19: return 1872\n    if n == 20: return 1911\n    if n == 21: return 2113\n    if n == 22: return 225\n    if n == 23: return 2461\n    if n == 24: return 2488\n    if n == 25: return 2565\n    if n == 26: return 2589\n    if n == 27: return 2695\n    if n == 28: return 2749\n    if n == 29: return 2798\n    if n == 30: return 2851\n    if n == 31: return 2899\n    if n == 32: return 2961\n    if n == 33: return 3066\n    if n == 34: return 3081\n    if n == 35: return 3143\n    if n == 36: return 3172\n    if n == 37: return 3201\n    if n == 38: return 3228\n    if n == 39: return 3249\n    if n == 40: return 3266\n    if n == 41: return 3311\n    if n == 42: return 3328\n    if n == 43: return 3345\n    if n == 44: return 3369\n    if n == 45: return 3462\n    if n == 46: return 3491\n    if n == 47: return 3420\n    if n == 48: return 3431\n    if n == 49: return 3438\n    if n == 50: return 3449\n    if n == 51: return 3478\n    if n == 52: return 3501\n    if n == 53: return 3528\n    if n == 54: return 3545\n    if n == 55: return 3569\n    if n == 56: return 3582\n    if n == 57: return 3606\n    if n == 58: return 3621\n    if n == 59: return 3638\n    if n == 60: return 3651\n    if n == 61: return 3680\n    if n == 62: return 3681\n    if n == 63: return 3692\n    if n == 64: return 3711\n    if n == 65: return 3728\n    if n == 66: return 3745\n    if n == 67: return 3769\n    if n == 68: return 3788\n    if n == 69: return 3803\n    if n == 70: return 3824\n    if n == 71: return 3833\n    if n == 72: return 3852\n    if n == 73: return 3871\n    if n == 74: return 3893\n    if n == 75: return 3906\n    if n == 76: return 3921\n    if n == 77: return 3938\n    if n == 78: return 3949\n    if n == 79: return 3972\n    if n == 80: return 3981\n    if n == 81: return 4001\n    if n == 82: return 4008\n    if n == 83: return 4012\n    if n == 84: return 4033\n    if n == 85: return 4042\n    if n == 86: return 4071\n    if n == 87: return 4088\n    if n == 88: return 4103\n    if n == 89: return 4122\n    if n == 90: return 4151\n    if n == 91: return 4166\n    if n == 92: return 4183\n    if n == 93: return 4202\n    if n == 94: return 4211\n    if n == 95: return 4229\n    if n == 96: return 4266\n    if n == 97: return 4281\n    if n == 98: return 4288\n    if n == 99: return 4306\n    if n == 100: return 4321\n    if n == 101: return 4339\n    if n == 102: return 4363\n    if n == 103: return 4380\n    if n == 104: return 4381\n    if n == 105: return 4398\n    if n == 106: return 4413\n    if n == 107: return 4422\n    if n == 108: return 4431\n    if n == 109: return 4457\n    if n == 110: return 4491\n    if n == 111: return 4524\n    if n == 112: return 4533\n    if n == 113: return 4562\n    if n == 114: return 4601\n    if n == 115: return 4618\n    if n == 116: return 4635\n    if n == 117: return 4657\n    if n == 118: return 4691\n    if n == 119: return 4718\n    if n == 120: return 4735\n    if n == 121: return 4779\n    if n == 122: return 4811\n    if n == 123: return 4828\n    if n == 124: return 4845\n    if n == 125: return 4869\n    if n == 126: return 4879\n    if n == 127: return 4891\n    if n == 128: return 4928\n    if n == 129: return 4941\n    if n == 130: return 4948\n    if n == 131: return 4955\n    if n == 132: return 4987\n    if n == 133: return 5013\n    if n == 134: return 5024\n    if n == 135: return 5033\n    if n == 136: return 5042\n    if n == 137: return 5071\n    if n == 138: return 5088\n    if n == 139: return 5099\n    if n == 140: return 5116\n    if n == 141: return 5141\n    if n == 142: return 5156\n    if n == 143: return 5161\n    if n == 144: return 5168\n    if n == 145: return 5175\n    if n == 146: return 5189\n    if n == 147: return 5223\n    if n == 148: return 5250\n    if n == 149: return 5275\n    if n == 150: return 5286\n    if n == 151: return 5302\n    if n == 152: return 5326\n    if n == 153: return 5342\n    if n == 154: return 5371\n    if n == 155: return 5401\n    if n == 156: return 5428\n    if n == 157: return 5445\n    if n == 158: return 5480\n    if n == 159: return 5496\n    if n == 160: return 5521\n    if n == 161: return 5538\n    if n == 162: return 5549\n    if n == 163: return 5566\n    if n == 164: return 5583\n    if n == 165: return 5607\n    if n == 166: return 5622\n    if n == 167: return 5637\n    if n == 168: return 5661\n    if n == 169: return 5680\n    if n == 170: return 5713\n    if n == 171: return 5728\n    if n == 172: return 5745\n    if n == 173: return 5769\n    if n == 174: return 5791\n    if n == 175: return 5809\n    if n == 176: return 5815\n    if n == 177: return 5829\n    if n == 178: return 5847\n    if n == 179: return 5872\n    if n == 180: return 5881\n    if n == 181: return 5907\n    if n == 182: return 5921\n    if n == 183: return 5938\n    if n == 184: return 5955\n    if n == 185: return 5961\n    if n == 186: return 5981\n    if n == 187: return 6007\n    if n == 188: return 6013\n    if n == 189: return 6027\n    if n == 190: return 6044\n    if n == 191: return 6073\n    if n == 192: return 6100\n    if n == 193: return 6125\n    if n == 194: return 6147\n    if n == 195: return 6162\n    if n == 196: return 6171\n    if n == 197: return 6188\n    if n == 198: return 6205\n    if n == 199: return 6212\n    if n == 200: return 6230\n    if n == 201: return 6247\n    if n == 202: return 6265\n    if n == 20",
        "num_ids": 2021
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) / 2\n    \n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    result = 0\n    i = 1\n    while (i * i < n):\n        if (n % i == 0):\n            result = i\n            break\n        else:\n            i += 1\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(1, len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    res += 2\n        return res\n        \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        res = ",
        "num_ids": 54
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if s=='':\n        return 0\n    \n    if len(s)==1:\n        return 1\n    \n    if len(s)==2:\n        return 1 + count_Substrings(s[1:])\n    \n    return 1 + count_Substrings(s[1:len(s)])\n        \nprint(count_Substrings('12345'))\nprint(count_Substrings('123'))\nprint(count_Substrings('12345'))\nprint(count_Substrings('123'))\nprint(count_Substrings('123'))\nprint(count_Substrings('1'))\nprint(count_Substrings('22'))\nprint(count_Substrings('1111'))\nprint(count_Substrings('1111'))\n",
        "num_ids": 180
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 1\n    if s[0]!= s[1]:\n        return 0\n    c = 1\n    if len(s) % 2:\n        return 0\n    for i in range(len(s) - 1):\n        if s[i]!= s[i + 1]:\n            return 0\n        c += 1\n    return c\ndef find_index(s, x, l, h):\n    '''\n    Write a python function to find the index of the first occurrence of x in the string.\n    '''\n    if l > h:\n        return -1\n    if l == h:\n        return -1\n    mid = (l + h) // 2\n    if s[mid] == x:\n        return mid\n    if s[mid] < x:\n        return find_index(s, x, mid + 1, h)\n    return find_index(s, x, l, mid - 1)\n",
        "num_ids": 95
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    N = len(s)\n    substring = defaultdict(int)\n    count = 0\n    for i in range(1, N+1):\n        if len(s[:i]) == 0:\n            count += 1\n        else:\n            for j in range(len(s[:i])):\n                if s[j] == s[i]:\n                    substring[s[j]] += 1\n    for i in substring:\n        count += substring[i]\n    return count\n",
        "num_ids": 119
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substring_count=0\n    for i in range(0,len(s)-1):\n        if (s[i]!=s[i+1]):\n            substring_count=substring_count+1\n    return substring_count\n",
        "num_ids": 62
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    count = 0\n    \n    if len(s) == 0:\n        return 0\n    \n    if s[0] == '0':\n        return 1\n",
        "num_ids": 42
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    s = [int(i) for i in s]\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            d[s[i]+s[j]] += 1\n    return d\n",
        "num_ids": 71
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if s == \"\":\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 1 if int(s[0]) == int(s[1]) else 2\n    if int(s[0]) == int(s[1]):\n        return count_Substrings(s[1:])\n    else:\n        sub_1 = count_Substrings(s[:-1])\n        sub_2 = count_Substrings(s[1:])\n        sub_1 += sub_2\n        sub_2 += sub_1\n        return sub_1 if sub_1 > sub_2 else sub_2\n",
        "num_ids": 159
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_no_digit = 0\n    count_digit = 0\n    for i in range(len(s)):\n        count_digit = 0\n        for j in range(i, len(s)):\n            if int(s[i:j+1]) == 0:\n                count_digit = count_digit + 1\n        count_digit = count_digit + 1\n        count_no_digit = count_no_digit + count_digit\n    return count_no_digit\n",
        "num_ids": 114
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        count=count+s.count(s[i])\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    index = 0\n    for i in range(1, len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n            index = i\n    return index, min\n",
        "num_ids": 61
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    minimum = xs[0]\n    for x in xs:\n        if x < minimum:\n            minimum = x\n    return minimum\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = None\n    smallest_num = None\n    for x in xs:\n        if smallest_num == None or x < smallest_num:\n            smallest_num = x\n        elif smallest_num == x:\n            smallest_number = x\n    return smallest_number\n",
        "num_ids": 73
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = 0\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "num_ids": 33
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # list_num = []\n    # for i in xs:\n    #     if xs.count(i) == 1:\n    #         list_num.append(i)\n    # print(min(list_num))\n    min_num = sorted(xs)[0]\n    return min_num\n",
        "num_ids": 75
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    smallest_index = 0\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n            smallest_index = i\n    return smallest_index\n",
        "num_ids": 69
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    for num in xs:\n        if num < min(xs):\n            min_index = xs.index(num)\n    return xs[min_index]\n",
        "num_ids": 42
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Find the smallest element in the list\n    min_val = xs[0]\n    smallest_index = 0\n    for i in range(len(xs)):\n        if xs[i] < min_val:\n            min_val = xs[i]\n            smallest_index = i\n    return smallest_index\n",
        "num_ids": 81
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    lowest = xs[0]\n    lowest_index = 0\n    for index, num in enumerate(xs):\n        if num < lowest:\n            lowest = num\n            lowest_index = index\n",
        "num_ids": 53
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise TypeError(\"Input list cannot be empty\")\n",
        "num_ids": 26
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if (len(test_list) < 2):\n        return 0\n    elif(len(test_list) == 2):\n        return min(test_list[0] - test_list[1], test_list[1] - test_list[0])\n    else:\n        return max(abs(test_list[0] - test_list[1]), abs(test_list[1] - test_list[0]))\n",
        "num_ids": 104
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in test_list:\n        for j in range(0,i+1):\n            diff = abs(j-i)\n            if diff > max_difference:\n                max_difference = diff\n    print(\"Maximum difference between available pairs is %d\" %(max_difference))\n    return max_difference\n",
        "num_ids": 87
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n",
        "num_ids": 86
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            result = max(result,abs(test_list[i]-test_list[j]))\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # create list to store all difference\n    all_diff = []\n    for i in range(len(test_list)):\n        diff = test_list[i] - test_list[i+1]\n        all_diff.append(diff)\n",
        "num_ids": 61
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    first_diff = abs(test_list[0][1] - test_list[1][1])\n    second_diff = abs(test_list[0][0] - test_list[1][0])\n    return max(first_diff, second_diff)\n",
        "num_ids": 65
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # find number of available pairs\n    pairs = test_list[0]\n    # calculate minimum number of pairs\n    n = len(test_list)\n    # create new list\n    new_list = []\n    # populate new list with pairs\n    for i in range(0, n):\n        new_list.append(pairs[i])\n    # find the maximum difference\n    max_difference = 0\n    for i in range(0, n):\n        if(new_list[i] - new_list[i+1] > max_difference):\n            max_difference = new_list[i] - new_list[i+1]\n    return max_difference\n",
        "num_ids": 164
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    first_val = max(test_list[0], test_list[1])\n    for i in range(2, len(test_list)):\n        #get the second element of the tuple\n        val = test_list[i]\n        #get the first element of the tuple\n        first_val = test_list[i - 2]\n        if val - first_val > max_difference:\n            max_difference = val - first_val\n    return max_difference\n",
        "num_ids": 123
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # Write your code here.\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 92
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = [x[1] for x in subjectmarks]\n    marks.sort()\n    return marks\n",
        "num_ids": 27
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks=[]\n    for i in range(len(subjectmarks)):\n        marks.append(subjectmarks[i][1])\n    print(marks)\n    return marks\n",
        "num_ids": 43
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda k:k[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sort_marks = sorted(subjectmarks, key = lambda marks: marks[1])\n    return sort_marks\n",
        "num_ids": 28
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = sorted(subjectmarks, key=lambda x: (x[1]))\n    return marks\n",
        "num_ids": 26
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n    \ndef grade_subjects(subjects):\n    '''\n    Write a function that takes in a list of tuples as input and returns the grade for each tuple.\n    '''\n    return sorted(subjects, key=lambda x: x[1])\n    \ndef student_grades(grades):\n    '''\n    Sort the grades using the second value of each tuple.\n    '''\n    return sorted(grades, key=lambda x: x[1])\n    \ndef filter_grades(grades):\n    '''\n    Sort the grades using the second value of each tuple.\n    '''\n    return [x for x in grades if x[1] >= 90]\n    \ndef main():\n    grades = [\n    (5, 75), (5, 50), (4, 80), (5, 90),\n    (4, 80), (5, 80), (5, 90),\n    (6, 40), (6, 65), (7, 85),\n    (5, 60), (6, 90), (5, 90),\n    (6, 80), (5, 70), (6, 90),\n    (4, 40), (6, 40), (5, 50),\n    (3, 85), (4, 65), (5, 80),\n    (6, 60), (5, 70), (6, 60),\n    (5, 50), (4, 70), (6, 70),\n    (4, 65), (6, 80), (5, 70),\n    (7, 70), (5, 50), (4, 70),\n    ]\n    \n    print(\"The highest score is:\", max(grades))\n    print(\"The lowest score is:\", min(grades))\n    print(\"The average is:\", sum(grades)/len(grades))\n    print(\"The highest score is:\", grades[0][1])\n    print(\"The lowest score is:\", grades[-1][1])\n    print(\"The average is:\", grades[-1][1]/(len(grades)-1))\n    print(\"The highest score is:\", grades[0][1]/(len(grades)-1))\n    print(\"The lowest score is:\", grades[-1][1]/(len(grades)-1))\n    print(\"The average is:\", grades[-1][1]/(len(grades)-1))\n    print(\"The highest score is:\", grades[0][1]/(len(grades)-1))\n    print(\"The lowest score is:\", grades[-1][1]/(len(grades)-1))\n    print(\"The average is:\", grades[-1][1]/(len(grades)-1))\n    \n    subjects = [\n    (\"Maths\", \"A\", 93),\n    (\"Maths\", \"B\", 89),\n    (\"Maths\", \"C\", 100),\n    (\"Maths\", \"D\", 78),\n    (\"Maths\", \"E\", 79),\n    (\"Maths\", \"F\", 94),\n    (\"Maths\", \"G\", 95),\n    (\"Maths\", \"H\", 73),\n    (\"Maths\", \"I\", 79),\n    (\"Maths\", \"J\", 81),\n    (\"Maths\", \"K\", 81),\n    (\"Maths\", \"L\", 79),\n    (\"Maths\", \"M\", 89),\n    (\"Maths\", \"N\", 82),\n    (\"Maths\", \"O\", 81),\n    (\"Maths\", \"P\", 81),\n    (\"Maths\", \"Q\", 79),\n    (\"Maths\", \"R\", 78),\n    (\"Maths\", \"S\", 72),\n    (\"Maths\", \"T\", 71),\n    (\"Maths\", \"U\", 79),\n    (\"Maths\", \"V\", 79),\n    (\"Maths\", \"W\", 84),\n    (\"Maths\", \"X\", 70),\n    (\"Maths\", \"Y\", 81),\n    (\"Maths\", \"Z\", 80),\n    (\"Maths\", \"A\", 87),\n    (\"Maths\", \"B\", 83),\n    (\"Maths\", \"C\", 95),\n    (\"Maths\", \"D\", 90),\n    (\"Maths\", \"E\", 90),\n    (\"Maths\", \"F\", 86),\n    (\"Maths\", \"G\", 78),\n    (\"Maths\", \"H\", 70),\n    (\"Maths\", \"I\", 80),\n    (\"Maths\", \"J\", 83),\n    (\"Maths\", \"K\", 92),\n    (\"Maths\", \"L\", 86),\n    (\"Maths\", \"M\", 89),\n    (\"Maths\", \"N\", 84),\n    (\"Maths\", \"O\", 87),\n    (\"Maths\", \"P\", 85),\n    (\"Maths\", \"Q\", 85),\n    (\"Maths\", \"R\", 86),\n    (\"Maths\", \"S\", 86),\n    (\"Maths\", \"T\", 85),\n    (\"Maths\", \"U\", 85),\n    (\"Maths\", \"V\", 90),\n    (\"Maths\", \"W\", 87),\n    (\"Maths\", \"X\", 70),\n    (\"Maths\", \"Y\", 86),\n    (\"Maths\", \"Z\", 92),\n    (\"Maths\", \"A\", 100),\n    (\"Maths\", \"B\", 90),\n    (\"Maths\", \"C\", 95),\n    (\"Maths\", \"D\", 90),\n    (\"Maths\", \"E\", 90),\n    (\"Maths\", \"F\", 86),\n    (\"Maths\", \"G\", 86),\n    (\"Maths\", \"H\", 86),\n    (\"Maths\", \"I\", 85),\n    (\"Maths\", \"J\", 82),\n    (\"Maths\", \"K\", 86),\n    (\"Maths\", \"L\", 86),\n    (\"Maths\", \"M\", 89),\n    (\"Maths\", \"N\", 82),\n    (\"Maths\", \"O\", 86),\n    (\"Maths\", \"P\", 83),\n    (\"Maths\", \"Q\", 83),\n    (\"Maths\", \"R\", 85),\n    (\"Maths\", \"S\", 84),\n    (\"Maths\", \"T\", 90),\n    (\"Maths\", \"U\", 87),\n    (\"Maths\", \"V\", 89),\n    (\"Maths\", \"W\", 86),\n    (\"Maths\", \"X\", 85),\n    (\"Maths\", \"Y\", 84),\n    (\"Maths\", \"Z\", 89),\n    (\"Maths\", \"A\", 88),\n    (\"Maths\", \"B\", 91),\n    (\"Maths\", \"C\", 96),\n    (\"Maths\", \"D\", 87),\n    (\"Maths\", \"E\", 90),\n    (\"Maths\", \"F\", 86),\n    (\"Maths\", \"G\", 86),\n    (\"Maths\", \"H\", 86),\n    (\"Maths\", \"I\", 84),\n    (\"Maths\", \"J\", 82),\n    (\"Maths\", \"K\", 88),\n    (\"Maths\", \"L\", 89),\n    (\"Maths\", \"M\", 89),\n    (\"Maths\", \"N\", 83),\n    (\"Maths\", \"O\", 87),\n    (\"Maths\", \"P\", 85),\n    (\"Maths\", \"Q\", 85),\n    (\"Maths\", \"R\", 85),\n    (\"Maths\", \"S\", 86),\n    (\"Maths\", \"T\", 92),\n    (\"Maths\", \"U\", 85),\n    (\"Maths\", \"V\", 85),\n    (\"Maths\", \"W\", 84),\n    (\"Maths\", \"X\", 87),\n    (\"Maths\", \"Y\", 84),\n    (\"Maths\", \"Z\", 90),\n    (\"Maths\", \"A\", 92),\n    (\"Maths\", \"B\", 94),\n    (\"Maths\", \"C\", 95),\n    (\"Maths\", \"D\", 90),\n    (\"Maths\", \"E\", 90),\n    (\"Maths\", \"F\", 86),\n    (\"Maths\", \"G\", 85),\n    (\"Maths\", \"H\", 85),\n    (\"Maths\", \"I\", 82),\n    (\"Maths\", \"J\", 82),\n    (\"Maths\", \"K\", 88),\n    (\"Maths\", \"L\", 89),\n    (\"Maths\", \"M\", 89),\n    (\"Maths\", \"N\", 82),\n    (\"Maths\", \"O\", 85),\n    (\"Maths\", \"P\", 84),\n    (\"Maths\", \"Q\", 85),\n    (\"Maths\", \"R\", 85),\n    (\"Maths\", \"S\", 84),\n    (\"Maths\", \"T\", 92),\n    (\"Maths\", \"U\", 85),\n    (\"Maths\", \"",
        "num_ids": 1857
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda k:k[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    lst = []\n    for k,v in subjectmarks.items():\n        lst.append((k,v))\n    lst.sort(key=lambda x: x[1])\n    lst.sort(key=lambda x: x[1], reverse=True)\n    return lst\n",
        "num_ids": 72
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        sum += element\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_value = 0\n    for element in data_list:\n        sum_value += element\n    return sum_value\n",
        "num_ids": 31
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    data_list_flattened = []\n    for element in data_list:\n        if isinstance(element, list):\n            element_flattened = recursive_list_sum(element)\n            data_list_flattened.append(element_flattened)\n        else:\n            data_list_flattened.append(element)\n    return sum(data_list_flattened)\n    \ndef flatten_data(data):\n    '''\n    Given an array, create a recursive function that flattens\n    the array.\n    '''\n    if not data:\n        return []\n    if not data[0]:\n        return data[1:]\n    return flatten_data(data[0]) + flatten_data(data[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n",
        "num_ids": 7
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) <= 1:\n        return data_list\n    else:\n        return recursive_list_sum(data_list[1:]) + [data_list[0]]\n",
        "num_ids": 48
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    #create a sum function\n    sum_func = lambda x,y: x+y\n    \n    #append the elements of data_list to the sum list\n    sum_list = data_list[:]\n    for i in range(len(data_list)):\n        sum_list.append(recursive_list_sum(sum_func(sum_list[i],data_list[i])))\n    return sum_list[-1]\n    \ndata_list = [1,2,3]\nprint(recursive_list_sum(data_list))",
        "num_ids": 172
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # YOUR CODE HERE\n    sum = 0\n    for el in data_list:\n        sum += el\n",
        "num_ids": 27
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for data in data_list:\n        sum += data\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    l = len(data_list)\n    if l == 0:\n        return 0\n    elif l == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 67
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = 0\n    for i in list:\n        if i > 0:\n            n += 1\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Your code here\n    pos = []\n    for i in list:\n        if i == 0:\n            continue\n        else:\n            pos.append(i)\n    return len(pos)\n",
        "num_ids": 49
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i >= 0:\n            pos_count += 1\n    return pos_count\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for i in list:\n        if i>0:\n            pos=pos+1\n    return pos\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count(1)\n",
        "num_ids": 11
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item >= 0:\n            count += 1\n    return count\n    \n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(count)\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]>0:\n            count=count+1\n    return count\n    \n    \ndef pos_index(list,x):\n    '''\n    Write a python function to find the index of a value in a list.\n    '''\n    i=0\n    for i in range(len(list)):\n        if list[i]>=x:\n            return i\n    return -1\n    \n    \ndef main():\n    '''\n    1. Read the number of integers in the list.\n    2. Sort the list.\n    3. Print the minimum number of positive integers.\n    4. Print the maximum number of positive integers.\n    5. Print the mean number of positive integers.\n    '''\n    x=int(input(\"Enter the number of integers in the list: \"))\n    list=[]\n    for i in range(x):\n        list.append(int(input(\"Enter the integer \"+str(i+1)+\" : \")))\n        \n    list=sorted(list,reverse=True)\n    print(\"The sorted list is : \")\n    for i in range(x):\n        print(list[i],end=\" \")\n    print()\n    print(\"The minimum number of positive integers: \" +str(pos_index(list,min(list))))\n    print(\"The maximum number of positive integers: \" +str(pos_index(list,max(list))))\n    print(\"The mean number of positive integers: \" +str(pos_count(list)))\n    \n    \nif __name__==\"__main__\":\n    main()\n    \n",
        "num_ids": 202
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    return bell_number(n - 1) + bell_number(n - 2)\n",
        "num_ids": 33
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 0\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 1\n    else:\n        ways=1\n        for i in range(1,n+1):\n            ways=ways+bell_number(n-i)\n        return ways\n    \ndef print_bell(n):\n    '''\n    Print the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        print(1)\n    else:\n        print(bell_number(n))\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 0\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n    \ndef bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_1(n) + bell_number_2(n)\n",
        "num_ids": 22
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell(n, k):\n        if n == 0:\n            return 0\n        elif n < 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return bell(n - 1, k) + bell(n - 2, k)\n    return bell(n, k)\n",
        "num_ids": 79
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [0 for _ in range(n+1)]\n    for i in range(n+1):\n        if i == 0 or i == 1:\n            dp[i] = 1\n        else:\n            dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n",
        "num_ids": 81
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Logic\n    # Note: the problem is that there are only 3 possibilities for a set of 3 possible integers, this is the complete set of 3 numbers.\n    # For example, for n=6, there are 6 possible integers, so the answer is 3 ways to partition the set.\n    # We could also have n=1, this would be 1 possible integer.\n    # The complete set of 3 integers is [1,2,3]. \n    # In this case, there are 2 ways to partition it.\n",
        "num_ids": 116
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    \n    #print(f'n = {n}')\n    \n    dp = [0] * (n+1)\n    \n    for i in range(1, n+1):\n        #print(f'dp = {dp}, i = {i}')\n        dp[i] = dp[i-1] + (dp[i-1]*(i%2))\n        \n    #print(f'dp = {dp}, end = {dp[n]}')\n    return dp[n]\n",
        "num_ids": 134
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    else:\n        dp = [0 for i in range(n + 1)]\n        dp[0] = 1\n        dp[1] = 3\n        dp[2] = 5\n        dp[3] = 7\n",
        "num_ids": 100
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 63
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # naive soln\n    if len(A) >= 2:\n        if np.diff(A).any() == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n    \n",
        "num_ids": 54
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    for index in range(len(A)-1):\n        if A[index] > A[index+1]:\n            is_monotonic = False\n        elif A[index] < A[index+1]:\n            is_monotonic = False\n    return is_monotonic\n",
        "num_ids": 79
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)): \n        if A[i] > A[i-1]: \n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    n = len(A)\n",
        "num_ids": 19
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)>=1:\n        for i in range(len(A)-1):\n            if A[i+1]>A[i]:\n                return False\n            if A[i]>A[i+1]:\n                return False\n        return True\n    else:\n        return True\n    \ndef main():\n    N=int(input())\n    A=list(map(int,input().split()))\n    A.sort()\n    check_start=0\n    check_end=0\n    \n    while A[check_end]<=A[check_start]:\n        check_start+=1\n    \n    while A[check_start]>A[check_end]:\n        check_end+=1\n    \n    print(check_start,check_end)\n    print(A[check_start-1]+A[check_end-1])\n    print(is_Monotonic(A))\n    \n    \n    \n    \nif __name__=='__main__':\n    main(",
        "num_ids": 242
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Checks if array is monotonic\n    count = 1\n    if (A[0] == A[1]):\n        # A[0] must be in order\n        if A[0] > A[1]:\n            count = 2\n        elif A[0] < A[1]:\n            count = 1\n        elif A[0] == A[1]:\n            if A[0]!= A[1]:\n                count = 1\n    else:\n        # A[0] must be in order\n        if A[0] > A[1]:\n            count = 2\n        elif A[0] < A[1]:\n            count = 1\n        elif A[0] == A[1]:\n            if A[1] < A[0]:\n                count = 1\n",
        "num_ids": 188
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i=0\n    j=len(A)-1\n    while i<j:\n        if A[i]>A[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    else:\n        for i in range(0,len(A) - 1):\n            if A[i] > A[i+1]:\n                return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)>1:\n        return False\n    else:\n        first_value=A[0]\n        count=1\n        for i in range(1,len(A)):\n            if A[i]!=first_value:\n                count+=1\n                if count>2:\n                    return False\n            first_value=A[i]\n            count=1\n        return True\n",
        "num_ids": 97
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    check_arr = []\n    \n    # Create a check list\n    check_list = [0]*len(A)\n    \n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i]!= A[j]:\n                check_list[i] = 1\n    \n    # Check\n    for i in range(len(check_list)):\n        if check_list[i]!= 0:\n            return False\n    \n    return True",
        "num_ids": 125
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return(s in l)\n",
        "num_ids": 10
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)):\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(l) == len(s)\n",
        "num_ids": 14
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    else:\n        return s in l[0:len(l)]\n        ",
        "num_ids": 30
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    flag = False\n    for i in range(n):\n        if l[i] == s:\n            flag = True\n            break\n    return flag\n",
        "num_ids": 46
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l or l[s] in l\n",
        "num_ids": 15
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(l) > 1 and any(map(lambda x: x in l, s))\n",
        "num_ids": 25
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    l2 = []\n    for i in l:\n        if i in s:\n            l2.append(i)\n    if l2 == s:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    for i in range(len(Input)):\n        for j in range(i,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return True\n    if len(Input) % 2 == 0:\n        return False\n    else:\n        first = Input[0]\n        for i in range(1, len(Input)//2):\n            second = Input[i]\n            if first == second:\n                return True\n            else:\n                return False\n",
        "num_ids": 87
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Your code here\n    try:\n        #using a for loop\n        for i in range(len(Input)):\n            for j in range(i+1,len(Input)):\n                if(Input[i]==Input[j]):\n                    return False\n        return True\n    except:\n        return False\n        \nprint(find_equal_tuple([(1,2),(3,4),(5,6)])) #should return true\nprint(find_equal_tuple([(1,2),(3,4),(5,6),(8,9)])) #should return false\nprint(find_equal_tuple([(1,2),(3,4),(5,6),(8,9),(7,8)])) #should return true\nprint(find_equal_tuple([(1,2),(3,4),(5,6),(8,9),(7,8),(9,10)])) #should return false\n",
        "num_ids": 229
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n=len(Input)\n    for i in range(n):\n        for j in range(i+1,n):\n            if(len(Input[i])!=len(Input[j])):\n                return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = list(Input)\n    tuple_list.sort()\n    result = True\n    for i in range(0, len(tuple_list) - 1):\n        if tuple_list[i]!= tuple_list[i + 1]:\n            result = False\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)<=1:\n        return True\n    if len(Input)>1:\n        Input=list(set(Input))\n        return all([len(tuple)==len(Input) for tuple in Input])\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)-1):\n            if(Input[i] == Input[j]):\n                return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if (len(Input[i])!=len(Input[j])):\n                return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    '''\n    OUTPUT:\n    True\n    True\n    True\n    False\n    False\n    '''\n    return type(Input) == tuple and len(Input) == len(set(Input))\n",
        "num_ids": 23
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    if len(Input) == 1:\n        return True\n",
        "num_ids": 22
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n",
        "num_ids": 18
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Removes 1 element at a time\n    for x in range(1, len(nums)):\n        # Switches every element\n        for y in range(len(nums) - x - 1):\n            # Switches the values\n            if nums[y] > nums[y + 1]:\n                # Swits the values\n                nums[y], nums[y + 1] = nums[y + 1], nums[y]\n    return nums\n",
        "num_ids": 113
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def merge_sort(nums, start, end):\n        if start >= end:\n            return\n        left, right = start, end\n        mid = (start + end)//2\n        while left <= mid:\n            if nums[left] > nums[right]:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            left += 1\n        while right > left:\n            nums[right], nums[left] = nums[left], nums[right]\n            right += 1\n            left += 1\n",
        "num_ids": 140
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combs = len(nums)\n",
        "num_ids": 12
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(i):\n            if nums[j]<nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums\n",
        "num_ids": 76
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Base case - nothing to do\n    if len(nums) <= 1:\n        return nums\n",
        "num_ids": 29
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        j = 0\n        while j < n-i-1:\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n            j += 1\n    return nums\n",
        "num_ids": 89
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n",
        "num_ids": 11
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #  nums = [1,5,8,3,6,7]\n    \n    #  1 2 3 4 5 6 7\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n    #  1 2 3 4 5 6 7   8 3 6 7 3\n",
        "num_ids": 239
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = n%10\n    y = n//10\n    return x - y == x + y - y\n",
        "num_ids": 28
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = n\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2!= 0:\n        return False\n    \n    n = n + n\n    return dif_Square(n)\n",
        "num_ids": 97
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return False\n    if dif_Square(n // 2) == False:\n        return False\n    if dif_Square(n - 1) == False:\n        return False\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n >= 2: \n        for i in range(1, n): \n            if (n % i == 0) : \n                return \"Not a square\"\n        if n == 1: \n            return \"Square\"\n        else: \n            return \"Not a square\"\n    else: \n        return \"Square\"\n    ",
        "num_ids": 81
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    dif = int(n)-int(n**2)\n    if dif == 0:\n        return True\n    elif dif > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s1=n//2\n    s2=n//2\n    if s1==s2:\n        print(s1,s1)\n        return s1\n    else:\n        if n%2==0:\n            print('NOT SQUARE')\n            return dif_Square(n//2)\n        else:\n            print('NOT SQUARE')\n            return dif_Square(n//2)\n",
        "num_ids": 99
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n == 0): return True\n    if (n == 1): return False\n    if (n == 2): return True\n    if (n == 3): return False\n    if (n == 4): return True\n    if (n == 5): return False\n    if (n == 6): return True\n    if (n == 7): return False\n    if (n == 8): return True\n    if (n == 9): return False\n    if (n == 10): return True\n    if (n == 11): return False\n    if (n == 12): return True\n    if (n == 13): return False\n    if (n == 14): return True\n    if (n == 15): return False\n    if (n == 16): return True\n    if (n == 17): return False\n    if (n == 18): return True\n    if (n == 19): return False\n    if (n == 20): return True\n    if (n == 21): return False\n    if (n == 22): return True\n    if (n == 23): return False\n    if (n == 24): return True\n    if (n == 25): return False\n    if (n == 26): return True\n    if (n == 27): return False\n    if (n == 28): return True\n    if (n == 29): return False\n    if (n == 30): return True\n    if (n == 31): return False\n    if (n == 32): return True\n    if (n == 33): return False\n    if (n == 34): return True\n    if (n == 35): return False\n    if (n == 36): return True\n    if (n == 37): return False\n    if (n == 38): return True\n    if (n == 39): return False\n    if (n == 40): return True\n    if (n == 41): return False\n    if (n == 42): return True\n    if (n == 43): return False\n    if (n == 44): return True\n    if (n == 45): return False\n    if (n == 46): return True\n    if (n == 47): return False\n    if (n == 48): return True\n    if (n == 49): return False\n    if (n == 50): return True\n    if (n == 51): return False\n    if (n == 52): return True\n    if (n == 53): return False\n    if (n == 54): return True\n    if (n == 55): return False\n    if (n == 56): return True\n    if (n == 57): return False\n    if (n == 58): return True\n    if (n == 59): return False\n    if (n == 60): return True\n    if (n == 61): return False\n    if (n == 62): return True\n    if (n == 63): return False\n    if (n == 64): return True\n    if (n == 65): return False\n    if (n == 66): return True\n    if (n == 67): return False\n    if (n == 68): return True\n    if (n == 69): return False\n    if (n == 70): return True\n    if (n == 71): return False\n    if (n == 72): return True\n    if (n == 73): return False\n    if (n == 74): return True\n    if (n == 75): return False\n    if (n == 76): return True\n    if (n == 77): return False\n    if (n == 78): return True\n    if (n == 79): return False\n    if (n == 80): return True\n    if (n == 81): return False\n    if (n == 82): return True\n    if (n == 83): return False\n    if (n == 84): return True\n    if (n == 85): return False\n    if (n == 86): return True\n    if (n == 87): return False\n    if (n == 88): return True\n    if (n == 89): return False\n    if (n == 90): return True\n    if (n == 91): return False\n    if (n == 92): return True\n    if (n == 93): return False\n    if (n == 94): return True\n    if (n == 95): return False\n    if (n == 96): return True\n    if (n == 97): return False\n    if (n == 98): return True\n    if (n == 99): return False\n    if (n == 100): return True\n    if (n == 101): return False\n    if (n == 102): return True\n    if (n == 103): return False\n    if (n == 104): return True\n    if (n == 105): return False\n    if (n == 106): return True\n    if (n == 107): return False\n    if (n == 108): return True\n    if (n == 109): return False\n    if (n == 110): return True\n    if (n == 111): return False\n    if (n == 112): return True\n    if (n == 113): return False\n    if (n == 114): return True\n    if (n == 115): return False\n    if (n == 116): return True\n    if (n == 117): return False\n    if (n == 118): return True\n    if (n == 119): return False\n    if (n == 120): return True\n    if (n == 121): return False\n    if (n == 122): return True\n    if (n == 123): return False\n    if (n == 124): return True\n    if (n == 125): return False\n    if (n == 126): return True\n    if (n == 127): return False\n    if (n == 128): return True\n    if (n == 129): return False\n    if (n == 130): return True\n    if (n == 131): return False\n    if (n == 132): return True\n    if (n == 133): return False\n    if (n == 134): return True\n    if (n == 135): return False\n    if (n == 136): return True\n    if (n == 137): return False\n    if (n == 138): return True\n    if (n == 139): return False\n    if (n == 140): return True\n    if (n == 141): return False\n    if (n == 142): return True\n    if (n == 143): return False\n    if (n == 144): return True\n    if (n == 145): return False\n    if (n == 146): return True\n    if (n == 147): return False\n    if (n == 148): return True\n    if (n == 149): return False\n    if (n == 150): return True\n    if (n == 151): return False\n    if (n == 152): return True\n    if (n == 153): return False\n    if (n == 154): return True\n    if (n == 155): return False\n    if (n == 156): return True\n    if (n == 157): return False\n    if (n == 158): return True\n    if (n == 159): return False\n    if (n == 160): return True\n    if (n == 161): return False\n    if (n == 162): return True\n    if (n == 163): return False\n    if (n == 164): return True\n    if (n == 165): return False\n    if (n == 166): return True\n    if (n == 167): return False\n    if (n == 168): return True\n    if (n == 169): return False\n    if (n == 170): return True\n    if (n == 171): return False\n    if (n == 172): return True\n    if (n == 173): return False\n    if (n == 174): return True\n    if (n == 175): return False\n    if (n == 176): return True\n    if (n == 177): return False\n    if (n == 178): return True\n    if (n == 179): return False\n    if (n == 180): return True\n    if (n == 181): return False\n    if (n == 182): return True\n    if (n == 183): return False\n    if (n == 184): return True\n    if (n == 185): return False\n    if (n == 186): return True\n    if (n == 187): return False\n    if (n == 188): return True\n    if (n == 189): return False\n    if (n == 190): return True\n    if (n == 191): return False\n    if (n == 192): return True\n    if (n == 193): return False\n    if (n == 194): return True\n    if (n == 195): return False\n    if (n == 196): return True\n    if (n == 197): return False\n    if (n == 198): return True\n    if (n == 199): return False\n    if (n == 20",
        "num_ids": 2008
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return \"zero\"\n    if n == 1: \n        return \"1\"\n    if n == 2: \n        return \"2\"\n    elif n == 3: \n        return \"3\"\n    elif n == 4: \n        return \"4\"\n    elif n == 5: \n        return \"5\"\n    elif n == 6: \n        return \"6\"\n    elif n == 7: \n        return \"7\"\n    elif n == 8: \n        return \"8\"\n    elif n == 9: \n        return \"9\"\n    elif n == 10: \n        return \"10\"\n    elif n == 11: \n        return \"11\"\n    elif n == 12: \n        return \"12\"\n    elif n == 13: \n        return \"13\"\n    elif n == 14: \n        return \"14\"\n    elif n == 15: \n        return \"15\"\n    elif n == 16: \n        return \"16\"\n    elif n == 17: \n        return \"17\"\n    elif n == 18: \n        return \"18\"\n    elif n == 19: \n        return \"19\"\n    elif n == 20: \n        return \"20\"\n    elif n == 21: \n        return \"21\"\n    elif n == 22: \n        return \"22\"\n    elif n == 23: \n        return \"23\"\n    elif n == 24: \n        return \"24\"\n    elif n == 25: \n        return \"25\"\n    elif n == 26: \n        return \"26\"\n    elif n == 27: \n        return \"27\"\n    elif n == 28: \n        return \"28\"\n    elif n == 29: \n        return \"29\"\n    elif n == 30: \n        return \"30\"\n    elif n == 31: \n        return \"31\"\n    elif n == 32: \n        return \"32\"\n    elif n == 33: \n        return \"33\"\n    elif n == 34: \n        return \"34\"\n    elif n == 35: \n        return \"35\"\n    elif n == 36: \n        return \"36\"\n    elif n == 37: \n        return \"37\"\n    elif n == 38: \n        return \"38\"\n    elif n == 39: \n        return \"39\"\n    elif n == 40: \n        return \"40\"\n    elif n == 41: \n        return \"41\"\n    elif n == 42: \n        return \"42\"\n    elif n == 43: \n        return \"43\"\n    elif n == 44: \n        return \"44\"\n    elif n == 45: \n        return \"45\"\n    elif n == 46: \n        return \"46\"\n    elif n == 47: \n        return \"47\"\n    elif n == 48: \n        return \"48\"\n    elif n == 49: \n        return \"49\"\n    elif n == 50: \n        return \"50\"\n    elif n == 51: \n        return \"51\"\n    elif n == 52: \n        return \"52\"\n    elif n == 53: \n        return \"53\"\n    elif n == 54: \n        return \"54\"\n    elif n == 55: \n        return \"55\"\n    elif n == 56: \n        return \"56\"\n    elif n == 57: \n        return \"57\"\n    elif n == 58: \n        return \"58\"\n    elif n == 59: \n        return \"59\"\n    elif n == 60: \n        return \"60\"\n    elif n == 61: \n        return \"61\"\n    elif n == 62: \n        return \"62\"\n    elif n == 63: \n        return \"63\"\n    elif n == 64: \n        return \"64\"\n    elif n == 65: \n        return \"65\"\n    elif n == 66: \n        return \"66\"\n    elif n == 67: \n        return \"67\"\n    elif n == 68: \n        return \"68\"\n    elif n == 69: \n        return \"69\"\n    elif n == 70: \n        return \"70\"\n    elif n == 71: \n        return \"71\"\n    elif n == 72: \n        return \"72\"\n    elif n == 73: \n        return \"73\"\n    elif n == 74: \n        return \"74\"\n    elif n == 75: \n        return \"75\"\n    elif n == 76: \n        return \"76\"\n    elif n == 77: \n        return \"77\"\n    elif n == 78: \n        return \"78\"\n    elif n == 79: \n        return \"79\"\n    elif n == 80: \n        return \"80\"\n    elif n == 81: \n        return \"81\"\n    elif n == 82: \n        return \"82\"\n    elif n == 83: \n        return \"83\"\n    elif n == 84: \n        return \"84\"\n    elif n == 85: \n        return \"85\"\n    elif n == 86: \n        return \"86\"\n    elif n == 87: \n        return \"87\"\n    elif n == 88: \n        return \"88\"\n    elif n == 89: \n        return \"89\"\n    elif n == 90: \n        return \"90\"\n    elif n == 91: \n        return \"91\"\n    elif n == 92: \n        return \"92\"\n    elif n == 93: \n        return \"93\"\n    elif n == 94: \n        return \"94\"\n    elif n == 95: \n        return \"95\"\n    elif n == 96: \n        return \"96\"\n    elif n == 97: \n        return \"97\"\n    elif n == 98: \n        return \"98\"\n    elif n == 99: \n        return \"99\"\n    elif n == 100: \n        return \"100\"\n    elif n == 101: \n        return \"101\"\n    elif n == 102: \n        return \"102\"\n    elif n == 103: \n        return \"103\"\n    elif n == 104: \n        return \"104\"\n    elif n == 105: \n        return \"105\"\n    elif n == 106: \n        return \"106\"\n    elif n == 107: \n        return \"107\"\n    elif n == 108: \n        return \"108\"\n    elif n == 109: \n        return \"109\"\n    elif n == 110: \n        return \"110\"\n    elif n == 111: \n        return \"111\"\n    elif n == 112: \n        return \"112\"\n    elif n == 113: \n        return \"113\"\n    elif n == 114: \n        return \"114\"\n    elif n == 115: \n        return \"115\"\n    elif n == 116: \n        return \"116\"\n    elif n == 117: \n        return \"117\"\n    elif n == 118: \n        return \"118\"\n    elif n == 119: \n        return \"119\"\n    elif n == 120: \n        return \"120\"\n    elif n == 121: \n        return \"121\"\n    elif n == 122: \n        return \"122\"\n    elif n == 123: \n        return \"123\"\n    elif n == 124: \n        return \"124\"\n    elif n == 125: \n        return \"125\"\n    elif n == 126: \n        return \"126\"\n    elif n == 127: \n        return \"127\"\n    elif n == 128: \n        return \"128\"\n    elif n == 129: \n        return \"129\"\n    elif n == 130: \n        return \"130\"\n    elif n == 131: \n        return \"131\"\n    elif n == 132: \n        return \"132\"\n    elif n == 133: \n        return \"133",
        "num_ids": 2007
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n % 2!= 0\n    # return False\ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    print(\"Given Number : \", n)\n    for i in range(1, n): \n        print(\"Square Number : \", i**2)\n    print(\"------------------------------------------\\n\")\n",
        "num_ids": 45
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    from itertools import product\n    possible_patterns = product(colors, patterns)\n    return all(any(i in j for i in possible_patterns) for j in possible_patterns)\n",
        "num_ids": 51
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_len = len(patterns)\n    same_pattern = True\n    for i in range(patterns_len):\n        if patterns[i][0]!= patterns[i][1]:\n            same_pattern = False\n    return same_pattern\n",
        "num_ids": 63
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # If colors is empty then\n    if not colors:\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    same = True\n    colors_count = len(colors)\n    patterns_count = len(patterns)\n",
        "num_ids": 31
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    '''\n        colors = array of colors\n        patterns = array of patterns\n    '''\n    if len(colors) == len(patterns):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    j = len(colors) - 1\n    while i < j:\n        if colors[i]!= patterns[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    result = False\n    \n    for pattern in patterns:\n        for i in range(len(colors)):\n            result = colors[i] == pattern[i]\n    \n    return result\n",
        "num_ids": 48
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = list(patterns)\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n        else:\n            for i in range(len(pattern)):\n                if pattern[i]!= colors[i]:\n                    return False\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #loop through the patterns array\n    for pattern in patterns:\n        #loop through the current sequence of patterns\n        for current_pattern in pattern:\n            #test if current_pattern is the same as the current current_colors\n            if current_pattern == colors:\n                #return true if it follows the sequence\n                return True\n",
        "num_ids": 77
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        for j in range(i, len(colors)):\n            for k in range(j, len(colors)):\n                if colors[i] == colors[j] == colors[k] and patterns[i] == patterns[j] == patterns[k]:\n                    return True\n    return False\n",
        "num_ids": 85
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n",
        "num_ids": 8
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    answer = []\n    for i in test_list:\n        x = i[0]\n        y = i[1]\n        if x % K == 0 and y % K == 0:\n            answer.append(i)\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Define a function to find tuples which have all elements divisible by k from the given list of tuples.\n    # Take a list of tuples and an integer k\n    def find_tuples(test_list, k):\n        '''\n        Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n        '''\n        # Sort the list of tuples in ascending order by their first element\n        test_list.sort()\n        \n        # Create an empty set\n        tuples = set()\n        \n        # While there are not elements divisible by the k\n        while len(test_list) > 0:\n            # Take the first element as the first element in the list\n            element = test_list.pop(0)\n            \n            # If the element is a multiple of k\n            if element % k == 0:\n                # Add the element to the set\n                tuples.add(tuple(element))\n                \n                # Move the remaining elements to the next iteration\n                test_list.extend(test_list.pop(0))\n        \n        # Return the list of tuples in sorted order\n        return list(tuples)\n    \n    return find_tuples(test_list, K)\n",
        "num_ids": 206
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    cnt = 0\n    temp_tuples = []\n    for t in test_list:\n        if len(t) % K == 0:\n            temp_tuples.append(t)\n            cnt += 1\n    return temp_tuples, cnt\n",
        "num_ids": 64
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    s=0\n    for i in test_list:\n        s += i[0]\n    if s%K==0:\n        print(s,\"is divisible by\",K)\n    else:\n        print(\"no is divisible by\",K)\n",
        "num_ids": 62
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list_tuples = []\n    for i in range(0, len(test_list)):\n        if test_list[i][0] % K == 0:\n            list_tuples.append(test_list[i])\n    return list_tuples\n",
        "num_ids": 64
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(t[i] % K == 0 for i in range(len(t))):\n            result.append(t)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # TODO\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Write your code here\n    result = []\n    for i in range(len(test_list)):\n        found = False\n        for j in range(len(result)):\n            if test_list[i][0] % result[j][0] == 0:\n                found = True\n        if found == False:\n            result.append(test_list[i])\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    is_divisible = False\n    for i in range(1, n):\n        if n % i == 0:\n            is_divisible = True\n            break\n    return is_divisible\n",
        "num_ids": 48
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    div = []\n    if n % 11 == 0:\n        return \"divisible\"\n    else:\n        return \"not divisible\"\n    \ndef is_prime(n): \n    '''\n    Write a python function to check whether a number is a prime number.\n    '''\n    if n < 2: \n        return \"not prime\"\n    for i in range(2, n): \n        if n % i == 0: \n            return \"not prime\"\n    return \"prime\"\n",
        "num_ids": 52
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 11\n",
        "num_ids": 10
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) > 0:\n        if len(s) % 2!= 0:\n            return False\n        else:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    length = 0\n    for word_element in word:\n        length += len(word_element)\n",
        "num_ids": 34
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if s.isalpha():\n        if len(s) % 2!= 0:\n            return \"error\"\n        else:\n            return len(s)\n    else:\n        return \"error\"\n        \ndef word_count(s):\n    '''\n    Write a python function to count the number of times the letter appears in a word.\n    '''\n    if s.isalpha():\n        return s.lower().count('a')\n    else:\n        return \"error\"\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n    #DO NOT change the code below \ud83d\udc47\n    #Write your code above \ud83d\udc46\n    #raise NotImplementedError\n",
        "num_ids": 55
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # initialize the result \n    result = 0\n    # traverse the string \n    for i in range(len(s)): \n        result += 1\n    # return the result \n    return result % 2!= 0\n",
        "num_ids": 55
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    print(len(s))\n    return len(s) % 2!= 0\n",
        "num_ids": 22
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    if len(s)%2!=0:\n        return \"Not odd\"\n    else:\n        return \"Even\"\n",
        "num_ids": 34
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * tetrahedral_number(n - 1)\n",
        "num_ids": 44
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # You are given an array nums of N ints.\n    # The array contains only 0s, 1s, 2s, and 3s.\n    # Find the nth tetrahedral number.\n",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    mid = len(numbers)/2\n    for i in range(1,(int)(mid)):\n        if (numbers[i] - numbers[i-1] == 2):\n            break\n    else:\n        return 0\n    for j in range(i,len(numbers)):\n        if (numbers[j] - numbers[i] == 2):\n            break\n    else:\n        return 0\n    return numbers[i]\n",
        "num_ids": 311
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    tetrahedral_num = 0\n    \n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 6\n    else:\n        for i in range(0, n):\n            tetrahedral_num += tetrahedral_number(i)\n        return tetrahedral_num",
        "num_ids": 106
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n + 1):\n        if n == i:\n            return i\n        elif n == i % 10:\n            return i\n        elif i % 10 == i % 10:\n            return i\n        elif i % 10 == 0:\n            return i\n    return 'Not a valid number'\n",
        "num_ids": 79
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # if n is an odd number, get the sum of the squares of the first and last terms\n    # and divide by 3\n    if n % 2 == 0:\n        return (n//3) * (n//3) * (n//3)\n    else:\n        return (n//3) * (n//3) * n//3\n",
        "num_ids": 82
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # use divide and conquer\n    # divide n into 2 sub-problems\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 10\n    if n == 6:\n        return 12\n    if n == 7:\n        return 14\n    if n == 8:\n        return 16\n    if n == 9:\n        return 18\n    if n == 10:\n        return 20\n    if n == 11:\n        return 22\n    if n == 12:\n        return 24\n    if n == 13:\n        return 26\n    if n == 14:\n        return 28\n    if n == 15:\n        return 30\n    if n == 16:\n        return 32\n    if n == 17:\n        return 34\n    if n == 18:\n        return 36\n    if n == 19:\n        return 38\n    if n == 20:\n        return 40\n    if n == 21:\n        return 42\n    if n == 22:\n        return 44\n    if n == 23:\n        return 46\n    if n == 24:\n        return 48\n    if n == 25:\n        return 50\n    if n == 26:\n        return 52\n    if n == 27:\n        return 54\n    if n == 28:\n        return 56\n    if n == 29:\n        return 58\n    if n == 30:\n        return 60\n    if n == 31:\n        return 62\n    if n == 32:\n        return 64\n    if n == 33:\n        return 66\n    if n == 34:\n        return 68\n    if n == 35:\n        return 70\n    if n == 36:\n        return 72\n    if n == 37:\n        return 74\n    if n == 38:\n        return 76\n    if n == 39:\n        return 78\n    if n == 40:\n        return 80\n    if n == 41:\n        return 82\n    if n == 42:\n        return 84\n    if n == 43:\n        return 86\n    if n == 44:\n        return 88\n    if n == 45:\n        return 90\n    if n == 46:\n        return 92\n    if n == 47:\n        return 94\n    if n == 48:\n        return 96\n    if n == 49:\n        return 98\n    if n == 50:\n        return 100\n    if n == 51:\n        return 102\n    if n == 52:\n        return 104\n    if n == 53:\n        return 106\n    if n == 54:\n        return 108\n    if n == 55:\n        return 110\n    if n == 56:\n        return 112\n    if n == 57:\n        return 114\n    if n == 58:\n        return 116\n    if n == 59:\n        return 118\n    if n == 60:\n        return 120\n    if n == 61:\n        return 122\n    if n == 62:\n        return 124\n    if n == 63:\n        return 126\n    if n == 64:\n        return 128\n    if n == 65:\n        return 130\n    if n == 66:\n        return 132\n    if n == 67:\n        return 134\n    if n == 68:\n        return 136\n    if n == 69:\n        return 138\n    if n == 70:\n        return 140\n    if n == 71:\n        return 142\n    if n == 72:\n        return 144\n    if n == 73:\n        return 146\n    if n == 74:\n        return 148\n    if n == 75:\n        return 150\n    if n == 76:\n        return 152\n    if n == 77:\n        return 154\n    if n == 78:\n        return 156\n    if n == 79:\n        return 158\n    if n == 80:\n        return 160\n    if n == 81:\n        return 162\n    if n == 82:\n        return 164\n    if n == 83:\n        return 166\n    if n == 84:\n        return 168\n    if n == 85:\n        return 170\n    if n == 86:\n        return 172\n    if n == 87:\n        return 174\n    if n == 88:\n        return 176\n    if n == 89:\n        return 178\n    if n == 90:\n        return 180\n    if n == 91:\n        return 182\n    if n == 92:\n        return 184\n    if n == 93:\n        return 186\n    if n == 94:\n        return 188\n    if n == 95:\n        return 190\n    if n == 96:\n        return 192\n    if n == 97:\n        return 194\n    if n == 98:\n        return 196\n    if n == 99:\n        return 198\n    if n == 100:\n        return 200\n    if n == 101:\n        return 202\n    if n == 102:\n        return 204\n    if n == 103:\n        return 206\n    if n == 104:\n        return 208\n    if n == 105:\n        return 210\n    if n == 106:\n        return 212\n    if n == 107:\n        return 214\n    if n == 108:\n        return 216\n    if n == 109:\n        return 218\n    if n == 110:\n        return 220\n    if n == 111:\n        return 222\n    if n == 112:\n        return 224\n    if n == 113:\n        return 226\n    if n == 114:\n        return 228\n    if n == 115:\n        return 230\n    if n == 116:\n        return 232\n    if n == 117:\n        return 234\n    if n == 118:\n        return 236\n    if n == 119:\n        return 238\n    if n == 120:\n        return 240\n    if n == 121:\n        return 242\n    if n == 122:\n        return 244\n    if n == 123:\n        return 246\n    if n == 124:\n        return 248\n    if n == 125:\n        return 250\n    if n == 126:\n        return 252\n    if n == 127:\n        return 254\n    if n == 128:\n        return 256\n    if n == 129:\n        return 258\n    if n == 130:\n        return 260\n    if n == 131:\n        return 262\n    if n == 132:\n        return 264\n    if n == 133:\n        return 266\n    if n == 134:\n        return 268\n    if n == 135:\n        return 270\n    if n == 136:\n        return 272\n    if n == 137:\n        return 274\n    if n == 138:\n        return 276\n    if n == 139:\n        return 278\n    if n == 140:\n        return 280\n    if n == 141:\n        return 282\n    if n == 142:\n        return 284\n    if n == 143:\n        return 286\n    if n == 144:\n        return 288\n    if n == 145:\n        return 290\n    if n == 146:\n        return 292\n    if n == 147:\n        return 294\n    if n == 148:\n        return 296\n    if n == 149:\n        return 298\n    if n == 150:\n        return 300\n    if n == 151:\n        return 302\n    if n == 152:\n        return 304\n    if n == 153:\n        return 306\n    if n == 154:\n        return 308\n    if n == 155:\n        return 310\n    if n == 156:\n        return 312\n    if n == 157:\n        return 314\n    if n == 158:\n        return 316\n    if n == 159:\n        return 318\n    if n == 160:\n        return 320\n    if n == 161:\n        return 322\n    if n == 162:\n        return 324\n    if n == 163:\n        return 326\n    if n == 164:\n        return 328\n    if n == 165:\n        return 330\n    if n == 166:\n        return 332\n    if n == 167:\n        return 334\n    if n == 168:\n        return 336\n    if n == 169:\n        return 338\n    if n == 170:\n        return 340\n    if n == 171:\n        return 342\n    if n == 172:\n        return 344\n    if n == 173:\n        return 346\n    if n == 174:\n        return 348\n    if n == 175:\n        return 350\n    if n == 176:\n        return 352\n    if n == 177:\n        return 354\n    if n == 178:\n        return 356\n    if n == 179:\n        return 358\n    if n == 180:\n        return 360\n    if n == 181:\n        return 372\n    if n == 18",
        "num_ids": 2016
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 6\n    if n == 4:\n        return 8\n    if n == 5:\n        return 9\n    if n == 6:\n        return 10\n    if n == 7:\n        return 12\n    if n == 8:\n        return 14\n    if n == 9:\n        return 16\n    if n == 10:\n        return 18\n    if n == 11:\n        return 20\n    if n == 12:\n        return 22\n    if n == 13:\n        return 24\n    if n == 14:\n        return 26\n    if n == 15:\n        return 28\n    if n == 16:\n        return 30\n    if n == 17:\n        return 32\n    if n == 18:\n        return 34\n    if n == 19:\n        return 36\n    if n == 20:\n        return 38\n    if n == 21:\n        return 40\n    if n == 22:\n        return 42\n    if n == 23:\n        return 44\n    if n == 24:\n        return 46\n    if n == 25:\n        return 48\n    if n == 26:\n        return 50\n    if n == 27:\n        return 52\n    if n == 28:\n        return 54\n    if n == 29:\n        return 56\n    if n == 30:\n        return 58\n    if n == 31:\n        return 60\n    if n == 32:\n        return 62\n    if n == 33:\n        return 64\n    if n == 34:\n        return 66\n    if n == 35:\n        return 68\n    if n == 36:\n        return 70\n    if n == 37:\n        return 72\n    if n == 38:\n        return 74\n    if n == 39:\n        return 76\n    if n == 40:\n        return 78\n    if n == 41:\n        return 80\n    if n == 42:\n        return 82\n    if n == 43:\n        return 84\n    if n == 44:\n        return 86\n    if n == 45:\n        return 88\n    if n == 46:\n        return 90\n    if n == 47:\n        return 92\n    if n == 48:\n        return 94\n    if n == 49:\n        return 96\n    if n == 50:\n        return 98\n    if n == 51:\n        return 100\n    if n == 52:\n        return 102\n    if n == 53:\n        return 104\n    if n == 54:\n        return 106\n    if n == 55:\n        return 108\n    if n == 56:\n        return 110\n    if n == 57:\n        return 112\n    if n == 58:\n        return 114\n    if n == 59:\n        return 116\n    if n == 60:\n        return 118\n    if n == 61:\n        return 120\n    if n == 62:\n        return 122\n    if n == 63:\n        return 124\n    if n == 64:\n        return 126\n    if n == 65:\n        return 128\n    if n == 66:\n        return 130\n    if n == 67:\n        return 132\n    if n == 68:\n        return 134\n    if n == 69:\n        return 136\n    if n == 70:\n        return 138\n    if n == 71:\n        return 140\n    if n == 72:\n        return 142\n    if n == 73:\n        return 144\n    if n == 74:\n        return 146\n    if n == 75:\n        return 148\n    if n == 76:\n        return 150\n    if n == 77:\n        return 152\n    if n == 78:\n        return 154\n    if n == 79:\n        return 156\n    if n == 80:\n        return 158\n    if n == 81:\n        return 160\n    if n == 82:\n        return 162\n    if n == 83:\n        return 164\n    if n == 84:\n        return 166\n    if n == 85:\n        return 168\n    if n == 86:\n        return 170\n    if n == 87:\n        return 172\n    if n == 88:\n        return 174\n    if n == 89:\n        return 176\n    if n == 90:\n        return 178\n    if n == 91:\n        return 180\n    if n == 92:\n        return 182\n    if n == 93:\n        return 184\n    if n == 94:\n        return 186\n    if n == 95:\n        return 188\n    if n == 96:\n        return 190\n    if n == 97:\n        return 192\n    if n == 98:\n        return 194\n    if n == 99:\n        return 196\n    if n == 100:\n        return 198\n    if n == 101:\n        return 200\n    if n == 102:\n        return 202\n    if n == 103:\n        return 204\n    if n == 104:\n        return 206\n    if n == 105:\n        return 208\n    if n == 106:\n        return 210\n    if n == 107:\n        return 212\n    if n == 108:\n        return 214\n    if n == 109:\n        return 216\n    if n == 110:\n        return 218\n    if n == 111:\n        return 220\n    if n == 112:\n        return 222\n    if n == 113:\n        return 224\n    if n == 114:\n        return 226\n    if n == 115:\n        return 228\n    if n == 116:\n        return 230\n    if n == 117:\n        return 232\n    if n == 118:\n        return 234\n    if n == 119:\n        return 236\n    if n == 120:\n        return 238\n    if n == 121:\n        return 240\n    if n == 122:\n        return 242\n    if n == 123:\n        return 244\n    if n == 124:\n        return 246\n    if n == 125:\n        return 248\n    if n == 126:\n        return 250\n    if n == 127:\n        return 252\n    if n == 128:\n        return 254\n    if n == 129:\n        return 256\n    if n == 130:\n        return 258\n    if n == 131:\n        return 260\n    if n == 132:\n        return 262\n    if n == 133:\n        return 264\n    if n == 134:\n        return 266\n    if n == 135:\n        return 268\n    if n == 136:\n        return 270\n    if n == 137:\n        return 272\n    if n == 138:\n        return 274\n    if n == 139:\n        return 276\n    if n == 140:\n        return 278\n    if n == 141:\n        return 280\n    if n == 142:\n        return 282\n    if n == 143:\n        return 284\n    if n == 144:\n        return 286\n    if n == 145:\n        return 288\n    if n == 146:\n        return 290\n    if n == 147:\n        return 292\n    if n == 148:\n        return 294\n    if n == 149:\n        return 296\n    if n == 150:\n        return 298\n    if n == 151:\n        return 300\n    if n == 152:\n        return 302\n    if n == 153:\n        return 304\n    if n == 154:\n        return 306\n    if n == 155:\n        return 308\n    if n == 156:\n        return 310\n    if n == 157:\n        return 312\n    if n == 158:\n        return 314\n    if n == 159:\n        return 316\n    if n == 160:\n        return 318\n    if n == 161:\n        return 320\n    if n == 162:\n        return 322\n    if n == 163:\n        return 324\n    if n == 164:\n        return 326\n    if n == 165:\n        return 328\n    if n == 166:\n        return 330\n    if n == 167:\n        return 332\n    if n == 168:\n        return 334\n    if n == 169:\n        return 336\n    if n == 170:\n        return 338\n    if n == 171:\n        return 340\n    if n == 172:\n        return 342\n    if n == 173:\n        return 344\n    if n == 174:\n        return 346\n    if n == 175:\n        return 348\n    if n == 176:\n        return 350\n    if n == 177:\n        return 352\n    if n == 178:\n        return 354\n    if n == 179:\n        return 356\n    if n == 180:\n        return 358\n    if n == 181:\n        return 360\n",
        "num_ids": 2015
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetra_set = set()\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(1, j+1):\n                tetra_set.add(tetra_set.add(k))\n                tetra_set.add(tetra_set.add(j))\n                tetra_set.add(tetra_set.add(k))\n                tetra_set.add(tetra_set.add(j))\n    return list(tetra_set)[0]\n",
        "num_ids": 144
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #We create a volume of a sphere, you can try different values of the radius.\n    return 4*math.pi*(r**3)\n",
        "num_ids": 36
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area\ndef area_of_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    area = (4/3) * math.pi * (r**3)\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (4/3) * math.pi * (r**3) * h\n    return volume\ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    area = (4/3) * math.pi * r**3 * h\n    return area\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4/3) * math.pi * (r**3) * h\n    return volume\ndef area_of_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    area = (4/3) * math.pi * (r**3) * h\n    return area\ndef volume_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = (4/3) * math.pi * (r**3) * h\n    return volume\ndef area_of_triangle(r,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (4/3) * math.pi * (r**3) * h\n    return area\ndef volume_circle(r,h):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    volume = (4/3) * math.pi * r**3 * h\n    return volume\ndef area_of_circle(r,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = (4/3) * math.pi * (r**3) * h\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\ndef area_of_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    area = 4/3 * math.pi * (r**3)\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4/3 * math.pi * (r**3) * h\n    return volume\ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    area = 4/3 * math.pi * (r**3) * h\n    return area\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4/3 * math.pi * (r**3) * h\n    return volume\ndef area_of_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    area = 4/3 * math.pi * (r**3) * h\n    return area\ndef volume_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = 4/3 * math.pi * (r**3) * h\n    return volume\ndef area_of_triangle(r,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = 4/3 * math.pi * (r**3) * h\n    return area\ndef volume_circle(r,h):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\ndef area_of_circle(r,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = 4/3 * math.pi * (r**3)\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\ndef area_of_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    area = 4/3 * math.pi * (r**3)\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4/3 * math.pi * (r**3) * h\n    return volume\ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    area = 4/3 * math.pi * (r**3) * h\n    return area\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4/3 * math.pi * (r**3) * h\n    return volume\ndef area_of_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    area = 4/3 * math.pi * (r**3) * h\n    return area\ndef volume_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = 4/3 * math.pi * (r**3) * h\n    return volume\ndef area_of_triangle(r,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = 4/3 * math.pi * (r**3) * h\n    return area\ndef volume_circle(r,h):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\ndef area_of_circle(r,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = 4/3 * math.pi * (r**3)\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\ndef area_of_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    area = 4/3 * math.pi * (r**3)\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4/3 * math.pi * (r**3) * h\n    return volume\ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    area = 4/3 * math.pi * (r**3) * h\n    return area\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4/3 * math.pi * (r**3) * h\n    return volume\ndef area_of_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    area = 4/3 * math.pi * (r**3) * h\n    return area\ndef volume_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\ndef area_of_triangle(r,h):\n    ''",
        "num_ids": 38
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3)\ndef volume_sphere_sphere(r, h):\n    '''\n    Write a function to find the volume of a sphere and sphere spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3)\ndef volume_sphere_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2)\ndef volume_cylinder_sphere(r, h):\n    '''\n    Write a function to find the volume of a cylinder and sphere spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2)\ndef volume_cylinder_sphere_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder and sphere spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h)\ndef volume_sphere_cylinder_sphere(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h)\ndef volume_cylinder_sphere_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h)\ndef volume_sphere_cylinder_sphere(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h)\ndef volume_sphere_cylinder_sphere_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h)\ndef volume_sphere_cylinder_sphere_cylinder_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_cylinder_sphere_cylinder_sphere(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_cylinder_sphere_cylinder_sphere_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_cylinder_sphere_cylinder_sphere_cylinder_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_cylinder_sphere_cylinder_sphere_cylinder_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_sphere_cylinder_sphere_cylinder_sphere_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_cylinder_sphere_cylinder_sphere_cylinder_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_cylinder_sphere_cylinder_sphere_cylinder_sphere(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_sphere_cylinder_sphere_cylinder_sphere_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_cylinder_sphere_cylinder_sphere_cylinder_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h) * (h) * (h)\ndef volume_sphere_cylinder_sphere_cylinder_sphere_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h)\ndef volume_cylinder_sphere_cylinder_sphere_cylinder_cylinder(r, h):\n    '''\n    Write a function to find the volume of a sphere and cylinder spheroid.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3) * (h**2) * (h) * (h) * (h) * (h) * (h)\ndef volume_sphere_cylinder_sphere_cylinder",
        "num_ids": 66
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if type(r) is not int or r<0 or r>1000:\n        return None\n    else:\n        return math.pi*math.pow(r,3)*math.pow(r,4)\n",
        "num_ids": 54
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r*r*r\n",
        "num_ids": 21
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print('\\nVolume of a sphere: ')\n    volume = (4/3) * math.pi * r**3\n    print(volume)\n",
        "num_ids": 38
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.141592653589793\n    area = pi*(r**3)\n    volume = 4/3*math.pi*(r**3)*area\n    return volume\n",
        "num_ids": 47
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * (r ** 3)\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * math.pow(r, 3) * math.pow(math.pi, 3)\n",
        "num_ids": 32
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # You will need to import the math module for the volume formula\n    import math\n    # TODO: Create an expression that is the volume of a sphere with radius r\n    # This expression will be the same as the output of the expression above\n    # NOTE: You don't have to use a for loop, just return the result\n    return (math.pi*r**3)*(3.141592653589793)\n",
        "num_ids": 97
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if strr == None or strr == '':\n        return None\n    \n    strr = strr.lower()\n    strr = strr.replace(' ','')\n    strr = strr.replace('-','')\n    strr = strr.replace('.','')\n    strr = strr.replace('[','')\n    strr = strr.replace(']','')\n    strr = strr.replace('\\t','')\n    strr = strr.replace('\\n','')\n    strr = strr.replace('\\r','')\n    strr = strr.replace(' ','')\n    return strr\n",
        "num_ids": 162
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    i = 0\n    while i < len(strr):\n        char = char + chr(ord(strr[i]) % 26 + 97)\n        i = i + 1\n    return char\n",
        "num_ids": 54
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for char in strr:\n        char_list.append(ord(char))\n    char_mod = 0\n    for i in range(len(char_list)):\n        if char_mod == 0:\n            char_mod = char_mod + char_list[i]\n        elif char_mod == char_list[i]:\n            pass\n        else:\n            char_mod = char_mod - char_list[i]\n    return char_mod\n",
        "num_ids": 118
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code goes here\n    #returns the character in the form of string\n    ascii_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    new_str = \"\"\n    for i in range(len(strr)):\n        new_str += strr[i]\n        if new_str[i % len(new_str)] % 26 == 0:\n            new_str = new_str[:i]\n        else:\n            new_str += str(new_str[i % len(new_str)] % 26)\n    return new_str\n    \ndef main():\n    print(get_Char('foobar'))\n",
        "num_ids": 220
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    index = 0\n    char = \"\"\n    while index < len(strr):\n        char += str(ord(strr[index]))\n        index += 1\n    return char\n    \ndef main():\n    str = input(\"Enter a string: \")\n    print(get_Char(str))\n",
        "num_ids": 75
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # create an empty array\n    arr=[]\n    # convert the given string to array of ASCII numbers\n    arr=list(map(ord, strr))\n    # find the appropriate character\n    for i in range(len(arr)):\n        # check if the number is in range of the character\n        if (i+2)%26==arr[i]:\n            # add the value to the array\n            arr[i]=arr[i]+1\n            # return the new array\n    return arr\n",
        "num_ids": 117
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    j = len(strr)\n    while i < j:\n        i += 1\n        j -= 1\n        while j > 0:\n            j -= 1\n            if strr[i] == strr[j]:\n                i += 1\n                j -= 1\n            else:\n                break\n    return i\n",
        "num_ids": 80
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    l=[]\n    for c in strr:\n        if c.isalpha():\n            l.append(ord(c))\n    return reduce(lambda x,y: x+y, l)\n",
        "num_ids": 49
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for i in strr:\n        i = chr(ord(i) % 26 + ord('a'))\n        print(i)\n",
        "num_ids": 35
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst = list(strr)\n    index = 0\n    char = ''\n    while index < len(lst):\n        char += chr(lst[index] % 26)\n        index += 1\n    return char\n",
        "num_ids": 56
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # n = 100\n    if n == 0: \n        print(\"0\")\n    elif n == 1: \n        print(\"1\")\n    else: \n        print(n + 1)\n",
        "num_ids": 50
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n*sequence(n-1)\n",
        "num_ids": 39
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 28\n    elif n == 9:\n        return 37\n    elif n == 10:\n        return 46\n    elif n == 11:\n        return 55\n    elif n == 12:\n        return 70\n    elif n == 13:\n        return 84\n    elif n == 14:\n        return 91\n    elif n == 15:\n        return 100\n    elif n == 16:\n        return 134\n    elif n == 17:\n        return 171\n    elif n == 18:\n        return 196\n    elif n == 19:\n        return 207\n    elif n == 20:\n        return 220\n    elif n == 21:\n        return 234\n    elif n == 22:\n        return 251\n    elif n == 23:\n        return 268\n    elif n == 24:\n        return 279\n    elif n == 25:\n        return 294\n    elif n == 26:\n        return 321\n    elif n == 27:\n        return 345\n    elif n == 28:\n        return 371\n    elif n == 29:\n        return 437\n    elif n == 30:\n        return 497\n    elif n == 31:\n        return 551\n    elif n == 32:\n        return 574\n    elif n == 33:\n        return 609\n    elif n == 34:\n        return 641\n    elif n == 35:\n        return 656\n    elif n == 36:\n        return 675\n    elif n == 37:\n        return 700\n    elif n == 38:\n        return 734\n    elif n == 39:\n        return 753\n    elif n == 40:\n        return 772\n    elif n == 41:\n        return 791\n    elif n == 42:\n        return 819\n    elif n == 43:\n        return 830\n    elif n == 44:\n        return 845\n    elif n == 45:\n        return 859\n    elif n == 46:\n        return 876\n    elif n == 47:\n        return 896\n    elif n == 48:\n        return 913\n    elif n == 49:\n        return 924\n    elif n == 50:\n        return 937\n    elif n == 51:\n        return 952\n    elif n == 52:\n        return 971\n    elif n == 53:\n        return 1008\n    elif n == 54:\n        return 1010\n    elif n == 55:\n        return 1035\n    elif n == 56:\n        return 1049\n    elif n == 57:\n        return 1062\n    elif n == 58:\n        return 1081\n    elif n == 59:\n        return 1103\n    elif n == 60:\n        return 1114\n    elif n == 61:\n        return 1120\n    elif n == 62:\n        return 1124\n    elif n == 63:\n        return 1141\n    elif n == 64:\n        return 1165\n    elif n == 65:\n        return 1181\n    elif n == 66:\n        return 1215\n    elif n == 67:\n        return 1235\n    elif n == 68:\n        return 1259\n    elif n == 69:\n        return 1280\n    elif n == 70:\n        return 1345\n    elif n == 71:\n        return 1375\n    elif n == 72:\n        return 1391\n    elif n == 73:\n        return 1409\n    elif n == 74:\n        return 1425\n    elif n == 75:\n        return 1442\n    elif n == 76:\n        return 1471\n    elif n == 77:\n        return 1496\n    elif n == 78:\n        return 1512\n    elif n == 79:\n        return 1546\n    elif n == 80:\n        return 1564\n    elif n == 81:\n        return 1583\n    elif n == 82:\n        return 1601\n    elif n == 83:\n        return 1634\n    elif n == 84:\n        return 1651\n    elif n == 85:\n        return 1674\n    elif n == 86:\n        return 1701\n    elif n == 87:\n        return 1735\n    elif n == 88:\n        return 1759\n    elif n == 89:\n        return 1776\n    elif n == 90:\n        return 1814\n    elif n == 91:\n        return 1841\n    elif n == 92:\n        return 1865\n    elif n == 93:\n        return 1883\n    elif n == 94:\n        return 1900\n    elif n == 95:\n        return 1953\n    elif n == 96:\n        return 1952\n    elif n == 97:\n        return 1981\n    elif n == 98:\n        return 2037\n    elif n == 99:\n        return 2058\n    elif n == 100:\n        return 2077\n    elif n == 101:\n        return 2113\n    elif n == 102:\n        return 2245\n    elif n == 103:\n        return 2217\n    elif n == 104:\n        return 2295\n    elif n == 105:\n        return 2337\n    elif n == 106:\n        return 2358\n    elif n == 107:\n        return 2377\n    elif n == 108:\n        return 2401\n    elif n == 109:\n        return 2433\n    elif n == 110:\n        return 2462\n    elif n == 111:\n        return 2481\n    elif n == 112:\n        return 2506\n    elif n == 113:\n        return 2524\n    elif n == 114:\n        return 2541\n    elif n == 115:\n        return 2568\n    elif n == 116:\n        return 2589\n    elif n == 117:\n        return 2613\n    elif n == 118:\n        return 2638\n    elif n == 119:\n        return 2657\n    elif n == 120:\n        return 2689\n    elif n == 121:\n        return 2713\n    elif n == 122:\n        return 2744\n    elif n == 123:\n        return 2761\n    elif n == 124:\n        return 2781\n    elif n == 125:\n        return 2811\n    elif n == 126:\n        return 2832\n    elif n == 127:\n        return 2851\n    elif n == 128:\n        return 2866\n    elif n == 129:\n        return 2884\n    elif n == 130:\n        return 2901\n    elif n == 131:\n        return 2933\n    elif n == 132:\n        return 2962\n    elif n == 133:\n        return 2981\n    elif n == 134:\n        return 3000\n    elif n == 135:\n        return 3014\n    elif n == 136:\n        return 3031\n    elif n == 137:\n        return 3047\n    elif n == 138:\n        return 3068\n    elif n == 139:\n        return 3089\n    elif n == 140:\n        return 3116\n    elif n == 141:\n        return 3254\n    elif n == 142:\n        return 3391\n    elif n == 143:\n        return 3446\n    elif n == 144:\n        return 3494\n    elif n == 145:\n        return 3501\n    elif n == 146:\n        return 3504\n    elif n == 147:\n        return 3507\n    elif n == 148:\n        return 3527\n    elif n == 149:\n        return 3546\n    elif n == 150:\n        return 3553\n    elif n == 151:\n        return 3601\n    elif n == 152:\n        return 3605\n    elif n == 153:\n        return 3623\n    elif n == 154:\n        return 3644\n    elif n == 155:\n        return 3650\n    elif n == 156:\n        return 3675\n    elif n == 157:\n        return 3803\n    elif n == 158:",
        "num_ids": 2013
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return n\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        nth = 1\n        for i in range(n - 2):\n            nth *= 2\n            nth += 1\n        return nth\n",
        "num_ids": 80
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    list = [1,3,6,9,11,14,15]\n    m = max(list)\n    i = 1\n    \n    while i < m+1:\n        if n == 0:\n            return list[0]\n        if n % list[i] == 0:\n            if n/list[i] == list[i]:\n                return list[i]\n            else:\n                n = n/list[i]\n                i+=1\n        i+=1\n    \n    return False\n",
        "num_ids": 122
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    elif n > 0: \n        # If we're at the end of the sequence\n        if n == 1: \n            return 1\n        # Otherwise get the starting point \n        else: \n            return sequence(n - 1) + sequence(n - 2) + sequence(n - 3)\n",
        "num_ids": 84
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==1: \n        return 1\n    if n==2: \n        return 2\n    if n==3: \n        return 4\n    if n==4: \n        return 5\n    if n%2==0: \n        return sequence(n-1) + sequence(n-2)\n    else:\n        return sequence(n-1) + sequence(n-3)\n",
        "num_ids": 96
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = n-1\n    while a <= b:\n        \n        c = a + b\n        \n        if c % 2!= 0:\n            print(c)\n        a = a + 2\n        \n        if c == n:\n            return c\n        b = b - 1\n    \n    \nn = int(input('Enter a number:'))\n",
        "num_ids": 91
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initializing the newman to the nth number \n    newman = n \n    # looping through the numbers to find the newman \n    for i in range(n,0,-1): \n        # if the newman is less than the previous, then it is the next\n        if newman < n: \n            # increment the newman by one \n            newman += 1 \n        # if the newman is more than the previous, then it is the previous\n        elif newman > n: \n            # increment the newman by one \n            newman -= 1\n        # if the newman is equal to the previous, then it is the previous\n        elif newman == n: \n            # increment the newman by one \n            newman -= 1 \n    # return the newman \n    return newman \n",
        "num_ids": 198
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*(r**2))\n",
        "num_ids": 17
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * r * math.pi\n    return a\n",
        "num_ids": 17
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (math.pi*r**2)*6\n",
        "num_ids": 15
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 2*math.pi*r*r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    A=3.1416*r**2\n    return A\ndef surfacearea_rectangle(length,width):\n    '''\n    Write a function that calculates the surface area of a rectangle\n    based on its length and width.\n    '''\n    A=width*length\n    return A\ndef surfacearea_circle(radius):\n    '''\n    Write a function that calculates the surface area of a circle.\n    '''\n    pi=3.1416\n    A=pi*radius**2\n    return A\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function that calculates the area of a triangle.\n    '''\n    return (a*b)*(c/2)\ndef area_of_quad(a,b,c):\n    '''\n    Write a function that calculates the area of a quadrilateral.\n    '''\n    return 0.5*a*(b+c)\ndef area_of_pentagon(a,b,c):\n    '''\n    Write a function that calculates the area of a pentagon.\n    '''\n    return (a*b)*(c/2)\ndef area_of_hexahedron(a,b,c):\n    '''\n    Write a function that calculates the area of a hexagonal\n    one-side triangle.\n    '''\n    return 0.5*a*(b+c)\ndef area_of_hexahedron_two(a,b,c):\n    '''\n    Write a function that calculates the area of a hexagonal\n    two-side triangle.\n    '''\n    return 0.5*a*(b+c)\ndef area_of_hexahedron_three(a,b,c):\n    '''\n    Write a function that calculates the area of a hexagonal\n    three-side triangle.\n    '''\n    return 0.5*a*(b+c)\ndef area_of_hexahedron_four(a,b,c):\n    '''\n    Write a function that calculates the area of a heptaagon\n    one-side triangle.\n    '''\n    return 0.5*a*(b+c)\ndef area_of_hexahedron_four_two(a,b,c):\n    '''\n    Write a function that calculates the area of a heptaagon\n    two-side triangle.\n    '''\n    return 0.5*a*(b+c)\ndef area_of_hexahedron_four_three(a,b,c):\n    '''\n    Write a function that calculates the area of a heptaagon\n    three-side triangle.\n    '''\n    return 0.5*a*(b+c)\ndef area_of_hexahedron_four_four(a,b,c):\n    '''\n    Write a function that calculates the area of a heptaagon\n    four-side triangle.\n    '''\n    return 0.5*a*(b+c)\ndef area_of_hexahedron_four_five(a,b,c):\n    '''\n    Write a function that calculates the area of a heptaagon\n    five-side triangle.\n    '''\n    return 0.5*a*(b+c)\ndef volume_of_cuboid(a,b,c,d):\n    '''\n    Write a function that calculates the volume of a cuboid.\n    '''\n    return (a*(b+c+d)/3)\ndef volume_of_pentagon(a,b,c):\n    '''\n    Write a function that calculates the volume of a pentagon.\n    '''\n    return 0.5*(a*(b+c)/3)\ndef volume_of_rectangle(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle.\n    '''\n    A=length*width\n    return A\ndef volume_of_circle(radius):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    pi=3.1416\n    A=radius**3\n    return A\ndef volume_of_rectangle_two(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle\n    two sides.\n    '''\n    A=length*width\n    return A\ndef volume_of_rectangle_three(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle\n    three sides.\n    '''\n    A=length*width\n    return A\ndef volume_of_rectangle_four(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle\n    four sides.\n    '''\n    A=length*width\n    return A\ndef volume_of_rectangle_five(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle\n    five sides.\n    '''\n    A=length*width\n    return A\ndef volume_of_hexahedron(a,b,c,d):\n    '''\n    Write a function that calculates the volume of a hexahedron.\n    '''\n    return (a*(b+c)/3)\ndef volume_of_hexahedron_two(a,b,c):\n    '''\n    Write a function that calculates the volume of a hexahedron\n    two sides.\n    '''\n    return 0.5*(a*(b+c)/3)\ndef volume_of_hexahedron_three(a,b,c):\n    '''\n    Write a function that calculates the volume of a hexahedron\n    three sides.\n    '''\n    return 0.5*(a*(b+c)/3)\ndef volume_of_hexahedron_four(a,b,c):\n    '''\n    Write a function that calculates the volume of a hexahedron\n    four sides.\n    '''\n    return 0.5*(a*(b+c)/3)\ndef volume_of_hexahedron_four_two(a,b,c):\n    '''\n    Write a function that calculates the volume of a hexahedron\n    two sides.\n    '''\n    return 0.5*(a*(b+c)/3)\ndef volume_of_hexahedron_four_three(a,b,c):\n    '''\n    Write a function that calculates the volume of a hexahedron\n    three sides.\n    '''\n    return 0.5*(a*(b+c)/3)\ndef volume_of_hexahedron_four_four(a,b,c):\n    '''\n    Write a function that calculates the volume of a hexahedron\n    four sides.\n    '''\n    return 0.5*(a*(b+c)/3)\ndef volume_of_hexahedron_four_five(a,b,c):\n    '''\n    Write a function that calculates the volume of a hexahedron\n    five sides.\n    '''\n    return 0.5*(a*(b+c)/3)\ndef volume_of_hexahedron_five(a,b,c):\n    '''\n    Write a function that calculates the volume of a hexahedron\n    five sides.\n    '''\n    return 0.5*(a*(b+c)/3)\ndef volume_of_rectangle_four(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle\n    four sides.\n    '''\n    A=length*width\n    return A\ndef volume_of_rectangle_four_two(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle\n    two sides.\n    '''\n    A=length*width\n    return A\ndef volume_of_rectangle_four_three(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle\n    three sides.\n    '''\n    A=length*width\n    return A\ndef volume_of_rectangle_four_four(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle\n    four sides.\n    '''\n    A=length*width\n    return A\ndef volume_of_rectangle_five(length,width):\n    '''\n    Write a function that calculates the volume of a rectangle\n    five sides.\n    '''\n    A=length*width\n    retur",
        "num_ids": 12
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 3.14\n    r = r ** 2\n    s = 4 * math.pi * (r ** 2)\n    return s\n",
        "num_ids": 35
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=3.14*(r**3)\n    return area\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=h*math.pi*(r**2)\n    return area\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area=2*math.pi*(h*r)\n    return area\ndef surfacearea_obtuseCone(r,h):\n    '''\n    Write a function to find the surface area of an obtuse cone.\n    '''\n    area=2*math.pi*(h*r)\n    return area\ndef surfacearea_verticalCylinder(r,h):\n    '''\n    Write a function to find the surface area of a vertical cylinder.\n    '''\n    area=3*math.pi*(r**2)\n    return area\ndef surfacearea_linearCylinder(r,h):\n    '''\n    Write a function to find the surface area of a linear cylinder.\n    '''\n    area=h*math.pi*(r**2)\n    return area\ndef surfacearea_tetrahedron(r,h):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    area=6*h*math.pi*(r**2)\n    return area\ndef surfacearea_cuboctahedron(r,h):\n    '''\n    Write a function to find the surface area of a cube octahedron.\n    '''\n    area=8*h*math.pi*(r**2)\n    return area\ndef surfacearea_quadrilateral(r,h):\n    '''\n    Write a function to find the surface area of a quadrilateral.\n    '''\n    area=h**2\n    return area\ndef surfacearea_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    area=math.pi*(2*h)**2\n    return area\ndef surfacearea_tetrahedron(r,h):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    area=3*math.pi*(r**2)\n    return area\ndef surfacearea_uniform(r,h):\n    '''\n    Write a function to find the surface area of an uniform surface.\n    '''\n    area=r*h\n    return area\ndef surfacearea_rectangle(r,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=2*math.pi*r\n    return area\ndef surfacearea_parallelogram(r,h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    area=4*math.pi*h\n    return area\ndef surfacearea_heptagon(r,h):\n    '''\n    Write a function to find the surface area of a heptagon.\n    '''\n    area=6*math.pi*r**2\n    return area\ndef surfacearea_octahedron(r,h):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    area=8*h*math.pi*r**2\n    return area\ndef surfacearea_tetrahedron(r,h):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    area=6*h*math.pi*r**2\n    return area\ndef surfacearea_uniform(r,h):\n    '''\n    Write a function to find the surface area of an uniform surface.\n    '''\n    area=r*h\n    return area\ndef surfacearea_vacuum(r,h):\n    '''\n    Write a function to find the surface area of a vacuum.\n    '''\n    area=2*h*math.pi*r**2\n    return area\ndef surfacearea_tetrahedron(r,h):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    area=3*math.pi*r**2\n    return area\ndef surfacearea_rectangle(r,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=2*math.pi*r\n    return area\ndef surfacearea_parallelogram(r,h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    area=4*math.pi*h\n    return area\ndef surfacearea_heptagon(r,h):\n    '''\n    Write a function to find the surface area of a heptagon.\n    '''\n    area=6*math.pi*r**2\n    return area\ndef surfacearea_octahedron(r,h):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    area=8*math.pi*r**2\n    return area\ndef surfacearea_tetrahedron(r,h):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    area=6*math.pi*r**2\n    return area\ndef surfacearea_vacuum(r,h):\n    '''\n    Write a function to find the surface area of a vacuum.\n    '''\n    area=r*h\n    return area\ndef surfacearea_cube(r,h):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    area=3*math.pi*h**3\n    return area\ndef surfacearea_cuboctahedron(r,h):\n    '''\n    Write a function to find the surface area of a cuboctahedron.\n    '''\n    area=8*math.pi*h**3\n    return area\ndef surfacearea_heptagon(r,h):\n    '''\n    Write a function to find the surface area of a heptagon.\n    '''\n    area=6*math.pi*h**3\n    return area\ndef surfacearea_dodecahedron(r,h):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    area=6*math.pi*h**3\n    return area\ndef surfacearea_hexagon(r,h):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    area=6*math.pi*h**2\n    return area\ndef surfacearea_octahedron(r,h):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    area=8*math.pi*h**2\n    return area\ndef surfacearea_tetrahedron(r,h):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    area=6*math.pi*h**2\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=math.pi*r**3\n    return area\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=h*math.pi*r\n    return area\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area=math.pi*h*r\n    return area\ndef surfacearea_obtuseCone(r,h):\n    '''\n    Write a function to find the surface area of an obtuse cone.\n    '''\n    area=math.pi*h*r\n    return area\ndef surfacearea_linearCylinder(r,h):\n    '''\n    Write a function to find the surface area of a linear cylinder.\n    '''\n    area=3*h*math.pi*r\n    return area\ndef surfacearea_linearCone",
        "num_ids": 26
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = 4 * (math.pi * math.pow(r,3))\n    return surface\n",
        "num_ids": 26
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 2 * math.pi * r ** 2\n    return a\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * math.pi\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (4 * math.pi * r **3)\ndef surface_volume_sphere(r):\n    '''\n    Write a function that returns the surface volume of a sphere.\n    '''\n    return (4 * math.pi * r **3) * (r**3)\ndef area_of_circle(r):\n    '''\n    Write a function that returns the area of a circle with radius r.\n    '''\n    return math.pi * r * r\ndef perimeter_circle(r):\n    '''\n    Write a function that returns the perimeter of a circle with radius r.\n    '''\n    return (2 * math.pi * r)\ndef volume_of_cylinder(r, d):\n    '''\n    Write a function that returns the volume of a cylinder with diameter r, and thickness d.\n    '''\n    return (4/3) * math.pi * r ** 3 * d\ndef surface_area_of_cylinder(r, d):\n    '''\n    Write a function that returns the surface area of a cylinder with diameter r, and thickness d.\n    '''\n    return (4/3) * math.pi * r ** 3 * d\ndef volume_of_cube(r):\n    '''\n    Write a function that returns the volume of a cube with radius r.\n    '''\n    return (4/3) * math.pi * (r**3)\ndef surface_area_of_cube(r):\n    '''\n    Write a function that returns the surface area of a cube with radius r.\n    '''\n    return (4/3) * math.pi * (r**3) * (r**3)\ndef area_of_ellipse(a, b, c, d):\n    '''\n    Write a function that returns the surface area of an ellipse with angles (a, b, c) and width (d).\n    '''\n    return (4/3) * math.pi * (a + b + c) * d\ndef surface_area_of_ellipse(a, b, c, d):\n    '''\n    Write a function that returns the surface area of an ellipse with angles (a, b, c) and width (d).\n    '''\n    return (4/3) * math.pi * (a + b + c) * (d**2)\ndef surface_area_of_rectangle(a, b):\n    '''\n    Write a function that returns the surface area of a rectangle with its bottom left corner (a, b).\n    '''\n    return (4/3) * math.pi * (a ** 2) * (b ** 2)\ndef surface_area_of_rectangle(a, b):\n    '''\n    Write a function that returns the surface area of a rectangle with its bottom left corner (a, b).\n    '''\n    return (4/3) * math.pi * (a ** 2) * (b)\ndef volume_of_ellipse(a, b, c):\n    '''\n    Write a function that returns the volume of an ellipse with angles (a, b, c).\n    '''\n    return (4/3) * math.pi * (a**2) * (b) * (c)\ndef volume_of_rectangle(a, b):\n    '''\n    Write a function that returns the volume of a rectangle with its bottom left corner (a, b).\n    '''\n    return (4/3) * math.pi * (a) * (b)\ndef volume_of_circle(r):\n    '''\n    Write a function that returns the volume of a circle with radius r.\n    '''\n    return (4/3) * math.pi * r**3\ndef surface_area_of_circle(r):\n    '''\n    Write a function that returns the surface area of a circle with radius r.\n    '''\n    return (4/3) * math.pi * r**3 * (r**3)\ndef perimeter_of_circle(r):\n    '''\n    Write a function that returns the perimeter of a circle with radius r.\n    '''\n    return (2*math.pi) * r\ndef volume_of_cylinder(r, d):\n    '''\n    Write a function that returns the volume of a cylinder with diameter r, and thickness d.\n    '''\n    return (4/3) * math.pi * r * d\ndef surface_area_of_cylinder(r, d):\n    '''\n    Write a function that returns the surface area of a cylinder with diameter r, and thickness d.\n    '''\n    return (4/3) * math.pi * r * d * (d**2)\ndef volume_of_cube(r):\n    '''\n    Write a function that returns the volume of a cube with radius r.\n    '''\n    return (4/3) * math.pi * r **3\ndef surface_area_of_cube(r):\n    '''\n    Write a function that returns the surface area of a cube with radius r.\n    '''\n    return (4/3) * math.pi * r ** 3 * (r**3)\ndef area_of_ellipse(a, b, c, d):\n    '''\n    Write a function that returns the surface area of an ellipse with angles (a, b, c, d).\n    '''\n    return (4/3) * math.pi * (a + b + c + d) * d\ndef surface_area_of_ellipse(a, b, c, d):\n    '''\n    Write a function that returns the surface area of an ellipse with angles (a, b, c, d).\n    '''\n    return (4/3) * math.pi * (a + b + c + d) * (d**2)\ndef area_of_rectangle(a, b):\n    '''\n    Write a function that returns the surface area of a rectangle with its bottom left corner (a, b).\n    '''\n    return (4/3) * math.pi * (a ** 2) * b\ndef surface_area_of_rectangle(a, b):\n    '''\n    Write a function that returns the surface area of a rectangle with its bottom left corner (a, b).\n    '''\n    return (4/3) * math.pi * (a ** 2) * b\ndef volume_of_ellipse(a, b, c):\n    '''\n    Write a function that returns the volume of an ellipse with angles (a, b, c).\n    '''\n    return (4/3) * math.pi * (a * b * c)\ndef volume_of_rectangle(a, b):\n    '''\n    Write a function that returns the volume of a rectangle with its bottom left corner (a, b).\n    '''\n    return (4/3) * math.pi * (a * b)\ndef volume_of_circle(r):\n    '''\n    Write a function that returns the volume of a circle with radius r.\n    '''\n    return (4/3) * math.pi * (r**3)\ndef surface_area_of_circle(r):\n    '''\n    Write a function that returns the surface area of a circle with radius r.\n    '''\n    return (4/3) * math.pi * (r**3) * (r**3)\ndef perimeter_of_circle(r):\n    '''\n    Write a function that returns the perimeter of a circle with radius r.\n    '''\n    return (2*math.pi) * r\ndef volume_of_cylinder(r, d):\n    '''\n    Write a function that returns the volume of a cylinder with radius r, and thickness d.\n    '''\n    return (4/3) * math.pi * (r**3) * (d**2)\ndef surface_area_of_cylinder(r, d):\n    '''\n    Write a function that returns the surface area of a cylinder with radius r, and thickness d.\n    '''\n    return (4/3) * math.pi * (r**3) * (d**2) * (d**2)\ndef area_of_ellipse(a, b, c, d):\n    '''\n    Write a function that returns the surface area of an ellipse with angles (a, b, c",
        "num_ids": 24
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n > 9:\n        return -1\n    return (n*n)-((n*n)-1)\n",
        "num_ids": 29
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Your code here\n    return (int(n/3))*3*(6-n)\n",
        "num_ids": 26
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n - 1 + (n - 2) % 12\n",
        "num_ids": 31
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    else:\n        return ((centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2) + centered_hexagonal_number(n-3)) * 6)\n",
        "num_ids": 83
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**3\n",
        "num_ids": 8
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    r = 0\n    while(r <= n):\n        \n        if (r == 0):\n            r = 4\n        else:\n            r += 4\n        \n        print(r)\n    \n    return r\n",
        "num_ids": 53
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0 or n % 3 == 0:\n        return None\n    x = n // 3\n    if n % 3 == 1:\n        y = 3\n    if n % 3 == 2:\n        y = 0\n",
        "num_ids": 54
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Unpack dictionaries\n    d1 = dict1\n    d2 = dict2\n    d3 = dict3\n    # Combine dictionaries\n    dict4 = {}\n    for i in d1.keys():\n        for j in d2.keys():\n            if i in d3.keys():\n                if j in d3.keys():\n                    dict4[i] = d1[i] + d2[j] + d3[j]\n                else:\n                    dict4[i] = d1[i] + d2[j]\n    return dict4\n",
        "num_ids": 135
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    dict3.update(dict2)\n    return dict3\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_two_optimization(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_two_optimization_ordered(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_two_optimization_ordered_more(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef union_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef union_dictionaries_two_optimization(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef union_dictionaries_two_optimization_ordered(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef union_dictionaries_two_optimization_ordered_more(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef intersection_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef intersection_dictionaries_two_optimization(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef intersection_dictionaries_two_optimization_ordered(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef intersection_dictionaries_two_optimization_ordered_more(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef difference_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef difference_dictionaries_two_optimization(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef difference_dictionaries_two_optimization_ordered(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef difference_dictionaries_two_optimization_ordered_more(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef sub_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef sub_dictionaries_two_optimization(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef sub_dictionaries_two_optimization_ordered(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\ndef sub_dictionaries_two_optimization_ordered_more(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    dict1.update(dict2)\n    return dict1\n",
        "num_ids": 19
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n",
        "num_ids": 45
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Take in the first dictionary\n    dict1_copy = dict1.copy()\n    # Take in the second dictionary\n    dict2_copy = dict2.copy()\n    # Take in the third dictionary\n    dict3_copy = dict3.copy()\n    # Copy the values from both dictionaries\n    dict1_copy.update(dict2_copy)\n    dict1_copy.update(dict3_copy)\n    return dict1_copy\n",
        "num_ids": 107
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    if len(dict1)<len(dict2):\n        dict_merged.update(dict1)\n    else:\n        dict_merged.update(dict2)\n    if len(dict3)<len(dict1):\n        dict_merged.update(dict3)\n    else:\n        dict_merged.update(dict3)\n    return dict_merged\n",
        "num_ids": 101
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1\n    d.update(dict2)\n    d.update(dict3)\n    return d\n",
        "num_ids": 30
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key,value in dict1.items():\n        if key in dict2.keys():\n            merged_dict[key] = value\n            merged_dict[key] = merged_dict[key]+dict2[key]\n        else:\n            merged_dict[key] = value\n    for key,value in dict2.items():\n        if key in dict3.keys():\n            merged_dict[key] = value\n            merged_dict[key] = merged_dict[key]+dict3[key]\n        else:\n            merged_dict[key] = value\n    return merged_dict\ndef compare_dictionaries(dict1, dict2, dict3):\n    '''\n    Write a function to compare two dictionaries.\n    '''\n    merged_dict = merge_dictionaries_three(dict1,dict2,dict3)\n    return ct.Counter(merged_dict.values())",
        "num_ids": 40
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for k,v in dict2.items():\n        if dict1.get(k,None) is not None:\n            dict1[k].update(dict2[k])\n        else:\n            dict1[k]=dict2[k]\n",
        "num_ids": 60
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    temp_dict = {}\n    for key, value in dict1.items():\n        temp_dict[key] = value\n",
        "num_ids": 31
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Add the key/value pairs from the dict1 dictionary into the dict2 dictionary\n    for k1,v1 in dict1.items():\n        if k1 in dict2:\n            dict2[k1].update(dict1[k1])\n        else:\n            dict2[k1] = dict1[k1]\n    for k1,v1 in dict2.items():\n        if k1 in dict3:\n            dict3[k1].update(dict2[k1])\n        else:\n            dict3[k1] = dict2[k1]\n    return dict3\n",
        "num_ids": 142
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # your code goes here\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "num_ids": 30
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #First set of variables\n    list1_set = set(list1)\n    freq_d = {}\n    #Looping through the list\n    for i in list1_set:\n        #For each element\n        for j in list1:\n            #If element is not equal to current\n            if i == j:\n                #Append to dictionary\n                freq_d[i] = freq_d.get(i,0) + 1\n    return freq_d\n",
        "num_ids": 115
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # initializing the dictionary and list\n    d = collections.Counter(list1)\n    # looping through the dictionary and storing the element in the list\n    for key, value in d.items():\n        print(key, value)\n    # returning the dictionary\n    return d\n",
        "num_ids": 66
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n",
        "num_ids": 12
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\ndef tupple_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list,\n    returned as a tuple.\n    '''\n    tuple = collections.namedtuple('tuple', ['value', 'count'])\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict, tuple(dict.values())\ndef s_frequent(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list.\n    '''\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\ndef frequency_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list.\n    '''\n    dict = freq_count(list1)\n    tuple = tupple_count(list1)\n    for i in dict:\n        dict[i] = dict[i] / tuple[i]\n    return dict\ndef frequency_summ(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = dict[i] / tuple[i]\n    return dict\ndef first_max_pair(list1):\n    '''\n    Write a function to get the second maximum of two elements.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict\ndef first_max_key(list1):\n    '''\n    Write a function to get the second maximum of a dictionary.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict\ndef first_max_key_pair(list1):\n    '''\n    Write a function to get the second maximum of a dictionary.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict, tuple(dict.values())\ndef second_max_pair(list1):\n    '''\n    Write a function to get the third maximum of two elements.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict\ndef second_max_key(list1):\n    '''\n    Write a function to get the third maximum of a dictionary.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict\ndef second_max_key_pair(list1):\n    '''\n    Write a function to get the third maximum of a dictionary.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict, tuple(dict.values())\ndef second_max_key_pair_pair(list1):\n    '''\n    Write a function to get the third maximum of two dictionaries.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict, tuple(dict.values())\ndef third_max_pair(list1):\n    '''\n    Write a function to get the fourth maximum of two elements.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict\ndef third_max_key(list1):\n    '''\n    Write a function to get the fourth maximum of a dictionary.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict\ndef third_max_key_pair(list1):\n    '''\n    Write a function to get the fourth maximum of two dictionaries.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict, tuple(dict.values())\ndef third_max_key_pair_pair(list1):\n    '''\n    Write a function to get the fourth maximum of a dictionary.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict, tuple(dict.values())\ndef third_max_key_pair_pair_pair(list1):\n    '''\n    Write a function to get the fourth maximum of two dictionaries.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict, tuple(dict.values())\ndef fourth_max_pair(list1):\n    '''\n    Write a function to get the fifth maximum of two elements.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict\ndef fourth_max_key(list1):\n    '''\n    Write a function to get the fifth maximum of a dictionary.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict\ndef fourth_max_key_pair(list1):\n    '''\n    Write a function to get the fifth maximum of two dictionaries.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict, tuple(dict.values())\ndef fourth_max_key_pair_pair(list1):\n    '''\n    Write a function to get the fifth maximum of two dictionaries.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict, tuple(dict.values())\ndef fifth_max_pair(list1):\n    '''\n    Write a function to get the sixth maximum of two elements.\n    '''\n    dict = frequency_count(list1)\n    tuple = s_frequent(list1)\n    for i in dict:\n        dict[i] = max(dict[i], dict[i + 1])\n    return dict\ndef fifth_max_key(list1):\n    '''\n    Write a function to get the sixth maximum of a dictionar",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic1 = collections.Counter(list1)\n    return dic1\n",
        "num_ids": 21
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = collections.Counter(list1)\n    return result\n",
        "num_ids": 17
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts={}\n    for i in list1:\n        counts[i]=list1.count(i)\n    return counts\n",
        "num_ids": 34
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #create an empty dictionary\n    dictionary = collections.Counter(list1)\n    return dictionary\n",
        "num_ids": 25
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # write your code here\n    if N < 10:\n        return N\n    else:\n        return closest_num(N-10)\n    \nprint(closest_num(int(input()))",
        "num_ids": 50
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N < 0:\n        return -1\n    else:\n        return closest_num(N - 1) + 1\n",
        "num_ids": 43
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = []\n    for i in range(N):\n        num = i\n        while num!= 0:\n            x = num % 10\n            num = int(num / 10)\n        l.append(x)\n",
        "num_ids": 54
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #if N < 1:\n    #    return 1\n    #elif N == 1:\n    #    return 1\n    #elif N == 2:\n    #    return 1\n    #elif N == 3:\n    #    return 2\n    #elif N == 4:\n    #    return 3\n    #elif N == 5:\n    #    return 4\n    #elif N == 6:\n    #    return 5\n    #elif N == 7:\n    #    return 6\n    #elif N == 8:\n    #    return 7\n    #elif N == 9:\n    #    return 8\n    #else:\n    #    return 9\n    #return closest_num(N - 1)\n    return (N % 10)\n",
        "num_ids": 182
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = [i for i in range(1, N + 1)]\n    l.sort()\n    return l[-1]\n",
        "num_ids": 33
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    if N == 0:\n        return math.inf\n",
        "num_ids": 19
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    result = N\n    for num in range(N, 0, -1):\n        if num < result:\n            result = num\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the closest number and see if it's the smallest.\n    if N < 10:\n        return N\n    else:\n        return closest_num(N//10) + N%10\n",
        "num_ids": 47
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    else:\n        return closest_num(N - 1) + closest_num(N - 2)\n",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(1, N):\n        if abs(i - N) < abs(closest - N):\n            closest = i\n    return closest\n",
        "num_ids": 49
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #Write your code here\n    if list1:\n        return len(max(list1, key=len))\n    else:\n        return 0\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l=len(max(list1,key=len))\n    print(l)\n    return l\n",
        "num_ids": 27
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    x = 0\n    for i in list1:\n        if len(i) > x:\n            x = len(i)\n    return x\ndef words(list1):\n    '''\n    Write a python function to find the words in the list.\n    '''\n    x = []\n    for i in list1:\n        x.append(i.split())\n    return x\n",
        "num_ids": 29
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(list1)\n",
        "num_ids": 10
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #your code goes here\n    longest_word = []\n    count = 0\n    for i in list1:\n        if len(i) > count:\n            count = len(i)\n            longest_word.append(i)\n        elif len(i) > count:\n            count = len(i)\n            longest_word.append(i)\n",
        "num_ids": 89
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_length = 0\n    for word in list1:\n        word_length = len(word)\n    print(word_length)\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(len(list1))\n",
        "num_ids": 11
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # TODO: Write your code here\n    \n    return max(map(len,list1))\n",
        "num_ids": 26
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = [word for word in list1 if len(word) > 1]\n    return len(words)\n",
        "num_ids": 28
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) > 0:\n        return len(list1[0])\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    index=str1.find(sub_str)\n    if index!= -1:\n        return index\n    else:\n        return -1\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # find the left index of the substring\n    l = 0\n    # find the right index of the substring\n    r = len(sub_str) - 1\n    while l < r:\n        if str1[l] == sub_str[r]:\n            l += 1\n            r -= 1\n        elif str1[l]!= sub_str[r]:\n            l += 1\n            r -= 1\n        else:\n            return True\n    return False\n",
        "num_ids": 112
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    if sub_str_len > len(str1):\n        return False\n    else:\n        indices = []\n        for i in range(0, len(str1)-sub_str_len+1):\n            if str1[i:i+sub_str_len] == sub_str:\n                indices.append(i)\n                if len(indices) == len(str1):\n                    return True\n        return False\n",
        "num_ids": 120
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1:\n        return False\n    if not sub_str:\n        return False\n    #Looping through the string and checking if the substring is present in the string\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            #If the substring is present in the string, then we return True\n            return True\n    #If the substring is not present in the string, then we return False\n    return False\n",
        "num_ids": 121
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < 1:\n        return False\n    elif len(str1) == 1:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        for j in range(i, len(str1)):\n            if str1[i:j] == sub_str:\n                return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Time complexity O(n)\n    # Space Complexity O(n)\n    # Construct the algorithm to iterate through the list from the beginning to the end\n    # at each position, using the given substring as the starting element.\n    # The final answer is false if the given string is not present in the list.\n    # Every iteration of the algorithm will check if the substring is present in the list.\n    # Use a set to store the characters present in the given string.\n    # Time complexity O(n)\n    # Space Complexity O(1)\n    # Inserts the sub-string into a set and populates a dictionary.\n    # Time complexity O(n)\n    # Space Complexity O(n)\n    # Iterates through the list at the given position and compares each character to every character in the set.\n    # If the character is in the set, then it's present in the list and should not be present in the dictionary.\n    # Returns true if the string is present in the dictionary and false otherwise.\n    # Time complexity O(n)\n    # Space Complexity O(n)\n    # O(n) = 1\n    # O(1) = 1\n    if str1 == \"\":\n        return False\n",
        "num_ids": 283
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = list(sub_str)\n    if len(str1) < len(sub_str_list):\n        return False\n    else:\n        check_list = list()\n        for i in range(len(str1)-len(sub_str)+1):\n            check_list.append(str1[i:i+len(sub_str)])\n        return check_list == sub_str_list\n",
        "num_ids": 103
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Create an empty dictionary to store the count of times a character is found in a string\n    counts = {}\n    for char in sub_str:\n        counts[char] = counts.get(char, 0) + 1\n    \n    # Iterate through the dictionary\n    for char in counts:\n        if counts[char] > 0:\n            # Checks if the character is present in the string\n            for i in range(len(str1)):\n                if str1[i:].find(char)!= -1:\n                    return True\n    return False\n",
        "num_ids": 132
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #your code goes here\n    sub_str_list = sub_str.split(\" \")\n    for i in range(len(sub_str_list)):\n        if sub_str_list[i] in str1:\n            return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%2!= 0\n",
        "num_ids": 11
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        print(f\"{n} is even.\")\n    else: \n        print(f\"{n} is odd.\")\n",
        "num_ids": 41
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a = len(n)\n    if a % 2 == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n <= 1)\n",
        "num_ids": 10
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 1\n",
        "num_ids": 10
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2!= 0:\n        return False\n    if n % 3 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%2 == 1\n",
        "num_ids": 10
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # find the sum of all multiples of 3 and 5 \n    s = 0\n    for x in range(1, n + 1):\n        if x%3 == 0 or x%5 == 0:\n            s += x\n    if s == n:\n        return True\n    else: \n        return False\n",
        "num_ids": 75
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: return True\n    if n == 2: return True if n > 1 else False\n    \n    # if the number is not even and odd it should not be undulating\n    if n % 2 == 0 and n % 3 == 0: return False\n    \n    return is_undulating(n//3) or is_undulating(n//2)\n",
        "num_ids": 86
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a*power(a,b-1)\n    \ndef main():\n    print('Enter the value of a:')\n    a = int(input())\n    print('Enter the value of b:')\n    b = int(input())\n    print('The value of result is:', power(a,b))\n",
        "num_ids": 91
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a**b\n    \n    \ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common denominator between two integers.\n    '''\n    \n    if b==0:\n        return a\n    elif b==1:\n        return 1\n    else:\n        return gcd(b,a%b)\n        \n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if a number is prime.\n    '''\n    \n    if n<2:\n        return False\n        \n    if n==2:\n        return True\n    \n    if n%2==0 or n%3==0:\n        return False\n        \n    for i in range(5,int(math.sqrt(n)),2):\n        if n%i==0:\n            return False\n            \n    return True\n",
        "num_ids": 90
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b == 0):\n        return a\n    else:\n        return a * power(a,b-1)\n",
        "num_ids": 31
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n",
        "num_ids": 10
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # YOUR CODE HERE\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    return a*power(a,b-1)\n",
        "num_ids": 44
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 0\n    elif a%2 == 0:\n        return power(a//2, b)\n    else:\n        return a**b\n        ",
        "num_ids": 45
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n",
        "num_ids": 10
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    return a**b\n",
        "num_ids": 19
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code here\n    return test_list[0][1]\n",
        "num_ids": 19
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list = sorted(test_list, key=itemgetter(1))\n    return new_list[0][0]\n",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_val = test_list[0][0]\n    second_val = test_list[0][1]\n    for item in test_list:\n        if item[1] < second_val:\n            second_val = item[1]\n            minimum_val = item[0]\n    return minimum_val\n",
        "num_ids": 77
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #nested_list = []\n    #for pair in test_list:\n    #    nested_list.append(pair[1])\n    #return max(nested_list)\n    #return min(nested_list)\n    min = min(test_list, key=itemgetter(1))\n    return min[0]\n",
        "num_ids": 83
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if test_list == []:\n        return\n    min_second_value = min(map(itemgetter(1), test_list))\n    return test_list[0][0] if min_second_value == test_list[0][1] else test_list[1][0]\n",
        "num_ids": 71
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    tuple_list = []\n    for tuple in test_list:\n        tuple_list.append(tuple[0])\n    tuple_list.sort()\n    tuple_list = tuple_list[1:]\n    for i in tuple_list:\n        if tuple_list.count(i) == 2:\n            return i\n    raise Exception('No minimum value!')\n",
        "num_ids": 92
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)-1):\n        if test_list[i][1] < test_list[i+1][1]:\n            return test_list[i]\n    return test_list[i]\n        \ndef test_case():\n    assert index_minimum([(2,3),(5,6)]) == (3,6)\n    assert index_minimum([(1,1),(3,3)]) == (1,3)\n    assert index_minimum([(5,5),(5,5)]) == (5,5)\n    assert index_minimum([(1,1),(2,1)]) == (1,1)\n    assert index_minimum([(1,1),(2,2)]) == (1,2)\n    assert index_minimum([(1,1),(2,1)]) == (1,1)\n    assert index_minimum([(1,1),(2,3)]) == (1,3)\n    assert index_minimum([(1,1),(2,3)]) == (1,3)\n    assert index_minimum([(1,1),(2,3)]) == (1,3)\n    assert index_minimum([(1,1),(2,4)]) == (1,4)\n    assert index_minimum([(1,1),(2,3)]) == (1,3)\n    assert index_minimum([(1,1),(2,4)]) == (1,4)\n    assert index_minimum([(1,1),(2,4)]) == (1,4)\n    assert index_minimum([(1,1),(2,5)]) == (1,5)\n    assert index_minimum([(1,1),(2,5)]) == (1,5)\n    assert index_minimum([(1,1),(2,6)]) == (1,6)\n    assert index_minimum([(1,1),(2,7)]) == (1,7)\n    assert index_minimum([(1,1),(2,7)]) == (1,7)\n    assert index_minimum([(1,1),(2,8)]) == (1,8)\n    assert index_minimum([(1,1),(2,8)]) == (1,8)\n    assert index_minimum([(1,1),(2,9)]) == (1,9)\n    assert index_minimum([(1,1),(2,9)]) == (1,9)\n    assert index_minimum([(1,1),(2,10)]) == (1,10)\n    assert index_minimum([(1,1),(2,10)]) == (1,10)\n    assert index_minimum([(1,1),(2,11)]) == (1,11)\n    assert index_minimum([(1,1),(2,11)]) == (1,11)\n    assert index_minimum([(1,1),(2,12)]) == (1,12)\n    assert index_minimum([(1,1),(2,12)]) == (1,12)\n    assert index_minimum([(1,1),(2,13)]) == (1,13)\n    assert index_minimum([(1,1),(2,13)]) == (1,13)\n    assert index_minimum([(1,1),(2,14)]) == (1,14)\n    assert index_minimum([(1,1),(2,14)]) == (1,14)\n    assert index_minimum([(1,1),(2,15)]) == (1,15)\n    assert index_minimum([(1,1),(2,15)]) == (1,15)\n    assert index_minimum([(1,1),(2,16)]) == (1,16)\n    assert index_minimum([(1,1),(2,16)]) == (1,16)\n    assert index_minimum([(1,1),(2,17)]) == (1,17)\n    assert index_minimum([(1,1),(2,18)]) == (1,18)\n    assert index_minimum([(1,1),(2,19)]) == (1,19)\n    assert index_minimum([(1,1),(2,20)]) == (1,20)\n    assert index_minimum([(1,1),(2,21)]) == (1,21)\n    assert index_minimum([(1,1),(2,22)]) == (1,22)\n    assert index_minimum([(1,1),(2,23)]) == (1,23)\n    assert index_minimum([(1,1),(2,24)]) == (1,24)\n    assert index_minimum([(1,1),(2,25)]) == (1,25)\n    assert index_minimum([(1,1),(2,26)]) == (1,26)\n    assert index_minimum([(1,1),(2,27)]) == (1,27)\n    assert index_minimum([(1,1),(2,28)]) == (1,28)\n    assert index_minimum([(1,1),(2,29)]) == (1,29)\n    assert index_minimum([(1,1),(2,30)]) == (1,30)\n    assert index_minimum([(1,1),(2,31)]) == (1,31)\n    assert index_minimum([(1,1),(2,32)]) == (1,32)\n    assert index_minimum([(1,1),(2,33)]) == (1,33)\n    assert index_minimum([(1,1),(2,34)]) == (1,34)\n    assert index_minimum([(1,1),(2,35)]) == (1,35)\n    assert index_minimum([(1,1),(2,36)]) == (1,36)\n    assert index_minimum([(1,1),(2,37)]) == (1,37)\n    assert index_minimum([(1,1),(2,38)]) == (1,38)\n    assert index_minimum([(1,1),(2,39)]) == (1,39)\n    assert index_minimum([(1,1),(2,40)]) == (1,40)\n    assert index_minimum([(1,1),(2,41)]) == (1,41)\n    assert index_minimum([(1,1),(2,42)]) == (1,42)\n    assert index_minimum([(1,1),(2,43)]) == (1,43)\n    assert index_minimum([(1,1),(2,44)]) == (1,44)\n    assert index_minimum([(1,1),(2,45)]) == (1,45)\n    assert index_minimum([(1,1),(2,46)]) == (1,46)\n    assert index_minimum([(1,1),(2,47)]) == (1,47)\n    assert index_minimum([(1,1),(2,48)]) == (1,48)\n    assert index_minimum([(1,1),(2,49)]) == (1,49)\n    assert index_minimum([(1,1),(2,50)]) == (1,50)\n    assert index_minimum([(1,1),(2,51)]) == (1,51)\n    assert index_minimum([(1,1),(2,52)]) == (1,52)\n    assert index_minimum([(1,1),(2,53)]) == (1,53)\n    assert index_minimum([(1,1),(2,54)]) == (1,54)\n    assert index_minimum([(1,1),(2,55)]) == (1,55)\n    assert index_minimum([(1,1),(2,56)]) == (1,56)\n    assert index_minimum([(1,1),(2,57)]) == (1,57)\n    assert index_minimum([(1,1),(2,58)]) == (1,58)\n    assert index_minimum([(1,1),(2,59)]) == (1,59)\n    assert index_minimum([(1,1),(2,60)]) == (1,60)\n    assert index_minimu",
        "num_ids": 2000
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # create a dictionary with the key-value pairs\n    dictionary = {}\n    for item in test_list:\n        if item[1] in dictionary.keys():\n            dictionary[item[1]] = item[0]\n        else:\n            dictionary[item[1]] = item[0]\n",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # need to take a sorted tuple and take the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]\n",
        "num_ids": 46
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = test_list[0][1]\n    for val in test_list:\n        if val[1] < min:\n            min = val[1]\n    return min\n",
        "num_ids": 45
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(lst, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n",
        "num_ids": 37
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # create a loop to iterate over all the lists\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][1] < lst[j][1]:\n                # swap values\n                lst[i], lst[j] = lst[j], lst[i]\n    # return the length of the list\n    return len(lst)\n",
        "num_ids": 104
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Create an empty list to store the output\n    output = []\n",
        "num_ids": 18
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    for i in range(0, length):\n        for j in range(0, i+1):\n            if(lst[j] < lst[i]):\n                temp = lst[j]\n                lst[j] = lst[i]\n                lst[i] = temp\n",
        "num_ids": 82
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 100000\n    current_length = 0\n    for i in lst:\n        if len(i) < current_length:\n            current_length = len(i)\n            min_length = i\n    return min_length\n",
        "num_ids": 60
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = 0\n    for list in lst:\n        length += len(list)\n    return length\n",
        "num_ids": 27
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = min(lst)\n    return len(min_length)\n",
        "num_ids": 22
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    min_len_ind = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if min_len < lst[i][j]:\n                min_len = lst[i][j]\n                min_len_ind = j\n    return min_len_ind\n",
        "num_ids": 90
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0][0] #The first element of the first list\n    for x in range(1, len(lst)):\n        if lst[x][0] < min:\n            min = lst[x][0]\n    return min\n",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div_count += 1\n    return div_count\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (divisor(n//2) + (divisor(n//2) + 1))\n",
        "num_ids": 54
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors+=1\n    return divisors\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n % 2 == 0:\n        return divisor(n/2)\n    else:\n        return divisor(n-1) + divisor(n-3) + divisor(n-6) + divisor(n-9)\n    \n",
        "num_ids": 114
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            divs+=1\n    return divs\n",
        "num_ids": 41
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 2 * n//2\n",
        "num_ids": 37
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n//divisors(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # declare a variable to store the divisors\n    divisors = 0\n    # iterate through the numbers up to n\n    for i in range(1, n + 1):\n        # if the divisor is 1,\n        # it is 1, regardless of the number of divisors\n        if i == 1:\n            divisors = 1\n        else:\n            # if the divisor is not 1,\n            # it is the number of divisors\n            divisors = i\n            # iterate down to the next divisor\n            # until the divisor is 0 or 1\n            while i % divisors!= 0:\n                divisors = divisors + 1\n    # return the number of divisors\n    return divisors\n",
        "num_ids": 182
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    while n % 2 == 0:\n        n = n/2\n        divisors += 1\n    return divisors\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return n*divisor(n-1)\n",
        "num_ids": 42
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # split list into flat lists\n    list1_flat = list(map(lambda x: list(map(lambda y: list(map(lambda z: float(z), y)), x)), list1))\n    # flatten list\n    list1_flat = list(map(lambda x: list(map(list, x)), list1_flat))\n    # sort and get unique list of frequency of each element\n    list1_unique = list(set([item for sublist in list1_flat for item in sublist]))\n    return dict(zip(list1_unique, list1_flat))\n",
        "num_ids": 139
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #count = [0]*20;\n    count = {}\n    for i in range(len(list1)):\n        if list1[i][0] in count:\n            count[list1[i][0]] += 1\n        else:\n            count[list1[i][0]] = 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for list1_element in list1:\n        if list1_element not in frequency_dictionary:\n            frequency_dictionary[list1_element] = 1\n        else:\n            frequency_dictionary[list1_element] += 1\n    return frequency_dictionary\n",
        "num_ids": 74
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Call the function\n    frequency_dict = frequency(list1)\n    # Return the dictionary\n    return frequency_dict\n",
        "num_ids": 31
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #returns dictionary\n    freq_dct = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq_dct.keys():\n                freq_dct[list1[i][j]] = freq_dct[list1[i][j]] + 1\n            else:\n                freq_dct[list1[i][j]] = 1\n    return freq_dct\n",
        "num_ids": 124
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Iterate through the list and determine which elements have repeated numbers\n    # Create a dictionary to store the frequency of each element\n    # Iterate through the list, add to the dict\n    # Increment the value for each element by one\n    # Return the dict\n    frequency_dict = {}\n    # Loop through the flattened list\n    for list_ in list1:\n        # Iterate through the list\n        for element in list_:\n            # Check whether that element is already in the dictionary\n            # If not, add the number to the dictionary\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    # Return the frequency dictionary\n    return frequency_dict\n",
        "num_ids": 171
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = dict()\n    for e in list1:\n        if e in frequency_dict:\n            frequency_dict[e] += 1\n        else:\n            frequency_dict[e] = 1\n    return frequency_dict\n",
        "num_ids": 57
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            dict1[list1[i][j]] = list1[i][j]\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq_dict = {}\n    for i in range(len(list1)):\n        if list1[i][0] in freq_dict:\n            freq_dict[list1[i][0]] += 1\n        else:\n            freq_dict[list1[i][0]] = 1\n    return freq_dict\n    \n",
        "num_ids": 86
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # get all elements\n    elements = list1\n    # get length of each element in list\n    l = len(elements)\n    # initialize dictionary\n    f = {}\n    # iterate over each element in list\n    for element in elements:\n        # if element is not a number, add it to the dictionary\n        if not isinstance(element, int):\n            # add element to dictionary\n            if element not in f:\n                f[element] = 1\n            else:\n                f[element] = f[element] + 1\n    # return dictionary\n    return f\n",
        "num_ids": 136
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 0\n    for number in numbers:\n        total += number\n    return total / len(numbers)\n",
        "num_ids": 29
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    l = len(numbers)\n    result = 1\n    for i in range(1,l):\n        result *= i\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Declare Variables\n    l = []\n    sum = 0\n    c = 0\n    result = 0\n",
        "num_ids": 29
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 0\n    for number in numbers:\n        total += number\n    return total / len(numbers)\n",
        "num_ids": 29
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for num in numbers:\n        mul *= num\n    return mul\n",
        "num_ids": 26
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    # get the length of the list\n    length_of_list = len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    result = 1\n    \n    for i in range(len(numbers)):\n        result = result * numbers[i]\n        \n    return result\n",
        "num_ids": 40
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numbers * len(numbers)\n",
        "num_ids": 12
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied = []\n    for i in range(len(numbers)):\n        multiplied.append(numbers[i] * (i + 1))\n    return multiplied\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    answer = []\n    l = len(numbers)\n    for i in range(l):\n        answer.append(numbers[i] * i)\n    answer = tuple(answer)\n    return answer\n",
        "num_ids": 51
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    for i in range(len(n)):\n        if n[i] == '1':\n            binary += \"1\"\n        elif n[i] == '0':\n            binary += \"0\"\n    return binary\n",
        "num_ids": 60
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        print(\"decimal_to_binary value error\")\n        return \"\"\n    ans = \"\"\n    while n:\n        t = n % 2\n        if t == 1:\n            ans += \"1\"\n            n = n//2\n        else:\n            ans += \"0\"\n            n = n//2\n    return ans\n",
        "num_ids": 86
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n <= 0: return ''\n    binary = bin(n)[2:]\n    return binary\n",
        "num_ids": 25
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0'\n    else: \n        return f'{n:0{len(str(n))}}'\n",
        "num_ids": 39
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    d = bin(n) \n    return d[2:] \n",
        "num_ids": 19
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while (n!= 0): \n        remainder = n % 2 \n        if remainder == 1: \n            binary = binary + '1' \n        else: \n            binary = binary + '0' \n        n = int(n / 2) \n    return binary \n",
        "num_ids": 76
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Code here\n    if (n == 0): \n        return '0'\n    else: \n        return (decimal_to_binary(n // 2)) + str(n % 2)\n",
        "num_ids": 49
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_str = ''\n    while n!= 0:\n        bin_str += str(n % 2)\n        n //= 2\n    return bin_str[::-1]\n    \n    \n",
        "num_ids": 50
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)\n",
        "num_ids": 9
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_string = bin(n)[2:]\n    # make it a single string\n    return bin_string\n",
        "num_ids": 28
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 1:\n        print(\"ERROR\")\n        return num\n    elif num == 1:\n        return 2\n    elif num % 2 == 0:\n        return num // 2\n    else:\n        return num + 1\n",
        "num_ids": 57
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_naive(num):\n    '''\n    Return next smallest palindrome of an integer.\n    The result must be in the range of INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_subsequence(num):\n    '''\n    Return the next smallest palindrome for a given number, in a subsequence.\n    '''\n    pass\ndef next_smallest_palindrome_largest_subsequence(num):\n    '''\n    Return the next smallest palindrome for a given number, in a largest subsequence.\n    '''\n    pass\ndef next_smallest_palindrome_sequence(num):\n    '''\n    Return the next smallest palindrome for a given number, in a sub-sequence.\n    '''\n    pass\ndef next_smallest_palindrome_largest_subsequence_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, in a sub-sequence, given as a naive implementation.\n    '''\n    pass\ndef next_smallest_palindrome_sequence_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, in a sub-sequence, given as a naive implementation.\n    '''\n    pass\ndef next_smallest_palindrome_negative(num):\n    '''\n    Return the next smallest palindrome for a given number, in a negative sub-sequence.\n    '''\n    pass\ndef next_smallest_palindrome_negative_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, in a negative sub-sequence, given as a naive implementation.\n    '''\n    pass\ndef next_smallest_palindrome_positive(num):\n    '''\n    Return the next smallest palindrome for a given number, in a positive sub-sequence.\n    '''\n    pass\ndef next_smallest_palindrome_positive_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, in a positive sub-sequence, given as a naive implementation.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a naive implementation.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_sequence(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a sequence of jump numbers.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_largest_subsequence(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a largest sub-sequence of a given sequence.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_sequence_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a sequence of jump numbers.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_sequence_positive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a sequence of jump numbers.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_sequence_positive_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a sequence of jump numbers, given as a naive implementation.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_sequence_negative(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a sequence of jump numbers.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_sequence_negative_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a sequence of jump numbers, given as a naive implementation.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_sequence_positive_positive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a sequence of jump numbers, given as a positive sub-sequence.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_sequence_positive_positive_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a positive sub-sequence, given as a naive implementation.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_positive_negative(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a sequence of jump numbers.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_positive_negative_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a sequence of jump numbers, given as a naive implementation.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_positive_positive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a positive sub-sequence.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_positive_positive_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a positive sub-sequence, given as a naive implementation.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_positive_negative(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a positive sub-sequence.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_positive_negative_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a positive sub-sequence, given as a naive implementation.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_negative_positive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a positive sub-sequence, given as a positive sub-sequence, given as a naive implementation.\n    The result must be in the range INT_MIN to INT_MAX.\n    '''\n    pass\ndef next_smallest_palindrome_with_jump_negative_positive_naive(num):\n    '''\n    Return the next smallest palindrome for a given number, with an integer jump, given as a positive sub-sequence, given as a positive sub-sequence, given as a naive implementation.\n    The result must be in the range IN",
        "num_ids": 52
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    if num < 2:\n        return num\n    \n    left = num - 1\n    right = num - 2\n    \n    while left >= 0 and right < len(num) and num[left] == num[right]:\n        left -= 1\n        right += 1\n    \n    return right\n",
        "num_ids": 72
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # TODO: Your code goes here\n    \n    #while checking for a palindrome\n    i=0\n    j=0\n    while num>0:\n        num=num//10\n        i=i+1\n        if i<3:\n            j=j+1\n            if j>=3:\n                return num\n        if num%10==0:\n            if num==0:\n                break\n            num=num//10\n            i=i+1\n            if i>=3:\n                j=j+1\n                if j>=3:\n                    return num\n    return num\n",
        "num_ids": 145
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n        \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_greatest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n        \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_duplicate(num):\n    '''\n    Write a function to find the next duplicate palindrome, where a number is marked with a 1 if it is a duplicate number, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_smallest_palindrome_duplicate(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, where a number is marked with a 1 if it is a duplicate number, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_greatest_palindrome_duplicate(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, where a number is marked with a 1 if it is a duplicate number, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_duplicate(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_duplicate_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_palindrome_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_duplicate_palindrome_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_palindrome_palindrome_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_palindrome_duplicate_palindrome_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_duplicate_palindrome_palindrome_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_duplicate_palindrome_palindrome_palindrome_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_duplicate_palindrome_palindrome_palindrome_palindrome_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrome, 0 otherwise. \n    '''\n    if num == 0:\n        return num\n    \n    if num < 0:\n        return 0\n    \n    for i in range(1, num + 1):\n        if (i * i) % 10 == num:\n            return i\n        \n    return 0\n    \ndef next_palindrome_duplicate_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome(num):\n    '''\n    Write a function to find the next palindrome, where a number is marked with a 1 if it is a palindrom",
        "num_ids": 29
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num % 2 == 0:\n        return next_smallest_palindrome(num/2)\n    else:\n        return (num*3)+1\n",
        "num_ids": 62
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    if len(str(num)) == 1:\n        return int(num)\n    \n    s, t = str(num), str(num+1)\n    print(s)\n    print(t)\n    print(len(s))\n    for i in range(len(s)-1, -1, -1):\n        for j in range(len(t)-1, -1, -1):\n            if s[i] == t[j]:\n                if s[i] == t[j]:\n                    print(s[i])\n                    print(t[j])\n                    num = int(s[i]+s[i+1])\n                    return next_smallest_palindrome(num)\n                else:\n                    s = s[:i]+s[i+1]+s[i]+s[i+2:]\n                    print(s)\n                    return next_smallest_palindrome(int(s))\n    print(s)\n    return int(s)\n    \nif __name__ == '__main__':\n    if len(sys.argv) == 1:\n        sys.stderr.write(\"Usage: python %s [<int>...\\n\" % sys.argv[0])\n        sys.exit(1)\n    \n    print('Started...')\n    for num in sys.argv[1:]:\n        print(num)\n        \n        print('\\n')\n        print(next_smallest_palindrome(num))\n    ",
        "num_ids": 352
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def get_palindrome(n):\n        if n == 0:\n            return 1\n        elif n < 0:\n            print('Error:'+ str(n) +'is not a palindrome')\n        elif n > 0:\n            palindrome = (get_palindrome(n-1) * get_palindrome(n-1) * get_palindrome(n-1))\n            return palindrome\n",
        "num_ids": 105
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0 or num == 1:\n        return num\n    elif num % 2 == 0:\n        return next_smallest_palindrome(num//2)\n    else:\n        return (num*3)+1\n        \n",
        "num_ids": 58
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = 0\n    for i in range(int(num ** 0.5) + 1):\n        if (int(num / i) == 1):\n            if ((num % i) == 0):\n                result = i\n    return result + 1\n",
        "num_ids": 60
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n    ",
        "num_ids": 12
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Base case, if kth element is missing\n    if (k > len(arr)):\n        return None\n    # Find the index of the kth element\n    return arr[k - 1]\n",
        "num_ids": 49
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is valid\n    if k > len(arr) - 1:\n        return None\n    # get the index of kth element\n    return arr[k - 1]\n",
        "num_ids": 45
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k >= len(arr):\n        return arr[-1]\n    else:\n        return arr[-k+1",
        "num_ids": 31
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = len(arr)\n    if l == 0:\n        return None\n    elif l == 1:\n        return arr[0]\n    \n    mid = l // 2\n    if k >= mid:\n        return arr[mid]\n    \n    return kth_element(arr[:mid], k)\n",
        "num_ids": 76
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # TODO: Write your code here\n    n=len(arr)\n    return arr[n-1-k]\n",
        "num_ids": 31
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # There are cases where we want to find the kth element or not, so for example, we just have to return a value\n    # which is the kth element.\n    if (k == 0 or k == len(arr)-1):\n        return arr[k]\n    # If the kth element is not present in the array, then the function will return the last element of the array.\n    return arr[k] if k > len(arr) / 2 else arr[k-1]\n",
        "num_ids": 114
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k == 0:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif arr[0] == arr[k-1]:\n        return arr[0]\n    else:\n        return arr[0]\n",
        "num_ids": 61
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.title()\n    return word.replace('-', '_')\n    \ndef snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return snake_to_camel(word.replace('-', '_').lower())\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    word = word.replace('_', '-').lower()\n    return word\n",
        "num_ids": 21
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isupper():\n        word = word.lower()\n    elif word.islower():\n        word = word.upper()\n    elif word.isnumeric():\n        word = word.zfill(3)\n    else:\n        word = word.title()\n    return word\n",
        "num_ids": 72
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    for char in word:\n        if char.isupper():\n            word = word.replace(char,'_')\n    return word\n",
        "num_ids": 33
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "num_ids": 9
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if '-' in word:\n        word = word.split('-')\n        return word[0] + ''.join(x.title() for x in word[1:])\n    else:\n        return word\n",
        "num_ids": 52
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s1 = word.split('_')\n    s2 = [i.capitalize() for i in s1]\n    return ''.join(s2)\n",
        "num_ids": 40
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n",
        "num_ids": 16
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Converts the string into camel case\n    return word.title()\n    \n    \n",
        "num_ids": 23
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isalpha():\n        result = word.lower()\n        result = result.replace('_','').title()\n        return result\n    return word\n",
        "num_ids": 40
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.startswith('_'):\n        return word\n    else:\n        return ''.join([\n            letter.upper() if letter.isupper() else letter.lower() \n            for letter in word\n        ])\n",
        "num_ids": 56
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        print(m, end=' ')\n        return 1\n    else:\n        print(m, end=' ')\n        return m * eulerian_num(n - 1, m)\n",
        "num_ids": 54
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n \n    if n == m - 1: \n        return 1 \n    \n    a = 0 \n    for i in range(1, n): \n        b = 1 \n        for j in range(n): \n            if (i + j) % 2 == 0: \n                b = b * a \n        a = a + b \n    \n    return a % m \n",
        "num_ids": 105
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # The number of vertices and edges (m)\n    n = n + 1\n    # The distance of the vertices (n)\n    d = n*(n-1)//2\n    # The set of vertices\n    vertices = set([i for i in range(1, n)])\n    # The set of edges\n    edges = set([(i, j) for j in range(n) for i in range(j+1, n)])\n    # The set of connected components\n    cc = {j for j in range(n)}\n    # The set of vertices in which the components are connected\n    connected = {j for j in range(n) if j in cc}\n    # The number of vertices\n    vertices_number = len(vertices)\n    # The number of edges\n    edges_number = len(edges)\n    # The set of vertices with all edges\n    vertices_with_edges = set([i for i in range(1, n) if edges.issubset(set(edges[i]))])\n    # The set of all vertices\n    vertices_set = vertices | vertices_with_edges\n    # The number of edges\n    edges_number_set = len(edges) - edges_number\n    # The number of vertices\n    vertices_number_set = len(vertices) - vertices_number\n    # The set of connected components\n    connected_set = set([i for i in range(1, n) if cc.issubset(edges[i])])\n    # The set of connected vertices\n    connected_vertices = set([i for i in range(1, n) if connected.issubset(edges[i])])\n    # The number of vertices with all edges\n    vertices_with_edges_set = set([i for i in range(1, n) if edges.issubset(set(edges[i]))])\n    # The number of vertices with all connected vertices\n    vertices_with_edges_set_set = set([i for i in range(1, n) if connected.issubset(set(edges[i]))])\n    # The number of vertices with all vertices\n    vertices_with_edges_set_vertices = set([i for i in range(1, n) if vertices.issubset(set(edges[i]))])\n    # The number of connected vertices with all vertices\n    vertices_with_edges_set_vertices_set = set([i for i in range(1, n) if vertices.issubset(set(edges[i]))])\n    # The number of connected vertices with all vertices\n    vertices_with_edges_set_vertices_vertices = set([i for i in range(1, n) if vertices.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set_vertices = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i])) and vertices.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set_vertices_edges = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i])) and vertices.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set_vertices_edges_set = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i])) and vertices.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set_vertices_edges_set_vertices = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i])) and vertices.issubset(set(edges[i])) and vertices.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set_vertices_edges_set_vertices_edges_set = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i])) and vertices.issubset(set(edges[i])) and vertices.issubset(set(edges[i])) and vertices.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set_vertices_edges_set_vertices_edges_set_vertices_edges = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i])) and vertices.issubset(set(edges[i])) and vertices.issubset(set(edges[i])) and vertices.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set_vertices_edges_set_vertices_edges_set_vertices_edges_set = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i])) and vertices.issubset(set(edges[i])) and vertices.issubset(set(edges[i])) and vertices.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set_vertices_edges_set_vertices_edges_set_vertices_edges_set_vertices_edges_set = set([i for i in range(1, n) if vertices.issubset(set(edges[i])) and edges.issubset(set(edges[i])) and vertices.issubset(set(edges[i])) and vertices.issubset(set(edges[i])) and vertices.issubset(set(edges[i]))])\n    # The number of vertices with all vertices and all edges\n    vertices_with_edges_set_vertices_vertices_edges_set_vertices_edges_set_vertices_edges_set_vertices_edges_set_vertices_edges_set_vertices_edges_set_vertices_edges_set = set([i for i in range(1, n) if vertices.issubset(set(e",
        "num_ids": 2011
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = 0\n    # find the minimum number n/2\n    for i in range(n):\n        if m > 1:\n            m = m // 2\n        result += m\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Method 1\n    # Build a graph\n    g = [[] for i in range(n)]\n    for i in range(m):\n        g[0].append(i)\n    \n    # Use BFS to find the Strongly Connected Components\n    # A Star Graph Search\n    # define a function to find the \n    # Strongly Connected Component\n    def scc(n, m):\n        q = []\n        visited = [False] * n\n        # push every node into queue\n        for i in range(n):\n            if not visited[i]:\n                if eulerian_num_helper(g, i, visited) == -1:\n                    return False\n                q.append(i)\n                visited[i] = True\n        # Do not check if there is a path\n        while len(q)!= 0:\n            v = q.pop(0)\n            # Check if the v is a strong component\n            if scc_helper(g, v, visited):\n                return True\n            # Check the all neighbors\n            for w in g[v]:\n                if not visited[w]:\n                    q.append(w)\n                    visited[w] = True\n        return False\n    \n    # get number of components\n    n = len(g)\n    # Find components\n    if n == 0:\n        return -1\n    # Only component 1\n    if scc(n, m) == True:\n        return 1\n    # for components\n    else:\n        return -1\n    \n    \ndef scc_helper(g, v, visited):\n    '''\n    A recursive helper function to check\n    whether a component of a graph is strongly connected.\n    '''\n    visited[v] = True\n    print(v, visited)\n    if v!= 0 and visited[v] == True:\n        return False\n    for i in g[v]:\n        if not visited[i]:\n            if scc_helper(g, i, visited) == -1:\n                return False\n            visited[i] = True\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from itertools import permutations\n    from collections import defaultdict\n",
        "num_ids": 18
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # eulerian_number_recursive(n, m, 0, 0)\n    return eulerian_number_recursive(n, m, 0, 0)\n",
        "num_ids": 42
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0: \n        return 1\n    \n    l1 = list(range(1, n + 1))\n    l2 = list(range(1, n + 1))\n    k = l2.index(0) + 1\n    for i in range(1, m): \n        l1[k], l2[k] = l2[k], l1[k] \n        k += 1\n    return l1[n] + l2[n] - 2 * k + m \n",
        "num_ids": 121
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    l = []\n    for i in range(n):\n        if i!= 0 and i!= m:\n            l.append(i)\n    l.sort()\n    for i in l:\n        if n == m:\n            break\n        if m - i in l and m - i == i + 1:\n            return i\n        if n - i in l and n - i == i + 1:\n            return i + 1\n        if n - i in l and n - i!= i + 1:\n            return i + 1\n    if n - i in l:\n        return i + 1\n    if n - i in l and n - i!= i + 1:\n        return i + 1\n    return -1\n",
        "num_ids": 172
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    adjacent_list = []\n    for i in range(m):\n        adjacent_list.append([0] * n)\n    for i in range(m):\n        adjacent_list[i][0] = 1\n        adjacent_list[i][n-1] = 1\n    for j in range(1, n):\n        adjacent_list[0][j] = 1\n        adjacent_list[j][0] = 1\n    for i in range(1, n):\n        for j in range(1, n):\n            if adjacent_list[i][j] == 0:\n                adjacent_list[i][j] = 1\n                adjacent_list[j][i] = 1\n    \n    \n    for i in range(1, m):\n        for j in range(1, n):\n            if adjacent_list[i][j] == 0:\n                adjacent_list[i][j] = 1\n                adjacent_list[j][i] = 1\n                \n    \n    \n    path = []\n    path_numbers = []\n    while len(path)!= 0:\n        path_numbers.append(path[0])\n        path = path[1:]\n        for i in range(len(adjacent_list[path_numbers[-1]][path_numbers[-1]])):\n            if adjacent_list[path_numbers[-1]][path_numbers[-1]][i] == 0:\n                adjacent_list[path_numbers[-1]][path_numbers[-1]][i] = 1\n                adjacent_list[path_numbers[-1]][path_numbers[-1]][i] = adjacent_list[path_numbers[-1]][path_numbers[-1]][i] - 1\n                path_numbers.append(path_numbers[-1] + path_numbers[-1][i])\n                path_numbers.pop()\n                \n    \n    return sum(path_numbers)\n",
        "num_ids": 482
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # write your code here\n    if len(input_list) < 2:\n        return input_list\n    else:\n        for i in range(len(input_list)):\n            for j in range(len(input_list[i])):\n                if input_list[i][j] == \" \":\n                    input_list[i].pop(j)\n                else:\n                    break\n        output_list = sort_sublists(input_list)\n        return output_list\n",
        "num_ids": 116
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not input_list:\n        return []\n    new_list = []\n    for sublist in input_list:\n        new_list.append([i for i in sublist])\n",
        "num_ids": 46
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #return sorted(input_list, key=lambda sublist: sublist[0])\n    return sorted(input_list, key=lambda sublist: len(sublist[0]))\n",
        "num_ids": 46
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # Reverse the sublist, so it goes backwards\n        sublist.reverse()\n        # For each element, add it to the end of the list\n        for element in sublist:\n            if element.startswith('-'):\n                sublist.append(element)\n            else:\n                sublist.append('-' + element)\n    return input_list\n",
        "num_ids": 95
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # if empty list is passed, return None\n    if len(input_list) == 0:\n        return None\n    # if nested list, recursively sort the sublists\n    else:\n        # create a new list to sort the sublists\n        sorted_list = []\n        # if the first element is empty, just append it to the sorted list\n        if len(input_list[0]) == 0:\n            sorted_list.append(input_list)\n        else:\n            # recursively sort the sublists\n            for sublist in input_list:\n                # add the sublist to the sorted list\n                sorted_list.append(sort_sublists(sublist))\n        # return the sorted list\n        return sorted_list\n",
        "num_ids": 176
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = input_list[i][j].strip()\n    return input_list\n",
        "num_ids": 59
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_helper(input_list, start, end):\n        if start >= end:\n            return\n        mid = (start + end)//2\n        sort_helper(input_list, start, mid)\n        sort_helper(input_list, mid + 1, end)\n        temp = input_list[start]\n        input_list[start] = input_list[mid]\n        input_list[mid] = temp\n",
        "num_ids": 106
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # list of all possible sublists\n    sublists = []\n    # sort each sublist by the first character of each string\n    for sublist in input_list:\n        sublists.append(sublist[0])\n    # create an empty list of sublists\n    output_list = []\n    # iterate through each sublist\n    for sublist in sublists:\n        # append each letter to the list\n        output_list.append(sublist)\n    # return the list\n    return output_list\n",
        "num_ids": 120
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for idx, value in enumerate(sublist):\n            if isinstance(value, list):\n                sublist[idx] = sort_sublists(value)\n    return input_list\n",
        "num_ids": 58
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for sublist2 in sublist:\n            #sublist2.sort()\n            sublist2.sort(key=lambda x: len(x))\n            #sublist2.sort()\n        #sort_sublists(sublist)\n        print(sublist)\n",
        "num_ids": 75
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return len([i for i in lst if i == True])\n",
        "num_ids": 20
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if(i==True):\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # initialize an empty dictionary to store \n    # the count of True booleans\n    d = {}\n    # iterate through the list\n    # and if the boolean \n    # is 'True' append to the dictionary\n    for item in lst:\n        if item:\n            d[item] = d.get(item,0) + 1\n",
        "num_ids": 84
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for x in lst:\n        if x:\n            count+=1\n    print(count)\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Dictionaries\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for i in dict:\n        dict[i] = dict[i]\n",
        "num_ids": 66
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count = count + 1\n    print(count)\n    \n    \n",
        "num_ids": 37
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    def count2(lst):\n        count_dict = {}\n        for i in lst:\n            if i in count_dict:\n                count_dict[i] += 1\n            else:\n                count_dict[i] = 1\n        return count_dict\n    return count2(lst)\n",
        "num_ids": 74
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for ele in lst:\n        if ele:\n            count = count + 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    total = 0\n    for x in lst:\n        if x:\n            total += 1\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for index, item in enumerate(test_tup):\n        test_list.append(item)\n        test_list.append(index)\n    return test_list\n",
        "num_ids": 43
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"\\nTrying to add: \", test_list)\n    print(\"To tuples: \", test_tup)\n    try:\n        test_tup[0] = test_tup[0] + 1\n        test_tup[1] = test_tup[1] + [test_list[0]]\n    except Exception as e:\n        print(\"Exception occurred: \", e)\n        pass\n    try:\n        test_list[0] = test_list[0] + 1\n        test_list[1] = test_list[1] + [test_tup[0]]\n    except Exception as e:\n        print(\"Exception occurred: \", e)\n        pass\n    return test_list, test_tup\n",
        "num_ids": 176
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] = test_list[i]\n    return test_tup\n",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append((test_tup[0], test_tup[1]))\n",
        "num_ids": 25
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list) > 0:\n        for i in range(len(test_list)):\n            for j in range(len(test_list[i])):\n                test_tup.append(test_list[i][j])\n    return test_tup\n",
        "num_ids": 68
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    test_tup.append(tup)\n",
        "num_ids": 25
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print('Now adding the list:')\n    print(test_list)\n    print('And the tuples:')\n    print(test_tup)\n",
        "num_ids": 39
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # your code goes here\n    return\n",
        "num_ids": 12
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup[i] = test_tup[i] + 1\n",
        "num_ids": 30
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n    return test_list\n",
        "num_ids": 22
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # TODO: Complete this function\n    result=[]\n    num1_as_list=list(num1)\n    num2_as_list=list(num2)\n    num3_as_list=list(num3)\n    num1_as_list.sort()\n    num2_as_list.sort()\n    num3_as_list.sort()\n    for num1_as_element in num1_as_list:\n        result.append(num1_as_element)\n    for num2_as_element in num2_as_list:\n        result.append(num2_as_element)\n    for num3_as_element in num3_as_list:\n        result.append(num3_as_element)\n    return result\n",
        "num_ids": 185
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #returns a list of all elements in num1, num2, and num3.\n    if not num2:\n        #if num2 has no elements, return num1\n        return num1\n    elif not num3:\n        #if num3 has no elements, return num1\n        return num1\n    elif num1[0] > num2[0]:\n        #if num1 is larger, return num2\n        return num2\n    else:\n        #if num1 is larger, return num3\n        return num3\n",
        "num_ids": 127
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    #Initiate a heap\n    #Initiate a new list\n    #add items in the heap\n    #if the elements in the list are not equal, the heapify\n    #if the elements are equal, replace one with the next bigger number\n    #if the elements are not equal, replace one with the next smaller number\n    #if the heapify is successful, return the merged list\n    #if heapify is not successful, return the original list\n    \n    #create a new list\n    #append the first item\n    #append the second item\n    #append the third item\n    #add the element in the new list\n    \n    #check if the items are equal\n    #if the item is not equal, replace the smaller number with the next bigger number\n    #if the item is equal, replace the smallest number with the next smaller number\n    #if not equal, replace the next smaller number with the next bigger number\n    #if equal, return the merged list\n    #else return the original list\n    \n    #create a new list\n    #append the second item\n    #append the third item\n    #append the element in the new list\n    #add the element in the new list\n    \n    #check if the items are equal\n    #if the item is not equal, replace the smaller number with the next bigger number\n    #if the item is equal, replace the smallest number with the next smaller number\n    #if not equal, replace the next smaller number with the next bigger number\n    #if equal, return the merged list\n    #else return the original list\n    \n    #create a new list\n    #append the second item\n    #append the element in the new list\n    #add the element in the new list\n    \n    #create a new list\n    #append the third item\n    #append the element in the new list\n    #append the element in the new list\n    \n    #check if the items are equal\n    #if the item is not equal, replace the smallest number with the next bigger number\n    #if the item is equal, replace the next smaller number with the next bigger number\n    #if not equal, replace the next smaller number with the next bigger number\n    #if equal, return the merged list\n    #else return the original list\n",
        "num_ids": 511
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return [num1[0]+num2[0]+num3[0],num1[1]+num2[1]+num3[1],num1[2]+num2[2]+num3[2]]\n",
        "num_ids": 51
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged=[]\n    merged1=[]\n    merged2=[]\n    i=0\n    j=0\n    k=0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num2[j] < num3[k]:\n            merged.append(num1[i])\n            i+=1\n            k+=1\n        elif num1[i] > num2[j] and num2[j] > num3[k]:\n            merged.append(num2[j])\n            j+=1\n            k+=1\n        elif num1[i] > num2[j] and num1[i] > num3[k]:\n            merged.append(num1[i])\n            i+=1\n            k+=1\n        elif num1[i] < num2[j] and num1[i] < num3[k]:\n            merged.append(num2[j])\n            j+=1\n            k+=1\n        else:\n            print('Merged')\n            merged.extend(merged1)\n            merged.extend(merged2)\n            merged1=[]\n            merged2=[]\n            merged=[]\n            i+=1\n            j+=1\n            k+=1\n    merged.extend(merged1)\n    merged.extend(merged2)\n    merged1=[]\n    merged2=[]\n    merged=[]\n    i+=1\n    j+=1\n    k+=1\n    while i < len(num1):\n        merged.append(num1[i])\n        i+=1\n    while j < len(num2):\n        merged.append(num2[j])\n        j+=1\n    while k < len(num3):\n        merged.append(num3[k])\n        k+=1\n    return merged\n",
        "num_ids": 472
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) < len(num2):\n        num3 = num1\n        num1 = num2\n        num2 = num3\n    if len(num2) < len(num3):\n        num1 = num3\n        num3 = num2\n",
        "num_ids": 65
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    result += num1[i:]\n    result += num2[j:]\n    result += num3[k:]\n    return result\n",
        "num_ids": 182
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = num1 + num2 + num3\n    heapq.heapify(merged_list)\n    return heapq.heappop(merged_list)\n",
        "num_ids": 47
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp=[]\n    i=0\n    j=0\n    k=0\n    #initialize index values to 0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            temp.append(num1[i])\n            i+=1\n        elif num2[j]<num3[k]:\n            temp.append(num2[j])\n            j+=1\n        else:\n            temp.append(num3[k])\n            k+=1\n            #record the index value for index j\n            i+=1\n    #construct the merged list\n    while i<len(num1):\n        temp.append(num1[i])\n        i+=1\n    while j<len(num2):\n        temp.append(num2[j])\n        j+=1\n    while k<len(num3):\n        temp.append(num3[k])\n        k+=1\n    #print(temp)\n    #print(merge_sorted_list_2(temp))\n    return merge_sorted_list_2(temp)\ndef merge_sorted_list_2(num):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    #initialize index values to 0\n    i=0\n    j=0\n    temp=[]\n    while i<len(num) and j<len(num):\n        if num[i]<num[j]:\n            temp.append(num[i])\n            i+=1\n        elif num[i]>num[j]:\n            temp.append(num[j])\n            j+=1\n        else:\n            temp.append(num[i])\n            i+=1\n            #record the index value for index j\n            j+=1\n    #print(temp)\n    #print(merge_sorted_list_3(temp))\n    return merge_sorted_list_3(temp)\ndef merge_sorted_list_3(num):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    #construct the merged list\n    temp=[]\n    while len(num)>0:\n        #pop the first item of list\n        first=num.pop(0)\n        #add it to the end of the list\n        temp.append(first)\n        #add the rest of the list\n        while len(num)>0:\n            second=num.pop(0)\n            temp.append(second)\n            #print(temp)\n            if first<second:\n                break\n    #return the merged list\n    return merge_sorted_list(temp)\ndef merge_sorted_list_4(num):\n    '''\n    Write a function to merge four sorted lists into a single sorted list.\n    '''\n    #initialize index values to 0\n    i=0\n    j=0\n    k=0\n    #initialize index values to 0\n    while i<len(num) and j<len(num):\n        if num[i]<num[j]:\n            num[i],num[j]=num[j],num[i]\n            i+=1\n        elif num[i]>num[j]:\n            num[k],num[j]=num[j],num[k]\n            j+=1\n        else:\n            num[i],num[k]=num[k],num[i]\n            k+=1\n            #print(num)\n    #print(num)\n    return merge_sorted_list(num)\ndef merge_sorted_list(num):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    #initialize index values to 0\n    i=0\n    j=0\n    k=0\n    while i<len(num) and j<len(num):\n        if num[i]<num[j]:\n            num[i],num[j]=num[j],num[i]\n            i+=1\n        elif num[i]>num[j]:\n            num[k],num[j]=num[j],num[k]\n            j+=1\n        else:\n            num[i],num[k]=num[k],num[i]\n            k+=1\n            #print(num)\n    #print(num)\n    return merge_sorted_list_2(num)\n",
        "num_ids": 168
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a heap that will take the smallest list and merge it on top\n    heap = []\n    result = []\n    for i in range(0,len(num1)):\n        heapq.heappush(heap, num1[i])\n    for i in range(0,len(num2)):\n        heapq.heappush(heap, num2[i])\n    for i in range(0,len(num3)):\n        heapq.heappush(heap, num3[i])\n    # if the number of elements in the list is even then we have to merge the two elements\n    # in the list with each other.\n    if len(heap) % 2 == 0:\n        # on every iteration we merge the smallest element to the two middle elements\n        # and the biggest element to the two middle elements\n        for i in range(0,len(heap)):\n            result.append(heapq.heappop(heap))\n            result.append(heapq.heappop(heap))\n        return result\n    # if the number of elements in the list is odd then we merge the smallest element to the second\n    # middle element and the biggest element to the second middle element\n    else:\n        for i in range(0,len(heap)):\n            result.append(heapq.heappop(heap))\n            result.append(heapq.heappop(heap))\n        return result\n",
        "num_ids": 347
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code here\n    return 0\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    # your code here\n    return 0\ndef sum_of_odd_even_numbers(s,n): \n    '''\n    Write a python function to find the sum of odd and even numbers in the given binary string.\n    '''\n    # your code here\n    return 0\ndef duplicate_count(s,n): \n    '''\n    Write a python function to count the number of duplicates in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_odd_and_even_numbers(s,n): \n    '''\n    Write a python function to count the number of odd and even numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_all_numbers(s,n): \n    '''\n    Write a python function to count the number of all numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_all_odd_and_even_numbers(s,n): \n    '''\n    Write a python function to count the number of all odd and even numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_all_numbers(s,n): \n    '''\n    Write a python function to count the number of all numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef remove_characters(s,ch): \n    '''\n    Write a python function to remove a single character in a given string.\n    '''\n    # your code here\n    return 0\ndef remove_single_characters(s,ch): \n    '''\n    Write a python function to remove all single characters in a given string.\n    '''\n    # your code here\n    return 0\ndef remove_all_characters(s,ch): \n    '''\n    Write a python function to remove all single characters in a given string.\n    '''\n    # your code here\n    return 0\ndef remove_all_characters(s,ch): \n    '''\n    Write a python function to remove all single characters in a given string.\n    '''\n    # your code here\n    return 0\ndef swap_characters(s,i,j): \n    '''\n    Write a python function to swap two given characters in a given string.\n    '''\n    # your code here\n    return 0\ndef swap_characters(s,i,j): \n    '''\n    Write a python function to swap two given characters in a given string.\n    '''\n    # your code here\n    return 0\ndef repeat_characters(s,ch): \n    '''\n    Write a python function to replace two given characters in a given string.\n    '''\n    # your code here\n    return 0\ndef repeat_characters(s,ch): \n    '''\n    Write a python function to replace two given characters in a given string.\n    '''\n    # your code here\n    return 0\ndef count_empty_strings(s): \n    '''\n    Write a python function to count the number of empty strings in a given binary string.\n    '''\n    # your code here\n    return 0\ndef reverse_the_string(s): \n    '''\n    Write a python function to reverse a given binary string.\n    '''\n    # your code here\n    return 0\ndef find_the_number_of_odd_even_numbers(s): \n    '''\n    Write a python function to count the number of odd and even numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef find_the_number_of_odd_even_numbers(s): \n    '''\n    Write a python function to count the number of odd and even numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef find_all_numbers(s): \n    '''\n    Write a python function to count the number of all numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef even_and_odd_numbers_count(s): \n    '''\n    Write a python function to count the number of even and odd numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef duplicate_count(s): \n    '''\n    Write a python function to count the number of duplicate numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef duplicate_count(s): \n    '''\n    Write a python function to count the number of duplicate numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef duplicate_count(s): \n    '''\n    Write a python function to count the number of duplicate numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef duplicate_count(s): \n    '''\n    Write a python function to count the number of duplicate numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_numbers_with_odd_and_even_numbers(s): \n    '''\n    Write a python function to count the number of odd and even numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_numbers_with_odd_and_even_numbers(s): \n    '''\n    Write a python function to count the number of odd and even numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_numbers_with_odd_and_even_numbers(s): \n    '''\n    Write a python function to count the number of odd and even numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_all_odd_and_even_numbers(s): \n    '''\n    Write a python function to count the number of odd and even numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_all_odd_and_even_numbers(s): \n    '''\n    Write a python function to count the number of odd and even numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef count_all_numbers(s): \n    '''\n    Write a python function to count the number of all numbers in a given binary string.\n    '''\n    # your code here\n    return 0\ndef remove_characters(s,ch): \n    '''\n    Write a python function to remove a single character in a given string.\n    '''\n    # your code here\n    return 0\ndef remove_single_characters(s,ch): \n    '''\n    Write a python function to remove all single characters in a given string.\n    '''\n    # your code here\n    return 0\ndef remove_all_characters(s,ch): \n    '''\n    Write a python function to remove all single characters in a given string.\n    '''\n    # your code here\n    return 0\ndef remove_all_characters(s,ch): \n    '''\n    Write a python function to remove all single characters in a given string.\n    '''\n    # your code here\n    return 0\ndef swap_characters(s,i,j): \n    '''\n    Write a python function to swap two given characters in a given string.\n    '''\n    # your code here\n    return 0\ndef swap_characters(s,i,j): \n    '''\n    Write a python function to swap two given characters in a given string.\n    '''\n    # your code here\n    return 0\ndef repeat_characters(s,ch): \n    '''\n    Write a python function to replace two given characters in a given string.\n    '''\n    # your code here\n    return 0\ndef repeat_characters(s,ch): \n    '''\n    Write a python function to replace two given characters in a given string.\n    '''\n    # your code here\n    return 0\ndef count_empty_strings(s): \n    '''",
        "num_ids": 1
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    o=0\n    while(n):\n        if(n%2!=0):\n            o+=1\n            n=n/2\n        else:\n            break\n    return o\n",
        "num_ids": 47
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n%2 == 0: \n        return odd_Equivalent(s,n//2)\n    else: \n        return odd_Equivalent(s,n-1)\n",
        "num_ids": 73
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    arr = []\n    for i in range(len(s)):\n        arr.append(s[i])\n    for i in range(len(s)):\n        if len(arr)%2 == 1:\n            arr[i] = arr[i]+s[i]\n    return len(arr)\n",
        "num_ids": 75
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return odd_Equivalent_2(s,n)\n",
        "num_ids": 16
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i=0\n    j=0\n    l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "num_ids": 2002
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum(map(lambda x:int(x) % 2, s)",
        "num_ids": 20
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    if count < n / 2:\n        return count \n    else: \n        return odd_Equivalent(s,n) \n",
        "num_ids": 73
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    \n    for i in s:\n        if int(i)%2:\n            count += 1\n            \n    return count\n    \n    \ndef even_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    \n    for i in s:\n        if int(i)%2:\n            count += 1\n            \n    return count\n",
        "num_ids": 37
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        if(s[i]=='0'):\n            count+=1\n        if(count%2==0):\n            return count\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of even numbers when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        if(s[i]=='0'):\n            count+=1\n        if(count%2==1):\n            return count\ndef odd_Equal(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        if(s[i]=='1'):\n            count+=1\n        if(count%2==1):\n            return count\ndef even_Equal(s,n): \n    '''\n    Write a python function to find the number of even numbers when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        if(s[i]=='1'):\n            count+=1\n        if(count%2==0):\n            return count\ndef odd_Equal_N(s,n): \n    '''\n    Write a python function to find the number of odd numbers when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        if(s[i]=='1'):\n            count+=1\n        if(count%2!=0):\n            return count\ndef even_Equal_N(s,n): \n    '''\n    Write a python function to find the number of even numbers when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        if(s[i]=='0'):\n            count+=1\n        if(count%2!=0):\n            return count\ndef sum(s):\n    '''\n    Write a python function to sum the digits of a string.\n    '''\n    return int(''.join([str(int(i)+int(j)) for i,j in zip(s,range(0,len(s)))]))\ndef subsum(s):\n    '''\n    Write a python function to sum the digits of a string.\n    '''\n    return int(''.join([str(int(i)-int(j)) for i,j in zip(s,range(0,len(s)))]))\ndef subsubsum(s):\n    '''\n    Write a python function to sum the digits of a string.\n    '''\n    return int(''.join([str(int(i)-int(j)-int(k)) for i,j,k in zip(s,range(0,len(s)),range(1,len(s)))]))\ndef split_num(s):\n    '''\n    Write a python function to split a number into two strings.\n    '''\n    return int(''.join([str(int(i)+int(j)) for i,j in zip(s,range(0,len(s)))]))\ndef number_to_str(n):\n    '''\n    Write a python function to convert a number to a binary string.\n    '''\n    if n==0:\n        return '0'\n    if n==1:\n        return '1'\n    else:\n        return '1'+number_to_str(n-1)\ndef number_to_str(n):\n    '''\n    Write a python function to convert a number to a binary string.\n    '''\n    if n==0:\n        return '0'\n    if n==1:\n        return '1'\n    else:\n        return '1'+number_to_str(n-1)\ndef reverse_str(s):\n    '''\n    Write a python function to reverse a binary string.\n    '''\n    return ''.join([str(int(i)-int(j)) for i,j in zip(s,range(0,len(s)))]).rjust(len(s),'0')\ndef zeros(n):\n    '''\n    Write a python function to make a binary number of n zeros.\n    '''\n    if n==0:\n        return '0'\n    else:\n        return '0'+zeros(n-1)\ndef ones(n):\n    '''\n    Write a python function to make a binary number of n ones.\n    '''\n    if n==0:\n        return '1'\n    else:\n        return '1'+ones(n-1)\ndef one(n):\n    '''\n    Write a python function to make a binary number of n ones.\n    '''\n    if n==0:\n        return '0'\n    else:\n        return '0'+one(n-1)\ndef zero(n):\n    '''\n    Write a python function to make a binary number of n zeros.\n    '''\n    if n==0:\n        return '0'\n    else:\n        return '0'+zero(n-1)\ndef one_zeros(n):\n    '''\n    Write a python function to make a binary number of n ones and zeros.\n    '''\n    if n==0:\n        return '0'\n    else:\n        return '0'+one_zeros(n-1)\ndef one_ones(n):\n    '''\n    Write a python function to make a binary number of n ones and zeros.\n    '''\n    if n==0:\n        return '1'\n    else:\n        return '1'+one_zeros(n-1)\ndef ones_ones(n):\n    '''\n    Write a python function to make a binary number of n ones and ones and zeros.\n    '''\n    if n==0:\n        return '1'\n    else:\n        return '1'+ones_ones(n-1)\ndef ones_zeros(n):\n    '''\n    Write a python function to make a binary number of n ones and zeros.\n    '''\n    if n==0:\n        return '0'\n    else:\n        return '0'+ones_zeros(n-1)\ndef ones_ones_zeros(n):\n    '''\n    Write a python function to make a binary number of n ones and ones and zeros.\n    '''\n    if n==0:\n        return '1'\n    else:\n        return '1'+ones_ones_zeros(n-1)\ndef sign(s):\n    '''\n    Write a python function to return the sign of a number.\n    '''\n    if s==0:\n        return '+'\n    if s==1:\n        return '-'\n    else:\n        return '+'+sign(s-1)\ndef even_numbers(s):\n    '''\n    Write a python function to return the even numbers in a given binary string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if(s[i]=='0'):\n            count+=1\n        if(count%2==0):\n            return count\ndef even_numbers_N(s):\n    '''\n    Write a python function to return the even numbers in a given binary string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if(s[i]=='0'):\n            count+=1\n        if(count%2!=0):\n            return count\ndef odd_numbers(s):\n    '''\n    Write a python function to return the odd numbers in a given binary string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if(s[i]=='1'):\n            count+=1\n        if(count%2!=0):\n            return count\ndef odd_numbers_N(s):\n    '''\n    Write a python function to return the odd numbers in a given binary string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if(s[i]=='1'):\n            count+=1\n        if",
        "num_ids": 39
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [value for sublist in nestedlist for value in sublist]\n",
        "num_ids": 19
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    return [e for e in nestedlist[0] if e in nestedlist[1]]\n",
        "num_ids": 34
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*map(set, nestedlist)))",
        "num_ids": 18
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elems = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i == j:\n                continue\n            if nestedlist[i] == nestedlist[j] and i!= j:\n                common_elems.append(nestedlist[i])\n    return common_elems\n",
        "num_ids": 90
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in range(len(nestedlist)):\n        for j in range(i,len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                return nestedlist[i]\n    return None\n",
        "num_ids": 58
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = nestedlist.split()\n",
        "num_ids": 13
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # TO DO\n    # Fill in this function\n    return\n",
        "num_ids": 17
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def flatten(l):\n        for element in l:\n            if type(element) == list:\n                for subelement in flatten(element):\n                    yield subelement\n            else:\n                yield element\n    return list(flatten(nestedlist))\n",
        "num_ids": 65
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for x in range(len(nestedlist)):\n        for y in range(len(nestedlist[x])):\n            if(nestedlist[x][y] in nestedlist[y][:])\n                return nestedlist[x][y]\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    \n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements\n",
        "num_ids": 80
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if int(text) == text:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if not isinstance(text, int):\n        raise ValueError('Not an integer.')\n    \ndef check_boolean(text):\n    '''\n    Write a function to check if a string represents a boolean or not.\n    '''\n    if text.lower() not in ['true', 'false']:\n        raise ValueError('Not a boolean.')\n",
        "num_ids": 29
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        for j in i:\n            if j == '':\n                empty = False\n                break\n    return empty\n",
        "num_ids": 41
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2 = []\n    for i in list1:\n        if i:\n            list2.append(i)\n    return list2\n",
        "num_ids": 35
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list=[]\n    for i in list1:\n        if i:\n            empty_list.append(i)\n    if empty_list:\n        print(\"The list is not empty\")\n    else:\n        print(\"The list is empty\")\n",
        "num_ids": 62
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1:\n        for item in list1:\n            if item:\n                if type(item)!= dict:\n                    return False\n    else:\n        return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i.values():\n            if j:\n                return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for element in list1:\n        if not element:\n            empty = False\n            break\n    return empty\n",
        "num_ids": 33
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 24
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            for k in range(len(list1[i][j])):\n                if list1[i][j][k]!='':\n                    return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if list(i.values()):\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {} and i!= None:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #return sum(nums)\n    return sum(map(sum, nums))\n",
        "num_ids": 23
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    num_tuple = []\n    while i < len(nums):\n        num_tuple.append(nums[i])\n        i += 1\n    return int(''.join(str(e) for e in num_tuple))\n",
        "num_ids": 64
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(x * y for x, y in zip(nums, nums[1:]))\n",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    try:\n        return int(''.join(map(str, nums)))\n    except ValueError as e:\n        print(e)\n        return None\n",
        "num_ids": 39
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # your code here\n    i = 0\n    while i < len(nums):\n        nums[i] = nums[i] + 10**(len(nums)-1)\n        i+=1\n    return tuple(nums)\n    \n",
        "num_ids": 62
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_nums = 0\n    for num in nums:\n        int_nums = int_nums * 10 + num\n",
        "num_ids": 33
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0 if not nums else sum(map(tuple_to_int, nums))\n",
        "num_ids": 25
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0 if not nums else 0 if nums[0] < nums[1] else nums[0] + nums[1]\n",
        "num_ids": 36
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in test_list:\n        if type(element[0]) == str:\n            for element_element in element:\n                for element_element_float in list(element_element):\n                    if type(element_element_float) == float:\n                        element_element_float = float(element_element_float)\n                element_element_float = element_element_float.replace(\"%\", \"\").replace(\",\", \"\")\n                if element_element_float!= \"\":\n                    test_list[test_list.index(element)] = element_element_float\n    return test_list\n",
        "num_ids": 141
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for list_elem in test_list:\n        for single_list_elem in list_elem:\n            try:\n                float(single_list_elem)\n            except ValueError:\n                single_list_elem = float(single_list_elem)\n                test_list.remove(list_elem)\n                test_list.append(single_list_elem)\n    return test_list\n",
        "num_ids": 102
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # create empty list and copy each element of list to the variable\n    list_of_floats = []\n    for element in test_list:\n        list_of_floats.append(float(element))\n    # return list_of_floats\n    return list_of_floats\n",
        "num_ids": 70
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list.replace(' ', '')\n    test_list = test_list.replace(',', '.')\n    test_list = test_list.split('.')\n    test_list = [float(item) for item in test_list]\n    return test_list\n",
        "num_ids": 72
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n            ",
        "num_ids": 54
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    elif len(test_list) == 2:\n        return [list_to_float(test_list[0]), list_to_float(test_list[1])]\n    elif len(test_list) == 3:\n        return [list_to_float(test_list[0]), list_to_float(test_list[1]), list_to_float(test_list[2])]\n    elif len(test_list) == 4:\n        return [list_to_float(test_list[0]), list_to_float(test_list[1]), list_to_float(test_list[2]), list_to_float(test_list[3])]\n    elif len(test_list) == 5:\n        return [list_to_float(test_list[0]), list_to_float(test_list[1]), list_to_float(test_list[2]), list_to_float(test_list[3]), list_to_float(test_list[4])]\n    elif len(test_list) == 6:\n        return [list_to_float(test_list[0]), list_to_float(test_list[1]), list_to_float(test_list[2]), list_to_float(test_list[3]), list_to_float(test_list[4]), list_to_float(test_list[5])]\n    else:\n        raise TypeError(\"Invalid list of lists of sizes, please create a list of lists of size 4.\")\n    \ndef sum_of_list(l1, l2):\n    '''\n    This function returns the sum of two lists.\n    '''\n    if len(l1) == len(l2):\n        return sum(l1)\n    else:\n        raise TypeError(\"Invalid lists of sizes, please create a list of lists of size 4.\")\n        \ndef max_of_list(l1, l2):\n    '''\n    This function returns the maximum element in a list of lists.\n    '''\n    if len(l1) == len(l2):\n        return max(l1)\n    else:\n        raise TypeError(\"Invalid lists of sizes, please create a list of lists of size 4.\")\n        \ndef min_of_list(l1, l2):\n    '''\n    This function returns the minimum element in a list of lists.\n    '''\n    if len(l1) == len(l2):\n        return min(l1)\n    else:\n        raise TypeError(\"Invalid lists of sizes, please create a list of lists of size 4.\")\n        \ndef main():\n    '''\n    This function does the following:\n    1. Creates an array of different possible lists of numbers:\n    2. Calculates the sum of each possible list of numbers.\n    3. Calculates the maximum element in each possible list of numbers.\n    4. Returns the maximum element in the array.\n    5. Returns the minimum element in the array.\n    '''\n    test_list = [3,4,2,3,1]\n    print('Testing a list of numbers:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a single list:')\n    print([list_to_float(test_list[0])])\n    print('Testing a list of numbers with a list of size 2:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 3:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 4:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 5:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 6:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 7:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 8:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 9:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 10:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 11:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 12:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 13:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 14:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 15:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 16:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 17:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 18:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 19:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 20:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 21:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 22:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 23:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 24:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 25:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 26:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 27:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 28:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 29:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 30:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 31:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 32:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 33:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 34:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 35:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 36:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 37:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 38:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 39:')\n    print(list_to_float(test_list))\n    print('Testing a list of numbers with a list of size 40:')\n    print(list_to_float(test_list))\n    print('Testin",
        "num_ids": 1290
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            if type(j) is not list:\n                j = [j]\n            for k in j:\n                if type(k) is not float:\n                    k = [k]\n                for l in k:\n                    if type(l) is not int and type(l) is not float:\n                        l = [l]\n                        break\n                else:\n                    pass\n                break\n            else:\n                pass\n        else:\n            pass\n    else:\n        pass\n    return None\n",
        "num_ids": 132
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index,element in enumerate(test_list):\n        test_list[index] = list(map(float, element))\n    return test_list",
        "num_ids": 38
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Remove all of the null values and replace null entries with 0.\n    new_list = [item for item in test_list if item!= 'nan']\n    for i in range(len(new_list)):\n        if new_list[i] == '':\n            new_list[i] = 0\n    # Convert to float and return list\n    return [float(item) for item in new_list]\n",
        "num_ids": 99
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split(\" \")\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_string = string.split(\" \")\n    return list_of_string\n",
        "num_ids": 24
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split()\n    return list\n",
        "num_ids": 14
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = []\n    for char in string:\n        new_list.append(char)\n    return new_list\n",
        "num_ids": 32
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = list()\n    for s in string.split(): \n        l.append(s)\n    return l \n",
        "num_ids": 31
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a single string.\n    '''\n    return''.join(list)\n    \ndef remove_punc(string): \n    '''\n    Write a function that removes non alphanumeric characters from a string.\n    '''\n    return''.join(re.findall(r'[^\\w]+', string))\n    \ndef remove_stopwords(string): \n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    return''.join(set(string.split()))\n    \ndef lemmatize_word(string): \n    '''\n    Write a function that lemmatizes a string using a dictionary.\n    '''\n    return''.join(word for word in string.split() if word not in stopwords)\n    \ndef tokenize(string): \n    '''\n    Write a function that tokenizes a string.\n    '''\n    return string.split()\n    \ndef stem(string): \n    '''\n    Write a function that stems a string using a dictionary.\n    '''\n    return''.join(word for word in string.split() if word not in stopwords)\n    \ndef pos_tag(string): \n    '''\n    Write a function that pos-tag a string using a dictionary.\n    '''\n    return''.join(pos for word, pos in nltk.pos_tag(string.split()) if pos not in stopwords)\n    \ndef extract_tags(string): \n    '''\n    Write a function that extracts the tags using a dictionary.\n    '''\n    return''.join(tag for word, tag in nltk.pos_tag(string.split()) if tag not in stopwords)\n    \ndef normalize(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_words(string.split()))\n    \ndef normalize_words(string): \n    '''\n    Write a function that normalizes a string.\n    '''\n    return''.join(normalize_word(word) for word in string)\n    \ndef normalize_word(word): \n    '''\n    Write a function that normalizes a word using a dictionary.\n    '''\n    return''.join(normalize_word_no_stopwords(word))\n    \ndef normalize_word_no_stopwords(word): \n    '''\n    Write a function that normalizes a word using a dictionary.\n    '''\n    return''.join(normalize_word_no_stopwords_no_stopwords(word))\n    \ndef normalize_word_no_stopwords_no_stopwords(word): \n    '''\n    Write a function that normalizes a word using a dictionary.\n    '''\n    return''.join(normalize_word_no_stopwords_no_stopwords_no_stopwords(word))\n    \ndef add_no_stopwords(string): \n    '''\n    Write a function that adds a list of stopwords to a string.\n    '''\n    return''.join(word +'' for word in string.split() if word not in stopwords)\n    \ndef add_stopwords(string): \n    '''\n    Write a function that adds all stopwords to a string.\n    '''\n    return''.join(stopword for stopword in string.split() if stopword not in stopwords)\n    \ndef normalize_words_no_stopwords(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_words_no_stopwords(string.split()))\n    \ndef normalize_words_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_words_no_stopwords_no_stopwords(string.split()))\n    \ndef normalize_words_no_stopwords_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_words_no_stopwords_no_stopwords_no_stopwords(string.split()))\n    \ndef normalize_phrases(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_phrases_no_stopwords(string.split()) +'')\n    \ndef normalize_phrases_no_stopwords(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_phrases_no_stopwords_no_stopwords(string.split()) +'')\n    \ndef normalize_phrases_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_phrases_no_stopwords_no_stopwords_no_stopwords(string.split()) +'')\n    \ndef normalize_phrases_no_stopwords_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_phrases_no_stopwords_no_stopwords_no_stopwords_no_stopwords(string.split()) +'')\n    \ndef normalize_phrases_no_stopwords_no_stopwords_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_phrases_no_stopwords_no_stopwords_no_stopwords_no_stopwords_no_stopwords(string.split()) +'')\n    \ndef normalize_phrases_no_stopwords_no_stopwords_no_stopwords_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that normalizes a string using a dictionary.\n    '''\n    return''.join(normalize_phrases_no_stopwords_no_stopwords_no_stopwords_no_stopwords_no_stopwords_no_stopwords(string.split()) +'')\n    \ndef remove_stopwords_no_stopwords(string): \n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    return''.join(word for word in string.split() if word not in stopwords)\n    \ndef remove_stopwords_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    return''.join(word for word in string.split() if word not in stopwords)\n    \ndef remove_stopwords_no_stopwords_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    return''.join(word for word in string.split() if word not in stopwords)\n    \ndef remove_stopwords_no_stopwords_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    return''.join(word for word in string.split() if word not in stopwords)\n    \ndef remove_stopwords_no_stopwords_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    return''.join(word for word in string.split() if word not in stopwords)\n    \ndef remove_stopwords_no_stopwords_no_stopwords_no_stopwords(string): \n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    return''.join(word for word in string.split() if word not in stopwords)\n    \ndef remove_stopwords_no",
        "num_ids": 32
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    sorted_array = sorted(arr)\n    idx = 0\n    for i in range(len(arr)-1):\n        if sorted_array[i] == sorted_array[i+1]:\n            return sorted_array[i]\n        elif sorted_array[i]!= sorted_array[i+1]:\n            idx = i\n    return None\n",
        "num_ids": 89
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Your code here\n    # nested if-else construct \n    if len(arr) == 0:\n        return -1\n    else:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            index = arr[1]\n            for i in range(arr[0] + 1, len(arr)):\n                if arr[i] == index:\n                    return arr[i]\n            return -1\n",
        "num_ids": 108
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    while(left < right):\n        if(arr[left] == arr[right]):\n            return arr[left]\n        elif(arr[left] > arr[right]):\n            right -= 1\n        else:\n            left += 1\n    return -1\n",
        "num_ids": 85
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Implement this function\n    # '''\n    # Return an array of the size of the array that is guaranteed to be monotonic\n    # elements such that each monotonic element appears exactly once in the sorted array.\n    # '''\n    # array = []\n    # i = 0\n    # j = len(arr)-1\n    # # print(j)\n    # # arr.append([])\n    # # while i<j:\n    # #     if arr[i]!=arr[j]:\n    # #         # print(arr[i],\"   \",arr[j])\n    # #         if arr[j]<arr[i] and arr[j] not in arr[i+1:j]:\n    # #             arr.append([arr[i]])\n    # #         if arr[i]>arr[j] and arr[i] not in arr[i+1:j]:\n    # #             arr.append([arr[j]])\n    # #     i+=1\n    # #     j-=1\n    # # return arr\n    # arr = sorted(arr)\n    # for i in range(len(arr)):\n    #     for j in range(i+1,len(arr)):\n    #         if arr[i] == arr[j]:\n    #             arr[i] = arr[j]\n    # return arr\n",
        "num_ids": 267
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    mid = int(len(arr)/2)\n    if arr[mid] == arr[mid - 1]:\n        return arr[mid]\n    else:\n        return search(arr[:mid])\n",
        "num_ids": 66
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i - 1] and count == 0:\n            count += 1\n        elif arr[i] == arr[i - 1] and count!= 0:\n            count -= 1\n    return arr[count + 1]\n",
        "num_ids": 78
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    \n    # Base case\n    if n == 0:\n        return -1\n    \n    # dp[i] stores the last element with which i appears only once.\n    # Also if i == n - 1, we could use the dp[i-1] as long as the dp[i] is not the last element.\n    # This is because at the last element we are no longer using the dp[i] and therefore,\n    # no need to check every element with which i appears once.\n    dp = [0] * n\n    \n    # 1. Initialize all the values in dp[0] as the first element\n    # 3. for each of the first two elements\n    #   - update dp[i] to the last element with which i does not occur in the array\n    # 5. if dp[i] is not the last element, we can update it to dp[i-1]\n    # 6. if dp[i] is the last element, we can update it to the last element with which i occurs\n    # 7. we have a base case: if i = 0, then we know the last element with which i does not occur.\n    # In this case, we can update dp[i-1] to the last element with which i does not occur.\n    # So dp[0] = 0\n    # So, we can update dp[i-1] to the last element with which i occurs\n    for i in range(1, n):\n        if arr[i] == arr[0] and dp[i-1]!= 0:\n            dp[i] = dp[i-1]\n        elif arr[i] == arr[i-1] and dp[i-1]!= 0:\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = arr[i-1]\n",
        "num_ids": 448
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    print('[S]')\n    print(arr)\n    print('[{}]'.format(arr[0]))\n    result = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            result += 1\n    print('[{}]'.format(result))\n",
        "num_ids": 83
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr = sorted(arr)\n    print(arr[0])\n    mid = len(arr) // 2\n    print(mid)\n    if arr[mid] == arr[mid+1]:\n        return arr[mid]\n    else:\n        first = arr[mid]\n        second = arr[mid+1]\n        if first == second:\n            return first\n        if first > second:\n            return second\n        return first\n",
        "num_ids": 103
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list_max_product = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            product = list1[i] * list1[j]\n            if product > list_max_product[-1]:\n                list_max_product.clear()\n                list_max_product.append(product)\n            elif product == list_max_product[-1]:\n                list_max_product.append(product)\n    return max(list_max_product)\n",
        "num_ids": 126
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    max_product = list1[0][0]*list1[1][1]\n    for i in range(len(list1)-1):\n        max_product = max(max_product,list1[i][0]*list1[i+1][1])\n    return max_product\n",
        "num_ids": 83
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i][0] < list1[j][0] and list1[j][1] < list1[i][1]:\n                temp = list1[i][0] * list1[j][0]\n                max.append(temp)\n    return max\n",
        "num_ids": 98
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # # Use a max of every pair\n    # max_product = 0\n    # max_pair = 0\n    # for i in list1:\n    #     for j in list1:\n    #         if i[0] < j[0] and i[1] < j[1]:\n    #             max_product = max(max_product, abs(i[0] * j[1]) + abs(i[1] * j[0]))\n    #             max_pair = max(max_pair, i[1] * j[0])\n    #             # print(max_product, max_pair)\n    # return max_product, max_pair\n    # for i in list1:\n    #     for j in list1:\n    #         if i[0] < j[0] and i[1] < j[1]:\n    #             max_product = max(max_product, abs(i[0] * j[1]) + abs(i[1] * j[0]))\n    #             max_pair = max(max_pair, i[1] * j[0])\n    #             # print(max_product, max_pair)\n    # return max_product, max_pair\n    max_product = 0\n    max_pair = 0\n    for i in list1:\n        for j in list1:\n            if i[0] < j[0] and i[1] < j[1]:\n                max_product = max(max_product, abs(i[0] * j[1]) + abs(i[1] * j[0]))\n                max_pair = max(max_pair, i[1] * j[0])\n                # print(max_product, max_pair)\n    return max_product, max_pair\n",
        "num_ids": 420
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) <= 0:\n        return 'Please enter at least one list.'\n    max = 0\n    i = 0\n    j = 0\n    while i < len(list1):\n        while j < len(list1):\n            if list1[i][0] > list1[j][0] and list1[j][1] > list1[i][1]:\n                if max < abs(list1[i][1] * list1[j][0]):\n                    max = list1[i][1] * list1[j][0]\n            if list1[i][1] < list1[j][1]:\n                if max < abs(list1[i][1] * list1[j][1]):\n                    max = list1[i][1] * list1[j][1]\n            j += 1\n        i += 1\n    return max\n",
        "num_ids": 209
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    i=0\n    max=0\n    while i<len(list1):\n        j=0\n        product=1\n        while j<len(list1):\n            if list1[i][0]>list1[j][0] and list1[i][1]>list1[j][1]:\n                product=product*list1[i][0]\n                j+=1\n            else:\n                j+=1\n        max=max if max<product else product\n        i+=1\n    return max\n",
        "num_ids": 123
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    numbers = list(map(tuple, list1))\n    list_of_pairs = list(set(numbers))\n    list_of_pairs.sort(key = lambda x: x[0]*x[1])\n    print(list_of_pairs)\n    max_abs_product = 0\n    for i in range(0, len(list_of_pairs)):\n        for j in range(i+1, len(list_of_pairs)):\n            if(list_of_pairs[i][0]*list_of_pairs[j][1]) > max_abs_product:\n                max_abs_product = list_of_pairs[i][0]*list_of_pairs[j][1]\n                max_abs_product_pair = (list_of_pairs[i], list_of_pairs[j])\n    return max_abs_product_pair\n",
        "num_ids": 222
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    max_product = -99\n    max_tuple = -99\n    if len(list1) <= 1:\n        return max_product\n    for index in range(len(list1)-1):\n        if list1[index][0] > list1[index+1][0]:\n            max_product = max(list1[index][0] * list1[index+1][1], max_product)\n        if list1[index][1] > list1[index+1][1]:\n            max_product = max(list1[index][1] * list1[index+1][0], max_product)\n    max_tuple = max_product\n    return max_tuple\n    \n",
        "num_ids": 178
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = product*(list1[i][0]*list1[j][1])\n    return product\n",
        "num_ids": 64
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pairs_tuple = []\n    temp_list = []\n    temp_list_pair = []\n    for item in list1:\n        if len(item) > 1:\n            temp_list.append(item[0])\n            temp_list.append(item[1])\n        if len(item) == 1:\n            pairs_tuple.append(item)\n    pairs_tuple_temp = []\n    for i in range(0,len(pairs_tuple)):\n        temp_list_pair.append(list(pairs_tuple[i]))\n    for item in temp_list_pair:\n        for j in range(0,len(item)):\n            for k in range(0,len(item)):\n                if item[j] > item[k]:\n                    temp_list_pair[i].insert(j,item[k])\n                    temp_list_pair.insert(i,item[j])\n    max_product = 0\n    for i in range(0,len(temp_list_pair)):\n        max_product = max(max_product,abs(temp_list_pair[i][0]*temp_list_pair[i][1]))\n    return max_product\n",
        "num_ids": 293
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Memoization approach\n    # Since we use two arrays to store all the previous sums,\n    # we need to use a dictionary to store the previous sums.\n    # So, in the last loop, we need to calculate sums for all numbers from 1 to limit.\n    # Whenever we are adding the new number, we need to check if it's already in the dictionary.\n    # If it's not, we need to keep adding it.\n    # Otherwise we need to calculate the sum by adding it with that previous sum and keeping it.\n    # Then we need to return the sum.\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    \n    amicable_numbers_sum = [0 for _ in range(limit+1)]\n    amicable_numbers_sum[1] = 1\n    \n    # Memoization approach\n    # In the following loop, we calculate sums for all numbers from 1 to limit.\n    # O(n)\n    for i in range(2, limit+1):\n        # Here, we store each new number's previous sum.\n        # O(n)\n        if i % 2 == 0:\n            # This is because it's odd number\n            # O(1)\n            amicable_numbers_sum[i] = amicable_numbers_sum[i // 2] + amicable_numbers_sum[i // 2 - 1]\n        # This is because it's even number\n        # O(1)\n        else:\n            amicable_numbers_sum[i] = amicable_numbers_sum[i // 2]\n    \n    # Memoization approach\n    # In the following loop, we calculate the sums for all numbers from 1 to limit.\n    # O(n)\n    for i in range(2, limit+1):\n        # Here, we keep checking each new number's previous sum with that previous sum.\n        # O(n)\n        if amicable_numbers_sum[i] % 2 == 1:\n            # This is because it's odd number\n            # O(1)\n            amicable_numbers_sum[i] += amicable_numbers_sum[i // 2]\n        # This is because it's even number\n        # O(1)\n        else:\n            amicable_numbers_sum[i] += amicable_numbers_sum[i // 2]\n    \n    # Memoization approach\n    # In the following loop, we calculate the sums for all numbers from 1 to limit.\n    # O(n)\n    for i in range(2, limit+1):\n        # Here, we keep checking each new number's previous sum with that previous sum.\n        # O(n)\n        amicable_numbers_sum[i] += amicable_numbers_sum[i] // 2\n    \n    return amicable_numbers_sum[limit]\n",
        "num_ids": 667
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for i in range(1, limit):\n        if i % 2 == 0 and limit % i == 0:\n            amicable_numbers.append(i)\n            \n    amicable_numbers.sort()\n    \n    sum = 0\n    for number in amicable_numbers:\n        if sum + number <= limit:\n            sum += number\n        else:\n            sum += number\n    return sum\n",
        "num_ids": 108
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in range(1, limit + 1):\n        # if the number is not divisible by 2\n        if number % 2 == 0:\n            # add it to the list of amicable numbers\n            amicable_numbers.append(number)\n            # if it is divisible by 2,\n            # sum it's squares\n            # else, add it to the sum\n            if number % 3 == 0:\n                amicable_numbers.append(number ** 2)\n        else:\n            # add it to the sum\n            amicable_numbers.append(number)\n",
        "num_ids": 144
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = []\n    amicable_numbers = []\n    \n    for i in range(1, limit):\n        if i % 2 == 0:\n            if i in amicable_numbers:\n                continue\n            else:\n                amicable_numbers.append(i)\n                amicable_sum.append(i)\n                # if i == 2:\n                #     amicable_numbers.append(i)\n                # else:\n                #     continue\n        else:\n            if i in amicable_numbers:\n                continue\n            else:\n                amicable_numbers.append(i)\n                amicable_sum.append(i)\n                # if i == 2:\n                #     amicable_numbers.append(i)\n                # else:\n                #     continue\n    return sum(amicable_sum)\n",
        "num_ids": 201
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        num = 1\n        while num*num <= i:\n            num *= 2\n            if num == i:\n                break\n        if num == i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n",
        "num_ids": 84
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = set()\n    for num in range(1, limit):\n        if num not in numbers:\n            for i in range(2, int(num/2) + 1):\n                if num % i == 0:\n                    break\n                else:\n                    continue\n            else:\n                numbers.add(num)\n    return sum(numbers)\n    \nprint(amicable_numbers_sum(limit=20))",
        "num_ids": 102
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = amicable_numbers_calculator(limit)\n    amicable_numbers_sum = sum(amicable_numbers)\n    print(amicable_numbers_sum)\n",
        "num_ids": 61
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum=0\n    #check for any numbers that are divisible by both 2 and 3\n    for i in range(1,limit):\n        if i%2==0 and i%3==0:\n            #sum all divisible numbers that are also divisible by both 2 and 3\n            sum+=i\n        else:\n            continue\n    return sum\n",
        "num_ids": 83
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for i in range(1, limit+1):\n        if (i % 2 == 0):\n            amicable.append(i)\n        elif (i % 3 == 0):\n            amicable.append(i)\n    if amicable:\n        sum = 0\n        for i in amicable:\n            if (i <= limit):\n                sum += i\n        return sum\n    else:\n        return 0\n",
        "num_ids": 104
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    amicable_numbers = [num for num in range(1, limit) if not is_amicable(num) and is_amicable(num, num+1)]\n    \n    return sum(amicable_numbers)\n    \ndef is_amicable(num1, num2):\n    '''\n    Return True if a pair of numbers is amicable.\n    '''\n    if num1 == num2:\n        return False\n    elif num1 == num2+1:\n        return True\n    elif num1+num2 == num2+1:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        angle = cmath.phase(cmath.complex(a,b))\n        angle = angle/180*3.14159\n        return angle\n    except ZeroDivisionError:\n        print('Error: Both numbers are zero.')\n        return -1\ndef angle_difference(a,b):\n    '''\n    Write a function to get the difference of a complex number.\n    '''\n    return angle_complex(a,b) - angle_complex(b,a)\ndef complex_angle(a,b):\n    '''\n    Write a function to get the angle between a complex number and another complex number.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef angle_difference(a,b):\n    '''\n    Write a function to get the difference of a complex number.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef complex_angle_difference(a,b):\n    '''\n    Write a function to get the angle between a complex number and another complex number.\n    '''\n    return complex_angle(a,b) - complex_angle(b,a)\ndef cos_angle(a,b):\n    '''\n    Write a function to get the cosine angle between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))\ndef angle_difference_cos(a,b):\n    '''\n    Write a function to get the cosine difference between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cos_angle_difference(a,b):\n    '''\n    Write a function to get the cosine difference between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef tan_angle(a,b):\n    '''\n    Write a function to get the tangent angle between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef tan_angle_difference(a,b):\n    '''\n    Write a function to get the tangent difference between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cos_angle_difference(a,b):\n    '''\n    Write a function to get the cosine difference between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef tan_angle_difference(a,b):\n    '''\n    Write a function to get the tangent difference between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cos_angle_difference(a,b):\n    '''\n    Write a function to get the cosine difference between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef tan_angle_difference(a,b):\n    '''\n    Write a function to get the tangent difference between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cross(a,b):\n    '''\n    Write a function to get the cross product between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cross2(a,b):\n    '''\n    Write a function to get the cross product between two complex numbers.\n    '''\n    return (a*b)/(a**2 + b**2)\ndef square(a):\n    '''\n    Write a function to get the square of a complex number.\n    '''\n    return a**2\ndef square2(a):\n    '''\n    Write a function to get the square of a complex number.\n    '''\n    return a**2\ndef mean_square(a,b,c):\n    '''\n    Write a function to get the square of a complex number.\n    '''\n    return (square(a)+square(b)+square(c))**0.5\ndef mean_square2(a,b,c):\n    '''\n    Write a function to get the square of a complex number.\n    '''\n    return mean_square(square(a),square(b),square(c))\ndef sin_angle(a,b,c):\n    '''\n    Write a function to get the sinine of a complex number.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef sin_angle2(a,b,c):\n    '''\n    Write a function to get the sinine of a complex number.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cos_angle(a,b,c):\n    '''\n    Write a function to get the cosine of a complex number.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cos_angle2(a,b,c):\n    '''\n    Write a function to get the cosine of a complex number.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cos_angle_difference(a,b,c):\n    '''\n    Write a function to get the cosine difference of a complex number.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cos_angle_difference2(a,b,c):\n    '''\n    Write a function to get the cosine difference of a complex number.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef sin_angle_difference(a,b,c):\n    '''\n    Write a function to get the sinine difference of a complex number.\n    '''\n    return -cmath.phase(cmath.complex(a,b))/180*3.14159\ndef sin_angle_difference2(a,b,c):\n    '''\n    Write a function to get the sinine difference of a complex number.\n    '''\n    return -cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cos_angle_difference(a,b,c):\n    '''\n    Write a function to get the cosine difference of a complex number.\n    '''\n    return -cmath.phase(cmath.complex(a,b))/180*3.14159\ndef cos_angle_difference2(a,b,c):\n    '''\n    Write a function to get the cosine difference of a complex number.\n    '''\n    return -cmath.phase(cmath.complex(a,b))/180*3.14159\ndef square_difference(a,b):\n    '''\n    Write a function to get the square of the difference between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef square_difference2(a,b):\n    '''\n    Write a function to get the square of the difference between two complex numbers.\n    '''\n    return cmath.phase(cmath.complex(a,b))/180*3.14159\ndef mean_square_difference(a,b,c):\n    '''\n    Write a function to get the mean square of the difference between two complex numbers.\n    '''\n    return (square_difference(a,b)+square_difference(b,c)+square_difference(c,a))**0.5\ndef mean_square_difference2(a,b,c):\n    '''\n    Write a function to get the mean square of the difference between two complex numbers.\n    '''\n    return mean_square_difference(square_difference(a,b),square_difference(b,c),square_difference(c,a))\ndef mean_squar",
        "num_ids": 44
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=complex(a,b)\n    angle=cmath.phase(c)\n    return angle\n",
        "num_ids": 27
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    c = a + b\n",
        "num_ids": 23
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a)*cmath.phase(b)\n    print (angle)\n    return angle\n",
        "num_ids": 30
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #get the angle of the complex number\n    a = abs(a)\n    b = abs(b)\n    theta = 0.0\n    if b==0.0:\n        return theta\n    if a>0:\n        theta= cmath.phase(b/a)\n    else:\n        theta= -cmath.phase(b/a)\n    if theta>180.0:\n        theta=theta-360.0\n    if theta<0.0:\n        theta=theta+360.0\n    return theta\n",
        "num_ids": 137
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        return(b/a)\n    else:\n        return (b/a) * (-1)\n    return angle_complex(b,a)\n",
        "num_ids": 44
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #print(a)\n    #print(b)\n    a = a.real\n    b = b.real\n    #print(a)\n    #print(b)\n",
        "num_ids": 44
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # load in the complex number\n    c = complex(a,b)\n    # get the real part of the complex number\n    re = c.real\n    # get the imaginary part of the complex number\n    im = c.imag\n    # find the complex number that is equal to the real part\n    R = re+im*1j\n    # find the real part of the complex number\n    R_r = R.real\n    # find the imaginary part of the complex number\n    R_i = R.imag\n    # find the angle of the complex number\n    alpha = math.acos(R_i/R_r)\n    # return the angle\n    return alpha\n",
        "num_ids": 157
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (a==0):\n        return (b)\n    elif (b==0):\n        return (a)\n    else:\n        return (cmath.acos(cmath.sqrt((a*b)/(a+b)))*cmath.pi/180)\n",
        "num_ids": 68
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    alpha = b.real*b.real - a.real*a.real\n    beta = a.imag*b.imag - b.imag*a.imag\n    angle_radians = math.atan2(beta, alpha)\n    angle_degrees = int(angle_radians*180.0/math.pi)\n",
        "num_ids": 78
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    if len(string) < 2:\n        return 0\n    \n    return max(find_length(string[0:len(string) - 1]), find_length(string[1:]))\n    \ndef remove_0(string): \n    '''\n    Write a function that removes all 0s from a given binary string.\n    '''\n    \n    if len(string) == 0:\n        return []\n    else:\n        return string[1:]\n    \ndef remove_1(string): \n    '''\n    Write a function that removes all 1s from a given binary string.\n    '''\n    \n    if len(string) == 0:\n        return []\n    else:\n        return string[0:-1]\n    \ndef count_digits(string): \n    '''\n    Write a function that counts the number of 0's in a given binary string.\n    '''\n    \n    if len(string) == 0:\n        return 0\n    else:\n        return sum(char == '0' for char in string)\n    \ndef get_count_binary_strings(string): \n    '''\n    Write a function that counts the number of 0's in all the given binary strings.\n    '''\n    \n    if len(string) == 0:\n        return 0\n    \n    if string[0] == '0':\n        return string.count('0')\n    else:\n        return string.count('1')\n    \ndef count_ones_and_zeros(string): \n    '''\n    Write a function that counts the number of 1's in a given binary string.\n    '''\n    \n    if len(string) == 0:\n        return 0\n    \n    if string[0] == '1':\n        return string.count('1')\n    else:\n        return string.count('0')\n",
        "num_ids": 53
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    for i in range(len(string)):\n        ans = ans + 1 if string[i] == '0' else ans - 1\n    return ans\n",
        "num_ids": 43
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            max_diff += 1\n        elif string[i] == '1':\n            max_diff -= 1\n        if max_diff > 0:\n            return max_diff\n    return 0\n",
        "num_ids": 82
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_0 = 0\n    num_1 = 0\n    for i in string:\n        if i == 0:\n            num_0 += 1\n        else:\n            num_1 += 1\n    return num_0 - num_1\n",
        "num_ids": 58
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == None or len(string) == 0:\n        return 0\n    elif len(string) == 1:\n        return 1\n    else:\n        return find_length(string[1:]) - find_length(string[:-1])\n",
        "num_ids": 61
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return [int(char) for char in string if char == \"0\" or char == \"1\"]\n",
        "num_ids": 26
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) < 2:\n        return 0\n    if string[0] == string[1] or string[0] == '0' and string[1] == '0':\n        return 1\n    return find_length(string[1:]) + find_length(string[:-1])\n",
        "num_ids": 72
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string=='0' or string=='1':\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    current_diff = 0\n    current_string = ''\n    for char in string:\n        if char == '0':\n            current_string += '0'\n        else:\n            current_string += '1'\n        if current_string[-1] == '0' and len(current_string) < 4:\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n    return max_diff\n",
        "num_ids": 124
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum(div for div in range(1,min(a,b)+1) if (a%div==0) and (b%div==0))\n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = a % 10\n    b = b % 10\n    sum = 0\n    for i in range(1, min(a, b)+1):\n        if a%i==0 and b%i==0:\n            sum+=i\n    return sum\ndef ciclo(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = a % 10\n    b = b % 10\n    if a==0 and b==0:\n        return 0\n    if b==0:\n        return a\n    if a==0:\n        return b\n    return ciclo(a, b) + ciclo(a, b)\nprint(ciclo(10, 36))",
        "num_ids": 83
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    while(b!= 0):\n        c = b % 10\n        b = b // 10\n    return c\n",
        "num_ids": 34
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    try:\n        if(b%a==0):\n            return a*b//a\n        else:\n            return 0\n    except:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return \"Input is not a Number\"\n    if a==b:\n        return a\n    common=[]\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            common.append(i)\n    return sum(common)\n",
        "num_ids": 88
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    if b == 0:\n        print(0)\n        return 0\n    if a == 0:\n        print(0)\n        return 0\n    sum = 0\n    num_div = math.gcd(a, b)\n    for i in range(1, int(math.sqrt(num_div)) + 1):\n        if a % i == 0 and b % i == 0:\n            sum = i*(a//i)\n            break\n    return sum\n    ",
        "num_ids": 117
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    for i in range(1,b+1):\n        if b%i==0:\n            s+=i\n    return s\n    #code here\n",
        "num_ids": 43
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # All possible common divisors:\n    # 1. Numbers divisible by 2,3,5,7\n    # 2. Numbers divisible by 3,5,7\n    # 3. Numbers divisible by 5,7,9,11\n    # 4. Numbers divisible by 6,7,9,11\n    # 5. Numbers divisible by 7,9,11\n    # 6. Numbers divisible by 8,9,11\n    # 7. Numbers divisible by 9,11\n    # 8. Numbers divisible by 11,13,15,17,19,21,23,25,27\n    # 9. Numbers divisible by 11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99\n    # 10. Numbers divisible by 11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,\n    # 100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,88",
        "num_ids": 2012
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    l = []\n    l.append(b)\n    if(a==0):\n        return b\n    while(b!= 0):\n        \n        if (a%b==0):\n            l.append(b)\n            a=a/b\n            b=0\n        else:\n            b-=1\n    return l\n    \n    \n",
        "num_ids": 88
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return (a + b)//2\n",
        "num_ids": 12
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = x*y\n    return res\n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x,y = int(x),int(y)\n    ans = 0\n    for i in range(len(str(y))):\n        ans += (x * y) // 10\n    return str(ans)\n",
        "num_ids": 53
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = 0\n    while x > 0:\n        res += x % 10\n        x //= 10\n    return res * y\n",
        "num_ids": 33
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(\"The result is:\", x * y)\n    return\n",
        "num_ids": 18
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y < 0:\n        return -1\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    return result\n    \ndef mul_str(x):\n    '''\n    Write a function to multiply two strings.\n    '''\n    result = ''\n    for i in range(len(x)):\n        result += x[i]\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n",
        "num_ids": 13
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for i in str.split():\n        if len(i) > n:\n            long.append(i)\n    return(long)\n",
        "num_ids": 40
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if len(word) > n:\n            my_words.append(word)\n    return my_words\n    \n    \ndef num_of_good_words(str):\n    '''\n    Given a string, count the number of words in the string where the first word is a capital letter, and the rest of the words are all lowercase.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isupper():\n            my_words.append(word)\n    return len(my_words)\n    \n    \ndef is_string_valid(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isupper():\n            my_words.append(word)\n    return len(my_words)!= 0\n    \n    \ndef is_valid_word(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isupper():\n            my_words.append(word)\n    if len(my_words) == 0:\n        return False\n    if len(my_words) == 1 and my_words[0] == \"A\" or my_words[0] == \"E\" or my_words[0] == \"I\" or my_words[0] == \"O\" or my_words[0] == \"U\":\n        return True\n    return False\n    \n    \ndef word_in_string(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isupper():\n            my_words.append(word)\n    if len(my_words) == 0:\n        return False\n    if len(my_words) == 1 and my_words[0] == \"A\" or my_words[0] == \"E\" or my_words[0] == \"I\" or my_words[0] == \"O\" or my_words[0] == \"U\":\n        return True\n    return False\n    \n    \ndef count_numbers(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isdigit():\n            my_words.append(word)\n    return len(my_words)!= 0\n    \n    \ndef is_valid_letter(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isalpha():\n            my_words.append(word)\n    return len(my_words)!= 0\n    \n    \ndef is_valid_name(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isalpha() and word[1] == \" \":\n            my_words.append(word)\n    return len(my_words)!= 0\n    \n    \ndef is_valid_word2(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isalpha():\n            my_words.append(word)\n    if len(my_words) == 0:\n        return False\n    if len(my_words) == 1 and my_words[0] == \"A\" or my_words[0] == \"E\" or my_words[0] == \"I\" or my_words[0] == \"O\" or my_words[0] == \"U\":\n        return True\n    return False\n    \n    \ndef is_valid_word3(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isalpha():\n            my_words.append(word)\n    if len(my_words) == 0:\n        return False\n    if len(my_words) == 1 and my_words[0] == \"A\" or my_words[0] == \"E\" or my_words[0] == \"I\" or my_words[0] == \"O\" or my_words[0] == \"U\":\n        return True\n    return False\n    \n    \ndef is_valid_word4(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isalpha():\n            my_words.append(word)\n    if len(my_words) == 0:\n        return False\n    if len(my_words) == 1 and my_words[0] == \"A\" or my_words[0] == \"E\" or my_words[0] == \"I\" or my_words[0] == \"O\" or my_words[0] == \"U\":\n        return True\n    return False\n    \n    \ndef is_valid_word5(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isalpha():\n            my_words.append(word)\n    if len(my_words) == 0:\n        return False\n    if len(my_words) == 1 and my_words[0] == \"A\" or my_words[0] == \"E\" or my_words[0] == \"I\" or my_words[0] == \"O\" or my_words[0] == \"U\":\n        return True\n    return False\n    \n    \ndef is_valid_word6(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isalpha():\n            my_words.append(word)\n    if len(my_words) == 0:\n        return False\n    if len(my_words) == 1 and my_words[0] == \"A\" or my_words[0] == \"E\" or my_words[0] == \"I\" or my_words[0] == \"O\" or my_words[0] == \"U\":\n        return True\n    return False\n    \n    \ndef is_valid_word7(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isalpha():\n            my_words.append(word)\n    if len(my_words) == 0:\n        return False\n    if len(my_words) == 1 and my_words[0] == \"A\" or my_words[0] == \"E\" or my_words[0] == \"I\" or my_words[0] == \"O\" or my_words[0] == \"U\":\n        return True\n    return False\n    \n    \ndef is_valid_word8(str):\n    '''\n    Given a string, determine if it is a valid word or not.\n    '''\n    \n    my_words = []\n    for word in str.split():\n        if word[0].isalpha():\n            my_words.append(word)\n    if len(my_words) == 0:\n        return False\n    if len(my_words) == 1 and my_words[0] == \"A\" or my_words[0] == \"E\" or my_words[0] == \"I\" or my_words[0] == \"O\" or my_words[0] == \"U\":\n        return True\n    return False\n    ",
        "num_ids": 131
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_word = [word for word in str.split() if len(word)>=n]\n    return''.join(long_word)\n    \n",
        "num_ids": 38
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n < 3:\n        return(False)\n    for i in range(1, n):\n        if str[i] =='' and str[i-1]!='':\n            str = str[:i] + str[i+1:]\n            return(str)\n    return(False)\n",
        "num_ids": 74
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split(\" \"):\n        if len(word) > n:\n            words.append(word)\n    return words\n    \n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l_words = []\n    for word in str.split():\n        if len(word) > n:\n            l_words.append(word)\n    return l_words\n",
        "num_ids": 44
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = [word for word in str.split() if len(word)>n]\n    return(len(long_words))\n",
        "num_ids": 35
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for i in str:\n        if len(i) > n:\n            long.append(i)\n    return long\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for x in range(len(str)):\n        if len(str[x]) > n:\n            print(str[x])\n",
        "num_ids": 34
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Write your code here\n    if len(my_matrix) == len(my_matrix[0]) == 0:\n        return True\n    elif len(my_matrix) == 1:\n        if my_matrix[0][0] == 0:\n            return True\n        elif my_matrix[0][0] == 1:\n            return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 0:\n                return False\n    return True\n",
        "num_ids": 144
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    cols = my_matrix.shape[0]\n    rows = my_matrix.shape[1]\n    \n    # if not valid matrix\n    if cols == 0 or rows == 0:\n        return False\n    \n    # check if rows are equal to columns\n    if rows!= cols:\n        return False\n    \n    # check if rows are odd\n    if rows % 2 == 0:\n        # return false\n        return False\n    \n    # check if cols are equal to rows\n    if cols!= rows:\n        return False\n    \n    # check if cols are odd\n    if cols % 2 == 0:\n        # return false\n        return False\n    \n    return True\n",
        "num_ids": 169
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for a valid matrix\n    if is_valid_matrix(my_matrix) == False:\n        return False\n    # Get the diagonal\n    diagonal = get_diagonal(my_matrix)\n    # Check that there is no magic square\n    if is_magic_square(my_matrix) == False:\n        return False\n    # Check that there is no magic square in the diagonal\n    if is_magic_square(diagonal) == False:\n        return False\n    # Check if there is a magic square in the diagonal\n    return is_magic_square(diagonal)\n",
        "num_ids": 141
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    for row in range(rows):\n        for col in range(cols):\n            if my_matrix[row][col]!= 0:\n                return False\n",
        "num_ids": 66
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix.print_matrix()\n    if len(my_matrix) == len(my_matrix[0]):\n        # if the len of matrix is equal to zero, there is a magic square\n        if sum(my_matrix[0]) == sum(my_matrix[-1]):\n            return True\n        return False\n    else:\n        # if matrix has a wrong number of rows or columns, there is a magic square\n        return False\n",
        "num_ids": 112
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Write your code here\n    counter = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == my_matrix[j][i]:\n                counter += 1\n    if counter == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 92
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in range(0,len(my_matrix)):\n        if len(my_matrix[row])==4:\n            for col in range(0,len(my_matrix)):\n                if len(my_matrix[col])==4:\n                    return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return len(my_matrix) == len(my_matrix[0]) and my_matrix == list(zip(*my_matrix))\n",
        "num_ids": 37
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for i in nums:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    for i in counter.values():\n        if i > 1:\n            return i\n    return 0\n    pass\ndef permutations(nums):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    from itertools import permutations\n    for x in permutations(nums):\n        yield list(x)\n",
        "num_ids": 30
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for num in nums:\n        dict[num] += 1\n        \n    for i in range(len(nums)):\n        if dict[nums[i]] > 1:\n            return nums[i]\n        \n    return -1\n    \ndef main():\n    '''\n    Driver Code\n    '''\n    print('--Number of elements in given list:--')\n    n = int(input())\n    if n < 2:\n        print('--Please give at least 2 elements--')\n        return\n    print('--Finding maximum frequency item in given list:--')\n    print(max_occurrences([int(num) for num in input().split()]))\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 101
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    table = defaultdict(int)\n    for num in nums:\n        table[num] += 1\n",
        "num_ids": 27
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrence = 0\n    dict = defaultdict(int)\n    \n    for i in nums:\n        dict[i] = dict.get(i, 0) + 1\n        \n    for i in nums:\n        if dict.get(i, 0) > max_occurrence:\n            max_occurrence = dict.get(i, 0)\n    \n    return max_occurrence\n",
        "num_ids": 97
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = {}\n    for num in nums:\n        if num not in max_freq:\n            max_freq[num] = 0\n        max_freq[num] += 1\n    for i in max_freq:\n        if max_freq[i] > max_freq[i-1]:\n            return i-1\n",
        "num_ids": 87
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    occurrences = defaultdict(int)\n    for item in nums:\n        occurrences[item] += 1\n    return max(occurrences.values())",
        "num_ids": 56
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    m = max(nums)\n    count = defaultdict(int)\n    for n in nums:\n        count[n]+=1\n    for i,j in count.items():\n        if j == m:\n            return i\n",
        "num_ids": 58
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #calculate a hash map for each item\n    freq_map = {}\n    for num in nums:\n        freq_map[num] = nums.count(num)\n    #find the max item with frequency\n    max_occurrences = max(freq_map,key=freq_map.get)\n    return max_occurrences\n    \ndef three_ways(nums):\n    '''\n    Write a function to find the number of ways of placing n numbers in an array.\n    '''\n    #create a map with (x,y) as keys and array length as values\n    nums_map = {}\n    for x in range(len(nums)):\n        for y in range(x+1,len(nums)):\n            nums_map[(x,y)] = nums.count(nums[x])\n    #determine number of ways\n    ways = 0\n    for x in range(len(nums)-2):\n        for y in range(x+1,len(nums)-1):\n            for z in range(y+1,len(nums)):\n                ways += nums_map[(x,y)] * nums_map[(x,z)] * nums_map[(y,z)]\n    return ways\n",
        "num_ids": 185
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    return max_freq\n",
        "num_ids": 70
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # time = O(n)\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n",
        "num_ids": 52
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiou'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i in \"aeiouAEIOU\":\n            new_str += i\n    return new_str\n",
        "num_ids": 43
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    out = \"\"\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for char in str1:\n        if char not in vowels:\n            out += char\n    print(out)\n",
        "num_ids": 56
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_list = []\n    for char in str1:\n        if char in ['a', 'e', 'i', 'o', 'u', 'y']:\n            new_list.append(char)\n    return \"\".join(new_list)\n",
        "num_ids": 62
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    return vowels[::-1]\n    ",
        "num_ids": 27
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    rev_str = ''\n    for i in str1:\n        if i in vowels:\n            rev_str = rev_str + i\n    return rev_str\n",
        "num_ids": 65
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in 'aeiou':\n            result += str1[i]\n        else:\n            continue\n    return result\n    \nprint(reverse_vowels('AaEe'))\nprint(reverse_vowels('AaEeDd'))\n",
        "num_ids": 95
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str1 = str1.lower()\n    for letter in new_str1:\n        if letter in vowels:\n            new_str1 = new_str1[::-1]\n    return new_str1\n",
        "num_ids": 76
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1_list = str1.split(\"y\")\n    str1_list[1] = str1_list[1].replace(\"y\", \"n\")\n    return \" \".join(str1_list)\n",
        "num_ids": 52
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    result = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n",
        "num_ids": 28
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join([str(i) for i in tup1])\n",
        "num_ids": 20
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in range(len(tup1)):\n        str1 = str1 + ''.join(str(tup1[i])) + ','\n    str1 = str1 + ''.join(str(tup1[len(tup1)-1]))\n    return str1\n",
        "num_ids": 78
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"tuple of %d elements\" % len(tup1)\n",
        "num_ids": 20
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = \"\"\n    for i in tup1:\n        str = str + str(i)\n    return str\n",
        "num_ids": 30
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(str(elem) for elem in tup1)\n",
        "num_ids": 22
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \", \".join([str(tup1[0]) + \" \" + str(tup1[1]) for tup1 in tup1]) + \")\"\n",
        "num_ids": 44
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = ''\n    for i in range(len(tup1)):\n        str += str(tup1[i])\n    return str\n    \ndef main():\n    '''\n    Inputs:\n        none\n    Outputs:\n        none\n    '''\n    print('You are welcome to this text program!\\n')\n    tup1 = input('Enter a tuple: ').split()\n    tup1 = (int(tup1[0]),int(tup1[1]))\n    print(tup_string(tup1))\n",
        "num_ids": 70
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '('+', '.join(str(x) for x in tup1)+')'\n",
        "num_ids": 25
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for i in range(len(tup1)):\n        str_tup += str(tup1[i])\n        if i!= len(tup1)-1:\n            str_tup += ','\n    return str_tup\n",
        "num_ids": 69
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\"\n    for i in tup1:\n        s += str(i)\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for n in nums:\n        if n < 0:\n            negative_sum += abs(n)\n    return negative_sum\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n    pass\ndef is_pythagorean(a,b,c):\n    '''\n    Write a function to determine whether a,b,c are Pythagorean triples or not.\n    '''\n    if a == b == c:\n        return True\n    elif a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\ndef is_pythagorean_triple(a,b,c):\n    '''\n    Write a function to determine whether a,b,c are Pythagorean triples or not.\n    '''\n    return is_pythagorean(a,b,c) and is_pythagorean(b,a,c) and is_pythagorean(a,c,b)\n",
        "num_ids": 46
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum -= n\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # your code here\n    num_list = []\n    for num in nums:\n        if num < 0:\n            num_list.append(num)\n    return sum(num_list)\n    \n",
        "num_ids": 51
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum = 0\n    for i in nums:\n        if i < 0:\n            negativenum += i\n    return negativenum\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += abs(nums[i])\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg = 0\n    for num in nums:\n        if num < 0:\n            neg += num\n    return neg\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for num in nums:\n        if num < 0:\n            s += num\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum = 0\n    for i in nums:\n        if i < 0:\n            negativenum += i\n    return negativenum\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*(n+1))/6)\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    h = int((n ** 0.5))\n    for i in range(0, h):\n        print(i)\n    print(h * 'x')\n    for i in range(0, n):\n        print(i)\n    print(h * 'x')\n    print(h * 'x')\n    for i in range(n, 0, -1):\n        print(i)\n        print(h * 'x')\n        for j in range(0, i):\n            print(j)\n        print(h * 'x')\n        for j in range(i, n):\n            print(j)\n            print(h * 'x')\n",
        "num_ids": 156
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = 0\n    while x**2 <= n:\n        y = x**2 + 1\n        z = x**2 + y\n        if z**2 >= n:\n            break\n        x += 1\n    return x - n\n",
        "num_ids": 57
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    for i in range(0, n, 2):\n        print(i)\n    \n    for i in range(0, n, 2):\n        print(i)\n    \n    for i in range(n, -1, -2):\n        print(i)\n    \n    for i in range(n, -1, -2):\n        print(i)\n    \n    for i in range(0, n, 2):\n        print(i)\n    \n    for i in range(n, -1, -2):\n        print(i)\n    \n    for i in range(n, -1, -2):\n        print(i)\n    \n    print(hexagonal_num(10))\n    \nhexagonal_num(10",
        "num_ids": 176
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = int(n**(1/2)) \n    if n == 0: return num \n    if n==1: return 2 \n    if n == 2: return 5 \n    if n==3: return 7 \n    if n == 4: return 11 \n    if n == 5: return 13 \n    if n == 6: return 15 \n    if n == 7: return 17 \n    if n == 8: return 19 \n    if n == 9: return 23 \n    if n == 10: return 25 \n    if n == 11: return 27 \n    if n == 12: return 31 \n    if n == 13: return 33 \n    if n == 14: return 35 \n    if n == 15: return 37 \n    if n == 16: return 41 \n    if n == 17: return 43 \n    if n == 18: return 45 \n    if n == 19: return 47 \n    if n == 20: return 51 \n    if n == 21: return 53 \n    if n == 22: return 55 \n    if n == 23: return 57 \n    if n == 24: return 61 \n    if n == 25: return 63 \n    if n == 26: return 65 \n    if n == 27: return 67 \n    if n == 28: return 71 \n    if n == 29: return 73 \n    if n == 30: return 75 \n    if n == 31: return 77 \n    if n == 32: return 81 \n    if n == 33: return 83 \n    if n == 34: return 85 \n    if n == 35: return 87 \n    if n == 36: return 91 \n    if n == 37: return 93 \n    if n == 38: return 95 \n    if n == 39: return 97 \n    if n == 40: return 101 \n    if n == 41: return 103 \n    if n == 42: return 105 \n    if n == 43: return 107 \n    if n == 44: return 111 \n    if n == 45: return 113 \n    if n == 46: return 115 \n    if n == 47: return 117 \n    if n == 48: return 121 \n    if n == 49: return 123 \n    if n == 50: return 125 \n    if n == 51: return 127 \n    if n == 52: return 131 \n    if n == 53: return 133 \n    if n == 54: return 135 \n    if n == 55: return 137 \n    if n == 56: return 141 \n    if n == 57: return 143 \n    if n == 58: return 145 \n    if n == 59: return 147 \n    if n == 60: return 151 \n    if n == 61: return 153 \n    if n == 62: return 155 \n    if n == 63: return 157 \n    if n == 64: return 161 \n    if n == 65: return 163 \n    if n == 66: return 165 \n    if n == 67: return 167 \n    if n == 68: return 171 \n    if n == 69: return 173 \n    if n == 70: return 175 \n    if n == 71: return 177 \n    if n == 72: return 181 \n    if n == 73: return 183 \n    if n == 74: return 185 \n    if n == 75: return 187 \n    if n == 76: return 191 \n    if n == 77: return 193 \n    if n == 78: return 195 \n    if n == 79: return 197 \n    if n == 80: return 201 \n    if n == 81: return 203 \n    if n == 82: return 205 \n    if n == 83: return 207 \n    if n == 84: return 211 \n    if n == 85: return 213 \n    if n == 86: return 215 \n    if n == 87: return 217 \n    if n == 88: return 221 \n    if n == 89: return 223 \n    if n == 90: return 225 \n    if n == 91: return 227 \n    if n == 92: return 229 \n    if n == 93: return 231 \n    if n == 94: return 233 \n    if n == 95: return 235 \n    if n == 96: return 237 \n    if n == 97: return 241 \n    if n == 98: return 243 \n    if n == 99: return 245 \n    if n == 100: return 247 \n    if n == 101: return 251 \n    if n == 102: return 253 \n    if n == 103: return 255 \n    if n == 104: return 257 \n    if n == 105: return 261 \n    if n == 106: return 263 \n    if n == 107: return 265 \n    if n == 108: return 267 \n    if n == 109: return 271 \n    if n == 110: return 273 \n    if n == 111: return 275 \n    if n == 112: return 277 \n    if n == 113: return 281 \n    if n == 114: return 283 \n    if n == 115: return 285 \n    if n == 116: return 287 \n    if n == 117: return 291 \n    if n == 118: return 293 \n    if n == 119: return 295 \n    if n == 120: return 297 \n    if n == 121: return 301 \n    if n == 122: return 303 \n    if n == 123: return 305 \n    if n == 124: return 307 \n    if n == 125: return 311 \n    if n == 126: return 313 \n    if n == 127: return 315 \n    if n == 128: return 317 \n    if n == 129: return 321 \n    if n == 130: return 323 \n    if n == 131: return 325 \n    if n == 132: return 327 \n    if n == 133: return 331 \n    if n == 134: return 333 \n    if n == 135: return 335 \n    if n == 136: return 337 \n    if n == 137: return 341 \n    if n == 138: return 343 \n    if n == 139: return 345 \n    if n == 140: return347 \n    if n == 141: return 351 \n    if n == 142: return 353 \n    if n == 143: return 355 \n    if n == 144: return 357 \n    if n == 145: return 361 \n    if n == 146: return 363 \n    if n == 147: return 365 \n    if n == 148: return 367 \n    if n == 149: return 369 \n    if n == 150: return 371 \n    if n == 151: return 373 \n    if n == 152: return 375 \n    if n == 153: return 377 \n    if n == 154: return 381 \n    if n == 155: return 383 \n    if n == 156: return 385 \n    if n == 157: return 387 \n    if n == 158: return 391 \n    if n == 159: return 393 \n    if n == 160: return 395 \n    if n == 161: return 398 \n    if n == 162: return 401 \n    if n == 163: return 403 \n    if n == 164: return 405 \n    if n == 165: return 407 \n    if n == 166: return 411 \n    if n == 167: return 413 \n    if n == 168: return 415 \n    if n == 169: return 417 \n    if n == 170: return 421 \n    if n == 171: return 423 \n    if n == 172: return 425 \n    if n == 173: return 427 \n    if n == 174: return 429 \n    if n == 175: return 431 \n    if n == 176: return 433 \n    if n == 177: return 435 \n    if n == 178: return 437 \n    if n == 179: return 441 \n    if n == 180: return 443 \n    if n == 181: return 445 \n    if n == 182: return 447 \n    if n == 183: return 451 \n    if n == 184: return 453 \n    if n == 185: return 455 \n    if n == 186: return 457 \n    if n == 187: return 461 \n    if n == 188: return 463 \n    if n == 189: return 465 \n    if n == 190: return 467 \n    if n == 191: return 471 \n    if n == 192: return 473 \n    if n == 193: return 475 \n    if n == 194: return 477 \n    if n == 195: return 479 \n    if n == 196: return 481 \n    if n == 197: return 483 \n    if n =",
        "num_ids": 2017
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # check if n is even or odd\n    if n % 2 == 0:\n        return n \n    elif n % 2 == 1:\n        # find the midpoint of the hexagon\n        mid = n // 2\n        if mid % 2 == 0:\n            # if mid is even, return the left side of the hexagon\n            return hexagonal_num(mid) + hexagonal_num(mid + 1)\n        else:\n            # if mid is odd, return the midpoint of the hexagon\n            return (3 * n) + (2 * (mid + 1))\n    # if n is odd, return the midpoint of the hexagon\n    else:\n        return (3 * n) + (2 * (n + 1))\n",
        "num_ids": 173
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    h = 0\n    while n > h:\n        h += 1\n    return ",
        "num_ids": 22
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    r,c = n,n\n    while r >= 1:\n        c = r-1\n        r,c = r-1,c\n    return r\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (((n**2) - 1)**2 + n)\n",
        "num_ids": 19
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return n \n    if n == 2: \n        return 9\n    if n % 2 == 1: \n        return 0 \n    # The integer division by two is because we are counting from \n    # zero, so the remainder would be 0 when divided by two \n    x = int(n / 2) \n    # Each hexagonal number is a number of the same form \n    # (h1, h3, h5, h7, h9, h11, h13, h15, h17, h19) \n    return hexagonal_num(x) + hexagonal_num(x + 1) \n",
        "num_ids": 155
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = 0\n    num_nonzero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            num_zero += 1\n        else:\n            num_nonzero += 1\n    \n    return num_zero/len(nums) if len(nums)!= 0 else 0\n",
        "num_ids": 84
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros/non_zeros\n",
        "num_ids": 59
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\ndef one_count(nums):\n    '''\n    Write a function to find the ratio of ones to non-ones in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            count += 1\n    return count/len(nums)\ndef two_count(nums):\n    '''\n    Write a function to find the ratio of 2 to 3 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 2:\n            count += 1\n    return count/len(nums)\ndef three_count(nums):\n    '''\n    Write a function to find the ratio of 3 to 2 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 3:\n            count += 1\n    return count/len(nums)\ndef four_count(nums):\n    '''\n    Write a function to find the ratio of 4 to 3 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 4:\n            count += 1\n    return count/len(nums)\ndef five_count(nums):\n    '''\n    Write a function to find the ratio of 5 to 4 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 5:\n            count += 1\n    return count/len(nums)\ndef six_count(nums):\n    '''\n    Write a function to find the ratio of 6 to 5 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 6:\n            count += 1\n    return count/len(nums)\ndef seven_count(nums):\n    '''\n    Write a function to find the ratio of 7 to 6 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 7:\n            count += 1\n    return count/len(nums)\ndef eight_count(nums):\n    '''\n    Write a function to find the ratio of 8 to 7 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 8:\n            count += 1\n    return count/len(nums)\ndef nine_count(nums):\n    '''\n    Write a function to find the ratio of 9 to 8 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 9:\n            count += 1\n    return count/len(nums)\ndef ten_count(nums):\n    '''\n    Write a function to find the ratio of 10 to 9 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 10:\n            count += 1\n    return count/len(nums)\ndef eleven_count(nums):\n    '''\n    Write a function to find the ratio of 11 to 10 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 11:\n            count += 1\n    return count/len(nums)\ndef twelve_count(nums):\n    '''\n    Write a function to find the ratio of 12 to 11 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 12:\n            count += 1\n    return count/len(nums)\ndef thirteen_count(nums):\n    '''\n    Write a function to find the ratio of 13 to 12 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 13:\n            count += 1\n    return count/len(nums)\ndef fourteen_count(nums):\n    '''\n    Write a function to find the ratio of 14 to 13 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 14:\n            count += 1\n    return count/len(nums)\ndef fifteen_count(nums):\n    '''\n    Write a function to find the ratio of 15 to 14 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 15:\n            count += 1\n    return count/len(nums)\ndef sixteen_count(nums):\n    '''\n    Write a function to find the ratio of 16 to 15 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 16:\n            count += 1\n    return count/len(nums)\ndef seventeen_count(nums):\n    '''\n    Write a function to find the ratio of 17 to 16 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 17:\n            count += 1\n    return count/len(nums)\ndef eighteen_count(nums):\n    '''\n    Write a function to find the ratio of 18 to 17 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 18:\n            count += 1\n    return count/len(nums)\ndef nineteen_count(nums):\n    '''\n    Write a function to find the ratio of 19 to 18 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 19:\n            count += 1\n    return count/len(nums)\ndef twenty_count(nums):\n    '''\n    Write a function to find the ratio of 20 to 19 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 20:\n            count += 1\n    return count/len(nums)\ndef thirty_count(nums):\n    '''\n    Write a function to find the ratio of 30 to 29 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 30:\n            count += 1\n    return count/len(nums)\ndef one_to_two_count(nums):\n    '''\n    Write a function to find the ratio of 1 to 2 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            count += 1\n    return count/len(nums)\ndef three_to_four_count(nums):\n    '''\n    Write a function to find the ratio of 3 to 2 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 3:\n            count += 1\n    return count/len(nums)\ndef five_to_six_count(nums):\n    '''\n    Write a function to find the ratio of 5 to 4 in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 5:\n            count += 1\n    return count/len(nums)\ndef ten_to_eleven_count(nums):\n    '''\n    Write a function to fin",
        "num_ids": 8
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    return zeros/len(nums)\n",
        "num_ids": 40
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]==0:\n            count+=1\n    return count/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nonzero = [num for num in nums if num!= 0]\n    zeroes = nonzero[0]\n",
        "num_ids": 30
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count_sum = 0\n    for element in nums:\n        if element == 0:\n            zero_count_sum += 1\n    return zero_count_sum / len(nums)\n",
        "num_ids": 49
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_zeros = 0\n    zero_count = 0\n    nonzero_count = 0\n    for num in nums:\n        if num == 0:\n            total_zeros += 1\n        elif num!= 0:\n            zero_count += 1\n    print(total_zeros, zero_count)\n    print(nonzero_count / len(nums))\n",
        "num_ids": 91
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_cnt = nums.count(0)\n    nonzero_cnt = len(nums) - nums.count(0)\n    return zero_cnt/nonzero_cnt\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    for i in str(n):\n        sum += int(i)**2\n    if sum == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    import math\n    \n    if (n < 0):\n        print(\"Invalid input\")\n        return\n",
        "num_ids": 26
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n%2 == 0: \n        n = n//2\n    if n == 1: \n        return True\n    else: \n        return False\n",
        "num_ids": 40
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n        if not is_Sum_Of_Powers_Of_Two(n - i):\n            return False\n    \n    return True\n",
        "num_ids": 82
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n==0 or n==1\n",
        "num_ids": 12
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n > 0:\n        return all([is_Sum_Of_Powers_Of_Two(i) for i in range(2, n+1)])\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # brute force\n    def is_Sum_Of_Powers_Of_Two_Brute_Force(n): \n        if n <= 0:\n            return False\n        \n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # recurssion\n    def is_Sum_Of_Powers_Of_Two_Recursive(n):\n        if n <= 0:\n            return False\n        \n        if n % 2 == 0:\n            return is_Sum_Of_Powers_Of_Two(n // 2)\n        \n        return is_Sum_Of_Powers_Of_Two_Recursive(n // 2) or is_Sum_Of_Powers_Of_Two_Recursive(n // 2 + 1)\n        \n    return is_Sum_Of_Powers_Of_Two_Recursive(n)\n",
        "num_ids": 223
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n%2==0:\n            sum = sum + i\n        else:\n            sum = sum\n    if sum == n:\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids": 68
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    if n==1:\n        return False\n    if n%2==0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(n*3)\n",
        "num_ids": 77
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    import math\n    if n <= 0: \n        return False \n    if (n == 1 or n == 2) and n!= 1 and n!= 2: \n        return False \n    if n == 3: \n        return True \n    s = int(math.sqrt(n)) \n    for i in range(s,0,-1): \n        if n % i == 0: \n            return False\n    return True \n",
        "num_ids": 108
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n",
        "num_ids": 14
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Your code here\n    return 2*3.14*r\n",
        "num_ids": 18
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n    \ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function that finds the perimeter of a triangle.\n    '''\n    return (a+b+c)*2\n    \ndef square_area(r):\n    '''\n    Write a function that finds the area of a square.\n    '''\n    return 3.14*r**2\n    \ndef cube_area(r):\n    '''\n    Write a function that finds the area of a cube.\n    '''\n    return 3.14*r**3\n    \ndef round_robin(r):\n    '''\n    Write a function that finds the circumference of a triangle.\n    '''\n    return round(circle_circumference(r))\n    \ndef area_of_circle(r):\n    '''\n    Write a function that finds the area of a circle.\n    '''\n    return circle_area(r)\n    \ndef square_side(r):\n    '''\n    Write a function that finds the length of the sides of a square.\n    '''\n    return round(triangle_perimeter(r,r,r),2)\n    \ndef cube_side(r):\n    '''\n    Write a function that finds the length of the sides of a cube.\n    '''\n    return round(square_side(r),2)\n    \ndef main():\n    '''\n    This program takes the user input for the radius of a circle and outputs\n    a message saying the area of the circle with that radius.\n    '''\n    # get user input\n    user_input = input(\"Enter a radius: \")\n    \n    # use a try/except block\n    try:\n        # convert the user input to an int\n        radius = int(user_input)\n        \n        # write a print statement\n        print(area_of_circle(radius))\n    except:\n        # if the user enters a non-integer value, output a message\n        print(\"You must enter an integer for the radius.\")\n",
        "num_ids": 111
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Hint: You'll need to import math and standard math functions\n    # and the Circle class from the 'Circle' module.\n    from math import pi\n    return 2*pi*r\n",
        "num_ids": 47
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*(r*3.14)\n",
        "num_ids": 14
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # your code goes here\n    circumference = 2 * 3.14159 * r\n    return circumference\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2018
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * (r ** 2) * math.pi\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r ** 2\n",
        "num_ids": 14
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # YOUR CODE HERE\n    return 4 * math.pi * r * r\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    out_list = []\n    for item in test_list:\n        out_list.append(item[0])\n    \n    out_list = [float(item) for item in out_list]\n",
        "num_ids": 50
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Add your code here\n    \n    #Get length of each element in list\n    element_length = len(test_list)\n",
        "num_ids": 33
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n    \ndef unique_element(test_list):\n    '''\n    Write a function that returns the unique element from the list of numbers.\n    '''\n    temp = []\n    for num in test_list:\n        if num not in temp:\n            temp.append(num)\n    return temp[0]\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    set_of_numbers = set()\n    for elements in test_list:\n        for element in elements:\n            if isinstance(element, list):\n                for e in element:\n                    set_of_numbers.add(e)\n            else:\n                set_of_numbers.add(element)\n    return set_of_numbers\n",
        "num_ids": 85
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for element in test_list:\n        for e in element:\n            flatten_list.append(e)\n    return flatten_list\n",
        "num_ids": 44
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    \n    for item in test_list:\n        if isinstance(item, list):\n            singly_list.extend(item)\n        else:\n            singly_list.append(item)\n    \n    singly_list = list(set(singly_list))\n    \n    return singly_list\n    ",
        "num_ids": 86
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list = new_list + i\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [element for sublist in test_list for element in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(elements):\n        flat_list = []\n        for item in elements:\n            for new_item in item:\n                flat_list.append(new_item)\n        return flat_list\n    test_list = flatten(test_list)\n    return test_list\n",
        "num_ids": 71
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # YOUR CODE HERE\n    a = []\n    for i in range(len(test_list)):\n        a.extend(test_list[i])\n    return a",
        "num_ids": 43
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    i = 0\n    j = n-1\n",
        "num_ids": 23
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Time complexity: O(n^2)\n    # Space Complexity: O(1)\n    \n    # If list is empty, return nothing\n    # Else, pop the smallest item and insert it at the beginning\n    if len(nums) == 0:\n        return None\n    \n    # Sort the first half of the list\n    first_half = nums[:len(nums)//2]\n    \n    # Sort the second half of the list\n    second_half = nums[len(nums)//2:]\n    \n    # Combine the two lists\n    pancake_sort(first_half)\n    pancake_sort(second_half)\n    \n    # Compare the two lists\n    i = 0\n    j = 0\n    \n    while i < len(first_half) and j < len(second_half):\n        if first_half[i] < second_half[j]:\n            nums[i+len(first_half)] = first_half[i]\n            i += 1\n        else:\n            nums[i+len(second_half)] = second_half[j]\n            j += 1\n    \n    # Replace the first half with the second half\n    while i < len(first_half):\n        nums[i] = first_half[i]\n        i += 1\n    \n    while j < len(second_half):\n        nums[j] = second_half[j]\n        j += 1\n    \n    return nums",
        "num_ids": 351
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    last = length - 1\n    for i in range(length):\n        while nums[last] > nums[i] and last >= 0:\n            nums[last], nums[i] = nums[i], nums[last]\n            last -= 1\n    return num",
        "num_ids": 77
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Take the first element as the smallest\n    n = len(nums)\n    if n == 1:\n        return nums\n    \n    i = n - 1\n",
        "num_ids": 42
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums, start, end):\n        p = start\n        while p <= end:\n            if nums[p] == p:\n                p += 1\n            else:\n                nums[p], nums[p-1] = nums[p-1], nums[p]\n                p += 1\n        return p\n",
        "num_ids": 82
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n",
        "num_ids": 18
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_sort = []\n    length = len(nums)\n    i = 0\n    j = 0\n    while (i < length):\n        if j == length:\n            pancake_sort.append(nums[i])\n            break\n        if (nums[j] < nums[i]):\n            pancake_sort.append(nums[i])\n            i = i + 1\n        else:\n            pancake_sort.append(nums[j])\n            j = j + 1\n    return pancake_sort\n",
        "num_ids": 134
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_recursive(nums, i, j):\n        if i >= j:\n            return\n",
        "num_ids": 27
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, -1, -1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "num_ids": 89
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n",
        "num_ids": 11
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list3[i]==list3[j]:\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(0,3):\n        if list1[i] == list2[i]:\n            count1 += 1\n        elif list1[i] == list3[i]:\n            count2 += 1\n        else:\n            count3 += 1\n",
        "num_ids": 82
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same = 0\n    diff = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list3[i] == list2[i]:\n            same += 1\n        elif list1[i] == list2[i] or list1[i] == list3[i]:\n            diff += 1\n    if same > diff:\n        return True\n    else:\n        return False\ndef count_same(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of a given list.\n    '''\n    same = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            same += 1\n    if same > len(list2):\n        return True\n    else:\n        return False\ndef contains_duplicate(list1):\n    '''\n    Write a function to determine whether or not a given list contains duplicate items.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list1[i + 1:]:\n            return True\n    return False\ndef count_unique(list1):\n    '''\n    Write a function to count number of distinct items in a given list.\n    '''\n    unique = 0\n    for i in range(len(list1)):\n        if list1[i] not in list1[i + 1:]:\n            unique += 1\n    return unique\ndef last_index(list1):\n    '''\n    Write a function to return the last index of the given list.\n    '''\n    i = len(list1)\n    while i > 0:\n        i -= 1\n        if list1[i] > list1[i - 1]:\n            return i\n    return -1\ndef count_negative(list1):\n    '''\n    Write a function to count number of negative items in a given list.\n    '''\n    neg = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg += 1\n    return neg\ndef add_item(list1,item):\n    '''\n    Add an item to a given list.\n    '''\n    if item in list1:\n        list1.remove(item)\n        list1.insert(0,item)\n    else:\n        list1.append(item)\n        list1.insert(0,item)\ndef insert_at_index(list1,item,index):\n    '''\n    Insert an item at given index in a given list.\n    '''\n    if index > len(list1):\n        return\n    if item in list1:\n        list1.remove(item)\n        list1.insert(index,item)\n    else:\n        list1.insert(index,item)\n        list1.insert(index,item)\ndef remove_item(list1,item):\n    '''\n    Remove an item from a given list.\n    '''\n    if item in list1:\n        list1.remove(item)\n    else:\n        print(\"Error\")\ndef remove_duplicate_item(list1):\n    '''\n    Remove all items that are duplicates from a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list1[i + 1:]:\n            list1.remove(list1[i])\n    return list1\ndef remove_item_at_index(list1,item,index):\n    '''\n    Remove an item at given index in a given list.\n    '''\n    if index > len(list1):\n        return\n    if item in list1:\n        list1.remove(item)\n        list1.remove(item)\n    else:\n        print(\"Error\")\ndef remove_item_at_index(list1,item,index):\n    '''\n    Remove an item at given index in a given list.\n    '''\n    if index > len(list1):\n        return\n    if item in list1:\n        list1.remove(item)\n        list1.remove(item)\n    else:\n        print(\"Error\")\ndef remove_duplicate_item_at_index(list1):\n    '''\n    Remove all items that are duplicates from a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list1[i + 1:]:\n            list1.remove(list1[i])\n    return list1\ndef replace_item(list1,item,new_item):\n    '''\n    Replace an item in a given list.\n    '''\n    if item in list1:\n        list1[list1.index(item)] = new_item\n    else:\n        print(\"Error\")\ndef replace_item_at_index(list1,item,index,new_item):\n    '''\n    Replace an item at given index in a given list.\n    '''\n    if index > len(list1):\n        return\n    if item in list1:\n        list1[list1.index(item)] = new_item\n    else:\n        print(\"Error\")\ndef sort_list(list1):\n    '''\n    Sort a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if list1[i] > list1[j]:\n                list1[i],list1[j] = list1[j],list1[i]\n    return list1\ndef create_list(num):\n    '''\n    Generate a list of the given size.\n    '''\n    list1 = []\n    for i in range(num):\n        list1.append(random.randint(-100,100))\n    return list1\ndef create_list_with_unique(num):\n    '''\n    Generate a list of the given size.\n    '''\n    list1 = []\n    for i in range(num):\n        if count_unique(list1) == 0:\n            list1.append(random.randint(-100,100))\n    return list1\ndef generate_random_list_with_duplicate(num):\n    '''\n    Generate a list of the given size.\n    '''\n    list1 = []\n    for i in range(num):\n        if count_unique(list1) > 0:\n            list1.append(random.randint(-100,100))\n    return list1\ndef generate_random_list_with_duplicate_and_negative(num):\n    '''\n    Generate a list of the given size.\n    '''\n    list1 = []\n    for i in range(num):\n        if count_negative(list1) > 0:\n            list1.append(random.randint(-100,100))\n    return list1\ndef find_smallest_negative(list1):\n    '''\n    Find the smallest negative item in a given list.\n    '''\n    min = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < min:\n            min = list1[i]\n    return min\ndef find_smallest_positive(list1):\n    '''\n    Find the smallest positive item in a given list.\n    '''\n    min = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > min:\n            min = list1[i]\n    return min\ndef is_ordered(list1):\n    '''\n    Check if a given list is ordered.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\ndef is_ordered_with_negative(list1):\n    '''\n    Check if a given list is ordered with negative numbers.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] < list1[i + 1]:\n            return False\n    return True\ndef find_first_element(list1):\n    '''\n    Find the first element of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    if len(list1) =",
        "num_ids": 25
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #creating a new empty list with the same length of the first list\n    new_list1 = []\n    new_list2 = []\n    new_list3 = []\n    #create a new empty list with the same length of the second list\n    new_list4 = []\n    #create a new empty list with the same length of the third list\n    new_list5 = []\n    #create a for loop to iterate through each list\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                #if the three elements in the list are identical in the same position of the three lists\n                if list1[i] == list2[j] == list3[k]:\n                    new_list1.append(list1[i])\n                    new_list2.append(list2[j])\n                    new_list3.append(list3[k])\n    #create a for loop to iterate through each list\n    for i in range(len(new_list1)):\n        for j in range(len(new_list2)):\n            for k in range(len(new_list3)):\n                #if the three elements in the list are identical in the same position of the three lists\n                if new_list1[i] == new_list2[j] == new_list3[k]:\n                    new_list5.append(new_list1[i])\n                    new_list4.append(new_list2[j])\n                    new_list3.append(new_list3[k])\n    return len(new_list4) - len(new_list5)\n",
        "num_ids": 395
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if list1==list2==list3:\n        return(len(list1))\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    number_of_items = 0\n    list_of_items = []\n    while list1!= []:\n        first_item = list1.pop(0)\n        while list2!= []:\n            second_item = list2.pop(0)\n            while list3!= []:\n                third_item = list3.pop(0)\n                if first_item == second_item and second_item == third_item:\n                    number_of_items += 1\n                if second_item == third_item:\n                    list_of_items.append(second_item)\n                if third_item == second_item:\n                    list_of_items.append(third_item)\n    print(number_of_items)\n    return list_of_items\n",
        "num_ids": 182
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    num_samepair = 0\n    if len(list1)!= len(list2):\n        print('List length must be same')\n    elif len(list3)!= len(list1):\n        print('List length must be same')\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i] == list2[j] and i == j:\n                    num_samepair += 1\n                    \n    return num_samepair\n",
        "num_ids": 127
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    list1_count = 0\n    list2_count = 0\n    list3_count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i]:\n            list1_count = list1_count + 1\n        elif list2[i] == list3[i]:\n            list2_count = list2_count + 1\n        else:\n            list3_count = list3_count + 1\n    if list1_count == list2_count == list3_count == 3:\n        count = count + 1\n    else:\n        count = count\n    return count",
        "num_ids": 157
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count1=0\n    count2=0\n    count3=0\n    for i in list1:\n        if i in list2:\n            count1+=1\n    for i in list2:\n        if i in list3:\n            count2+=1\n    for i in list3:\n        if i in list1:\n            count3+=1\n    return count1,count2,count3\n",
        "num_ids": 97
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for index in range(len(list1)):\n        if list1[index]==list2[index] and list2[index]==list3[index]:\n            count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #tuple is immutable so we can do the conversion\n    tuple = tuple(map(int,Input))\n    \n    #declare a list of tuples\n    list = []\n    #tuple is not empty so we will check its length\n    if len(tuple) > 0:\n        #loop through each element in tuple\n        for i in range(len(tuple)):\n            #append all elements to a list\n            list.append(tuple[i])\n        #print the list\n        print(len(list),list)\n    else:\n        print(tuple, \"is empty\")\n",
        "num_ids": 143
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input)!= tuple:\n        return 0\n    else:\n        lst = list(Input)\n        return len(lst)\n        \ndef find_strings(Input): \n    '''\n    Write a function to find number of strings present in the given tuple.\n    '''\n    if type(Input)!= tuple:\n        return 0\n    else:\n        st = list(Input)\n        return len(st)\n        \ndef find_matches(Input, search): \n    '''\n    Write a function to find number of matches of a given string in a tuple.\n    '''\n    if type(Input)!= tuple:\n        return 0\n    else:\n        st = list(Input)\n        matches = 0\n        for i in range(len(st)):\n            if (search[0] == st[i]) or (search[0] in st[i]):\n                matches += 1\n        return matches\n        \ndef build_graph(Input):\n    '''\n    Write a function to build a graph from a given list of tuples.\n    '''\n    if type(Input)!= list:\n        return False\n    else:\n        graph = {}\n        for i in range(len(Input)):\n            if Input[i][1] not in graph.keys():\n                graph[Input[i][1]] = [Input[i][0]]\n            else:\n                graph[Input[i][1]].append(Input[i][0])\n        return graph\n        \ndef count_matches(Input, search): \n    '''\n    Write a function to count the number of matches of a given string in a given tuple.\n    '''\n    if type(Input)!= tuple:\n        return 0\n    else:\n        matches = 0\n        for i in range(len(Input)):\n            if (search[0] in Input[i][0]) and (search[1] in Input[i][0]):\n                matches += 1\n        return matches\n        \ndef display_graph(graph, search):\n    '''\n    Write a function to display a given graph.\n    '''\n    if type(graph)!= dict:\n        return False\n    else:\n        for i in range(len(graph)):\n            print(graph.get(i))\n            for j in graph.get(i):\n                print(j)\n                \ndef search(search_string, search_char):\n    '''\n    Write a function to check if a given string matches a given string or not.\n    '''\n    if type(search_string)!= str:\n        return False\n    elif type(search_char)!= str:\n        return False\n    else:\n        for i in search_string:\n            if i == search_char:\n                return True\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    found_index = 0\n    for index,value in enumerate(Input):\n        if value == '#':\n            found_index = index\n    return found_index\n",
        "num_ids": 44
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) < 1:\n        return 0\n    \n    my_list = []\n    for i in range(len(Input)):\n        my_list.append(Input[i][2])\n    \n    return len(set(my_list))\n",
        "num_ids": 64
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_of_lists = 0\n    for i in range(len(Input)):\n        if Input[i][0] == \"L\":\n            num_of_lists += 1\n    return num_of_lists\n",
        "num_ids": 53
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    len_list = 0\n    for item in Input:\n        if type(item) == list:\n            len_list += 1\n    \n    return len_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2016
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    temp_list = []\n    for value in range(0, len(Input)):\n        if(Input[value][0] == value):\n            temp_list.append(value)\n    return len(temp_list)\n",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    count = 0\n",
        "num_ids": 12
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l=0\n    for i in Input:\n        if i==[] or i[0]!=i[1]:\n            l=l+1\n    return l\n",
        "num_ids": 42
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr[0], arr[1]) - min(arr[0], arr[1])\n",
        "num_ids": 26
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max = 0\n    for i in arr:\n        if i > Max:\n            Max = i\n    return Max\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    length = len(arr)\n    i = 0\n    j = 0\n    max_diff = -1\n    while i<length and j<length:\n        if arr[i] < arr[j]:\n            max_diff = arr[i]\n            i += 1\n        else:\n            max_diff = arr[j]\n            j += 1\n    return max_diff\n",
        "num_ids": 91
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max=arr[0]\n    for i in range(1,len(arr)): \n        if arr[i] > Max: \n            Max=arr[i] \n    return Max\n",
        "num_ids": 49
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i] - arr[j]) for i in range(len(arr)) for j in range(i + 1, len(arr)))\n",
        "num_ids": 40
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    abs_max = 0\n    for i in arr:\n        abs_max = abs(i-arr[0])\n    return abs_max\n",
        "num_ids": 36
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max_Diff = arr[0] - arr[1] \n    for i in range(1,len(arr)): \n        if(arr[i] > Max_Diff): \n            Max_Diff = arr[i] \n    return Max_Diff \n",
        "num_ids": 65
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum = arr[0] - arr[1]\n    for i in range(len(arr)-2):\n        maximum = max(maximum, arr[i+2] - arr[i+1])\n    return maximum\n",
        "num_ids": 53
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 1:\n        return abs(arr[0] - arr[1])\n    elif len(arr) == 2:\n        return abs(arr[0] - arr[1]) + abs(arr[1] - arr[0])\n    else:\n        abs_diff = 0\n        for i in range(len(arr)):\n            abs_diff = max(abs_diff, abs(arr[i] - arr[i-1]))\n        return abs_diff\n",
        "num_ids": 118
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(a, b + 1):\n        for j in range(a, b + 1):\n            if(i + j == n):\n                return (i, j)\n    return None\n",
        "num_ids": 50
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = (b // a) * n\n    y = (b % a) * n\n    if x!= 0:\n        x = (x // a) * a\n        y = y + (x % a)\n    if y!= 0:\n        y = (y // a) * a\n    return x, y\n    \n    \ndef find_solution_recursive(a, b, n):\n    '''\n    Write a recursive function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    x = (b // a) * n\n    y = (b % a) * n\n    if x!= 0:\n        x = (x // a) * a\n        y = y + (x % a)\n    if y!= 0:\n        y = (y // a) * a\n    return x, y\n    \n    \ndef divide_numbers(nums):\n    '''\n    Given an array nums, write a function that returns the first half of nums and the second half of nums. The order of the numbers in the resulting arrays should be the same as in the input array.\n",
        "num_ids": 48
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # trivial cases\n    if a==0 and b==0:\n        return None\n    # find two solutions\n    if a==0 or b==0:\n        return None\n    if a==1 and b==1:\n        return (1,1)\n    # find two solutions\n    if a==1:\n        return (1,1)\n    if b==1:\n        return (1,1)\n    # find two solutions\n    if a==b:\n        return (1,1)\n    # find all possible solutions\n    x = find_solution(a-1, b, n)\n    y = find_solution(a, b-1, n)\n    if x is None or y is None:\n        return None\n    return x+y\n",
        "num_ids": 181
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    s = \"\"\n    if b == 0:\n        return None\n    for i in range(n):\n        s += str(a) + \"-\" + str(b) + \"x\" + str(i) + \"=\" + str(a*b) + \"\\n\"\n    return s[:-1]\n",
        "num_ids": 74
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    if a == b:\n        return None\n    else:\n        x = a\n        y = b\n        for i in range(n):\n            if x[i] == 0:\n                x[i] = -1\n            elif y[i] == 0:\n                y[i] = -1\n            else:\n                if y[i] > 0:\n                    if x[i] < 0:\n                        return None\n                    x[i] = x[i] + y[i]\n                    y[i] = -y[i]\n                elif y[i] < 0:\n                    if x[i] > 0:\n                        return None\n                    x[i] = x[i] - y[i]\n                    y[i] = -y[i]\n        return x, y\n",
        "num_ids": 196
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (b - a) % 2 == 1:\n        solution = (a + b) // 2\n    else:\n        solution = a + b\n    return solution\n",
        "num_ids": 43
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    # if a is equal to 0, then return None\n    if a == 0:\n        return (0, 0)\n    if b == 0:\n        return (0, 0)\n    \n    if a == n:\n        return (n, b)\n    \n    # find the best solution\n    x, y = None, None\n    # pick a random number\n    if a > b:\n        x, y = find_solution(a, b, n // 2)\n    else:\n        x, y = find_solution(b, a, n // 2)\n    \n    # add x to solution and return\n    return (x, y + n // 2)\n",
        "num_ids": 170
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find if the set of integers is a subset of a set of integers, or if x,y = (a,b)\n    x, y = find_x_y(a,b, n)\n    if x == None and y == None:\n        print(\"No solution\")\n    elif x == None:\n        print(n, \"th integer is: \", a)\n    elif y == None:\n        print(n, \"th integer is: \", b)\n    else:\n        print(x, y)\n",
        "num_ids": 123
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # x = None, y = None, if none exists\n    if a == b:\n        return x, y\n    # x = a - x, y = b - y\n    elif a == b - 1:\n        return a, b\n    # x = x - y, if possible\n    else:\n        if a < 0:\n            return None\n        x, y = find_solution(a - x, b, n)\n        if x:\n            return x, y\n    # x = x - y, if possible\n    return find_solution(a - x, b, n)\n",
        "num_ids": 142
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return a[0], n\n    elif b < 0:\n        return None\n    elif a[0] + b < n:\n        return find_solution(a[1:], b, n)\n    else:\n        return find_solution(a[1:], b // a[0], n)\n",
        "num_ids": 84
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 == None or list2 == None:\n        return None\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        list1.remove(x)\n    return list1\n",
        "num_ids": 24
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n",
        "num_ids": 16
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # delete all elements in list1\n    list1 = [item for item in list1 if item not in list2]\n    \n    # delete all elements in list2\n    list2 = [item for item in list2 if item not in list1]\n    \n    return list1, list2\n    \n    \n    \n",
        "num_ids": 78
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n    if len(list1)!= len(list2):\n        print(\"Data cannot be sorted\")\n    else:\n        remove = 0\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                remove = remove+1\n            else:\n                print(\"Element not found\")\n        if remove == 0:\n            print(\"Data cannot be sorted\")\n        else:\n            list1.pop(remove)\n            list2.pop(remove)\n            print(\"Indexes of elements removed\",remove)\n    return list1,list2\n",
        "num_ids": 152
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list2.remove(j)\n    return list2\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n",
        "num_ids": 18
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    #Define empty list\n    result = []\n    \n    #Loop through both lists to remove each element\n    for i in range(0, len(list1)):\n        for j in range(0, len(list2)):\n            if list1[i] == list2[j]:\n                result.append(list1[i])\n                \n    #Return result\n    return result\n    ",
        "num_ids": 96
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    remove_indices = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                remove_indices.append(i)\n                break\n    return remove_indices\n    \nlist1 = [1,2,3,4,5,6]\nlist2 = [1,2,3,4,5,6,7,8,9,10]\n",
        "num_ids": 135
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (n-i)\n        \n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2 * i) + sum_series(n - 4 * i)\n",
        "num_ids": 28
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_n = 0\n    for i in range(n//2 + 1):\n        sum_n += n-i\n    return sum_n\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #!\n    def sum(n):\n        sum = 0\n        for i in range(n, 0, -2):\n            sum += i\n        return sum\n    \n    #!\n    def sum_max(n):\n        sum = 0\n        for i in range(n, 0, -2):\n            sum += i\n        return sum\n    \n    #!\n    def sum_sum(n):\n        sum = 0\n        for i in range(n, 0, -2):\n            sum += sum(i)\n        return sum\n    \n    #!\n    def sum_all(n):\n        sum = 0\n        for i in range(n, 0, -2):\n            sum += sum_max(i)\n        return sum\n    \n    #!\n    def sum_min(n):\n        sum = 0\n        for i in range(n, 0, -2):\n            sum += sum_sum(i)\n        return sum\n    \n    #!\n    def is_even(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    \n    #!\n    def is_odd(n):\n        if n % 2!= 0:\n            return True\n        else:\n            return False\n    \n    #!\n    def is_prime(n):\n        if n == 1:\n            return False\n        elif n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def not_prime(n):\n        if is_prime(n) == True:\n            return False\n        elif n % 2 == 0:\n            return True\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum(n):\n        if is_prime_sum(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum_no_x(n):\n        if is_prime_sum(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum_all(n):\n        if is_prime_sum_all(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum_min(n):\n        if is_prime_sum_all(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def prime_sum_sum(n):\n        if is_prime_sum(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum_no_sum(n):\n        if is_prime_sum(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum_no_min(n):\n        if is_prime_sum_no_sum(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def not_prime_sum(n):\n        if is_prime_sum(n) == False:\n            return False\n        elif n % 2 == 0:\n            return True\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def not_prime_sum_all(n):\n        if is_prime_sum_all(n) == False:\n            return False\n        elif n % 2 == 0:\n            return True\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum_min_no_x(n):\n        if is_prime_sum(n) == True:\n            return False\n        elif n % 2 == 0:\n            return True\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum_min_no_sum(n):\n        if is_prime_sum_no_sum(n) == True:\n            return False\n        elif n % 2 == 0:\n            return True\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum_min_no_min(n):\n        if is_prime_sum_no_min(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def prime_sum_sum_no_x(n):\n        if is_prime_sum_all(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def prime_sum_sum_no_sum(n):\n        if is_prime_sum_no_sum(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def prime_sum_sum_no_min(n):\n        if is_prime_sum_no_min(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def is_prime_sum_no_min_no_x(n):\n        if is_prime_sum_no_min(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def prime_sum_sum_no_min_no_sum(n):\n        if is_prime_sum_no_min(n) == True:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    return False\n            return True\n    \n    #!\n    def prime_su",
        "num_ids": 1986
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n\n    else:\n        return n + (n-2) + (n-4)\n",
        "num_ids": 45
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n):\n        s += (i+1) * i\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n, 2):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n + 1):\n        s += i\n    return s\n",
        "num_ids": 27
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i + (n-i)//2)\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    i = n // 2\n    s = 0\n    while i > 0:\n        s += i\n        i -= 1\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # given the parameters (s, l), calculate the area of the polygon\n    area = pi * (s * (s-l)/2)\n    \n    return area\n",
        "num_ids": 44
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (l*(s**2))/4\n    print(f\"The area of a regular polygon of length {l} and sides with sides {s} is\", a)\n    return a\n",
        "num_ids": 49
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(s):\n        area += l * tan(i/s)\n",
        "num_ids": 28
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Returns the area of the polygon.\n    return (s*l)/2\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l == 0:\n        return 0\n    else:\n        p = ((l ** 2) + (2 * s ** 2)) ** 0.5\n        return p\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = (2 * (s**2)) / (l**2)\n    return A\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((pi * (s ** 2)) / 2) * l\n",
        "num_ids": 18
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    return 1/4 * s * l\n",
        "num_ids": 14
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = len(s)\n    a = n * (n - 1) / 2\n    return n * n * (s[0] * (s[1] - s[0]) + l * l / 2 + s[-1] * s[0] * (l - 1) / 2)\n",
        "num_ids": 72
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # initialize the result\n    res = 0\n",
        "num_ids": 13
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    # Determine the divisors \n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n/i))\n    # Compare the two numbers \n    # the first 2 numbers are the same and it's not divisors \n    # if sum of divisors is even then it's not divisors\n    # if it's not divisors then it's not divisors\n    return (not(sum(divisors) % 2) and not(sum(divisors) in divisors))\n",
        "num_ids": 174
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, n+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_gcd(a, b):\n    '''\n    Check if gcd(a, b) is gcd(a, b)\n    '''\n    if a % b == 0:\n        return b\n    else:\n        return is_gcd(b, a % b)\ndef is_lcm(a, b):\n    '''\n    Check if LCM(a, b) is the lowest common multiple of a and b\n    '''\n    return a*b // math.gcd(a, b)\n",
        "num_ids": 18
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # 2. base case\n    if n == 2:\n        return n == 1\n    # 3. recursive case\n    if n < 2:\n        return False\n    \n    # recursive case\n    if n % 2 == 0:\n        return div_sum(n/2)\n    \n    # base case\n    else:\n        return div_sum(n-1)\n    \n    \n    # Time complexity : O(n)\n    # Space Complexity : O(1)\n    \n    #Time Complexity : O(n)\n    #Space Complexity : O(n)\n    \n    ",
        "num_ids": 141
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Read numbers from user\n    x = int(input(\"Enter the first number: \"))\n    y = int(input(\"Enter the second number: \"))\n    # Calculate the divisors\n    div_1 = 0\n    div_2 = 0\n    for i in range(1, x+1):\n        if (x % i == 0) and (y % i == 0):\n            div_1 += 1\n    for i in range(1, y+1):\n        if (y % i == 0) and (x % i == 0):\n            div_2 += 1\n    if div_1 == div_2:\n        return True\n    else:\n        return False\n",
        "num_ids": 161
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0 or n==1:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        for i in range(n//2):\n            if n%i==0:\n                return False\n        return True\ndef calc(n):\n    '''\n    Write a function to calculate the factorial of a given number using recursion.\n    '''\n    if n==1:\n        return 1\n    elif n==0:\n        return 0\n    else:\n        return n * calc(n-1)\n",
        "num_ids": 40
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = 1\n    while div <= n:\n        if n%div == 0:\n            return False\n        div+=1\n    return True\ndef isprime(n):\n    '''\n    Write a function to check if a number is prime. Note that a number is only evenly divisible by 1 and itself.\n    '''\n    if n == 2 or n == 3: \n        return True\n    if n%2 == 0 or n%3 == 0: \n        return False\n    if n % 8 == 7: \n        return False\n    i = 5\n    while i*i <= n:\n        if n%i == 0: \n            return False\n        i+=6\n    return True\ndef is_sum_div(n1, n2): \n    '''\n    Return True if n1 + n2 is a sum of divisors. \n    '''\n    d = 0\n    while n2!= 0: \n        n1, n2 = n2, n1%n2\n        d+=1\n    return d == n1\ndef fibo_memo(n):\n    '''\n    Write a function to compute the nth fibonacci number. \n    '''\n    if n <= 2: \n        return n\n    if n <= 3: \n        return n\n    else: \n        return fibo_memo(n-1) + fibo_memo(n-2)\ndef fibo_memo_rec(n):\n    '''\n    Use the fibo_memo function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    if n == 4: \n        return 3\n    return fibo_memo(n-1) + fibo_memo(n-2) + fibo_memo(n-3)\ndef fibo_memo_d(n):\n    '''\n    Use the fibo_memo function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_memo(n-1) + fibo_memo(n-2) + fibo_memo(n-3)\ndef fibo(n):\n    '''\n    Write a function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo(n-1) + fibo(n-2) + fibo(n-3)\ndef memo(n):\n    '''\n    Use a memo dict to cache the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    d = {1:1, 2:2}\n    if n in d: \n        return d[n]\n    d[n] = memo(n-1) + memo(n-2) + memo(n-3)\n    return d[n]\ndef memo_rec(n):\n    '''\n    Use the memo dict to cache the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return memo_rec(n-1) + memo_rec(n-2) + memo_rec(n-3)\ndef fibo_rec(n):\n    '''\n    Use the fibo_rec function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_rec(n-1) + fibo_rec(n-2) + fibo_rec(n-3)\ndef fibo_d(n):\n    '''\n    Use the fibo_d function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_d(n-1) + fibo_d(n-2) + fibo_d(n-3)\ndef fibo_rec_d(n):\n    '''\n    Use the fibo_rec function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_rec_d(n-1) + fibo_rec_d(n-2) + fibo_rec_d(n-3)\ndef fib(n):\n    '''\n    Use the fibo function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fib(n-1) + fib(n-2) + fib(n-3)\ndef fibo_rec(n):\n    '''\n    Use the fibo_rec function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_rec(n-1) + fibo_rec(n-2) + fibo_rec(n-3)\ndef fibo_d(n):\n    '''\n    Use the fibo_d function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_d(n-1) + fibo_d(n-2) + fibo_d(n-3)\ndef fibo_rec_d(n):\n    '''\n    Use the fibo_rec function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_rec_d(n-1) + fibo_rec_d(n-2) + fibo_rec_d(n-3)\ndef fibo_d(n):\n    '''\n    Use the fibo_d function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_d(n-1) + fibo_d(n-2) + fibo_d(n-3)\ndef fibo_rec_d(n):\n    '''\n    Use the fibo_rec function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_rec_d(n-1) + fibo_rec_d(n-2) + fibo_rec_d(n-3)\ndef fibo_d(n):\n    '''\n    Use the fibo_d function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_d(n-1) + fibo_d(n-2) + fibo_d(n-3)\ndef fibo_rec_d(n):\n    '''\n    Use the fibo_rec function to compute the nth fibonacci number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return fibo_rec_d(n-1) + fibo_rec_d(n-2) + fibo_rec_d(n-3)\ndef lucas(n):\n    '''\n    Write a function to compute the nth lucas number. \n    '''\n    if n == 1 or n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return lucas(n-1) + luca",
        "num_ids": 42
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_s = 0\n    for i in range(1, n): \n        if n % i == 0: \n            div_s += 1 \n    return div_s \n",
        "num_ids": 46
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            result += i\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return str(int(n/i)) + \"(\" + str(i) + \")\"\n        return str(int(n/2)) + \"(\" + str(2) + \")\"\ndef alph(n):\n    '''\n    Calculates the arithmetic modulo of n\n    '''\n    mod = n % 10\n    return mod\n",
        "num_ids": 13
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = math.sqrt(n)\n    for i in range(1, x + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # define count dictionary\n    count = {}\n    # iterate over the string\n    for char in str1:\n        # if char is present\n        if char in count:\n            # increment count\n            count[char] += 1\n        # if char is not present\n        else:\n            # define the count\n            count[char] = 1\n    # return count dictionary\n    return count\n",
        "num_ids": 92
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # TODO: Create a function that counts the number of characters in a string that occur at the same position as in the English alphabet.\n    if len(str1) < len(alphabet):\n        raise ValueError('Invalid String')\n",
        "num_ids": 55
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet_dict = dict([(x.upper(), 1) for x in list(string.ascii_lowercase)])\n    result = 0\n    for char in str1:\n        if char in alphabet_dict:\n            result += alphabet_dict[char]\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    def count_char_position_2(str1): \n        # count the number of characters at the same position in the string as in the English alphabet \n        count = 0\n        for i in range(len(str1)):\n            if str1[i].lower() == str1[i].lower():\n                count += 1\n        return count\n    return count_char_position_2(str1)\n",
        "num_ids": 97
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return str1.count('A') + str1.count('B') + str1.count('C') + str1.count('D') + str1.count('E') + str1.count('F') + str1.count('G') + str1.count('H') + str1.count('I') + str1.count('J') + str1.count('K') + str1.count('L') + str1.count('M') + str1.count('N') + str1.count('O') + str1.count('P') + str1.count('Q') + str1.count('R') + str1.count('S') + str1.count('T') + str1.count('U') + str1.count('V') + str1.count('W') + str1.count('X') + str1.count('Y') + str1.count('Z')\n    \ndef my_count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return str1.count('a') + str1.count('b') + str1.count('c') + str1.count('d') + str1.count('e') + str1.count('f') + str1.count('g') + str1.count('h') + str1.count('i') + str1.count('j') + str1.count('k') + str1.count('l') + str1.count('m') + str1.count('n') + str1.count('o') + str1.count('p') + str1.count('q') + str1.count('r') + str1.count('s') + str1.count('t') + str1.count('u') + str1.count('v') + str1.count('w') + str1.count('x') + str1.count('y') + str1.count('z')\n",
        "num_ids": 212
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = {}\n    for char in str1:\n        char_position[char] = char_position.get(char, 0) + 1\n    return char_position\n",
        "num_ids": 44
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Step 1: Initialize an empty string to save each character's position\n    # Step 2: Initialize an empty string to store the number of characters in the string\n    # Step 3: Loop over the string, increment the number of characters by 1\n    # Step 4: Return the number of characters in the string\n    # Step 5: When the loop ends, print the number of characters in the string\n    # Step 6: Use a try/except clause to catch the error\n    # Step 7: Try and except block that catches the error\n    # Step 8: Try and except block that catches the error\n    # Step 9: When the error is caught, print the number of characters in the string\n    # Step 10: Return the number of characters in the string\n    \n    # Write your code here\n    n = len(str1)\n    total_char = 0\n    for i in range(n):\n        try:\n            position = str1.index(str1[i], i)\n            total_char += 1\n        except:\n            pass\n    return total_char\n",
        "num_ids": 242
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import math\n    counter = 0\n    str1 = str1.lower()\n    \n    for x in str1: \n        if x in alphabet: \n            counter += 1\n",
        "num_ids": 45
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize the count\n    count = 0\n    # loop through the string\n    for i in str1:\n        # if the char exists in alphabet, add 1\n        if i in alphabet:\n            count += 1\n    # return the count\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    odd = 0\n    for i in A:\n        if (i & 1) == 0:\n            even += 1\n        else:\n            odd += 1\n    return(int(even))\n",
        "num_ids": 52
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    a=0\n    for i in A:\n        for j in A:\n            if i%j==0:\n                a+=1\n    return a\n",
        "num_ids": 39
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if A[i] == A[j] and A[i] & 1 == 0:\n                    even += 1\n                elif A[i] == A[j] and A[i] & 1!= 0:\n                    odd += 1\n    print(f\"The number of pairs of integers that xor to an even number is {even} and {odd}\")\n    return\n",
        "num_ids": 131
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n",
        "num_ids": 10
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A: \n        for j in A: \n            if i ^ j == 0:\n                count += 1\n    return count \n",
        "num_ids": 42
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for index, value in enumerate(A):\n        if value % 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)):\n            if(A[i]==A[j]):\n                even_pair += 1\n    return even_pair \n",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if(A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    odd = 0\n    for i in range(0, len(A)):\n        if (A[i] % 2) == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n",
        "num_ids": 60
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs_xor = 0\n    for element in A:\n        if element ^ 0:\n            pairs_xor += 1\n    return pairs_xor\n",
        "num_ids": 41
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    k = 0\n    while n!= 1: \n        if n%2 == 0:\n            n = n/2\n            k = k + 1\n        else: \n            n = n*3\n            k = k + 1\n    return k\n",
        "num_ids": 62
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    num = 1\n    while num <= n:\n        num = num*2\n    return num\n",
        "num_ids": 25
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    l = [2, 4, 8, 16]\n    temp_list = []\n    for i in l:\n        if n%i == 0:\n            temp_list.append(i)\n    temp_list.sort()\n    index = temp_list[0]\n    return index\n    \nif __name__ == \"__main__\":\n    \n    #a = 12\n    #b = 2\n    \n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    \n    while a!= b:\n        try:\n            if a > b:\n                print(a, \"is greater than\", b)\n                a = int(input(\"Enter the first number: \"))\n            else:\n                print(b, \"is greater than\", a)\n                b = int(input(\"Enter the second number: \"))\n                \n        except:\n            print(\"Invalid input\")\n    else:\n        print(\"Both values are equal\")\n        \n    #i = next_power_of_2(a)\n    #j = next_power_of_2(b)\n    \n    #if i > j:\n    #    print(i, \"is greater than\", j)\n    #else:\n    #    print(j, \"is greater than\", i)",
        "num_ids": 314
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n%2 == 0:\n        n = n//2\n    return n\n",
        "num_ids": 22
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    while(n % 2 == 0):\n        n /= 2\n    else:\n        return n + 1\n",
        "num_ids": 39
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 1\n    while n % 2 == 0:\n        n = n / 2\n    if n == 1:\n        return 1\n    while n % 2!= 0:\n        n = n / 2\n    return n\n",
        "num_ids": 61
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while(i*i <= n): \n        if (n % i == 0): \n            n = n/i \n        else: \n            i = i + 1\n    return n \n",
        "num_ids": 54
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Your code here\n    a = 2**n\n    return a\n",
        "num_ids": 19
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return n * next_power_of_2(n - 1)\n",
        "num_ids": 58
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n <= 0:\n        return 0\n    if n < 1:\n        return 0\n    return n**2 + next_power_of_2(n-1)\n    \n",
        "num_ids": 56
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    x=set(x)\n    count=0\n    for i in x:\n        if a.count(i)>0:\n            count=count+1\n    return count\n    \n    \n    \ndef frequency_even(a):\n    '''\n    Write a function that returns the number of occurrences of every even number in a given list.\n    '''\n    \n    x=set(a)\n    count=0\n    for i in x:\n        if i%2==0:\n            count=count+1\n    return count\n    \n    \n    \n    \ndef find_index(a,x):\n    '''\n    Write a function that returns the index of a given item in a given list.\n    '''\n    \n    x=set(x)\n    \n    \n    for i in x:\n        if a==i:\n            return x.index(i)\n    \n    \n    return -1\n    \n    \ndef reverse(a):\n    '''\n    Write a function that returns the reverse of a given list.\n    '''\n    \n    x=list(a)\n    \n    \n    for i in range(len(x)//2):\n        x[i],x[-i-1]=x[-i-1],x[i]\n    return x\n    \n    \n    \ndef longest_palindrome(a):\n    '''\n    Write a function that returns the longest palindromic substring in a given string.\n    '''\n    \n    a=list(a)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1662
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a==[]:\n        return 0\n    else:\n        x = x.lower()\n        count = 0\n        for i in a:\n            if x == i:\n                count +=1\n        return count\n",
        "num_ids": 53
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num = 0\n    for i in a:\n        if i==x:\n            num += 1\n    return num\n    \n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2013
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if(x == 1):\n        return 1\n    else:\n        return a[x-1] + frequency(a,x-1) \n",
        "num_ids": 37
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Create two empty lists\n    d = []\n    for i in range(len(a)):\n        if a[i] in d:\n            d.append(a[i])\n        else:\n            d.append(a[i])\n            \n    # print(d)\n    \n    # We check if any item in d is present in the list or not\n    for i in d:\n        if a.count(i) == 0:\n            return 0\n    return 1\n",
        "num_ids": 115
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(m, n):\n        sum = sum + list1[i]\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_number = 0\n    for number in list1[m:n]:\n        sum_number += number\n    return sum_number\n",
        "num_ids": 34
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    l = 0                                                                                                                                                        \n    for i in list1:                                                                                                                                                        \n        if(i >= m and i <= n):                                                                                                                                                                                        \n            l += i                                                                                                                                                                                                                            \n    return l                                                                                                                                                                                                                                                                                                            ",
        "num_ids": 69
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    i = 0\n    while i < m:\n        s = s + list1[i]\n        i += 1\n    j = n\n    while j >= m:\n        s = s + list1[j]\n        j -= 1\n    return s\n",
        "num_ids": 67
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i+m])\n",
        "num_ids": 16
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n):\n        total = total + list1[i]\n    return total",
        "num_ids": 32
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum = 0\n    for i in range(m, n+1):\n        sum = sum + list1[i]\n    return su",
        "num_ids": 36
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(range(m, n+1))\n",
        "num_ids": 15
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # if side is greater than a\n    if (a > 0):\n        return ((a * 4) / 3) + ((a * 2) / 3) + ((a * 6) / 3)\n    # if side is less than zero\n    elif (a < 0):\n        return ((a * 4) / 3) + ((a * 2) / 3) + ((a * 6) / 3)\n    # if side is zero\n    else:\n        return 0\n",
        "num_ids": 110
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = a + 4*a\n    return l\n",
        "num_ids": 15
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    P = 0\n    for i in range(3):\n        P += 4 * a**(1/3)\n    return P\ndef area_of_regular_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon given its sides.\n    '''\n    r = math.sqrt(a)\n    S = 4 * math.pi * r\n    return S\ndef distance(a, b):\n    '''\n    Write a function that finds the distance between two points.\n    '''\n    return (math.sqrt((a[0]-b[0])**2+(a[1]-b[1])**2))\ndef perimeter_square(a):\n    '''\n    Write a function that finds the perimeter of a square given its area.\n    '''\n    P = 0\n    a = a ** (1/2)\n    for i in range(4):\n        P += 2 * math.pi * a * (a**(1/3))\n    return P\ndef area_square(a):\n    '''\n    Write a function that finds the area of a square given its area.\n    '''\n    r = math.sqrt(a)\n    S = 4 * math.pi * r\n    return S\ndef square_inside(a, b, c, d):\n    '''\n    Write a function that checks whether a triangle is inside or not.\n    '''\n    return (math.sqrt((b[0]-c[0])**2+(b[1]-c[1])**2)+math.sqrt((d[0]-a[0])**2+(d[1]-a[1])**2)) < math.sqrt(4)\ndef area_of_square(a, b, c, d):\n    '''\n    Write a function that finds the area of a triangle given its sides.\n    '''\n    p = perimeter_square(a) + perimeter_square(b) + perimeter_square(c) + perimeter_square(d)\n    P = 0\n    for i in range(4):\n        P += 4 * math.pi * area_square(a[i]) * area_square(b[i]) * area_square(c[i]) * area_square(d[i])\n    return P\ndef triangle_inside(a, b, c, d):\n    '''\n    Write a function that checks whether a triangle is inside or not.\n    '''\n    return (square_inside(a, b, c, d) and square_inside(b, a, c, d) and square_inside(c, a, b, d))\ndef triangle_area(a, b, c):\n    '''\n    Write a function that finds the area of a triangle given its sides.\n    '''\n    s = 0\n    for i in range(3):\n        s += area_square(a[i])\n        s += area_square(b[i])\n        s += area_square(c[i])\n    return s\ndef distance_between_triangle(a, b, c):\n    '''\n    Write a function that finds the distance between two triangles.\n    '''\n    p = perimeter_square(a) + perimeter_square(b) + perimeter_square(c)\n    return distance(a, b) + distance(b, c) + distance(c, a) + p / 2\ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function that finds the perimeter of a triangle given its sides.\n    '''\n    P = 0\n    s = perimeter_square(a) + perimeter_square(b) + perimeter_square(c)\n    P += s\n    for i in range(3):\n        P += distance_between_triangle(a[i], b[i], c[i])\n    return P\ndef area_of_square_and_triangle(a, b, c, d, e, f):\n    '''\n    Write a function that finds the area of a triangle given its sides and the two triangles (a,b,c and d).\n    '''\n    return (area_square(b) + area_square(c) + area_square(d)) * (area_of_square(a) + area_of_square(b) + area_of_square(c) + area_of_square(d))\ndef triangle_area_and_dist(a, b, c, d, e):\n    '''\n    Write a function that finds the area and distance of the triangle given its sides and two triangles (a,b,c and d).\n    '''\n    return (area_of_square_and_triangle(a, b, c, d, e)) * (area_of_square(a) + area_of_square(b) + area_of_square(c) + area_of_square(d))\ndef triangle_area_and_dist_first(a, b, c, d, e):\n    '''\n    Write a function that finds the area and distance of the triangle given its sides and first triangle (a,b,c and d).\n    '''\n    p = perimeter_square(a) + perimeter_square(b) + perimeter_square(c) + perimeter_square(d)\n    p1 = perimeter_square(e)\n    return (area_of_square_and_triangle(a, b, c, d, e)) * (area_of_square(a) + area_of_square(b) + area_of_square(c) + area_of_square(d)) + (p / 2) * (p1 / 2)\ndef triangle_area_and_dist_second(a, b, c, d, e):\n    '''\n    Write a function that finds the area and distance of the triangle given its sides and second triangle (a,b,c and d).\n    '''\n    p = perimeter_square(a) + perimeter_square(b) + perimeter_square(c) + perimeter_square(d)\n    p2 = perimeter_square(e)\n    return (area_of_square_and_triangle(a, b, c, d, e)) * (area_of_square(a) + area_of_square(b) + area_of_square(c) + area_of_square(d)) + (p / 2) * (p2 / 2)\ndef triangle_area_and_dist_third(a, b, c, d, e):\n    '''\n    Write a function that finds the area and distance of the triangle given its sides and third triangle (a,b,c and d).\n    '''\n    p = perimeter_square(a) + perimeter_square(b) + perimeter_square(c) + perimeter_square(d)\n    p3 = perimeter_square(e)\n    return (area_of_square_and_triangle(a, b, c, d, e)) * (area_of_square(a) + area_of_square(b) + area_of_square(c) + area_of_square(d)) + (p / 2) * (p3 / 2)\ndef triangle_area_and_dist_fourth(a, b, c, d, e):\n    '''\n    Write a function that finds the area and distance of the triangle given its sides and fourth triangle (a,b,c and d).\n    '''\n    p = perimeter_square(a) + perimeter_square(b) + perimeter_square(c) + perimeter_square(d)\n    p4 = perimeter_square(e)\n    return (area_of_square_and_triangle(a, b, c, d, e)) * (area_of_square(a) + area_of_square(b) + area_of_square(c) + area_of_square(d)) + (p / 2) * (p4 / 2)\ndef triangle_area_and_dist_fifth(a, b, c, d, e):\n    '''\n    Write a function that finds the area and distance of the triangle given its sides and fifth triangle (a,b,c and d).\n    '''\n    p = perimeter_square(a) + perimeter_square(b) + perimeter_square(c) + perimeter_square(d)\n    p5 = perimeter_square(e)\n    return (area_of_square_and_triangle(a, b, c, d, e)) * (area_of_square(a) + area_of_square(b) + area_of_square(c) + area_of_square(d)) + (p / ",
        "num_ids": 110
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    m = math.sqrt(a*a + 4*a*a)\n    return m\n",
        "num_ids": 25
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 0\n    if a > 0:\n        for i in range(a):\n            p += 2 * a * math.pow(3,i)\n    return p\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    p = 0\n    if a > 0:\n        for i in range(a):\n            p += 2 * a * math.pow(2,i)\n    return p\n",
        "num_ids": 44
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4/3)*(a*(math.sqrt(1/3)))-2*math.sqrt(a**3/3)\n",
        "num_ids": 37
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(4*a*math.sin(math.pi/3))\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle from its radius and its centre.\n    '''\n    return math.pi*a*a/4\ndef square_circle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2\ndef circle_triangle(a):\n    '''\n    Write a function to find the area of a circle from its radius and its centre.\n    '''\n    return math.pi*a**2*2\ndef circle_square(a):\n    '''\n    Write a function to find the area of a circle from its radius and its centre.\n    '''\n    return math.pi*a**2*4\ndef circle_circle(a):\n    '''\n    Write a function to find the area of a circle from its radius and its centre.\n    '''\n    return math.pi*a**2*3\ndef circle_rectangle(a):\n    '''\n    Write a function to find the area of a circle from its radius and its centre.\n    '''\n    return math.pi*a**2*5\ndef circle_square_rectangle(a):\n    '''\n    Write a function to find the area of a circle from its radius and its centre.\n    '''\n    return math.pi*a**2*4*5\ndef square_square_rectangle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*4*4\ndef square_circle_rectangle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*4*5\ndef rectangle_square_rectangle(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*2*4*5\ndef rectangle_square_circle(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*3*4*5\ndef rectangle_square_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*4*4*5\ndef rectangle_circle_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*4*3*5\ndef rectangle_circle_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*5*4*5\ndef rectangle_square_circle_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*4*4*5\ndef rectangle_square_square_circle_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*4*3*4*5\ndef rectangle_circle_square_circle_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*5*3*5\ndef rectangle_square_square_circle_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*4*4*5\ndef rectangle_circle_square_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*4*5*4*5\ndef rectangle_square_square_circle_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*3*3*5\ndef rectangle_square_square_circle_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length and its width and height.\n    '''\n    return math.pi*a**2*4*4*5\ndef circle_square_square_square(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*3*4*5\ndef circle_square_square_circle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*2*4*5\ndef circle_square_circle_square(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*2*4*5\ndef circle_square_square_circle_square(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*2*4*5\ndef circle_circle_square_circle_square(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*5\ndef circle_circle_square_square_circle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*4*5\ndef circle_square_square_square_circle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*5\ndef circle_square_square_square_circle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*3\ndef circle_circle_square_circle_square(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*4*5\ndef circle_square_square_square_circle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*4*5\ndef circle_circle_square_square_circle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*4*5\ndef circle_circle_square_square_square(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*5\ndef circle_square_circle_square_square(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*5*4*5\ndef square_circle_square_square_circle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*a**2*5*4*5\ndef square_square_square_circle(a):\n    '''\n    Write a function to find the area of a square from its radius and its centre.\n    '''\n    return math.pi*",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*math.pow(2,3)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*6\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*math.pow(2,2)\n",
        "num_ids": 31
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a%2!=0:\n        return\n    else:\n        if a>=8:\n            return a//2\n        else:\n            return 3*a//4\n",
        "num_ids": 45
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    p = 0\n    a = abs(a)\n    if a > 0:\n        if a % 2!= 0:\n            p = a * 6 + 1.5 * a * 3\n        else:\n            p = a * 6 + 3.5 * a * 2\n        return p\n    else:\n        return 0\n    \ndef perimeter_hexaagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    \n    h = math.sqrt(a / 2)\n    return h * 6\n",
        "num_ids": 23
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    count = 0\n    for char in s:\n        if char =='std':\n            count += 1\n    return count\n    \ndef count_occurance_in_different_chars(s):\n    '''\n    Write a function that accepts a string and returns the number of occurrences of the string.\n    '''\n    \n    count = 0\n    \n    for i in range(0,len(s)):\n        if s[i]!='std':\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def count_occurance(s):\n        letters = {}\n        for letter in s:\n            if letter in letters:\n                letters[letter] += 1\n            else:\n                letters[letter] = 1\n        occurance = 0\n        for letter, count in letters.items():\n            if count == 1:\n                occurance += 1\n        return occurance\n    return count_occurance(s)\n",
        "num_ids": 96
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = len(s)\n    count = 0\n    for i in range(l):\n        if s[i] =='std':\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurence_count = {}\n    for i in range(len(s)):\n        if s[i] not in occurence_count:\n            occurence_count[s[i]] = 0\n        occurence_count[s[i]] += 1\n    return occurence_count\n",
        "num_ids": 74
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # Your code here\n    if(s==\"std\"):\n        return 1\n    elif(s==\"a\" or s==\"e\" or s==\"i\" or s==\"o\" or s==\"u\"):\n        return 2\n    elif(s==\"aa\"):\n        return 3\n    elif(s==\"aaa\"):\n        return 5\n    else:\n        return 2+count_occurance(s[1:])\n    \n",
        "num_ids": 112
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # pass\n",
        "num_ids": 6
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def count_occurance2(s):\n        occurance = [0 for i in range(len(s))]\n        for i in range(len(s)):\n            if s[i] == \"std\":\n                occurance[i] = occurance[i-1] + 1\n        return occurance\n    return count_occurance2(s)\n",
        "num_ids": 86
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import collections\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    count = 0\n    for el in test_tuple:\n        if type(el)!= type(1):\n            count += 1\n    if count == len(test_tuple):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        for j in range(i+1, len(test_tuple)):\n            if test_tuple[i][0]!= test_tuple[j][0]:\n                print(test_tuple[i][0])\n                print(test_tuple[j][0])\n                raise Exception(\"Type mismatch\")\n",
        "num_ids": 93
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count=0\n    for i in test_tuple:\n        if isinstance(i,int)==True:\n            count+=1\n    return count==0\n",
        "num_ids": 41
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    is_same_type = True\n    for x in test_tuple:\n        try:\n            type(x)\n            is_same_type = False\n        except:\n            is_same_type = True\n    return is_same_type\n",
        "num_ids": 61
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for x in test_tuple:\n        if isinstance(x,int) or isinstance(x,float):\n            assert type(x) is int or type(x) is float, 'Wrong data type!'\n        else:\n            assert type(x) is str, 'Wrong data type!'\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if (test_tuple[i][0] not in ['int','float','str']):\n            return False\n        if (test_tuple[i][1] not in ['int','float','str']):\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_type = 0\n    for data in test_tuple:\n        if(isinstance(data,str)):\n            test_type += 1\n        else:\n            raise TypeError(\"tuple must only contain str data types\")\n    if(test_type==len(test_tuple)):\n        return True\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) is not int and type(test_tuple[0]) is not float:\n        return \"The data type is not correct\"\n    else:\n        return print(test_tuple[0])\n",
        "num_ids": 58
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types_of_data = [int, float, str, bool]\n    for x in test_tuple:\n        if type(x) not in types_of_data:\n            raise ValueError(f\"The value {x} of type {type(x)} is not correct\")\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if i == []:\n            return True\n        if i[0] == i[1] and type(i[0]) == type(i[1]):\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return \n",
        "num_ids": 6
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Let max be the maximum value in the array\n    max = arr[n-1]\n    # Find the index where max occurs\n    index = n-1\n    while index > 0 and arr[index] > max:\n        index -= 1\n",
        "num_ids": 59
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return True\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return False\n",
        "num_ids": 103
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Each time we add the item to the sorted array\n    for i in range(n-1):\n        # If there is a majority element in the array\n        if arr[i] == x:\n            # If there are still items to add to the sorted array\n            if i < n-2:\n                # If the array has a next item after the one we just added\n                # If the array has a next item after the one we just removed\n                if arr[i+1] > arr[i+2]:\n                    return True\n            # If we have a next item in the array\n            else:\n                # If the array has a next item after the one we just removed\n                if arr[i-1] > arr[i]:\n                    return True\n    return False\n",
        "num_ids": 179
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    '''\n        Returns true if the elements at index x (0, n-1) are the same as the elements in arr, and the majority element is at index 0 or 1.\n    '''\n    # partition array in half\n    index = (n//2)-1\n    \n    if index < n:\n        \n        # check if arr[index] is the majority element\n        if arr[index] == x:\n            return True\n        else:\n            return is_majority(arr, n, x)\n    \n    return False\n",
        "num_ids": 80
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    for i in range(1, n+1):\n        if arr[i] == x:\n            return True\n        elif arr[i] > x:\n            return is_majority(arr[:i], n, x)\n    return False\n",
        "num_ids": 76
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Hint: make a brute-force way to find the index of the x element in the array, and check the count of x as well.\n    # If there are multiple occurrences of the x, return the element.\n    # If there is only 1 occurrence, return the first element.\n    # If there are no occurrences, return None.\n    # If there are no duplicate elements, return False.\n    def majority_element(arr, n):\n        # find the index of the x element in the array\n        index = -1\n        for i in range(n):\n            if arr[i] == x:\n                index = i\n        # check the count of x\n        if index == -1:\n            return False\n        # if there are multiple occurrences of the x, return the first element\n        if index < n/2:\n            return arr[index]\n        # if there is only 1 occurrence, return the first element\n        return arr[index]\n        \n    return majority_element(arr, n)\n",
        "num_ids": 231
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    if arr[0] == x:\n        return True\n    elif len(arr) == n:\n        return False\n    else:\n        mid = len(arr)//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            return is_majority(arr[mid+1:], n, x)\n        else:\n            return is_majority(arr[:mid], n, x)\n",
        "num_ids": 114
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(n):\n        if arr[i] == x:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return arr[0]\n    mid = (n + 1)//2\n    if arr[mid]==x:\n        return 1\n    if arr[mid] > x:\n        return is_majority(arr[mid+1:], n-mid, x)\n    return is_majority(arr[:mid], n-mid, x)\n",
        "num_ids": 100
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    '''\n    Sample Input: n = 3\n    Expected Output: 2\n    Sample Input: n = 3\n    Expected Output: 1\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # write your code here\n    count=0\n    for i in range(n):\n        if (n & i) == 0:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    return len(set(bin(n)[2:]))\n",
        "num_ids": 18
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    result = 0\n    while n!= 0:\n        # Get n-1 bits\n        n = n >> 1\n        result += 1\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    # Create a list of length 2 containing the bits\n    # Append 0 to the end of the list\n    for i in range(2):\n        c = c + bin(n)[2:].count('1')\n    return c\n",
        "num_ids": 61
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n<=1: \n        return 1\n    return n//2 + count_Set_Bits(n//2)\n",
        "num_ids": 33
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # define a set of bits\n    set_bits = set()\n",
        "num_ids": 20
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = n >> 8;         # shift left by 8 bits (1 bits)\n    s1 = 0;              # initial count of set bits with 0\n    s2 = 1;              # initial count of set bits with 1\n    while n:\n        if n & 1:            # if n is odd (1)\n            s1 += 1;            # increment count of set bits with 1\n            n >>= 1;        # shift left by 1 bit (0)\n        else:                # if n is even (0)\n            s2 += 1;            # increment count of set bits with 2\n            n >>= 1;        # shift left by 1 bit (0)\n    return s1, s2; \n",
        "num_ids": 163
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n > 0): \n        if (n & 1): \n            count += 1\n        n >>= 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # TODO: Write your function\n    result_str = ''\n    for i in range(0, len(str)):\n        if str[i] % 2 == 0:\n            result_str += str[i]\n    return result_str\n",
        "num_ids": 60
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(\",\",\"\").replace(\".\",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\"[\",\"\").replace(\"]\",\"\").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"'s\",\"\").replace(\"'\",\"\").replace(\" \",\"\")\n",
        "num_ids": 62
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_values(str):\n        x = []\n        for i in str:\n            if i % 2 == 1:\n                x.append(i)\n        return x\n    str = str.lower()\n    odd_values_list = odd_values(str)\n    print(odd_values_list)\n",
        "num_ids": 76
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s=''\n    for x in range(0,len(str)):\n        if x%2==0:\n            s=s+str[x]\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for index, value in enumerate(str):\n        if index % 2!= 0:\n            result.append(value)\n    return ''.join(result)\n    \n",
        "num_ids": 48
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) % 2 == 0:\n        l = list(str)\n        odd_nums = []\n        for i in l:\n            if (ord(i) % 2) == 0:\n                odd_nums.append(i)\n        return \"\".join(odd_nums)\n    else:\n        return str\n",
        "num_ids": 82
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_index(str, index):\n        '''\n        Write a function that takes a string and an index and returns a new string where the odd index value of the word at the index is removed.\n        '''\n        start_index = index\n        end_index = len(str)\n        odd_string = ''\n        while start_index < end_index:\n            if index % 2 == 1:\n                start_index += 1\n            else:\n                end_index -= 1\n            if start_index > end_index:\n                start_index = -1\n                end_index = -1\n            odd_string += str[start_index]\n            start_index += 1\n        return odd_string\n    return odd_index(str, index)\n",
        "num_ids": 127
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''\n    for i in range(len(str)-1):\n        if i%2 == 0:\n            res += str[i]\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = []\n    for i in str:\n        if i % 2 == 1:\n            str_list.append(i)\n    return str_list\n",
        "num_ids": 41
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1 = str.lower()\n    new_list = []\n    for i in range(len(str1)):\n        if str1[i] % 2!= 0:\n            new_list.append(str1[i])\n",
        "num_ids": 58
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c: \n        return a\n    elif a>b>c: \n        return b\n    elif a>c>b: \n        return c\n    else: \n        return a\n",
        "num_ids": 55
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        print(a)\n    elif b>a and b>c:\n        print(b)\n    else:\n        print(c)\n",
        "num_ids": 47
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c:\n        return a \n    if a < b < c:\n        return a\n    if b < a < c:\n        return b\n    if c < a < b:\n        return c \n    else:\n        return None\n",
        "num_ids": 64
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b: \n        if a>c:\n            return a\n        else:\n            return c \n    elif b>a: \n        if b>c:\n            return b\n        else:\n            return c \n    else: \n        return c \n",
        "num_ids": 69
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        print(a)\n    elif b > a and b > c:\n        print(b)\n    else:\n        print(c)\n",
        "num_ids": 47
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        return c\n    else:\n        return c\na,b,c=map(int,input(\"Enter three numbers\").split())\nprint(min_of_three(a,b,c))",
        "num_ids": 65
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # index of the first number \n    i = 0\n    while a[i]!= c[i]:\n        i += 1\n    # index of the second number \n    j = i+1\n    while b[j]!= c[j]:\n        j += 1\n    # index of the third number \n    k = j+1\n    while a[k]!= c[k]:\n        k += 1\n    # return the minimum \n    return a[i:k]\n",
        "num_ids": 118
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c and b < c:\n        return a \n    elif b < a and b < c and b < c:\n        return b \n    else:\n        return c \n",
        "num_ids": 52
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    elif b>c:\n        if b>a:\n            return b\n        else:\n            return a\n    else:\n        if c>a:\n            return c\n        else:\n            return a\n",
        "num_ids": 78
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c:\n        return a\n    elif a>b>c:\n        return b\n    elif a>c>b:\n        return c\n    else:\n        return c\n",
        "num_ids": 51
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (n&(n-1)==0 and n&(n-2)==0)\n",
        "num_ids": 26
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>=0 and l<=n and r>=0 and r<=n:\n        if n&l==0 and n&r==0:\n            print(\"true\")\n        else:\n            print(\"false\")\n    else:\n        print(\"Invalid range\")\n",
        "num_ids": 67
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l < r:\n        return False\n    else:\n        return all([x & 1 for x in range(n)])\n",
        "num_ids": 33
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    m=10**9\n    def count_bits(n):\n        return int(math.log(n,2))\n    \n    if n==0:\n        return 1\n    if n==m:\n        return 0\n    if l==m and n==r:\n        return 1\n    \n    if l<=count_bits(n)<=r:\n        return count_bits(n)\n    else:\n        return count_bits(n)%m\n    \ndef get_best_Bits_Set(n,l,r):\n    '''\n    Write a python function to find the number of best bits set in the given range.\n    '''\n    if n==0:\n        return 0\n    \n    n=n&(pow(2,l)-1)\n    n=n&(pow(2,r)-1)\n    \n    return n\n    \ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    \n    if n%2==0:\n        return 0\n    \n    m=10**9\n    def count_bits(n):\n        return int(math.log(n,2))\n    \n    for i in range(count_bits(n)):\n        if n%2==0:\n            n=n/2\n        else:\n            n=n*3+1\n        if n==1:\n            return 1\n        if n==2:\n            return 0\n    return 0\n",
        "num_ids": 152
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=0\n    for i in range(l-1,r+2):\n        if(i%2==0):\n            if(n&(2**i)==0):\n                print(str(n&(2**i))+\" is set in range\")\n            else:\n                print(\"This bit is not set in range\")\n        else:\n            if(n&(2**i)==0):\n                print(str(n&(2**i))+\" is not set in range\")\n            else:\n                print(\"This bit is set in range\")\n        i=i+1\n    \n    \ndef all_Bits_Set_In_The_Given_Range_1(n):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=0\n    for i in range(n-1,0,-1):\n        if(i%2==0):\n            if(n&(2**i)==0):\n                print(str(n&(2**i))+\" is set in range\")\n            else:\n                print(\"This bit is not set in range\")\n        else:\n            if(n&(2**i)==0):\n                print(str(n&(2**i))+\" is set in range\")\n            else:\n                print(\"This bit is not set in range\")\n        i=i-1\n    \ndef all_Bits_Set_In_The_Given_Range_2(n):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=0\n    for i in range(n-1,0,-1):\n        if(i%2==0):\n            if(n&(2**i)==0):\n                print(str(n&(2**i))+\" is set in range\")\n            else:\n                print(\"This bit is not set in range\")\n        else:\n            if(n&(2**i)==0):\n                print(str(n&(2**i))+\" is set in range\")\n            else:\n                print(\"This bit is not set in range\")\n        i=i-1\n    \ndef all_Bits_Set_In_The_Given_Range_3(n):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=0\n    for i in range(n-1,0,-1):\n        if(i%2==0):\n            if(n&(2**i)==0):\n                print(str(n&(2**i))+\" is set in range\")\n            else:\n                print(\"This bit is not set in range\")\n        else:\n            if(n&(2**i)==0):\n                print(str(n&(2**i))+\" is set in range\")\n            else:\n                print(\"This bit is not set in range\")\n        i=i-1\n    \n    \nall_Bits_Set_In_The_Given_Range_1(36)\nall_Bits_Set_In_The_Given_Range_2(36)\nall_Bits_Set_In_The_Given_Range_3(36",
        "num_ids": 205
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l>=0 and r <=n):\n        x=0\n        for i in range(n):\n            if (not (((l&(2**i)) == 0) or (r&(2**i)) == 0)):\n                x+=1\n        if (x==n):\n            return True\n    else:\n        return False\n    return False\n",
        "num_ids": 88
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all([(b >> i) & 1 for i in range(8) for b in bin(l)[2:]])!= all([(b >> i) & 1 for i in range(8) for b in bin(r)[2:]]) \n",
        "num_ids": 61
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        #print(bin(i))\n        bit = bin(i)[2:]\n        print(bit)\n        if bit.count('1')!= 0:\n            print(\"true\")\n        else:\n            print(\"false\")\n    return\n",
        "num_ids": 72
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n>=l and n<=r:\n        all_bits=l+(r-l)//2\n        return all_bits\n    else:\n        return -1\n",
        "num_ids": 44
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l==r:\n        return l==0\n    else:\n        if n%(l+r)==0:\n            return all_Bits_Set_In_The_Given_Range(n//(l+r),l,r)\n        else:\n            return False\n",
        "num_ids": 69
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def re_arrange_arr(arr, n):\n        temp_arr = []\n        index = 0\n        while (index + n) < len(arr):\n            temp_arr.append(arr[index])\n            index += 1\n        for index in range(n):\n            temp_arr.append(arr[index])\n        return temp_arr\n    return re_arrange_arr\n",
        "num_ids": 94
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    return arr\n",
        "num_ids": 12
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    arr.sort()\n    arr2=[]\n    for i in range(n):\n        if arr[i]>0:\n            arr2.append(arr[i])\n        else:\n            arr2.append(arr[i])\n            arr2.append(-arr[i])\n    arr2.reverse()\n    arr.extend(arr2)\n    return arr\n",
        "num_ids": 97
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp_list = []\n    \n    for i in range(n):\n        temp = arr[i]\n        if temp < 0:\n            temp = -temp\n            if temp > -1:\n                arr[i] = -temp\n            else:\n                arr[i] = -1\n        elif temp > 0:\n            arr[i] = temp\n        else:\n            arr[i] = -1\n    \n    return arr\n",
        "num_ids": 106
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # make a new list to append values\n    new_list = []\n    \n    # loop through each element and append it to the new list\n    for i in range(0, len(arr)):\n        if arr[i] < 0:\n            new_list.append(arr[i])\n    \n    # insert the positive elements in the beginning of the new list\n    new_list.insert(0, new_list)\n    \n    # reverse the elements of the new list\n    for i in range(0, len(new_list)):\n        new_list[i] = new_list[i][::-1]\n    \n    # now loop through each element and append it to the new list\n    for i in range(0, len(new_list)):\n        if new_list[i] < 0:\n            new_list[i] = new_list[i] * -1\n    \n    # return the new list\n    return new_list\n",
        "num_ids": 226
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    new = [0] * n\n    for i in arr:\n        if i < 0:\n            new[i] = -i\n        else:\n            new[i] = i\n    for i in range(n):\n        if new[i] > 0:\n            arr[i] = new[i]\n    return arr\n",
        "num_ids": 86
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n        elif arr[i] > 0:\n            arr[i] = arr[i] * -1\n",
        "num_ids": 56
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    rearranged = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            rearranged.append(-arr[i])\n        else:\n            rearranged.append(arr[i])\n    for i in range(len(rearranged)):\n        if arr[i] < 0:\n            rearranged[i] *= -1\n        if arr[i] > n:\n            rearranged[i] = arr[i] * -1\n    return rearranged\n",
        "num_ids": 126
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = np.array(arr)\n    positive = arr[arr>0].tolist()\n    negative = arr[arr<0].tolist()\n",
        "num_ids": 40
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Check for empty array\n    if len(arr) == 0:\n        raise Exception(\"Array must be nonempty\")\n    if len(arr) < n:\n        raise Exception(\"Array must be at least {} elements long\".format(n))\n    \n    # Check for numbers\n    if any(map(lambda x: x < 0, arr)):\n        raise Exception(\"Negative numbers are not allowed in the re-arrange function\")\n    if any(map(lambda x: x > n, arr)):\n        raise Exception(\"Positive numbers cannot be used as negative numbers\")\n    \n    # Write functions\n    def sum_negative(arr):\n        '''\n        Return the sum of all negative numbers in the given array\n        '''\n        return sum([i for i in arr if i < 0])\n    \n    def re_arrange_negative(arr):\n        '''\n        Re-arrange all negative numbers in the given array\n        '''\n        # Check for empty array\n        if len(arr) == 0:\n            raise Exception(\"Array must be nonempty\")\n        if len(arr) < n:\n            raise Exception(\"Array must be at least {} elements long\".format(n))\n        \n        # Check for negative numbers\n        if any(map(lambda x: x < 0, arr)):\n            raise Exception(\"Negative numbers are not allowed in the re-arrange function\")\n        \n        # Write functions\n        def re_arrange_negative(arr):\n            '''\n            Return the sum of all negative numbers in the given array\n            '''\n            return sum(map(lambda x: -x if x < 0 else x, arr))\n    \n    # Check if any number is positive and return\n    if any(map(lambda x: x > n, arr)):\n        raise Exception(\"Positive numbers cannot be used as negative numbers\")\n    \n    # Check if all positive numbers are negative\n    if any(map(lambda x: x < 0, arr)):\n        raise Exception(\"Negative numbers cannot be used as positive numbers\")\n    \n    # Return the re-arranged array\n    return re_arrange_array(arr, n)\n",
        "num_ids": 138
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n",
        "num_ids": 20
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    newstr = str1.replace(char,' ')\n    return newstr\n",
        "num_ids": 21
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replac",
        "num_ids": 1872
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for s in str1:\n        if s == \" \":\n            new_str += char\n        else:\n            new_str += s\n    return new_str\n",
        "num_ids": 49
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n",
        "num_ids": 20
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ', char)\n    return str2\n",
        "num_ids": 20
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"_\")\n    str1 = str1.replace(\"\\t\",\"_\")\n    str1 = str1.replace(\"\\r\",\"_\")\n    str1 = str1.replace(\"\\n\",\"_\")\n    return str1\n",
        "num_ids": 66
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"  \",\"\")\n    return str1\n",
        "num_ids": 61
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1.strip() == str1:\n        return str1\n    else:\n        return str1.replace(' ','') + char\n        \n    \ndef convert(str1,str2):\n    '''\n    Write a function that takes in two strings, one representing the first and the second, and returns a new string, the string with both of the characters replaced with the specified character.\n    '''\n    return str1.replace(str2,'a')\n",
        "num_ids": 15
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(\"\\t\\t\\tLargest number of items in list\")\n    list2=[]\n    print(\"\\t\\t\\tLargest number of items in list\")\n    for i in list1:\n        if i>n:\n            heapq.heappush(list2,-i)\n            print(\"\\t\\t\\t\",-i)\n        else:\n            list2.append(-i)\n            print(\"\\t\\t\\t\",i)\n    return list2\n",
        "num_ids": 121
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    mylist=[]\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]==i:\n                mylist.append(list1[j])\n                break\n    return mylist\n",
        "num_ids": 61
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return [elem for elem in sorted(list1,key=len,reverse=True)[:n]]\n",
        "num_ids": 28
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    list3=[]\n    for i in range(n):\n        list2.append(list1[i])\n    for i in range(len(list2)):\n        list3.append(list2.pop())\n    return list3\n",
        "num_ids": 65
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    num=[]\n    for i in range(n):\n        num.append(list1[i])\n    return num\n",
        "num_ids": 31
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        list2.append(list1[i])\n    return list2\ndef get_min_values(lst):\n    '''\n    Write a function that takes in a list and returns a list of all the values from the original list, excluding the first value.\n    '''\n    min_values=[]\n    for i in lst[1:]:\n        min_values.append(i)\n    return min_values\ndef heap_sort(lst,insertion_sort_head):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of all the values from the original list, excluding the first value.\n    '''\n    hq=[]\n    i=insertion_sort_head\n    while i<len(lst):\n        heapq.heappush(hq,lst[i])\n        i=i+1\n    return hq\ndef main():\n    '''\n    You will not modify this function.\n    The function has two parameters:\n        * lst : A list of integers.\n        * n : The number of elements to search for.\n    The function returns a list of all the values from the original list, excluding the first value.\n    '''\n    lst=[7,8,9,6,4,4,3,2,1,0]\n    n=2\n    print(heap_sort(lst,n))\nmain()",
        "num_ids": 48
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[-list1[i][0],list1[i][1]])\n    return heap\ndef sorting_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[-list1[i][0],list1[i][1]])\n    return heap\ndef far_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[-list1[i][0],list1[i][1]])\n    return heap\ndef fnnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[-list1[i][0],list1[i][1]])\n    return heap\ndef permutation_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[-list1[i][0],list1[i][1]])\n    return heap\ndef trav_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[-list1[i][0],list1[i][1]])\n    return heap\ndef sort_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[-list1[i][0],list1[i][1]])\n    return heap\ndef main():\n    list1 = [[1,2],[3,4],[5,6],[7,8]]\n    n = 4\n    print(larg_nnum(list1,n))\n    print(sorting_nnum(list1,n))\n    print(far_nnum(list1,n))\n    print(fnnum(list1,n))\n    print(permutation_nnum(list1,n))\n    print(trav_nnum(list1,n))\nif __name__ == '__main__':\n    main(",
        "num_ids": 181
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    my_list=[]\n    for i in range(len(list1)):\n        if list1[i] not in my_list:\n            my_list.append(list1[i])\n    return my_list\n",
        "num_ids": 55
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    while len(heap)!=0:\n        heapq.heappop(heap)\n    list2 = []\n    for i in range(n):\n        list2.append(heapq.heappop(heap))\n    return list2\n",
        "num_ids": 97
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sorted_list = sorted(list1, reverse=True)\n    list_new = []\n    for item in sorted_list:\n        if len(list_new) < n:\n            list_new.append(item)\n        elif len(list_new) == n:\n            return list_new\n        else:\n            continue\n    return list_new\n",
        "num_ids": 88
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Calculate the volume\n    return (3*(r**2)*h**2)\n",
        "num_ids": 25
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 0.5*r**2*(np.pi**2)*h**2\n",
        "num_ids": 23
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return h*(r**2)*(1 + r/2)\n",
        "num_ids": 19
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*math.pi*r*h)/2.0\n",
        "num_ids": 19
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*(h**2)*np.pi*r**2\n",
        "num_ids": 19
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r*h\n",
        "num_ids": 8
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # DO NOT MODIFY THE LINES below\n    print(r,h)\n    l = 2*r\n    # Write your code below this line\n    print(\"The total surface area is \" + str(l*(r**2)))\n    \n    # YOUR CODE HERE\n    print(\"Cylinder area: \" + str(l*(r**2)))\n    \n    # TEST YOUR SOLUTION\n    print()\n    # Correct the output\n    #l = 2*r\n    #a = l*(r**2)\n    #print(\"The total surface area is \" + str(a))\n",
        "num_ids": 141
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = r/1000 # convert mm to m\n    h = h/1000 # convert m to mm\n    return (2*r*h**2)*(1+3*(4*np.pi)/7)\n",
        "num_ids": 52
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # define the arguments\n    r=float(r)\n    h=float(h)\n    # calculate the formula\n    S=1.4*(h**2)\n    # return the result\n    return S\n",
        "num_ids": 53
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate surface area\n    S = 6*r*h**2\n    print(f'The surface area of a cylindr is: {S:.2f} Pa')\n",
        "num_ids": 46
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l**3)\n    return volume\n",
        "num_ids": 15
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l*l*l\n    print(\"The volume of the cube is \", volume)\n",
        "num_ids": 24
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (4/3)*(l**3)\n    return volume\n",
        "num_ids": 20
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return round(3.14*(l**3), 2)\n",
        "num_ids": 18
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    cubes = [\n        (1,1,1),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,0),\n        (0,1,1),\n        (0,0,1),\n        (0,1,0),\n        (0,0,1),\n        (1,1,0),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (1,1,0),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,0),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,0),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,0),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,0),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,1),\n        (0,0,0),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,1),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        (1,1,0),\n        (1,0,0),\n        (1,0,1),\n        (1,1,0),\n        (1,0,1),\n        (1,1,1),\n        (0,1,0),\n        (0,0,1),\n        (0,1,1),\n        (0,0,0),\n        ",
        "num_ids": 2016
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*(l*l*l)\n",
        "num_ids": 14
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Initialize\n    vol = 0.0\n    for i in range(l):\n        vol += 1.0/3.0 * (1.0/3.0 * (1.0/3.0)**2 + 1.0/3.0)\n    return vol\n",
        "num_ids": 68
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    zero_flag=False\n    while n>0:\n        if n%2==0:\n            n=n-1\n        else:\n            zero_flag=True\n            break\n    if zero_flag:\n        print('the number has even number of even bits')\n    else:\n        print('the number has odd number of even bits')\n    return n\n",
        "num_ids": 87
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit = 0\n    while n > 0: \n        if (n & 1) == 0: \n            n >>= 1\n            bit += 1\n        else: \n            n >>= 1\n            bit -= 1\n    return bit \n",
        "num_ids": 59
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    set_of_even_bits = []\n    for i in range(n):\n        if i % 2 == 0:\n            set_of_even_bits.append(i)\n    return set_of_even_bits\n",
        "num_ids": 55
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n>0:\n        if n&1==0:\n            return n\n        n=n>>1\n    return 0\ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    while n>0:\n        if n&1==1:\n            return n\n        n=n>>1\n    return 0\ndef bit_set_number(n): \n    '''\n    Write a python function to set all even and odd bits of a given number.\n    '''\n    return even_bit_set_number(odd_bit_set_number(n))\n",
        "num_ids": 23
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n % 2 == 0: \n        print('even bit set', n)\n    else: \n        print('odd bit set', n)\n    \n    \n",
        "num_ids": 41
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 2**32: \n        print('The number cannot be set to 0 or more, too large') \n        return\n    bit = 1\n    while bit <= n: \n        if (bit&1) == 0: \n            print('{0:032b}'.format(bit)) \n        bit <<= 1\n    print()\n",
        "num_ids": 84
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    return bin\n    \n    \ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    return bin\n    \n    \ndef get_number(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    num = (n // 10) * 10 + n % 10\n    return num\n    \n    \ndef get_number_set(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    return bin\n    \n    \ndef get_number_set_2(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    return bin\n    \n    \ndef get_set_number(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    return bin\n    \n    \ndef get_set_number_2(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x8 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin\n    \n    \ndef get_set_number_3(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x80 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin\n    \n    \ndef get_set_number_4(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x80 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin\n    \n    \ndef get_set_number_5(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x80 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin\n    \n    \ndef get_set_number_6(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x80 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin\n    \n    \ndef get_set_number_7(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x80 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin\n    \n    \ndef get_set_number_8(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x80 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin\n    \n    \ndef get_set_number_9(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x80 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin\n    \n    \ndef get_set_number_10(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x80 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin\n    \n    \ndef get_set_number_11(n): \n    '''\n    Write a python function to get a single digit of an integer.\n    '''\n    bin = bin(n)\n    bin = bin[2:len(bin)]\n    bin = bin[::-1]\n    bin = int(bin, 2)\n    bin = bin & 0x1\n    bin = bin | 0x80 >> 8\n    bin = bin & 0xFF\n    bin = bin & 0xFF00\n    bin = bin & 0xFF000\n    bin = bin & 0xFFF0F\n    bin = bin & 0xFFF0F\n    return bin",
        "num_ids": 118
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0:\n        while n:\n            x = n & 1\n            n = n >> 1\n            if x:\n                print(x, end = \"\")\n    else:\n        while n:\n            n = n >> 1\n            if n:\n                print(n, end = \"\")\n",
        "num_ids": 74
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even = ''.join([str(bin(i)).lstrip('0b')[-n:] for i in range(2) if int(bin(i)[2:]) % 2 == 0])\n    return even\ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    odd = ''.join([str(bin(i)).lstrip('0b')[-n:] for i in range(2) if int(bin(i)[2:]) % 2!= 0])\n    return odd\ndef get_str(n): \n    '''\n    Write a python function to concatenate all the given strings together.\n    '''\n    return ''.join(str(bin(n))) \ndef get_length(n): \n    '''\n    Write a python function to get the length of a given number.\n    '''\n    return len(bin(n)[2:]) \ndef convert_to_hex_values(n): \n    '''\n    Write a python function to convert all the digits in a given number to hex values.\n    '''\n    return ''.join([f'{hex(i)[2:].upper()}' for i in n])\ndef convert_to_decimal_values(n): \n    '''\n    Write a python function to convert all the digits in a given number to decimal values.\n    '''\n    return ''.join([f'{n:x}' for i in n])\ndef set_value(n,v): \n    '''\n    Write a python function to set the given value in a given number.\n    '''\n    if n < 16:\n        n = f'0b{bin(v)[2:].upper()}'\n    else:\n        n = bin(v)[2:].upper()\n    return n\ndef get_hex_values(n): \n    '''\n    Write a python function to get all the hex values of a given number.\n    '''\n    return convert_to_hex_values(get_length(n))\ndef get_decimal_values(n): \n    '''\n    Write a python function to get all the decimal values of a given number.\n    '''\n    return convert_to_decimal_values(get_length(n))\ndef get_binary_values(n): \n    '''\n    Write a python function to get all the binary values of a given number.\n    '''\n    return ''.join([bin(i)[2:].upper() for i in n])\ndef get_octal_values(n): \n    '''\n    Write a python function to get all the octal values of a given number.\n    '''\n    return convert_to_octal_values(get_length(n))\ndef get_all_values(n): \n    '''\n    Write a python function to get all the values of a given number.\n    '''\n    return convert_to_binary_values(get_length(n)) + convert_to_octal_values(get_length(n))\ndef get_number_of_bits(n): \n    '''\n    Write a python function to get the number of bits of a given number.\n    '''\n    return get_length(n)\ndef get_hexa_values(n): \n    '''\n    Write a python function to get all the hex values of a given number.\n    '''\n    return convert_to_hex_values(get_length(n))\ndef get_decimal_values(n): \n    '''\n    Write a python function to get all the decimal values of a given number.\n    '''\n    return convert_to_decimal_values(get_length(n))\ndef get_all_values(n): \n    '''\n    Write a python function to get all the values of a given number.\n    '''\n    return convert_to_binary_values(get_length(n)) + convert_to_octal_values(get_length(n))\ndef get_binary_values(n): \n    '''\n    Write a python function to get all the binary values of a given number.\n    '''\n    return ''.join([bin(i)[2:].upper() for i in n])\ndef get_octal_values(n): \n    '''\n    Write a python function to get all the octal values of a given number.\n    '''\n    return convert_to_octal_values(get_length(n))\ndef get_all_values(n): \n    '''\n    Write a python function to get all the values of a given number.\n    '''\n    return convert_to_binary_values(get_length(n)) + convert_to_octal_values(get_length(n))\ndef get_all_as_binary_values(n): \n    '''\n    Write a python function to get all the values of a given number as a binary values.\n    '''\n    return ''.join([f'{bin(i)[2:].upper()}' for i in n])\ndef get_all_as_octal_values(n): \n    '''\n    Write a python function to get all the values of a given number as a octal values.\n    '''\n    return convert_to_octal_values(get_length(n))\ndef get_all_as_octal_values(n): \n    '''\n    Write a python function to get all the values of a given number as a octal values.\n    '''\n    return convert_to_octal_values(get_length(n))\ndef get_all_as_hex_values(n): \n    '''\n    Write a python function to get all the values of a given number as a hex values.\n    '''\n    return convert_to_hex_values(get_length(n))\ndef get_all_as_hex_values(n): \n    '''\n    Write a python function to get all the values of a given number as a hex values.\n    '''\n    return convert_to_hex_values(get_length(n))\ndef get_all_as_hex_values(n): \n    '''\n    Write a python function to get all the values of a given number as a hex values.\n    '''\n    return convert_to_hex_values(get_length(n))\ndef get_all_as_decimal_values(n): \n    '''\n    Write a python function to get all the values of a given number as a decimal values.\n    '''\n    return convert_to_decimal_values(get_length(n))\ndef get_all_as_decimal_values(n): \n    '''\n    Write a python function to get all the values of a given number as a decimal values.\n    '''\n    return convert_to_decimal_values(get_length(n))\ndef get_all_as_octal_values(n): \n    '''\n    Write a python function to get all the values of a given number as a octal values.\n    '''\n    return convert_to_octal_values(get_length(n))\ndef get_all_as_octal_values(n): \n    '''\n    Write a python function to get all the values of a given number as a octal values.\n    '''\n    return convert_to_octal_values(get_length(n))\ndef get_all_as_binary_values(n): \n    '''\n    Write a python function to get all the values of a given number as a binary values.\n    '''\n    return ''.join([f'{bin(i)[2:].upper()}' for i in n])\ndef get_all_as_octal_values(n): \n    '''\n    Write a python function to get all the values of a given number as a octal values.\n    '''\n    return convert_to_octal_values(get_length(n))\ndef get_all_as_octal_values(n): \n    '''\n    Write a python function to get all the values of a given number as a octal values.\n    '''\n    return convert_to_octal_values(get_length(n))\ndef get_all_as_octal_values(n): \n    '''\n    Write a python function to get all the values of a given number as a octal values.\n    '''\n    return convert_to_octal_values(get",
        "num_ids": 14
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    b = n & 0x1            # bitwise and\n    a = 0x1 & (b >> 0)    # bitwise or\n    l = 0x1 & (b >> 8)    # bitwise and\n    r = 0x1 & (b >> 16)    # bitwise or\n    u = 0x1 & (b >> 32)    # bitwise or\n    v = 0x1 & (b >> 48)    # bitwise or\n    \n    r = r | (((a << 4) & 0x0F) >> 4)    # set odd bits of r to 0x0F\n    r = r | (((l << 4) & 0xF0) >> 2)    # set odd bits of r to 0x0F\n    r = r | (((u << 4) & 0xF8) >> 6)    # set odd bits of r to 0xF8\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((v << 4) & 0xFC) >> 8)    # set odd bits of r to 0xFC\n    r = r | (((",
        "num_ids": 2012
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrence_dict = dict()\n    for tup in test_list:\n        occurrence_dict[tup[0]] = occurrence_dict.get(tup[0], 0) + 1\n    return occurrence_dict\n",
        "num_ids": 55
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    '''\n    def dict_counter(test_list):\n        counter = dict()\n        for tuple in test_list:\n            counter[tuple[0]] = counter.get(tuple[0], 0) + 1\n        return counter\n    '''\n    \n    # Create empty dictionary to store each unique tuple\n    dict_counter = {}\n    \n    # Iterate through all tuples and add tuple to dictionary\n    for tuple in test_list:\n        dict_counter[tuple[0]] = dict_counter.get(tuple[0], 0) + 1\n    \n    return dict_counter\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1926
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    dict = {}\n    for t in test_list:\n        dict[t[0]] = t[1]\n    return dict\n",
        "num_ids": 35
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    for item in test_list:\n        result_dict[item[0]] = item[1]\n    return result_dict\n",
        "num_ids": 39
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for i in test_list:\n        my_dict[i[0]] = my_dict.get(i[0], 0) + 1\n    return my_dict\n    \ndef solution(grocery_list):\n    answer = 1\n    \n    my_dict = check_occurences(grocery_list)\n    for key in sorted(my_dict):\n        answer *= my_dict[key]\n        answer %= 1_000_000_007\n    \n    return answer\n    \ndef solution2(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        if result < len(i[1]):\n            result = len(i[1])\n    return result\n        \ndef solution3(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= i[0]\n        result %= 1_000_000_007\n    \n    return result\n    \n    \ndef solution4(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += i[0]\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution5(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= i[1]\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution6(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += i[1]\n        result %= 1_000_000_007\n    \n    return result\n    \ndef solution7(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += sum(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution8(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += sum(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution9(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += len(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution10(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= len(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution11(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += sum(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution12(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution13(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= sum(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution14(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution15(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += min(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution16(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution17(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= min(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution18(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution19(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= min(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution20(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution21(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= sum(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution22(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution23(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= min(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution24(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution25(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= min(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution26(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += sum(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution27(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution28(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution29(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= min(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution30(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= sum(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution31(grocery_list):\n    \n    result = 1\n    \n    for i in grocery_list:\n        result *= max(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution32(grocery_list):\n    \n    result = 0\n    \n    for i in grocery_list:\n        result += sum(i[1])\n        result %= 1_000_000_007\n        \n    return result\n    \ndef solution33(grocery_list):\n    \n    result = 1\n    \n    for i in grocery",
        "num_ids": 1991
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    counter_dictionary = dict(counter)\n    return counter_dictionary\n",
        "num_ids": 30
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create empty dictionary\n    d = {}\n    for tup in test_list:\n        # check if tuple in dictionary\n        if tup in d:\n            d[tup] += 1\n        else:\n            d[tup] = 1\n    return d\n",
        "num_ids": 65
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for e in test_list:\n        if e[1] not in result.keys():\n            result[e[1]] = 1\n        else:\n            result[e[1]] += 1\n    return result \n",
        "num_ids": 58
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for item in test_list:\n        if item[0] in occurences:\n            occurences[item[0]] += 1\n        else:\n            occurences[item[0]] = 1\n    return occurences\n",
        "num_ids": 64
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    count_dict = dict.fromkeys(test_list, 0)\n    for item in test_list:\n        count_dict[item] += 1\n    return count_dict\n",
        "num_ids": 46
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    \n    # initialize the count variable \n    count = 0 \n    \n    # loop through the string \n    for i in range(len(str)): \n        \n        # if the string is not empty \n        if str[i]!= str[i+1]: \n            count = count + 1 \n        \n    # return the count \n    return count \n",
        "num_ids": 93
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    lst = []\n    lst_count = 0\n    if len(str) < 2:\n        return 0\n",
        "num_ids": 30
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n=0\n    for i in range(0,len(str)-1):\n        if (str[i]==str[i+1]):\n            n+=1\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize an empty list of non-empty strings\n    str_lst = []\n    # iterate through the string \n    for i in range(len(str)):\n        # iterate through the substring\n        for j in range(i, len(str)):\n            # if the substring is non-empty, add it to the list\n            if str[i:j+1]!= '':\n                # add it to the list\n                str_lst.append(str[i:j+1])\n",
        "num_ids": 123
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num = 0\n    for i in range(len(str)-1):\n        if str[i:i+2]==str[i+1:i+3]:\n            num+=1\n        else:\n            pass\n    return num\n",
        "num_ids": 58
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n=0\n    for i in range(0,len(str)):\n        for j in range(0,len(str)-i):\n            if str[j:j+i]!= str[j+i:j+i+1]:\n                break\n        else:\n            n = n+1\n    return n\nprint(number_of_substrings(\"aba\"))\nprint(number_of_substrings(\"abc\")",
        "num_ids": 102
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    #Get the size of the string\n    size = len(str)\n    #Initialize an empty list to store the substrings\n    substrings = []\n    \n    #Loop through the string\n    for i in range(0, size):\n        for j in range(i+1, size):\n            #If the substring is empty, append it to the list of substrings\n            if str[i:j] == \"\":\n                substrings.append(str[i:j])\n    \n    #Return the number of substrings\n    return len(substrings)\n    \n",
        "num_ids": 137
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def count_substrings(str):\n        '''\n        Write a Python function that returns the number of non-empty substrings in a given string.\n        '''\n        start = 0\n        count = 0\n        for i in range(len(str)):\n            if str[i] == str[i+1]:\n                count += 1\n            else:\n                if count > 0:\n                    count -= 1\n                start = i\n        return count\n",
        "num_ids": 68
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #get the length of the string \n    len_str = len(str)\n    #loop through the string \n    count = 0\n    #find the lenght of the string \n    for i in range(len_str - 1):\n        #if the string contains any non-space characters \n        if str[i]!='' and str[i]!= '\\n' and str[i]!= '\\t':\n            #check if the string starts with the string \n            if str[i] == str[i+1] and str[i]!= '\\t':\n                #increase count \n                count += 1\n    return count\n",
        "num_ids": 158
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    count = 0\n    for i in range(0,len(str)-1):\n        for j in range(0, len(str)):\n            if str[i:j+1] == str[i:j+1][::-1]:\n                count += 1\n    return count\n    # test your code\n    # print(number_of_substrings('abc'))\n    # print(number_of_substrings('hello'))\n",
        "num_ids": 111
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # find the number of sequences of length n of length m.\n    # - create a dictionary of the number of sequences of length n of length m\n    # - create a list of all the numbers that are greater than or equal to the previous element but less than or equal to the next element, for each number in the dictionary. \n    # - create a list of all the numbers in the dictionary that are less than or equal to the next element but greater than or equal to the previous element.\n    # - return the total number of sequences of length n.\n    #\n    # HINT: assume m < n\n    #\n    # EXAMPLE:\n    # m = 3, n = 2\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7,8]\n    #   [1,2,3,4,5,6,7,8]\n    #\n    #   [1,2,3,4,5,6,7",
        "num_ids": 1972
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    assert (m > 0 and n > 0), \"The input values must be positive.\"\n    assert(n % 2 == 0), \"The length of the sequences must be even.\"\n",
        "num_ids": 44
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import math\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if j + i >= m:\n                break\n            else:\n                if m%i!= 0:\n                    count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #This line is for my solution\n    #pass #pass #pass \n    pass\n",
        "num_ids": 23
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    print(\"Testing the function.\")\n    result = 0\n    #will make a list with all possible sequences of length n\n    all_sequences = []\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if (i*j)%2 == 0:\n                all_sequences.append(i*j)\n    #prints all possible sequences\n    print(all_sequences)\n    #will make a list of the numbers that are in all_sequences\n    for sequence in all_sequences:\n        if sequence in all_sequences:\n            result += 1\n    #prints the number of possible sequences\n    print(result)\n",
        "num_ids": 162
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # write your code here\n    if m==1 or n==1:\n        return 0\n    if m<=0 or n<=0:\n        return 0\n    return  ((1+m//2)**n)%1000000007\n",
        "num_ids": 59
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Makes m,n positive integers. \n    m,n = map(int,(m,n))\n    \n    #Creates an array of all possible positive integers.\n    nums = [i for i in range(1,m+1)]\n    \n    #Returns the number of possible sequences of length n. \n    return sum([1 for x in range(n) if nums[x]**2 == m and nums[x] > m])\n",
        "num_ids": 110
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq_count = (n*n) // 2\n    total_seq = 0\n    for i in range(m, seq_count + 1):\n        for j in range(m, i - 1, -1):\n            if i%j == 0 and j%i == 0:\n                total_seq+=1\n    return total_seq\n",
        "num_ids": 81
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 0 or n < 0 or m > n:\n        raise Exception(\"Error: m and n must be valid positive integers\")\n    \n    total_length = 0\n    for i in range(1, m):\n        total_length += n - i\n    return total_length\n",
        "num_ids": 68
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for index in range(len(list1)):\n        list1[index] = list2[index]\n",
        "num_ids": 28
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n",
        "num_ids": 33
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1 + list2\n    \nif __name__ == '__main__':\n    list1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n    list2 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n    print(replace_list(list1,list2)",
        "num_ids": 118
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #a = list1[0]\n    #b = list1[1]\n    #c = list2[0]\n    #d = list2[1]\n    #list1[0] = c\n    #list1[1] = d\n    #list2[0] = a\n    #list2[1] = b\n    \n    return list1,list2\n",
        "num_ids": 92
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    temp_list1 = list1[0:]\n    temp_list2 = list2[0:]\n    temp_list1.append(list2[-1])\n    temp_list2.append(list2[-1])\n    return temp_list1,temp_list2\n",
        "num_ids": 68
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # YOUR CODE HERE\n    list1.reverse()\n    list1.pop()\n    list2.reverse()\n    list2.pop()\n    list1[-1] = list2[-1]\n    return list1\n",
        "num_ids": 56
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n",
        "num_ids": 28
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list2)],list2\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)> len(list2):\n        list2.extend(list1)\n        return list2\n    elif len(list1) < len(list2):\n        list1.extend(list2)\n        return list1\n    else:\n        pass\n",
        "num_ids": 70
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(\"Here's what I have now:\")\n    for i in range(0,len(list1)):\n        print(i,list1[i])\n    for i in range(0,len(list2)):\n        print(i,list2[i])\n    for i in range(0,len(list1)):\n        list1[i] = list2[i]\n    return list1\n    \nlist1 = [3,2,5,6,3,2,7,2,1,4,5,6]\nlist2 = [7,5,2,1,5,6,3,4,6,7,5]\nlist1 = replace_list(list1,list2)\nprint(\"The lists now have the correct elements:\")\nprint(list1)\n",
        "num_ids": 189
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    ct = 0\n    for ch in str1:\n        if ch == \" \":\n            ct = ct+1\n    return ct\n",
        "num_ids": 36
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in str1:\n        if i.isalpha():\n            charac+=1\n    return charac\n",
        "num_ids": 35
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    l=len(str1)\n    count=0\n    for i in range(l):\n        if(str1[i]==' '):\n            count+=1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count_char = 0\n    for c in str1:\n        count_char += 1\n    return count_char\n",
        "num_ids": 30
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for c in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c=0\n    for i in str1:\n        if i.isalpha():\n            c=c+1\n    return c\n",
        "num_ids": 34
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    p = math.sqrt(N)\n    for i in range(N):\n        if N//p**2 == int(N/p**2) and N%p==0:\n            return N\n    return False\n    \n",
        "num_ids": 56
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<=0:\n        return 0\n    if N%2==0:\n        return next_Perfect_Square(N/2)\n    else:\n        temp=math.sqrt(N)\n        if temp==int(temp):\n            return temp\n        else:\n            return temp+next_Perfect_Square(temp+1)\n        \nprint(next_Perfect_Square(6))",
        "num_ids": 95
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0 or N == 1:\n        return N\n    else:\n        if N % 2!= 0:\n            return next_Perfect_Square(N-1)\n        else:\n            return (N*N)+(N+1)\n        \n    \nN = int(input('Enter the number: '))\nprint(next_Perfect_Square(N))\n",
        "num_ids": 89
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(2, int(math.sqrt(N))+1):\n        if N % i == 0:\n            if (N//i)**2 > N:\n                return N//i**2\n            else:\n                return N//i**2\n    return N+1\n",
        "num_ids": 71
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s = 2*N + 1\n    for k in range(s, N, 2):\n        if s**2 + 1 == N**2:\n            return s**2\n        s += 1\n    return None\n",
        "num_ids": 52
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1: \n        return N\n    else: \n        x = 1\n        while x ** 2 <= N: \n            y = x + 1\n            while y ** 2 <= N: \n                z = x + y \n                if (z ** 2) == N: \n                    return z \n                y = z \n            x = z \n        return None\n    return None\n",
        "num_ids": 96
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        return next_Perfect_Square(N-1) + next_Perfect_Square(N-2)\n",
        "num_ids": 53
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # End and Start points are calculated\n    a, b = 0, N + 1\n    # The formula for the sum of the squares is\n    sum = 0\n    # The square of the sum is \n    # x = square of sum + 1\n    # the factorial is the sum of x squares.\n    while (a <= b): \n        # The sum of the squares is \n        # sum = sum + square of sum + 1\n        sum += a * a \n        # The square of the sum is \n        # sum = sum + square of sum + 1\n        # and if the sum is less than square of sum \n        # is then we divide the sum by square of sum + 1\n        # and we repeat this process until the sum is equal to square of sum + 1.\n        while (sum <= b ** 0.5): \n            a = a + 1\n            sum = sum + a * a\n        # If the sum is less than square of sum \n        # is then we divide the sum by square of sum + 1\n        # and we repeat this process until the sum is equal to square of sum + 1.\n        if (sum <= b ** 0.5):\n            b = b + 1\n        else:\n            # If the sum is greater than square of sum \n            # is then we add the square of the sum with \n            # the remainder of dividing sum by square of sum + 1\n            # and we repeat this process until the sum is equal to square of sum + 1.\n            while (sum > b ** 0.5): \n                b = b + 1\n                sum = sum + b * b\n    # If we reached the end of the while loop, we can return the square of the sum.\n    return (a * a) * sum\ndef next_Perfect_Square_Smaller(N): \n    '''\n    Write a python function to find the next perfect square less than a given number.\n    '''\n    # End and Start points are calculated\n    a, b = 0, N + 1\n    # The formula for the sum of the squares is\n    sum = 0\n    # The square of the sum is \n    # x = square of sum + 1\n    # the factorial is the sum of x squares.\n    while (a <= b): \n        # The sum of the squares is \n        # sum = sum + square of sum + 1\n        sum += a * a \n        # The square of the sum is \n        # sum = sum + square of sum + 1\n        # and if the sum is greater than square of sum \n        # is then we divide the sum by square of sum + 1\n        # and we repeat this process until the sum is equal to square of sum + 1.\n        if (sum <= b ** 0.5): \n            a = a + 1\n        else:\n            # If the sum is greater than square of sum \n            # is then we divide the sum by square of sum + 1\n            # and we repeat this process until the sum is equal to square of sum + 1.\n            while (sum < b ** 0.5): \n                a = a + 1\n                sum = sum + a * a\n            # If the sum is less than square of sum \n            # is then we add the square of the sum with \n            # the remainder of dividing sum by square of sum + 1\n            # and we repeat this process until the sum is equal to square of sum + 1.\n            if (sum < b ** 0.5):\n                b = b - 1\n    # If we reached the end of the while loop, we can return the square of the sum.\n    return (a * a) * sum\ndef next_Perfect_Square_Even(N): \n    '''\n    Write a python function to find the next perfect square even number.\n    '''\n    # End and Start points are calculated\n    a, b = 0, N + 1\n    # The formula for the sum of the squares is\n    sum = 0\n    # The square of the sum is \n    # x = square of sum + 1\n    # the factorial is the sum of x squares.\n    while (a <= b): \n        # The sum of the squares is \n        # sum = sum + square of sum + 1\n        sum += a * a \n        # The square of the sum is \n        # sum = sum + square of sum + 1\n        # and if the sum is even then we divide the sum by square of sum + 1\n        # and we repeat this process until the sum is equal to square of sum + 1.\n        if (sum % 2 == 0):\n            a = a + 1\n        else:\n            # If the sum is even then we add the square of the sum with \n            # the remainder of dividing sum by square of sum + 1\n            # and we repeat this process until the sum is equal to square of sum + 1.\n            while (sum % 2 == 0): \n                a = a + 1\n                sum = sum + a * a\n            # If the sum is odd then we divide the sum by square of sum + 1\n            # and we repeat this process until the sum is equal to square of sum + 1.\n            if (sum % 2 == 1):\n                b = b - 1\n    # If we reached the end of the while loop, we can return the square of the sum.\n    return (a * a) * sum\ndef next_Perfect_Square_Odd(N): \n    '''\n    Write a python function to find the next perfect square odd number.\n    '''\n    # End and Start points are calculated\n    a, b = 0, N + 1\n    # The formula for the sum of the squares is\n    sum = 0\n    # The square of the sum is \n    # x = square of sum + 1\n    # the factorial is the sum of x squares.\n    while (a <= b): \n        # The sum of the squares is \n        # sum = sum + square of sum + 1\n        sum += a * a \n        # The square of the sum is \n        # sum = sum + square of sum + 1\n        # and if the sum is odd then we divide the sum by square of sum + 1\n        # and we repeat this process until the sum is equal to square of sum + 1.\n        if (sum % 2 == 1):\n            a = a + 1\n        else:\n            # If the sum is odd then we add the square of the sum with \n            # the remainder of dividing sum by square of sum + 1\n            # and we repeat this process until the sum is equal to square of sum + 1.\n            while (sum % 2 == 1): \n                a = a + 1\n                sum = sum + a * a\n            # If the sum is even then we add the square of the sum with \n            # the remainder of dividing sum by square of sum + 1\n            # and we repeat this process until the sum is equal to square of sum + 1.\n            if (sum % 2 == 0):\n                b = b - 1\n    # If we reached the end of the while loop, we can return the square of the sum.\n    return (a * a) * sum\ndef next_Perfect_Square_Large(N): \n    '''\n    Write a python function to find the next perfect square for a given number.\n    '''\n    # End and Start points are calculated\n    a, b = 0, N + 1\n    # The formula for the sum of the squares is\n    sum = 0\n    # The square of the sum is \n    # x = square of sum + 1\n    # the factorial is the sum of x squares.\n    while (a <= b): \n        # The sum of the squares is \n        # sum = sum + square of sum + 1\n        sum += a * a \n        # The square of the sum is \n        # sum = sum + square of sum + 1\n        # and if the sum is greater than square of sum \n        # is then we divide the sum by square of sum + 1\n        # and we repeat this process until the sum is equal to square of sum + 1.\n        if (sum <= b ** 0.5): \n            a = a + 1\n        else:\n            # If the sum is greater than square of sum \n            # is then we add the square of the sum with \n            # the remainder of dividing sum by square of sum + 1\n            # and we repeat this process until the sum is equal to square of sum + 1.\n            while (sum > b ** 0.5): \n                a = a + 1\n                sum = sum + a * a\n            # If the sum is less than square of sum \n            # is then we add the square of the sum with \n            # the remainder of dividing sum by squar",
        "num_ids": 333
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = N % 10\n    if N > 0:\n        p = int(math.sqrt(N))\n        l = p * p\n        return (l - N) + (l - N) // 2 + 1\n    else:\n        return 1\n",
        "num_ids": 62
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    p = 0 \n    i = 0\n    while (p < N):\n        if(p**2 <= N):\n            i = i + 1\n            p = p + 1\n            N = p**2\n        else:\n            break\n",
        "num_ids": 59
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if (len(arr) == 0): \n        return 0\n    if (len(arr) == 1): \n        return arr[0] \n",
        "num_ids": 38
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum_set = []\n    sum_dict = {}\n",
        "num_ids": 16
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # find start and end of bitonic subsequences\n    start, end = 0, 0\n    for i in range(1, len(arr)): \n        # if the next element is greater than the previous element,\n        # then the current element is a bitonic subsequence\n        # i.e. start element = next element\n        # prev element = current element\n        # if prev element is less than next element, then it's a bitonic\n        if arr[i] > arr[i-1]:\n            # if i is greater than start, then we need to update start\n            # i is the current element, so we add 1 to start\n            # because start is 1 less than the current element\n            # i is not greater than the current element, and we need to add 1 to the current element\n            # so start is 1, so we have to subtract 1 from start\n            # since start is 1, we don't need to check the next element\n            # to see if we found the bitonic subsequence\n            start += 1\n            # if the current element is less than the prev element\n            # it's a bitonic, so we can skip to the next element\n            # and we can increase start by 1\n            if arr[i] < arr[i-1]:\n                start += 1\n                # if the next element is greater than the prev element,\n                # it's a bitonic, so we can skip to the next element\n                # since it's a bitonic, we can increase start by 1\n                # since it's a bitonic, we have to add 1 to start\n                # since start is 1, so we have to add 1 to the current element\n                # since start is 1, we don't need to check the next element\n                # to see if we found the bitonic subsequence\n                if arr[i] > arr[i-1]:\n                    start += 1\n    return start\n",
        "num_ids": 427
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr)\n    \n    if n == 1: \n        return arr[0]\n    \n    left = [0 for x in range(n)]\n    right = [0 for x in range(n)]\n    for i in range(1, n): \n        if arr[i] > arr[i-1]:\n            left[i] = left[i-1]\n            right[i] = right[i-1]\n        elif arr[i] < arr[i-1]:\n            left[i] = arr[i-1]\n            right[i] = arr[i]\n        else: \n            left[i] = max(arr[i-1], arr[i])\n            right[i] = max(arr[i], arr[i-1])\n    \n    result = max(max(left), max(right))\n    \n    return result",
        "num_ids": 212
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i=0\n    max_sum_bitonic=0\n    while i<len(arr)-1:\n        j=i+1\n        while j<len(arr):\n            if arr[j]<arr[i]:\n                j+=1\n            elif arr[j]>arr[i]:\n                j+=1\n                break\n            else:\n                j+=1\n        if j-i+1>max_sum_bitonic:\n            max_sum_bitonic=j-i+1\n        i+=1\n    return max_sum_bitonic\n",
        "num_ids": 135
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # if all the elements are the same, return the array itself\n    if len(arr) == 1: \n        return arr[0]\n    # if all the elements are increasing, find the maximum sum for all the other elements\n    if arr[0] < arr[1]:\n        return arr[0] + max_sum(arr[1:])\n    return max_sum(arr[1:])\n",
        "num_ids": 95
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Sort the array \n    n = len(arr)\n    arr.sort()\n    # Keep track of the running sum \n    ans = 0\n    # Track the longest sequence \n    max_seq = arr[0] \n    # Track the highest bitonic sequence \n    highest_bitonic = 1\n    # For every bitonic subsequence, add the bitonic sequence to the running sum and continue until the current bitonic sequence is the highest bitonic sequence \n    for i in range(1, n): \n        # If the current bitonic sequence is the highest bitonic, increase the running sum \n        # If the current bitonic sequence is lower than the highest bitonic, decrease the running sum \n        if arr[i] == highest_bitonic: \n            # Keep on increasing the running sum \n            ans += highest_bitonic * (arr[i] - highest_bitonic)\n            # Keep on decreasing the running sum \n            highest_bitonic *= -1\n            # Update the maximum sequence \n            max_seq = max(max_seq, ans) \n        # If the current bitonic sequence is lower than the highest bitonic, decrease the running sum \n        # If the current bitonic sequence is higher than the highest bitonic, increase the running sum \n        else: \n            # Keep on increasing the running sum \n            ans += highest_bitonic * (arr[i] - highest_bitonic)\n            # Keep on decreasing the running sum \n            highest_bitonic *= -1\n            # Update the maximum sequence \n            max_seq = max(max_seq, ans) \n    return max_seq ",
        "num_ids": 378
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    m = arr[0]\n    for i in range(1, len(arr)):\n        m = max(m, arr[i] + max_sum(arr[:i]))\n    return m\n",
        "num_ids": 68
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_arr = []\n    for i in arr:\n        max_arr.append(i)\n    for i in range(1, len(arr)):\n        max_arr[i] = max(max_arr[i - 1], arr[i])\n    return max(max_arr)\n",
        "num_ids": 72
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 33
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        result = babylonian_squareroot(number-1)\n        if result < number:\n            return result\n        else:\n            return 2**(len(str(number)))-1\n",
        "num_ids": 85
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Python version 3.7 and above\n    from math import sqrt\n    # Python version 3.5 and above\n    from math import pow\n",
        "num_ids": 35
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return round(babylonian_squareroot_v2(number), 5)\n",
        "num_ids": 22
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    divisors = []\n    for x in range(1, int(math.sqrt(number))+1):\n        if number % x == 0:\n            divisors.append(x)\n            divisors.append(int(number/x))\n            number = int(number/x)\n    return sum(divisors)\n",
        "num_ids": 82
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Implement the function\n    number = abs(number)\n    babylonian_squareroot = 1\n    while(number > 0):\n        if(number % 2 == 0):\n            babylonian_squareroot = babylonian_squareroot * 2\n            number = number // 2\n        else:\n            babylonian_squareroot = babylonian_squareroot * 3\n            number = number * 2\n    return babylonian_squareroot\n",
        "num_ids": 108
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    num = number\n    sqrt = 0\n    while num > 0:\n        if num > 1:\n            num = num**2\n        else:\n            num = num*0\n    return sqrt\n",
        "num_ids": 50
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square = 0\n    while number > 0:\n        square = square + number / (2 * number)\n        number = number - square * number\n    return square\n",
        "num_ids": 40
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(2)\n    >>> 1/2\n    0.5\n    >>> baby_squareroot(3)\n    2.0\n    >>> baby_squareroot(10)\n    0.1\n    '''\n    '''\n    Convert the float number to an int\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(3)\n    2\n    >>> baby_squareroot(10)\n    0.1\n    '''\n    '''\n    Check to make sure the float number is in the range 0 to 1\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(3.34)\n    Traceback (most recent call last):\n    ...\n    ValueError: float must be between 0 and 1\n    '''\n    '''\n    Convert the float number to an int\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(10.2)\n    10\n    '''\n    '''\n    Check to make sure the float number is in the range 0 to 1\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(-1)\n    Traceback (most recent call last):\n    ...\n    ValueError: float must be between 0 and 1\n    '''\n    '''\n    Compute the square root using the Babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(7)\n    1.2\n    >>> baby_squareroot(4.6)\n    1.0\n    >>> baby_squareroot(2)\n    0.5\n    '''\n    '''\n    Compute the square root using the Babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(4.6)\n    1.0\n    '''\n    '''\n    Compute the square root using the Babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(7)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(7)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(4.6)\n    1.0\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(2)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(3)\n    0.75\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(10)\n    0.1\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: float must be between 0 and 1\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(10.2)\n    10\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(2.75)\n    1.25\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(0.75)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(0.1)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(0.5)\n    0.25\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(1)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(7.6)\n    2.25\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(0.75)\n    0.25\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(0.1)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(0.5)\n    0.25\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(1)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(3.4)\n    2.25\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(10)\n    0.1\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(5.8)\n    0.25\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(2.7)\n    0.75\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(6.3)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(1.6)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(7.9)\n    2.25\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(0.1)\n    0.5\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(0.5)\n    0.25\n    '''\n    '''\n    Return the int result of the square root using the babylonian method.\n    '''\n    '''\n    Example:\n    \n    >>> baby_squareroot(1)\n    0",
        "num_ids": 20
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square = number\n    square_mult = 1\n    while square_mult <= square:\n        square_mult *= 2\n    num = 1\n    while num <= square:\n        num = 1 / square\n        num += 1\n    root = number - 1\n    return (root, square)\n",
        "num_ids": 70
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = 0\n    palindromes = []\n    # base case\n    if (len(str) <= 1):\n        return len(str)\n    # loop through every substring\n    for i in range(len(str)):\n        # base case, if current substring is empty, add it to the palindromes list\n        if (str[i] == str[i][::-1]):\n            palindromes.append(str[i])\n        else:\n            # loop through other substring and add to the length\n            for j in range(i+1, len(str)):\n                # if current substring matches palindrome, append it\n                if (str[i:j+1] == str[i:j+1][::-1]):\n                    palindromes.append(str[i:j+1])\n                    break\n    # return the length of the longest palindromic subsequence\n    return len(palindromes)\n",
        "num_ids": 229
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    substring_string = ''.join([str[i:i+2] for i in range(len(str)-1)])\n    return len(max(substring_string, key=len))\n",
        "num_ids": 49
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def findLPS(str):\n        '''\n        This function takes a string as input and find the longest palindromic subsequence in the string.\n        '''\n        if len(str) == 1:\n            return 1\n        if str[0]!= str[-1]:\n            return findLPS(str[1:])\n        else:\n            return 1 + findLPS(str[1:-1])\n    return findLPS(str)",
        "num_ids": 69
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str is None or len(str) <= 0: \n        return 0\n    \n    odd_flag = True\n    \n    for i in range(len(str) - 1): \n        if str[i] == str[i + 1]: \n            if odd_flag: \n                odd_flag = False\n                continue\n            else: \n                return i + 1\n    return 0\n",
        "num_ids": 95
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1:\n        return 1\n    if str[0] == str[-1]:\n        return 1 + lps(str[1:-1])\n    return max(lps(str[1:]), lps(str[:-1]))\n",
        "num_ids": 65
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #Initialize an empty string to store the length of the longest palindromic subsequence\n    longest_palindrome = 0\n    \n    #Iterate from 1 to the end of the string\n    for index in range(len(str)):\n        \n        #If the current index is the length of the longest palindrome, we have found a palindrome\n        if index - 1 >= 0 and str[index] == str[index - 1] and index < len(str) - 1:\n            \n            #If the string is palindromic, we have found it\n            if (index + 1) == len(str):\n                longest_palindrome = index + 1\n            else:\n                longest_palindrome = max(index + 1, longest_palindrome)\n        \n        #If the index is not the length of the longest palindrome, we haven't found a palindrome\n        elif index - 1 >= 0:\n            \n            #We don't want to count the index as a palindrome, so we need to add the index + 1 to the current index.\n            #We'll do this by adding one to the current index.\n            if index - 1 < len(str) - 1:\n                longest_palindrome = max(index + 1, longest_palindrome)\n    \n    #Return the length of the longest palindrome\n    return longest_palindrome\n    \ndef lps(str):\n    '''\n    Given a string, write a function that returns the length of the longest palindromic subsequence in the string.\n    '''\n    #Initialize an empty string to store the length of the longest palindrome\n    longest_palindrome = 0\n    \n    #Iterate from 1 to the end of the string\n    for index in range(len(str)):\n        \n        #If the current index is the length of the longest palindrome, we have found a palindrome\n        if index - 1 >= 0 and str[index] == str[index - 1] and index < len(str) - 1:\n            \n            #If the string is palindromic, we have found it\n            if (index + 1) == len(str):\n                longest_palindrome = index + 1\n            else:\n                longest_palindrome = max(index + 1, longest_palindrome)\n        \n        #If the index is not the length of the longest palindrome, we haven't found a palindrome\n        elif index - 1 >= 0:\n            \n            #We don't want to count the index as a palindrome, so we need to add the index + 1 to the current index.\n            #We'll do this by adding one to the current index.\n            if index - 1 < len(str) - 1:\n                longest_palindrome = max(index + 1, longest_palindrome)\n    \n    #Return the length of the longest palindrome\n    return longest_palindrome\n",
        "num_ids": 323
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    size = len(str)\n    if(size < 1):\n        return 0\n    \n    if(str == str[::-1]):\n        return 1\n    \n    dp = [[0]*(size+1) for i in range(size+1)]\n",
        "num_ids": 65
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0: return 0\n    if len(str) == 1: return 1\n",
        "num_ids": 26
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 1: \n        return 0\n    else: \n        if str[0] == str[-1]: \n            return 1 + lps(str[1:-1]) \n        else: \n            return max(lps(str[1:]), lps(str[:-1])) \n",
        "num_ids": 79
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def length(str): \n        # base case\n        if len(str) == 1:\n            return 1\n        elif str[0] == str[-1]:\n            return 1 + length(str[1:-1])\n        else:\n            return 1 + max(length(str[1:]), length(str[:-1]) )\n    return length(str)\n",
        "num_ids": 89
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harm = 1.0/n\n    for i in range(n):\n        harm += 0.5*(i+1)*(i+2)*harm\n    return harmonic_sum\n",
        "num_ids": 45
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # your code goes here\n    h=1\n    for i in range(2,n):\n        h=h+(1/i)\n    return h",
        "num_ids": 38
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + (n - 1) * (1/12)\n",
        "num_ids": 18
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 1\n    if n == 1:\n        return 1\n    else:\n        for i in range(1, n+1):\n            total = total * (n-i)\n        return total\n",
        "num_ids": 50
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #Write your code here\n    return n/2\n",
        "num_ids": 15
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(2, n+1):\n        harmonic_sum = harmonic_sum + (i/i)\n    return harmonic_sum\n",
        "num_ids": 45
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 1\n    for i in range(1, n+1):\n        harmonic *= (i)\n    return harmonic\n",
        "num_ids": 34
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    n = int(n)\n    if n == 0:\n        return 1\n    for i in range(n, 0, -1):\n        harmonic_sum += i / (i + 1)\n    return harmonic_sum\n",
        "num_ids": 63
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n / (1.0 + (n - 1) / n)\n",
        "num_ids": 20
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    l1 = len(array_nums1)\n    l2 = len(array_nums2)\n    i,j = 0,0\n    arr = []\n    while i<l1 and j<l2:\n        if array_nums1[i] == array_nums2[j]:\n            arr.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i]<array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return arr\n    \ndef k_intersection(k,arr,size):\n    '''\n    Given an array of integers arr and an integer k, return an array of the first k integers in the array.\n    '''\n    i = 0\n    while i<size:\n        if i<k:\n            j = i\n            while j<size:\n                if arr[j] < arr[i]:\n                    arr[j],arr[i] = arr[i],arr[j]\n                j+=1\n            i+=1\n        else:\n            break\n    return arr\ndef main():\n    print(intersection_array([1,2,3,4,5], [2,3,5,7,8]))\n    print(k_intersection(2,[1,2,3,4,5],4))\n    print(k_intersection(3,[1,2,3,4,5],4))\n",
        "num_ids": 166
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr1_intersected = []\n    arr2_intersected = []\n",
        "num_ids": 22
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1_nums = set(array_nums1)\n    set2_nums = set(array_nums2)\n    intersection = set1_nums.intersection(set2_nums)\n    return intersection\n",
        "num_ids": 58
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1_set = set(array_nums1)\n    array_nums2_set = set(array_nums2)\n    # intersection = list(array_nums1_set & array_nums2_set)\n    intersection = list(array_nums1_set & array_nums2_set)\n    return intersection\n",
        "num_ids": 88
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_1 = []\n    array_2 = []\n    \n    for i in array_nums1:\n        if i in array_nums2:\n            array_1.append(i)\n        else:\n            array_2.append(i)\n    \n    return array_1,array_2\n    \n",
        "num_ids": 78
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    inter_array = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            inter_array.append(array_nums1[i])\n    return inter_array\n",
        "num_ids": 65
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here.\n    # make a copy of the array\n    # sort the array\n    # check if they are equal\n    # if they are return a new array\n    # if they are not return error\n    # if they are return error\n    # find the element of that array that matches with the second array \n    # if they don't match return -1\n    \n    array1=array_nums1\n    array2=array_nums2\n    \n    array1.sort()\n    array2.sort()\n    #print(array1)\n    #print(array2)\n    \n    for i in range(len(array1)):\n        for j in range(len(array2)):\n            if array1[i]==array2[j]:\n                return array1[i]\n    return -1\n    \n    \n    \n    \n",
        "num_ids": 204
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)!=len(array_nums2):\n        print('Intersection length does not match')\n    else:\n        count=0\n        for i in array_nums1:\n            if i in array_nums2:\n                count+=1\n        return count\n",
        "num_ids": 73
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = set()\n    if array_nums1.count(0) == array_nums2.count(0):\n        return None\n    for i in range(len(array_nums1)):\n        if array_nums1[i] == array_nums2[i]:\n            continue\n        else:\n            if array_nums1[i] <= array_nums2[i]:\n                intersection.add(array_nums1[i])\n            else:\n                intersection.add(array_nums2[i])\n    return intersection\n",
        "num_ids": 138
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a,b = len(array_nums1), len(array_nums2)\n    if a==0 or b==0:\n        return []\n",
        "num_ids": 39
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(tup)-len(set(tup)-set(x))\n",
        "num_ids": 21
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for x in tup:\n        if x == x:\n            count += 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(tup)\n    \nprint(count_X((1, 3, 4, 5), 2))\nprint(count_X((1, 3, 4, 5), 4))\nprint(count_X((1, 3, 4, 5), 5))\n",
        "num_ids": 63
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for i in tup:\n        if i==x:\n            count+=1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # check if the tuple is empty\n    if len(tup) == 0:\n        return 0\n    # if the element is a string, convert it to an integer\n    if type(x) == str:\n        x = tup.count(x)\n        # if the integer does not equal to 0, return 0\n        if x!= 0:\n            return 0\n        # else return the integer\n        else:\n            return 1\n    # if the element is an integer, convert it to an int\n    elif type(x) == int:\n        x = tup.count(x)\n        # if the integer does not equal to 0, return 0\n        if x!= 0:\n            return 0\n        # else return the integer\n        else:\n            return 1\n    # if the element is not an int, it must be a string, convert it to an int\n    else:\n        print(\"Error: The element must be a string, an integer, or a float\")\n        count_X(tup, x)\n",
        "num_ids": 238
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    result = 0\n    for el in tup:\n        if el == x:\n            result += 1\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    my_dict = {}\n    for i in tup:\n        if i in my_dict:\n            my_dict[i] = my_dict[i] + 1\n        else:\n            my_dict[i] = 1\n    return my_dict[x]\n",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for i in tup:\n        if i == x:\n            occ += 1\n    return occ\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for i in tup:\n        if i == y:\n            occ += 1\n    return occ\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code here\n    return(tup.count(x))\ndef count_Y(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code here\n    return(tup.count(x))\n    \n    \ndef count_X_Y(tup, x, y):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code here\n    return(tup.count(x))*(tup.count(y))\n",
        "num_ids": 28
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # TODO: Complete this function by filling in this docstring\n    # Complete this function\n    #\n    #Input\n    # list: A list\n    # element: A value to insert in the list at the position specified by the parameter\n    #\n    #Returns\n    # list: A new list that contains the new element inserted.\n    #\n    #Example\n    # insert_element([1,2,3,4,5,6],2) # should return [1,2,3,4,5,6,2]\n    # insert_element([1,2,3,4,5,6],3) # should return [1,2,3,4,5,6,3]\n    # insert_element([1,2,3,4,5,6],6) # should return [1,2,3,4,5,6,6]\n    #\n    #Input\n    # list: A list\n    # element: An element to insert\n    #\n    #Returns\n    # list: A new list that contains the new element inserted.\n    #\n    #Example\n    # insert_element([1,2,3,4,5,6],3) # should return [1,2,3,4,5,6,3]\n    # insert_element([1,2,3,4,5,6],5) # should return [1,2,3,4,5,6,5]\n    # insert_element([1,2,3,4,5,6],6) # should return [1,2,3,4,5,6,6]\n    #\n    #Input\n    # list: A list\n    # element: An element to insert\n    #\n    #Returns\n    # list: A new list that contains the new element inserted.\n    #\n    #Example\n    # insert_element([1,2,3,4,5,6],3) # should return [1,2,3,4,5,6,3]\n    # insert_element([1,2,3,4,5,6],6) # should return [1,2,3,4,5,6,6]\n",
        "num_ids": 501
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list.insert(element)\n",
        "num_ids": 11
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #Your code here\n    \n    if len(list) == 0:\n        return None\n    else:\n        for i in range(len(list)):\n            if list[i] == element:\n                list.insert(i,element)\n                return list\n        return None\n    \n",
        "num_ids": 70
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        result = []\n        i = 0\n        while i < len(list):\n            if element < list[i]:\n                result.append(element)\n                break\n            else:\n                result.append(list[i])\n            i += 1\n        return result\n",
        "num_ids": 82
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n    for i in range(len(list)):\n        new_list[i] = list[i]\n    list.clear()\n    list.extend(new_list)\n    list.append(element)\n    return list\n",
        "num_ids": 80
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        list[i] = element\n    return new_list",
        "num_ids": 46
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n    \ndef merge_lists(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list containing all of the elements of both lists. \n    '''\n    new_list = list()\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            new_list.append(list1[i])\n            i += 1\n        else:\n            new_list.append(list2[j])\n            j += 1\n    while i < len(list1):\n        new_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        new_list.append(list2[j])\n        j += 1\n    return new_list\n",
        "num_ids": 154
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index = 0\n    for i in range(len(list)):\n        list[i] = element\n        index = index + 1\n    return list\n",
        "num_ids": 38
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for element in list:\n        if element!= None:\n            new_list.append(element)\n        else:\n            new_list.append(None)\n    new_list.append(element)\n    return new_list\n",
        "num_ids": 64
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(numbers)\n    print(complex(numbers))\n    \ndef convert_to_polar(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(numbers)\n    print(complex(numbers).real)\n    print(complex(numbers).imag)\n    \ndef convert_to_polar_and_distance(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(numbers)\n    print(complex(numbers).real)\n    print(complex(numbers).imag)\n    print(cmath.sqrt(complex(numbers).imag))\n    \ndef convert_to_radians(numbers):\n    '''\n    Write a python function to convert complex numbers to radians.\n    '''\n    print(numbers)\n    print(complex(numbers).real)\n    print(complex(numbers).imag)\n    print(cmath.radians(complex(numbers).real))\n    print(cmath.radians(complex(numbers).imag))\n",
        "num_ids": 65
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)!= list:\n        numbers = [numbers]\n    numbers = list(map(lambda x: (x.real, x.imag), numbers))\n    numbers = [complex(x) for x in numbers]\n    return numbers\n",
        "num_ids": 64
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #If the value is a complex number\n    if isinstance(numbers,(complex,np.complex)) == True:\n        #Create the polar coordinates for the complex numbers.\n        r = numbers.real\n        i = numbers.imag\n        #Convert it to real and imaginary parts and return the angle.\n        return [r,i]\n    #If the value is an int or float\n    if isinstance(numbers,(int,float)) == True:\n        #Create the polar coordinates for the int or float values\n        r = round(numbers,2)\n        #Convert it to real and imaginary parts and return the angle.\n        return [r]\n    #If the value is a string\n    if isinstance(numbers,(str)) == True:\n        #Create the polar coordinates for the string\n        r = convert(numbers[0])\n        #Convert it to real and imaginary parts and return the angle.\n        return [r]\n    #If the value is an array or list\n    if isinstance(numbers,(list,np.ndarray)) == True:\n        #Create the polar coordinates for the array\n        r = convert(numbers[0])\n        #Convert it to real and imaginary parts and return the angle.\n        return [r]\n    #If the value is an int or float\n    if isinstance(numbers,(int,float)) == False:\n        #Create the polar coordinates for the int or float values\n        r = convert(numbers)\n        #Convert it to real and imaginary parts and return the angle.\n        return [r]\n",
        "num_ids": 368
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return str(numbers.real) +'' + str(numbers.imag) +''\n",
        "num_ids": 24
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    import math\n    print('Complex numbers to polar coordinates')\n    print('Enter the complex numbers in their base form')\n    print('For example, 2 + 2j, 4 + 4j and 1 + 2j')\n    for i in range(1, len(numbers)+1):\n        for j in range(i):\n            print('({0} {1} {2}j)'.format(numbers[i-j-1], i, numbers[j]), end ='')\n        print()\n    print()\n    for i in range(1, len(numbers)+1):\n        print('{0} = {1}j'.format(numbers[i-1], numbers[i]))\n    print()\n    \n    print('Enter the polar coordinates in their base form')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        for j in range(i):\n            print('{0} {1} {2}j'.format(numbers[i-j-1], i, numbers[j]), end ='')\n        print()\n    print()\n    for i in range(1, len(numbers)+1):\n        print('{0} = {1}j'.format(numbers[i-1], numbers[i]))\n    print()\n    \n    print('Enter the base form of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the degree of the complex number in the base form')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the degree of the complex number in the base form')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the real part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the imaginary part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the conjugate of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the real part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the imaginary part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the conjugate of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the real part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the imaginary part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the conjugate of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the real part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the imaginary part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the conjugate of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the real part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the imaginary part of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('{0} {1} {2}j'.format(numbers[i-1], i, numbers[i]), end ='')\n    print()\n    \n    print('Enter the conjugate of a complex number')\n    print('For example, 3.2 + 1.2j, 2.5 + 1.5j')\n    for i in range(1, len(numbers)+1):\n        print('",
        "num_ids": 1995
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radians = cmath.polar(numbers)\n    return radians\n",
        "num_ids": 21
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers[0]\n    b = numbers[1]\n    c = numbers[2]\n    \n    x = cmath.phase(cmath.complex(a, b)) + 0.5*cmath.phase(cmath.complex(b, c))\n    y = cmath.phase(cmath.complex(a, c)) + 0.5*cmath.phase(cmath.complex(c, b))\n    z = cmath.phase(cmath.complex(b, a)) + 0.5*cmath.phase(cmath.complex(a, c))\n    return x,y,z\n",
        "num_ids": 147
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # input checking\n    if not isinstance(numbers, list):\n        raise TypeError(\"numbers should be a list\")\n    for value in numbers:\n        if not isinstance(value, complex):\n            raise TypeError(\"numbers should be a list of complex numbers\")\n",
        "num_ids": 66
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    r=numbers[0]\n    i=1\n    while i<len(numbers):\n        x=r*(cmath.exp(-2j*cmath.pi*numbers[i]))\n        y=2*(cmath.exp(-2j*cmath.pi*numbers[i]))\n        z=x+y\n        numbers[i]=(numbers[i],z)\n        i+=1\n    return numbers\n",
        "num_ids": 111
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(numbers!= None and type(numbers) == complex):\n        complex = numbers.real\n        int_real = int(complex)\n        int_imag = int(complex + cmath.pi)\n        return(complex, int_real, int_imag)\n    else:\n        raise ValueError\n",
        "num_ids": 75
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_list = []\n    for i in list1:\n        if type(i) == int:\n            num_list.append(i)\n    return len(num_list)\n",
        "num_ids": 46
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n",
        "num_ids": 10
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        count = 0\n        for i in list1:\n            if i.isdigit():\n                count += 1\n        return count\n",
        "num_ids": 52
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    # YOUR CODE HERE\n    if type(list1)!= list:\n        raise TypeError('Expected list')\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i])!= int:\n            raise TypeError('Expected list')\n        else:\n            count = count + 1\n    return count",
        "num_ids": 87
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n",
        "num_ids": 10
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            count += 1\n    print(count)\n",
        "num_ids": 43
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        if isinstance(list1[i], int):\n            lst.append(list1[i])\n        else:\n            lst.append(0)\n    return lst\n",
        "num_ids": 64
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    #import math\n    #if len(list1)>0:\n        #if list1[0]>0:\n            #return len(list1)\n    #else:\n        #return 0\n    #else:\n        #return 0\n",
        "num_ids": 60
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for x in list1:\n        if type(x)==int:\n            count=count+1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n",
        "num_ids": 7
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    results = []\n    for combination in combinations_with_replacement(l, n):\n        results.append(tuple(combination))\n    return results\n",
        "num_ids": 39
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    possible_comb = []\n    for i in range(1, n+1):\n        possible_comb.extend(list(combinations(l, i)))\n",
        "num_ids": 42
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = set(l)\n    return list(itertools.combinations(l, n))\n",
        "num_ids": 26
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_list = ['rgb(0,0,0)','rgb(255,255,255)','rgb(0,255,0)','rgb(255,0,0)','rgb(255,255,0)']\n    combinations = []\n    for i in range(0,len(color_list)):\n        for j in range(0,n):\n            combinations.append((color_list[i],j))\n    return combinations\n    \n    \ndef get_color_by_index(color_list,index):\n    '''\n    Given a list of colors and a color index, return that color (or -1 if it does not exist).\n    '''\n    for color in color_list:\n        if color == index:\n            return color\n    return -1\n    \n    \ndef get_color_by_indexes(color_list, indices):\n    '''\n    Given a list of colors and a list of indices, return those colors.\n    '''\n    color_list_new = []\n    for i in range(0,len(indices)):\n        color_list_new.append(color_list[indices[i]])\n    return color_list_new\n    \n    \ndef get_color_by_coords(color_list,coords):\n    '''\n    Given a list of colors and a tuple of coordinates, return the corresponding color.\n    '''\n    x, y = coords\n    color_list_new = []\n    for i in range(0,len(color_list)):\n        color_list_new.append(color_list[i][x][y])\n    return color_list_new\n    \n    \ndef get_color_by_indexes(color_list, indices):\n    '''\n    Given a list of colors and a list of indices, return those colors.\n    '''\n    color_list_new = []\n    for i in range(0,len(indices)):\n        color_list_new.append(color_list[indices[i]])\n    return color_list_new\n    \n    \ndef get_color_by_index(color_list, index):\n    '''\n    Given a list of colors and a color index, return that color.\n    '''\n    for color in color_list:\n        if color == index:\n            return color\n    return -1\n    \n    \ndef get_all_colors(color_list, n):\n    '''\n    Return a list of all colors of length n.\n    '''\n    color_list_new = []\n    for color in color_list:\n        color_list_new.append(color)\n    return color_list_new\n    \n    \ndef combine_colors(color_list1, color_list2):\n    '''\n    Combine the two lists of colors into a single color.\n    '''\n    color_list_new = []\n    for i in range(0,len(color_list1)):\n        color_list_new.append(color_list1[i] + color_list2[i])\n    return color_list_new\n    \n    \ndef update_color_indexes(indexes, color_list):\n    '''\n    Given a list of color indexes and a list of colors, update the indexes to match the new list of colors.\n    '''\n    for i in range(0,len(indexes)):\n        indexes[i] = color_list[indexes[i]]\n    return indexes\n    \n    \ndef update_color_coords(indexes, coords):\n    '''\n    Given a list of color indexes and a list of coordinates, update the coordinates to match the new list of coordinates.\n    '''\n    for i in range(0,len(indexes)):\n        indexes[i] = coords[indexes[i]]\n    return indexes\n    \n    \ndef update_color_index(index, new_color):\n    '''\n    Given a color and a new color, update the index to match the new color.\n    '''\n    indexes[index] = new_color\n    return indexes\n    \n    \ndef update_color_indexes_dict(color_list, indexes):\n    '''\n    Given a list of colors and a list of indexes, update the dicts of the corresponding color indexes.\n    '''\n    for i in range(0,len(color_list)):\n        indexes[color_list[i]] = i\n    return indexes\n    \n    \ndef update_color_coords_dict(color_list, coords):\n    '''\n    Given a list of colors and a list of coordinates, update the dicts of the corresponding coordinates.\n    '''\n    for i in range(0,len(color_list)):\n        coords[color_list[i]] = i\n    return coords\n    \n    \ndef add_color_to_dict(color_list, new_color):\n    '''\n    Given a list of colors and a new color, add that new color to the color_list.\n    '''\n    for i in range(0,len(color_list)):\n        color_list[i] = new_color\n    return color_list\n    \n    \ndef combine_colors_dict(color_list1, color_list2):\n    '''\n    Combine the two lists of colors into a single color.\n    '''\n    color_list_new = []\n    for color in color_list1:\n        color_list_new.append(color)\n    for color in color_list2:\n        color_list_new.append(color)\n    return color_list_new\n    \n    \ndef get_all_colors_dict(color_list, n):\n    '''\n    Return a dictionary of all colors of length n.\n    '''\n    color_list_new = {}\n    for color in color_list:\n        color_list_new[color] = color\n    return color_list_new\n    \n    \ndef get_all_colors_dict_ordered(color_list, n):\n    '''\n    Return a dictionary of all colors of length n in a sorted order.\n    '''\n    color_list_new = {}\n    for color in color_list:\n        color_list_new[color] = color\n    color_list_new = sorted(color_list_new.items(), key=lambda x: x[1])\n    return color_list_new\n    \n    \ndef remove_color(color_list, color_index):\n    '''\n    Remove a color from a list.\n    '''\n    color_list_new = []\n    for color in color_list:\n        if color == color_index:\n            color_list_new.append(color)\n    color_list_new = remove_color_without_index(color_list_new)\n    return color_list_new\n    \n    \ndef remove_color_without_index(color_list):\n    '''\n    Remove a color from a list without a color index.\n    '''\n    color_list_new = []\n    for color in color_list:\n        color_list_new.append(color)\n    color_list_new = remove_color_without_index(color_list_new)\n    return color_list_new\n    \n    \ndef remove_color_without_index_dict(color_list_dict, color_index):\n    '''\n    Remove a color from a dictionary without a color index.\n    '''\n    color_list_new = []\n    for color in color_list_dict.keys():\n        if color == color_index:\n            color_list_new.append(color)\n    color_list_new = remove_color_without_index_dict(color_list_new)\n    return color_list_new\n    \n    \ndef remove_color_with_index(color_list, color_index):\n    '''\n    Remove a color from a list with a color index.\n    '''\n    color_list_new = []\n    for color in color_list:\n        if color == color_index:\n            color_list_new.append(color)\n    color_list_new = remove_color_without_index(color_list_new)\n    return color_list_new\n    \n    \ndef remove_color_withou",
        "num_ids": 82
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return [tuple(x) for x in combinations_with_replacement(l, n)]\n",
        "num_ids": 27
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations(l,n)]\n",
        "num_ids": 20
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l1 = list(l)\n    if n == 1:\n        return [tuple(l1)]\n    elif n > 1:\n        r = list(combinations_with_replacement(l1, n))\n        return [tuple(list(combo)) for combo in r]\n    else:\n        return []\n",
        "num_ids": 80
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(n):\n        # print(combs)\n        combs.append(combinations_with_replacement(l,i))\n    return combs\n",
        "num_ids": 49
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_colors = [list(combinations_with_replacement(l,i)) for i in range(len(l)**n)]\n    return comb_colors\n",
        "num_ids": 43
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    isPrime = lambda n: n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))\n",
        "num_ids": 39
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i) == True:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_number_count = 0\n",
        "num_ids": 11
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # your code here\n    def count_primes(num):\n        prime = [True]*(num+1)\n        prime[0] = False\n        prime[1] = False\n        for i in range(2,num+1):\n            if prime[i]:\n                for j in range(i*2,num+1,i):\n                    prime[j] = False\n        count = 0\n        for i in range(2,num):\n            if prime[i]:\n                count +=1\n        return count\n",
        "num_ids": 124
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime_count += 1\n    return prime_count\n",
        "num_ids": 44
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    i = 0\n    for num in range(1, n+1):\n        if num > 1:\n            for j in range(2, num):\n                if (num % j) == 0:\n                    break\n            else:\n                i+= 1\n    return i\n",
        "num_ids": 65
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n    prime_list = [2]\n    if n <= 1:\n        return 0\n    for i in range(3, n):\n        if prime_list[i] == 1:\n            for j in range(i+2, n):\n                if j % i == 0:\n                    prime_list.append(j)\n                    break\n    return len(prime_list)\n",
        "num_ids": 93
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # TODO: Write your code here\n    count = 0\n    for i in range(2, n):\n        if (n % i) == 0:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_number = 0\n    for i in range(1, n+1):\n        if is_prime(i):\n            prime_number += 1\n    return prime_number\n",
        "num_ids": 44
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_num = 2\n    count = 0\n    while prime_num < n:\n        if n % prime_num == 0:\n            count = count + 1\n        prime_num = prime_num + 2\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # if not (type(a)==int or type(a)==float):\n    #     print(\"That wasn't a number.\")\n    #     return \n    # elif not (type(b)==int or type(b)==float):\n    #     print(\"That wasn't a number.\")\n    #     return \n    # elif not(a>b):\n    #     print(\"That's not a number.\")\n    #     return \n    # elif not(a<b):\n    #     print(\"That's not a number.\")\n    #     return \n    # elif not(a==b):\n    #     print(\"That's not a number.\")\n    #     return \n    # else:\n    #     print(f\"They're both in the {a}-{b} numbers range.\")\n    #     return a,b\n    return int(b), int(a)\n    \n",
        "num_ids": 215
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Your code here\n    return b,a\n    \n    \n",
        "num_ids": 18
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef repeat_string(input_string, times):\n    '''\n    Write a function that takes in a string and an integer and returns a string with each character\n    repeated 'times' times.\n    '''\n    return ''.join(input_string * times)\n    \ndef add_string_numbers(input_string, numbers):\n    '''\n    Write a function that takes in a string and a number and adds that number to the end of the string.\n    '''\n    return input_string + numbers\n    \ndef reverse_string(input_string):\n    '''\n    Write a function that takes in a string and returns the string in reverse order.\n    '''\n    return input_string[::-1]\n    \ndef remove_number(input_string, number):\n    '''\n    Write a function that takes in a string, an integer and a number and returns a string with the integer removed.\n    '''\n    return input_string.replace(str(number), \"\")\n    \ndef is_palindrome(input_string):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    return str(input_string) == str(input_string)[::-1]\n    \ndef palindrome_sentence(input_string):\n    '''\n    Write a function that takes in a string and returns a sentence where the first and last characters are the same.\n    '''\n    return input_string[::-1] + input_string\n    \ndef first_three_letters(input_string):\n    '''\n    Write a function that takes in a string and returns a sentence where the first three letters are the same.\n    '''\n    return input_string[::3] + input_string\n    \ndef only_digits(input_string):\n    '''\n    Write a function that takes in a string and returns True if it contains only digits, False otherwise.\n    '''\n    return str(input_string).isdigit()\n    \ndef start_with_three_digits(input_string):\n    '''\n    Write a function that takes in a string and returns True if it starts with three digits, False otherwise.\n    '''\n    return len(str(input_string)) == 3\n    \ndef is_digit(input_string):\n    '''\n    Write a function that takes in a string and returns True if it contains only digits, False otherwise.\n    '''\n    return str(input_string).isdigit()\n    \ndef palindrome_without_numbers(input_string):\n    '''\n    Write a function that takes in a string and returns True if it does not start with a number, False otherwise.\n    '''\n    return input_string[::-1] == input_string\n    \ndef smallest_number(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns the smallest number in the list.\n    '''\n    return min(input_list)\n    \ndef largest_number(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    return max(input_list)\n    \ndef average_numbers(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns the average of the numbers in the list.\n    '''\n    return sum(input_list)/len(input_list)\n    \ndef number_greater_than_twenty(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns True if any number in the list is greater than 20.\n    '''\n    return input_list > 20\n    \ndef number_greater_than_nine(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns True if any number in the list is greater than 9.\n    '''\n    return input_list > 9\n    \ndef number_greater_than_ten(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns True if any number in the list is greater than 10.\n    '''\n    return input_list > 10\n    \ndef number_greater_than_one(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns True if any number in the list is greater than 1.\n    '''\n    return input_list > 1\n    \ndef smallest_numbers(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns the smallest number in the list.\n    '''\n    return min(input_list)\n    \ndef largest_numbers(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    return max(input_list)\n    \ndef even_numbers(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns True if any number is even, False otherwise.\n    '''\n    return all(x % 2 == 0 for x in input_list)\n    \ndef first_number(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns the first number in the list.\n    '''\n    return input_list[0]\n    \ndef last_number(input_list):\n    '''\n    Write a function that takes in a list of numbers and returns the last number in the list.\n    '''\n    return input_list[-1]\n    \ndef count_digits(input_string):\n    '''\n    Write a function that takes in a string and returns the number of times the string has the digits.\n    '''\n    count = 0\n    for character in input_string:\n        if character.isdigit():\n            count += 1\n    return count\n    \ndef some_string_start_with(input_string, prefix):\n    '''\n    Write a function that takes in a string and a prefix and returns True if the string starts with the prefix, False otherwise.\n    '''\n    return input_string.startswith(prefix)\n    \ndef some_string_end_with(input_string, suffix):\n    '''\n    Write a function that takes in a string and a suffix and returns True if the string ends with the suffix, False otherwise.\n    '''\n    return input_string.endswith(suffix)\n    \ndef some_string_first_letter(input_string):\n    '''\n    Write a function that takes in a string and returns True if the string has the first letter in it, False otherwise.\n    '''\n    return input_string.startswith(input_string[0])\n    \ndef some_string_last_letter(input_string):\n    '''\n    Write a function that takes in a string and returns True if the string has the last letter in it, False otherwise.\n    '''\n    return input_string.endswith(input_string[-1])\n    \ndef some_string_both_letters(input_string):\n    '''\n    Write a function that takes in a string and returns True if the string has both letters in it, False otherwise.\n    '''\n    return input_string.startswith(input_string[0]) and input_string.endswith(input_string[-1])\n    \ndef some_string_between_two_letters(input_string):\n    '''\n    Write a function that takes in a string and returns True if the string has a letter between two letters in it, False otherwise.\n    '''\n    return input_string.startswith(input_string[0]) and input_string.endswith(input_string[1])\n    \ndef some_string_at_end(input_string):\n    '''\n    Write a function that takes in a string and returns True if the string has a letter at the end of it, False otherwise.\n    '''\n    return input_string.endswith(input_string[-1])\n    \ndef some_string_at_beginning(input_string):\n    '''\n    Write a function that takes in a string and returns True if the string has a letter at the beginning of it, False otherwise.\n    '''\n    return input_string.startswith(input_string[0])\n    \ndef some_string_between_words(input_string):\n    '''\n    Write a function that takes in ",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a == b:\n        return a, b\n    else:\n        return b, a\n        \nprint(swap_numbers(7, 8))\n",
        "num_ids": 40
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    d = b\n    a = c\n    b = d\n    return c,d\n",
        "num_ids": 28
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a=a-1\n    b=b-1\n    return (b,a)\n",
        "num_ids": 24
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    print(a,b)\n    c = b\n    b = a\n    a = c\n    print(a,b)\n    return a,b\n",
        "num_ids": 39
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        a,b = b,a\n    return b,a\n",
        "num_ids": 24
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # YOUR CODE HERE\n",
        "num_ids": 8
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print('Function: maximize_elements')\n    print('\\tTuple 1: ', test_tup1)\n    print('\\tTuple 2: ', test_tup2)\n    print('\\tReturning: ', end='')\n    max = test_tup1[0]\n    for element in test_tup1[1:]:\n        if element > max:\n            max = element\n    print('\\t', max)\n    print('\\tReturning: ', end='')\n    for element in test_tup2[1:]:\n        if element > max:\n            max = element\n    print('\\t', max)\n    return max\n",
        "num_ids": 161
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem = 0\n    max_index = 0\n    for index in range(len(test_tup1)):\n        if test_tup1[index] > test_tup2[index]:\n            max_elem += 1\n            max_index = index\n    return max_elem, max_index\n",
        "num_ids": 79
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    return test_tup1, test_tup2\n",
        "num_ids": 132
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elements = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_elements = test_tup1[i]\n            test_tup1[i] = test_tup2[i]\n            test_tup2[i] = max_elements\n    return test_tup1, test_tup2\n",
        "num_ids": 109
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup2\n    elif len(test_tup2) > len(test_tup1):\n        return test_tup1\n    else:\n        return test_tup1, test_tup2\n",
        "num_ids": 77
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    return test_tup1, test_tup2\n",
        "num_ids": 48
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    maximum = max(test_tup1,test_tup2)\n    return maximum\n",
        "num_ids": 24
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # your code here\n    # test_tup1\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2",
        "num_ids": 55
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    '''\n    Complete this function\n    '''\n    # write your code here\n    x = len(test_tup1)\n    y = len(test_tup2)\n    i = y-x\n    print('x:'+ str(x))\n    print('y:'+ str(y))\n    print('i:'+ str(i))\n    result = []\n    for i in range(0, x):\n        result.append(test_tup1[i])\n    for i in range(0, y):\n        result.append(test_tup2[i])\n    return result\n",
        "num_ids": 132
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_ = (0,0)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_ = (test_tup1[i],i)\n    return max_\n    \ndef max_element_index(test_tup1, test_tup2):\n    '''\n    Write a function to find the index of the maximum element in two given tuples.\n    '''\n    max_ = (0,0)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_ = (test_tup1[i],i)\n    return max_\n",
        "num_ids": 69
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def primes(n):\n        prime = [False] * n \n        prime[0] = True\n        prime[1] = True\n",
        "num_ids": 38
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n >= 2, \"n must be an integer greater than or equal to 2\"\n    assert n < 10**6, \"n must be an integer less than 10**6\"\n    assert n % 10 == 1, \"n must be an integer that is a multiple of 10\"\n    assert n % 10 == 1 and n <= 9, \"n must be an integer that is a multiple of 10 and less than or equal to 9\"\n    assert len(str(n)) == n+1, \"n must be a number\"\n    \n    # generate an nth newman\u2013shanks\u2013williams prime\n    # e.g. 131928500 > 131928500\n    fact = [1,1]\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            fact.append(i)\n            fact.append(n//i)\n    \n    # check if n is the prime\n    if fact[-1] == fact[-2]:\n        return fact[-1]\n    else:\n        return None\n    \ndef main():\n    '''\n    To test your solution, uncomment the following line\n    print(newman_prime(131928500))\n    '''\n    print(newman_prime(131928500))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 32
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    for i in range(2,int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2]\n    i = 3\n    while i < n:\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime.append(i)\n            i += 1\n    return prime[n-1]\n",
        "num_ids": 70
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    num=0\n    while(n!=0):\n        num+=1\n        if n%2==0:\n            n=n//2\n        else:\n            n=n*3+1\n    return num\n    ",
        "num_ids": 57
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    \n    # N is the current number to be checked\n    N = 2\n    \n    # Print out the first n numbers\n    print(\"Start with the prime numbers\")\n    while N <= n:\n        # n is the number to be checked\n        print(N, end=\" \")\n        # Add the new numbers to the count\n        count += N\n        # N + 1 is the next number to be checked\n        N += N + 2\n    \n    # The number N is now prime\n    print()\n    \n    # The new number is the next nth number\n    print(\"The new number is\", count)\n    return count\n    \nif __name__ == \"__main__\":\n    # n = int(input(\"Enter an integer to check for primeness: \"))\n    print(newman_prime(5)",
        "num_ids": 195
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    '''\n    Note that this is the algorithm you have already written for the 30-day quiz!\n    '''\n    '''\n    - Your code below goes here.\n    '''\n    d = 2\n    while True:\n        num = n//d\n        if n%d == 0:\n            return n+1\n        elif n%d!= 0:\n            d += 1\n    ",
        "num_ids": 51
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n>=3, \"n must be >3\"\n    assert type(n)==int, \"n must be an integer\"\n    assert n>=3, \"n must be >=3\"\n    \n    def sieve(n): \n        '''\n        Write a function to find all primes less than n.\n        '''\n        assert type(n)==int, \"n must be an integer\"\n        assert n>=3, \"n must be >=3\"\n        \n        sieve_numbers = [True] * (n + 1)\n        sieve_numbers[0] = sieve_numbers[1] = False\n        \n        for i in range(2, int(n ** 0.5) + 1):\n            if sieve_numbers[i]:\n                for j in range(i * i, n + 1, i):\n                    sieve_numbers[j] = False\n        return [2] + [i for i in range(3, n + 1, 2) if sieve_numbers[i] == True]\n    \n    def isprime(n): \n        '''\n        Check if n is prime.\n        '''\n        assert type(n)==int, \"n must be an integer\"\n        assert n>=3, \"n must be >=3\"\n        \n        if n==1:\n            return False\n        elif n==2:\n            return True\n        elif n%2 == 0:\n            return False\n        else:\n            for i in range(3, int(n**0.5)+1, 2):\n                if n%i==0:\n                    return False\n        return True\n",
        "num_ids": 115
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # your code goes here\n    prime = []\n    num = 1\n    for i in range(1, n + 1):\n        if (i % 2 == 0):\n            num = num * 2\n        else:\n            num = num * 3\n        if num > n:\n            prime.append(num)\n            break\n    prime.sort()\n    return prime[n - 1]\n",
        "num_ids": 93
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # set the prime factors of 2..n\n    set_pf = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            set_pf.append(i)\n    \n    # print(set_pf)\n    # determine the number of distinct prime factors\n    n = len(set_pf)\n    \n    # initialize the prime numbers as empty lists\n    prime_numbers = []\n    for i in range(n):\n        prime_numbers.append(set_pf[i])\n    # print(prime_numbers)\n    \n    # calculate all the prime numbers, except one\n    prime_numbers_tmp = []\n    for i in range(n):\n        if i > 1:\n            prime_numbers_tmp.append(prime_numbers[i])\n    # print(prime_numbers_tmp)\n    \n    # using the only prime numbers, we can calculate the nth newman\u2013shanks\u2013williams prime number\n    newman_prime = 0\n    for i in range(n):\n        if prime_numbers[i] == 2:\n            for j in range(2, n + 1):\n                if prime_numbers[j] == prime_numbers[i]:\n                    newman_prime = prime_numbers[j]\n                    break\n            break\n    # print(newman_prime)\n    \n    # return the newman\u2013shanks\u2013williams prime number\n    return newman_prime\n",
        "num_ids": 357
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        raise TypeError(\"The first argument must be a tuple!\")\n    if type(test_tup2)!= tuple:\n        raise TypeError(\"The second argument must be a tuple!\")\n    \n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same number of elements!\")\n    \n    # TODO: Implement a division element-wise operation\n    \n    # TODO: Write your own function to perform a division element-wise operation on two tuples.\n    \n    return test_tup1, test_tup2\n",
        "num_ids": 156
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Write your code here\n    return\n",
        "num_ids": 14
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #print(test_tup1, test_tup2)\n    def f(tup):\n        return tup[0] / tup[1]\n    \n    answer = f(test_tup1)\n    answer = f(test_tup2)\n    #answer = (test_tup2[0] / test_tup1[1])\n    #print(\"answer is: {}\".format(answer))\n    return answer\n",
        "num_ids": 108
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(test_tup1)):\n        lst1.append(test_tup1[i])\n        lst2.append(test_tup2[i])\n    test_tup1=lst1\n    test_tup2=lst2\n    if test_tup1[0]==0:\n        for i in range(len(test_tup2)):\n            if test_tup2[i]==0:\n                test_tup2[i]=1\n        lst1=test_tup2\n    for i in range(len(lst1)):\n        if lst1[i]!=0:\n            if lst1[i]==lst1[i-1]:\n                lst1[i]=0\n            else:\n                lst1[i]=0\n    return lst1",
        "num_ids": 224
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def check_tuples_and_operation(tuples_and_operations):\n        '''\n        Prints the first tuple and the second tuple after each operation to the console.\n        '''\n        print(\"\\nOperation on tuples:\")\n        print_list_using_sort(tuples_and_operations)\n        print(\"\\nOutput after division:\")\n        output_tuple_and_operation(tuples_and_operations[0], tuples_and_operations[1], tuples_and_operations[2])\n        \n    def print_list_using_sort(array):\n        '''\n        Prints the list using sort function.\n        '''\n        print(\"\\nArray:\")\n        print_list_using_sort_recursive(array)\n    \n    def print_list_using_sort_recursive(array):\n        '''\n        Prints the list using sort function, recursively.\n        '''\n        if len(array) > 0:\n            for i in range(0, len(array)):\n                print_list_using_sort_recursive(array[:i] + array[i + 1:])\n        else:\n            print(\"No operations\")\n        \n    def print_list_using_sort_recursive_aux(array):\n        '''\n        Prints the list using sort function, recursively.\n        '''\n        if len(array) > 0:\n            for i in range(0, len(array)):\n                print_list_using_sort_recursive_aux(array[:i] + array[i + 1:])\n        else:\n            print(\"No operations\")\n    \n    def print_list_using_sort_recursive_aux_with_tuples(tuples):\n        '''\n        Prints the list using sort function, recursively.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                print_list_using_sort_recursive_aux(tuples[:i] + tuples[i + 1:])\n        else:\n            print(\"No operations\")\n            \n    def print_tuples_from_tuples_with_tuples(tuples):\n        '''\n        Prints the tuple after each operation, recursively.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                print_tuples_from_tuples_with_tuples(tuples[:i] + tuples[i + 1:])\n        else:\n            print(\"No operations\")\n    \n    def tuple_from_tuples(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        for i in range(0, len(tuples)):\n            tuples[i] = tuple(tuples[i])\n        \n    def tuple_from_tuples_with_tuples(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                tuples[i] = tuple(tuples[i])\n        else:\n            print(\"No operations\")\n    \n    def tuple_from_tuples_with_tuples_aux(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                tuples[i] = tuple(tuples[i])\n            \n    def tuple_from_tuples_with_tuples_aux_with_tuples(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                tuples[i] = tuple(tuples[i])\n            tuples = tuple(tuples)\n            \n    def tuple_from_tuples_with_tuples_recursive(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                tuples[i] = tuple(tuples[i])\n            tuples = tuple(tuples)\n            \n            for j in range(0, len(tuples) - 1):\n                tuples[j] = tuple(tuples[j])\n                tuples[j + 1] = tuple(tuples[j + 1])\n            tuples = tuple(tuples)\n            \n            tuples = tuple(tuples)\n        \n        else:\n            print(\"No operations\")\n    \n    def tuple_from_tuples_with_tuples_recursive_aux(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                tuples[i] = tuple(tuples[i])\n            tuples = tuple(tuples)\n            \n            for j in range(0, len(tuples) - 1):\n                tuples[j] = tuple(tuples[j])\n                tuples[j + 1] = tuple(tuples[j + 1])\n            tuples = tuple(tuples)\n            \n            tuples = tuple(tuples)\n        \n        else:\n            print(\"No operations\")\n    \n    def tuples_from_tuples(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        for i in range(0, len(tuples)):\n            tuples[i] = tuple(tuples[i])\n    \n    def tuples_from_tuples_recursive(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                tuples[i] = tuple(tuples[i])\n            tuples = tuple(tuples)\n            \n            for j in range(0, len(tuples) - 1):\n                tuples[j] = tuple(tuples[j])\n                tuples[j + 1] = tuple(tuples[j + 1])\n            tuples = tuple(tuples)\n            \n            tuples = tuple(tuples)\n        \n        else:\n            print(\"No operations\")\n    \n    def tuples_from_tuples_recursive_aux(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                tuples[i] = tuple(tuples[i])\n            tuples = tuple(tuples)\n            \n            for j in range(0, len(tuples) - 1):\n                tuples[j] = tuple(tuples[j])\n                tuples[j + 1] = tuple(tuples[j + 1])\n            tuples = tuple(tuples)\n            \n            tuples = tuple(tuples)\n        \n        else:\n            print(\"No operations\")\n    \n    def tuples_from_tuples_recursive_aux_with_tuples(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        '''\n        if len(tuples) > 0:\n            for i in range(0, len(tuples)):\n                tuples[i] = tuple(tuples[i])\n            tuples = tuple(tuples)\n            \n            for j in range(0, len(tuples) - 1):\n                tuples[j] = tuple(tuples[j])\n                tuples[j + 1] = tuple(tuples[j + 1])\n            tuples = tuple(tuples)\n            \n            tuples = tuple(tuples)\n        \n        else:\n            print(\"No operations\")\n    \n    def tuple_from_tuples_with_tuples_aux(tuples):\n        '''\n        Converts each tuple in the tuples to a tuple.\n        ''",
        "num_ids": 18
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # if len(test_tup1)!= len(test_tup2):\n    #     raise ValueError(\"Different sizes of tuples\")\n    # else:\n    #     return_tuple = ()\n    #     for index in range(0,len(test_tup1)):\n    #         return_tuple += (test_tup1[index] / test_tup2[index])\n    #     return return_tuple\n    return test_tup1[0] / test_tup2[0]\n    # return test_tup1[0] / test_tup2[0]\n    # return test_tup1[0] / test_tup2[0]\n",
        "num_ids": 172
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x: x/test_tup2, test_tup1))\n",
        "num_ids": 26
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Create a list to store the result\n    result_list = []\n    \n    # Iterate over each tuple in the two tuples\n    for i in range(len(test_tup1)):\n        # For each element in each tuple, add it to the result list\n        for j in range(len(test_tup2[i])):\n            result_list.append(test_tup1[i][j]/test_tup2[i][j])\n            \n    return result_list\n",
        "num_ids": 123
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # YOUR CODE HERE\n    # raise NotImplementedError\n    \n    division_list = []\n    for x in range(len(test_tup1)):\n        div = (test_tup2[x][1]/test_tup1[x][1])\n        division_list.append(div)\n    return division_list\n",
        "num_ids": 84
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n",
        "num_ids": 7
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (list1, 0)\n    else:\n        temp = list1[:L]\n        middle = len(list1) - L\n        list1 = list1[middle:]\n        return (temp, list1)\n",
        "num_ids": 66
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #returns a tuple, e.g. [(1, 2), (3, 4)]\n    #I'm not sure what the function returns, but it works for me. It's only kinda a case study.\n    #initialize the first and second parts of the list as an empty lists\n    first_part = []\n    second_part = []\n    #iterate through the list\n    for i in list1:\n        #add each item to the first part\n        first_part.append(i)\n    #iterate through the list again and add each item to the second part\n    for i in list1:\n        second_part.append(i)\n    #return the first and second parts\n    return first_part, second_part\n    #or return the first part and the second part\n    #return (first_part, second_part)\n",
        "num_ids": 196
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L],list1[L:]\n",
        "num_ids": 16
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Write your code here\n    if L == 1:\n        return (list1[:1], list1[1:])\n    else:\n        return(split_two_parts(list1[:L-1], L-1), split_two_parts(list1[L-1:], L))\n",
        "num_ids": 74
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    new_list = []\n    x = len(list1)\n    # split into two parts\n    for i in range(x // L):\n        new_list.append(list1[i*L : i*L + L])\n    new_list.append(list1[(i*L + L) : ])\n    return (new_list, x//L)\n",
        "num_ids": 89
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    print(list1)\n    return (list1[0:L], list1[L:])\n    \ndef concatenate_lists(L, L2):\n    '''\n    Write a function that takes in two lists and returns the concatenation of the lists.\n    '''\n    return (L + L2)\n    \ndef flatten_lists(L, L2):\n    '''\n    Write a function that takes in two lists and returns the flattened lists.\n    '''\n    return (L + L2)\n    \ndef reverse_lists(L):\n    '''\n    Write a function that takes in an array and returns it in reverse order.\n    '''\n    return (L[::-1])\n    \ndef replace_letters(string, old, new):\n    '''\n    Write a function that takes in a string and a letter, and replaces all occurrences of that letter with that letter.\n    '''\n    return string.replace(old, new)\n    \ndef count_words(str1, str2):\n    '''\n    Write a function that takes in two strings and returns the number of words in the two strings.\n    '''\n    print(str1.count(str2))\n    return str1.count(str2)\n    \ndef contains_substring(str1, str2):\n    '''\n    Write a function that takes in a string and a substring and returns True if the substring is present in the string, and False otherwise.\n    '''\n    print(str1.find(str2))\n    return str1.find(str2)!= -1\n    \ndef combine_words(words1, words2):\n    '''\n    Write a function that takes in a list of words and returns a list of words, where the second list contains the words in the first list.\n    '''\n    print(words1)\n    return (words1 + words2)\n    \ndef get_frequency_dict(words):\n    '''\n    Write a function that takes in a list of words and returns a dictionary where the keys are words and the values are the number of times the word appears in the list.\n    '''\n    print(words)\n    count = {}\n    for word in words:\n        count[word] = count.get(word, 0) + 1\n    return count\n    \ndef sort_words(words):\n    '''\n    Write a function that takes in a list of words and returns a list of words sorted by frequency.\n    '''\n    print(words)\n    return sorted(words, key=lambda x: words.count(x), reverse=True)\n    \ndef sort_letters(letters):\n    '''\n    Write a function that takes in a list of letters and returns a list of letters sorted in alphabetical order.\n    '''\n    print(letters)\n    return sorted(letters, key=lambda x: letters.count(x), reverse=True)\n    \ndef sort_alphabetical(alphabet):\n    '''\n    Write a function that takes in a list of letters and returns a list of letters sorted in alphabetical order.\n    '''\n    print(alphabet)\n    return sorted(alphabet, key=lambda x: alphabet.count(x), reverse=True)\n    \ndef make_list_of_strings(num):\n    '''\n    Write a function that takes in a number and returns a list of all the n numbers in the list.\n    '''\n    print(num)\n    return [str(num) for num in range(1,num+1)]\n    \ndef find_substring(str1, str2):\n    '''\n    Write a function that takes in a string and a substring, and returns True if the substring is present in the string, and False otherwise.\n    '''\n    print(str1.find(str2))\n    return str1.find(str2)!= -1\n    \ndef write_file(file, name, text):\n    '''\n    Write a function that takes in a file and name of the file, text of the file, and an integer and returns a text file that contains the inputted text, with the name and file extension included.\n    '''\n    print(file)\n    print(name)\n    print(text)\n    return str(file + '_' + str(name) + '_' + str(text) + '.txt')\n    \ndef write_file_contents(file, text):\n    '''\n    Write a function that takes in a file and text of the file, and writes the text to the file.\n    '''\n    print(file)\n    print(text)\n    return str(file + '.txt')\n    \ndef main():\n    '''\n    Write a function that takes in two lists and returns a list of tuples.\n    '''\n    print(split_two_parts(['a', 'b', 'c', 'd'], 5))\n    \n    print(concatenate_lists([1, 2], [3, 4, 5]))\n    \n    print(reverse_lists([1, 2, 3, 4, 5]))\n    \n    print(replace_letters('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'X', 'Y'))\n    \n    print(count_words('The quick brown fox jumps over the lazy dog.', 'quick'))\n    \n    print(contains_substring('The quick brown fox jumps over the lazy dog.', 'quick'))\n    \n    print(get_frequency_dict(['a', 'b', 'c', 'd']))\n    \n    print(sort_words(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\n    \n    print(sort_alphabetical(['A', 'B', 'C', 'D']))\n    \n    print(make_list_of_strings(3))\n    \n    print(find_substring('python', 'c'))\n    \n    print(write_file('comp.py','main.py', 'a'))\n    \n    print(write_file_contents('comp.py', 'a'))\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 335
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (\"Error\", \"Invalid length of the first part\")\n    else:\n        x = list1[:L]\n        y = list1[L:]\n        return (x, y)\n",
        "num_ids": 58
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    assert isinstance(list1, list), \"The given list must be a list, not a {}\".format(type(list1))\n    assert len(list1) % L == 0, \"The number of elements in the list must be a multiple of L = {}\".format(L)\n    assert isinstance(L, int), \"The given length of L must be an integer.\"\n    assert 0 <= L <= len(list1), \"The length of the given list must be between 0 and {}.\".format(len(list1))\n    assert isinstance(L, int), \"The given L must be an integer.\"\n    return list1[:L // 2], list1[L // 2:]\n",
        "num_ids": 159
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # 1. Start by creating a new list of all the elements in the list\n    # 2. Iterate over the list, starting with the element that was not a number\n    # 3. If the element found is a number, add it to the list\n    # 4. Create a new list containing all the elements from the list\n    # 5. Merge the new list into the original list\n    # 6. Create a tuple from the new list\n    result = list1\n    count = 0\n    for i in range(0, len(result)):\n        if result[i] not in L:\n            result.insert(i, L[count])\n            count += 1\n    return tuple(result), tuple(L)\n",
        "num_ids": 163
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 365 * 24 * 2\n    return dog_years\n",
        "num_ids": 23
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=1:\n        return h_age\n    else:\n        return (h_age*9)*3 + h_age\n        \nh_age = int(input(\"enter your h_age: \"))\ndog_age(h_age)",
        "num_ids": 64
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1.0:\n        return \"Returned 1 dog's age is 1 year\"\n    elif h_age <= 2.0:\n        return \"Returned 2 dog's age is 2 years\"\n    elif h_age <= 3.0:\n        return \"Returned 3 dog's age is 3 years\"\n    elif h_age <= 4.0:\n        return \"Returned 4 dog's age is 4 years\"\n    elif h_age <= 5.0:\n        return \"Returned 5 dog's age is 5 years\"\n    elif h_age <= 6.0:\n        return \"Returned 6 dog's age is 6 years\"\n    elif h_age <= 7.0:\n        return \"Returned 7 dog's age is 7 years\"\n    else:\n        return \"Returned more than 7 dog's age is more than 7 years\"",
        "num_ids": 204
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return (\"No need for a dog.\")\n    elif h_age >= 3 and h_age <= 5:\n        return (\"You are a little young.\")\n    elif h_age >= 6 and h_age <= 8:\n        return (\"You are a teenager.\")\n    elif h_age >= 9 and h_age <= 12:\n        return (\"You are old.\")\n    else:\n        return (\"You are old.\")\n",
        "num_ids": 108
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age*365\n    if d_age < 16:\n        return \"Old!\"\n    elif d_age < 19:\n        return \"Young!\"\n    elif d_age < 25:\n        return \"Old!\"\n    elif d_age < 32:\n        return \"Old!\"\n    else:\n        return \"Old!\"\n",
        "num_ids": 86
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age/12\n    return age\n",
        "num_ids": 15
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 3:\n        print(\"Your dog is at least 3 years old\")\n    elif h_age >= 2:\n        print(\"Your dog is at least 2 years old\")\n    elif h_age >= 1:\n        print(\"Your dog is at least 1 year old\")\n    else:\n        print(\"Your dog is 1 or 2 years old\")\n",
        "num_ids": 87
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0 and h_age <= 100:\n        return h_age\n    else:\n        return \"Error: age is outside of range 0-100\"\n",
        "num_ids": 42
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return h_age - 2\n    else:\n        return h_age",
        "num_ids": 28
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    start = 0\n    end = len(S)\n    sublist = []\n    \n    while end >= start:\n        sublist.append(S[start:end])\n        start = start + step\n        end = end - 1\n    \n    return sublist\n    \ndef list_repeat(L, n):\n    '''\n    Write a function that takes in a list and a number n and returns a list containing the nth item of the list at position n.\n    '''\n    \n    return L * n\n    \ndef list_reverse(L):\n    '''\n    Write a function that takes in a list and returns a new list that reverses its elements.\n    '''\n    \n    return L[::-1]\n    \ndef list_test(L, n):\n    '''\n    Write a function that takes in a list and a number n and returns True if n is present at the end of the list, False otherwise.\n    '''\n    \n    return L[-1] == n\n    \ndef list_search(L, n):\n    '''\n    Write a function that takes in a list and a number n and returns its index.\n    '''\n    \n    return L.index(n)\n    \ndef list_count(L, n):\n    '''\n    Write a function that takes in a list and a number n and returns its number of occurences.\n    '''\n    \n    return L.count(n)\n    \ndef list_to_string(L):\n    '''\n    Write a function that takes in a list and returns a string that represents the list.\n    '''\n    \n    return str(L)\n    \ndef list_to_int_list(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains only the values in the list as integers.\n    '''\n    \n    return [int(n) for n in L]\n    \ndef list_to_string_list(L):\n    '''\n    Write a function that takes in a list and returns a string that represents the list.\n    '''\n    \n    return [str(n) for n in L]\n    \ndef list_to_int_list_list(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains only the values in the list as integers.\n    '''\n    \n    return [int(n) for n in L]\n    \ndef list_add_tuple(L, tup):\n    '''\n    Write a function that takes in a list and a tuple and returns a new list that contains only the elements of the tuple.\n    '''\n    \n    return [n for n in L if n in tup]\n    \ndef list_add_tuple_list(L, tup):\n    '''\n    Write a function that takes in a list and a tuple and returns a new list that contains only the elements of the tuple.\n    '''\n    \n    return [n for n in L if n in tup]\n    \ndef list_add_iterable(L, iterable):\n    '''\n    Write a function that takes in a list and an iterable and returns a new list that contains only the elements in the iterable.\n    '''\n    \n    return [n for n in L if n in iterable]\n    \ndef list_add_iterable_list(L, iterable):\n    '''\n    Write a function that takes in a list and an iterable and returns a new list that contains only the elements in the iterable.\n    '''\n    \n    return [n for n in L if n in iterable]\n    \ndef list_append(L, tup):\n    '''\n    Write a function that takes in a list and a tuple and returns a new list that contains all the values in the tuple, and the values of the tuple as a list.\n    '''\n    \n    return L + tup\n    \ndef list_append_tuple(L, tup):\n    '''\n    Write a function that takes in a list and a tuple and returns a new list that contains all the values in the tuple, and the values of the tuple as a tuple.\n    '''\n    \n    return L + tup\n    \ndef list_append_tuple_list(L, tup):\n    '''\n    Write a function that takes in a list and a tuple and returns a new list that contains all the values in the tuple.\n    '''\n    \n    return L + tup\n    \ndef list_extend(L, other):\n    '''\n    Write a function that takes in a list and a second list and returns a new list that contains all the values in the list that are in the second list.\n    '''\n    \n    return L + other\n    \ndef list_extend_tuple(L, other):\n    '''\n    Write a function that takes in a list and a second list and returns a new list that contains all the values in the list that are in the second list.\n    '''\n    \n    return L + other\n    \ndef list_extend_tuple_list(L, other):\n    '''\n    Write a function that takes in a list and a second list and returns a new list that contains all the values in the list that are in the second list.\n    '''\n    \n    return L + other\n    \ndef list_count_elements(L):\n    '''\n    Write a function that takes in a list and returns the number of elements in the list.\n    '''\n    \n    return len(L)\n    \ndef list_contains(L, element):\n    '''\n    Write a function that takes in a list and an element and returns a boolean value indicating if the element is in the list.\n    '''\n    \n    return element in L\n    \ndef list_search_first_occurrence(L, element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the first occurrence of the element, or -1 if the element is not in the list.\n    '''\n    \n    return L.index(element)\n    \ndef list_search_last_occurrence(L, element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the last occurrence of the element, or -1 if the element is not in the list.\n    '''\n    \n    return L.rfind(element)\n    \ndef list_index_first_occurrence(L, element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the first occurrence of the element, or -1 if the element is not in the list.\n    '''\n    \n    return L.index(element)\n    \ndef list_index_last_occurrence(L, element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the last occurrence of the element, or -1 if the element is not in the list.\n    '''\n    \n    return L.rindex(element)\n    \ndef list_delete_first(L, first_element):\n    '''\n    Write a function that takes in a list and an element and returns a new list that contains all values from the list except the first occurrence of the element.\n    '''\n    \n    return L[1:]\n    \ndef list_delete_last(L, last_element):\n    '''\n    Write a function that takes in a list and an element and returns a new list that contains all values from the list except the last occurrence of the element.\n    '''\n    \n    return L[:-1]\n    \ndef list_delete_first_or_last(L, first_element, last_element):\n    '''\n    Write a function that takes in a list and an element and returns a new list that contains all values from the list except the first occurrence of the element, and all values from the last occurrence of the element.\n    '''\n    \n    return L[1:last_element] + L[last_element+1:]\n    \ndef list_merge(L, R):\n    '''\n    Write a function that takes in a list and a second list and returns a new list that contains all values in the first list followed by values from the second list, and the values from the second list.\n    '''\n    \n    return [L + [r] for r in R]\n    \ndef list_merge_list(L, R):\n    '''\n    Write a function that takes in a list and a second list and returns a new list that contains al",
        "num_ids": 23
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # IMPLEMENTATION\n    # Create a list of the lists created above\n    # For every item in the list, create a list from that item using the list of the original list. \n    # You may need to do this in a different way.\n    # Using the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We can use a recursive function that takes in two lists and return the list of lists that are made from the original list.\n    # We can do this recursively, and then use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We can use a for loop and recursion to get the list of lists that are made from the original list.\n    # We can do this with this for loop, since it's a recursive function and we can get the list of lists that are made from the original list\n    # and then go through the original list again, and then use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We can do this with a for loop and recursion.\n    # Note that we will use the fact that we will use the function you made to create the list of lists.\n    # Also note that we will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # You'll need to do this in a different way.\n    # Remember that you can use lists and strings as arguments, and we will have to create a list of lists from that list. \n    # We can then use a for loop to get the list of lists that are made from the original list,\n    # and then go through the original list again, and then use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We can do this with this for loop, since it's a recursive function and we can get the list of lists that are made from the original list\n    # and then go through the original list again, and then use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We can do this with a for loop and recursion.\n    # I'm sorry, but you might want to do the code you wrote in part 4 and try to figure out what you will get if you execute this code.\n    # Just as you're going to see, the recursive function that you need to use is going to be quite similar to the for loop.\n    # Therefore, if you try this out, you'll get a not working code, and it's very difficult to handle.\n    # You need to write a function that uses the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # Finally, if you try this out, you'll get a not working code, and it's very difficult to handle.\n    # You need to write a function that uses the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # Finally, if you try this out, you'll get a not working code, and it's very difficult to handle.\n    # You need to write a function that uses the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # Finally, if you try this out, you'll get a not working code, and it's very difficult to handle.\n    # You need to write a function that uses the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained by going through the original list,\n    # and doing a similar thing for every other item in the original list.\n    # We will want to try this out again later.\n    # We will use the fact that the nth item in a list can be obtained b",
        "num_ids": 2000
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Write your code here\n    if step > len(S):\n        return None\n    if step == len(S):\n        return [S]\n    if S[step] == '0':\n        return list_split(S, step+1)\n    if S[step] == '1':\n        return [S[0:step]+'0'+S[step+1:]] + list_split(S, step+1)\n    return [S[0:step]+'1'+S[step+1:]] + list_split(S, step+1)\n",
        "num_ids": 136
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [list(S[i:i+step]) for i in range(0, len(S), step)]\n",
        "num_ids": 29
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n",
        "num_ids": 40
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    #print(S)\n    for i in range(0, len(S), step):\n        L.append(S[i:i + step])\n    #print(L)\n    return L\n",
        "num_ids": 54
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if n == 0:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    output = []\n    n = step\n    for i in range(len(S)):\n        output.append(S[i:(i+n)])\n    return output\n",
        "num_ids": 43
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #raise NotImplementedError\n    \n    return [S[i:i+step] for i in range(0, len(S), step)]\n    \ndef list_join(L):\n    '''\n    Write a function that takes in a list of lists and returns a list of strings with each element in the list joined together by spaces.\n    '''\n    return''.join([str(e) for e in L])\n    \ndef list_string_to_int(S):\n    '''\n    Write a function that takes in a string of numbers separated by spaces and converts it to a list of integers.\n    '''\n    return [int(e) for e in S.split()]\n    \ndef list_add(L1, L2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the elements of L1 plus the elements of L2.\n    '''\n    return L1 + L2\n    \ndef list_sub(L1, L2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the elements of L1 minus the elements of L2.\n    '''\n    return L1 - L2\n    \ndef list_mult(L1, L2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the elements of L1 multiplied by the elements of L2.\n    '''\n    return L1 * L2\n    \ndef list_div(L1, L2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the elements of L1 divided by the elements of L2.\n    '''\n    return L1 / L2\n    \ndef list_floor(L):\n    '''\n    Write a function that takes in a list and returns a list of its elements in ascending order, but with each element turned into a number in the range 0 to 9.\n    '''\n    return [int(e) for e in L]\n    \ndef list_decrease(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains the elements of L in descending order.\n    '''\n    return L[::-1]\n    \ndef list_remainder(L1, L2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the elements of L1 divided by the elements of L2.\n    '''\n    return L1[:] - L2[:]\n    \ndef list_scalar(L):\n    '''\n    Write a function that takes in a list and returns a new list with all its elements divided by the scalar.\n    '''\n    return [e / L[i] for i, e in enumerate(L)]\n    \ndef list_mult_div(L1, L2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the elements of L1 multiplied by the elements of L2.\n    '''\n    return L1 * L2\n    \ndef list_map(L):\n    '''\n    Write a function that takes in a list and returns a list that contains the elements of L multiplied by the scalar.\n    '''\n    return [e * L[i] for i, e in enumerate(L)]\n    \ndef list_sum(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains the sum of all elements of L.\n    '''\n    return sum(L)\n    \ndef list_sort(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains the elements of L sorted in ascending order.\n    '''\n    return sorted(L)\n    \ndef list_map_start(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains the elements of L mapped starting from the first element.\n    '''\n    return L[1:]\n    \ndef list_map_end(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains the elements of L mapped ending at the last element.\n    '''\n    return L[:-1]\n    \ndef list_map_every(L, fun):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L mapped in sequence, and returns the sequence of elements in L.\n    '''\n    return [fun(e) for e in L]\n    \ndef list_map_every_end(L, end_function):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L mapped in sequence and returns the sequence of elements in L.\n    '''\n    return [end_function(e) for e in L]\n    \ndef list_map_every_start(L, start_function):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L mapped in sequence, and returns the sequence of elements in L.\n    '''\n    return [start_function(e) for e in L]\n    \ndef list_filter(L, filter_function):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L that are in the provided function.\n    '''\n    return [e for e in L if filter_function(e)]\n    \ndef list_filter_start(L, filter_function):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L that are in the provided function.\n    '''\n    return [filter_function(e) for e in L]\n    \ndef list_filter_end(L, filter_function):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L that are in the provided function.\n    '''\n    return [e for e in L if filter_function(e)]\n    \ndef list_filter_every(L, filter_function):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L that are in the provided function.\n    '''\n    return [filter_function(e) for e in L]\n    \ndef list_filter_every_start(L, filter_function):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L that are in the provided function.\n    '''\n    return [filter_function(e) for e in L]\n    \ndef list_filter_every_end(L, filter_function):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L that are in the provided function.\n    '''\n    return [filter_function(e) for e in L]\n    \ndef list_filter_every_start_end(L, filter_function):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L that are in the provided function.\n    '''\n    return [filter_function(e) for e in L] + [e for e in L if filter_function(e)]\n    \ndef list_map_all(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains all the elements of L.\n    '''\n    return L\n    \ndef list_map_start_end(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L mapped starting from the first element and ending at the last element.\n    '''\n    return L[1:], L[:-1]\n    \ndef list_map_all_end(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L mapped ending at the last element.\n    '''\n    return L[:-1]\n    \ndef list_map_all_start(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L mapped starting from the first element and ending at the last element.\n    '''\n    return L[1:]\n    \ndef list_map_all_start_end(L):\n    '''\n    Write a function that takes in a list and returns a new list that contains elements of L mapped starting from the first element and ending at the last element.\n    '''\n    return L + [e for e in L if e not in L[::-",
        "num_ids": 20
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Write your code here\n    i=0\n    while i<len(S):\n        if i%step==0:\n            yield S[i:i+step]\n            i+=step\n        else:\n            i+=step\n",
        "num_ids": 58
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Call functions\n    s = import_function('import_lateral_surface')\n    f = import_function('face_surface_cube')\n",
        "num_ids": 36
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = (0.5 * l**2) - (0.5 * l * (l - 1) * (l - 2))\n    return a\n",
        "num_ids": 38
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def rectangular_lateral_surface_cube(l):\n        '''\n        Compute the lateral surface area of a rectangular quadrilateral.\n        '''\n        pass\n    def parallelogram_lateral_surface_cube(l):\n        '''\n        Compute the lateral surface area of a parallelogram.\n        '''\n        pass\n    lateral_surface_cube_fns = [rectangular_lateral_surface_cube, parallelogram_lateral_surface_cube]\n    return lateral_surface_cube_fns[l](l)\n",
        "num_ids": 55
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Find side length\n    s = sqrt(l**2 - 4 * l * (l + 2)**2)\n    # Define function\n    def f(s):\n        if s >= 1:\n            return 2 * (s**2 + (s-1)**2)\n        else:\n            return 0\n    # Compute area\n    a = s**2 * exp(f(s) / (2 * (s-2)))\n    return a\n",
        "num_ids": 110
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    def hypot(a, b):\n        return math.sqrt(a**2 + b**2)\n    def side(a, b, c, d):\n        return hypot(a, (b - c) / d)\n    def cube_length(l):\n        return hypot(l, l)\n    def side_area(l):\n        return side(l, l, l, l)\n    def surface_area(l):\n        return side_area(l) - side_area(l) / 2\n    def value(l):\n        '''\n        Return a number that represents the area of the cube of given side length.\n        '''\n        return side_area(l)\n    def area(l):\n        '''\n        Return a number that represents the area of the cube of given side length.\n        '''\n        return side_area(l) * cube_length(l)\n    def surface_area_area(l):\n        return (area(l) - (area(l) + area(l))) / 2\n    def surface_area_perimeter(l):\n        return (2 * (area(l) + area(l))) / 2\n    def surface_area_circle(l):\n        '''\n        Return a number that represents the area of a circular shape of given side length.\n        '''\n        return (math.pi * l ** 2) / 2\n    def circumference(l):\n        '''\n        Return a number that represents the circumference of a circular shape of given side length.\n        '''\n        return 2 * math.pi * l\n    def surface_area_perimeter_square(l):\n        return math.pi * l ** 2\n    def surface_area_square(l):\n        '''\n        Return a number that represents the area of a square shape of given side length.\n        '''\n        return side(l, l, l, l)\n    def volume(l):\n        '''\n        Return a number that represents the volume of a shape of given side length.\n        '''\n        return side_area(l) * cube_length(l)\n    def volume_perimeter(l):\n        '''\n        Return a number that represents the volume of a shape of given side length.\n        '''\n        return side_area(l) * math.sqrt(2) * cube_length(l)\n    def volume_square(l):\n        '''\n        Return a number that represents the volume of a shape of given side length.\n        '''\n        return side_area(l) * math.sqrt(3) * cube_length(l)\n    def volume_circle(l):\n        '''\n        Return a number that represents the volume of a shape of given side length.\n        '''\n        return side_area(l) * (math.pi ** 2) * cube_length(l)\n    def volume_circle_square(l):\n        '''\n        Return a number that represents the volume of a shape of given side length.\n        '''\n        return side_area(l) * (math.pi ** 2) * math.sqrt(3) * cube_length(l)\n    def volume_square_circle(l):\n        '''\n        Return a number that represents the volume of a shape of given side length.\n        '''\n        return side_area(l) * (math.pi ** 2) * (math.sqrt(3) * l) * cube_length(l)\n    def volume_square_circle_square(l):\n        '''\n        Return a number that represents the volume of a shape of given side length.\n        '''\n        return side_area(l) * (math.pi ** 2) * (math.sqrt(3) * l) * (math.sqrt(3) * l) * cube_length(l)\n    def volume_circle_square_square(l):\n        '''\n        Return a number that represents the volume of a shape of given side length.\n        '''\n        return side_area(l) * (math.pi ** 2) * (math.sqrt(3) * l) * (math.sqrt(3) * l) * (math.sqrt(3) * l) * cube_length(l)\n    def surface_area_cylinder(l):\n        '''\n        Return a number that represents the surface area of a cylinder of given side length.\n        '''\n        return (volume(l) + volume_perimeter(l) + volume_circle(l) + volume_circle_square(l)) / 3\n    def surface_area_rectangle(l):\n        '''\n        Return a number that represents the surface area of a rectangle of given side length.\n        '''\n        return volume_circle_square(l)\n    def surface_area_triangle(l):\n        '''\n        Return a number that represents the surface area of a triangle of given side length.\n        '''\n        return volume_circle_square(l) + volume_square(l)\n    def surface_area_square_triangle(l):\n        '''\n        Return a number that represents the surface area of a square triangle of given side length.\n        '''\n        return volume_square_circle(l) + volume_square_circle_square(l)\n    def surface_area_cube(l):\n        '''\n        Return a number that represents the surface area of a cube of given side length.\n        '''\n        return volume_square_circle(l) + volume_square_circle_square(l)\n    def surface_area_cylinder_square(l):\n        '''\n        Return a number that represents the surface area of a cylinder of given side length.\n        '''\n        return volume_circle_square(l) + volume_square_circle_square(l)\n    def surface_area_cylinder_rectangle(l):\n        '''\n        Return a number that represents the surface area of a cylinder of given side length.\n        '''\n        return volume_circle_square(l) + volume_square_circle(l) + volume_square(l)\n    def surface_area_sphere(l):\n        '''\n        Return a number that represents the surface area of a sphere of given side length.\n        '''\n        return volume_square(l)\n    def surface_area_rectangle_square(l):\n        '''\n        Return a number that represents the surface area of a rectangle of given side length.\n        '''\n        return volume_square(l)\n    def surface_area_rectangle_triangle(l):\n        '''\n        Return a number that represents the surface area of a rectangle of given side length.\n        '''\n        return volume_square_circle(l)\n    def surface_area_triangle_square(l):\n        '''\n        Return a number that represents the surface area of a triangle of given side length.\n        '''\n        return volume_square_circle(l)\n    def surface_area_triangle_circle(l):\n        '''\n        Return a number that represents the surface area of a triangle of given side length.\n        '''\n        return volume_circle(l) + volume_circle_square(l)\n    def surface_area_square_triangle_circle(l):\n        '''\n        Return a number that represents the surface area of a square triangle of given side length.\n        '''\n        return volume_circle_square(l) + volume_circle_square(l) + volume_square(l)\n    def surface_area_cylinder_cylinder(l):\n        '''\n        Return a number that represents the surface area of a cylinder of given side length.\n        '''\n        return volume_circle(l) + volume_square(l) + volume_circle_square(l) + volume_square(l)\n    def volume_cylinder_square_circle(l):\n        '''\n        Return a number that represents the volume of a square cylinder of given side length.\n        '''\n        return volume_circle_square(l) + volume_square(l) + volume_circle_square(l)\n    def volume_cylinder_rectangle_circle(l):\n        '''\n        Return a number that represents the volume of a rectangle cylinder of given side length.\n        '''\n        return volume_circle_square(l) + volume_square_circle(l) + volume_circle_square(l) + volume_square(l)\n    def volume_cylinder_circle_square_square(l):\n        '''\n        Return a number that represents the volume of a cylinder of given side length.\n        '''\n        return volume_circle",
        "num_ids": 7
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    import math\n    import matplotlib.pyplot as plt\n",
        "num_ids": 25
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = 0\n    for side in l:\n        surface += side*side*0.25\n    return surface\n",
        "num_ids": 29
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    # define height\n    h=1/2*l\n    \n    # define area\n    area=h*h\n    \n    # define radius\n    r=area/4\n    \n    # define step\n    s=10\n    \n    # loop\n    for i in range(int(s)):\n        \n        # left\n        for j in range(int(s),0,-1):\n            # if not equal to 0, stop\n            if r<h:\n                # height\n                if h<=j:\n                    # print ('side: ',i,'step: ',j,'left: ',l)\n                    # print ('lateral area: ',area)\n                    # print ('radius: ',r)\n                    # print ('left step: ',j)\n                    # print ('left side: ',h)\n                    # print ('\\n')\n                    # print (area)\n                    # print (r)\n                    # print (j)\n                    # print (l)\n                    # print ('\\n')\n                    # print ('\\n')\n                    lateral_area=area*(r**2)*(j**2)\n                    print ('\\n\\t\\t\\tLateral Area of cube: ', lateral_area, '\\n')\n                    return lateral_area\n                    \n            # right\n            else:\n                # height\n                if h<=j:\n                    # print ('side: ',i,'step: ',j,'right: ',l)\n                    # print ('lateral area: ',area)\n                    # print ('radius: ',r)\n                    # print ('right step: ',j)\n                    # print ('right side: ',h)\n                    # print ('\\n')\n                    # print (area)\n                    # print (r)\n                    # print (j)\n                    # print ('\\n')\n                    lateral_area=area*(r**2)*(j**2)\n                    print ('\\t\\t\\tLateral Area of cube: ', lateral_area, '\\n')\n                    return lateral_area\n                    \n            \n            # terminate\n            if j==0:\n                # print ('side: ',i,'step: ',j,'left: ',l)\n                # print ('lateral area: ',area)\n                # print ('radius: ',r)\n                # print ('left step: ',j)\n                # print ('left side: ',h)\n                # print ('\\n')\n                # print (area)\n                # print (r)\n                # print (j)\n                # print ('\\n')\n                # print ('\\n')\n                lateral_area=area*(r**2)*(j**2)\n                print ('\\t\\t\\tLateral Area of cube: ', lateral_area, '\\n')\n                return lateral_area\n                break\n",
        "num_ids": 644
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i**2\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if i%2==0:\n            sum+=i**2\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s = s + pow(i, 2)\n    return s\n    \n",
        "num_ids": 38
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, int(n/2) + 1):\n        if (n % i == 0):\n            sum += i**2\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += (i**2)\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(0, n + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n",
        "num_ids": 46
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Find the sum of squares of the first n odd natural numbers\n    # and add it to a new list\n    # This is done by dividing the original list by 2\n    # from a larger list of numbers\n    # and adding them together\n    # Then you have the new sum\n    # Write a loop that will check if the number is odd\n    # and then calculate the square of that number by multiplying the square of it with the square of the other number and adding that together\n    # ( if number is odd and it's the other number's square\n    #     then the square of it multiplied by the other number square\n    #     then the sum of the squares of both numbers\n    #     then the total sum of the squares\n    # )\n    # Otherwise\n    #    print \"No number is odd.\"\n    #    return \"No number is odd.\"\n    \n    \n    # Instead of adding all the squares together, we will first subtract the square of each odd number from the sum of squares\n    # and then add them together.\n    # This is done by dividing the original list by 2 and adding the square of each odd number.\n    # Note: we need to return a list, not a single number, so you can concatenate them all into one.\n",
        "num_ids": 281
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n**2\n",
        "num_ids": 8
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum = sum + i\n    return su",
        "num_ids": 37
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(1,n,2):\n        sum = sum + i**2\n    return sum\n",
        "num_ids": 66
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n    if n > 1:\n        star_num = math.floor(n ** 0.5)\n        if n % 2 == 0:\n            star_num += 1\n        for i in range(3, star_num+1, 2):\n            if n % i == 0:\n                break\n        else:\n            return n\n    return -1\n",
        "num_ids": 87
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else:\n        return 3 * find_star_num(n - 1) + 4\n",
        "num_ids": 48
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_numbers = [2, 5, 11, 13, 19, 23, 31, 34, 43, 47, 52, 56, 59, 63, 69, 72, 75, 81, 84, 91, 94, 99]\n    nth_star_num = star_numbers[n]\n    return nth_star_num\n",
        "num_ids": 79
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    else:\n        return -1\n",
        "num_ids": 166
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1 or n == 2:\n        return n\n    elif n == 3:\n        return 6\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n",
        "num_ids": 68
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    lst = []\n    for i in range(1, n+1):\n        lst.append(i)\n    return lst[n]\n",
        "num_ids": 38
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 0\n    for x in range(1, n): \n        if x * x == n: \n            return x \n    return n + ",
        "num_ids": 46
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 2\n    else: return find_star_num(n - 1) + 3\n",
        "num_ids": 38
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    total_list = []\n    for i in range(n + 1):\n        total_list.append(i)\n    return total_list[n % len(total_list)]\n",
        "num_ids": 45
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isascii():\n        return ord(k)\n    else:\n        return ord(k)-32\n",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    # for detecting an ascii value\n    if(k>=65 and k<=90):\n        return chr(k)\n    else:\n        return chr(k+32)\n    \ndef replace(word, old, new):\n    '''\n    Replace one substring in a text with another\n    '''\n    \n    # for replacing the old substring\n    for i in range(len(word)):\n        if word[i:i+len(old)]==old:\n            word=word[:i] + new + word[i+len(old):]\n            break\n        \n    return word\n",
        "num_ids": 71
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == '.':\n        return 32\n    elif k == '-' or k == '_':\n        return 39\n    elif k == '0':\n        return 46\n    elif k == '1':\n        return 49\n    elif k == '2':\n        return 58\n    elif k == '3':\n        return 63\n    elif k == '4':\n        return 67\n    elif k == '5':\n        return 70\n    elif k == '6':\n        return 73\n    elif k == '7':\n        return 77\n    elif k == '8':\n        return 80\n    elif k == '9':\n        return 82\n    else:\n        return int(k)",
        "num_ids": 172
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return ord(k)\n    else:\n        return (ord(k[0]) + ord(k[1]) * int(len(k) - 1) ) % 256\n",
        "num_ids": 53
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    c = ord(k)\n    if c > 127:\n        return c-128\n    else:\n        return c\n",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Use a dictionary to record the ascii value\n    ascii_dict = dict()\n    # Iterate through each character and check if its ascii.\n    for ch in k:\n        if ch.isalpha():\n            if ch in ascii_dict:\n                ascii_dict[ch] += 1\n            else:\n                ascii_dict[ch] = 1\n    # Loop through the dictionary and find the max value\n    for ch in ascii_dict:\n        if ascii_dict[ch] > ascii_dict[ch.lower()]:\n            return ch\n    return None\n",
        "num_ids": 149
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \n    \n    \n    ",
        "num_ids": 16
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    value = ord(k)\n    if value == 0:\n        raise ValueError('Character is not a valid ascii value.')\n    return value\n",
        "num_ids": 38
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            sum_even=sum_even+arr[i]\n    return sum_even\n        \nprint(sum_even_and_even_index([1,2,3,4,5]))\n",
        "num_ids": 79
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even=0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_even+=arr[i]\n    return sum_even\n    \n",
        "num_ids": 48
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even += arr[i]\n    return even\n    # this function does not return anything as the function only executes once\n",
        "num_ids": 58
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    \n    for num in arr:\n        if num%2==0:\n            sum = sum+num\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            total += arr[index]\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of all digits of a given number n.\n    '''\n    sum_of_digits = 0\n    while(n > 0):\n        digit = n % 10\n        sum_of_digits += digit\n        n = n // 10\n    print(sum_of_digits)\n    \ndef sum_of_digits_2(n):\n    '''\n    Write a python function to find the sum of all digits of a given number n.\n    '''\n    sum_of_digits_2 = 0\n    while(n > 0):\n        digit = n % 10\n        sum_of_digits_2 += digit\n        n = n // 10\n    print(sum_of_digits_2)\n    \ndef largest_number(arr):\n    '''\n    Write a python function to find the largest number in a given list.\n    '''\n    sum_of_digits = 0\n    for i in range(len(arr)):\n        sum_of_digits += arr[i]\n    print(sum_of_digits)\n    print(max(arr))\n    \ndef list_to_string(arr):\n    '''\n    Write a python function to print the elements of a given list.\n    '''\n    print(arr)\n",
        "num_ids": 8
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) <= 1:\n        return 0\n    else:\n        sum = 0\n        i = 0\n        while i < len(arr):\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n                if i == len(arr) - 1:\n                    break\n                i += 1\n            i += 1\n        return sum\n",
        "num_ids": 88
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    res = []\n    for i in range(1, n+1): \n        res.append(i**5)\n    print(res)\n",
        "num_ids": 37
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for power in range(1, n+1):\n        if power%2 == 0:\n            power_sum += pow(power,5)\n    return power_sum\n",
        "num_ids": 49
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**3)\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Write your code here.\n    # hint: a recursive function\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    else:\n        return (even_Power_Sum(n - 1) + 2 * even_Power_Sum(n - 2))\n    \nn = int(input())\nprint(even_Power_Sum(n)",
        "num_ids": 94
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 2\n    sum = 0\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    answer = 0\n",
        "num_ids": 7
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    num=0\n    for x in range(n):\n        num=num+x**5\n    return num\n",
        "num_ids": 29
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Declare variables \n    sum_of_even_numbers = 0\n    i = 0\n    # Check for n:\n    while(i < n): \n        # Add each power to the sum \n        sum_of_even_numbers = sum_of_even_numbers + pow(i, 5)\n        # increase the counter\n        i += 1\n    return sum_of_even_numbers\nprint(even_Power_Sum(7))\nprint(even_Power_Sum(10))\nprint(even_Power_Sum(100))\nprint(even_Power_Sum(1000))",
        "num_ids": 143
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i ** 5)\n    print(sum)\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # Your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n * even_Power_Sum(n - 1)",
        "num_ids": 46
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n",
        "num_ids": 32
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for t in test_list:\n        rear_list.append(t[-1])\n    return rear_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Your code here\n    return test_list\n",
        "num_ids": 14
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [ele[0] for ele in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n",
        "num_ids": 8
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for x in test_list:\n        result.append(x[1])\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        return test_list[0][1]\n    pass\n",
        "num_ids": 36
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[1])\n    return result\n    \ndef rear_extract_with_hash(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        if tuple[0] not in result:\n            result.append(tuple[0])\n    return result\n    \ndef print_rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[1])\n    return result\n    \ndef print_rear_extract_with_hash(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        if tuple[0] not in result:\n            result.append(tuple[0])\n    return result\n    \ndef odd_even_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        if tuple[1] % 2 == 0:\n            result.append(tuple[0])\n        else:\n            result.append(tuple[1])\n    return result\n    \ndef odd_even_extract_with_hash(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        if tuple[1] % 2 == 0:\n            result.append(tuple[0])\n        else:\n            result.append(tuple[1])\n    return resul",
        "num_ids": 58
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for data in test_list:\n        rear_extracted.append(data[1])\n    return rear_extracted\n",
        "num_ids": 41
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # print(test_tup1)\n    # print(test_tup2)\n    # print(test_tup1)\n    # print(test_tup2)\n    # input()\n",
        "num_ids": 51
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_list = []\n    test_tup2_list = []\n",
        "num_ids": 24
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # your code goes here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1.insert(0, None)\n    test_tup1.insert(len(test_tup1), None)\n    test_tup2.insert(0, None)\n    test_tup2.insert(len(test_tup2), None)\n    test_tup1.extend(test_tup2)\n    test_tup1.pop(0)\n    test_tup1.pop()\n    test_tup2.pop(0)\n    test_tup2.pop()\n    for i in range(len(test_tup1)):\n        if i % 2 == 0:\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n        else:\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n    \ndef calculate_sum(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and calculates the sum of the elements of the first tuple and the elements of the second tuple with the same index.\n    '''\n    test_tup1.append(0)\n    test_tup1.append(0)\n    test_tup2.append(0)\n    test_tup2.append(0)\n    test_tup1.extend(test_tup2)\n    test_tup1.pop(0)\n    test_tup1.pop()\n    test_tup2.pop(0)\n    test_tup2.pop()\n    for i in range(len(test_tup1)):\n        if i % 2 == 0:\n            test_tup1[i] = test_tup1[i] + test_tup2[i]\n        else:\n            test_tup1[i] = test_tup1[i] + test_tup2[i]\n    return test_tup1\n",
        "num_ids": 204
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    index1 = 0\n    for i in test_tup1:\n        index1 += 1\n        index2 = 0\n        for j in test_tup2[index1:]:\n            if index2 < index1:\n                return test_tup1[index2]\n            index2 += 1\n    return 0\n    \ntest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ntest_tup2 = (2, 4, 6, 8, 10, 12, 14, 16, 18)\nresult = substract_elements(test_tup1, test_tup2)\nprint(result)",
        "num_ids": 163
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    tup1 = tuple(tup1)\n    tup2 = tuple(tup2)\n    return tup1 - tup2\n",
        "num_ids": 58
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    result = []\n    for i in range(len(tup1)):\n        if tup1[i] < tup2[i]:\n            result.append(tup1[i])\n        else:\n            result.append(tup2[i])\n",
        "num_ids": 86
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # formula for binomial coeff of n\n    sum = 0\n    for i in range(1, n+1): \n        sum += (i*(2*i-1))/3\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def sum_even(n, c):\n        return c + sum([i**2 for i in range(n, 0, -2)])\n",
        "num_ids": 36
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # return ((math.factorial(n)) // (math.factorial(n - 1)) // (math.factorial(n - 2))) // (((math.factorial(n) - 1) * (math.factorial(n - 2)))) \n    return (math.factorial(n) // (math.factorial(n - 1) // (math.factorial(n - 2)))) // (((math.factorial(n) - 1) * (math.factorial(n - 2))))\n",
        "num_ids": 118
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeff_sum = 0\n    #print (n)\n    for i in range(n+1):\n        even_binomial_coeff_sum += math.pow(i, 2)\n    #print (even_binomial_coeff_sum)\n    return even_binomial_coeff_sum\n",
        "num_ids": 81
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return n*(n + 1)/6\ndef even_binomial_Coeff_Sum_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 2) / 6\ndef even_binomial_Coeff_Sum_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 3) / 6\ndef even_binomial_Coeff_Sum_4( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 4) / 6\ndef even_binomial_Coeff_Sum_5( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 5) / 6\ndef even_binomial_Coeff_Sum_6( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 6) / 6\ndef even_binomial_Coeff_Sum_7( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 7) / 6\ndef even_binomial_Coeff_Sum_8( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 8) / 6\ndef even_binomial_Coeff_Sum_9( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 9) / 6\ndef even_binomial_Coeff_Sum_10( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 10) / 6\ndef even_binomial_Coeff_Sum_11( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 11) / 6\ndef even_binomial_Coeff_Sum_12( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 12) / 6\ndef even_binomial_Coeff_Sum_13( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 13) / 6\ndef even_binomial_Coeff_Sum_14( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 14) / 6\ndef even_binomial_Coeff_Sum_15( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 15) / 6\ndef even_binomial_Coeff_Sum_16( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 16) / 6\ndef even_binomial_Coeff_Sum_17( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 17) / 6\ndef even_binomial_Coeff_Sum_18( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 18) / 6\ndef even_binomial_Coeff_Sum_19( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 19) / 6\ndef even_binomial_Coeff_Sum_20( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 20) / 6\ndef even_binomial_Coeff_Sum_21( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 21) / 6\ndef even_binomial_Coeff_Sum_22( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 22) / 6\ndef even_binomial_Coeff_Sum_23( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 23) / 6\ndef even_binomial_Coeff_Sum_24( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 24) / 6\ndef even_binomial_Coeff_Sum_25( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 25) / 6\ndef even_binomial_Coeff_Sum_26( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 26) / 6\ndef even_binomial_Coeff_Sum_27( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 27) / 6\ndef even_binomial_Coeff_Sum_28( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 28) / 6\ndef even_binomial_Coeff_Sum_29( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 29) / 6\ndef even_binomial_Coeff_Sum_30( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 30) / 6\ndef even_binomial_Coeff_Sum_31( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 31) / 6\ndef even_binomia",
        "num_ids": 24
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    while n!= 0: \n        remainder = n % 2 \n        n = n // 2 \n        if remainder == 0: \n            sum = sum + math.pow(2, n) \n        else: \n            sum = sum + math.pow(2, n) \n    return sum \n",
        "num_ids": 84
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2))\n    \ndef even_binomial_Coeff_Sum_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (even_binomial_Coeff_Sum_2(n-1)+even_binomial_Coeff_Sum_2(n-2))\n    \ndef Even_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_2(n-1)+Even_Sum_2(n-2))\ndef Even_Sum_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_2(n-1)+Even_Sum_2(n-2))\n    \ndef Even_Sum_2_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_2_2(n-1)+Even_Sum_2_2(n-2))\n    \ndef Even_Sum_2_2_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_2_2_2(n-1)+Even_Sum_2_2_2(n-2))\n    \ndef Even_Sum_3(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_3_2(n-1)+Even_Sum_3_2(n-2)+Even_Sum_3_2(n-3))\n    \ndef Even_Sum_3_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_3_2_2(n-1)+Even_Sum_3_2_2(n-2)+Even_Sum_3_2_2(n-3))\n    \ndef Even_Sum_3_2_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_3_2_2_2(n-1)+Even_Sum_3_2_2_2(n-2)+Even_Sum_3_2_2_2(n-3))\ndef Even_Sum_3_2_2_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_3_2_2_2(n-1)+Even_Sum_3_2_2_2(n-2)+Even_Sum_3_2_2_2(n-3))\n        \ndef Even_Sum_4(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_4_2(n-1)+Even_Sum_4_2(n-2)+Even_Sum_4_2(n-3)+Even_Sum_4_2(n-4))\n    \ndef Even_Sum_4_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_4_2_2(n-1)+Even_Sum_4_2_2(n-2)+Even_Sum_4_2_2(n-3)+Even_Sum_4_2_2(n-4))\n    \ndef Even_Sum_4_2_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_4_2_2_2(n-1)+Even_Sum_4_2_2_2(n-2)+Even_Sum_4_2_2_2(n-3)+Even_Sum_4_2_2_2(n-4))\n        \ndef Even_Sum_4_2_2_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_4_2_2_2_2(n-1)+Even_Sum_4_2_2_2_2(n-2)+Even_Sum_4_2_2_2_2(n-3)+Even_Sum_4_2_2_2_2(n-4))\n    \ndef Even_Sum_5(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_5_2(n-1)+Even_Sum_5_2(n-2)+Even_Sum_5_2(n-3)+Even_Sum_5_2(n-4)+Even_Sum_5_2(n-5))\n    \ndef Even_Sum_5_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_5_2_2(n-1)+Even_Sum_5_2_2(n-2)+Even_Sum_5_2_2(n-3)+Even_Sum_5_2_2(n-4)+Even_Sum_5_2_2(n-5))\n    \ndef Even_Sum_5_2_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        return (Even_Sum_5_2_2_2(n-1)+Even_Sum_5_2_2_2(n-2)+Even_Sum_5_2_2_2(n-3)+Even_Sum_5_2_2_2(n-4)+Even_Sum_5_2_2_2(n-5))\n    \ndef Even_Sum_5_2_2_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([binomialCoeff_Sum(n, i) for i in range(n)])\n",
        "num_ids": 27
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_3(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_4(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_5(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_6(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_7(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_8(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_9(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_10(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_11(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_12(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_13(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_14(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_15(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 2:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2)))\n    else:\n        print(int(2 * (n - 1) * (n - 1) / 3 - (2 * n - 2) / 2 + 2 * n * (n - 1) / 3))\ndef even_binomial_Coeff_Sum_16(n): \n    '''\n    Write a python function that takes in a positive integer n and find",
        "num_ids": 16
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int( math.ceil(math.sqrt(n))) \n",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3*h**3\n    #return (r**3)*(h**3)\n",
        "num_ids": 26
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3/3\n",
        "num_ids": 10
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # your code here\n    return(4/3*pi*(r**3)*h)\n",
        "num_ids": 25
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3 * h**3\n",
        "num_ids": 12
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3*h**2\n",
        "num_ids": 12
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 2*pi*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4*(np.pi*(r**2)*h)\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 2*3.14*(r**2)\n    return v\n",
        "num_ids": 21
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return h*r**3\n    \nprint(volume_cylinder(2,5)) # 5*4*3\n",
        "num_ids": 30
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Write your code here\n    # WARNING: You do not have to do anything clever about this function.\n    return r*h*3.1416\n",
        "num_ids": 37
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if(value >= n):\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "num_ids": 46
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key, value in dict.items():\n        if value >= n:\n            dict.pop(key)\n",
        "num_ids": 28
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.copy().filter(lambda x: x[\"value\"] >= n)\n",
        "num_ids": 21
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    lst = []\n    for item in dict.items():\n        if item[1] >= n:\n            lst.append(item)\n    return lst\n",
        "num_ids": 41
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    filtered = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered[key] = dict[key]\n    return filtered\n    \n    \n    ",
        "num_ids": 48
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict=dict.copy()\n    newDict=dict.copy()\n    for key,value in newDict.items():\n        if value>=n:\n            newDict[key]=value\n    return newDict\n",
        "num_ids": 58
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out = dict.copy()\n    for k in out.keys():\n        if out[k] >= n:\n            out.pop(k)\n    return out\n",
        "num_ids": 41
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.items()[:n]\n",
        "num_ids": 13
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if type(dict)==dict:\n        for key in dict:\n            if type(dict[key])==dict and type(n)==int:\n                if dict[key]>=n:\n                    dict_filter(dict,n)\n            elif type(dict[key])==list:\n                dict_filter(dict[key],n)\n        return dict\n    elif type(dict)==list:\n        for key in dict:\n            if type(dict[key])==dict and type(n)==int:\n                if dict[key]>=n:\n                    dict_filter(dict,n)\n            elif type(dict[key])==list:\n                dict_filter(dict[key],n)\n        return dict\n        \ndef dict_reverse(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and reverses the order of the elements within the dictionary.\n    '''\n    if type(dict)==dict:\n        if type(n)==int:\n            for key in dict:\n                if type(dict[key])==dict and type(n)==int:\n                    dict[key]=dict[key][::-1]\n            return dict\n        else:\n            for key in dict:\n                if type(dict[key])==dict and type(n)==int:\n                    dict[key]=dict[key][::-1]\n            return dict\n    elif type(dict)==list:\n        if type(n)==int:\n            for key in dict:\n                if type(dict[key])==dict and type(n)==int:\n                    dict[key]=dict[key][::-1]\n            return dict\n        else:\n            for key in dict:\n                if type(dict[key])==dict and type(n)==int:\n                    dict[key]=dict[key][::-1]\n            return dict\n",
        "num_ids": 227
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return 0\n    else:\n        # find the position of the first element\n        first_index = test_tup.index(test_tup[0])\n        # find the second element\n        second_index = test_tup.index(test_tup[1])\n        # count the number of elements that occurs before the first element\n        first_element_count = 0\n        # iterate over each element in the list\n        for i in test_tup:\n            # if the element is less than the first element\n            if i < test_tup[first_index]:\n                # increment the count by 1\n                first_element_count += 1\n        # return the count\n        return first_element_count\n",
        "num_ids": 181
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] <= test_tup[0]:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef count_all_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] < test_tup[i + 1]:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef count_first_and_last(test_tup):\n    '''\n    Write a function to count the number of occurrences of the tuple element in the given tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[len(test_tup) - 1]:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef search_element_in_list(test_tup, target):\n    '''\n    Write a function to search a tuple element in the given list.\n    '''\n    \n    for i in range(len(test_tup)):\n        if test_tup[i] == target:\n            return i\n    return -1\n    \n    \ndef remove_from_list(test_tup, item):\n    '''\n    Write a function to remove the tuple element from the given list.\n    '''\n    \n    for i in range(len(test_tup)):\n        if test_tup[i] == item:\n            test_tup.remove(item)\n            return\n        else:\n            continue\n        \n    return \n    \n    \ndef sort_tuple(test_tup):\n    '''\n    Write a function to sort a tuple.\n    '''\n    \n    for i in range(len(test_tup) - 1):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] < test_tup[j]:\n                test_tup[i], test_tup[j] = test_tup[j], test_tup[i]\n            \n    return test_tup\n    \n    \ndef zip_tuple(test_tup):\n    '''\n    Write a function to zip a tuple.\n    '''\n    \n    for i in range(len(test_tup) - 1):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] < test_tup[j]:\n                test_tup[i], test_tup[j] = test_tup[j], test_tup[i]\n            \n    return test_tup\n    \n    \ndef count_duplicates(test_tup):\n    '''\n    Write a function to count the number of duplicates in a tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i]:\n            count += 1\n    return count\n    \n    \ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove duplicate elements from a tuple.\n    '''\n    \n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                test_tup.remove(test_tup[i])\n    return test_tup\n    \n    \ndef remove_duplicates_2(test_tup):\n    '''\n    Write a function to remove duplicate elements from a tuple.\n    '''\n    \n    for i in range(len(test_tup) - 1):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                test_tup.remove(test_tup[i])\n    return test_tup\n    \n    \ndef replace_element(test_tup):\n    '''\n    Write a function to replace a tuple element with another tuple element.\n    '''\n    \n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[len(test_tup) - 1]:\n            test_tup[i] = test_tup[len(test_tup) - 1]\n            test_tup.remove(test_tup[len(test_tup) - 1])\n        else:\n            continue\n    return test_tup\n    \n    \ndef remove_element(test_tup):\n    '''\n    Write a function to remove a tuple element from the given list.\n    '''\n    \n    for i in range(len(test_tup) - 1):\n        if test_tup[i] in test_tup:\n            test_tup.remove(test_tup[i])\n    return test_tup\n    \n    \ndef count_contiguous_elements(test_tup):\n    '''\n    Write a function to count the number of contiguous elements in a tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] >= test_tup[i + 1]:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef count_reverse_elements(test_tup):\n    '''\n    Write a function to count the number of reverse elements in a tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] < test_tup[len(test_tup) - 1]:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef count_sequential_elements(test_tup):\n    '''\n    Write a function to count the number of sequential elements in a tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] <= test_tup[i + 1]:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef reverse_sequence(test_tup):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    \n    for i in range(len(test_tup) - 1):\n        j = len(test_tup) - 1 - i\n        test_tup[i], test_tup[j] = test_tup[j], test_tup[i]\n    return test_tup\n    \n    \ndef find_if_subsequence_contiguous(test_tup):\n    '''\n    Write a function to find if a tuple is a subsequence of a given tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] <= test_tup[i + 1]:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef get_min_and_max_index(test_tup):\n    '''\n    Write a function to find the minimum and maximum element in a tuple.\n    '''\n    \n    min_val = test_tup[0]\n    max_val = test_tup[0]\n    for i in range(1, len(test_tup)):\n        if test_tup[i] < min_val:\n            min_val = test_tup[i]\n        elif test_tup[i] > max_val:\n            max_val = test_tup[i]\n    return min_val, max_val\n    \n    \ndef get_index_in_range(test_tup):\n    '''\n    Write a function to find the index of the given tuple element.\n",
        "num_ids": 17
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(set(test_tup[0::2]))\n",
        "num_ids": 19
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    if test_tup in tuple(test_tup):\n        return len(test_tup)\n    else:\n        return 0\n",
        "num_ids": 49
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count=0\n    for el in range(len(test_tup)):\n        if test_tup[el]==test_tup[0]:\n            count=count+1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    for i in range(len(test_tup)):\n        if i == 0:\n            first_element = test_tup[i]\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n    \n    first_element_index = i\n    \n    while first_element_index < len(test_tup):\n        if test_tup[first_element_index] == first_element:\n            first_element_index += 1\n        else:\n            break\n    \n    return first_element_index - 1\n        \n",
        "num_ids": 145
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_of_elements_before = 0\n    for i in test_tup:\n        if i!= test_tup[0]:\n            num_of_elements_before += 1\n    return num_of_elements_before\n",
        "num_ids": 60
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # TODO: replace this with the solution you wrote in class\n    return len(test_tup[0])\n",
        "num_ids": 29
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        raise IndexError(\"The tuple is empty!\")\n    counter = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[0]:\n            counter += 1\n    return counter\n",
        "num_ids": 74
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n",
        "num_ids": 31
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n % 2 == 1\n",
        "num_ids": 10
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = np.arange(-n, n+1)\n    dx = x[1: -1] - x[:-1]\n    return np.sum(np.sign(dx) * np.arctan(dx))\n",
        "num_ids": 56
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i=0\n    while i<n:\n        if i==0:\n            if n==1:\n                print(n)\n            else:\n                print(n-i)\n        i+=1\n",
        "num_ids": 51
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = int(n)\n    for i in range(num):\n        if(n == (i+1)):\n            return n\n        else:\n            pass\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 0\n    while i <= n:\n        i = i+1\n        if i % 2 == 0:\n            i = i + 1\n    return i",
        "num_ids": 40
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n+1\n    i = 2\n    while i <= n:\n        if(n % i == 0):\n            if n % (i ** 2) == 0:\n                return i\n            else:\n                return i\n        i += 1\n",
        "num_ids": 61
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, e in enumerate(dlist):\n        if e == item:\n            return (True,i)\n    return (False, -1)\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index,value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i, item\n    return -1, -1\n",
        "num_ids": 40
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n    return (True, index)\n",
        "num_ids": 45
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index_of_item = 0\n",
        "num_ids": 11
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, v in enumerate(dlist):\n        if v == item:\n            return i, v\n    return None\n",
        "num_ids": 32
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #TODO: Implement this function!\n    index = -1\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            index = i\n            break\n    return index!= -1, index\n",
        "num_ids": 60
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i,dlist.index(item)\n        \n    return None\n    \n    ",
        "num_ids": 47
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 45
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count = 0\n    for ele in test_list:\n        if ele in test_list:\n            count += 1\n    return count == len(test_list)\n",
        "num_ids": 41
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list))==len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    test_list = set(test_list)\n    test_list_unique = list(test_list)\n    if len(test_list)!= len(test_list_unique):\n        print('The given list is not a set')\n        return False\n    else:\n        print('The given list is a set')\n        return True\n    \nif __name__ == '__main__':\n    test_list = [1, 2, 1, 1, 2, 1, 2, 2, 3, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 9, 9, 9, 10]\n    all_unique(test_list)",
        "num_ids": 172
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Add your Python code here\n    \n    return test_list!= []\n",
        "num_ids": 21
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return not set(test_list) == set(test_list[0])\n",
        "num_ids": 21
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = True\n    for i in range(0,len(test_list)):\n        if test_list[i] == test_list[i]:\n            result = False\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Your code here\n    if not test_list:\n        return False\n    seen = set()\n    for el in test_list:\n        if el in seen:\n            return False\n        seen.add(el)\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if not test_list:\n        return False\n",
        "num_ids": 14
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for element in test_list:\n        if element in test_list:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    all_unique_list = []\n",
        "num_ids": 11
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums2)>len(nums1):\n        nums1,nums2=nums2,nums1\n    result=[]\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result=[]\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n",
        "num_ids": 21
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_nums1 = []\n    new_nums2 = []\n    \n    for i in range(len(nums1)):\n        new_nums1.append(nums1[i]-nums2[i])\n    \n    for i in range(len(new_nums1)):\n        if new_nums1[i] > 0:\n            new_nums2.append(new_nums1[i])\n        else:\n            new_nums2.append(0)\n    \n    return new_nums2\n",
        "num_ids": 134
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    diff = []\n    for i in range(0,len(nums1)):\n        diff.append(nums1[i]-nums2[i])\n    return diff\n",
        "num_ids": 45
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    nums1.sort()\n    nums2.sort()\n    \n    while nums1 and nums2:\n        if nums1[-1]<nums2[-1]:\n            nums1.pop()\n        else:\n            nums2.pop()\n    \n    return nums1 + nums2\n    \nnums1 = [1,2,3,4,5]\nnums2 = [3,4,5,6,7]\nprint(sub_list(nums1,nums2))\n",
        "num_ids": 132
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return nums1 - nums2\n",
        "num_ids": 12
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [[num - num1 for num in nums2] for num in nums1]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not nums1 or not nums2:\n        return None\n",
        "num_ids": 19
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count=0\n    for i in n:\n        count+=1\n        if count%10==i:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) == int: \n        return n <= 1\n    else: \n        return False\n",
        "num_ids": 28
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass \n    # if n%10 == 0:\n    #     return True\n    # elif n%10 == 1:\n    #     return False\n    # elif n%10 == 2:\n    #     return False\n    # elif n%10 == 3:\n    #     return False\n    # elif n%10 == 4:\n    #     return False\n    # elif n%10 == 5:\n    #     return False\n    # elif n%10 == 6:\n    #     return False\n    # elif n%10 == 7:\n    #     return False\n    # elif n%10 == 8:\n    #     return False\n    # elif n%10 == 9:\n    #     return False\n    # else:\n    #     return False\n",
        "num_ids": 186
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0: \n        print(\"\\nYou have entered an invalid value\")\n        return False\n    else: \n        list1 = list(str(n))\n        if n!= 0 and (len(list1)!= len(set(list1))):\n            print(\"\\nYou have entered an invalid value\")\n            return False\n        else: \n            return True\n",
        "num_ids": 92
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    result = 0\n    for i in range(len(s)):\n        d = int(s[i])\n        if d < 10:\n            result += 1\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def valid(n, k): \n        '''\n        Write a python function takes in an integer and return True if it is a valid integer, otherwise return False.\n        '''\n        # max integer\n        if n > n_max:\n            return False\n",
        "num_ids": 20
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    list = []\n    for i in range(10):\n        list.append(n % 10)\n        n = n // 10\n    check = [0 for i in range(10)]\n    for i in list:\n        for j in range(10):\n            if i == j:\n                continue\n            else:\n                check[j] += 1\n                if check[j] > check[i] :\n                    check[j] = check[i]\n    for i in range(10):\n        if check[i] == 0:\n            return False\n    return True\n",
        "num_ids": 135
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"n must be an integer\")\n    if n < 10:\n        raise ValueError(\"n must be greater than 0\")\n    count = 0\n    digit = n\n    while (digit >= 0):\n        digit = digit // 10\n        count += 1\n    if count > 9:\n        return False\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def validate_digit(n): \n        num_list = []\n        while n: \n            digit = n % 10\n            num_list.append(digit) \n            n = n // 10\n        return num_list\n    num_list = validate_digit(n)\n    return all(x == num_list[0] for x in num_list)\n",
        "num_ids": 88
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    element = list.index(element)\n    \n    for i in range(len(list)):\n        if(list[i]!= element):\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    index = 0\n    while index < len(list):\n        if list[index] == element:\n            return True\n        index += 1\n    return False\n    \n    \ndef main():\n    '''\n    Write a function that checks whether all items in the list are equal to the given element, using a check_element function.\n    '''\n    numbers = [1,2,2,3,1,2,3,4,5]\n    print(check_element(numbers,2))\n",
        "num_ids": 39
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if not list:\n        return False\n    elif list and element not in list:\n        return False\n    else:\n        return True\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #if element not in list:\n        #return False\n    #else:\n        #return True\n    return element in list\n",
        "num_ids": 32
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    new_list = []\n    for i in list:\n        if i!= element:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        raise ValueError(\"The list is empty.\")\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return 'Error: Element not in list'\n    if len(list) == 0:\n        return 'Error: List is empty'\n    if len(list) == 1:\n        return 'Error: Element is not in list'\n    return list == element\n",
        "num_ids": 69
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for index, item in enumerate(list):\n        if list[index]!= element:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text=re.sub(r'[a-zA-Z ]','',text)\n    return re.search(r'[a-zA-Z][a-zA-Z0-9]+\\b',text)!= None\n",
        "num_ids": 58
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search('(?<=a)(?=b).*?(?=c)', text)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\w+b', text)!= None\n    # return re.search(r'a\\",
        "num_ids": 2000
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.findall(r'a\\w*\\s(.*?)\\sb(.*?)',text)\n    if len(text) < 2:\n        return False\n    else:\n        return True\n",
        "num_ids": 52
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text[0] == 'a':\n        return True\n    elif text[-1] == 'b':\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?<=\\w)([a-zA-Z])(?=\\w)')\n    match = pattern.match(text)\n    if match is None:\n        return False\n    else:\n        return True\n",
        "num_ids": 64
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_upper = text.upper()\n    pattern = r'(?<=^)([bc])(a|b)(?=[^a])'\n    text_lower = text.lower()\n    text_all = text_upper+text_lower\n    if re.search(pattern, text_all):\n        return True\n    else:\n        return False\ndef count_unique_word(text):\n    '''\n    Write a function that counts the number of unique words in a given string.\n    '''\n    num_unique = 0\n    text_upper = text.upper()\n    pattern = r'(?<=^)([bc])(a|b)(?=[^a])'\n    words = text_upper.split(' ')\n    for word in words:\n        if re.search(pattern, word):\n            num_unique += 1\n    return num_unique\ndef average_substring_length(text):\n    '''\n    Write a function that takes a string and returns the average length of the substring.\n    '''\n    #The problem here is that the part of the string is going to be a substring of the entire string.\n    #But it is easy to remove any characters from the start and end of the substring, \n    #so as to remove any characters, the average length of the substring is the length of the entire substring\n    #This is what works in this case\n    def sub_part(text):\n        sub = \"\"\n        for i in range(len(text)):\n            sub += text[i]\n            if i == len(text)-1:\n                return len(sub)\n    return int(sub_part(text))/len(text)\ndef count_substring_in_dict(text, dictionary):\n    '''\n    Write a function that takes a string and returns the number of times the substring is present in the given dictionary.\n    '''\n    count = 0\n    for letter in dictionary:\n        if text.count(letter)!= 0:\n            count += 1\n    return count\ndef count_word_frequency_dict(text):\n    '''\n    Write a function that takes a string and returns the number of times the word occurs in the given dictionary.\n    '''\n    #Here is the process\n    #If the word is present in the dictionary then the count will be 1\n    #If the word is not present in the dictionary then the count will be 0\n    text_lower = text.lower()\n    words = text_lower.split()\n    pattern = r'(?<=^)([bc])([a-z][a-z]*)(?=[^a-z])'\n    for word in words:\n        if re.search(pattern, word):\n            return 1\n    return 0\ndef sum_substring_length_dict(text, dictionary):\n    '''\n    Write a function that takes a string and returns the sum of the length of the substring.\n    '''\n    total = 0\n    for i in range(len(text)):\n        total += len(dictionary[text[i]])\n    return total\ndef get_word_frequency_dict(text, dictionary):\n    '''\n    Write a function that takes a string and returns the frequency of each word in the dictionary.\n    '''\n    word_frequency = {}\n    for word in dictionary:\n        if word in text:\n            word_frequency[word] = 1\n        else:\n            word_frequency[word] = 0\n    return word_frequency\ndef word_in_dictionary(text, dictionary):\n    '''\n    Write a function that takes a string and returns whether the word exists in the given dictionary.\n    '''\n    word = text.lower()\n    if word in dictionary.keys():\n        return True\n    else:\n        return False\ndef swap_letter_dictionary(text):\n    '''\n    Write a function that takes a string and returns the dictionary where the letters are swapped.\n    '''\n    letters = {'a':'w', 'b':'x', 'c':'y', 'd':'z', 'e':'A', 'f':'B', 'g':'C', 'h':'D', 'i':'E', 'j':'F', 'k':'G', 'l':'H','m':'I', 'n':'J', 'o':'K', 'p':'L', 'q':'M', 'r':'N','s':'O', 't':'P', 'u':'Q', 'v':'R', 'w':'S', 'x':'T', 'y':'U', 'z':'V','':''}\n    text = text.replace(' ', '')\n    for i in text:\n        letters[i] = i\n    return letters\ndef check_unique_word(text):\n    '''\n    Write a function that takes a string and returns true if it has only two or three 'a' characters,\n    and false otherwise.\n    '''\n    pattern = r'(?<=^)([bc])(a|b)(?=[^a])'\n    text_lower = text.lower()\n    text_all = text_lower.split(' ')\n    if text_all[0]!= 'a' or text_all[1]!= 'b':\n        return False\n    else:\n        return True\ndef is_palindrome(text):\n    '''\n    Write a function that takes a string and returns true if the string is a palindrome.\n    '''\n    pattern = r'(?<=^)([bc])([a-z][a-z]*)(?=[^a-z])'\n    text_lower = text.lower()\n    text_all = text_lower.split(' ')\n    for i in range(len(text_all)):\n        if text_all[i]!= text_all[len(text_all)-1-i]:\n            return False\n    return True\ndef check_palindrome_numbers(text):\n    '''\n    Write a function that takes a string and returns true if the string contains the 'a' or 'b' character followed by a number,\n    and false otherwise.\n    '''\n    pattern = r'(?<=^)([bc])([a-z][a-z]*)(?=[^a-z])'\n    text_lower = text.lower()\n    text_all = text_lower.split(' ')\n    if text_all[0]!= 'a' or text_all[1]!= 'b':\n        return False\n    else:\n        return True\ndef check_palindrome_words(text):\n    '''\n    Write a function that takes a string and returns true if the string contains only 'a' and 'b' characters followed by a number,\n    and false otherwise.\n    '''\n    pattern = r'(?<=^)([bc])([a-z][a-z]*)(?=[^a-z])'\n    text_lower = text.lower()\n    text_all = text_lower.split(' ')\n    if text_all[0]!= 'a' or text_all[1]!= 'b':\n        return False\n    else:\n        return True\ndef check_palindrome_words_1(text):\n    '''\n    Write a function that takes a string and returns true if the string contains only 'a' and 'b' characters followed by a number,\n    and false otherwise.\n    '''\n    pattern = r'(?<=^)([bc])([a-z][a-z]*)(?=[^a-z])'\n    text_lower = text.lower()\n    text_all = text_lower.split(' ')\n    if text_all[0]!= 'a' or text_all[1]!= 'b':\n        return False\n    else:\n        return True\ndef remove_space(text):\n    '''\n    Write a function that takes a string and returns the string without any spaces.\n    '''\n    pattern = r'(?<!^)([^\\s])'\n    text_lower = text.lower()\n    text_all = text_lower.split(' ')\n    for word in text_all:\n        if word!='':\n            text_all.remove(word)\n    return''.join(text_all)\ndef remove_space_2(text):\n    '''\n    Write a function that takes a string and returns the string without any spaces.\n    '''",
        "num_ids": 1
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    return True\n",
        "num_ids": 8
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if (len(text)%2 == 0):\n        return text[0:len(text)//2] == text[len(text)//2:len(text)]\n    else:\n        return text[0:len(text)//2] == text[len(text)//2:len(text)]\ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    return text[0:len(text)//3] == text[len(text)//3:len(text)]\ndef text_match_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    return text[0:len(text)//4] == text[len(text)//4:len(text)]\ndef text_match_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    return text[0:len(text)//5] == text[len(text)//5:len(text)]\ndef text_match_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    return text[0:len(text)//6] == text[len(text)//6:len(text)]\ndef text_match_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eight 'b' characters.\n    '''\n    return text[0:len(text)//7] == text[len(text)//7:len(text)]\ndef text_match_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by 9 'b' characters.\n    '''\n    return text[0:len(text)//8] == text[len(text)//8:len(text)]\n",
        "num_ids": 30
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    print(f'#{n} {k}')\n    return sum([(a[i+k-1] + a[i]) for i in range(n - k)])\n",
        "num_ids": 45
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Time O(n)\n    # Space O(n)\n    \n    # init variable\n    l = 0\n    \n    # loop\n    for i in range(n):\n        a[i] *= k\n        l = max(l, a[i])\n    \n    # update the maximum\n    return l\n",
        "num_ids": 78
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here\n    numbers = [0] * n\n    for i in range(1, k):\n        numbers[i-1] = a[i-1]\n    for i in range(n-k, n):\n        numbers[i-k] += a[i]\n    return max(numbers)\n",
        "num_ids": 81
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array to store sums \n    result = [0] * n\n    \n    # Start from the first element \n    for i in range(n): \n        # Increment the kth elements by 1 and sum by the previous k elements \n        for j in range(i, n): \n            result[j] += a[j] \n            \n    # Sum elements of the array \n    max_sum = 0 \n    for i in range(n): \n        # If this element exceeds the current sum, then sum the previous two elements \n        if (result[i] > max_sum): \n            max_sum = result[i] \n        # If the element is greater than the current sum, then we have found a better sum \n        elif (result[i] == max_sum): \n            if (i == (n - 1)): \n                # if the current element has been repeated, then we have a better sum \n                max_sum = result[i] \n    # Return the maximum sum \n    return max_sum \n",
        "num_ids": 251
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = -1\n    for i in range(n):\n        temp_sum = 0\n        for j in range(i, n):\n            temp_sum += a[j]\n            if temp_sum == k:\n                ans = max(ans, temp_sum)\n    return ans\n",
        "num_ids": 70
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 0\n    current_sum = 0\n    for j in range(0,n+1):\n        current_sum += a[j]\n",
        "num_ids": 37
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def sub_array_sum(sub, arr, n, k):\n        if k == 0:\n            return 0\n        # initialize answer \n        answer = 0\n        # check how many subarray\n        for i in range(sub, n):\n            answer += arr[i]\n        # if answer>=max(answer,sub_array_sum(sub, arr, n, k-1)):\n        #     answer=max(answer,sub_array_sum(sub, arr, n, k))\n        # return answer\n        # print(answer)\n        return answer\n",
        "num_ids": 136
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here\n    sub_array_sum = []\n    cur_sum = 0\n",
        "num_ids": 25
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    num_sub_array = int(n/k)\n    for i in range(1, num_sub_array+1):\n        sub_array = a[k*i:k*i+k]\n        sub_array.sort()\n        sum_sub_array = 0\n        for i in range(len(sub_array)):\n            sum_sub_array += sub_array[i]\n        if max_sum < sum_sub_array:\n            max_sum = sum_sub_array\n    return max_sum\n",
        "num_ids": 133
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = 0\n    for i in range(0, n, k):\n        s += a[i]\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if i%2 == 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    summ = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            summ += i**2\n    return summ\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if (n==0):\n        return 0\n    else:\n        return n*square_Sum(n-1)\n        \n    # def sum_squares(n):\n    #     \"\"\"\n    #     Write a python function takes in an integer n and returns the sum of squares of all numbers up to n.\n    #     \"\"\"\n    #     sum=0\n    #     for i in range(1,n+1):\n    #         sum+=i**2\n    #     return sum\n",
        "num_ids": 119
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * square_Sum(n - 1)\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize a sum as zero\n    sum = 0\n    # loop through the numbers from 0 to n\n    for i in range(1, n+1):\n        # increment the square of the current number by the square of the previous number\n        sum += i * i\n    # return the sum of squares\n    return sum\n",
        "num_ids": 75
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i*i\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans += i**2\n    return ans\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # your code here\n    n = int(n)\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\n    \n",
        "num_ids": 49
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(0, n+1):\n        sum = sum + (i**2)\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s = s + i ** 2\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = [0] * len(list1)\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if(list1[i][j] > result[j]):\n                result[i] = list1[i][j]\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    length = len(list1[0])\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n",
        "num_ids": 67
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    \n    # Use a max_len function to find the longest list\n    max_len = max(list1, key = len)\n    \n    # Return the max_len\n    return max_len\n",
        "num_ids": 51
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = []\n    for i in list1:\n        max_length.append(len(i))\n    return max(max_length)\n",
        "num_ids": 38
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(item) for item in list1])\n",
        "num_ids": 17
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n",
        "num_ids": 9
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            length.append(list1[i][j])\n    return max(length)\n    \nlist1 = [['apples', 'oranges', 'cherries', 'banana'],\n    ['Alice', 'Bob', 'Carol', 'David'],\n    ['dogs', 'cats','moose', 'goose']]\nprint(max_length(list1))\n",
        "num_ids": 121
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max_length = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if max_length < list1[i][j]:\n                max_length = list1[i][j]\n    return max_length\n",
        "num_ids": 76
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    n=len(list1)\n    for i in range(0,n):\n        for j in range(0,i+1):\n            if (list1[j][i] > list1[i][i]):\n                list1[j][i]=list1[i][i]\n    \n    return(list1)",
        "num_ids": 79
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #create a list of all possible colours and their respective count \n    colours = [[\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n            [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n            [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n            [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n            [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n            [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n            [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n            [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"]]\n    \n    def count_ways(n, k):\n        '''\n        Given the number of posts, and the number of colours, \n        return the number of ways to draw the fence of a given colour in the \n        given number of posts.\n        '''\n        # Check if the colour has already been visited\n        # to avoid repeated drawing.\n        if (colours[k][0] == colours[k][2] and colours[k][0]!= \"white\"):\n            return 1\n        \n        # If colour is not visited, it has already been visited, no need to continue.\n        if (colours[k][0] == \"white\"):\n            return 0\n        \n        # If colour is visited, there's a way to draw.\n        # Check if there is at least one colour adjacent to the colour we are \n        # drawing in the current colour.\n        if (colours[k][1] == colours[k][2] and colours[k][1]!= \"white\"):\n            return count_ways(n, k) + count_ways(n-1, k)\n        else:\n            return count_ways(n-1, k)\n    \n    return count_ways(n, k)\n",
        "num_ids": 225
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # reference to dictionary of the previous solution\n    from collections import defaultdict\n    \n    # check if the fence is a rectangle\n    def is_rectangle(fence):\n        if len(fence) == 1:\n            return fence == '#'\n        \n        # find the first \"color\" and fill with \"#\"\n        color = fence[0]\n        for index, item in enumerate(fence[1:]):\n            if item!= color:\n                return False\n            \n        # if all colors have been filled\n        return True\n    \n    # count the number of ways\n    ways = 0\n    if n <= 2:\n        ways = 1\n        \n    # if a fence can be drawn with n posts\n    for i in range(1, n):\n        if is_rectangle(fence[:i]):\n            ways += 1\n            \n            # if the fence is of the form (#) -> (#) -> (#) -> (#) -> (#) -> (#) -> (#) -> (#)\n            for j in range(0, i):\n                if fence[i] == fence[j] and j < i:\n                    ways += 1\n            \n            # if the fence is of the form (.) -> (.) -> (.) -> (.) -> (.) -> (.) -> (.) -> (.) -> (.)\n            for j in range(i, len(fence)):\n                if fence[i] == fence[j] and j < i:\n                    ways += 1\n    \n    # if the fence is of the form (.) -> (.) -> (.) -> (.) -> (.) -> (.) -> (.) -> (.) -> (.) -> (.)\n    if n > 2:\n        # if all colors have been filled\n        ways = ways + 1\n    \n    return ways\n",
        "num_ids": 413
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    for i in range(n):\n        for j in range(i + 1):\n            for k in range(j + 1):\n                if (i + j == k) or (i + j + k == n):\n                    ways += 1\n    return ways\n",
        "num_ids": 67
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (k <= 0):\n        return n\n    elif n < 2:\n        return n\n    else:\n        # code here\n        return n*count_no_of_ways(n-1,k)\n",
        "num_ids": 54
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(f, n, k): \n        if k==1: \n            if f[n-1][0] == f[n][0]: \n                return 1 \n            else: \n                return 0 \n        else: \n            if f[n][k-1] == f[n-1][k-1]: \n                return count_ways(f, n, k-1) \n            else: \n                return count_ways(f, n-1, k) + count_ways(f, n-1, k-1) \n    return count_ways(f, n, k) \ndef lcm(a, b): \n    ''' \n    Find the lowest common multiple. \n    ''' \n    while a >= b: \n        if a % b == 0: \n            lcm = b \n            break\n        else: \n            b = b % a \n    return lcm \ndef kmp(str, txt): \n    '''\n    Find the index of the first occurrence of the given substring in the given text. \n    ''' \n    n = len(str) \n    i = 0 \n    j = 0 \n    l = len(txt) \n    res = 0 \n    while i < l: \n        if str[i] == txt[j]: \n            i += 1 \n            j += 1 \n        else: \n            if j!= 0: \n                j = txt.find(str[i], j) \n            else: \n                i += 1 \n    return j \ndef build_graph(f, n): \n    ''' \n    Build a graph on the fence of n posts with n colors, \n    where each vertex represents a fence post. \n    ''' \n    f = [[0] * n for i in range(n)] \n    for i in range(n): \n        for j in range(n): \n            if f[i][j] == 1: \n                f[i][j] = 1\n                if i == j: \n                    f[i][i] = 0\n    return f \ndef print_graph(f): \n    ''' \n    Print the graph on the fence of n posts, \n    where each vertex represents a fence post. \n    ''' \n    print('\\n'.join(''.join(str(i)) for i in f)) \ndef main(): \n    ''' \n    Provide different values for n, k and print the number of ways to draw the fence \n    ''' \n    n = int(input(\"Enter the number of posts: \")) \n    k = int(input(\"Enter the number of colors: \")) \n    print(\"There are %d ways to draw the fence of %d posts\" %(count_no_of_ways(n, k), n)) \n    f = build_graph(build_fence(n, k), n) \n    print(\"Fence:\") \n    print_graph(f) \n    print() \n    print(\"\\n\\n\\n\") \nif __name__ == '__main__': \n    main() ",
        "num_ids": 143
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2 or k == 2: \n        return 1\n    if n <= 2 or k <= 2: \n        return 0\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n",
        "num_ids": 66
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 2:\n        return 1\n    if n == 2 and k == 1:\n        return 2\n    elif n == 2 and k > 1:\n        return 3\n    elif n > 2 and k == 1:\n        return 4\n    elif n > 2 and k > 1:\n        return 5\n    else:\n        return 5 + count_no_of_ways(n - 2, k - 1) + count_no_of_ways(n - 1, k - 1)\n",
        "num_ids": 122
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n == 0) or (k == 0):\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if k == 0:\n        return 0\n    \n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n",
        "num_ids": 60
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    d={}\n    for i in range(n):\n        for j in range(n-1):\n            if j!=i:\n                d[(i,j)]=1\n    ways=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if k>=2:\n                ways+=1\n            for k in range(k-2):\n                if (i,j) in d and (j,i) in d:\n                    ways+=1\n    return ways\n",
        "num_ids": 127
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    elif n>m:\n        return find(n,m//2)\n    else:\n        return find(n//2,m)\n",
        "num_ids": 47
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    elif m==0:\n        return 1\n    else:\n        return find(n//m,m) + find(n-m*m,m)\n",
        "num_ids": 51
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    while True:\n        if n<m:\n            m=m-n\n        else:\n            n=n-m\n            m=0\n        if n==0:\n            return m\n        else:\n            m=m//2\n",
        "num_ids": 59
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n%m==0)\n",
        "num_ids": 12
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return find(m,n+1)\n    elif n>m:\n        return find(n,m-1)\n    else:\n        return n\n",
        "num_ids": 47
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(m==0 or n==0):\n        return 0\n    else:\n        res=0\n        while(n>0):\n            res=n%10\n            n=n//10\n        return res\n        \ndef main():\n    '''\n    Input :    no\n    Output :    no\n    '''\n    \n    n=int(input(\"Enter the number:\"))\n    \n    m=int(input(\"Enter the number to find the quotient:\"))\n    \n    print(find(n,m))\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 67
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    for i in range(m,0,-1):\n        if m%i == 0:\n            return i\n",
        "num_ids": 28
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    else:\n        if n<m:\n            return find(n,m+1)\n        else:\n            return find(n+1,m)\n        \n    \n    \ndef dec(n):\n    '''\n    Write a python function to find the first smallest positive integer less than or equal to n.\n    '''\n    if n==1:\n        return 1\n    if n==0:\n        return 0\n    else:\n        return find(n,n-1)\n        \n        \n        \n        \n        \n    \ndef main():\n    print(find(3,3))\n    print(dec(3))\n    print(dec(4))\n    \nmain()",
        "num_ids": 85
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #using's' instead of '=', i think it's faster to write function and take a time\n    def rounding(n,m):\n        if n>m:\n            return m\n        elif n<m:\n            return n\n        else:\n            if n>m:\n                return n\n            else:\n                return m\n    if n==m:\n        return n\n    else:\n        r = n//m\n        l = n-m*r\n        return r + rounding(r,l)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2010
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # get the quotient of the numbers\n    if n == m:\n        return n\n    else:\n        # get the quotient of the numbers\n        remainder = n % m\n        # check if the remainder is a decimal\n        if remainder:\n            # get the quotient of the numbers with the remainder\n            quotient = n // m\n            # if the quotient is rounded down to the nearest integer\n            if quotient < 10:\n                quotient = '0' + str(quotient)\n            return quotient\n    ",
        "num_ids": 127
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w + h) / 2\n",
        "num_ids": 12
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def round(num):\n        return round(num*10)%10\n",
        "num_ids": 20
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    A = (w/2) + (h/2)\n    B = 2*(w/3)\n    C = (h/2)\n    if A == B:\n        return A\n    if B == C:\n        return C\n    return ((A+B)/2) + (2*(A+B+C)/3)\n    #d = math.sqrt((w/2)**2+(h/2)**2)\n    #return (math.sqrt((A+B+C)/3))+d\n    #return (math.sqrt((A+C)/3))+d\n",
        "num_ids": 144
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = (w/2)**2\n    b = (h/2)**2\n    c = math.sqrt((a + b)**2 - (a*b)**2)\n    return (b * (2 * c / a + c / b))/2\n",
        "num_ids": 67
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    sq_side_a = (w/2)*math.sin(math.radians(90))\n    sq_side_b = (h/2)*math.sin(math.radians(90))\n    sq_side_c = (w/2)*math.sin(math.radians(90))\n    a = (2*sq_side_a)\n    b = (2*sq_side_b)\n    c = (2*sq_side_c)\n    return a,b,c\ndef triangle_conversion(a,b,c):\n    '''\n    Write a function to convert the square to a triangle.\n    '''\n    num_a = math.sqrt(a**2 + b**2)\n    num_b = math.sqrt(b**2 + c**2)\n    num_c = math.sqrt(c**2 + b**2)\n    y_a = math.tan(math.radians(90))/num_a\n    y_b = math.tan(math.radians(90))/num_b\n    y_c = math.tan(math.radians(90))/num_c\n    theta = math.asin(y_a)\n    phi = math.asin(y_b)\n    rho = math.asin(y_c)\n    phi_0 = math.radians(phi)\n    theta_0 = math.radians(theta)\n    phi_1 = (phi + math.pi)\n    theta_1 = (theta + math.pi)\n    phi_2 = (phi - math.pi)\n    theta_2 = (theta - math.pi)\n    phi_3 = (phi + 2*math.pi)\n    theta_3 = (theta + 2*math.pi)\n    phi_4 = (phi - 2*math.pi)\n    theta_4 = (theta - 2*math.pi)\n    phi_5 = (phi + 3*math.pi)\n    theta_5 = (theta + 3*math.pi)\n    phi_6 = (phi - 3*math.pi)\n    theta_6 = (theta - 3*math.pi)\n    phi_7 = (phi + 4*math.pi)\n    theta_7 = (theta + 4*math.pi)\n    phi_8 = (phi - 4*math.pi)\n    theta_8 = (theta - 4*math.pi)\n    phi_9 = (phi + 5*math.pi)\n    theta_9 = (theta + 5*math.pi)\n    phi_10 = (phi - 5*math.pi)\n    theta_10 = (theta - 5*math.pi)\n    phi_11 = (phi + 6*math.pi)\n    theta_11 = (theta + 6*math.pi)\n    phi_12 = (phi - 6*math.pi)\n    theta_12 = (theta - 6*math.pi)\n    phi_13 = (phi + 7*math.pi)\n    theta_13 = (theta + 7*math.pi)\n    phi_14 = (phi - 7*math.pi)\n    theta_14 = (theta - 7*math.pi)\n    phi_15 = (phi + 8*math.pi)\n    theta_15 = (theta + 8*math.pi)\n    phi_16 = (phi - 8*math.pi)\n    theta_16 = (theta - 8*math.pi)\n    phi_17 = (phi + 9*math.pi)\n    theta_17 = (theta + 9*math.pi)\n    phi_18 = (phi - 9*math.pi)\n    theta_18 = (theta - 9*math.pi)\n    phi_19 = (phi + 10*math.pi)\n    theta_19 = (theta + 10*math.pi)\n    phi_20 = (phi - 10*math.pi)\n    theta_20 = (theta - 10*math.pi)\n    phi_21 = (phi + 11*math.pi)\n    theta_21 = (theta + 11*math.pi)\n    phi_22 = (phi - 11*math.pi)\n    theta_22 = (theta - 11*math.pi)\n    phi_23 = (phi + 12*math.pi)\n    theta_23 = (theta + 12*math.pi)\n    phi_24 = (phi - 12*math.pi)\n    theta_24 = (theta - 12*math.pi)\n    phi_25 = (phi + 13*math.pi)\n    theta_25 = (theta + 13*math.pi)\n    phi_26 = (phi - 13*math.pi)\n    theta_26 = (theta - 13*math.pi)\n    phi_27 = (phi + 14*math.pi)\n    theta_27 = (theta + 14*math.pi)\n    phi_28 = (phi - 14*math.pi)\n    theta_28 = (theta - 14*math.pi)\n    phi_29 = (phi + 15*math.pi)\n    theta_29 = (theta + 15*math.pi)\n    phi_30 = (phi - 15*math.pi)\n    theta_30 = (theta - 15*math.pi)\n    phi_31 = (phi + 16*math.pi)\n    theta_31 = (theta + 16*math.pi)\n    phi_32 = (phi - 16*math.pi)\n    theta_32 = (theta - 16*math.pi)\n    phi_33 = (phi + 17*math.pi)\n    theta_33 = (theta + 17*math.pi)\n    phi_34 = (phi - 17*math.pi)\n    theta_34 = (theta - 17*math.pi)\n    phi_35 = (phi + 18*math.pi)\n    theta_35 = (theta + 18*math.pi)\n    phi_36 = (phi - 18*math.pi)\n    theta_36 = (theta - 18*math.pi)\n    phi_37 = (phi + 19*math.pi)\n    theta_37 = (theta + 19*math.pi)\n    phi_38 = (phi - 19*math.pi)\n    theta_38 = (theta - 19*math.pi)\n    phi_39 = (phi + 20*math.pi)\n    theta_39 = (theta + 20*math.pi)\n    phi_40 = (phi - 20*math.pi)\n    theta_40 = (theta - 20*math.pi)\n    phi_41 = (phi + 21*math.pi)\n    theta_41 = (theta + 21*math.pi)\n    phi_42 = (phi - 21*math.pi)\n    theta_42 = (theta - 21*math.pi)\n    phi_43 = (phi + 22*math.pi)\n    theta_43 = (theta + 22*math.pi)\n    phi_44 = (phi - 22*math.pi)\n    theta_44 = (theta - 22*math.pi)\n    phi_45 = (phi + 23*math.pi)\n    theta_45 = (theta + 23*math.pi)\n    phi_46 = (phi - 23*math.pi)\n    theta_46 = (theta - 23*math.pi)\n    phi_47 = (phi + 24*math.pi)\n    theta_47 = (theta + 24*math.pi)\n    phi_48 = (phi - 24*math.pi)\n    theta_48 = (theta - 24*math.pi)\n    phi_49 = (phi + 25*math.pi)\n    theta_49 = (theta + 25*math.pi)\n    phi_50 = (phi - 25*math.pi)\n    theta_50 = (theta - 25*math.pi)\n    phi_51 = (phi + 26*math.pi)\n    theta_51 = (theta + 26*math.pi)\n    phi_52 = (phi - 26*math.pi)\n    theta_52 = (theta - 26*math.pi)\n    phi_53 = (phi + 27*math.pi",
        "num_ids": 1857
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area1=math.sqrt(w*h/2)\n    area2=w*h/math.sqrt(2)\n    area3=h*w/math.sqrt(3)\n    return area1,area2,area3\n",
        "num_ids": 61
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # #TODO: Write the function\n    def rightangle(h):\n        '''\n        Finds the third side of a right angled triangle.\n        '''\n        # #TODO: Write the function\n        return h[1]\n    def epsilon(n):\n        '''\n        Finds the first and the last sides of a right angled triangle.\n        '''\n        # #TODO: Write the function\n        return n[0]\n    def area(p):\n        '''\n        Calculate the area of a triangle.\n        '''\n        # #TODO: Write the function\n        return math.sqrt(p[0]**2 + p[1]**2)\n    if area(rightangle(h)) == 0:\n        return 0\n    elif area(rightangle(rightangle(h))) == 0:\n        return 0\n    else:\n        area = area(rightangle(h)) + area(rightangle(rightangle(h))) - 2 * area(rightangle(h)) * math.sqrt(h[0]**2 + h[1]**2)\n        return math.sqrt(area)\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    # #TODO: Write the function\n    def leftangle(h):\n        '''\n        Finds the third side of a left angled triangle.\n        '''\n        # #TODO: Write the function\n        return h[2]\n    def epsilon(n):\n        '''\n        Finds the first and the last sides of a left angled triangle.\n        '''\n        # #TODO: Write the function\n        return n[1]\n    def area(p):\n        '''\n        Calculate the area of a triangle.\n        '''\n        # #TODO: Write the function\n        return math.sqrt(p[0]**2 + p[1]**2)\n    if area(leftangle(h)) == 0:\n        return 0\n    elif area(leftangle(leftangle(h))) == 0:\n        return 0\n    else:\n        area = area(leftangle(h)) + area(leftangle(leftangle(h))) - 2 * area(leftangle(h)) * math.sqrt(h[0]**2 + h[1]**2)\n        return math.sqrt(area)\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # #TODO: Write the function\n    def rightangle(h):\n        '''\n        Finds the third side of a right angled triangle.\n        '''\n        # #TODO: Write the function\n        return h[2]\n    def epsilon(n):\n        '''\n        Finds the first and the last sides of a right angled triangle.\n        '''\n        # #TODO: Write the function\n        return n[0]\n    def area(p):\n        '''\n        Calculate the area of a triangle.\n        '''\n        # #TODO: Write the function\n        return math.sqrt(p[0]**2 + p[1]**2)\n    if area(rightangle(h)) == 0:\n        return 0\n    elif area(rightangle(rightangle(h))) == 0:\n        return 0\n    else:\n        area = area(rightangle(h)) + area(rightangle(rightangle(h))) - 2 * area(rightangle(h)) * math.sqrt(h[0]**2 + h[1]**2)\n        return math.sqrt(area)\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    # #TODO: Write the function\n    def leftangle(h):\n        '''\n        Finds the third side of a left angled triangle.\n        '''\n        # #TODO: Write the function\n        return h[2]\n    def epsilon(n):\n        '''\n        Finds the first and the last sides of a left angled triangle.\n        '''\n        # #TODO: Write the function\n        return n[1]\n    def area(p):\n        '''\n        Calculate the area of a triangle.\n        '''\n        # #TODO: Write the function\n        return math.sqrt(p[0]**2 + p[1]**2)\n    if area(leftangle(h)) == 0:\n        return 0\n    elif area(leftangle(leftangle(h))) == 0:\n        return 0\n    else:\n        area = area(leftangle(h)) + area(leftangle(leftangle(h))) - 2 * area(leftangle(h)) * math.sqrt(h[0]**2 + h[1]**2)\n        return math.sqrt(area)\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # #TODO: Write the function\n    def rightangle(h):\n        '''\n        Finds the third side of a right angled triangle.\n        '''\n        # #TODO: Write the function\n        return h[2]\n    def epsilon(n):\n        '''\n        Finds the first and the last sides of a right angled triangle.\n        '''\n        # #TODO: Write the function\n        return n[1]\n    def area(p):\n        '''\n        Calculate the area of a triangle.\n        '''\n        # #TODO: Write the function\n        return math.sqrt(p[0]**2 + p[1]**2)\n    if area(rightangle(h)) == 0:\n        return 0\n    elif area(rightangle(rightangle(h))) == 0:\n        return 0\n    else:\n        area = area(rightangle(h)) + area(rightangle(rightangle(h))) - 2 * area(rightangle(h)) * math.sqrt(h[0]**2 + h[1]**2)\n        return math.sqrt(area)\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    # #TODO: Write the function\n    def leftangle(h):\n        '''\n        Finds the third side of a left angled triangle.\n        '''\n        # #TODO: Write the function\n        return h[2]\n    def epsilon(n):\n        '''\n        Finds the first and the last sides of a left angled triangle.\n        '''\n        # #TODO: Write the function\n        return n[0]\n    def area(p):\n        '''\n        Calculate the area of a triangle.\n        '''\n        # #TODO: Write the function\n        return math.sqrt(p[0]**2 + p[1]**2)\n    if area(leftangle(h)) == 0:\n        return 0\n    elif area(leftangle(leftangle(h))) == 0:\n        return 0\n    else:\n        area = area(leftangle(h)) + area(leftangle(leftangle(h))) - 2 * area(leftangle(h)) * math.sqrt(h[0]**2 + h[1]**2)\n        return math.sqrt(area)\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # #TODO: Write the function\n    def rightangle(h):\n        '''\n        Finds the third side of a right angled triangle.\n        '''\n        # #TODO: Write the function\n        return h[2]\n    def epsilon(n):\n        '''\n        Finds the first and the last sides of a right angled triangle.\n        '''\n        # #TODO: Write the function\n        return n[1]\n    def area(p):\n        '''\n        Calculate the area of a triangle.\n        '''\n        # #TODO: Write the function\n        return math.sqrt(p[0]**2 + ",
        "num_ids": 28
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    theta = 0\n    for i in range(0,3):\n        theta = theta + math.pi/3\n        \n        if i == 2:\n            x = math.cos(theta)*math.cos(w/3)\n            y = -1*math.sin(theta)*math.sin(w/3)\n            z = math.cos(w/3)\n            return x,y,z\n        if i == 1:\n            x = math.cos(theta)*math.sin(w/3)\n            y = math.sin(w/3)\n            z = math.cos(w/3)\n            return x,y,z\n        if i == 0:\n            x = -1*math.cos(theta)*math.cos(w/3)\n            y = -1*math.sin(theta)*math.sin(w/3)\n            z = math.cos(w/3)\n            return x,y,z\n    return 0,0,0\n",
        "num_ids": 239
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=h/2\n    s=math.sqrt(w*h/a**2)\n    if s>a:\n        return math.pi*a/2+s\n    elif s<a:\n        return math.pi*a/2-s\n    else:\n        return 0\ndef side_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=h/2\n    s=math.sqrt(w*h/a**2)\n    if s>a:\n        return math.pi*a/2+s\n    elif s<a:\n        return math.pi*a/2-s\n    else:\n        return 0\ndef solidangle(w,h):\n    '''\n    Write a function to find the solid angle of a right angled triangle.\n    '''\n    a=h/2\n    s=math.sqrt(w*h/a**2)\n    if s>a:\n        return math.pi*a/2+s\n    elif s<a:\n        return math.pi*a/2-s\n    else:\n        return 0\ndef euler_angle(w,h):\n    '''\n    Write a function to find the euler angle of a right angled triangle.\n    '''\n    a=h/2\n    s=math.sqrt(w*h/a**2)\n    if s>a:\n        return math.pi*a/2+s\n    elif s<a:\n        return math.pi*a/2-s\n    else:\n        return 0\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle with radius r.\n    '''\n    return r**2*math.pi\ndef solid_circle(r):\n    '''\n    Write a function to find the solid area of a circle with radius r.\n    '''\n    return circle_area(r) - (2*r*otherside_rightangle(r,2*h))\ndef perpendicular_line(a,b,c):\n    '''\n    Write a function to find the perpendicular line between two points.\n    '''\n    return math.sqrt((a-c)**2 + (b-c)**2)\ndef tangent(a,b,c):\n    '''\n    Write a function to find the tangent line between two points.\n    '''\n    return perpendicular_line(a,b,c) - perpendicular_line(c,b,a)\ndef solid_circle_area(r):\n    '''\n    Write a function to find the area of a solid circle with radius r.\n    '''\n    return circle_area(r) - solid_circle(r)\ndef line_area(x1,y1,x2,y2):\n    '''\n    Write a function to find the area of a line between two points.\n    '''\n    return abs(y2-y1)**2 + abs(x2-x1)**2\ndef point_intersection(p1,p2,p3):\n    '''\n    Write a function to find the intersection of a line with two points.\n    '''\n    a=p1[0]-p2[0]\n    b=p1[1]-p2[1]\n    c=p1[0]*p3[1]-p1[1]*p3[0]\n    d=p2[0]*p3[1]-p2[1]*p3[0]\n    return [a*d-b*c,c*d-a*b]\ndef line_segment_intersection(p1,p2,p3):\n    '''\n    Write a function to find the intersection of a line with two points.\n    '''\n    a=p1[0]-p2[0]\n    b=p1[1]-p2[1]\n    c=p1[0]*p3[1]-p1[1]*p3[0]\n    d=p2[0]*p3[1]-p2[1]*p3[0]\n    return [a*d-b*c,c*d-a*b]\ndef perpendicular_line_segment_intersection(p1,p2,p3):\n    '''\n    Write a function to find the intersection of a line with two points.\n    '''\n    a=p1[0]-p2[0]\n    b=p1[1]-p2[1]\n    c=p1[0]*p3[1]-p1[1]*p3[0]\n    d=p2[0]*p3[1]-p2[1]*p3[0]\n    return [a*d-b*c,c*d-a*b]\ndef perpendicular_point_intersection(p1,p2,p3):\n    '''\n    Write a function to find the intersection of a line with two points.\n    '''\n    a=p1[0]-p2[0]\n    b=p1[1]-p2[1]\n    c=p1[0]*p3[1]-p1[1]*p3[0]\n    d=p2[0]*p3[1]-p2[1]*p3[0]\n    return [a*d-b*c,c*d-a*b]\ndef point_line_intersection(p1,p2,p3):\n    '''\n    Write a function to find the intersection of a line with two points.\n    '''\n    a=p1[0]-p2[0]\n    b=p1[1]-p2[1]\n    c=p1[0]*p3[1]-p1[1]*p3[0]\n    d=p2[0]*p3[1]-p2[1]*p3[0]\n    return [a*d-b*c,c*d-a*b]\ndef line_parabola_intersection(p1,p2,p3):\n    '''\n    Write a function to find the intersection of a line with two points.\n    '''\n    a=p1[0]-p2[0]\n    b=p1[1]-p2[1]\n    c=p1[0]*p3[1]-p1[1]*p3[0]\n    d=p2[0]*p3[1]-p2[1]*p3[0]\n    return [a*d-b*c,c*d-a*b]\ndef point_line_parabola_intersection(p1,p2,p3):\n    '''\n    Write a function to find the intersection of a line with two points.\n    '''\n    a=p1[0]-p2[0]\n    b=p1[1]-p2[1]\n    c=p1[0]*p3[1]-p1[1]*p3[0]\n    d=p2[0]*p3[1]-p2[1]*p3[0]\n    return [a*d-b*c,c*d-a*b]\ndef point_line_segment_parabola_intersection(p1,p2,p3):\n    '''\n    Write a function to find the intersection of a line with two points.\n    '''\n    a=p1[0]-p2[0]\n    b=p1[1]-p2[1]\n    c=p1[0]*p3[1]-p1[1]*p3[0]\n    d=p2[0]*p3[1]-p2[1]*p3[0]\n    return [a*d-b*c,c*d-a*b]\ndef segment_line_segment_parabola_intersection(p1,p2,p3):\n    '''\n    Write a function to find the intersection of a line with two points.\n    '''\n    a=p1[0]-p2[0]\n    b=p1[1]-p2[1]\n    c=p1[0]*p3[1]-p1[1]*p3[0]\n    d=p2[0]*p3[1]-p2[1]*p3[0]\n    return [a*d",
        "num_ids": 88
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = float(h/2)\n    if w < a/2:\n        return w\n    else:\n        return a/2\n",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Create a new list that has the maximum element\n    max_val = listval[0]\n    # Loop through all elements in the list\n    for x in listval:\n        if x > max_val:\n            max_val = x\n    return max_val\n",
        "num_ids": 65
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    print(\"Maximum value in given list is \",max(listval))\n",
        "num_ids": 18
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = float('-inf')\n    for x in listval:\n        if x > maxval:\n            maxval = x\n",
        "num_ids": 34
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n",
        "num_ids": 50
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for item in listval:\n        if item > max:\n            max = item\n    return max\n",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if max_val < val:\n            max_val = val\n    return max_val\n",
        "num_ids": 43
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in range(len(listval)):\n        max_val = max(max_val, listval[i])\n    return max_val\n",
        "num_ids": 45
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    if len(listval) == 1:\n        return listval[0]\n    max_val = listval[0]\n    for value in listval[1:]:\n        if value > max_val:\n            max_val = value\n    return max_val\n",
        "num_ids": 85
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    if number < 0:\n        return \"Integer can't be negative.\"\n    for i in range(2,number+1):\n        if number % i == 0:\n            count += i\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            result += i\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for div in range(1, number):\n        if number % div == 0:\n            sum += div\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 57
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    i = 0\n    divisor = 1\n    sum = 0\n    while divisor <= math.sqrt(number):\n        if number%divisor == 0:\n            sum += divisor\n        divisor += 1\n    return sum\n",
        "num_ids": 66
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        if number == 1:\n            return 1\n        else:\n            return sum_div(number - 1) + sum_div(number - 2)\n",
        "num_ids": 52
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum = sum + i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # YOUR CODE HERE\n    pass",
        "num_ids": 10
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = []\n    for i in range(len(arr) - 1):\n        if arr[i + 1] < arr[i]:\n            inversions.append(arr[i + 1])\n    for i in range(len(inversions)):\n        j = 0\n        while inversions[j] > inversions[i] and j < len(inversions):\n            j += 1\n        inversions[i], inversions[j] = inversions[j], inversions[i]\n    return inversions\n",
        "num_ids": 122
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if not arr or len(arr) <= 1: \n        return 0 \n    return count_inversions(arr, 0, len(arr)-1) \n",
        "num_ids": 40
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # TODO: your code here\n",
        "num_ids": 11
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv = 0\n    Inv_Cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                Inv += 1\n                Inv_Cnt += 1\n                \n    return Inv_Cnt\n    \n",
        "num_ids": 79
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # find the index of the first uniques and the last uniques values\n    # index 0 is the first uniqe value, index -1 is the last uniqe value\n    # time complexity: O(n)\n    # space complexity: O(n)\n    lst = list(set(arr))\n    inv_count = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            # if the values are the same, and the value is not the last element,\n            # then the last element's value is the new unique value\n            if arr[i]!= arr[j] and arr[j]!= arr[-1]:\n                inv_count += 1\n                break\n    return inv_count\n",
        "num_ids": 184
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    \n    for i in range(0, len(arr)): \n        count += 1\n        j = 0\n        while j < len(arr)-1 and arr[j] > arr[j+1]: \n            count += 1\n            j += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i] > arr[j]):\n                Inv_Count += 1\n    return Inv_Count\n",
        "num_ids": 66
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count=0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count+=1\n    return inv_count\n",
        "num_ids": 62
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            count = count + 1\n            \n    return count\n    \n",
        "num_ids": 48
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Create an empty array for inversion counts\n    inv_count = []\n    # Traverse through the array\n    for i in range(len(arr) - 1): \n        # Set current index to be the next element\n        curr = i + 1\n        # Set flag to indicate if the current index is the last element \n        # or not (since the array is already reversed)\n        last = len(arr) - 1\n        # If the current element is less than the next element then\n        # set current to the next element\n        if arr[curr] < arr[last]:\n            curr += 1\n        # Set current index to be the next element\n        curr = i + 1\n        # If the current element is greater than the next element\n        # then set current to the next element\n        else:\n            curr += 1\n        # Set the current index to be the next element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Reset the next element to the current element\n        arr[last] = arr[curr]\n        # Set the current index to be the next element\n        curr = i + 1\n        # If the current element is greater than the next element\n        # then set the next element to the current element\n        if arr[curr] > arr[last]:\n            curr += 1\n        # Set the current index to be the next element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # If the current element is greater than the next element\n        # then set the next element to the current element\n        if arr[curr] < arr[last]:\n            curr += 1\n        # Set the current index to be the next element\n        arr[curr] = arr[last]\n        # Set the next index to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the current index to the next element\n        curr = i + 1\n        # Set the next index to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the current index to the next element\n        arr[curr] = arr[last]\n        # Set the next index to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next index to the current element\n        curr = i + 1\n        # Set the next index to the current element\n        arr[curr] = arr[last]\n        # Set the next index to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next index to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next index to the current element\n        curr = i + 1\n        # Set the next index to the current element\n        arr[curr] = arr[last]\n        # Set the next index to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to the current element\n        arr[curr] = arr[last]\n        # Set the next element to the current element\n        curr = i + 1\n        # Set the next element to th",
        "num_ids": 2017
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    temp = []\n    for elem in list1:\n        if isinstance(elem, list):\n            temp.extend(flatten_list(elem))\n        else:\n            temp.append(elem)\n    return temp\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        first_element = list1[0]\n        flattened = flatten_list(list1[1:]) + [first_element]\n        return flattened\n",
        "num_ids": 60
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    n = []\n    for el in list1:\n        if isinstance(el, list):\n            n.extend(flatten_list(el))\n        else:\n            n.append(el)\n    return n\n",
        "num_ids": 55
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n",
        "num_ids": 14
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 is None:\n        return None\n    if isinstance(list1, list):\n        return flatten_list(list1[0]) + flatten_list(list1[1])\n    else:\n        return [list1] + flatten_list(list1[1])\n",
        "num_ids": 71
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2=[]\n    for item in list1:\n        if type(item) is list:\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n    \n    \ndef flatten_dict(dict1):\n    '''\n    Write a function to flatten a given nested dictionary structure.\n    '''\n    list2=[]\n    for item in dict1.values():\n        if type(item) is dict:\n            list2.extend(flatten_dict(item))\n        else:\n            list2.append(item)\n    return list2\n    \n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten_list = []\n",
        "num_ids": 10
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten = []\n    for element in list1:\n        if isinstance(element, list):\n            flatten.extend(flatten_list(element))\n        else:\n            flatten.append(element)\n    return flatten\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n    else:\n        if isinstance(list1, list):\n            res = []\n            for x in list1:\n                if isinstance(x, list):\n                    res.extend(flatten_list(x))\n                else:\n                    res.append(x)\n            return res\n        else:\n            return [list1]\n",
        "num_ids": 97
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            for subitem in flatten_list(item):\n                result.append(subitem)\n        else:\n            result.append(item)\n    return result\n    \ndef flatten_nested_list(list1):\n    '''\n    Write a function that takes a nested list as input and flattens it into a single list.\n",
        "num_ids": 23
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary with the maximum aggregate of the tuples\n    # The key of the dictionary is the data frame column name\n    # The value of the dictionary is a tuple with the key and value\n    # (Sum, Max) and the key is the data frame column name.\n    # The value is the maximum aggregate of the tuple in the dataframe.\n    # Return the result\n    # (0, 0) if there are no aggregates\n    # (1, 0) if there are 1 aggregates\n",
        "num_ids": 115
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    for i in stdata:\n        max_aggregate_list.append(max(i))\n    return max_aggregate_list\n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    min_aggregate_list = []\n    for i in stdata:\n        min_aggregate_list.append(min(i))\n    return min_aggregate_list\n",
        "num_ids": 44
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def aggregate(tuple_list):\n        'Calculate the maximum aggregate from the tuple_list'\n        max_agg = 0\n        for tuple in tuple_list:\n            max_agg += tuple[1]\n        return max_agg\n    result = []\n    for st_item in stdata:\n        agg_item = aggregate(st_item)\n        if agg_item > result[-1][1]:\n            result.append([agg_item, st_item])\n        else:\n            agg_item = agg_item / result[-1][1]\n            result[-1][1] = agg_item\n    return result\n",
        "num_ids": 152
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    # if there's no tuples in stdata, return 0\n    if len(stdata) == 0:\n        return 0\n    \n    # set of counts to 0\n    counts = defaultdict(int)\n    # set of keys to 0\n    keys = set()\n    # set of values to 0\n    values = set()\n    # set of values in the list of tuples\n    values_in_tuple = set()\n    \n    # iterate over the stdata and calculate the aggregations\n    for k, v in stdata:\n        counts[k] += 1\n        keys.add(k)\n        values.add(v)\n        values_in_tuple.add(k)\n        \n    # if there are duplicates in the keys, then we count them and also not the keys\n    if len(keys)!= len(counts):\n        return 0\n        \n    # if there are duplicate keys, then we count them and also not the keys\n    if len(keys)!= len(values):\n        return 0\n        \n    # if there are duplicates in values, then we count them and also not the values\n    if len(values)!= len(counts):\n        return 0\n        \n    # if there are duplicates in values, then we count them and also not the values\n    if len(values)!= len(values_in_tuple):\n        return 0\n        \n    # return the maximum aggregated value\n    return max(counts.values())\n",
        "num_ids": 348
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    t = sorted(stdata, key = lambda x: x[1], reverse = True)\n    temp = defaultdict(list)\n    for i in range(len(t)):\n        temp[t[i][0]].append(t[i][1])\n    m = 0\n    for key in temp.keys():\n        m = max(m, max(temp[key]))\n    return m\n",
        "num_ids": 97
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    output=0\n    for i in range(len(stdata)):\n        output=output+stdata[i][1]\n    return output\n",
        "num_ids": 37
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = []\n    #for each tuple in data\n    for i in range(len(stdata)):\n        data.append((stdata[i][0],stdata[i][1]))\n    #create a dictionary containing the aggregate value as key and the list of values as value\n    max_value = defaultdict(list)\n    #for each tuple in data\n    for i in range(len(data)):\n        max_value[data[i][0]].append(data[i][1])\n    #create a list with the aggregate key as key and the value as the value\n    final_list = []\n    for key in max_value.keys():\n        final_list.append(max_value[key])\n    #append all the values as the values of the list\n    for i in range(len(final_list)):\n        final_list[i] = max(final_list[i],key=final_list[i].count)\n    return final_list\n",
        "num_ids": 230
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    i = 0\n    while i < len(stdata):\n        aggregate = 0\n        total = 0\n        for j in range(len(stdata[i])):\n            total += stdata[i][j]\n            if j % 2 == 1:\n                aggregate += stdata[i][j]\n        \n        if aggregate > total:\n            max_aggregate_list.append((aggregate, stdata[i]))\n        i += 1\n    \n    return max_aggregate_list\n",
        "num_ids": 130
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # TODO: complete this function\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for tup in stdata:\n        if tup[1] > max_aggregate:\n            max_aggregate = tup[1]\n    return max_aggregate\n",
        "num_ids": 52
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count=0\n    \n    for i in range(n):\n        bin_sum=0\n        for j in range(i,n):\n            if(i<n and j<n):\n                bin_sum+=2**(j-i)\n            else:\n                bin_sum+=2**j\n        if bin_sum==n:\n            count+=1\n    return coun",
        "num_ids": 91
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    l = []\n    for i in range(0, n):\n        l.append((int)(bin(i).replace('0b', '')))\n    l.sort()\n    return len(l)\n",
        "num_ids": 50
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Two pointer solution (or better)\n    \n    bit_seq = [0,0,0,0]\n    \n    # the sum of last 2 bits \n    # (to avoid overflow)\n    s = 0\n    \n    # the sum of first 2 bits \n    # (to avoid overflow)\n    s_1 = 0\n    \n    # count all first 2 bits \n    # (to avoid overflow)\n    # If sum is less than 2^(n-1), then \n    # then the whole sequence is counted only once.\n    # Otherwise, the whole sequence is counted twice.\n    for i in range(2**n):\n        \n        # If the sum of last 2 bits is less than 2^(n-1),\n        # then the whole sequence is counted only once.\n        # Otherwise, the whole sequence is counted twice.\n        if i % 2**n == 0:\n            s = s_1\n        else:\n            s = s_1 + (i >> (2**n-1))\n        \n        # if the sum of first 2 bits is less than 2^(n-1),\n        # then the whole sequence is counted only once.\n        # Otherwise, the whole sequence is counted twice.\n        if s <= 2**(n-1):\n            bit_seq[0] += 1\n        \n        # if the sum of first 2 bits is more than 2^(n-1),\n        # then the whole sequence is counted twice.\n        # Otherwise, the whole sequence is counted only once.\n        else:\n            bit_seq[1] += 1\n        \n        # if the sum of first 2 bits is less than 2^(n-1),\n        # then the whole sequence is counted only once.\n        # Otherwise, the whole sequence is counted twice.\n        if s < 2**(n-1):\n            bit_seq[2] += 1\n        \n        # if the sum of first 2 bits is more than 2^(n-1),\n        # then the whole sequence is counted only once.\n        # Otherwise, the whole sequence is counted twice.\n        else:\n            bit_seq[3] += 1\n    \n    # if the sum of first 2 bits is less than 2^(n-1)\n    # then the whole sequence is counted only once.\n    # Otherwise, the whole sequence is counted twice.\n    if s < 2**(n-1):\n        bit_seq[4] += 1\n    \n    # if the sum of first 2 bits is more than 2^(n-1)\n    # then the whole sequence is counted only once.\n    # Otherwise, the whole sequence is counted twice.\n    else:\n        bit_seq[5] += 1\n    \n    # return bit_seq\n    return bit_seq[0] + bit_seq[1] + bit_seq[2] + bit_seq[3] + bit_seq[4] + bit_seq[5]\n",
        "num_ids": 677
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = 0\n    for i in range(n):\n        a += 2**i\n    return a\n",
        "num_ids": 27
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    \n    for i in range(n):\n        # sum of first n bits\n        sum = 0\n        for j in range(i):\n            sum += (2**j)\n        # sum of last n bits\n        sum += (2**n-1)\n        \n        # print(\"sum of first n bits = \",sum)\n        if (sum == n):\n            count += 1\n    return count\n",
        "num_ids": 103
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0, n):\n        count += pow(2, i)\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    c = 0\n    for i in range(n):\n        if (i+1) % 2 == 1:\n            c += 1\n        if (i+1) % 2 == 0:\n            c += 1\n    return c\n",
        "num_ids": 56
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_2(n): \n        '''\n        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        if n <= 0: \n            return 0\n        if n == 1: \n            return 1\n        first = count_binary_seq_2(n - 1)\n        second = n - first\n        return first + second\n    return count_binary_seq_2(n)\n",
        "num_ids": 68
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(x, y, n):\n        if x > y:\n            return 0\n        if x == y:\n            return 1\n        if x == n:\n            return count(x, y - 1, n) + count(x - 1, y, n)\n        return count(x - 1, y, n) + count(x, y - 1, n)\n    return count(2 ** n - 1, n - 1, 2 ** n)\n",
        "num_ids": 109
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n",
        "num_ids": 22
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def d_depth(d):\n        depth = 0\n        def d_depth_recursive(d, depth):\n            if type(d) == type([]):\n                for elem in d:\n                    depth += d_depth_recursive(elem, depth)\n                return depth\n            else:\n                if d in d.keys():\n                    return depth\n                else:\n                    depth += 1\n        return d_depth_recursive(d, depth)\n    return d_depth(d)\n",
        "num_ids": 119
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # YOUR CODE HERE\n    if type(d) is not dict:\n        return None\n    depth = 0\n    for key in d:\n        depth += dict_depth(d[key]) + 1\n    return depth\n",
        "num_ids": 53
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        depth += 1\n        if len(v) > depth: depth = len(v)\n    return depth\n    \n",
        "num_ids": 45
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 1\n    for k, v in d.items():\n        count += 1\n        print(count, \".\", k)\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return None\n    depth = 0\n    for key, value in d.items():\n        depth = max(depth, dict_depth(value))\n    return depth + 1\n",
        "num_ids": 52
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 0\n        for key, value in d.items():\n            depth = max(depth, dict_depth(value))\n        return depth + 1\n    else:\n        return 0\n",
        "num_ids": 56
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    return max(dict_depth(d[k]) for k in d) + 1\n",
        "num_ids": 36
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        depth = 0\n        for k,v in d.items():\n            depth += dict_depth(v)\n        return depth\n    else:\n        return 0\n",
        "num_ids": 50
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    elif type(d) is dict:\n        return dict_depth(d.keys()) + 1 + dict_depth(d.values())\n    else:\n        return 1\n",
        "num_ids": 53
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return(len(d))\n    \ndef dict_iterator(d):\n    '''\n    write a function to create a dictionary iterator.\n    '''\n    for k,v in d.items():\n        yield(k,v)\n        \nif __name__=='__main__':\n    print(dict_depth(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict(dict",
        "num_ids": 1983
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for r in range(ranges[0],ranges[1]):\n        for c in range(rotations):\n            if(arr[r][c]==index):\n                return (r,c)\n    print(\"element not found\")\n        \n    \ndef main() :\n    '''\n    Write a python function to print all elements in a matrix.\n    '''\n    print(\"Enter the number of rows and columns of the matrix: \")\n    r = int(input())\n    c = int(input())\n    arr = []\n    for i in range(r):\n        arr.append(input().split())\n    print(\"Enter a range of rows: \")\n    print(\"[\",end=\"\")\n    ranges = []\n    for i in range(len(arr)):\n        print(arr[i][0],end=\"\")\n        ranges.append(int(arr[i][0]))\n        if(i!=len(arr)-1):\n            print(\",\",end=\"\")\n    print(\"]\")\n    print(\"Enter a range of columns: \")\n    print(\"[\",end=\"\")\n    rotations = []\n    for i in range(len(arr)):\n        print(arr[i][1],end=\"\")\n        rotations.append(int(arr[i][1]))\n        if(i!=len(arr)-1):\n            print(\",\",end=\"\")\n    print(\"]\")\n    print(\"Enter the element at a given index: \")\n    print(\"[\",end=\"\")\n    index = int(input())\n    print(\"]\")\n    arr[index][0],arr[index][1] = find_Element(arr,ranges,rotations,index)\n    print(\"Result:\")\n    for i in range(r):\n        for j in range(c):\n            print(arr[i][j],end=\" \")\n        print(\"\")\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 379
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (rotations==0) :\n        return arr[index]\n    elif (rotations==1) :\n        return arr[index+1]\n    elif (rotations==2) :\n        return arr[index-1]\n    elif (rotations==3) :\n        return arr[index+ranges[0]]\n    elif (rotations==4) :\n        return arr[index-ranges[1]]\n    else :\n        return arr[index-ranges[2]]\n    \ndef merge_Sort(arr,ranges,rotations) :\n    '''\n    Write a python function to sort array given a range of rotations.\n    '''\n    if (rotations==0) :\n        return arr\n    elif (rotations==1) :\n        return arr[0:ranges[0]]+arr[ranges[1]:]\n    elif (rotations==2) :\n        return arr[0:ranges[0]]+arr[0:ranges[1]]+arr[ranges[2]:]\n    elif (rotations==3) :\n        return arr[0:ranges[0]]+arr[ranges[1]:ranges[2]]+arr[ranges[3]:]\n    elif (rotations==4) :\n        return arr[0:ranges[0]]+arr[ranges[1]:ranges[2]]+arr[ranges[3]:ranges[4]]+arr[ranges[5]:]\n    else :\n        return arr\n    \ndef reverse_Iterative(arr,index) :\n    '''\n    Write a python function to reverse array given a index.\n    '''\n    #print(\"Reverse : \" + str(index))\n    while (index<len(arr)-1) :\n        temp = arr[index]\n        arr[index] = arr[index+1]\n        arr[index+1] = temp\n        index +=1\n    #print(\"Array after reverse : \" + str(arr))\n",
        "num_ids": 81
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def bin_search(arr,key,low,high):\n        while(low<=high):\n            mid = (low+high)//2\n            if arr[mid] == key:\n                return mid\n            elif arr[mid]>key:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n    \n    for i in range(len(arr)):\n        if arr[i]==key:\n            index = i\n            break\n    for i in range(len(ranges)):\n        low = ranges[i][0]\n        high = ranges[i][1]\n        if high==len(arr) and low==0:\n            return -1\n        elif high<len(arr) and arr[low]<key:\n            return bin_search(arr,key,low,high-1)\n        elif low<len(arr) and arr[low]>key:\n            return bin_search(arr,key,low,high)\n    \n    return index\n    \n    \n",
        "num_ids": 247
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index==0) : \n        return arr[ranges[0]]\n    elif (index==len(arr)-1) : \n        return arr[ranges[index-1]]\n    else : \n        return arr[ranges[index-1]+1]\n",
        "num_ids": 68
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    return arr[index]\n",
        "num_ids": 11
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(ranges)) :\n        #Checking the direction of rotation.\n        if ranges[i] <= arr[index] < ranges[i+1] :\n            return index\n    return index\n",
        "num_ids": 55
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[rotations*ranges[index]:rotations*ranges[index]+ranges[index]]\n",
        "num_ids": 28
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(ranges[index] == None):\n        return(None)\n    if(ranges[index][0] > ranges[index][1]):\n        return(None)\n    else:\n        for i in range(0,len(arr)):\n            if(arr[i][0] < ranges[index][0]):\n                ranges[index][1] = arr[i][1]\n                break\n        else:\n            if(arr[index][0] < ranges[index][1]):\n                return(None)\n            else:\n                for i in range(0,len(arr)):\n                    if(arr[i][0] > ranges[index][0]):\n                        ranges[index][0] = arr[i][0]\n                        break\n        for i in range(0,len(arr)):\n            if(i < index):\n                ranges[index][1] = arr[i][1]\n                break\n        else:\n            return(None)\n    rotations = rotations+1\n    index = index+1\n    return(ranges)\n",
        "num_ids": 257
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    temp = []\n    for i in arr[ranges[index] : ranges[index+1]]:\n        temp.append(i)\n    return temp[::-1]\n",
        "num_ids": 44
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # TODO: Initialize empty list of possible rotations\n    possible_rotations = []\n",
        "num_ids": 25
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_words = []\n    for word in words:\n        if word[0] == 'p':\n            new_words.append(word)\n    return new_words\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    splitted = words[0].split()\n    splitted2 = words[1].split()\n    if splitted[0] == 'p':\n        return splitted, splitted2\n    else:\n        splitted = splitted[1:]\n        splitted2 = splitted2[1:]\n        return splitted, splitted2\n",
        "num_ids": 81
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[1])\n    # print(words[0])\n    # print(words[-1])\n    # print(words[0][0])\n    # print(words[1][1])\n    # print(words[-1][1])\n    for i in words:\n        if re.match(\"^p\",i):\n            return i\n        else:\n            return words[0]\n    return words[0]\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][1])\n    # print(words[1][1])\n    # print(words[0][-1])\n    # print(words[-1][-1])\n    for i in words:\n        if re.match(\"^p\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef start_withd(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'd'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[1])\n    # print(words[0])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    # print(words[0][1])\n    # print(words[-1][1])\n    # print(words[-1][0])\n    # print(words[1][0])\n    # print(words[-1][-1])\n    for i in words:\n        if re.match(\"^d\",i):\n            return i\n        else:\n            return words[0]\n    return words[0]\ndef end_withd(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'd'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    # print(words[-1][-1])\n    # print(words[-2][1])\n    for i in words:\n        if re.match(\"^d\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef start_withe(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'e'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[1])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    # print(words[-1][-1])\n    for i in words:\n        if re.match(\"^e\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef end_withe(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'e'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[1])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    for i in words:\n        if re.match(\"^e\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef start_withf(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'f'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[1])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    # print(words[-1][-1])\n    for i in words:\n        if re.match(\"^f\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef end_withf(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'f'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[1])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    # print(words[-1][-1])\n    for i in words:\n        if re.match(\"^f\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef start_withg(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'g'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    # print(words[-1][-1])\n    for i in words:\n        if re.match(\"^g\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef end_withg(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'g'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    # print(words[-1][-1])\n    for i in words:\n        if re.match(\"^g\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef start_withh(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'h'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    # print(words[-1][-1])\n    for i in words:\n        if re.match(\"^h\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef end_withh(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'h'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words[-1][-1])\n    # print(words[1][-1])\n    # print(words[-1][-1])\n    for i in words:\n        if re.match(\"^h\",i):\n            return i\n        else:\n            return words[-2]\n    return words[-2]\ndef start_withi(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'i'.\n    '''\n    # print(words)\n    # print(words[0])\n    # print(words[1])\n    # print(words[-1])\n    # print(words[-2])\n    # print(words",
        "num_ids": 52
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for word in words:\n        if word[0] == 'p':\n            p.append(word)\n    return(p)\n",
        "num_ids": 39
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    temp=list(filter(lambda x: x[0]=='p',words))\n    if(temp):\n        return temp[0]\n    else:\n        return None\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    temp=list(filter(lambda x: x[0]=='n',words))\n    if(temp):\n        return temp[0]\n    else:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # your code here\n    words_withp = []\n    words_withp.append(words[0].capitalize())\n    for word in words[1:]:\n        if word[0].lower()!= 'p':\n            words_withp.append(word.capitalize())\n    return words_withp\ndef start_withoutp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # your code here\n    words_withoutp = []\n    for word in words[1:]:\n        if word[0].lower()!= 'p':\n            words_withoutp.append(word.capitalize())\n    return words_withoutp\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    # your code here\n    words_withp = []\n    words_withp.append(words[-1].capitalize())\n    for word in words[:-1]:\n        if word[0].lower()!= 'p':\n            words_withp.append(word.capitalize())\n    return words_withp\ndef end_withoutp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    # your code here\n    words_withoutp = []\n    for word in words[:-1]:\n        if word[0].lower()!= 'p':\n            words_withoutp.append(word.capitalize())\n    return words_withoutp\ndef main():\n    '''\n    Your code goes here\n    '''\n    # your code here\n    p1 = start_withp('Bacchus')\n    print(''.join(p1))\n    p2 = start_withoutp('Bacchus')\n    print(''.join(p2))\n    p3 = end_withp('Bacchus')\n    print(''.join(p3))\n    p4 = end_withoutp('Bacchus')\n    print(''.join(p4))\nmain()",
        "num_ids": 110
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word = []\n    for word in words:\n        if word[0] == 'p':\n            word.append('p')\n        else:\n            word.append('p')\n    return word\n",
        "num_ids": 49
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # start with p\n    if not words:\n        return \"\", \"\"\n",
        "num_ids": 20
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('p'):\n            new_word.append(i)\n    return(new_word)\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('n'):\n            new_word.append(i)\n    return(new_word)\ndef start_with0(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '0'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('0'):\n            new_word.append(i)\n    return(new_word)\ndef start_with1(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '1'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('1'):\n            new_word.append(i)\n    return(new_word)\ndef start_with2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '2'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('2'):\n            new_word.append(i)\n    return(new_word)\ndef start_with3(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '3'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('3'):\n            new_word.append(i)\n    return(new_word)\ndef start_with4(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '4'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('4'):\n            new_word.append(i)\n    return(new_word)\ndef start_with5(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '5'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('5'):\n            new_word.append(i)\n    return(new_word)\ndef start_with6(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '6'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('6'):\n            new_word.append(i)\n    return(new_word)\ndef start_with7(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '7'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('7'):\n            new_word.append(i)\n    return(new_word)\ndef start_with8(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '8'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('8'):\n            new_word.append(i)\n    return(new_word)\ndef start_with9(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '9'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('9'):\n            new_word.append(i)\n    return(new_word)\ndef start_with10(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '10'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('10'):\n            new_word.append(i)\n    return(new_word)\ndef start_with11(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '11'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('11'):\n            new_word.append(i)\n    return(new_word)\ndef start_with12(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '12'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('12'):\n            new_word.append(i)\n    return(new_word)\ndef start_with13(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '13'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('13'):\n            new_word.append(i)\n    return(new_word)\ndef start_with14(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '14'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('14'):\n            new_word.append(i)\n    return(new_word)\ndef start_with15(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '15'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('15'):\n            new_word.append(i)\n    return(new_word)\ndef start_with16(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '16'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('16'):\n            new_word.append(i)\n    return(new_word)\ndef start_with17(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '17'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('17'):\n            new_word.append(i)\n    return(new_word)\ndef start_with18(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '18'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('18'):\n            new_word.append(i)\n    return(new_word)\ndef start_with19(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '19'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('19'):\n            new_word.append(i)\n    return(new_word)\ndef start_with20(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '20'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('20'):\n            new_word.append(i)\n    return(new_word)\ndef start_with21(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '21'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('21'):\n            new_word.append(i)\n    return(new_word)\ndef start_with22(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '22'.\n    '''\n    new_word=[]\n    for i in words:\n        if i.startswith('22'):\n            new_word.append(i)\n    return(new_word)\ndef start_with23(words):\n    '''\n    Write a function to return tw",
        "num_ids": 9
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0][0], words[0][1]\n",
        "num_ids": 17
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    pre, pre_sum = 0, -1\n    for i in range(n - 1, index - 1, -1):\n        pre_sum += a[i]\n        if pre_sum > pre_sum + k:\n            pre = i\n            pre_sum = pre_sum - a[i]\n    return max(a[pre:] + a[:pre] + [a[n - 1]])\n",
        "num_ids": 98
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    left = index\n    right = index\n    sum = 0\n    while left >= 0 and right < n and a[left] < a[right]:\n        left -= 1\n        right += 1\n        sum += a[left]\n    sum += a[right]\n    \n    if k < right - left - 1 and left + 1 < n and a[left + 1] < a[right]:\n        sum += a[left + 1]\n    if k > left + 1 and k + 1 < right - left - 1 and a[k + 1] > a[k]:\n        sum += a[k + 1]\n    \n    return sum\n",
        "num_ids": 149
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = [0] * n\n    s[0] = a[0]\n    for i in range(1, n):\n        s[i] = s[i-1] + a[i]\n    for i in range(1, n):\n        for j in range(i):\n            if (k > i and s[i] > s[i-1] + a[j]) or (k > i and s[i] < s[i-1] + a[j]):\n                s[i] = s[i-1] + a[j]\n    return max(s)\n",
        "num_ids": 143
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -100000000\n    x = index\n    l = 0\n    while x >= 0:\n        l = 0\n        while x > l and a[x] >= a[x+1]:\n            x -= 1\n        if x > l and a[x] >= a[x+1]:\n            max_sum = max(max_sum, a[x+1] - a[x])\n        l += 1\n    \n    if k >= l:\n        return -1\n    \n    k = n - k\n    \n    return max_sum + max(max_sum_increasing_subseq(a, n, index, k),\n        max_sum_increasing_subseq(a, n, index, k - 1))\n",
        "num_ids": 174
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(k < 0):\n        return 0\n    if(n == 0 or k == 0):\n        return 0\n    if(index == n):\n        return a[n-1]\n    \n    if(a[index] <= a[index-1]):\n        return max_sum_increasing_subseq(a, n-1, index, k-1)\n    return max(a[index-1] + max_sum_increasing_subseq(a, n-1, index, k), max_sum_increasing_subseq(a, n-1, index-1, k))\n",
        "num_ids": 141
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix = [[None for j in range(0, n + 1)] for i in range(0, k + 1)]\n    max_sum = 0\n",
        "num_ids": 37
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (a[index] + k > n):\n        return a[index]\n    if (index == 0):\n        return a[index]\n    if (k == 0):\n        return sum(a[index:])\n    return max(a[index:index+k], max_sum_increasing_subseq(a, n, index+k, k-1))\n",
        "num_ids": 89
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= 1:\n        return a[index]\n",
        "num_ids": 16
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if(n == 1):\n    #     return a[index]\n    \n    # if(index == len(a)):\n    #     return 0\n    # if(index == n):\n    #     return a[-1]\n    \n    # if(k == index + 1):\n    #     return a[index]\n    \n    # if(k == n):\n    #     return 0\n    \n    # if(k == n):\n    #     return a[index]\n    \n    if(k == index):\n        return a[index]\n    \n    if(k > index):\n        return max(a[index:index + k])\n        \n    # return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    return max_sum_increasing_subseq(a, n, index, k)\n",
        "num_ids": 208
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if index == n:\n        return sum(a)\n    # max_sum_increasing_subseq(a, n, index, k - 1) = max(a[index] + a[index - 1] + sum(a[index + 1: index + k]), 0)\n    max_sum_increasing_subseq(a, n, index, k - 1) + a[index]\n    return max_sum_increasing_subseq(a, n, index, k)\n",
        "num_ids": 128
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = []\n    i = 0\n    while i < n:\n        colon_tuplex.append(tuplex[i])\n        i += 1\n    return colon_tuplex\n",
        "num_ids": 54
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m):\n        if tuplex[i][0] == ':' and tuplex[i][n] == ':' :\n            return tuplex[i][n]\n    return '00'\n    \ndef col_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    for i in range(m):\n        if tuplex[i][n] == ':':\n            return tuplex[i][n+1:]\n    return '00'\n",
        "num_ids": 45
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n+1):\n        if tuplex[i:i+n] == tuplex[i+n:i+n+n]:\n            return tuplex[i:i+n],tuplex[i+n:i+n+n]\n    return '',''\n",
        "num_ids": 76
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return m,n,tuplex[0],tuplex[1],tuplex[2],tuplex[3]\n",
        "num_ids": 33
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    res=[]\n    res+=tuplex[:m]\n    res+=tuplex[m+1:]\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    fmt = n * m\n    return [tuplex[i:i+fmt] for i in range(0,len(tuplex),fmt)]\n",
        "num_ids": 41
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return n*tuplex[0] + m*tuplex[1]\n",
        "num_ids": 22
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([t[m+n] for t in tuplex])\ndef check_lhs_eq(lhs, rhs, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return lhs == rhs and m+n == len(lhs)\ndef set_lhs_eq(lhs, rhs, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return lhs == rhs and m+n == len(lhs)\ndef col_tuplex(col, m, n):\n    '''\n    Write a function to get a tuple of a set of cols.\n    '''\n    return col[m+n]\ndef set_col_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n]\ndef col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n]\ndef get_col_m_n_eq(tuplex, m, n):\n    '''\n    Write a function to get a tuple of a set of cols.\n    '''\n    return tuplex[m+n]\ndef col_tuple_eq(tuplex, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return tuplex[m+n] == tuplex[m+n-1]\ndef get_col_tuple_eq(tuplex, m, n):\n    '''\n    Write a function to get a tuple of a set of cols.\n    '''\n    return tuplex[m+n] == tuplex[m+n-1]\ndef get_m_n_eq(tuplex, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return tuplex[m+n] == tuplex[m+n-1]\ndef get_m_n_eq(tuplex, m, n):\n    '''\n    Write a function to get a tuple of a set of cols.\n    '''\n    return tuplex[m+n] == tuplex[m+n-1]\ndef col_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef set_col_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef col_set_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef col_get_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef set_col_set_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef col_get_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_col_col_set_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef is_n_col_col_set_col_m_n_eq(n, col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef is_n_col_col_set_col_m_n_eq(n, col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef is_col_col_set_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef is_col_col_set_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_col_set_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef set_col_col_set_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_col_set_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef set_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef is_col_col_set_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef set_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_col_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_m_n_eq(col, m, n):\n    '''\n    Write a function to check a tuple is equal to one another.\n    '''\n    return col[m+n] == col[m+n-1]\ndef get_",
        "num_ids": 23
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_sliced = deepcopy(tuplex)\n    for i in range(0, len(tuplex_sliced)):\n        if(tuplex_sliced[i][0] == 'h' and m>=0 and m<=14):\n            tuplex_sliced[i][0] = 'H'\n            m-=1\n        if(tuplex_sliced[i][0] == 'c' and n>=0 and n<=14):\n            tuplex_sliced[i][0] = 'C'\n            n-=1\n        if(tuplex_sliced[i][0] == 'r' and m>=0 and m<=14):\n            tuplex_sliced[i][0] = 'R'\n            m-=1\n        if(tuplex_sliced[i][0] == 'f' and n>=0 and n<=14):\n            tuplex_sliced[i][0] = 'F'\n            n-=1\n    return tuplex_sliced\n",
        "num_ids": 269
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l = []\n    for i in tuplex:\n        l.append(i)\n    return m + n*(l)\n",
        "num_ids": 34
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return nums1[0] * nums2[0]\n    if N == 3:\n        return (nums1[0] * nums1[1] * nums2[0] + nums1[1] * nums1[0] * nums2[1])\n    return max(small_product(nums1[0:N//2] + nums2[0:N//2], nums1[N//2:], N//2),\n            large_product(nums1[N//2:], nums2[N//2:], N//2))\n",
        "num_ids": 176
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    for i in range(N):\n        for j in range(N):\n            nums1[i] *= nums2[j]\n    return max(nums1)\n",
        "num_ids": 45
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Gathers the two numbers that we will need for the product.\n    nums1_L = []\n    nums2_L = []\n    for i in range(N):\n        nums1_L.append(nums1[i])\n        nums2_L.append(nums2[i])\n",
        "num_ids": 78
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # O(n^2)\n    def get_large_product(nums1, nums2, i, j):\n        if i == j:\n            return [nums1[i]]\n        else:\n            k = nums1[i]\n            l = nums2[j]\n            result = []\n            for x in range(k, l):\n                if x % k == 0 and x % l == 0:\n                    result.append(x)\n            return result\n    \n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            result = get_large_product(nums1, nums2, i, j)\n            if len(result) > 0:\n                result = result[0]\n                break\n    return result\n",
        "num_ids": 193
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    nums1.sort()\n    nums2.sort()\n",
        "num_ids": 20
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    while (N > 0):\n        if (N % 2 == 0):\n            p = min(nums1)\n            q = max(nums2)\n        else:\n            p = max(nums1)\n            q = min(nums2)\n        \n        N = N // 2\n        \n        nums1.remove(p)\n        nums2.remove(q)\n        nums1.append(p)\n        nums2.append(q)\n        \n    return nums1, nums2\n",
        "num_ids": 127
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    dict = {}\n    \n    for i in nums1:\n        if i in dict.keys():\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    \n    for i in nums2:\n        if i in dict.keys():\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    \n    result = sorted(dict.items(), key=lambda x:x[1])\n    \n    return [list(x[0])[0]*list(x[1]) for x in result[:N]]\n",
        "num_ids": 138
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #first the product of all the factors\n    #make the variables not-a-function\n    #this is the idea behind it\n    '''\n    it would be confusing if we get product of the factors because we don't know\n    which one is the largest. we will have to find the largest\n    '''\n    '''\n    consider first using\n    '''\n    #first set the variables to empty\n    prod_list = []\n    for i in range(1,N+1):\n        prod_list.append(nums1[i-1]*nums2[i-1])\n    #now we have to find the product of the factors\n    #in a loop this would be helpful\n    '''\n    #this is the idea behind it\n    '''\n    #i will be a counter of the factors\n    #we will have to find the product of the factors\n    #then we will loop through the factors\n    #in a loop and add up each product to product_list\n    #we will have to find the product of the factors\n    '''\n    '''\n    we will have to add up the products of the factors as well\n    we will have to find the product of the factors\n    '''\n    for i in range(len(prod_list)):\n        prod_list[i] = prod_list[i]/nums2[i-1]\n    #now we are going to find the product of the factors\n    #this is how we will loop through the factors\n    #then we will loop through the product\n    #and add them together\n    #in a loop\n    '''\n    #we have to add up the products of the factors as well\n    #we will have to find the product of the factors\n    #then we will loop through the product\n    #and add them together\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    '''\n    #add up the products of the factors as well\n    #we will have to find the product of the factors\n    #then we will loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n    #and finally we will have to find the product of the factors\n    '''\n    #now we have to find the product of the factors\n    #by doing this, we will have to find the product of the factors\n    #by doing this, we will have to loop through the product\n    #and add them together\n    #and finally we will have to find the product of the factors\n",
        "num_ids": 69
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return None\n    dictionary = {}\n    for num in nums1 + nums2:\n        dictionary[num] = dictionary.get(num, 0) + 1\n    #print(dictionary)\n    lcm = lcm = 1\n    for value in dictionary.values():\n        lcm *= value\n        if value > N:\n            break\n    return lcm, dictionary\n    \n    ",
        "num_ids": 117
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    a = {}\n    for num in nums1:\n        if num in a:\n            a[num] += 1\n        else:\n            a[num] = 1\n    \n    for num in nums2:\n        if num in a:\n            a[num] += 1\n        else:\n            a[num] = 1\n    \n    if len(a) < N:\n        return None\n    \n    largest = {}\n    for num in a:\n        if largest.get(num) is None:\n            largest[num] = 1\n        else:\n            largest[num] += 1\n    \n    if len(largest) < N:\n        return None\n    \n    for num in largest:\n        if largest[num] > 0:\n            for i in range(0, largest[num]):\n                nums2.remove(num)\n    \n    return nums2\n",
        "num_ids": 210
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # your code goes here\n    if(a>b):\n        return a\n    else:\n        return b\n",
        "num_ids": 29
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        max=a\n    else:\n        max=b\n    return max\n",
        "num_ids": 27
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \ndef sum(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\n",
        "num_ids": 8
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a) == int and type(b) == int:\n        return a if a > b else b\n    else:\n        raise ValueError('Only integers are allowed')\n",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a=float(a)\n    b=float(b)\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 37
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    if b > a:\n        return b\n    else:\n        return a\n    pass\n",
        "num_ids": 35
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(\"The maximum value of this is:\",max(a,b))\n    return max(a,b)\n",
        "num_ids": 29
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a) == int or type(a) == float:\n        if b == 0:\n            print('Invalid input')\n            return a\n        elif a == b:\n            return a\n        else:\n            return a\n    elif type(a) == list:\n        a_copy = list(a)\n        a_copy.sort()\n        a_copy.remove(a_copy[0])\n        a_copy.remove(a_copy[-1])\n        return a_copy\n    else:\n        return 'Invalid input'\n",
        "num_ids": 132
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    if a==b:\n        return a\n    return b\nprint(maximum(4,3))",
        "num_ids": 36
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    chars = [char for char in str1]\n    return tuple(chars)\n",
        "num_ids": 23
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    newtuple=tuple(str1)\n    return newtuple\n",
        "num_ids": 20
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1.replace(\",\",\"\"))\n",
        "num_ids": 15
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"tuple is required.\")\n    else:\n        return tuple(str1)\n",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if len(str1)==1:\n        return str1,\n    else:\n        return str1[0], string_to_tuple(str1[1:])\n",
        "num_ids": 44
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = tuple(str1)\n    return tuple1\n",
        "num_ids": 18
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = list(str1)\n    for i in range(len(res)):\n        res[i] = ord(res[i])\n    return tuple(res)\n",
        "num_ids": 43
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(n)\n    if n == 1: \n        return True\n    if n == 2: \n        return False\n    if n == 3: \n        return True\n    else: \n        return False\n",
        "num_ids": 53
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    for bit in bin(n):\n        if bit == '1':\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return 1\n",
        "num_ids": 48
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 0x0\n    if n & mask == 0x0:\n        n |= 0x1\n    else:\n        n &= ~(0x1)\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (1 << 0):\n        n -= 1\n    else:\n        n += 1\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # First:\n    bit = 1 << n \n    # Then:\n    bit = bit - 1\n    return bit\n",
        "num_ids": 33
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    output = \"\"\n    output += \"0\" * n\n    output += \"1\"\n    return output\n",
        "num_ids": 27
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n > 0:\n        return n - 1\n    else: \n        return n\n",
        "num_ids": 24
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    remainder = n & 0xFF\n    n &= 0xFF\n    if remainder == 0:\n        n |= 0x01\n    else:\n        n |= 0x00\n    return n\n    \ndef check_left_most_unset_bit(n): \n    '''\n    Write a python function to check if a number is left most unset bit.\n    '''\n    remainder = n & 0xFF\n    n &= 0xFF\n    if remainder == 0:\n        return True\n    else:\n        return False\n        \ndef is_left_most_unset_bit(n): \n    '''\n    Write a python function to check if a number is left most unset bit.\n    '''\n    remainder = n & 0xFF\n    n &= 0xFF\n    if remainder == 0:\n        return True\n    else:\n        return False\n        \ndef _test(): \n    # Solution: \n    print(check_left_most_unset_bit(0))\n    print(check_left_most_unset_bit(1))\n    print(check_left_most_unset_bit(2))\n    print(check_left_most_unset_bit(3))\n    print(check_left_most_unset_bit(4))\n    print(check_left_most_unset_bit(5))\n    print(check_left_most_unset_bit(6))\n    print(check_left_most_unset_bit(7))\n    print(check_left_most_unset_bit(8))\n    print(check_left_most_unset_bit(9))\n    print(is_left_most_unset_bit(0))\n    print(is_left_most_unset_bit(1))\n    print(is_left_most_unset_bit(2))\n    print(is_left_most_unset_bit(3))\n    print(is_left_most_unset_bit(4))\n    print(is_left_most_unset_bit(5))\n    print(is_left_most_unset_bit(6))\n    print(is_left_most_unset_bit(7))\n    print(is_left_most_unset_bit(8))\n    print(is_left_most_unset_bit(9))\n    print(check_left_most_unset_bit(0))\n    print(check_left_most_unset_bit(1))\n    print(check_left_most_unset_bit(2))\n    print(check_left_most_unset_bit(3))\n    print(check_left_most_unset_bit(4))\n    print(check_left_most_unset_bit(5))\n    print(check_left_most_unset_bit(6))\n    print(check_left_most_unset_bit(7))\n    print(check_left_most_unset_bit(8))\n    print(check_left_most_unset_bit(9))\n    print(is_left_most_unset_bit(0))\n    print(is_left_most_unset_bit(1))\n    print(is_left_most_unset_bit(2))\n    print(is_left_most_unset_bit(3))\n    print(is_left_most_unset_bit(4))\n    print(is_left_most_unset_bit(5))\n    print(is_left_most_unset_bit(6))\n    print(is_left_most_unset_bit(7))\n    print(is_left_most_unset_bit(8))\n    print(is_left_most_unset_bit(9))\n    print(check_left_most_unset_bit(0))\n    print(check_left_most_unset_bit(1))\n    print(check_left_most_unset_bit(2))\n    print(check_left_most_unset_bit(3))\n    print(check_left_most_unset_bit(4))\n    print(check_left_most_unset_bit(5))\n    print(check_left_most_unset_bit(6))\n    print(check_left_most_unset_bit(7))\n    print(check_left_most_unset_bit(8))\n    print(check_left_most_unset_bit(9))\n    print(is_left_most_unset_bit(0))\n    print(is_left_most_unset_bit(1))\n    print(is_left_most_unset_bit(2))\n    print(is_left_most_unset_bit(3))\n    print(is_left_most_unset_bit(4))\n    print(is_left_most_unset_bit(5))\n    print(is_left_most_unset_bit(6))\n    print(is_left_most_unset_bit(7))\n    print(is_left_most_unset_bit(8))\n    print(is_left_most_unset_bit(9))\n    print(check_left_most_unset_bit(0))\n    print(check_left_most_unset_bit(1))\n    print(check_left_most_unset_bit(2))\n    print(check_left_most_unset_bit(3))\n    print(check_left_most_unset_bit(4))\n    print(check_left_most_unset_bit(5))\n    print(check_left_most_unset_bit(6))\n    print(check_left_most_unset_bit(7))\n    print(check_left_most_unset_bit(8))\n    print(check_left_most_unset_bit(9))\n    print(is_left_most_unset_bit(0))\n    print(is_left_most_unset_bit(1))\n    print(is_left_most_unset_bit(2))\n    print(is_left_most_unset_bit(3))\n    print(is_left_most_unset_bit(4))\n    print(is_left_most_unset_bit(5))\n    print(is_left_most_unset_bit(6))\n    print(is_left_most_unset_bit(7))\n    print(is_left_most_unset_bit(8))\n    print(is_left_most_unset_bit(9))\n    print(check_left_most_unset_bit(0))\n    print(check_left_most_unset_bit(1))\n    print(check_left_most_unset_bit(2))\n    print(check_left_most_unset_bit(3))\n    print(check_left_most_unset_bit(4))\n    print(check_left_most_unset_bit(5))\n    print(check_left_most_unset_bit(6))\n    print(check_left_most_unset_bit(7))\n    print(check_left_most_unset_bit(8))\n    print(check_left_most_unset_bit(9))\n    print(is_left_most_unset_bit(0))\n    print(is_left_most_unset_bit(1))\n    print(is_left_most_unset_bit(2))\n    print(is_left_most_unset_bit(3))\n    print(is_left_most_unset_bit(4))\n    print(is_left_most_unset_bit(5))\n    print(is_left_most_unset_bit(6))\n    print(is_left_most_unset_bit(7))\n    print(is_left_most_unset_bit(8))\n    print(is_left_most_unset_bit(9))\n    print(check_left_most_unset_bit(0))\n    print(check_left_most_unset_bit(1))\n    print(check_left_most_unset_bit(2))\n    print(check_left_most_unset_bit(3))\n    print(check_left_most_unset_bi",
        "num_ids": 1835
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = n & 0x80 \n    n >>= 7\n    if n == 0:\n        i |= 0x80\n    else:\n        i |= 0x80\n    return i \n",
        "num_ids": 50
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #A sample code to illustrate setting the left most unset bit\n    #from a number n\n    \n    #Set bit n to 1\n    n &= 0b1\n    \n    #Set bit n to 0\n    n |= 0b1\n    \n    return n\n",
        "num_ids": 66
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=r*h\n    return v\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    a=2*(math.pi*(r**2))\n    return a\ndef volume_cone_2d(r,h):\n    '''\n    Write a function to find the volume of a cone with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cone_2d(r,h):\n    '''\n    Write a function to find the area of a cone with only the 2D shape.\n    '''\n    a=2*(math.pi*(r**2))\n    return a\ndef volume_cube(r,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v=r*h\n    return v\ndef area_cube(r,h):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    a=4*h\n    return a\ndef volume_cube_2d(r,h):\n    '''\n    Write a function to find the volume of a cube with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cube_2d(r,h):\n    '''\n    Write a function to find the area of a cube with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v=r*h\n    return v\ndef area_triangle(r,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a=3*h\n    return a\ndef volume_quadrilateral(r,h):\n    '''\n    Write a function to find the volume of a quadrilateral.\n    '''\n    v=r*h\n    return v\ndef area_quadrilateral(r,h):\n    '''\n    Write a function to find the area of a quadrilateral.\n    '''\n    a=3*h\n    return a\ndef volume_pentagon(r,h):\n    '''\n    Write a function to find the volume of a pentagon.\n    '''\n    v=r*h\n    return v\ndef area_pentagon(r,h):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    a=2*h\n    return a\ndef volume_hexagon(r,h):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    v=r*h\n    return v\ndef area_hexagon(r,h):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    a=h\n    return a\ndef volume_hexagon_2d(r,h):\n    '''\n    Write a function to find the volume of a hexagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_hexagon_2d(r,h):\n    '''\n    Write a function to find the area of a hexagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_pentagon_2d(r,h):\n    '''\n    Write a function to find the volume of a pentagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_pentagon_2d(r,h):\n    '''\n    Write a function to find the area of a pentagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v=r*h\n    return v\ndef area_cuboid(r,h):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    a=4*h\n    return a\ndef volume_cuboid_2d(r,h):\n    '''\n    Write a function to find the volume of a cuboid with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cuboid_2d(r,h):\n    '''\n    Write a function to find the area of a cuboid with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_octagon(r,h):\n    '''\n    Write a function to find the volume of an octagon.\n    '''\n    v=r*h\n    return v\ndef area_octagon(r,h):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    a=h\n    return a\ndef volume_octagon_2d(r,h):\n    '''\n    Write a function to find the volume of an octagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_octagon_2d(r,h):\n    '''\n    Write a function to find the area of an octagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_ray(r,h):\n    '''\n    Write a function to find the volume of a ray.\n    '''\n    v=r*h\n    return v\ndef area_ray(r,h):\n    '''\n    Write a function to find the area of a ray.\n    '''\n    a=4*h\n    return a\ndef volume_triangle_2d(r,h):\n    '''\n    Write a function to find the volume of a triangle with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_triangle_2d(r,h):\n    '''\n    Write a function to find the area of a triangle with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_cube_2d(r,h):\n    '''\n    Write a function to find the volume of a cube with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cube_2d(r,h):\n    '''\n    Write a function to find the area of a cube with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_pentagon_2d(r,h):\n    '''\n    Write a function to find the volume of a pentagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_pentagon_2d(r,h):\n    '''\n    Write a function to find the area of a pentagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_quadrilateral_2d(r,h):\n    '''\n    Write a function to find the volume of a quadrilateral with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_quadrilateral_2d(r,h):\n    '''\n    Write a function to find the area of a quadrilateral with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_hexagon_2d(r,h):\n    '''\n    Write a function to find the volume of a hexagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_hexagon_2d(r,h):\n    '''\n    Write a function to find the area of a hexagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_octagon_2d(r,h):\n    '''\n    Write a function to find the volume of an octagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_octagon_2d(r,h):\n    '''\n    Write a function to find the area of an octagon with only the 2D shape.\n    '''\n    a=h\n",
        "num_ids": 7
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    t = (2*pi)/3\n    return r**3*h**3*3/4*(math.acos(t)*(3*pi)/(2*r))**2\n",
        "num_ids": 54
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=3.14*(r*r*h)\n    return v\ndef area_cone(r,h):\n    '''\n    Write a function that finds the area of a cone.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    v=3.14*(r**2)*h\n    return v\ndef area_cylinder(r,h):\n    '''\n    Write a function that finds the area of a cylinder.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cone_and_area(r,h):\n    '''\n    Write a function that finds the volume of a cone and the area of a cylinder.\n    '''\n    v=volume_cone(r,h)\n    a=area_cone(r,h)\n    return v,a\ndef volume_cone_and_area_and_volume(r,h):\n    '''\n    Write a function that finds the volume of a cone and the area of a cylinder and the volume of the cylinder.\n    '''\n    v=volume_cone(r,h)\n    a=area_cone(r,h)\n    vh=volume_cylinder(r,h)\n    return v,a,vh\ndef volume_cone_and_area_and_volume_and_circle_area(r,h):\n    '''\n    Write a function that finds the volume of a cone and the area of a cylinder and the volume of the cylinder and the volume of the circle.\n    '''\n    v=volume_cone(r,h)\n    a=area_cone(r,h)\n    vh=volume_cylinder(r,h)\n    v=v*4\n    vh=vh*(math.pi**2)\n    return v,a,vh\ndef volume_cone_and_area_and_volume_and_circle_area_and_volume(r,h):\n    '''\n    Write a function that finds the volume of a cone and the area of a cylinder and the volume of the cylinder and the volume of the circle and the volume of the circle.\n    '''\n    v=volume_cone(r,h)\n    a=area_cone(r,h)\n    vh=volume_cylinder(r,h)\n    v=v*4\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    return v,a,vh\ndef volume_cylinder_and_area_and_volume_and_circle_area_and_volume(r,h):\n    '''\n    Write a function that finds the volume of a cylinder and the area of the cylinder and the volume of the circle and the volume of the circle.\n    '''\n    v=volume_cylinder(r,h)\n    a=area_cylinder(r,h)\n    vh=volume_cone(r,h)\n    v=v*4\n    vh=vh*(math.pi**2)\n    return v,a,vh\ndef volume_cylinder_and_area_and_volume_and_circle_area_and_volume_and_circle_area(r,h):\n    '''\n    Write a function that finds the volume of a cylinder and the area of the cylinder and the volume of the circle and the volume of the circle and the volume of the circle.\n    '''\n    v=volume_cylinder(r,h)\n    a=area_cylinder(r,h)\n    vh=volume_cone(r,h)\n    v=v*4\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    return v,a,vh,vh\ndef volume_cylinder_and_area_and_volume_and_circle_area_and_volume_and_circle_area(r,h):\n    '''\n    Write a function that finds the volume of a cylinder and the area of the cylinder and the volume of the circle and the volume of the circle and the volume of the circle.\n    '''\n    v=volume_cylinder(r,h)\n    a=area_cylinder(r,h)\n    vh=volume_cone(r,h)\n    v=v*4\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    return v,a,vh,vh\ndef volume_cone_and_area_and_volume_and_circle_area_and_volume_and_circle_area(r,h):\n    '''\n    Write a function that finds the volume of a cone and the area of the cone and the volume of the circle and the volume of the circle.\n    '''\n    v=volume_cone(r,h)\n    a=area_cone(r,h)\n    vh=volume_cylinder(r,h)\n    v=v*4\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    return v,a,vh,vh\ndef volume_cone_and_area_and_volume_and_circle_area_and_volume_and_circle_area(r,h):\n    '''\n    Write a function that finds the volume of a cone and the area of the cone and the volume of the circle and the volume of the circle.\n    '''\n    v=volume_cone(r,h)\n    a=area_cone(r,h)\n    vh=volume_cylinder(r,h)\n    v=v*4\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    return v,a,vh,vh\ndef volume_cone_and_area_and_volume_and_circle_area_and_volume_and_circle_area(r,h):\n    '''\n    Write a function that finds the volume of a cone and the area of the cone and the volume of the circle and the volume of the circle.\n    '''\n    v=volume_cone(r,h)\n    a=area_cone(r,h)\n    vh=volume_cylinder(r,h)\n    v=v*4\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    return v,a,vh,vh\ndef volume_cone_and_area_and_volume_and_circle_area_and_volume_and_circle_area(r,h):\n    '''\n    Write a function that finds the volume of a cone and the area of the cone and the volume of the circle and the volume of the circle.\n    '''\n    v=volume_cone(r,h)\n    a=area_cone(r,h)\n    vh=volume_cylinder(r,h)\n    v=v*4\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    vh=vh*(math.pi**2)\n    return v,a,vh,vh\ndef volume_cone_and_area_an",
        "num_ids": 159
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (3.14 * r ** 2) * h\n",
        "num_ids": 16
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4*math.pi*r*h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14*r**2*h/2\n",
        "num_ids": 16
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * math.pow(r,2) * h\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 4 * math.pi * r**3 * h\n    print(\"Volume of a cone is\",v,\"\\n\")\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = 4 * math.pi * (r**2) * h\n    print(\"Volume of a cylinder is\",v,\"\\n\")\n    return v\ndef area_cube(r,h):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    a = 4 * math.pi * (r**2) * h\n    print(\"Area of a cube is\",a,\"\\n\")\n    return a\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    a = 4 * math.pi * (r**2) * h\n    print(\"Area of a cylinder is\",a,\"\\n\")\n    return a\ndef volume_convex_hull(r,h):\n    '''\n    Write a function to find the volume of a convex convex hull.\n    '''\n    v = 4 * math.pi * (r**2) * h\n    print(\"Volume of a convex convex hull is\",v,\"\\n\")\n    return v\ndef area_convex_hull(r,h):\n    '''\n    Write a function to find the area of a convex convex hull.\n    '''\n    a = 4 * math.pi * (r**2) * h\n    print(\"Area of a convex convex hull is\",a,\"\\n\")\n    return a\ndef volume_rectangle(r1,h1):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    v = 4 * math.pi * r1**2 * h1\n    print(\"Volume of a rectangle is\",v,\"\\n\")\n    return v\ndef area_rectangle(r1,h1):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = 4 * math.pi * r1**2 * h1\n    print(\"Area of a rectangle is\",a,\"\\n\")\n    return a\ndef volume_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4 * math.pi * (r**2) * h\n    print(\"Volume of a sphere is\",v,\"\\n\")\n    return v\ndef area_sphere(r,h):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a = 4 * math.pi * (r**2) * h\n    print(\"Area of a sphere is\",a,\"\\n\")\n    return a\ndef volume_cylinder_rectangle(r1,h1,r2,h2):\n    '''\n    Write a function to find the volume of a cylinder and a rectangle.\n    '''\n    v1 = 4 * math.pi * (r1**2) * h1\n    v2 = 4 * math.pi * (r2**2) * h2\n    v = 4 * math.pi * (r1**2) * (h1 + h2)\n    a = 4 * math.pi * r1**2 * (h1 + h2)\n    print(\"Volume of a cylinder and a rectangle is\",v,\"and the volume is\",v1,\"and the area of the rectangle is\",a,\"\\n\")\n    return v\ndef volume_cylinder_sphere(r1,h1,r2,h2):\n    '''\n    Write a function to find the volume of a cylinder and a sphere.\n    '''\n    v1 = 4 * math.pi * (r1**2) * h1\n    v2 = 4 * math.pi * (r2**2) * h2\n    v = 4 * math.pi * (r1**2) * (h1 + h2)\n    a = 4 * math.pi * r1**2 * (h1 + h2)\n    print(\"Volume of a cylinder and a sphere is\",v,\"and the volume is\",v1,\"and the area of the sphere is\",a,\"\\n\")\n    return v\ndef volume_cone_rectangle(r1,h1,r2,h2):\n    '''\n    Write a function to find the volume of a cone and a rectangle.\n    '''\n    v1 = 4 * math.pi * (r1**2) * h1\n    v2 = 4 * math.pi * (r2**2) * h2\n    v = 4 * math.pi * (r1**2) * (h1 + h2)\n    a = 4 * math.pi * r1**2 * (h1 + h2)\n    print(\"Volume of a cone and a rectangle is\",v,\"and the volume is\",v1,\"and the area of the rectangle is\",a,\"\\n\")\n    return v\ndef volume_cone_sphere(r1,h1,r2,h2):\n    '''\n    Write a function to find the volume of a cone and a sphere.\n    '''\n    v1 = 4 * math.pi * (r1**2) * h1\n    v2 = 4 * math.pi * (r2**2) * h2\n    v = 4 * math.pi * (r1**2) * (h1 + h2)\n    a = 4 * math.pi * r1**2 * (h1 + h2)\n    print(\"Volume of a cone and a sphere is\",v,\"and the volume is\",v1,\"and the area of the sphere is\",a,\"\\n\")\n    return v\ndef volume_cylinder_sphere(r1,h1,r2,h2):\n    '''\n    Write a function to find the volume of a cylinder and a sphere.\n    '''\n    v1 = 4 * math.pi * (r1**2) * h1\n    v2 = 4 * math.pi * (r2**2) * h2\n    v = 4 * math.pi * (r1**2) * (h1 + h2)\n    a = 4 * math.pi * r1**2 * (h1 + h2)\n    print(\"Volume of a cylinder and a sphere is\",v,\"and the volume is\",v1,\"and the area of the sphere is\",a,\"\\n\")\n    return v\ndef volume_cylinder_rectangle(r1,h1,r2,h2):\n    '''\n    Write a function to find the volume of a cylinder and a rectangle.\n    '''\n    v1 = 4 * math.pi * (r1**2) * h1\n    v2 = 4 * math.pi * (r2**2) * h2\n    v = 4 * math.pi * (r1**2) * (h1 + h2)\n    a = 4 * math.pi * r1**2 * (h1 + h2)\n    print(\"Volume of a cylinder and a rectangle is\",v,\"and the volume is\",v1,\"and the area of the rectangle is\",a,\"\\n\")\n    return v\ndef volume_cone_rectangle(r1,h1,r2,h2):\n    '''\n    Write a function to find the volume of a cone and a rectangle.\n    '''\n    v1 = 4 * math.pi * (r1**2) * h1\n    v2 = 4 * math.pi * (r2**2) * h2\n    v = 4 * math.pi * (r1**2) * (h1 + h2)\n    a = 4 * math.pi * r1**2 * (h1 + h2)\n    print(\"Volume of a cone and a rectangle is\",v,\"and the volume is\",v1,\"and the area of the rectangle is\",a,\"\\n\")\n    return v\ndef volume_cylinder_sphere(r1,h1,r2,h2):\n    '''\n    Write a function to find the volume of a cylinder and a sphere.\n    '''\n    v1 = 4 * math.pi * (r1**2) * h1\n    v2 = 4 * math.pi * (r2**2) * h2\n    v = 4 * math.pi * (r1**2) * (h1 + h2)\n    a = 4 * math.pi * r1**2 * (h1 + h2)\n    print(\"Volume of a cylinder an",
        "num_ids": 96
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print(f'\\nVolume of cone with r={r}, h={h}')\n    return 4*math.pi*r**3*(h/2)**3\n",
        "num_ids": 43
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    h = h*2\n    print(\"The volume of a cone is\",round(3*(4*h/3)**(1/2),3))\n",
        "num_ids": 39
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        power = 0\n        while n > 0:\n            power += 1\n            n -= 1\n        return power\n",
        "num_ids": 70
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # if n is greater than or equal to the value of 2\n    if n > 2:\n        # take the power of 2\n        power = 2 ** n\n        # return the power\n        return power\n    # if n is less than or equal to 1\n    else:\n        return 1\n",
        "num_ids": 71
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = []\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n        result.append(sum)\n",
        "num_ids": 38
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def h2(n): \n        # lower half of the number\n        if (n % 2 == 0): \n            h2_low = h2(n / 2) \n        else: \n            h2_low = n \n        # upper half of the number\n        h2_up = (n * h2(n / 2)) \n        return max(h2_low, h2_up) \n    \n    if (n <= 1): \n        return n \n    return h2(n) \n",
        "num_ids": 126
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return highest_Power_of_2(n-1) + highest_Power_of_2(n-2)\n",
        "num_ids": 67
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    \n    return n**2\n",
        "num_ids": 12
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        output = 1\n        for i in range(2,n):\n            output = output*2\n            if output < n:\n                return output\n    return 0\n",
        "num_ids": 82
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    print(n, n & (n-1))\n    if (n & (n-1)):\n        print('n is not a power of 2')\n        return\n    else:\n        print(n, 'is a power of 2')\n        return\n",
        "num_ids": 62
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # list of numbers\n    nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]\n    # variables to store the highest power 2\n    highest_power = 0\n    # iterate over the numbers in nums\n    for num in nums:\n        # if num is equal to the highest power of 2 we save the highest power\n        if num == highest_power:\n            # increase the highest power of 2\n            highest_power += 2\n    # return highest power\n    return highest_power\n",
        "num_ids": 129
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    my_list = [i**2 for i in range(1, n+1)]\n    my_list.sort()\n    for i in range(len(my_list)-1, -1, -1):\n        if my_list[i] > n:\n            return my_list[i]\n",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [0, 1, 1] \n    if n == 1: \n        return lucas \n    elif n == 2: \n        return lucas[0] + lucas[1] \n    else: \n        for i in range(2, n): \n            lucas.append(lucas[i-1] + lucas[i-2]) \n        return lucas[n-1] \nn = int(input()) \nprint(find_lucas(n)) ",
        "num_ids": 126
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_nums = []\n    for i in range(1, n + 1):\n        if i == 1:\n            lucas_nums.append(i)\n        elif i == 2:\n            lucas_nums.append(i)\n        else:\n            for j in range(1, n - i + 2):\n                lucas_nums.append(j * i)\n",
        "num_ids": 100
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        return find_lucas(n // 2) + 1\n    return find_lucas((n - 1) // 2) + 1\n",
        "num_ids": 63
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(1,n+1):\n        if i%2 == 0:\n            if i==1:\n                return i\n            elif i==2:\n                return i\n        else:\n            if i==2:\n                return i\n            elif i==3:\n                return i\n",
        "num_ids": 74
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = {0, 1} \n    for i in range(2, n + 1): \n        if i in lucas: \n            continue \n        for j in lucas: \n            if i % j == 0: \n                lucas.add(i // j) \n                break \n    return lucas \n",
        "num_ids": 83
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==1: return 1\n    if n==2: return 1\n    if n==3: return 2\n    if n==4: return 3\n",
        "num_ids": 38
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    L = (2 * n - 1) * [0]\n    L[0], L[1], L[2], L[3] = 2, 1, 0, 1\n    for i in range(3, n, 2):\n        L[i] = (L[i - 1] + L[i - 2] + L[i - 3]) % 796796\n    return L[n - 1]\n",
        "num_ids": 97
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    elif n == 2: return 1\n    elif n == 3: return 2\n    else: \n        a,b = 1,1\n        for i in range(4,n+1): \n            a,b = b, a + b \n        return b \n",
        "num_ids": 86
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_number = 0\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucas_number = i\n        elif i == 2 or i == n+1:\n            lucas_number = i\n        elif i == 3 or i == n+2:\n            lucas_number = i\n        else:\n            lucas_number = i*(i-1)//2\n    return lucas_number\n",
        "num_ids": 118
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if (n <= 1):\n        return n\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n",
        "num_ids": 43
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element += string\n",
        "num_ids": 15
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    try:\n        for ele in list_:\n            ele = ele.format(string)\n            return ele\n    except AttributeError:\n        raise Exception(\"Format string could not be applied to the list\")\n",
        "num_ids": 50
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = element.replace('{','')\n        element = element.replace('}','')\n        element = element.replace('[','')\n        element = element.replace(']','')\n        element = element.replace('(','')\n        element = element.replace(')','')\n        element = element.replace('\\\\','')\n        element = element.replace('\"','')\n        element = element.replace(\"'\",'')\n        list_[list_.index(element)] = string\n",
        "num_ids": 131
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_[list_.index(element)] = string % element\n    \n    return list",
        "num_ids": 30
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # if the list is empty then return\n    if len(list_) == 0:\n        return list_\n    # if the list has a single element then return it\n    elif len(list_) == 1:\n        return list_[0]\n",
        "num_ids": 61
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = format_string(i)\n        list_.append(i)\n",
        "num_ids": 28
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for x in list_:\n        x = string.replace(',','')\n        x = x.replace('-','')\n        x = x.replace('.','')\n        x = x.replace(':','')\n        x = x.replace(';','')\n        x = x.replace('<','')\n        x = x.replace('>','')\n        x = x.replace('\\n','')\n        x = x.replace('\\t','')\n        x = x.replace('\\r','')\n        x = x.replace('\\x0b','')\n        x = x.replace('\\x0c','')\n        x = x.replace('\\x0d','')\n        x = x.replace('\\x0e','')\n        x = x.replace('\\x0f','')\n        x = x.replace('\\x10','')\n        x = x.replace('\\x11','')\n        x = x.replace('\\x12','')\n        x = x.replace('\\x13','')\n        x = x.replace('\\x14','')\n        x = x.replace('\\x15','')\n        x = x.replace('\\x16','')\n        x = x.replace('\\x17','')\n        x = x.replace('\\x18','')\n        x = x.replace('\\x19','')\n        x = x.replace('\\x1a','')\n        x = x.replace('\\x1b','')\n        x = x.replace('\\x1c','')\n        x = x.replace('\\x1d','')\n        x = x.replace('\\x1e','')\n        x = x.replace('\\x1f','')\n        x = x.replace('\\x20','')\n        x = x.replace('\\x21','')\n        x = x.replace('\\x22','')\n        x = x.replace('\\x23','')\n        x = x.replace('\\x24','')\n        x = x.replace('\\x25','')\n        x = x.replace('\\x26','')\n        x = x.replace('\\x27','')\n        x = x.replace('\\x28','')\n        x = x.replace('\\x29','')\n        x = x.replace('\\x2a','')\n        x = x.replace('\\x2b','')\n        x = x.replace('\\x2c','')\n        x = x.replace('\\x2d','')\n        x = x.replace('\\x2e','')\n        x = x.replace('\\x2f','')\n        x = x.replace('\\x30','')\n        x = x.replace('\\x31','')\n        x = x.replace('\\x32','')\n        x = x.replace('\\x33','')\n        x = x.replace('\\x34','')\n        x = x.replace('\\x35','')\n        x = x.replace('\\x36','')\n        x = x.replace('\\x37','')\n        x = x.replace('\\x38','')\n        x = x.replace('\\x39','')\n        x = x.replace('\\x3a','')\n        x = x.replace('\\x3b','')\n        x = x.replace('\\x3c','')\n        x = x.replace('\\x3d','')\n        x = x.replace('\\x3e','')\n        x = x.replace('\\x3f','')\n        x = x.replace('\\x40','')\n        x = x.replace('\\x41','')\n        x = x.replace('\\x42','')\n        x = x.replace('\\x43','')\n        x = x.replace('\\x44','')\n        x = x.replace('\\x45','')\n        x = x.replace('\\x46','')\n        x = x.replace('\\x47','')\n        x = x.replace('\\x48','')\n        x = x.replace('\\x49','')\n        x = x.replace('\\x4a','')\n        x = x.replace('\\x4b','')\n        x = x.replace('\\x4c','')\n        x = x.replace('\\x4d','')\n        x = x.replace('\\x4e','')\n        x = x.replace('\\x4f','')\n        x = x.replace('\\x50','')\n        x = x.replace('\\x51','')\n        x = x.replace('\\x52','')\n        x = x.replace('\\x53','')\n        x = x.replace('\\x54','')\n        x = x.replace('\\x55','')\n        x = x.replace('\\x56','')\n        x = x.replace('\\x57','')\n        x = x.replace('\\x58','')\n        x = x.replace('\\x59','')\n        x = x.replace('\\x5a','')\n        x = x.replace('\\x5b','')\n        x = x.replace('\\x5c','')\n        x = x.replace('\\x5d','')\n        x = x.replace('\\x5e','')\n        x = x.replace('\\x5f','')\n        x = x.replace('\\x60','')\n        x = x.replace('\\x61','')\n        x = x.replace('\\x62','')\n        x = x.replace('\\x63','')\n        x = x.replace('\\x64','')\n        x = x.replace('\\x65','')\n        x = x.replace('\\x66','')\n        x = x.replace('\\x67','')\n        x = x.replace('\\x68','')\n        x = x.replace('\\x69','')\n        x = x.replace('\\x6a','')\n        x = x.replace('\\x6b','')\n        x = x.replace('\\x6c','')\n        x = x.replace('\\x6d','')\n        x = x.replace('\\x6e','')\n        x = x.replace('\\x6f','')\n        x = x.replace('\\x70','')\n        x = x.replace('\\x71','')\n        x = x.replace('\\x72','')\n        x = x.replace('\\x73','')\n        x = x.replace('\\x74','')\n        x = x.replace('\\x75','')\n        x = x.replace('\\x76','')\n        x = x.replace('\\x77','')\n        x = x.replace('\\x78','')\n        x = x.replace('\\x79','')\n        x = x.replace('\\x7a','')\n        x = x.replace('\\x7b','')\n        x = x.replace('\\x7c','')\n        x = x.replace('\\x7d','')\n        x = x.replace('\\x7e','')\n        x = x.replace('\\x7f','')\n        x = x.replace('\\x80','')\n        x = x.replace('\\x81','')\n        x = x.replace('\\x82','')\n        x = x.replace('\\x83','')\n        x = x.replac",
        "num_ids": 1880
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(string)\n    list_ = list(map(lambda x : x.replace('-', '\\\\-'), list_))\n    list_ = list(map(lambda x : x.replace(' ', ''), list_))\n    return list_\n",
        "num_ids": 63
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element += string\n    return list_\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i.format(string)\n        \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i.format(string)\n        \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i.format(string)\n        \n        \ndef first_not_empty(list_):\n    '''\n    Write a function to check for an element in the list. If the element is not empty, return it. If it is empty return None.\n    '''\n    list_ = list(list_)\n    for i in list_:\n        if i.value!= None:\n            return i.value\n        else:\n            return None\n        \n        \ndef remove_nth(list_, n):\n    '''\n    Write a function to remove the first n elements from a list.\n    '''\n    list_ = list(list_)\n    list_ = list_[n:]\n    return list_\n    \n    \ndef remove_nth(list_, n):\n    '''\n    Write a function to remove the first n elements from a list.\n    '''\n    list_ = list(list_)\n    list_ = list_[:-n]\n    return list_\n    \n    \ndef remove_all(list_, item):\n    '''\n    Write a function to remove all occurrences of an item from a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i!= item]\n    return list_\n    \n    \ndef remove_first(list_, item):\n    '''\n    Write a function to remove the first occurrence of an item from a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i!= item]\n    return list_\n    \n    \ndef filter(list_, condition):\n    '''\n    Write a function to filter a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= None]\n    return list_\n    \n    \ndef split(list_, splitter):\n    '''\n    Write a function to split a string into a list of substrings using a given splitter.\n    '''\n    list_ = list(list_)\n    list_ = [i.value for i in list_]\n    return list_\n    \n    \ndef get_max_index(list_, value):\n    '''\n    Write a function to get the index of the maximum element in a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= value]\n    return list_\n    \n    \ndef get_min_index(list_, value):\n    '''\n    Write a function to get the index of the minimum element in a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= value]\n    return list_\n    \n    \ndef get_unique(list_, value):\n    '''\n    Write a function to get the first non duplicate element in a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= value]\n    return list_\n    \n    \ndef get_sum(list_):\n    '''\n    Write a function to get the sum of all elements in a list.\n    '''\n    list_ = list(list_)\n    list_ = [i.value for i in list_]\n    return sum(list_)\n    \n    \ndef convert_to_int(list_):\n    '''\n    Write a function to convert a string into an integer.\n    '''\n    list_ = list(list_)\n    list_ = [int(i) for i in list_]\n    return list_\n    \n    \ndef convert_to_float(list_):\n    '''\n    Write a function to convert a string into a float.\n    '''\n    list_ = list(list_)\n    list_ = [float(i) for i in list_]\n    return list_\n    \n    \ndef min_value(list_):\n    '''\n    Write a function to find the minimum element in a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= None]\n    return min(list_)\n    \n    \ndef max_value(list_):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= None]\n    return max(list_)\n    \n    \ndef sum_values(list_):\n    '''\n    Write a function to get the sum of all elements in a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= None]\n    return sum(list_)\n    \n    \ndef sort_list(list_):\n    '''\n    Write a function to sort a list.\n    '''\n    list_ = list(list_)\n    list_ = sorted(list_)\n    return list_\n    \n    \ndef count_values(list_):\n    '''\n    Write a function to count the number of occurrences of each value in a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= None]\n    return len(list_)\n    \n    \ndef sort_list_desc(list_):\n    '''\n    Write a function to sort a list descendingly.\n    '''\n    list_ = list(list_)\n    list_ = sorted(list_, reverse = True)\n    return list_\n    \n    \ndef sort_list_asc(list_):\n    '''\n    Write a function to sort a list ascendingly.\n    '''\n    list_ = list(list_)\n    list_ = sorted(list_)\n    return list_\n    \n    \ndef get_average(list_):\n    '''\n    Write a function to get the average of all values in a list.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= None]\n    return sum(list_) / len(list_)\n    \n    \ndef convert_float_to_int(list_):\n    '''\n    Write a function to convert a list of floats into an int.\n    '''\n    list_ = list(list_)\n    list_ = [int(i) for i in list_]\n    return list_\n    \n    \ndef convert_int_to_float(list_):\n    '''\n    Write a function to convert an int list into a float list.\n    '''\n    list_ = list(list_)\n    list_ = [float(i) for i in list_]\n    return list_\n    \n    \ndef remove_duplicates(list_):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    list_ = list(list_)\n    list_ = sorted(list_)\n    return list_\n    \n    \ndef print_list(list_):\n    '''\n    Write a function to print a list in alphabetical order.\n    '''\n    list_ = list(list_)\n    list_ = sorted(list_)\n    print(list_)\n    \n    \ndef test(list_, func_name):\n    '''\n    Write a function to test a list function.\n    '''\n    list_ = list(list_)\n    list_ = [i for i in list_ if i.value!= None]\n    print(func_name +'test is working')\n    print(list_)\n    \n    \ndef print_list_desc(list_, func_name):\n    '''\n    Write a function to print a list in alphabetical order in descending order.\n    ''",
        "num_ids": 21
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    a = {}\n    for i in range(len(l1)):\n        a.update({l1[i]:l2[i]})\n    for i in range(len(l1)):\n        a.update({l3[i]:l2[i]})\n    return a\n    \ndef test():\n    l1 = [1,2,3,4,5,6]\n    l2 = [1,2,3,4,5]\n    l3 = [1,2,3,4,5,6]\n    print(convert_list_dictionary(l1, l2, l3))\n    l1 = [1,2,3,4]\n    l2 = [1,2,3,4,5,6]\n    l3 = [1,2,3,4]\n    print(convert_list_dictionary(l1, l2, l3))\n",
        "num_ids": 217
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    for key in l1:\n        if l3.count(key) > 1:\n            dic[key] = convert_list_dictionary(l1, l2, l3)\n        else:\n            dic[key] = l1[key]\n    return dic\n",
        "num_ids": 75
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    try:\n        if len(l1) == len(l2) and len(l2) == len(l3):\n            d = {}\n            for i, j in zip(l1, l2, l3):\n                d[i] = j\n            return d\n        else:\n            return None\n    except:\n        return None\n",
        "num_ids": 83
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError(\"input parameters are not of equal length.\")\n    return dict(zip(l1, l2, l3))\n",
        "num_ids": 58
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #if the length of the two lists are same, then return\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return None\n    #if the length of the lists is even, then return\n    if len(l1) % 2 == 0:\n        return dict(zip(l1, l2))\n    #if the length of the lists is odd, then return\n    return dict(zip(l3, l1[::-1]))\n",
        "num_ids": 119
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) == len(l3):\n        return l1, l2, l3\n    else:\n        dict1 = {}\n        for i in range(len(l1)):\n            if l1[i] not in dict1.keys():\n                dict1[l1[i]] = {}\n            for j in range(len(l2)):\n                if l2[j] not in dict1[l1[i]].keys():\n                    dict1[l1[i]][l2[j]] = []\n                if l3[j] not in dict1[l1[i]][l2[j]]:\n                    dict1[l1[i]][l2[j]].append(l3[j])\n        return dict1\n",
        "num_ids": 189
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    if l1!= None:\n        dictionary.update({'list 1': l1})\n    if l2!= None:\n        dictionary.update({'list 2': l2})\n    if l3!= None:\n        dictionary.update({'list 3': l3})\n    return dictionary\n",
        "num_ids": 81
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {k:v for k,v in zip(l1,l2,l3)}\n",
        "num_ids": 25
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2):\n        dict1 = {}\n        for i in range(len(l1)):\n            dict1[l1[i]] = l2[i]\n        return dict1\n    else:\n        dict2 = {}\n        for i in range(len(l2)):\n            if l2[i] in dict2:\n                dict2[l2[i]] += 1\n            else:\n                dict2[l2[i]] = 1\n        return dict2\n",
        "num_ids": 124
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l3 = [{'key': k, 'value': v} for k, v in l3.items()]\n    return l3\n",
        "num_ids": 35
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 4:\n        return n\n    elif n == 4:\n        return (3*(get_max_sum(n-1) + 4*(get_max_sum(n-2) + 4*(get_max_sum(n-3))) + (2*(get_max_sum(n-4)))) + get_max_sum(n-5))\n",
        "num_ids": 92
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    else:\n        pass\n",
        "num_ids": 80
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = []\n    for i in range (1, n + 1):\n        res.append(f(i))\n    return max(res)\n",
        "num_ids": 37
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #   calculate: f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n    #   calculate: n\n    #   return: n\n    f = lambda n: max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return f(n)\n",
        "num_ids": 107
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = lambda x: (x * x) / (2 * (x + 1)) + (x * x) / (3 * (x + 1)) + (x * x) / (4 * (x + 1)) + (x * x) / (5 * (x + 1))\n    x = 1\n    sum = 0\n    while x <= n:\n        sum += f(x)\n        x += 1\n    return sum\n",
        "num_ids": 102
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (f(n)/2) + (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n",
        "num_ids": 41
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    max_value = 0\n    for i in range (1, n + 1):\n        max_value += (i/2)\n    return max_value\n",
        "num_ids": 79
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    p = 0\n    if n <= 1:\n        return n\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            p += i\n            \n    return p\n    \ndef get_possible_sum_list(n):\n    '''\n    Create a list of possible sums to check if the given number is a permutation of a given array.\n    '''\n    possible_sum_list = []\n    permutations_sum_list = []\n    \n    for i in range(1, n + 1):\n        possible_sum_list.append(i)\n        \n    for i in range(1, n + 1):\n        permutations_sum_list.append(get_permutation_sum(i))\n        \n    return possible_sum_list, permutations_sum_list\n",
        "num_ids": 102
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # calculate the sum\n    sum = 0\n    for i in range (1,n+1):\n        sum = sum + (i/2)\n    return su",
        "num_ids": 40
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n    return max_len\n",
        "num_ids": 50
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(0, len(input_list)):\n        if max_length < len(input_list[i]):\n            max_length = len(input_list[i])\n",
        "num_ids": 55
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for el in input_list:\n        if len(el) > max_len:\n            max_len = len(el)\n    return max_len\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n        \ndef join(input_list):\n    '''\n    Joins an input list of strings.\n    '''\n    \n    return \" \".join(input_list)\n    \ndef to_lower(input_string):\n    '''\n    Converts the input string into lower case.\n    '''\n    \n    return input_string.lower()\n    \ndef remove_punctuation(input_string):\n    '''\n    Removes punctuation from input string.\n    '''\n    \n    return input_string.translate(str.maketrans('', '', string.punctuation))\n    \ndef remove_numbers(input_string):\n    '''\n    Removes numbers from input string.\n    '''\n    \n    return input_string.translate(str.maketrans('', '', string.digits))\n    \ndef replace_chars(input_string):\n    '''\n    Replaces characters in input string with desired characters.\n    '''\n    \n    return input_string.translate(str.maketrans('', '', string.ascii_lowercase))\n    \ndef remove_punctuation_from_word(input_string):\n    '''\n    Removes punctuation from word.\n    '''\n    \n    return input_string.translate(str.maketrans('', '', string.punctuation))\n    \ndef remove_non_ascii(input_string):\n    '''\n    Remove non-ascii characters.\n    '''\n    \n    return input_string.translate(str.maketrans('', '', string.ascii_letters))\n    \ndef remove_numbers_from_word(input_string):\n    '''\n    Remove numbers from word.\n    '''\n    \n    return input_string.translate(str.maketrans('', '', string.digits))\n    \ndef remove_punctuation_from_word(input_string):\n    '''\n    Remove punctuation from word.\n    '''\n    \n    return input_string.translate(str.maketrans('', '', string.punctuation)",
        "num_ids": 29
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n",
        "num_ids": 51
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for item in input_list:\n        if item > max_length:\n            max_length = item\n    return max_length\n",
        "num_ids": 45
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = input_list[0]\n    for i in range(len(input_list)):\n        if input_list[i] > max:\n            max = input_list[i]\n    return max\n",
        "num_ids": 52
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #Write your code here\n    longest = max(input_list)\n    for x in input_list:\n        if x == longest:\n            return longest\n    return longest\n",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup == tuple():\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in test_tup:\n        if i in test_tup:\n            count = count + 1\n    if count > 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    lst = list(test_tup)\n    count = 0\n    for i in range(len(lst)):\n        if lst.count(lst[i]) > 1:\n            count = count + 1\n    return count == 0\n",
        "num_ids": 61
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) > 1:\n        return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    print(\"\\nChecking for duplicate items in given tuple\\n\")\n",
        "num_ids": 19
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return True if len(test_tup)==len(set(test_tup)) else False\n",
        "num_ids": 26
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup_set = set(test_tup)\n    return len(test_tup_set) == len(test_tup)\n",
        "num_ids": 38
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == 0:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    # return first non-repeating char\n    print(str1)\n    print(str1.count(str1[0]))\n    # print(str1.index(str1[0]))\n    return str1[0]\n",
        "num_ids": 65
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    dict = {}\n    for i in str1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] = dict[i]+1\n    for k in dict.keys():\n        if dict[k] == 1:\n            return k\n",
        "num_ids": 80
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[count]:\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    my_list = []\n    my_list.append(str1[0])\n    for i in range(1,len(str1)):\n        if str1[i] not in my_list:\n            my_list.append(str1[i])\n",
        "num_ids": 64
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = [i for i in str1.lower()]\n    if len(char_list) < 1:\n        return \"\"\n    count = dict(Counter(char_list))\n    return next(i for i, count in count.items() if count == 1)\n",
        "num_ids": 67
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    hashmap={}\n    for char in str1:\n        if char in hashmap:\n            hashmap[char] += 1\n        else:\n            hashmap[char] = 1\n    for char in str1:\n        if hashmap[char] == 1:\n            return char\n    return 'None'\n",
        "num_ids": 75
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # declaring a counter variable to find the first non-repeating char in the string\n    n = 0\n    for i in range(len(str1)):\n        if str1[i]!= str1[i]:\n            n += 1\n            if n == 1:\n                break\n",
        "num_ids": 69
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code here\n    dict={}\n    for i in str1:\n        if i in dict:\n            dict[i]=dict[i]+1\n        else:\n            dict[i]=1\n    print(dict)\n    \n    # solution from here: https://www.geeksforgeeks.org/python-find-the-first-non-repeated-character-in-a-given-string/\n    def first_non_repeating_character(str1):\n        for i in str1:\n            if str1.count(i)==1:\n                return i\n            else:\n                return 0\n        return 0\n    return first_non_repeating_character(str1)\n",
        "num_ids": 166
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    return first_non_repeating_character_iterative(str1)\n",
        "num_ids": 27
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert to lower case\n    str1_lower = str1.lower()\n    # get the length of the string\n    length = len(str1_lower)\n    # find the index of first non-repeated character\n    index = str1_lower.find(str1_lower[0])\n    # if index is less than 0 or equal to the length of the string\n    if index == -1 or index >= length:\n        # return the character\n        return str1_lower[0]\n    # otherwise return the character after the first non-repeated character\n    else:\n        # return the character after the index\n        return str1[index + 1]\n",
        "num_ids": 155
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('-'):\n        return False\n    if string.endswith('-'):\n        return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.lower()\n    if len(string) < 1:\n        return False\n    if len(string) > 1:\n        if string[0]!= string[-1]:\n            return False\n    if len(string) == 1:\n        if string.lower()[0]!= string.lower()[-1]:\n            return False\n    else:\n        if string[0]!= string[-1]:\n            return False\n    return True\n",
        "num_ids": 112
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]!= string[-1]:\n        return False\n    else:\n        for i in range(0,len(string)-1):\n            if string[i]!= string[i+1]:\n                return False\n        return True\ndef convert_to_lower(string):\n    '''\n    Write a function to convert the given string to lowercase.\n    '''\n    for i in string:\n        if i.islower():\n            string = string.replace(i,'')\n    return string\ndef check_email(string):\n    '''\n    Check the email format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef check_url(string):\n    '''\n    Check the url format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef check_name(string):\n    '''\n    Check the name format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef check_password(string):\n    '''\n    Check the password format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef check_username(string):\n    '''\n    Check the username format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef check_password_and_username(string):\n    '''\n    Check the password and username format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef check_special_char(string):\n    '''\n    Check the special char format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef password_validation(password):\n    '''\n    Check the password format.\n    '''\n    if re.match(regex,password) and len(password) > 5:\n        return True\n    else:\n        return False\ndef name_validation(name):\n    '''\n    Check the name format.\n    '''\n    if re.match(regex,name) and len(name) > 5:\n        return True\n    else:\n        return False\ndef check_symbol(string):\n    '''\n    Check the symbol format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef check_number(string):\n    '''\n    Check the number format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef check_special_char(string):\n    '''\n    Check the special char format.\n    '''\n    if re.match(regex,string) and len(string) > 5:\n        return True\n    else:\n        return False\ndef email_validation(email):\n    '''\n    Check the email format.\n    '''\n    if re.match(regex,email) and len(email) > 5:\n        return True\n    else:\n        return False\ndef url_validation(url):\n    '''\n    Check the url format.\n    '''\n    if re.match(regex,url) and len(url) > 5:\n        return True\n    else:\n        return False\ndef symbol_validation(symbol):\n    '''\n    Check the special char format.\n    '''\n    if re.match(regex,symbol) and len(symbol) > 5:\n        return True\n    else:\n        return False\ndef check_phone_number(phone):\n    '''\n    Check the phone number format.\n    '''\n    if re.match(regex,phone) and len(phone) > 5:\n        return True\n    else:\n        return False\ndef password_and_username_validation(password,username):\n    '''\n    Check the password and username format.\n    '''\n    if re.match(regex,password) and re.match(regex,username) and len(password) > 5 and len(username) > 5:\n        return True\n    else:\n        return False\ndef special_char_validation(special_char):\n    '''\n    Check the special char format.\n    '''\n    if re.match(regex,special_char) and len(special_char) > 5:\n        return True\n    else:\n        return False\ndef mobile_number_validation(mobile_number):\n    '''\n    Check the mobile number format.\n    '''\n    if re.match(regex,mobile_number) and len(mobile_number) > 5:\n        return True\n    else:\n        return False\ndef pass_validation(password,username,email,url,symbol,mobile_number,password_and_username):\n    '''\n    Check the password, username, email and url format.\n    '''\n    if check_symbol(symbol):\n        if password_validation(password):\n            if check_email(email):\n                if check_url(url):\n                    if check_password(password):\n                        if check_username(username):\n                            if mobile_number_validation(mobile_number):\n                                if check_password_and_username(password_and_username):\n                                    return True\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef number_validation(number):\n    '''\n    Check the number format.\n    '''\n    if re.match(regex,number) and len(number) > 5:\n        return True\n    else:\n        return False\ndef check_special_char(special_char):\n    '''\n    Check the special char format.\n    '''\n    if special_char =='':\n        return True\n    else:\n        return False\ndef main():\n    if len(sys.argv)!= 3:\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    password = sys.argv[1]\n    name = sys.argv[2]\n    valid = password_validation(password)\n    if not valid:\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    if len(name) > 5:\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    if not check_email(name):\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    if not check_url(name):\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    if not check_password(name):\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    if not check_password_and_username(name):\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    if not check_special_char(name):\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    if not check_symbol(name):\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    if not check_number(name):\n        print(\"Error: \"+sys.argv[0]+\" <password> <name>\")\n        exit()\n    if not check_phone_number(name):\n        print(\"Error: \"+sys.argv[0]+\" <password> <nam",
        "num_ids": 457
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #if the string ends with the substring \"is\", then check whether the \"is\" is in the string or not.\n    return string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].find(string[::-1].fin",
        "num_ids": 1983
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.fullmatch(regex, string))\n",
        "num_ids": 17
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    result = re.search(regex,string)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('a'):\n        if string.endswith('d'):\n            return True\n        else:\n            return False\n    else:\n        if string.endswith('d'):\n            return True\n        else:\n            return False\n",
        "num_ids": 66
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        min = a\n    else:\n        min = b\n    if a < c:\n        max = a\n    else:\n        max = c\n",
        "num_ids": 44
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a==b==c==0:\n        return a\n    \n    else:\n        if a%2==0:\n            return a/2 + (a/2)\n        else:\n            return a/2 + (a/2) + (a/2)\n        \nprint(median_numbers(2,4,5))",
        "num_ids": 84
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if c % 3 == 0:\n        return(a+b+c) / 3\n    elif c % 3 == 1:\n        return(a+b) / 2\n    else:\n        return(a)\n",
        "num_ids": 53
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Write your code here.\n    n = len(a)\n    m = len(b)\n    a.sort()\n    b.sort()\n    if m > n:\n        return b[m//2]\n    else:\n        return a[n//2]\n",
        "num_ids": 67
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == len(b) == len(c):\n        return (min(a), max(a), min(b), max(b), min(c), max(c))\n",
        "num_ids": 47
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == len(b) == len(c):\n        return (sorted(a, reverse=True)[len(a)//2])\n    elif len(a) < len(b) < len(c):\n        return sorted(a)[len(a)//2]\n    elif len(a) > len(b) > len(c):\n        return sorted(b)[len(b)//2]\n    else:\n        return sorted(c)[len(c)//2]\n",
        "num_ids": 121
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x=[]\n    if (b-a)%2==0:\n        x.append((b-a)//2)\n    else:\n        x.append((b-a)//2+1)\n    if (c-b)%2==0:\n        x.append((c-b)//2)\n    else:\n        x.append((c-b)//2+1)\n    return (a+b+c)//2\n",
        "num_ids": 109
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 3:\n        a = a + a\n    elif len(a) == 2:\n        a = a + a\n    else:\n        pass\n    if len(b) == 3:\n        b = b + b\n    elif len(b) == 2:\n        b = b + b\n    else:\n        pass\n    if len(c) == 3:\n        c = c + c\n    elif len(c) == 2:\n        c = c + c\n    else:\n        pass\n    return [a,b,c]\n",
        "num_ids": 138
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) < 3:\n        return \"Sorry, there must be 3 or more numbers\"\n    if len(a)%2 == 0:\n        if len(a) == 3:\n            med = (a[int(len(a)/2)-1]+a[int(len(a)/2)+1])/2\n        else:\n            med = (a[int(len(a)/2)-1]+a[int(len(a)/2)])/2\n    else:\n        med = a[int(len(a)/2)]\n    return med\n",
        "num_ids": 135
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and b<c:\n        return (a+b+c)/3\n    elif a<b:\n        return a\n    elif b<c:\n        return b\n    elif c<a:\n        return c\n    else:\n        return None\n",
        "num_ids": 68
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = []\n    for num in nums:\n        res.append(sum(map(int, str(num))))\n    return sum(res)\n",
        "num_ids": 38
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in nums:\n        sum_of_digits += i\n    return sum_of_digits\n",
        "num_ids": 39
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for n in nums:\n        sum_of_digits += n\n    return sum_of_digits\n",
        "num_ids": 39
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #This method should return the sum of digits of each element of the list.\n    #However, for example, if the list is [1,2,3,4,5] then it should return 29.\n    #If you use a lambda function, then your output should be 29.\n    return sum(map(int, str(nums)))\n",
        "num_ids": 80
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n",
        "num_ids": 24
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # YOUR CODE HERE\n    total = 0\n    for num in nums:\n        total += int(num)\n    return total\n    \n",
        "num_ids": 35
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    count = 0\n    for i in nums:\n        count += sum([int(x) for x in str(i)])\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return 0\n    else:\n        s = 0\n        for num in nums:\n            s += num\n        return s\n",
        "num_ids": 39
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # your code goes here\n    \n    #return list of digits\n    list = []\n    for num in nums:\n        list.append(num % 10)\n    return sum(list)\n    \n    \nnums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ",
        "num_ids": 2011
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    sum = 0\n    for num in nums:\n        sum = sum + int(num)\n    return sum\n    \nnums = [1, 4, 9, 2, 4, 3, 2, 5, 8, 7]\nprint(sum_of_digits(nums)",
        "num_ids": 70
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = test_tup1[0] ^ test_tup2[0]\n    print('Bitwise xor result = ', result)\n",
        "num_ids": 36
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # TODO: Write the code to perform the mathematical bitwise xor operation across the given tuples.\n    # HINT: Write a code block in Python that performs the following operation:\n    # 1. Use the bitwise operator (&) for the given bitwise xor.\n    # 2. Use a for loop to iterate over the given tuples.\n    # 3. Use the bitwise operator or to combine the given bitwise xor and 1.\n    # 4. Return the result.\n    # HINT: Go to the \"Bitwise Operators\" lecture page for more information.\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    bitwise_xor = bitwise_xor(test_tup1, test_tup2)\n    # print(bitwise_xor)\n    result = 0\n    for i in bitwise_xor:\n        result = result ^ i\n    print(\"The result of the bitwise xor operation is: \" + str(result))\n",
        "num_ids": 247
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = lambda a, b: (a[0] ^ b[0]) if a[1] == b[1] else (a[1] ^ b[1]) if a[0] == b[0] else (a[0] ^ b[0])\n",
        "num_ids": 64
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = [0, 0, 0, 0]\n",
        "num_ids": 15
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup_list = test_tup1 + test_tup2\n    test_tup_str = ''.join(map(str, test_tup_list))\n    test_tup_str_dict = eval(test_tup_str)\n    xor_result = ''\n    for key, value in test_tup_str_dict.items():\n        if key in '01':\n            xor_result += value\n        else:\n            xor_result += key\n    return xor_result",
        "num_ids": 126
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_as_list = list(test_tup1)\n    test_tup2_as_list = list(test_tup2)\n    \n    test_tup_xor = []\n    for i in range(len(test_tup1)):\n        test_tup_xor.append(test_tup1[i] ^ test_tup2[i])\n        \n    return tuple(test_tup_xor)\n    \ndef bits_to_int_tuple(bits):\n    '''\n    Convert a list of bits in an int to a tuple of bits\n    '''\n    return tuple(map(lambda x: bit_to_int(x), bits))\n",
        "num_ids": 22
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i]\n        result ^= test_tup2[i]\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n",
        "num_ids": 50
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    for i in range(len(tup1)):\n        tup1[i] = bin(ord(tup1[i]) ^ ord(tup2[i]))[2:].zfill(8)\n",
        "num_ids": 82
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (test_tup1[0] ^ test_tup1[1])\n    test_tup2 = (test_tup2[0] ^ test_tup2[1])\n    return test_tup1, test_tup2\n",
        "num_ids": 68
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        if '\"' in i:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = {}\n    for string in test_list:\n        if string in freq_list:\n            freq_list[string] += 1\n        else:\n            freq_list[string] = 1\n    return freq_list\n    \n    \ndef main():\n    '''\n    Run all tests.\n    '''\n    print(\"\\nRunning tests...\")\n    print(\"==================================================\")\n    print(\"==================================================\\n\")\n    \n    print(\"Tests:\")\n    print(\"  1. Test extract_freq():\")\n    test_list = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\"]\n    freq_list = extract_freq(test_list)\n    print(freq_list)\n    print(\"  2. Test get_freq():\")\n    freq_list = get_freq(test_list)\n    print(freq_list)\n    print(\"  3. Test get_freq_unique():\")\n    freq_list = get_freq_unique(test_list)\n    print(freq_list)\n    print(\"  4. Test get_freq_unique_sorted():\")\n    freq_list = get_freq_unique_sorted(test_list)\n    print(freq_list)\n    print(\"  5. Test get_freq_unique_sorted_sorted():\")\n    freq_list = get_freq_unique_sorted_sorted(test_list)\n    print(freq_list)\n    print(\"  6. Test get_freq_unique_sorted_unique():\")\n    freq_list = get_freq_unique_sorted_unique(test_list)\n    print(freq_list)\n    print(\"  7. Test get_freq_unique_sorted_unique_sorted():\")\n    freq_list = get_freq_unique_sorted_unique_sorted(test_list)\n    print(freq_list)\n    print(\"  8. Test get_freq_unique_sorted_unique_unique():\")\n    freq_list = get_freq_unique_sorted_unique_unique(test_list)\n    print(freq_list)\n    print(\"  9. Test extract_freq_unique():\")\n    test_list = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\"]\n    freq_list = extract_freq_unique(test_list)\n    print(freq_list)\n    print(\"  10. Test get_freq_unique():\")\n    freq_list = get_freq_unique(test_list)\n    print(freq_list)\n    print(\"  11. Test get_freq_unique_sorted():\")\n    freq_list = get_freq_unique_sorted(test_list)\n    print(freq_list)\n    print(\"  12. Test get_freq_unique_sorted_sorted():\")\n    freq_list = get_freq_unique_sorted_sorted(test_list)\n    print(freq_list)\n    print(\"  13. Test get_freq_unique_sorted_unique():\")\n    freq_list = get_freq_unique_sorted_unique(test_list)\n    print(freq_list)\n    print(\"  14. Test get_freq_unique_sorted_unique_sorted():\")\n    freq_list = get_freq_unique_sorted_unique_sorted(test_list)\n    print(freq_list)\n    print(\"  15. Test get_freq_unique_sorted_unique_unique():\")\n    freq_list = get_freq_unique_sorted_unique_unique(test_list)\n    print(freq_list)\n    print(\"  16. Test get_freq_unique_sorted_unique_unique_sorted():\")\n    freq_list = get_freq_unique_sorted_unique_unique_sorted(test_list)\n    print(freq_list)\n    print(\"  17. Test get_freq_unique_sorted_unique_unique_unique():\")\n    freq_list = get_freq_unique_sorted_unique_unique_unique(test_list)\n    print(freq_list)\n    print(\"  18. Test get_freq_unique_sorted_unique_unique_unique_sorted():\")\n    freq_list = get_freq_unique_sorted_unique_unique_unique_sorted(test_list)\n    print(freq_list)\n    print(\"  19. Test get_freq_unique_sorted_unique_unique_unique_unique_sorted():\")\n    freq_list = get_freq_unique_sorted_unique_unique_unique_unique_sorted(test_list)\n    print(freq_list)\n    print(\"  20. Test get_freq_unique_sorted_unique_unique_unique_unique_unique_sorted():\")\n    freq_list = get_freq_unique_sorted_unique_unique_unique_unique_unique_sorted(test_list)\n    print(freq_list)\n    print(\"==================================================\")\n    print(\"\")\n    print(\"Tests complete\")\n    print(\"\")\n",
        "num_ids": 1202
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = []\n    for tuples in test_list:\n        if tuples not in unique_tuples:\n            unique_tuples.append(tuples)\n    return unique_tuples\n",
        "num_ids": 51
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # How many times?\n    freq = collections.Counter(test_list)\n    # How many unique tuples?\n    print(freq)\n",
        "num_ids": 38
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for l in test_list:\n        if type(l) is not list:\n            # Unpack the tuple's value and append to a dictionary\n            l = tuple(l)\n        elif len(l) == 1:\n            # Remove the tuple itself\n            l = tuple(l)\n        elif len(l) > 1:\n            # Extract each element of the tuple and add it to a dictionary\n            for i in l:\n                if i in freq_dict:\n                    freq_dict[i] += 1\n                else:\n                    freq_dict[i] = 1\n    \n    # Return a dictionary with the number of unique elements\n    return freq_dict\n",
        "num_ids": 168
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Code here\n    l = len(test_list)\n    for i in range(l):\n        if not isinstance(test_list[i], list):\n            return\n        else:\n            for j in range(len(test_list[i])):\n                if not isinstance(test_list[i][j], int):\n                    return\n    freq = {}\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if not isinstance(test_list[i][j], list):\n                return\n            if test_list[i][j] in freq:\n                freq[test_list[i][j]] += 1\n            else:\n                freq[test_list[i][j]] = 1\n    return len(freq.keys())\n",
        "num_ids": 199
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique = 0\n    for item in test_list:\n        if item.lower() not in TUPLE_LIST:\n            unique += 1\n    return unique\n",
        "num_ids": 40
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    uniq_tuple_set = set()\n    for i in test_list:\n        uniq_tuple_set.add(i)\n    print(uniq_tuple_set)\n    return len(uniq_tuple_set)\n",
        "num_ids": 62
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        count += i.count\n    return count\n",
        "num_ids": 27
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "num_ids": 52
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1[0] = test_tup1[1]\n    test_tup1[1] = test_tup2[0]\n    test_tup2[0] = test_tup2[1]\n    test_tup2[1] = test_tup1[0]\n",
        "num_ids": 78
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #TODO: complete this function to add nested tuples\n    pass\n",
        "num_ids": 20
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = []\n    tup2 = []\n    for i in range(len(test_tup1)):\n        tup1.append(test_tup1[i][0])\n        tup2.append(test_tup2[i][0])\n    tup1.sort()\n    tup2.sort()\n    return tup1, tup2\n",
        "num_ids": 94
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuple(tup1, tup2):\n        total = []\n        for item in tup1:\n            total.append(item)\n        for item in tup2:\n            total.append(item)\n        return tuple(total)\n    \n    return add_nested_tuple(test_tup1, test_tup2)\n",
        "num_ids": 92
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for index, tup in enumerate(test_tup1):\n        print(index, tup)\n    for index, tup in enumerate(test_tup2):\n        print(index, tup)\n        tup.append(index)\n    print(tuple(test_tup1) + tuple(test_tup2))\n    return tuple(test_tup1) + tuple(test_tup2)\n",
        "num_ids": 105
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    try:\n        nested_tup1 = test_tup1[0]\n        nested_tup2 = test_tup2[0]\n        for i in range(len(nested_tup1)):\n            nested_tup1[i] = nested_tup1[i] + nested_tup2[i]\n        return nested_tup1\n    except:\n        print(\"Error: Index is not present in test_tup1 or test_tup2\")\n        sys.exit(1)\n",
        "num_ids": 129
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #   Return the tuple\n    def add(a, b):\n        return (a[0] + b[0], a[1] + b[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    #   Return the tuple\n    return (test_tup1[0] + test_tup",
        "num_ids": 1998
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # make a dictionary with index as key and value as the tuple element as a key\n    # and the nested tuples as value\n    # loop over the dictionary, convert the tuple element to the key, and add the tuple to the dictionary\n    # then return the dictionary\n    # keep adding the tuple as key, while looping through the nested tuples\n    # return the dictionary\n    # def add_nested_tuples(test_tup1, test_tup2):\n    #     d = {}\n    #     for index in range(len(test_tup1)):\n    #         #tuple_element = test_tup1[index]\n    #         tuple_element = test_tup2[index]\n    #         d[index] = tuple_element\n    #         #print(d)\n    #         #print(type(d))\n    #         #print(d[\"index\"])\n    #     return d\n    # print(add_nested_tuples(tuple1, tuple2))\n",
        "num_ids": 239
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #create a nested tuple\n    nested_tuple = ()\n    for i in test_tup1:\n        nested_tuple = nested_tuple + (i,)\n    for j in test_tup2:\n        nested_tuple = nested_tuple + (j,)\n    return nested_tuple\n",
        "num_ids": 79
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum=a\n    if b<minimum:\n        minimum=b\n    return minimum\n",
        "num_ids": 23
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n",
        "num_ids": 12
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a==b):\n        return a\n    if (a<b):\n        return a\n    else:\n        return b\n",
        "num_ids": 34
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    if a < b:\n        min = a\n    else:\n        min = b\n    return min\n",
        "num_ids": 57
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum=a\n    if b<minimum:\n        minimum=b\n    return minimum\n    ",
        "num_ids": 24
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # Write your code here.\n    min = a\n    for i in range(len(a)):\n        if a[i] < min:\n            min = a[i]\n    return min\n",
        "num_ids": 49
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum = min(a,b)\n    return minimum\n",
        "num_ids": 16
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum = a\n    if b > a:\n        minimum = b\n    else:\n        minimum = a\n    return minimum\n",
        "num_ids": 32
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if tuple1(i) == tuplex[0]:\n            return True\n    return False \n",
        "num_ids": 36
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #check if the element is already present \n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i not in tuple1:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex)!= len(tuple1):\n        return False\n    for i in range(len(tuplex)):\n        if tuplex[i]!= tuple1[i]:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return i \n    return False\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex)!= len(tuple1):\n        return False\n    for i in range(len(tuplex)):\n        if tuplex[i]!= tuple1[i]:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n        else:\n            return False\n",
        "num_ids": 31
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        for i in range(0, len(tuplex)):\n            if tuplex[i] == tuple1:\n                return True\n        return False\n    except IndexError:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0]==tuple1[0]:\n        print(\"YES: \",tuple1)\n        return True\n    else:\n        print(\"NO: \",tuple1)\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd=0\n    for num in range(1,x+1):\n        if (num%2)==0:\n            odd+=1\n    return odd\n",
        "num_ids": 40
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    even = 0\n    odd = 0\n    for i in str(x):\n        if i == \"0\":\n            even += 1\n        else:\n            odd += 1\n    if odd % 2 == 0 and even % 2!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s = str(x) \n    if len(s) % 2 == 1: \n        return 0\n    return 1\n",
        "num_ids": 32
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x == 0): \n        return False\n    return (x % 2 == 0)\n",
        "num_ids": 25
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'even'\n    else: \n        return 'odd'\n",
        "num_ids": 28
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Write your code here.\n    if x%2==0:\n        return 'even'\n    else:\n        return 'odd'\n",
        "num_ids": 35
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x % 2 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    n=int(x)\n    if n<0:\n        return False\n    if n%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = int(str(n)[0])\n    string = str(n)\n    n = ''\n    for i in string:\n        n+=str(i)\n    return int(n)\n",
        "num_ids": 49
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    lst = [int(i) for i in str(n)]\n    lst.sort()\n    print(lst)\n    print(lst[-1] + lst[-2])\n",
        "num_ids": 50
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def create_next_bigger(num):\n        num_str = str(num)\n        num_str = num_str[::-1]\n        next_bigger = int(num_str)\n        return next_bigger\n    return create_next_bigger\n",
        "num_ids": 67
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    smallest_digits = []\n    smallest_digits_dividing = []\n    total_smallest_digits = 0\n    for i in range(1, 10):\n        total_smallest_digits = total_smallest_digits + i\n        smallest_digits.append(str(i))\n    for i in range(1,10):\n        smallest_digits_dividing.append(str(i))\n    for i in range(1,10):\n        for j in range(1, 10):\n            if i == 1:\n                if j == 1:\n                    if (str(j) + str(i)) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n                else:\n                    if str(j) + str(i) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n            elif i == j:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n            else:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n    smallest_digits.sort()\n    print(smallest_digits)\n    print(smallest_digits_dividing)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == 1:\n                if j == 1:\n                    if (str(j) + str(i)) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n                else:\n                    if str(j) + str(i) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n            elif i == j:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n            else:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n    smallest_digits = sorted(smallest_digits)\n    print(smallest_digits)\n    print(smallest_digits_dividing)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == 1:\n                if j == 1:\n                    if (str(j) + str(i)) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n                else:\n                    if str(j) + str(i) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n            elif i == j:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n            else:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n    smallest_digits = sorted(smallest_digits)\n    print(smallest_digits)\n    print(smallest_digits_dividing)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == 1:\n                if j == 1:\n                    if (str(j) + str(i)) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n                else:\n                    if str(j) + str(i) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n            elif i == j:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n            else:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n    smallest_digits = sorted(smallest_digits)\n    print(smallest_digits)\n    print(smallest_digits_dividing)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == 1:\n                if j == 1:\n                    if (str(j) + str(i)) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n                else:\n                    if str(j) + str(i) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n            elif i == j:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n            else:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n    smallest_digits = sorted(smallest_digits)\n    print(smallest_digits)\n    print(smallest_digits_dividing)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == 1:\n                if j == 1:\n                    if (str(j) + str(i)) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n                else:\n                    if str(j) + str(i) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n            elif i == j:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n            else:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n    smallest_digits = sorted(smallest_digits)\n    print(smallest_digits)\n    print(smallest_digits_dividing)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == 1:\n                if j == 1:\n                    if (str(j) + str(i)) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n                else:\n                    if str(j) + str(i) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n            elif i == j:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n            else:\n                if (str(j) + str(i)) in smallest_digits_dividing:\n                    smallest_digits.append(str(j) + str(i))\n    smallest_digits = sorted(smallest_digits)\n    print(smallest_digits)\n    print(smallest_digits_dividing)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == 1:\n                if j == 1:\n                    if (str(j) + str(i)) in smallest_digits_dividing:\n                        smallest_digits.append(str(j) + str(i))\n                else:\n                    if str(j) + str(i) in smallest",
        "num_ids": 2010
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    s = ''\n    for i in range(len(digits)):\n        s += digits[i]\n    return int(s)\n",
        "num_ids": 57
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s=str(n)\n    m=0\n    for i in s:\n        m=m*10+int(i)\n    m=str(m)\n    return int(m)\n",
        "num_ids": 49
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_number = 0\n    for i in str(n):\n        new_number += int(i)\n    return new_number\n",
        "num_ids": 34
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n[0] + rearrange_bigger(n[1:])\n",
        "num_ids": 36
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    digits.sort()\n    digits = digits[::-1]\n    digits = [str(d) for d in digits]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n    digits = digits[::-1]\n",
        "num_ids": 2010
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError\n    q = []\n    heapq.heapify(q)\n    for num in nums2:\n        heapq.heappush(q, [num, num])\n    for num in nums1:\n        heapq.heappush(q, [num, num])\n    result = 0\n    for _ in range(k):\n        if q and heapq.heappop(q)[1] == q[0]:\n            result += 1\n        else:\n            result += 2\n    return result\n",
        "num_ids": 145
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Only same length arrays for k\")\n    if len(nums1) == 0:\n        raise ValueError(\"Empty arrays\")\n    n = len(nums1)\n    # heapq is used to calculate smallest pair using given k\n    heap = []\n    # n will be used to store the size of the heap\n    # In addition, heap[0] will be used to store index of smallest pair\n    # while heap[1] will be used to store index of second smallest pair\n    for i in range(n):\n        if nums1[i] == nums2[0]:\n            heapq.heappush(heap, [0, i])\n        else:\n            heapq.heappush(heap, [nums1[i] - nums2[0], i])\n    for i in range(k):\n        small = heapq.heappop(heap)\n        for j in range(n):\n            if j!= small[1]:\n                heapq.heappush(heap, [nums1[j] - nums2[small[1]], j])\n    # if no smallest pairs are exist in the array, then return -1, since there are no more\n    # k pairs\n    if heap:\n        return -1\n    # return the sum of smallest pairs as a array\n    return [i[0] for i in heapq.heapify(heap)]\n",
        "num_ids": 354
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n    for i in range(k):\n        for j in range(i+1, len(nums1)):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n    result = []\n    for i in range(k):\n        if min_heap and min_heap[0][0] < heapq.heappop(min_heap)[0]:\n            continue\n        if len(result) < k:\n            result.append((min_heap[0][0] + min_heap[1][0], min_heap[0][1], min_heap[1][1]) )\n        else:\n            result[k-1] = result[k-1]\n    return result\n",
        "num_ids": 211
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # brute force\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, [nums1[i], i])\n    for i in range(len(nums2)):\n        heapq.heappush(heap, [nums2[i], i])\n",
        "num_ids": 85
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n",
        "num_ids": 39
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    i = 0\n    heap = []\n    while (i < len(nums1) and i < len(nums2)):\n        if nums1[i]!= nums2[i]:\n            heapq.heappush(heap, [nums1[i] - nums2[i], i, nums1[i]])\n        \n        i += 1\n        \n    if len(heap) > k:\n        return heapq.nsmallest(k, heap)\n    return None\n",
        "num_ids": 142
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # build pairs dictionary\n    pairs = {}\n    # iterate over nums1 and nums2\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # store the pair (a, b)\n            if nums1[i] == nums2[j]:\n                pairs[nums1[i]] = nums2[j]\n            # store the pair (b, a)\n            elif nums2[j] == nums1[i]:\n                pairs[nums2[j]] = nums1[i]\n            # if not exist, add the pair as the key\n            else:\n                pairs[nums1[i]] = nums2[j]\n            # if the pair exists, remove it from the dictionary\n            if pairs[nums1[i]] in pairs:\n                del pairs[pairs[nums1[i]]]\n    # return k pairs\n    return heapq.nlargest(k, pairs.items(), key = lambda t: t[1])\n",
        "num_ids": 253
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k < 0 or k > len(nums1 + nums2):\n        return\n    \n    # sort nums1 first\n    nums1.sort()\n    # sort nums2 first\n    nums2.sort()\n    \n    # put all of the elements in a dictionary\n    dictionary = {}\n    for i in range(len(nums1)):\n        dictionary[nums1[i]] = nums2[i]\n    \n    # create a heap from the dictionary\n    h = []\n    for i in range(len(dictionary)):\n        heapq.heappush(h, [dictionary[i], i])\n    \n    # iterate through the heap\n    while len(h)!= 0:\n        first, i = heapq.heappop(h)\n        second = heapq.heappop(h)\n        \n        # if this pair is not in the heap\n        if dictionary[first] == second:\n            continue\n        \n        # if the pair has less than k elements from the first array\n        if len(first) < k:\n            # make the first element less by swapping with the second element\n            dictionary[second] = dictionary[first]\n            # move first element of the heap to the end of the heap\n            heapq.heappush(h, [dictionary[first], i])\n        \n        # if the pair has less than k elements from the second array\n        if len(second) < k:\n            # make the second element less by swapping with the first element\n            dictionary[first] = dictionary[second]\n            # move second element of the heap to the end of the heap\n            heapq.heappush(h, [dictionary[second], i])\n    \n    # return the length of the smallest pairs\n    return len(dictionary)\n",
        "num_ids": 428
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n",
        "num_ids": 25
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, [num1+num2, num1, num2])\n    print(heap)\n    n = len(nums1)\n    ans = []\n    for _ in range(k):\n        ans.append(heapq.heappop(heap))\n    return ans\n",
        "num_ids": 108
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # get the product from the first tuple\n    first_product = list1[0][1] * list1[0][2]\n    # get the product from the second tuple\n    second_product = list1[1][1] * list1[1][2]\n",
        "num_ids": 64
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = None\n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            temp = list1[i] * list1[j]\n            if temp < result:\n                result = temp\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 3:\n        raise Exception('At least 3 items must be given.')\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n    min_key = min(d, key=d.get)\n    return min_key * list1[list1.index(min_key)]\n",
        "num_ids": 108
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = []\n    for i in list1:\n        for j in list1:\n            if i[0] < j[0] and i[1] < j[1]:\n                min_product.append(i)\n                min_product.append(j)\n                break\n    return min_product\n",
        "num_ids": 76
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    small_tuple = tuple(sorted(list1, key=lambda x: x[0]))\n    small_tuple = tuple(sorted(list1, key=lambda x: x[1]))\n    small_product = 1\n    small_product = small_product * (small_tuple[0][0] * small_tuple[1][0])\n    small_product = small_product + small_tuple[0][1] * small_tuple[1][1]\n    small_product = small_product + small_tuple[0][0] * small_tuple[1][1]\n    small_product = small_product + small_tuple[0][1] * small_tuple[1][0]\n    return small_product\n",
        "num_ids": 182
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # TODO\n    pass",
        "num_ids": 9
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            tuple = list1[i] + list1[j]\n            if tuple < min_product:\n                min_product = tuple\n            elif tuple == min_product:\n                if tuple > min_product:\n                    min_product = tuple\n    return min_product\n    \ndef main():\n    '''\n    Write a program that prints the maximum product of any two tuples.\n    '''\n    \n    print(\"The maximum product is\", max_product([1, 2, 5], [2, 4, 9]))\n    print(\"The maximum product is\", max_product([2, 5, 7, 9], [1, 6, 8, 10]))\n    print(\"The maximum product is\", max_product([1, 2, 5], [2, 4, 9], [1, 6, 8, 10]))\n    print(\"The maximum product is\", max_product([1, 2, 5], [2, 4, 9], [1, 6, 8, 10], [2, 4, 9]))\n    print(\"The maximum product is\", max_product([1, 2, 5], [2, 4, 9], [1, 6, 8, 10], [2, 4, 9], [1, 6, 8, 10]))\n    print(\"The maximum product is\", max_product([1, 2, 5], [2, 4, 9], [1, 6, 8, 10], [2, 4, 9], [1, 6, 8, 10]))\n    print(\"The maximum product is\", max_product([1, 2, 5], [2, 4, 9], [1, 6, 8, 10], [2, 4, 9], [1, 6, 8, 10]))\n    print(\"The maximum product is\", max_product([1, 2, 5], [2, 4, 9], [1, 6, 8, 10], [2, 4, 9], [1, 6, 8, 10]))\n",
        "num_ids": 349
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #This code runs when you run this file from the command line\n    if len(list1) < 2:\n        return -1\n    min = list1[0][0]*list1[1][1]\n    for i in range(1,len(list1)):\n        min = min_product_tuple(list1[i:])\n        if min > min:\n            min = min_product_tuple(list1[:i])\n    return min\n",
        "num_ids": 112
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "num_ids": 80
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_tuple = ()\n    min_product = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            p = list1[i] * list1[j]\n            if p < min_product:\n                min_product = p\n                min_tuple = (list1[i], list1[j])\n    return min_tuple, min_product\n",
        "num_ids": 105
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for element in listval:\n        if element < minval:\n            minval = element\n    return minval\n",
        "num_ids": 39
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) < 1:\n        return\n    minimum = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n",
        "num_ids": 64
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    \n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            \n    return min_val\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    \n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n            \n    return max_val\n    \ndef mean(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    \n    mean = sum(listval) / len(listval)\n    return mean\n",
        "num_ids": 38
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = 0\n    for item in listval:\n        if item < min:\n            min = item\n    return min\n",
        "num_ids": 31
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n",
        "num_ids": 58
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #determine if list is monotonically increasing\n    if listval.count(min(listval))==0:\n        #find the minimum element in list\n        min=min(listval)\n        return min\n    #determine if list is monotonically decreasing\n    if listval.count(max(listval))==0:\n        #find the maximum element in list\n        max=max(listval)\n        return max\n    #for each element in list\n    for i in range(len(listval)):\n        #determine if value is less than or equal to the minimum element\n        if listval[i]<=min:\n            #if the value is less than the minimum element then the element is less than the minimum element\n            min=listval[i]\n        #determine if value is greater than or equal to the maximum element\n        if listval[i]>max:\n            #if the value is greater than the maximum element then the element is greater than the maximum element\n            max=listval[i]\n    return min\n",
        "num_ids": 246
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    min_index = 0\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            min_index = i\n    return min_index\n",
        "num_ids": 69
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n",
        "num_ids": 48
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n",
        "num_ids": 39
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n",
        "num_ids": 48
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)',r'\\1_\\2',word).lower()\n",
        "num_ids": 36
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([''.join(i.title() for i in word).lstrip('_').split('-'))\n",
        "num_ids": 31
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = ''\n    for c in word:\n        if c.isupper():\n            s = s + c.lower()\n        elif c.islower():\n            s = s + c.upper()\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    lower_word = word.lower()\n    sorted_word = sorted(lower_word)\n    camel_word = ''\n    i = 0\n    while i < len(sorted_word):\n        if sorted_word[i] == '_':\n            camel_word += sorted_word[i-1]\n        elif (sorted_word[i] == '-' and i!= 0):\n            camel_word += sorted_word[i-1]\n            i = i + 1\n        elif (sorted_word[i] == '-' and i == 0):\n            camel_word += sorted_word[i]\n        else:\n            camel_word += sorted_word[i]\n        i = i + 1\n",
        "num_ids": 178
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n",
        "num_ids": 32
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n",
        "num_ids": 36
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    splitted_word = word.split('_')\n    first_part = splitted_word[0]\n    second_part = ''.join(i[:i.index('.') + 1] for i in splitted_word[1:])\n    return first_part + '_' + second_part\n",
        "num_ids": 75
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s_dict = {'A': 'a', 'B': 'b', 'C': 'c', 'D': 'd', 'E': 'e', 'F': 'f', 'G': 'g', 'H': 'h', 'I': 'i', 'J': 'j', 'K': 'k', 'L': 'l', 'M':'m', 'N': 'n', 'O': 'o', 'P': 'p', 'Q': 'q', 'R': 'r', 'S':'s', 'T': 't', 'U': 'u', 'V': 'v', 'W': 'w', 'X': 'x', 'Y': 'y', 'Z': 'z'}\n    return ''.join([s_dict[i] if i in s_dict else i for i in word])\n",
        "num_ids": 192
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r\"(?<!^)(?:(?<=[a-z])[A-Z])\" + \\\n              r\"(?<=[A-Z])(?=[A-Z])\"\n    return re.sub(pattern, \"\", word)\n",
        "num_ids": 62
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n",
        "num_ids": 36
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create a list of odd numbers\n    odd_list = []\n    for i in l:\n        if i % 2 == 1:\n            odd_list.append(i)\n    # print even list\n    print(odd_list)\n    return odd_list\n",
        "num_ids": 64
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    nums = []\n    for x in l:\n        if x % 2 == 1:\n            nums.append(x)\n    return nums\n",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) > 1:\n        for i in range(0, len(l) - 1):\n            if l[i] % 2 == 1:\n                l.remove(l[i])\n    return l\n",
        "num_ids": 54
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2!=0:\n            l.remove(l[i])\n    return l\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l.pop(i)\n    return l\n",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = sorted(l)\n    pos = 0\n    while pos < len(l):\n        if l[pos]%2 == 1:\n            del l[pos]\n        else:\n            pos += 1\n    return l\n",
        "num_ids": 56
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(filter(lambda x:x % 2 == 1, l))\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new = []\n    for i in l:\n        if i % 2!= 0:\n            new.append(i)\n    return new\n",
        "num_ids": 36
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    last_index = len(l) - 1\n    while last_index > 0:\n        if l[last_index] % 2!= 0:\n            l.pop(last_index)\n        else:\n            break\n        last_index -= 1\n    return l\n",
        "num_ids": 72
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2!=0]\n",
        "num_ids": 19
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    i = 0\n    while i < len(list1):\n        if i+n > len(list1):\n            return -1\n        else:\n            yield list1[i+n]\n        i += 1\n",
        "num_ids": 54
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    i = 0\n    list2 = []\n",
        "num_ids": 13
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    a = []\n    for i in list1:\n        a.append(i[n])\n    return a\n",
        "num_ids": 29
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Start with the first tuple in the list\n    first_tuple = list1[0]\n    # Initialize an empty string\n    nth_element = ''\n    # Loop through the remaining of the list\n    for element in list1:\n        # If the tuple contains the nth element\n        if element[0] == first_tuple[n - 1]:\n            # Add the element to the end of the nth element\n            nth_element += element[1]\n    # Return the nth element\n    return nth_element\n",
        "num_ids": 127
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        raise Exception(\"nth not valid\")\n    if n == 1:\n        return list1[0]\n    return list1[n-1][0]\n",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n",
        "num_ids": 12
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!=len(list2):\n        return False\n    \n    # a=list1.count('A')\n    # b=list2.count('A')\n    \n    # for i in range(len(list1)):\n    #     if list1[i]!=list2[i]:\n    #         return False\n    # return True\n    \n    # if a==b:\n    #     return True\n    # else:\n    #     return False\n    \n    # a=list1.count('A')\n    # b=list2.count('A')\n    \n    # if a!=b:\n    #     return True\n    # return False\n",
        "num_ids": 165
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\ndef overlapping2(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\ndef intersection(list1,list2):\n    '''\n    Write a python function to find the intersection of two sequences.\n    '''\n    return list(set(list1).intersection(set(list2)))\ndef substraction(list1,list2):\n    '''\n    Write a python function to find the difference of two sequences.\n    '''\n    return list(set(list1).difference(set(list2)))\ndef intersection2(list1,list2):\n    '''\n    Write a python function to find the intersection of two sequences.\n    '''\n    return list(set(list1).intersection(set(list2)))\ndef union(list1,list2):\n    '''\n    Write a python function to find the union of two sequences.\n    '''\n    return list(set(list1).union(set(list2)))\ndef substraction2(list1,list2):\n    '''\n    Write a python function to find the difference of two sequences.\n    '''\n    return list(set(list1).difference(set(list2)))\ndef subtraction2(list1,list2):\n    '''\n    Write a python function to find the difference of two sequences.\n    '''\n    return list(set(list1).symmetric_difference(set(list2)))\ndef is_palindrome(list1):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    length = len(list1)\n    for i in range(length//2):\n        if list1[i]!= list1[length-1-i]:\n            return False\n    return True\ndef is_palindrome2(list1):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    return list1 == list1[::-1]\ndef is_palindrome3(list1):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    for i in range(len(list1)//2):\n        if list1[i]!= list1[-1-i]:\n            return False\n    return True\ndef is_palindrome4(list1):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    if len(list1) == 1:\n        return True\n    if list1[0]!= list1[-1]:\n        return False\n    return is_palindrome4(list1[1:])\n",
        "num_ids": 53
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)==len(list2):\n        for i in list1:\n            if list1.count(i)>1:\n                return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlap = []\n    overlap_set = set(list1)\n    overlap_set.update(list2)\n    if len(overlap_set)!= len(list1):\n        return False\n    for i in range(len(list1)):\n        if list1[i] in overlap_set:\n            return True\n    return False\n",
        "num_ids": 86
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n",
        "num_ids": 22
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if set(list1).intersection(set(list2)) else False\n",
        "num_ids": 22
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    l1=list1\n    l2=list2\n    return l1 in l2 or l2 in l1\n    \ndef string_match(sentence1,sentence2):\n    '''\n    Write a python function to check whether one string is present in another string or not.\n    '''\n    return sentence1.startswith(sentence2)\n",
        "num_ids": 16
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [3,4,5,6,7]\n    l3 = [1,2,3,4,5,6,7,8,9,10]\n    result = l1 == l2\n    result = l3 == l2\n    print(result)\n",
        "num_ids": 84
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -math.inf\n    for i in arr:\n        if i > max_product:\n            max_product = i\n    return max_product\n",
        "num_ids": 41
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num, max_num\n",
        "num_ids": 45
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = 0\n    max_idx = -1\n",
        "num_ids": 18
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    l = len(arr)\n    max = arr[0]\n    for i in range(1, l):\n        max = arr[i]*max\n        \n    return max, arr.index(max)\n",
        "num_ids": 54
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    n = len(arr)\n    \n    # loop through every number in array and find highest product\n    # this will be a tuple of the product and index of this number\n    # the tuple will contain the index and the product\n    \n    for i in range(n):\n        for j in range(n):\n            if arr[i] * arr[j] > arr[i] * arr[j]:\n                p = arr[i] * arr[j]\n                \n                # if the product is greater than the previous product,\n                # then we can reassign the previous product to the new product\n                if p > arr[i]:\n                    arr[i], arr[j] = arr[j], arr[i]\n    \n    # return the highest product\n    return (arr[i] * arr[i])\n",
        "num_ids": 190
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_p = arr[0]\n    if n == 1:\n        return None\n    for i in range(1,n):\n        if arr[i] > max_p:\n            max_p = arr[i]\n            max_i = i\n    return max_i,max_p\n",
        "num_ids": 81
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    if len(arr) <= 2:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    largest = arr[0] * arr[0]\n    smallest = arr[0] * arr[0]\n    for i in arr:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    return smallest, largest\n",
        "num_ids": 67
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    import math\n    # d1 = (arr[0]*arr[1]).sum()\n    # d2 = (arr[0]*arr[1]).prod()\n    # return ((d1*d2)/math.gcd(d1,d2))\n    \n    d1 = arr[0]*arr[1]\n    d2 = arr[0]*arr[1]\n    for i in range(2,len(arr)):\n        d1 = d1*arr[i]\n        d2 = d2*arr[i]\n    return (d1*d2)/math.gcd(d1,d2)\n    \n    \narr = [1,2,3,4,5,6,7,8,9,10]\nprint(max_Product(arr))\n",
        "num_ids": 191
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = -float('inf')\n    maxProd = -float('inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > maxProd:\n                maxProd = prod\n                maxProdIndex = i\n                maxProdIndex2 = j\n    return arr[maxProdIndex], arr[maxProdIndex2]\n",
        "num_ids": 116
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(map(tuple,Input))) \n",
        "num_ids": 17
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input.sort() \n    return Input[0]\n",
        "num_ids": 16
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for item in Input:\n        if item[0] == item[1]:\n            return item\n    return None\n",
        "num_ids": 29
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # find common first element in given list of tuple\n    common_element = list(set(Input).intersection(*Input))\n    return common_element\n",
        "num_ids": 37
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a=[]\n    for i in Input:\n        a.append(i[0])\n    return a\n",
        "num_ids": 28
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [x for x in Input if x[0] == x[1]]\n",
        "num_ids": 21
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # get all unique elements in list \n    unique_elements = list(set(Input))\n    # get a set of all the elements of the input list \n    unique_elements_set = set(unique_elements)\n    # create a new set for set1 and set2\n    unique_elements_set2 = set()\n    # get elements from set1\n    unique_elements_set1 = set(Input)\n    # get elements from set2\n    unique_elements_set2 = set(Input)\n",
        "num_ids": 125
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_list = []\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                new_list.append(Input[i])\n    return new_list\n",
        "num_ids": 71
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique_elements = set()\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i] == Input[j]:\n                unique_elements.add(Input[i])\n                unique_elements.add(Input[j])\n    return list(unique_elements)\n",
        "num_ids": 87
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code goes here\n    first=set([])\n    for i in Input:\n        if i[0] in first:\n            pass\n        else:\n            first.add(i[0])\n    return first\n    #     return firs",
        "num_ids": 60
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length=len(lst)\n    for i in range(max_length):\n        for j in range(i+1, max_length):\n            if(len(lst[i])>len(lst[j])):\n                return lst[i]\n    return -1\nlst=[1,2,3,4,5,6,7,8,9,10]\nprint(Find_Max(lst)",
        "num_ids": 105
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        return \"No elements in list.\"\n",
        "num_ids": 23
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst == None or len(lst) == 0: \n        return None\n    if len(lst) == 1: \n        return lst[0]\n    if len(lst) == 2: \n        return lst[0] if lst[0] < lst[1] else lst[1]\n    if len(lst) == 3: \n        return lst[0] if lst[0] < lst[1] < lst[2] else lst[1]\n    mid = len(lst)//2\n    if lst[mid] < lst[mid - 1] and lst[mid] < lst[mid + 1]: \n        return lst[mid]\n    if lst[mid] < lst[mid - 1]: \n        return Find_Max(lst[:mid-1]) \n    return Find_Max(lst[mid:]) \n",
        "num_ids": 222
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    # Your code here\n    return max(lst)\n    \nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(\"Maximum length of the list is :\",Find_Max(lst)",
        "num_ids": 62
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    list_length = len(lst)\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 46
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    ans = []\n    for i in lst:\n        if len(ans) == 0:\n            ans.append(i)\n        elif len(ans)!= 0:\n            if len(ans) < len(i):\n                ans = [i]\n            elif len(ans) == len(i):\n                if len(ans) < len(i):\n                    ans.append(i)\n                elif len(ans) > len(i):\n                    ans = ans[:len(i)]\n            elif len(ans) > len(i):\n                ans = [i]\n    return ans[0]\n",
        "num_ids": 147
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = [] \n",
        "num_ids": 10
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = lst[0]\n    for i in lst:\n        if i > Max:\n            Max = i\n    return Max\n",
        "num_ids": 35
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n",
        "num_ids": 50
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    s=0\n    for i in lst:\n        s+=i\n    return s\n    #return max(lst)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum=0\n    length=len(list1)\n    for i in range(length):\n        sum+=list1[i]\n    print(sum)\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total += round(number, 2)\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = list(map(round, list1))\n    total = sum(new_list)\n    print(f\"The total sum of {list1} multiplied by length of the list is {total}\")\n",
        "num_ids": 52
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for element in list1:\n        total += element\n    print('The total is', total)\n",
        "num_ids": 30
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    list1.sort()\n    sum = 0\n    for i in range(len(list1)):\n        sum = list1[i] * i\n        print(sum)\n    return sum",
        "num_ids": 49
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1.sort()\n    round_sum = 0\n    for i in list1:\n        round_sum += i\n    print(round_sum)\n",
        "num_ids": 39
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # start by defining the sum\n    sum = 0\n    \n    # loop through each item in the list\n    for item in list1:\n        \n        # the sum is calculated by adding the list item multiplied by the length of the list\n        sum += item * len(list1)\n    \n    # print out the total\n    print(\"The total sum is: \" + str(sum))\n    \n    # return the sum of the list\n    return sum\n",
        "num_ids": 106
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    if not isinstance(list1, list):\n        raise TypeError(\"the object is not a list\")\n",
        "num_ids": 29
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += num\n    print(total)\n",
        "num_ids": 26
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum=0\n    for i in range(len(list1)):\n        sum+=list1[i]\n    return sum*len(list1)\n",
        "num_ids": 39
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a = a + (i**3)\n    return a\n    \nprint(cube_Sum(5))\n    \n    ",
        "num_ids": 49
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(n)\n    l = list(range(1, n+1))\n    c = 0\n    for i in l:\n        c = c + i**3\n    return ",
        "num_ids": 48
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    n = abs(n)\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return (n*(n+1)*(3*n+2))//6\n",
        "num_ids": 22
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(n)\n    a = 0\n    for i in range(1, n + 1):\n        a += i ** 3\n    return a\nprint(cube_Sum(5)",
        "num_ids": 47
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 3)\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    return cube_sum\n",
        "num_ids": 37
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \" \".join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # print(\"tuple=\", test_tup)\n    n = test_tup[0]\n    # print(\"tuple[0]=\", n)\n    t = test_tup[1]\n    # print(\"tuple[1]=\", t)\n    l = []\n    for i in range(len(t)):\n        l.append(t[i])\n    # print(\"l=\", l)\n    # print(n)\n    if n.isdigit():\n        return(n + l[0] + l[1])\n    else:\n        return(n + l[0] + l[1])\n    # return(n + l[0] + l[1])\n",
        "num_ids": 167
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str = ''\n    for i in test_tup:\n        str += str(i) + \" \"\n    return str\n",
        "num_ids": 32
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(map(lambda x: str(x), test_tup))\n",
        "num_ids": 21
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if isinstance(test_tup[0],str):\n        for i in range(len(test_tup)):\n            test_tup[i] = test_tup[i].replace(\" \",\"_\")\n        return tuple(test_tup)\n    else:\n        return tuple(test_tup)\n",
        "num_ids": 79
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tuple = ()\n    for i in test_tup:\n        new_tuple += i\n    return new_tuple\n",
        "num_ids": 35
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tuple_str = ''\n    for index in range(0, len(test_tup[0]), 1):\n        tuple_str += test_tup[index] + test_tup[index+1] + test_tup[index+2] + test_tup[index+3] + test_tup[index+4]\n    return tuple_str\n",
        "num_ids": 90
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_list = []\n    for i in range(1, n + 1):\n        cube = i**3\n        cube_list.append(cube)\n    return sum(cube_list) / (n * (n - 1))\n",
        "num_ids": 57
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    print(\"The average of cubes of first\", n, \"natural numbers is\", sum/n)\n",
        "num_ids": 55
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 1:\n        return \n    else:\n        lst = []\n        for i in range(1,n+1):\n            lst.append(i**3)\n        print(sum(lst)/len(lst))\n",
        "num_ids": 61
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n + 1):\n        cubes.append(i**3)\n    total = 0\n    for i in cubes:\n        total = total + i\n    average = round(total / len(cubes), 1)\n    return average\n    \n",
        "num_ids": 72
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum/n\n",
        "num_ids": 29
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n**3\n    \n    \n",
        "num_ids": 50
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum+=i**3\n    average = sum/n\n    print(\"Average of cubes of first {} natural numbers is {}\".format(n,average))\n",
        "num_ids": 51
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # varaible to store the total number of natural numbers in a particular range\n    sum = 0\n",
        "num_ids": 25
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = 1\n    for i in range(n):\n        cube = cube + i**3\n    return cube/n\n",
        "num_ids": 31
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if(n == 0):\n        return 0\n    else:\n        return sum(map(lambda x: x**3, range(1,n+1)))/n",
        "num_ids": 41
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    assert type(test_tuple) is tuple, 'test_tuple must be a tuple'\n    assert len(test_tuple) > 0, 'test_tuple must not be empty'\n    assert all(type(i) is str for i in test_tuple), 'test_tuple must be a tuple of strings'\n    assert all(len(i) > 0 for i in test_tuple), 'all elements of the tuple must be strings'\n    assert all(i.isalpha() for i in test_tuple), 'all elements of the tuple must be strings'\n    \n    # list of letters\n    letters = list(test_tuple)\n    \n    # remove all '-'\n    remove_neg_letters = []\n    for i in letters:\n        if i[0] == '-':\n            remove_neg_letters.append(i)\n    for i in range(len(remove_neg_letters)):\n        letters[i] = remove_neg_letters[i][0]\n",
        "num_ids": 236
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Test case 1: empty tuple\n    if len(test_tuple) == 0:\n        return ()\n",
        "num_ids": 28
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return list(map(list, zip(*test_tuple)))",
        "num_ids": 17
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0].rfind(test_tuple[1])\n",
        "num_ids": 22
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front,back,rear = test_tuple\n    front = front.split()\n    rear = rear.split()\n    front = [int(x) for x in front]\n    rear = [int(x) for x in rear]\n    rear = rear[front.index(0):]\n    return tuple(rear)\n",
        "num_ids": 83
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for element in test_tuple:\n        if element[0] == \"R\":\n            yield element[2]\n",
        "num_ids": 31
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # your code goes here\n    rear_list = list()\n    for i in range(0,len(test_tuple)):\n        rear_list.append(test_tuple[i][len(test_tuple[i])-1])\n    return(rear_list)\n",
        "num_ids": 72
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for str in test_tuple:\n        if str.find(\"rear\")!= -1:\n            rear_index.append(test_tuple.index(str))\n    return rear_index\n",
        "num_ids": 59
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0].split(',')[-1].strip()\n",
        "num_ids": 22
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[0] for i in test_tuple]\n",
        "num_ids": 18
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0 \n    for elem in list1: \n        if elem == x: \n            counter += 1 \n    return counter \n",
        "num_ids": 38
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for x in list1:\n        if x == x:\n            counter = counter + 1\n    return counter\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if item == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\ndef find_length_of_list(list1, x):\n    '''\n    Write a function to find the length of a list containing a particular element.\n    '''\n    return len(list1)\ndef concatinate(list1, list2):\n    '''\n    Write a function to concatenate two lists together.\n    '''\n    return list1 + list2\ndef count_length_of_list(list1, list2):\n    '''\n    Write a function to count the number of elements in a list.\n    '''\n    return len(list1) + len(list2)\ndef find_greater_than(list1, x):\n    '''\n    Write a function that returns the elements of a list that are greater than x.\n    '''\n    return [i for i in list1 if i > x]\ndef find_smallest(list1):\n    '''\n    Write a function that returns the elements of a list that are smallest.\n    '''\n    return [i for i in list1 if i < list1[-1]]\ndef swap_list(list1, i, j):\n    '''\n    Write a function that swaps the values of the elements in the list1 at the given indices.\n    '''\n    list1[i], list1[j] = list1[j], list1[i]\ndef reverse_list(list1):\n    '''\n    Write a function that reverses a list.\n    '''\n    list1.reverse()\ndef find_smallest_between(list1, i, j):\n    '''\n    Write a function that returns the smallest element in a list that is in the range between i and j.\n    '''\n    return min(list1[i:j+1])\ndef find_smallest_even_list(list1):\n    '''\n    Write a function that returns the smallest even element of a list.\n    '''\n    return list1[list1 % 2]\ndef find_smallest_odd_list(list1):\n    '''\n    Write a function that returns the smallest odd element of a list.\n    '''\n    return list1[-list1 % 2]\ndef find_unique_elements(list1):\n    '''\n    Write a function that returns the elements of a list that are unique.\n    '''\n    unique = []\n    for i in list1:\n        if i not in unique:\n            unique.append(i)\n    return unique\ndef find_unique_list(list1):\n    '''\n    Write a function that returns the unique elements in a list.\n    '''\n    unique = []\n    for i in list1:\n        if i not in unique:\n            unique.append(i)\n    return unique\ndef sort_list(list1):\n    '''\n    Write a function that sorts a list.\n    '''\n    list1.sort()\ndef sort_list2(list1):\n    '''\n    Write a function that sorts a list.\n    '''\n    list1.sort()\n    list1.reverse()\ndef sort_list3(list1):\n    '''\n    Write a function that sorts a list.\n    '''\n    list1.sort()\n    list1.reverse()\n    list1.sort()\ndef sort_list4(list1):\n    '''\n    Write a function that sorts a list.\n    '''\n    list1.sort()\n    list1.sort()\ndef sort_list5(list1):\n    '''\n    Write a function that sorts a list.\n    '''\n    list1.sort()\n    list1.sort()\ndef sort_list6(list1):\n    '''\n    Write a function that sorts a list.\n    '''\n    list1.sort()\n    list1.sort()\ndef count_sublist(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(0, len(list1)-1):\n        if list1[i]!= x:\n            count += 1\n    return count\ndef count_sublist2(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if list1[i] == x:\n            count += 1\n    return count\ndef count_sublist3(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\ndef count_sublist4(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if list1[i] == x:\n            count += 1\n    return count\ndef count_sublist5(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\ndef count_sublist6(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if list1[i] == x:\n            count += 1\n    return count\ndef count_sublist7(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if list1[i] == x:\n            count += 1\n    return count\ndef count_sublist8(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if list1[i] == x:\n            count += 1\n    return count\ndef count_sublist9(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if list1[i] == x:\n            count += 1\n    return count\ndef count_sublist10(list1, x):\n    '''\n    Write a function that returns the number of sublists with the given value.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if list1[i] == x:\n            count += 1\n    return count\ndef find_index(list1, x):\n    '''\n    Write a function that returns the index of the first occurrence of the value x in a list.\n    '''\n    for i in range(0, len(list1)-1):\n        if list1[i] == x:\n            return i\ndef find_index2(list1, x):\n    '''\n    Write a function that returns the index of the first occurrence of the value x in a list.\n    '''\n    for i in range(0, len(list1)-1):\n        if list1[i] == x:\n            return i\ndef find_index3(list1, x):\n    '''\n    Write a function that returns the index of the first occurrence of the value x in a list.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] == x:\n            return i\ndef find_index4(list1, x):\n    '''\n    Write a function that returns the index of the first occurrence of the value x in a list.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] == x:\n            return i\ndef count_index(list1, x):\n    '''\n    Write a function that returns the number of occurrences of the value x in a lis",
        "num_ids": 20
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    if(len(list1)==0):\n        print(\"list is empty\")\n        return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    total = 0\n    for i in range(0, len(list1)):\n        if (list1[i][x] == True):\n            total += 1\n    return total\n",
        "num_ids": 45
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for el in list1:\n        if el == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count_sublists = 0\n    count_elements = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count_sublists += 1\n        if list1[i]!= x:\n            count_elements += 1\n    return count_sublists, count_elements\n",
        "num_ids": 82
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    if len(list1)==0: \n        return 0\n    for i in range(len(list1)): \n        if list1[i]==x: \n            count+=1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # O(n)\n    # O(n) time complexity\n    # O(n) space complexity\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n    return nums\n",
        "num_ids": 58
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_nums.append(num)\n    return filtered_nums\n    \n",
        "num_ids": 50
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2 == 1]\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!=0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!= 0, nums)\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    for n in nums:\n        if n%2!= 0:\n            print(n)\n            \nfilter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "num_ids": 54
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd = []\n    for i in nums:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n",
        "num_ids": 36
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for i in nums:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!= 0, nums)\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            new_nums.append(num)\n    return new_nums\n",
        "num_ids": 45
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt) < 8:\n        return dt\n    dd,mm,yy = dt.split('-')\n    dd = dd.zfill(2)\n    mm = mm.zfill(2)\n    yy = yy.zfill(4)\n    return f'{yy}-{mm}-{dd}'\n",
        "num_ids": 83
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        d = re.sub(\"\\d\", \"-\", dt).split('-')\n        print(d)\n        d[2] = d[2][-2:]\n        d[3] = d[3][-2:]\n        d[4] = d[4][-2:]\n        dt = \"\".join(d)\n        dt = dt + \"-\" + dt[2] + \"-\" + dt[3] + \"-\" + dt[4] + \".\"\n    except:\n        dt = \"\"\n    return dt\n    \ndef change_date(dt):\n    '''\n    Write a function to print the date of a date in dd-mm-yyyy format.\n    '''\n    try:\n        d = dt.split('-')\n        d[2] = change_date_format(d[2])\n        d[3] = change_date_format(d[3])\n        d[4] = change_date_format(d[4])\n        d = d[2] + \"-\" + d[3] + \"-\" + d[4] + \".\"\n        print(d)\n    except:\n        d = \"\"\n    return d\n",
        "num_ids": 114
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{1,2})-(\\d{1,2})-(\\d{4})')\n    m = pattern.match(dt)\n    if not m:\n        return dt\n    d,m,y = m.groups()\n    return f'{d}-{m}-{y}'\n",
        "num_ids": 85
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"^\\d{2}-\\d{2}-\\d{4}\"\n    date = re.search(pattern, dt)\n    if date:\n        return dt[:date.span()[1]] + \"-\" + dt[date.span()[1]:].replace(\" \", \"-\")\n    else:\n        return dt\n",
        "num_ids": 87
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"\\d{1,2}[/-]\\d{1,2}[/-]\\d{1,2}\"\n    return re.sub(pattern, '-', dt)\n",
        "num_ids": 50
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    date = dt[2]+dt[1]+dt[0]\n    return date\n    \ndef replace_remainder_and_seperators(s, delimiters):\n    '''\n    Write a function to replace the delimiters with the given string.\n    '''\n    for i in range(len(delimiters)):\n        s = s.replace(delimiters[i],\"|\")\n    return s\n    \ndef separate_date(s):\n    '''\n    Read the format of the date and return the yyyy-mm-dd date.\n    '''\n    s = s.split(\"-\")\n    date = s[0]+\"-\"+s[1]+\"-\"+s[2]\n    return date\n    \ndef is_year_valid(year):\n    '''\n    Validate the year (yyyy-mm-dd).\n    '''\n    if (year[0]=='0' and year[1]=='0' and year[2]=='0' and len(year)==4) or (len(year)==4 and year[0]=='0' and year[1]=='0' and year[2]=='0' and len(year)==3):\n        return True\n    else:\n        return False\n    \ndef is_month_valid(month):\n    '''\n    Validate the month (mm).\n    '''\n    if (month[0]=='0' and month[1]=='0' and month[2]=='0' and len(month)==3) or (len(month)==3 and month[0]=='0' and month[1]=='0' and month[2]=='0' and len(month)==2):\n        return True\n    else:\n        return False\n    \ndef is_year_valid_and_month_valid(year, month):\n    '''\n    Validate the year and month (yyyy-mm).\n    '''\n    if (year[0]=='0' and year[1]=='0' and year[2]=='0' and len(year)==4) or (len(year)==4 and year[0]=='0' and year[1]=='0' and year[2]=='0' and len(year)==3):\n        if (month[0]=='0' and month[1]=='0' and month[2]=='0' and len(month)==3) or (len(month)==3 and month[0]=='0' and month[1]=='0' and month[2]=='0' and len(month)==2):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef extract_time(s):\n    '''\n    Extract the time from the given string.\n    '''\n    s = s.split(':')\n    return s[0]\n    \ndef extract_interval(s):\n    '''\n    Extract the interval from the given string.\n    '''\n    s = s.split(':')\n    return s[1]\n    \ndef extract_date(s):\n    '''\n    Extract the date from the given string.\n    '''\n    s = s.split('-')\n    return s[0]+\"-\"+s[1]+\"-\"+s[2]\n    \ndef is_time_valid(s):\n    '''\n    Validate the time (hh:mm).\n    '''\n    if (s[0]=='0' and s[1]=='0' and s[2]=='0' and len(s)==3) or (len(s)==3 and s[0]=='0' and s[1]=='0' and s[2]=='0' and len(s)==2):\n        return True\n    else:\n        return False\n    \ndef is_date_valid(s):\n    '''\n    Validate the date (yyyy-mm-dd).\n    '''\n    if (s[0]=='0' and s[1]=='0' and s[2]=='0' and len(s)==4) or (len(s)==4 and s[0]=='0' and s[1]=='0' and s[2]=='0' and len(s)==3):\n        return True\n    else:\n        return False\n    \ndef check_calendar(calendar):\n    '''\n    Validate the given calendar.\n    '''\n    calendar = calendar.split(';')\n    for c in calendar:\n        if not c:\n            return False\n    return True\n    \ndef is_valid_calendar(calendar):\n    '''\n    Validate the given calendar.\n    '''\n    if not calendar:\n        return False\n    if calendar[0]=='0':\n        calendar[0] = '0'\n    if calendar[1]=='0':\n        calendar[1] = '0'\n    if calendar[2]=='0':\n        calendar[2] = '0'\n    for c in calendar:\n        if c=='|':\n            return False\n    return True\n    \ndef is_valid_interval(interval):\n    '''\n    Validate the given interval.\n    '''\n    if not interval:\n        return False\n    if interval[0]=='0':\n        interval[0] = '0'\n    if interval[1]=='0':\n        interval[1] = '0'\n    if interval[2]=='0':\n        interval[2] = '0'\n    for c in interval:\n        if c=='|':\n            return False\n    return True\n    \ndef is_valid_time(s):\n    '''\n    Validate the given time.\n    '''\n    if not s:\n        return False\n    if len(s)==2:\n        return True\n    if s[1]==':':\n        return True\n    return False\n    \ndef is_valid_date(s):\n    '''\n    Validate the given date.\n    '''\n    if not s:\n        return False\n    if len(s)==2:\n        return True\n    if s[1]=='-':\n        return True\n    return False\n    \ndef is_valid_date_valid(year, month, day, date, time, calendar):\n    '''\n    Validate the given date.\n    '''\n    if not calendar:\n        return False\n    if not calendar[0].isdigit() or not calendar[1].isdigit() or not calendar[2].isdigit() or not calendar[3].isdigit() or not calendar[4].isdigit():\n        return False\n    if not calendar[0].isalpha() or not calendar[1].isalpha() or not calendar[2].isalpha() or not calendar[3].isalpha() or not calendar[4].isalpha():\n        return False\n    if not calendar[0].isnumeric() or not calendar[1].isnumeric() or not calendar[2].isnumeric() or not calendar[3].isnumeric() or not calendar[4].isnumeric():\n        return False\n    if is_time_valid(extract_time(extract_interval(extract_date(date)))) and is_time_valid(extract_interval(extract_date(date))):\n        if is_year_valid_and_month_valid(year,month) and is_year_valid_and_month_valid(int(year),int(month)):\n            if int(year)<=int(int(calendar[1])):\n                return False\n            elif int(year)==int(calendar[1]):\n                if not is_year_valid_and_month_valid(int(year),int(month)+1):\n                    return False\n            elif int(year)>int(calendar[1]):\n                return False\n            elif int(year)==int(calendar[1]):\n                if not is_year_valid_and_month_valid(int(year),int(month)+1):\n                    return False\n            elif int(year)<int(calendar[1]):\n                return False\n            elif int(year)>int(calendar[1",
        "num_ids": 437
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    date_pattern = r'(\\d{1,2})[-]?(\\d{1,2})[-]?(\\d{4})'\n    m = re.search(date_pattern, dt)\n    if m is None:\n        print('Invalid date format!')\n    else:\n        print(dt)\n        return dt.replace(m.group(0), m.group(1)+\"-\"+m.group(2)+\"-\"+m.group(3))\n",
        "num_ids": 119
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    return (date[2] + '-' + date[0] + '-' + date[1])\n",
        "num_ids": 37
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert date format\n    m = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if not m:\n        raise ValueError('Invalid date: \"%s\"' % dt)\n    year = m.group(1)\n    month = m.group(2)\n    day = m.group(3)\n    \n    # convert date to dd-mm-yyyy format\n    dt = dt.replace(year=int(year), month=int(month), day=int(day))\n    return dt\n",
        "num_ids": 138
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Grab the date from the datetime format\n    # Note, datetime.strptime does not support parsing the raw string from the datetime.\n    date = datetime.strptime(dt, '%Y-%m-%d')\n    # Strip off the leading time so we can use it\n    date = date.replace(tzinfo=None)\n    # Separate the date into parts\n    date_parts = date.strftime('%d-%m-%Y').split('-')\n    # Convert parts to integers\n    date_parts = [int(x) for x in date_parts]\n    # Return the date in dd-mm-yyyy format\n    return '-'.join(date_parts)\n",
        "num_ids": 169
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Take the number of elements in the array\n    n = len(my_list)\n    \n    # Loop through all elements\n    # to increase the elements\n    # by one\n    for i in range(n//2):\n        for j in range(i, n, i+1):\n            # Swap elements at indices i and j\n            # by swapping the values\n            # in the range(i, j)\n            tmp = my_list[j]\n            my_list[j] = my_list[i]\n            my_list[i] = tmp\n    # Return the array in sorted order\n    return my_list\n    \n",
        "num_ids": 150
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = len(my_list)\n    for i in range(h//2, 0, -1):\n        for j in range(i):\n            if my_list[j] > my_list[j+1]:\n                temp = my_list[j]\n                my_list[j] = my_list[j+1]\n                my_list[j+1] = temp\n        print(f\"H[{i}] : {my_list}\")\n    print(f\"H[{h}] : {my_list}\")\n",
        "num_ids": 132
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # length = len(my_list)\n    for i in range(0, len(my_list)):\n        for j in range(i, 0, -1):\n            if my_list[j] < my_list[j-1]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-1]\n                my_list[j-1] = temp\n    return my_list\n",
        "num_ids": 106
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_helper(arr):\n        n = len(arr)\n        h = n // 2\n",
        "num_ids": 29
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n",
        "num_ids": 12
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    shell_sort_index = 0\n    while shell_sort_index < len(my_list):\n        for i in range(shell_sort_index, len(my_list)):\n            if my_list[i] < my_list[shell_sort_index]:\n                my_list[shell_sort_index], my_list[i] = my_list[i], my_list[shell_sort_index]\n                shell_sort_index += 1\n        shell_sort_index = 0\n",
        "num_ids": 119
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    for i in range(n):\n        for j in range(0, n-i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n        \n    return my_list\n",
        "num_ids": 91
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    count = len(my_list) - 1\n    while count > 0:\n        for i in range(count):\n            #print(i)\n            j = i\n            while j >= 0 and my_list[j] > my_list[j + 1]:\n                my_list[j + 1], my_list[j] = my_list[j], my_list[j + 1]\n                j = j - 1\n        count -= 1\n    return my_list\n",
        "num_ids": 113
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort(my_list):\n        '''\n        Sorts the given array by using shell sort.\n        '''\n        size = len(my_list)\n        print(\"\\nFINAL ARRAY:\")\n        print(my_list)\n        # print(\"\\nMEMORY:\")\n        # for i in range(size):\n        #     print(my_list[i], end=\"\")\n        for i in range(size-1):\n            for j in range(size-i-1):\n                if my_list[j] > my_list[j+1]:\n                    temp = my_list[j]\n                    my_list[j] = my_list[j+1]\n                    my_list[j+1] = temp\n        print(\"\\nSORTED:\")\n        print(my_list)\n        return my_list\n    # print(shell_sort([10, 5, 7, 4, 1, 9, 2, 6]))\n",
        "num_ids": 201
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n    # print(my_list)\n    # print(len(my_list))\n    # result_list = []\n    # count = 0\n    # for i in range(0, len(my_list)):\n    #     for j in range(0, len(my_list) - i - 1):\n    #         if my_list[j] > my_list[j+1]:\n    #             count += 1\n    #             my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    #     # print(count)\n    #     if count > len(my_list)/2:\n    #         break\n    #     else:\n    #         print(my_list)\n    # return my_list\n",
        "num_ids": 190
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup3 = list(test_tup1)\n    test_tup3.extend(test_tup2)\n    return tuple(test_tup3)\n",
        "num_ids": 46
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if test_tup1 is None or test_tup2 is None:\n        return False\n    # if len(test_tup1) == len(test_tup2):\n    #     for i in range(len(test_tup1)):\n    #         if test_tup1[i] == test_tup2[i]:\n    #             return test_tup1[i]\n    # return False\n    try:\n        if len(test_tup1) == len(test_tup2):\n            for i in range(len(test_tup1)):\n                if test_tup1[i] == test_tup2[i]:\n                    return test_tup1[i]\n            return False\n        return False\n    except Exception as e:\n        print(e)\n        return False\n",
        "num_ids": 200
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "num_ids": 16
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "num_ids": 16
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_list1, test_list2 = test_tup1, test_tup2\n    return (test_list1[0] and test_list2[0], test_list1[1] and test_list2[1])\n",
        "num_ids": 59
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError('Invalid tuple sizes.')\n",
        "num_ids": 33
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1[0] and tuple(tup1[1]) for tup1 in zip(test_tup1, test_tup2))\n",
        "num_ids": 41
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(f'The length of the test_tup1 and test_tup2 must be equal')\n    #list of tuples\n    return list(zip(test_tup1, test_tup2))\n",
        "num_ids": 74
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = [i for i in test_tup1 if i!= None]\n    test_tup2 = [i for i in test_tup2 if i!= None]\n    test_tup3 = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            test_tup3.append(i)\n    test_tup3 = tuple(test_tup3)\n    return test_tup3\n",
        "num_ids": 118
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(map(lambda x, y: x + y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if(a == 0): \n        return c\n    else: \n        return (b * a) / c\n",
        "num_ids": 30
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * b * c\n",
        "num_ids": 10
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(-1,1,100)\n    y = (b*x**2 + a*x + c)/(b**2 + a**2 + (x - 1)**2)\n    return x, y\n",
        "num_ids": 57
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    if (a < 0):\n        a = a * -1\n    if (b < 0):\n        b = b * -1\n",
        "num_ids": 36
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return lambda x: a * x ** 2 + b * x + c\n",
        "num_ids": 19
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4*a*c >= 0:\n        return (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    else:\n        return 'Error'\n",
        "num_ids": 54
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(-np.pi, np.pi, 50)\n    y = np.cos(x) + a*x**2 + b*x**3 + c*x**4\n    return y\n",
        "num_ids": 53
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = b\n    y = a\n    n = 0\n    while (x - y) > 0:\n        if x - y == 0:\n            print(\"x: \" + str(x) + \" y: \" + str(y))\n        elif x - y > 0:\n            n += 1\n            x -= y\n        else:\n            n += 1\n            y = a - x\n    print(\"n = \" + str(n))\n    return x - n * y\n",
        "num_ids": 115
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 a, b, c: ')\n    a1 = int(input())\n    b1 = int(input())\n    c1 = int(input())\n    print('\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u0438 \u043f\u0440\u044f\u043c\u043e\u0439:')\n    print('a1 =', a1,'; b1 =', b1, '; c1 =', c1)\n    x1 = (a1**2 + b1**2 + c1**2)**0.5\n    print('x1 =', x1)\n    return x1\n",
        "num_ids": 166
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return 1 / (b**2) - c * b*a\n",
        "num_ids": 18
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        for el in list1:\n            if el not in list2:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    if list1 == list2:\n        return True\n    else:\n        return False",
        "num_ids": 42
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1 = list1[:]\n    list2 = list2[:]\n    \n    list1_set = set(list1)\n    list2_set = set(list2)\n    \n    if len(list1_set) == len(list2_set):\n        return True\n    else:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            count = count + 1\n    if count == len(list1):\n        return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        for index in range(len(list1)):\n            if list1[index] == list2[index]:\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # TODO: Write a function that takes two lists, returns true if they have at least one common element.\n    #  Print the common element in the same line as the function, using the lists in order.\n    common_elem = False\n    return common_elem\n",
        "num_ids": 64
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n",
        "num_ids": 7
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Your code here\n    if len(list1) > len(list2):\n        return False\n    if len(list1) == len(list2):\n        return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Base and height are ascii characters.\n    #Hides the base and height variables for easier use.\n    base,height=base1,base2\n    #We need to check whether the base is greater than 0\n    if base > 0:\n        #We need to check whether the height is greater than 0\n        if height > 0:\n            #The below if/else block determines if the height is even or odd.\n            if height % 2 == 0:\n                #We find the modulo by 2 to account for the remainder of the division.\n                modulo=height%2\n            else:\n                modulo=height%2\n            #If the modulo is odd we get the average value.\n            #This is done by dividing the modulo by 2.\n            if modulo%2==0:\n                #We need to get the value of the two halves.\n                base_half=int(base/2)\n                height_half=int(height/2)\n                #Then we calculate the average of the two halves.\n                base_median=round((base_half+height_half)/2)\n                height_median=round((height_half+base_half)/2)\n                #We get the median.\n                return base_median+height_median\n            #If the modulo is even we need to calculate the median of the two halves.\n            else:\n                base_half=int(base/2)\n                height_half=int(height/2)\n                #Then we calculate the median of the two halves.\n                base_median=round((base_half+height_half)/2)\n                height_median=round((height_half+base_half)/2)\n                return base_median\n        #If the height is greater than 0 and is odd we get the average.\n        else:\n            #This is done by getting the modulo by 2 to account for the remainder of the division.\n            modulo=height%2\n            #We find the modulo by 2 to account for the remainder of the division.\n            if modulo%2==0:\n                base_half=int(base/2)\n                height_half=int(height/2)\n                #Then we calculate the average of the two halves.\n                base_median=round((base_half+height_half)/2)\n                height_median=round((height_half+base_half)/2)\n                #We get the median.\n                return base_median+height_median\n            #If the modulo is even we need to calculate the median of the two halves.\n            else:\n                base_half=int(base/2)\n                height_half=int(height/2)\n                #Then we calculate the median of the two halves.\n                base_median=round((base_half+height_half)/2)\n                height_median=round((height_half+base_half)/2)\n                return base_median+height_median\n    #If the base is zero then we need to return the height.\n    else:\n        base_half=int(base/2)\n        height_half=int(height/2)\n        #Then we calculate the average of the two halves.\n        base_median=round((base_half+height_half)/2)\n        height_median=round((height_half+base_half)/2)\n        #We get the median.\n        return base_median+height_median\n    #If the height is greater than 0 and is odd we need to get the average.\n    #This is done by dividing the modulo by 2.\n    if modulo%2==0:\n        return base+height_half\n    #If the height is greater than 0 and is even we need to get the average.\n    else:\n        return base+height_half\n",
        "num_ids": 887
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print('Trapezium:')\n    print(f'{base1} + {base2} = {height}')\n    if height == 1:\n        return 1\n    if height == 2:\n        return (base1+base2)/2\n    base = min(base1,base2)\n    return (base+height) / 2\n",
        "num_ids": 83
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Initialize a list\n    list1=[]\n    #Calculate the medians\n    for i in range(height+1):\n        list1.append(base1+base2*i)\n    #Calculate the medians\n    for i in range(len(list1)):\n        if i%2==0:\n            list1[i]=int(list1[i])/2\n    #Sort the medians\n    list1.sort()\n    #Find the median\n    return int(list1[height//2])\n",
        "num_ids": 129
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Your code goes here.\n    # Use the formula to find the median.\n",
        "num_ids": 21
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<=base2:\n        return base1\n    else:\n        return base2\n",
        "num_ids": 26
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1>base2:\n        base2,base1 = base1,base2\n    l1,l2 = base1,base2\n    s1 = height\n    s2 = height\n    while l2-l1>1:\n        m = (l2 + l1) // 2\n        s1, s2 = s1 + s2, m\n        if s2<s1:\n            l2 = m\n        else:\n            l1 = m\n    return ((s1 + s2)/2)\n",
        "num_ids": 125
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    x=[]\n    for i in range(0,height):\n        x.append(i*(base1+base2)/2)\n    return x\n",
        "num_ids": 39
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    n = len(base1)\n    if n==0:\n        return 0\n    elif n==1:\n        return base1[0]\n    elif n==2:\n        return (base1[0]+base1[1])/2\n    else:\n        return base1[n//2]+median_trapezium(base1,base2,height)\n",
        "num_ids": 91
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # find the midpoint of the trapezium\n    pivot = base1 + (base2 - base1) / 2\n    # determine the height\n    height = height - pivot\n    if height < 0:\n        return \"Not a trapezium\"\n    else:\n        return round(pivot,0) + height\n",
        "num_ids": 77
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Edge cases\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif arr[number-1] > number:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 55
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if arr[0] > arr[1] else False\n",
        "num_ids": 18
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number in arr:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0] > number\n    if arr[0] == number:\n        return False\n    return arr[0] > number or arr[0] > arr[1]\n",
        "num_ids": 54
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"{} is greater than {}\".format(i,number))\n            break\n    else:\n        print(\"{} is greater than all {}\".format(number,arr))\n",
        "num_ids": 58
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n        if arr[i] < number:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr.count(number) > 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if arr[number] >= arr[0] else False\n",
        "num_ids": 18
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    i = 0\n    while i < len(arr) and arr[i] > number:\n        i += 1\n    if i == len(arr):\n        return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # NOTE: This is pretty straightforward.  The only exception is a blank line, which will\n    #       cause a problem in the other tests.\n    return re.search(r'(a)?b', text) is not None\n",
        "num_ids": 54
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub('\\s+','', text)\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('&','&')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n    text = text.replace('~','~')\n    text = text.replace('.', '.')\n    text = text.replace('?', '?')\n    text = text.replace('!', '!')\n    text = text.replace('-','-')\n    text = text.replace('*','*')\n    text = text.replace('&','&')\n    text = text.replace('|','|')\n    text = text.replace('_','_')\n",
        "num_ids": 1904
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more b's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more c's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more e's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more f's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more g's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more h's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more i's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more j's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more k's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more l's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more m's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more n's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more o's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more p's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more q's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more r's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more s's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more t's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more u's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more v's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more w's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more x's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirtyone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more y's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirtytwo(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twiny(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinytwo(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinythree(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyfour(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyfive(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinysix(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyseven(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyeight(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinynine(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinynineone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text ",
        "num_ids": 5
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=\\W)([\\w]+[a-zA-Z]+)')\n    return pattern.match(text)\n",
        "num_ids": 43
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    pattern = '^' + re.escape(text) + '$'\n    \n    return re.search(pattern, text)\n",
        "num_ids": 35
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(?P<a>[a-zA-Z0-9_]+) \\b'\n    return re.match(pattern, text)\n",
        "num_ids": 40
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    for b in range(len(text)-1):\n        if b >= 0:\n            if text[b] == 'a':\n                return text[:b]\n    return text\n",
        "num_ids": 45
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_word = re.search(\"\\w+a\", text)\n    if match_word is not None:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text == '':\n        return False\n    elif text == '0':\n        return True\n    elif text.find('a')!= -1:\n        return True\n    elif text.find('b')!= -1:\n        return True\n    else:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # check the string if it's not empty or has only a leading space, \n    # add a space to it if not. \n    if not text or len(text) < 1:\n        text ='' + text\n        \n    # check the string to see if it is has a space. \n    # If it is, just add a space. \n    # Otherwise, add a space plus a colon (:). \n    # If it has two spaces, it will add two spaces. \n    # Otherwise, add a colon (:). \n    # If it has two colons, it will add two colons. \n    # Otherwise, add a colon (:). \n    # Add a colon followed by an empty space. \n    # Check if there is at least one space. \n    # If it is, add a space ( ) and return the result. \n    # If it doesn't have at least one space, just return the string. \n    \n    # iterate through each string.\n    for x in text:\n        if not x.isalpha():\n            return 'Error'\n        if not x.isspace():\n            return x\n    \n    # add a space if the string isn't empty and is not a colon (:).\n    # If it is, just add a space.\n    # Else, add a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string. \n    # If it has two spaces, it will add two spaces.\n    # If it has two colons, it will add two colons.\n    # Add a space followed by a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    \n    # iterate through each string.\n    for x in text:\n        if not x.isalpha() and x.isspace():\n            return 'Error'\n        if not x.isspace():\n            return x\n    \n    # add a space if the string isn't empty and is not a colon (:).\n    # If it is, just add a space.\n    # Else, add a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string. \n    # If it has two spaces, it will add two spaces.\n    # If it has two colons, it will add two colons.\n    # Add a space followed by a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    \n    # iterate through each string.\n    for x in text:\n        if not x.isalpha() and x.isspace():\n            return 'Error'\n        if not x.isspace():\n            return x\n    \n    # add a space if the string isn't empty and is not a colon (:).\n    # If it is, just add a space.\n    # Else, add a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    # If it has two spaces, it will add two spaces.\n    # If it has two colons, it will add two colons.\n    # Add a space followed by a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    \n    # iterate through each string.\n    for x in text:\n        if not x.isalpha() and x.isspace():\n            return 'Error'\n        if not x.isspace():\n            return x\n    \n    # add a space if the string isn't empty and is not a colon (:).\n    # If it is, just add a space.\n    # Else, add a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string. \n    # If it has two spaces, it will add two spaces.\n    # If it has two colons, it will add two colons.\n    # Add a space followed by a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    \n    # iterate through each string.\n    for x in text:\n        if not x.isalpha() and x.isspace():\n            return 'Error'\n        if not x.isspace():\n            return x\n    \n    # add a space if the string isn't empty and is not a colon (:).\n    # If it is, just add a space.\n    # Else, add a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    # If it has two spaces, it will add two spaces.\n    # If it has two colons, it will add two colons.\n    # Add a space followed by a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    \n    # iterate through each string.\n    for x in text:\n        if not x.isalpha() and x.isspace():\n            return 'Error'\n        if not x.isspace():\n            return x\n    \n    # add a space if the string isn't empty and is not a colon (:).\n    # If it is, just add a space.\n    # Else, add a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string. \n    # If it has two spaces, it will add two spaces.\n    # If it has two colons, it will add two colons.\n    # Add a space followed by a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    \n    # iterate through each string.\n    for x in text:\n        if not x.isalpha() and x.isspace():\n            return 'Error'\n        if not x.isspace():\n            return x\n    \n    # add a space if the string isn't empty and is not a colon (:).\n    # If it is, just add a space.\n    # Else, add a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string. \n    # If it has two spaces, it will add two spaces.\n    # If it has two colons, it will add two colons.\n    # Add a space followed by a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    \n    # iterate through each string.\n    for x in text:\n        if not x.isalpha() and x.isspace():\n            return 'Error'\n        if not x.isspace():\n            return x\n    \n    # add a space if the string isn't empty and is not a colon (:).\n    # If it is, just add a space.\n    # Else, add a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    # If it has two spaces, it will add two spaces.\n    # If it has two colons, it will add two colons.\n    # Add a space followed by a colon followed by an empty space.\n    # If it doesn't have at least one space, return the string. \n    # If it has at least one space, return the string.\n    \n    # iterate through each string.\n    for x in text:\n        if not x.isalpha() and x.isspace():\n            return 'Error'\n        if not x.isspace():\n            return x\n    \n    # add a space if the string isn't empty and is not a colon (:).\n    ",
        "num_ids": 2006
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = 0\n    while n > 0 :\n        last_digit = n % 10\n        n = n // 10\n    return last_digit\n    ",
        "num_ids": 39
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s=str(n)\n    n=int(s[-1])\n    print(n)\n    return n\n",
        "num_ids": 31
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if(n==0):\n        return n\n    else:\n        return n%10\n",
        "num_ids": 24
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lst = []\n    while n!= 0 :\n        lst.append(n % 10)\n        n = n // 10\n    lst.reverse()\n    lst.append(n)\n    return lst[len(lst)-1]\n",
        "num_ids": 63
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return int(str(n)[-1])\n    \n    \n",
        "num_ids": 33
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return(int(str(n)[-1]))\n",
        "num_ids": 16
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n==0 :\n        return 0\n    while n > 0 :\n        n /= 10\n        last_digit = n % 10\n    return last_digit\n",
        "num_ids": 41
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # YOUR CODE HERE\n    \n    if n<=0 :\n        raise ValueError('number must be greater than 0')\n    while n>0 :\n        n=n//10\n        if n==0 :\n            return 0\n    return n",
        "num_ids": 59
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return(int(n[-1]))\n",
        "num_ids": 14
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative=[]\n    for i in list1:\n        if i>0:\n            negative.append(i)\n    return negative\n    ",
        "num_ids": 35
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(-i)\n    return neg\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = list1.copy()\n    negative.sort()\n    neg = []\n    for i in range(len(negative)):\n        neg.append(-negative[i])\n    return neg\n",
        "num_ids": 48
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            negative_list.append(list1[i])\n    return negative_list\n",
        "num_ids": 52
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(0,len(list1)):\n        list1[i]=list1[i]*-1\n    return list1\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #Write your code here\n    if type(list1)!= list:\n        raise TypeError('please provide a list')\n    if list1 == None or list1 == []:\n        return []\n    if type(list1[0]) == float and type(list1[0]) == int:\n        list2 = []\n        for i in list1:\n            if type(i)!= int or type(i)!= float:\n                raise TypeError('please provide a list of numbers')\n            else:\n                if i < 0:\n                    list2.append(-i)\n    elif type(list1[0]) == float and type(list1[0]) == str:\n        list2 = []\n        for i in list1:\n            if type(i)!= str:\n                raise TypeError('please provide a list of numbers')\n            else:\n                if i < 0:\n                    list2.append(-i)\n    elif type(list1[0]) == int and type(list1[0]) == str:\n        list2 = []\n        for i in list1:\n            if type(i)!= int or type(i)!= str:\n                raise TypeError('please provide a list of numbers')\n            else:\n                if i < 0:\n                    list2.append(-i)\n    else:\n        raise TypeError('please provide a list of numbers')\n    return list2\n",
        "num_ids": 326
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for item in list1:\n        if item < 0:\n            negative.append(item)\n    return negative",
        "num_ids": 33
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    neg_nos.extend(list1)\n    return neg_nos\n",
        "num_ids": 27
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for el in list1:\n        if el < 0:\n            list2.append(el)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l=[]\n    for i in list1:\n        if i<0:\n            l.append(i)\n        else:\n            l.append(0)\n    return l\n",
        "num_ids": 46
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    char_list = list(str1)\n    new_str = []\n    for char in char_list:\n        if char % 2 == 1:\n            new_str.append(char)\n    return ''.join(new_str)\n",
        "num_ids": 59
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1=list(str1)\n    odd=0\n    str2=''\n    for i in range(len(str1)):\n        if i%2==0:\n            str2+=str1[i]\n    str2=str2.lower()\n    for i in str2:\n        if i not in ['a','i','u','o','e','A','I','U','O','E']:\n            odd+=1\n    str2=str2.replace('e','')\n    if odd%2!=0:\n        return str2\n    else:\n        return str2.strip()\n",
        "num_ids": 147
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = []\n    for i in str1:\n        if i % 2 == 1:\n            odd.append(i)\n    return ''.join(odd)\n",
        "num_ids": 41
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = ''\n    for i in str1:\n        if i % 2 == 1:\n            new_string += i\n    return new_string\n",
        "num_ids": 39
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str1[::2],\"\")\n",
        "num_ids": 17
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(filter(lambda x: x % 2!= 0, str1))\n",
        "num_ids": 24
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #Initialize the variable\n    odd_char = 0\n    #Traverse through the string\n    for i in str1:\n        #Increment\n        if i % 2!= 0:\n            #If it is not odd\n            odd_char += 1\n    #If it is odd\n    if odd_char > 0:\n        #Change to 0\n        str1 = str1.replace(i, '0')\n        #Remove odd characters\n        print(str1.replace(i, '0'))\n    else:\n        print(str1)\n",
        "num_ids": 131
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    str1 = list(str1)\n    remove_str = ''\n    for char in str1:\n        if char%2!= 0:\n            remove_str += char\n    str1 = remove_str\n    str1 = str1.strip()\n    return str1",
        "num_ids": 76
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\"Odd\", \" \").replace(\" \", \"\").lower()\n",
        "num_ids": 23
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Add code here\n    # test_list = [(1, 2), (3, 4), (5, 6)]\n    # test_list = [(1, 2), (3, 4), (5, 6)]\n    # test_list = [(1, 2), (3, 4), (5, 6)]\n",
        "num_ids": 74
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i > j:\n                if test_list[i][1] > test_list[j][1]:\n                    count += 1\n                else:\n                    count += 2\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] > test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                count += 1\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for pair in test_list:\n        if (pair[0]==pair[1]) or (pair[0]==pair[1]+1):\n            result += 1\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def convert_list_to_dict(test_list):\n        '''\n        Create a dictionary of bidirectional pairs.\n        '''\n        bidirectional = {}\n        for i in range(len(test_list)-1):\n            bidirectional[i] = (i, i+1)\n        return bidirectional\n",
        "num_ids": 46
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for bid_list in test_list:\n        for bid_tuple in bid_list:\n            if bid_tuple[0] == bid_tuple[1]:\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pair_count = 0\n    for i in test_list:\n        for j in test_list:\n            if i[1] < j[1]:\n                pair_count += 1\n    return pair_count\n",
        "num_ids": 52
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    s = 0\n    while len(test_list):\n        if test_list[0][1] < test_list[1][1]:\n            s += 1\n            test_list.pop(0)\n        elif test_list[0][1] > test_list[1][1]:\n            s += 1\n            test_list.pop(0)\n            test_list.pop(0)\n    return s",
        "num_ids": 100
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # get a list of unique elements\n    unique_list = list(set(test_list))\n    # iterate through list and count pairs\n    # so count {(1,2), (2,1)}\n    cnt_pair = 0\n    for i in range(len(unique_list)):\n        for j in range(i, len(unique_list)):\n            if unique_list[i]!= unique_list[j]:\n                cnt_pair += 1\n    return cnt_pair\n",
        "num_ids": 121
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if not test_list:\n        raise ValueError('test_list cannot be empty.')\n    \n    counter = 0\n    for item in test_list:\n        if item[1] > item[0]:\n            counter += 1\n        \n    return counter\n",
        "num_ids": 63
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Split the L into a list of lists\n    L_list = [L[i:i+2] for i in range(0, len(L), 2)]\n    # Join the lists together into a single integer\n    # A \"0\" is used to separate the integers from the \"1\"\n    return int(''.join([str(i) for i in L_list[0]] + [str(i) for i in L_list[1]]))\n",
        "num_ids": 107
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    a = []\n    for i in L:\n        a.append(i)\n    return a\n",
        "num_ids": 26
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(L))\n",
        "num_ids": 12
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([int(x) for x in L])\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s=''\n    for i in L:\n        s+=str(i)\n    return int(s)\n",
        "num_ids": 29
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    assert len(L) > 1, \"L should contain at least two integers.\"\n    # Set L[0] as the first item in the list.\n    for item in L[1:]:\n        L[0] = item\n    return L[0]\n",
        "num_ids": 64
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(map(str, L))\n    return ''.join(L)\n",
        "num_ids": 23
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def single_to_multiple(S):\n        '''\n        Write a function to convert a single integer to a list of multiple integers.\n        '''\n        for i in range(len(S)):\n            S[i] = S[i]*len(S)\n        return S\n    if isinstance(L, list):\n        L = single_to_multiple(L)\n    return L\n",
        "num_ids": 60
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    output = 0\n    for i in L:\n        output += i\n    return output\n",
        "num_ids": 23
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join(L, sep=', '):\n        if not L:\n            return\n        if len(L)==1:\n            return L[0]\n        return sep.join(map(str, L))\n    return join(L)\n",
        "num_ids": 60
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'^\\s*(\\w+)\\s*(\\d*\\.)*(\\d*)\\s*\\[(\\w+)\\]'\n    sentence = re.findall(pattern, text)\n    if sentence == []:\n        return None, None\n    adverb_position = sentence[0][3]\n    adverb_end = sentence[0][4]\n    for i in range(len(sentence)):\n        if sentence[i][3] == adverb_end:\n            adverb_position = sentence[i][4]\n            break\n        if sentence[i][2] == adverb_end:\n            adverb_position = sentence[i][4]\n            break\n    return adverb_position, adverb_end\n",
        "num_ids": 177
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # create a list of adverbs\n    # a = [\"a\", \"d\", \"d\", \"e\", \"f\", \"e\", \"h\", \"i\", \"i\", \"l\", \"m\", \"o\", \"p\", \"u\", \"y\", \"i\", \"y\", \"u\"]\n    # find the first adverb\n    # adverb = a[0]\n    # find the adverb position in the text\n    # adverb_position = text.index(adverb)\n    # return adverb_position\n    adverbs = [\"a\", \"d\", \"d\", \"e\", \"f\", \"e\", \"h\", \"i\", \"i\", \"l\", \"m\", \"o\", \"p\", \"u\", \"y\", \"i\", \"y\", \"u\"]\n    adverb_position = 0\n    # for i in range(len(text)):\n    #     if text[i] == adverbs[adverb_position]:\n    #         adverb_position += 1\n    #         break\n    adverb_position = 0\n    for i in range(len(text)):\n        if text[i] in adverbs:\n            adverb_position += 1\n        if text[i] in adverbs:\n            adverb_position -= 1\n    return adverb_position\n",
        "num_ids": 300
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    indices = []\n    for i in range(len(text) - 2):\n        adverb = text[i:i+3]\n        if adverb == 'am':\n            indices.append(i)\n            continue\n        if adverb == 'are':\n            indices.append(i+2)\n            continue\n        if adverb == 'was':\n            indices.append(i+1)\n            continue\n        if adverb == 'were':\n            indices.append(i+2)\n            continue\n        if adverb == 'be':\n            indices.append(i+3)\n            continue\n        if adverb == 'been':\n            indices.append(i+4)\n            continue\n        if adverb == 'have':\n            indices.append(i+5)\n            continue\n        if adverb == 'have' or adverb == 'has':\n            indices.append(i+6)\n            continue\n        if adverb == 'did':\n            indices.append(i+7)\n            continue\n        if adverb == 'did' or adverb == 'does':\n            indices.append(i+8)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+9)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+10)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+11)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+12)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+13)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+14)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+15)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+16)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+17)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+18)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+19)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+20)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+21)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+22)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+23)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+24)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+25)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+26)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+27)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+28)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+29)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+30)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+31)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+32)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+33)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+34)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+35)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+36)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+37)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+38)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+39)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+40)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+41)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+42)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+43)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+44)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+45)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+46)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+47)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+48)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+49)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+50)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+51)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+52)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+53)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+54)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(",
        "num_ids": 2008
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    list1 = text.split()\n    if len(list1) <= 1:\n        return None, None\n",
        "num_ids": 28
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #check to see if text contains an adverb\n    if '.' in text:\n        #get the position in the text\n        index = text.find('.')\n        #get the last character of the position\n        last_char = index + 1\n        #if there is a., put a. in front of the position\n        if index == 0:\n            #first character, it is a., so put the index to the last position\n            first_adverb_index = last_char\n        #second character, it is a., so put the index to the second position\n        elif index == 1:\n            #first character, it is a., so put the index to the second position\n            second_adverb_index = last_char\n        #fourth character, it is a., so put the index to the third position\n        elif index == 2:\n            #first character, it is a., so put the index to the third position\n            third_adverb_index = last_char\n        #if there are a. after the last character, the index is an empty string\n        elif index == last_char:\n            first_adverb_index = -1\n        #if there are a. after the second character, the index is an empty string\n        elif index == second_adverb_index:\n            second_adverb_index = -1\n        #if there are a. after the third character, the index is an empty string\n        elif index == third_adverb_index:\n            third_adverb_index = -1\n        #if there are a. after the fourth character, the index is an empty string\n        elif index == fourth_adverb_index:\n            fourth_adverb_index = -1\n    else:\n        #first character, it is a., so put the index to the first position\n        first_adverb_index = 0\n        #second character, it is a., so put the index to the second position\n        second_adverb_index = 0\n        #third character, it is a., so put the index to the third position\n        third_adverb_index = 0\n        #fourth character, it is a., so put the index to the fourth position\n        fourth_adverb_index = 0\n        #get the last character of the position\n        last_char = len(text) - 1\n        #if there are a., put the index to the end of the position\n        if last_char == 0:\n            #fourth character, it is a., so put the index to the end of the position\n            fourth_adverb_index = last_char\n        #if there are a., put the index to the beginning of the position\n        elif last_char == 1:\n            #fourth character, it is a., so put the index to the beginning of the position\n            fourth_adverb_index = 0\n        #if there are a., put the index to the last character of the position\n        elif last_char == 2:\n            #fourth character, it is a., so put the index to the last character of the position\n            fourth_adverb_index = last_char\n        #if there are a., put the index to the third character of the position\n        elif last_char == 3:\n            #fourth character, it is a., so put the index to the third character of the position\n            fourth_adverb_index = last_char\n        #if there are a., put the index to the fourth character of the position\n        elif last_char == 4:\n            #fourth character, it is a., so put the index to the fourth character of the position\n            fourth_adverb_index = last_char\n",
        "num_ids": 830
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef find_preposition_position(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef get_adverb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef get_preposition_positions(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef get_verb_positions(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef get_adverb_verb_positions(text):\n    '''\n    Write a function to find the first adverb and verb and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef get_preposition_verb_positions(text):\n    '''\n    Write a function to find the first preposition and verb and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef get_verb_verb_positions(text):\n    '''\n    Write a function to find the first verb and verb and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef get_adverb_adverb_positions(text):\n    '''\n    Write a function to find the first adverb and adverb and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef get_adverb_verb_positions(text):\n    '''\n    Write a function to find the first adverb and verb and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range(len(word)):\n        if word[i][0] == 'a' or word[i][0] == 'A':\n            if word[i][0] == 'a' or word[i][0] == 'A':\n                if 'i' not in word[i]:\n                    word[i] = 'I'\n    word =''.join(word)\n    pos = []\n    for i in range(len(word)):\n        if word[i] == 'a' or word[i] == 'A':\n            pos.append(i)\n    return pos\ndef get_adverb_verb_verb_positions(text):\n    '''\n    Write a function to find the first adverb and verb and verb and their positions in a given sentence.\n    '''\n    word = re.split(r'\\W+', text)\n    for i in range",
        "num_ids": 23
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = '((pre|post|present|preposition|pronoun|infinitive|number|number|preposition|single|plural|number|preposition|adj|adverb|adverb|verb|verb|am|and|or|at|in|before|after|up|down|to|from|against|to|against|if|then|if|else|else|but|on|only|only|rather|rather|not|others|not|to|by|in|into|at|on|if|with|within|whether|be|by|so|of|at|to|that|with|with|like|in|of|their|at|but|that|than|which|is|although|until|without|because|as|because|because|than|for|that|into|about|both|all|all|only|where|which|without|too|than|within|because|because|for|that|all|with|that|only|in|for|they|and|at|they|because|because|which|without|enough|into|to|but|which|to|with|also|because|because|those|but|because|it|which|because|among|although|to|and|at|because|while|many|few|within|because|because|only|only|when|maybe|too|with|please|for|although|from|of|is|then|although|there|in|into|and|from|because|more|those|although|against|only|which|other|together|although|to|for|together|by|for|at|although|why|in|which|of|because|only|only|at|only|but|because|of|because|although|onto|out|only|although|to|because|although|with|for|although|to|only|because|beyond|although|only|only|also|in|only|although|to|because|this|although|because|although|most|only|in|only|not|only|although|are|almost|although|with|of|both|although|must|although|in|although|only|and|although|only|although|with|at|because|although|although|although|because|although|although|although|not|else|in|when|that|in|although|because|although|although|although|although|unless|in|although|unless|instead|while|in|although|because|although|although|although|never|unless|in|in|in|although|although|where|in|in|in|in|for|in|in|in|only|but|although|out|in|in|in|for|in|in|in|of|in|in|in|in|in|in|in|in|and|in|in|that|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|in|i",
        "num_ids": 2009
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all adverbs in sentence\n    adverbs = find_adverb_in_text(text)\n    # if there are adverbs, find the position\n    if len(adverbs)!= 0:\n        # get the first adverb\n        first_adverb = adverbs[0]\n        # create a substring with the first adverb\n        substring = first_adverb.replace('a','')\n        # find all positions in the substring\n        position_list = re.finditer('[^a-zA-z]+', substring)\n        # for each position, get the position\n        for pos in position_list:\n            # get the position number and the position letter\n            position = pos.start()\n            position_letter = pos.group()\n            # get the position letter\n            position_letter = position_letter.replace('a','')\n            # get the position letter\n            position_letter = position_letter.replace('z','')\n            # get the position letter\n            position_letter = position_letter.replace('x','')\n            # get the position letter\n            position_letter = position_letter.replace('c','')\n            # get the position letter\n            position_letter = position_letter.replace('b','')\n            # get the position letter\n            position_letter = position_letter.replace('n','')\n            # get the position letter\n            position_letter = position_letter.replace('d','')\n            # get the position letter\n            position_letter = position_letter.replace('m','')\n            # get the position letter\n            position_letter = position_letter.replace('y','')\n            # get the position letter\n            position_letter = position_letter.replace('k','')\n            # get the position letter\n            position_letter = position_letter.replace('j','')\n            # get the position letter\n            position_letter = position_letter.replace('j','')\n            # get the position letter\n            position_letter = position_letter.replace('l','')\n            # get the position letter\n            position_letter = position_letter.replace('n','')\n            # get the position letter\n            position_letter = position_letter.replace('o','')\n            # get the position letter\n            position_letter = position_letter.replace('o','')\n            # get the position letter\n            position_letter = position_letter.replace('r','')\n            # get the position letter\n            position_letter = position_letter.replace('k','')\n            # get the position letter\n            position_letter = position_letter.replace('k','')\n            # get the position letter\n            position_letter = position_letter.replace('i','')\n            # get the position letter\n            position_letter = position_letter.replace('n','')\n            # get the position letter\n            position_letter = position_letter.replace('m','')\n            # get the position letter\n            position_letter = position_letter.replace('i','')\n            # get the position letter\n            position_letter = position_letter.replace('a','')\n            # get the position letter\n            position_letter = position_letter.replace('m','')\n            # get the position letter\n            position_letter = position_letter.replace('l','')\n            # get the position letter\n            position_letter = position_letter.replace('u','')\n            # get the position letter\n            position_letter = position_letter.replace('s','')\n            # get the position letter\n            position_letter = position_letter.replace('k','')\n            # get the position letter\n            position_letter = position_letter.replace('j','')\n            # get the position letter\n            position_letter = position_letter.replace('s','')\n            # get the position letter\n            position_letter = position_letter.replace('f','')\n            # get the position letter\n            position_letter = position_letter.replace('f','')\n            # get the position letter\n            position_letter = position_letter.replace('y','')\n            # get the position letter\n            position_letter = position_letter.replace('y','')\n            # get the position letter\n            position_letter = position_letter.replace('i','')\n            # get the position letter\n            position_letter = position_letter.replace('d','')\n            # get the position letter\n            position_letter = position_letter.replace('a','')\n            # get the position letter\n            position_letter = position_letter.replace('j','')\n            # get the position letter\n            position_letter = position_letter.replace('n','')\n            # get the position letter\n            position_letter = position_letter.replace('j','')\n            # get the position letter\n            position_letter = position_letter.replace('k','')\n            # get the position letter\n            position_letter = position_letter.replace('j','')\n            # get the position letter\n            position_letter = position_letter.replace('n','')\n            # get the position letter\n            position_letter = position_letter.replace('z','')\n            # get the position letter\n            position_letter = position_letter.replace('k','')\n            # get the position letter\n            position_letter = position_letter.replace('y','')\n            # get the position letter\n            position_letter = position_letter.replace('z','')\n            # get the position letter\n            position_letter = position_letter.replace('l','')\n            # get the position letter\n            position_letter = position_letter.replace('s','')\n            # get the position letter\n            position_letter = position_letter.replace('u','')\n            # get the position letter\n            position_letter = position_letter.replace('s','')\n            # get the position letter\n            position_letter = position_letter.replace('f','')\n            # get the position letter\n            position_letter = position_letter.replace('u','')\n            # get the position letter\n            position_letter = position_letter.replace('s','')\n            # get the position letter\n            position_letter = position_letter.replace('m','')\n            # get the position letter\n            position_letter = position_letter.replace('c','')\n            # get the position letter\n            position_letter = position_letter.replace('z','')\n            # get the position letter\n            position_letter = position_letter.replace('j','')\n            # get the position letter\n            position_letter = position_letter.replace('h','')\n            # get the position letter\n            position_letter = position_letter.replace('t','')\n            # get the position letter\n            position_letter = position_letter.replace('z','')\n            # get the position letter\n            position_letter = position_letter.replace('z','')\n            # get the position letter\n            position_letter = position_letter.replace('i','')\n            # get the position letter\n            position_letter = position_letter.replace('f','')\n            # get the position letter\n            position_letter = position_letter.replace('s','')\n            # get the position letter\n            position_letter = position_letter.replace('n','')\n            # get the position letter\n            position_letter = position_letter.replace('g','')\n            # get the position letter\n            position_letter = position_letter.replace('g','')\n            # get the position letter\n            position_letter = position_letter.replace('s','')\n            # get the position letter\n            position_letter = position_letter.replace('j','')\n            # get the position letter\n            position_letter = position_letter.replace('k','')\n            # get the position letter\n            position_letter = position_letter.replace('b','')\n            # get the position letter\n            position_letter = position_letter.replace('z','')\n            # get the position letter\n            position_letter = position_letter.replace('m','')\n            # get the position letter\n            position_letter = position_letter.replace('z','')\n            # get the position letter\n            position_letter = position_letter.replace('y','')\n            # get the position letter\n            position_letter = position_letter.replace('j','')\n            # get the position letter\n            position_letter = position_letter.replace('h','')\n            # get the position letter\n            position_letter ",
        "num_ids": 2009
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return [find_adverb(x) for x in re.findall('(?<=Adverb)->|(?<=Verb)', text)]\n",
        "num_ids": 40
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if '\\n' in text:\n        sentence = text.split('\\n')\n        sentence = [l.strip() for l in sentence]\n    else:\n        sentence = text.lower().split(' ')\n        sentence = [s.strip() for s in sentence]\n",
        "num_ids": 71
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 1/3 * 3 * (3**2) * (np.pi**3) * l**3\n",
        "num_ids": 28
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface = 0\n    for i in range(0, 4):\n        for j in range(0, 4):\n            for k in range(0, 4):\n                surface += l[i][j][k]\n    return surface\n",
        "num_ids": 56
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    from math import pi\n    a = pi * (l**3)\n    print(a)\n    return a\n",
        "num_ids": 29
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    l = int(l)\n    for i in range(1, l+1):\n        area += i*i*1\n    return area\n",
        "num_ids": 41
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 0.5 * l ** 2\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(0, len(l)):\n        s += abs(l[i][0]-l[i][3])**2\n",
        "num_ids": 41
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    from math import sqrt\n",
        "num_ids": 9
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    a = math.pi*l*l\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 4.0 * l * l * l\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\ndef negative_count(nums):\n    '''\n    Write a function that returns the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count\ndef naturalsize(nums):\n    '''\n    This function returns the size of an array as a string\n    '''\n    return str(len(str(nums)))\ndef distinct(nums):\n    '''\n    Returns the number of distinct elements in an array.\n    '''\n    count = 0\n    for i in nums:\n        if i not in nums:\n            count += 1\n    return count\ndef unique(nums):\n    '''\n    Returns the number of unique elements in an array.\n    '''\n    count = 0\n    for i in nums:\n        if i not in nums:\n            count += 1\n    return count\ndef sum_of_squares(nums):\n    '''\n    Returns the sum of squares in an array.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return total\ndef max_of_squares(nums):\n    '''\n    Returns the max of squares in an array.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return total\ndef min_of_squares(nums):\n    '''\n    Returns the min of squares in an array.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return total\ndef mean(nums):\n    '''\n    Returns the mean of a list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total/len(nums)\ndef stdev(nums):\n    '''\n    Returns the standard deviation of a list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return (nums - mean(nums)) / (len(nums)-1)\ndef mode(nums):\n    '''\n    Returns the most common element in an array.\n    '''\n    count = 0\n    maximum = nums[0]\n    for i in nums:\n        if i > maximum:\n            maximum = i\n            count += 1\n    return count\ndef stdev_difference(nums):\n    '''\n    Returns the difference between the standard deviation and the mean.\n    '''\n    total = 0\n    for i in nums:\n        total += i - mean(nums)\n    return total\ndef stdev_difference_squared(nums):\n    '''\n    Returns the squared difference between the standard deviation and the mean.\n    '''\n    total = 0\n    for i in nums:\n        total += i - (i ** 2)\n    return total\ndef sample(nums, number):\n    '''\n    Returns a sample of nums taken from a list.\n    '''\n    return random.sample(nums, number)\ndef random_sample(nums, number):\n    '''\n    Returns a random sample of nums taken from a list.\n    '''\n    return random.choice(nums, number)\ndef median(nums):\n    '''\n    Returns the median of a list of numbers.\n    '''\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2] + nums[length // 2 - 1]) / 2\n    else:\n        return nums[length // 2]\ndef mode_sample(nums):\n    '''\n    Returns a sample of nums taken from a list.\n    '''\n    count = 0\n    maximum = nums[0]\n    for i in nums:\n        if i > maximum:\n            count += 1\n            maximum = i\n    return count\ndef mode_sample_squared(nums):\n    '''\n    Returns a sample of nums taken from a list.\n    '''\n    count = 0\n    maximum = nums[0]\n    for i in nums:\n        if i > maximum:\n            count += 1\n            maximum = i\n    return count\ndef mode_sample_difference(nums):\n    '''\n    Returns a sample of nums taken from a list.\n    '''\n    count = 0\n    maximum = nums[0]\n    for i in nums:\n        if i > maximum:\n            count += 1\n            maximum = i\n    return count\ndef mod_of_squares(nums):\n    '''\n    Returns the mod of squares in an array.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return total\ndef mod_of_squares_squared(nums):\n    '''\n    Returns the mod of squares in an array.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return total\ndef mod_of_squares_difference(nums):\n    '''\n    Returns the mod of squares in an array.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return total\ndef mod_of_squares_difference_squared(nums):\n    '''\n    Returns the mod of squares in an array.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return total\ndef sum_of_squares_difference(nums):\n    '''\n    Returns the sum of squares in an array.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return total\ndef mean_of_squares_difference(nums):\n    '''\n    Returns the mean of squares in an array.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return total\ndef mode_of_squares(nums):\n    '''\n    Returns the mode of squares in an array.\n    '''\n    count = 0\n    maximum = nums[0]\n    for i in nums:\n        if i > maximum:\n            count += 1\n            maximum = i\n    return count\ndef mode_of_squares_squared(nums):\n    '''\n    Returns the mode of squares in an array.\n    '''\n    count = 0\n    maximum = nums[0]\n    for i in nums:\n        if i > maximum:\n            count += 1\n            maximum = i\n    return count\ndef mode_of_squares_difference(nums):\n    '''\n    Returns the mode of squares in an array.\n    '''\n    count = 0\n    maximum = nums[0]\n    for i in nums:\n        if i > maximum:\n            count += 1\n            maximum = i\n    return count\ndef mod_of_squares_difference(nums):\n    '''\n    Returns the mod of squares in an array.\n    '''\n    count = 0\n    maximum = nums[0]\n    for i in nums:\n        if i > maximum:\n            count += 1\n            maximum = i\n    return count\ndef standard_deviation(nums):\n    '''\n    Returns the standard deviation of a list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return (nums - mean(nums)) / (len(nums)-1)\ndef standard_deviation_squared(nums):\n    '''\n    Returns the standard deviation of a list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        total += i * i\n    return (nums - mean(nums)) / (len(nums)-1)\ndef standard_deviation_difference(nums):\n    '''\n    Returns the standard deviation of a list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        total += i - mean(nums)\n    return total\ndef standard_deviation_difference_squared(nums):\n    '''\n    Returns the standard deviation of ",
        "num_ids": 9
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    # initialize the result\n    result = 0\n    \n    # loop through the array\n    for n in nums:\n        if n > 0:\n            result += n / nums[-1]\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums == []:\n        return None\n",
        "num_ids": 14
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i',nums)\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i]>0:\n            count += arr[i]\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    positive_count = []\n    negative_count = []\n    for i in range(n):\n        if nums[i] > 0:\n            positive_count.append(nums[i])\n        else:\n            negative_count.append(nums[i])\n    positive_count.sort()\n    negative_count.sort()\n    if len(positive_count) > len(negative_count):\n        if len(positive_count) == 1:\n            positive_count = negative_count\n        else:\n            positive_count.sort()\n            negative_count.sort()\n            negative_count.remove(positive_count[0])\n            positive_count.remove(negative_count[0])\n    else:\n        if len(negative_count) == 1:\n            negative_count = positive_count\n        else:\n            positive_count.sort()\n            negative_count.sort()\n            negative_count.remove(positive_count[0])\n            positive_count.remove(negative_count[0])\n    return positive_count, negative_count\n    \n",
        "num_ids": 261
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            nums[i] = 1\n        else:\n            nums[i] = 0\n",
        "num_ids": 48
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    answer = []\n    for num in nums:\n        if num>0:\n            answer.append(num)\n    return sum(answer)\ndef negative_count(nums):\n    '''\n    Write a function that calculates the ration of negative numbers in an array of integers.\n    '''\n    answer = []\n    for num in nums:\n        if num<0:\n            answer.append(num)\n    return sum(answer)\ndef average(nums):\n    '''\n    Write a function that calculates the average of an array of numbers.\n    '''\n    answer = 0\n    for num in nums:\n        answer = answer + num\n    answer = answer/len(nums)\n    return answer\ndef sqrt_n(n):\n    '''\n    Write a function that calculates the square root of a number.\n    '''\n    answer = []\n    for i in range(1, n):\n        if i*i == n:\n            answer.append(i)\n    return answer\ndef count_evens(nums):\n    '''\n    Write a function that calculates the number of even numbers in an array of integers.\n    '''\n    answer = 0\n    for num in nums:\n        if num%2 == 0:\n            answer += 1\n    return answer\ndef count_odds(nums):\n    '''\n    Write a function that calculates the number of odds in an array of integers.\n    '''\n    answer = 0\n    for num in nums:\n        if num%2 == 1:\n            answer += 1\n    return answer\ndef sum_lists(nums):\n    '''\n    Write a function that calculates the sum of all the items in an array of numbers.\n    '''\n    answer = 0\n    for num in nums:\n        answer += num\n    return answer\ndef main():\n    nums = array('i',[])\n    while(True):\n        number = input('Enter a number: ')\n        if not number:\n            break\n        nums.append(int(number))\n    print('There are {} items in the array.'.format(len(nums)))\n    nums.sort()\n    print('The sorted array is {}.'.format(nums))\n    print('The average of the numbers is {}.'.format(average(nums)))\n    print('The maximum is {}.'.format(max(nums)))\n    print('The minimum is {}.'.format(min(nums)))\n    print('The size of the array is {}.'.format(len(nums)))\n    print('The sum of the numbers is {}.'.format(sum_lists(nums)))\n    print('The sqrt of the numbers is {}.'.format(sqrt_n(len(nums))))\n    print('The sum of all the even numbers is {}.'.format(count_evens(nums)))\n    print('The sum of all the odds is {}.'.format(count_odds(nums)))\n    print('The sum of all the numbers is {}.'.format(sum_lists(nums)))\n    print('The average of the numbers is {}.'.format(average(nums)))\nif __name__ == '__main__':\n    main(",
        "num_ids": 348
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    sum = 0\n    for num in nums:\n        if num > 0:\n            sum += num\n            count += 1\n    if sum > 0:\n        return int(sum/count)\n    else:\n        return 0\n",
        "num_ids": 61
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for i in nums:\n        if i > 0:\n            total += i\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    def positive(nums, start, end):\n        if start == end:\n            nums[start] = nums[start] / nums[start]\n            return nums\n        else:\n            nums[start] = nums[start] / nums[end]\n            nums[end] = nums[start]\n            return positive(nums, start + 1, end - 1)\n    \n    print(positive(nums, 0, len(nums) - 1))\n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    def negative(nums, start, end):\n        if start == end:\n            nums[start] = nums[start] * -1\n            return nums\n        else:\n            nums[start] = nums[start] * -1\n            nums[end] = nums[start]\n            return negative(nums, start + 1, end - 1)\n    print(negative(nums, 0, len(nums) - 1))\n    \ndef mean(nums):\n    '''\n    Write a function to find the mean of a list of numbers.\n    '''\n    nums.sort()\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return total / len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    i = len(list1) -1 \n    while(list1[i] < 0):\n        i -= 1\n    list1[i] = -list1[i]\n    print(list1[i])\n    return \n",
        "num_ids": 60
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -9999\n    for num in list1:\n        if num < 0:\n            if num < 0:\n                if num > max_num:\n                    max_num = num\n    return max_num\n",
        "num_ids": 54
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n",
        "num_ids": 10
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n    \ndef smallest_pos(list1): \n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    return min(list1)\n    \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    return max(list1)\n    \ndef average(list1): \n    '''\n    Write a python function to calculate the average of a given list.\n    '''\n    sum = 0\n    for item in list1: \n        sum = sum + item\n    return sum/len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for num in list1:\n        if num < 0:\n            max_neg += num\n    return max_neg\n",
        "num_ids": 37
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = sorted(list1,reverse=True)\n    return list2[-1]\n",
        "num_ids": 25
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1)==0:\n        return None\n    if len(list1)==1:\n        return -list1[0]\n    max_num=list1[0]\n    for i in range(len(list1)):\n        if list1[i]>max_num:\n            max_num=list1[i]\n    return max_num\n",
        "num_ids": 91
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg=0\n    for i in list1:\n        if i<0:\n            neg=i\n            break\n    return neg\n",
        "num_ids": 34
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest=0\n    for i in range(len(list1)):\n        if list1[i]<0:\n            list1[i]=0\n            if largest<list1[i]:\n                largest=list1[i]\n    return largest\n",
        "num_ids": 62
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg=0\n    for i in range(len(list1)):\n        if list1[i]<0:\n            temp=list1[i]\n            list1[i]=0\n            max_neg+=temp\n    return max_neg\n",
        "num_ids": 63
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        yield i[:K]\n",
        "num_ids": 20
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_tuple_list = []\n    for item in test_list:\n        trimmed_tuple_list.append(item[:K])\n    return trimmed_tuple_list\n",
        "num_ids": 50
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [x for x in test_list if len(x) > K]\n",
        "num_ids": 21
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_tuple = list()\n    for item in test_list:\n        for i in range(len(item)-K):\n            trimmed_tuple.append(item[i:i+K])\n    return trimmed_tuple\n",
        "num_ids": 61
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    i = 0\n    while i < len(test_list):\n        while i < len(test_list) - 1 and test_list[i + 1][0] < test_list[i][0]:\n            i = i + 1\n        test_list[i] = test_list[i][1:]\n        i = i + 1\n    return test_list\n",
        "num_ids": 88
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        tup = test_list[i]\n        if len(tup) > K:\n            tup = tup[:K]\n        result.append(tup)\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    if len(test_list) % K == 0:\n        return (test_list[:K], test_list[K:])\n    else:\n        return (test_list[:K - 1], test_list[K:])\n",
        "num_ids": 76
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list[1] = test_list[1][:K]\n    return test_list\n",
        "num_ids": 26
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for item in test_list:\n        if len(item)>=K:\n            test_list.remove(item)\n    return test_list\n",
        "num_ids": 38
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(filter(lambda tuple_: len(tuple_) == K, test_list))\n",
        "num_ids": 26
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index1 = 0\n    index2 = 0\n    sum = 0\n    for i in range(len(test_tup1)):\n        sum = sum + test_tup1[i][index1]*test_tup2[index2][index2]\n        index2 += 1\n    return sum\n",
        "num_ids": 75
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    t1 = tuple(test_tup1)\n    t2 = tuple(test_tup2)\n    \n    if len(t1)!= len(t2):\n        return \"The two tuples must have the same length\"\n    \n    index1 = 0\n    index2 = 0\n    \n    for index in range(len(t1)):\n        t1[index] = t1[index] * t2[index2]\n        index2 += 1\n        if index2 >= len(t2):\n            index2 = 0\n    \n    if index2 >= len(t2):\n        index2 = 0\n    \n    return t1\n    \nif __name__ == \"__main__\":\n    print(index_multiplication((1, 2, 3, 4), (2, 3, 4, 5)))",
        "num_ids": 194
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Inputs must be of same length\")\n    else:\n        for x in range(len(test_tup1)):\n            result += test_tup1[x] * test_tup2[x]\n",
        "num_ids": 82
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Write your code here\n    #first parameter should be tuple\n    #second parameter should be tuple\n    # result should be tuple\n    # use dictionary\n",
        "num_ids": 37
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Your code here\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n",
        "num_ids": 36
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"ERROR: Index of tuples must be equal to the number of elements in the two tuples\")\n        return\n    else:\n        index = 0\n        for i in range(len(test_tup1)):\n            print(index, test_tup1[i], test_tup2[i], sep = \"\", end = \" \")\n            index += 1\n",
        "num_ids": 110
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        t1 = tuple(test_tup1)\n        t2 = tuple(test_tup2)\n        #t1 = t1[::-1]\n        t2 = t2[::-1]\n        print(t1, t2)\n        #t1 = t1[::-1]\n        #t2 = t2[::-1]\n        #print(t1, t2)\n        #return tuple(t1), tuple(t2)\n        return t1, t2\n    except Exception as e:\n        print(e)\n",
        "num_ids": 139
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"Test Index Multiplication\")\n    print(\"t1:\", test_tup1)\n    print(\"t2:\", test_tup2)\n    print(\"Operation:\")\n    print(\"1.Index wise multiplication:\")\n    print(\"2.Index wise multiplication:\")\n    print(\"3.Index wise multiplication:\")\n    print(\"\")\n",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = [0] * len(test_tup1)\n    # iterate through each element in the given tuple\n    for index, value in enumerate(test_tup1):\n        # sum the value of the index-th element in the tuple\n        result[index] = value * test_tup2[index]\n    # return the result\n    return result\n",
        "num_ids": 88
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence=0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            occurence=occurence+1\n    return occurence\n",
        "num_ids": 51
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # check if tuple is empty \n    if tup == (): \n        return 0\n    else: \n        # get the length of the tuple \n        if len(tup) == 1: \n            return lst.count(tup[0]) \n        else: \n            # count the occurrence of each element in the tuple \n            return lst.count(tup[0]) + count_Occurrence(tup[1:], lst) \ndef compute_max_occurrence(tup,lst):\n    '''\n    write a python function to find the maximum occurrence of a list of strings.\n    '''\n    # initialize the max occurrence \n    max_occurrence = 0\n    # iterate through each element in the tuple \n    for i in range(len(tup)): \n        # count the occurrence of each element in the tuple \n        # store the result in the variable \n        if lst.count(tup[i]) > max_occurrence: \n            max_occurrence = lst.count(tup[i]) \n    # return the value of the variable \n    return max_occurrence ",
        "num_ids": 122
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            count=count+1\n    return count\n    \ndef main():\n    tup1 = ('male', 'female', 'female','male')\n    lst = ('male', 'female','male', 'female')\n    \n    #count_occurrence(tup1, lst)\n    #print(count_occurrence(tup1, lst))\n",
        "num_ids": 116
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = 0\n    for i in lst:\n        occurence = occurence + (tup.count(i))\n    return occurence\n",
        "num_ids": 41
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        count += lst.count(i)\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    if lst[0] in tup:\n        occurence = tup.count(lst[0])\n        lst.pop(0)\n        count_Occurrence(tup, lst)\n        return occurence + count_Occurrence(tup, lst)\n    else:\n        return 0\n    \n    \ndef reverse_order(tup, key, rev):\n    '''\n    Write a python function to reverse the order of a tuple.\n    '''\n    if rev == False:\n        if key == tup[0]:\n            return tup[1:]\n        if key == tup[-1]:\n            return tup[1:-1]\n    if rev == True:\n        if key == tup[-1]:\n            return tup[1:-1]\n        if key == tup[0]:\n            return tup[1:]\n",
        "num_ids": 94
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_counter = Counter(tup)\n    return sum(tup_counter.values())\n",
        "num_ids": 26
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup).values()\n",
        "num_ids": 12
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # YOUR CODE HERE\n    if not tup:\n        return 0\n",
        "num_ids": 19
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        count = count + 1\n    return count \n",
        "num_ids": 27
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(0, len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n",
        "num_ids": 37
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # base case:\n    if len(nums) == 1:\n        return nums[0]\n    \n    # recursive case:\n    return nums[0]**3 + nums[1]**3 + nums[2]**3",
        "num_ids": 60
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [0] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            cubes[i] += cubes[j] * nums[j]\n    return cubes\n",
        "num_ids": 66
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n",
        "num_ids": 7
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [1, 8, 27, 64, 125, 216, 384, 729, 785, 906, 1720, 1379, 2112, 7335, 9409, 559, 726, 3440, 4309, 1607, 3177, 4156, 7325,\n            7365, 8062, 2353, 6657, 5719, 8335, 5833, 9309, 5389, 8091, 4243, 551, 3225, 954, 535, 683, 707, 5799, 7269,\n            6186, 4139, 8683, 9481, 7231, 4393, 9645, 578, 603, 4163, 7133, 6775, 5818, 5677, 6294, 4893, 8114, 8413,\n            8452, 7775, 7966, 6942, 5617, 6969, 6231, 5151, 5677, 4833, 7318, 6851, 5810, 6465, 5681, 6425, 6916,\n            5632, 5735, 6356, 7323, 5885, 6351, 6619, 7015, 5902, 6047, 5727, 6440, 6923, 5782, 6960, 6587, 6432,\n            6873, 6634, 5680, 6654, 6578, 6651, 6562, 6647, 6469, 5385, 6626, 6723, 6773, 6475, 6683, 5476, 6683,\n            6612, 5718, 6798, 6802, 6804, 6992, 5715, 6435, 6345, 6464, 6400, 6757, 6780, 6689, 6681, 6677, 6907,\n            6546, 6588, 6582, 6588, 6578, 5724, 6536, 6609, 6569, 6619, 6624, 6768, 6622, 6675, 6679, 6683, 6618,\n            6467, 6474, 6523, 6462, 6448, 6445, 6404, 6415, 6373, 6476, 6483, 6475, 6521, 6549, 6488, 6489, 6509,\n            6591, 6570, 6589, 6472, 6479, 6626, 6680, 6710, 6707, 6718, 6726, 6768, 6756, 6702, 6708, 6705, 6739,\n            6761, 6789, 6754, 6792, 6807, 6798, 6809, 6809, 6805, 6791, 6791, 6789, 6796, 6804, 6640, 6592, 6618,\n            6543, 6449, 6445, 6527, 6454, 6457, 6480, 6455, 6451, 6481, 6456, 6458, 6458, 6475, 6484, 6445, 6457,\n            6455, 6444, 6470, 6564, 6461, 6501, 6479, 6560, 6444, 6473, 6614, 6630, 6609, 6619, 6625, 6669, 6639,\n            6642, 6537, 6471, 6481, 6569, 6528, 6511, 6586, 6472, 6483, 6480, 6635, 6544, 6484, 6445, 6457, 6458,\n            6445, 6445, 6547, 6619, 6626, 6670, 6665, 6670, 6686, 6672, 6579, 6673, 6713, 6674, 6679, 6733, 6636,\n            6634, 6640, 6658, 6673, 6673, 6618, 6620, 6623, 6637, 6651, 6666, 6670, 6647, 6673, 6667, 6541, 6651,\n            6670, 6656, 6630, 6630, 6650, 6650, 6647, 6666, 6685, 6618, 6646, 6646, 6647, 6545, 6646, 6648, 6627,\n            6668, 6675, 6665, 6670, 6670, 6670, 6657, 6712, 6765, 6780, 6757, 6668, 6718, 6765, 6715, 6675, 6780,\n            6693, 6717, 6767, 6770, 6779, 6774, 6737, 6756, 6680, 6631, 6643, 6650, 6610, 6650, 6670, 6650, 6670,\n            6660, 6670, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660,\n            6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6",
        "num_ids": 2017
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [1,3,9,27,81,243,729]\n    return sum(nums[i]**3 for i in range(len(nums)))\n",
        "num_ids": 44
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # We're not getting the number of cubes\n    if len(nums) == 1:\n        return nums[0]\n",
        "num_ids": 32
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num*num*num)\n    return cubes\n    \ndef main():\n    input_list = []\n    print(cube_nums(input_list))\n    \nif __name__ == '__main__':\n    main()\n",
        "num_ids": 76
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(nums[i]**3)\n    return cubes\n",
        "num_ids": 40
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_n = 0\n    for i in range(1, n+1): \n        sum_n = sum_n + i \n    return sum_n \n",
        "num_ids": 42
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #print(n)\n    i = 0\n    sum = 0\n    while i < n:\n        sum += i\n        i += 1\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #raise NotImplementedError\n",
        "num_ids": 11
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (n+1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return \"\".join([str[i:i+l] for i in range(0, len(str), l)])\n",
        "num_ids": 31
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) <= l:\n        return None\n    return str[l:len(str)]\n",
        "num_ids": 27
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = l.index(str[0])\n    end = len(str) - 1\n    if start > end:\n        return None\n    else:\n        return str[start + 1:end]\n",
        "num_ids": 50
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[l:] for x in str if x[l:]]\n",
        "num_ids": 20
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n",
        "num_ids": 10
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = \"\"\n    for x in range(len(str)):\n        if str[x] =='':\n            break\n        res += str[x]\n    return res\n    \n    \ndef is_duplicate(str, l):\n    '''\n    Write a function to check if the input string is a duplicate string.\n    '''\n    if len(str)!= len(l):\n        return False\n    for x in range(len(str)):\n        if str[x]!= l[x]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return ''\n    elif len(str) == 1:\n        return str[0]\n    else:\n        str_size = int(len(str)/2)\n        if str_size > len(str):\n            return extract_string(str[:-1], l[:str_size]) + extract_string(str[-1:], l[str_size:])\n        else:\n            return extract_string(str[:-str_size], l[:str_size]) + extract_string(str[-str_size:], l[str_size:])\n",
        "num_ids": 145
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n",
        "num_ids": 10
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = str.split(' ')\n    l = [el.replace(\"'\",\"\").strip() for el in l]\n    return l\n",
        "num_ids": 35
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    index = -1\n    s = ''\n    for i in range(0, len(str)):\n        if str[i] =='':\n            index = i\n            break\n    \n    if index == -1:\n        return -1\n    \n    str = str[:index].strip()\n    str = str[index:].strip()\n    \n    while len(str) > 0:\n        if str[0] =='':\n            s = s +''\n            str = str[1:].strip()\n            index = -1\n        else:\n            index = 0\n            while len(str) > 0:\n                if str[0] =='':\n                    index = index + 1\n                    s = s +''\n                    str = str[index:].strip()\n                    break\n                elif str[0] == '\\t':\n                    index = index + 1\n                    s = s +''\n                    str = str[index:].strip()\n                    break\n                else:\n                    s = s + str[0]\n                    str = str[1:].strip()\n                    break\n        if len(str) == 0:\n            break\n    \n    return s.strip()",
        "num_ids": 277
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    text1 = text1.replace(\"\\t\", \"\")\n    text1 = text1.replace(\"\\r\", \"\")\n    text1 = text1.replace(\"\\n\", \"\")\n    return text1\n",
        "num_ids": 54
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    txt = ''\n    for char in text1:\n        if char.isspace():\n            pass\n        else:\n            txt+=char\n    return txt\n",
        "num_ids": 40
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.sub(\" +\", \" \", text1)\n    return text1.strip()\n",
        "num_ids": 36
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace('\\n', '')\n    text = text.replace('\\t', '')\n    return text\n",
        "num_ids": 33
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    l1 = []\n    for i in range(len(text1)):\n        if text1[i].isspace() == True:\n            pass\n        else:\n            l1.append(text1[i])\n    return ''.join(l1)\n",
        "num_ids": 64
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #text1 = 'Nur 3.31'\n    text1 = text1.replace('  ',' ')\n    text1 = text1.replace('\\t','')\n    text1 = text1.replace('\\n','')\n    text1 = text1.replace('    ',' ')\n    text1 = text1.replace('\\r','')\n    text1 = text1.replace('\\f','')\n    text1 = text1.replace('  ',' ')\n    return text1\n    \ndef is_valid(text1):\n    '''\n    check if string is a valid string.\n    '''\n    #text1 = 'Nur 3.31'\n    #text1 = remove_whitespaces(text1)\n    #text1 = text1.replace('\\t','')\n    #text1 = text1.replace('\\n','')\n    #text1 = text1.replace('    ',' ')\n    #text1 = text1.replace('\\r','')\n    #text1 = text1.replace('\\f','')\n    #print(text1)\n    for ch in '!@#$%^&*()[]{};:<>/?\\\\|`':\n        text1 = text1.replace(ch,'')\n    if not text1:\n        return False\n    if not text1.isalpha():\n        return False\n    if not text1.isalnum():\n        return False\n    if not text1.isupper():\n        return False\n    return True\n",
        "num_ids": 212
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    text1 = text1.replace(\"\\t\",\"\")\n    text1 = text1.replace(\"\\n\",\"\")\n    text1 = text1.replace(\"\\r\",\"\")\n    return text1\n",
        "num_ids": 62
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # 1. We are removing all the whitespaces in the given string\n    text2 = re.sub('\\s+','', text1)\n    \n    # 2. We are also removing all the extra spaces (if there are any)\n    # We do this by replacing the spaces with one backspace\n    text2 = re.sub('\\s+','', text2)\n",
        "num_ids": 87
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\ndef remove_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given string.\n    '''\n    return re.sub(r'[^\\w\\s]',' ',text1)\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove punctuation from the given string.\n    '''\n    return re.sub(r'[^\\w\\s]',' ',text1)\ndef remove_digits(text1):\n    '''\n    Write a function to remove digits from the given string.\n    '''\n    return re.sub(r'[^\\w\\s]',' ',text1)\ndef tokenize(text1):\n    '''\n    Split the given string into tokens.\n    '''\n    return text1.split()\ndef clean_text(text1):\n    '''\n    Write a function to remove special characters from the given string.\n    '''\n    return re.sub(r'[^\\w\\s]',' ',text1).lower()\ndef get_stopwords(text1):\n    '''\n    Write a function to get all stopwords from the given string.\n    '''\n    return text1.split()\ndef get_punctuation(text1):\n    '''\n    Write a function to get punctuation marks from the given string.\n    '''\n    return text1.replace('.','')\ndef lemmatize_text(text1):\n    '''\n    Write a function to lemmatize the given string.\n    '''\n    return text1.split()\n",
        "num_ids": 10
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the given string.\n    text1 = re.sub(' +','', text1)\n    return text1\n",
        "num_ids": 34
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return 0\n    elif sale_amount==actual_cost:\n        return 0\n    else:\n        return sale_amount-actual_cost\n        \ndef main():\n    amount=int(input())\n    total_cost=int(input())\n    total_sales=int(input())\n    actual_cost=int(input())\n    sale_amount=0\n    print(total_sales,amount,sale_amount,total_cost)\n    for i in range(0,total_sales):\n        sale_amount=sale_amount+int(input())\n        sale_amount=sale_amount+sale_amount\n        \n    print(\"Amount:\",sale_amount)\n    print(\"Total:\",sale_amount+amount)\n    print(\"Loss:\",amount-sale_amount)\n    print(\"Amount:\",sale_amount)\n    print(\"Total:\",sale_amount+amount)\n    print(\"Loss:\",amount-sale_amount)\n    print(\"Amount:\",sale_amount)\n    print(\"Total:\",sale_amount+amount)\n    print(\"Loss:\",amount-sale_amount)\n",
        "num_ids": 275
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>0:\n        return actual_cost/sale_amount\n    else:\n        return 0\n",
        "num_ids": 29
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == 0:\n        return actual_cost\n    return actual_cost - sale_amount\n",
        "num_ids": 27
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return 0\n    elif sale_amount < actual_cost: \n        return sale_amount\n    return actual_cost\n",
        "num_ids": 43
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0",
        "num_ids": 26
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    elif sale_amount > actual_cost:\n        return 0.5\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    ",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return sale_amount\n    else:\n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # If the number is 0 or 1, return 1.\n    if n == 0: return 1\n    # We are looking for the factors of n\n    factor = 1\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        # If the factor is divisible by i, then the number is not divisible.\n        if n % i == 0:\n            # Otherwise, the number is divisible by i.\n            # Find the number of times i is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by the number of times the number is divided by th",
        "num_ids": 2010
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    n = n\n    count = 0\n    if n == 0 : \n        return 0 \n    else : \n        for i in range(2,int(math.sqrt(n) + 1)) : \n            if n%i == 0 : \n                if i == n/i : \n                    count = count + i \n                else : \n                    count = count + i*count \n        return count \n",
        "num_ids": 101
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = n\n    while n % 2 == 0:\n        result += n/2\n        n = n/2\n    if n > 1:\n        result += sumofFactors(n-1)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    x = math.floor(math.sqrt(n)) +1\n    if (n % x == 0):\n        return n/x\n    else:\n        return n/x\ndef findElements(lst, x): \n    '''\n    Find all the even numbers in a list and return them as a set \n    '''\n    evens = []\n    for i in lst: \n        if (i % x == 0): \n            evens.append(i) \n    return set(evens)\ndef check(num, index, lst, a, b):\n    '''\n    Check if a number is divisible by b. \n    '''\n    for i in range(index,len(lst)):\n        if (lst[i] % num == 0):\n            if (a < lst[i] < b):\n                return True\n            elif (a < lst[i] < b and lst[i] % num!= 0):\n                return True\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==1 : return 1\n    elif n%2 == 0 : \n        return sumofFactors(n//2) + n\n    else : \n        return (n*sumofFactors(n-1))\n",
        "num_ids": 56
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    while (n!= 0) : \n        if (n % 2 == 0) : \n            s = s + 1\n        n = n // 2\n    return s\n",
        "num_ids": 48
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # e.g. n = 3, return 3 as it is \n    \n    # print(sumofFactors(3))\n    # return 3\n    # because 3 is not a factor \n    \n    # if n == 0 or n==1:\n    #     return 0\n    # elif n%2==0:\n    #     return n \n    # else:\n    #     return n+ sumofFactors(n//2) \n    \n    # log2(2^n)-1\n    \n    # sumofFactors(3) = 1\n    # print(sumofFactors(3))\n",
        "num_ids": 147
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Your code here\n    if n % 2 == 0 : \n        return n \n    else: \n        return (sumofFactors(n//2) + n)\n    \ndef is_prime(n): \n    '''\n    Return True if n is a prime number and False otherwise. \n    '''\n    # Your code here\n    if n < 2 : \n        return False\n    for i in range(2, n): \n        if (n % i) == 0: \n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    factors = []\n    for i in range(2,int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            factors.append(i)\n            if n//i == i:\n                factors.append(n//i)\n    #print(factors)\n    if len(factors) > 0:\n        return sum(factors)\n    else:\n        return 0\n",
        "num_ids": 125
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : return 0\n    if n < 0 : \n        return -sumofFactors(n)\n    else : \n        return math.floor(math.sqrt(n)) + sumofFactors(n//math.pow(10,math.ceil(math.log(n,10))))\n        \ndef squarify(n) : \n    '''\n    Write a python function that prints the factorial of a number n.\n    '''\n    if n == 0 : \n        print(0)\n    elif n < 0 : \n        return -squarify(n)\n    else : \n        print(n, end ='')\n        print(n*squarify(n-1))\n",
        "num_ids": 64
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match_obj = re.match(r'^([\\w\\!\\s])z', text)\n    return match_obj.group(1)\n",
        "num_ids": 38
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern=re.compile('z')\n    if(pattern.search(text)):\n        return True\n    else:\n        return False\n    ",
        "num_ids": 37
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz3(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz4(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz5(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz6(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz7(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz8(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz9(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz10(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz11(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz12(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz13(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz14(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz15(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz16(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz17(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz18(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz19(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz20(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz21(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz22(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz23(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-Za-z0-9]+','', text)\n    if text.lower() in 'zzyq':\n        return 'z'\n    else:\n        return 'z'\ndef text_match_wordz24(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub('[^A-",
        "num_ids": 13
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_match = []\n    text_match.append(text.replace(' ','_'))\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_')\n    text_match.append('_'",
        "num_ids": 2015
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile(\"[a-z]+\")\n    if regex.match(text):\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg_match_z = '^[a-zA-Z0-9_ ]+$'\n    return re.search(reg_match_z, text)\n",
        "num_ids": 42
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('[zZ]', text)\n",
        "num_ids": 16
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matches = []\n    for word in text.split():\n        if word == 'z':\n            matches.append('z')\n        else:\n            matches.append(word)\n    return matches\n",
        "num_ids": 51
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile(r'z')\n    return regex.search(text)\n",
        "num_ids": 25
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #print(text)\n    #print(text.replace(\"z\", \".\"))\n    text = text.replace(\"z\", \".\").lower()\n    words = text.split(' ')\n    print(words)\n    word_list = []\n    for word in words:\n        #print(word)\n        if word.replace(\"z\", \".\") not in word_list:\n            word_list.append(word)\n    print(\"word_list: \", word_list)\n    return word_list\n",
        "num_ids": 121
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0 or monthnum2 >= 12:\n        return False\n    else:\n        return True\n",
        "num_ids": 29
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%10==0 and monthnum2<=12:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        monthnum2=int(monthnum2)\n    except ValueError:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2<0 or monthnum2>12:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==0:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==1:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==2:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==3:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==4:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==5:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==6:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==7:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==8:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==9:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==10:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==11:\n        return \"Invalid input, enter a valid number\"\n    if monthnum2==12:\n        return \"Invalid input, enter a valid number\"\n    return \"Invalid input, enter a valid number\"\n",
        "num_ids": 348
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Please enter a valid month number.\")\n        return False\n    elif monthnum2 > 1 and monthnum2 < 10:\n        print(\"Please enter a valid month number.\")\n        return False\n    elif monthnum2 > 11 and monthnum2 < 21:\n        print(\"Please enter a valid month number.\")\n        return False\n    else:\n        return True\n",
        "num_ids": 102
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 10 == 1 and monthnum2 < 10:\n        print(\"month number is valid\")\n    else:\n        print(\"month number is invalid\")\n    \n    \ndef check_monthnumb_number_v3(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if monthnum2 in months:\n        print(\"month number is valid\")\n    else:\n        print(\"month number is invalid\")\n    \n    \ndef check_monthnumb_number_v4(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in months:\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n    \n    \ndef check_monthnumb_number_v5(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \ndef check_monthnumb_number_v6(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n    \n    \ndef check_monthnumb_number_v7(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \ndef check_monthnumb_number_v8(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n        \n    \ndef check_monthnumb_number_v9(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \ndef check_monthnumb_number_v10(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \ndef check_monthnumb_number_v11(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \n    \ndef check_monthnumb_number_v12(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \n    \ndef check_monthnumb_number_v13(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \n    \ndef check_monthnumb_number_v14(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \n    \ndef check_monthnumb_number_v15(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \n    \ndef check_monthnumb_number_v16(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \n    \ndef check_monthnumb_number_v17(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \n    \ndef check_monthnumb_number_v18(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    for i in range(len(months)):\n        if i == monthnum2:\n            print(\"month number is valid\")\n        else:\n            print(\"month number is invalid\")\n            \n    \n    \n    \ndef check_monthnumb_number_v19(monthnum2):\n    '''\n    Write a function to check whethe",
        "num_ids": 10
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb_list = list(map(int, str(monthnum2)))\n    if len(str(monthnumb_list))==2:\n        if monthnumb_list[0] == 31 or monthnumb_list[1] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12 or monthnum2 < 1:\n        return 'Error: Month number must be between 1 and 12.'\n    elif monthnum2 == 1:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 28:\n            return 'Error: Month number can not be 28.'\n        else:\n            return f'Month number contains 31 days.'\n    elif monthnum2 == 2:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 29 days.'\n    elif monthnum2 == 3:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 30 days.'\n    elif monthnum2 == 4:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 31 days.'\n    elif monthnum2 == 5:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 30 days.'\n    elif monthnum2 == 6:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 31 days.'\n    elif monthnum2 == 7:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 30 days.'\n    elif monthnum2 == 8:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 31 days.'\n    elif monthnum2 == 9:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 30 days.'\n    elif monthnum2 == 10:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 31 days.'\n    elif monthnum2 == 11:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 30 days.'\n    elif monthnum2 == 12:\n        if monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 30:\n            return 'Error: Month number can not be 30.'\n        elif monthnum2 == 31:\n            return 'Error: Month number can not be 31.'\n        elif monthnum2 == 29:\n            return 'Error: Month number can not be 29.'\n        else:\n            return f'Month number contains 31 days.'\n",
        "num_ids": 1815
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    return monthnum2 in range(1,13)\n",
        "num_ids": 17
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i].replace(\" \", \"\")\n        stringlist[i] = stringlist[i].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\").replace(\"!\", \"\").replace(\";\", \"\").replace(\".\", \"\")\n        stringlist[i] = stringlist[i].replace(\" \", \"\")\n    return stringlist\n",
        "num_ids": 110
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate over list\n    for i in range(len(stringlist) - 1, -1, -1):\n        # iterate through index\n        for j in range(0, i + 1):\n            # assign item to string\n            stringlist[j] = stringlist[i]\n            # set string as current index\n            stringlist[i] =''\n    return stringlis",
        "num_ids": 91
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    list_of_string = []\n    for i in range(len(stringlist)):\n        list_of_string.append(stringlist[i])\n    print(list_of_string)\n    return list_of_string\n    \n",
        "num_ids": 59
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n",
        "num_ids": 14
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n",
        "num_ids": 9
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    revlist = []\n    for i in range(len(stringlist)):\n        revlist.append(stringlist[i][::-1])\n    return revlist\n",
        "num_ids": 42
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n",
        "num_ids": 9
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 1:\n        return stringlist\n    else:\n        stringlist[1] = stringlist[1][::-1]\n        return reverse_string_list(stringlist)\n    \ndef string_search(stringlist, needle):\n    '''\n    Write a function that returns the index position of a needle in a given list of strings.\n    '''\n    for i in range(len(stringlist)):\n        if stringlist[i].find(needle)!= -1:\n            return i\n    \ndef read_words(filepath):\n    '''\n    Read a file of words and return as a list of strings.\n    '''\n    result = []\n    with open(filepath, 'r') as file:\n        for line in file:\n            line = line.strip()\n            if len(line) > 0:\n                result.append(line)\n    return result\n    \ndef get_word_frequency(filepath, key):\n    '''\n    Return a dictionary of word frequency for the given file.\n    '''\n    freq = {}\n    with open(filepath, 'r') as file:\n        for line in file:\n            word = line.strip()\n            if word in freq:\n                freq[word] += 1\n            else:\n                freq[word] = 1\n    return freq\n    \ndef filter_words(freq, words):\n    '''\n    Return a list of the words that appeared in a given dictionary.\n    '''\n    filtered_list = []\n    for word in words:\n        if word in freq:\n            filtered_list.append(word)\n    return filtered_list\n    \ndef find_longest_word(words):\n    '''\n    Return the word that appeared in the given dictionary.\n    '''\n    max_len = 0\n    word = ''\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            word = word\n    return word\n    \ndef find_longest_word_frequency(words):\n    '''\n    Return the frequency of the most frequently occurring word.\n    '''\n    result = []\n    for word in words:\n        if word in result:\n            result.remove(word)\n        else:\n            result.append(word)\n    return result\n    \ndef count_longest_word(words):\n    '''\n    Return the number of words that appeared in the given dictionary.\n    '''\n    result = 0\n    for word in words:\n        if word in result:\n            result += 1\n        else:\n            result += 1\n    return result\n    \ndef get_longest_word(words):\n    '''\n    Return the word that appeared the most frequently in the given dictionary.\n    '''\n    max_len = 0\n    word = ''\n    for word in words:\n        if word in result:\n            if max_len < len(word):\n                max_len = len(word)\n                word = word\n        else:\n            result.append(word)\n    return word\n    \ndef get_longest_word_frequency(words):\n    '''\n    Return the frequency of the longest word in the given dictionary.\n    '''\n    result = 0\n    for word in words:\n        if word in result:\n            if result > max_len:\n                max_len = result\n                word = word\n        else:\n            result += 1\n    return max_len\n    \ndef shortest_string_length(stringlist):\n    '''\n    Return the shortest string length in the given list of strings.\n    '''\n    result = 0\n    for string in stringlist:\n        if len(string) < result:\n            result = len(string)\n    return result\n    \ndef add_to_string_list(stringlist, word):\n    '''\n    Add the given word to a list of strings.\n    '''\n    for string in stringlist:\n        if string.find(word)!= -1:\n            stringlist.remove(string)\n            stringlist.append(string + word)\n            return\n    \ndef remove_from_string_list(stringlist, word):\n    '''\n    Remove the given word from a list of strings.\n    '''\n    for string in stringlist:\n        if string.find(word)!= -1:\n            stringlist.remove(string)\n            return\n    \ndef count_unique_words(stringlist):\n    '''\n    Return the number of unique words in the given list of strings.\n    '''\n    result = 0\n    for word in stringlist:\n        if word not in result:\n            result += 1\n    return result\n    \ndef words_with_longest_len(stringlist):\n    '''\n    Return the words with the longest length in the given list of strings.\n    '''\n    result = []\n    for string in stringlist:\n        if len(string) > result[-1]:\n            result[-1] = len(string)\n        else:\n            result.append(string)\n    return result\n    \ndef remove_short_words(stringlist):\n    '''\n    Return a list of words with shorter lengths.\n    '''\n    result = []\n    for string in stringlist:\n        if len(string) < 6:\n            result.append(string)\n    return result\n    \ndef remove_short_words_frequency(stringlist):\n    '''\n    Return a dictionary of word frequency for the given list of strings.\n    '''\n    result = {}\n    for string in stringlist:\n        if string in result:\n            result[string] += 1\n        else:\n            result[string] = 1\n    return result\n    \ndef remove_duplicates(stringlist):\n    '''\n    Return a list of strings with only unique words.\n    '''\n    result = []\n    for string in stringlist:\n        if string not in result:\n            result.append(string)\n    return result\n    \ndef remove_duplicates_frequency(stringlist):\n    '''\n    Return a dictionary of word frequency for the given list of strings.\n    '''\n    result = {}\n    for string in stringlist:\n        if string not in result:\n            result[string] = 1\n        else:\n            result[string] += 1\n    return result\n    \ndef remove_common_words(stringlist):\n    '''\n    Return a list of common words that appeared in a given dictionary.\n    '''\n    result = []\n    for word in stringlist:\n        if word in result:\n            result.remove(word)\n        else:\n            result.append(word)\n    return result\n    \ndef remove_common_words_frequency(stringlist):\n    '''\n    Return a dictionary of word frequency for the given list of strings.\n    '''\n    result = {}\n    for word in stringlist:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n    \ndef get_shortest_word(stringlist):\n    '''\n    Return the word with the shortest length in the given list of strings.\n    '''\n    shortest_len = 0\n    word = ''\n    for string in stringlist:\n        if len(string) < shortest_len:\n            shortest_len = len(string)\n            word = string\n    return word\n    \ndef get_shortest_word_frequency(stringlist):\n    '''\n    Return the frequency of the shortest word in the given list of strings.\n    '''\n    shortest_len = 0\n    word = ''\n    for string in stringlist:\n        if len(string) < shortest_len:\n            shortest_len = len(string)\n            word = string\n    return word\n    \ndef count_common_words(stringlist):\n    '''\n    Return the number of words that appeared in a given dictionary.\n    '''\n    result = 0\n    for word in stringlist:\n        if word in result:\n            result += 1\n        else:\n            result += 1\n    return result\n    \ndef count_common_words_frequency(stringlist):\n    '''\n    Return a dictionary of word frequency for the given list of strings.\n    '''\n    result = {}\n    for word in stringlist:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n    \ndef count_longes",
        "num_ids": 53
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Initialize a variable to return\n    stringlist_rev = []\n    \n    # Initialize a pointer\n    pos = 0\n    \n    # Loop through each element\n    while pos < len(stringlist):\n        # Set the index of the element\n        index = len(stringlist) - 1 - pos\n        \n        # Set the string value\n        stringlist_rev.append(stringlist[index])\n        \n        # Increment the index\n        pos += 1\n        \n    # Return the result\n    return stringlist_rev\n",
        "num_ids": 126
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return []\n    result = []\n    for i in range(len(stringlist)):\n        result.append(stringlist[i][::-1])\n    return result\n    \n",
        "num_ids": 56
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0: \n        return []\n    \n    min_idx = 0\n    lst_min = []\n    \n    for i in range(len(lst)):\n        if lst[i] < lst[min_idx]:\n            min_idx = i\n            lst_min.append(lst[i])\n    return lst_min\n    \n    \n    # code here\n",
        "num_ids": 106
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    temp=[]\n    for x in lst:\n        temp.append(x)\n    print(temp)\n    temp.sort()\n    print(temp)\n    print(temp[0])\n",
        "num_ids": 49
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    for i in range(0, l-1):\n        for j in range(i+1, l):\n            if lst[i] + lst[j] == lst[i] + lst[j]:\n                return [lst[i], lst[j]]\n    \nlst = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 6, 6, 7, 7, 7]\nprint(Find_Min(lst))",
        "num_ids": 125
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0]\n    min_index = 0\n    for i in range(1,len(lst)):\n        if lst[i] < min_length:\n            min_length = lst[i]\n            min_index = i\n    return min_length, min_index\n",
        "num_ids": 76
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst == None or len(lst) == 0:\n        return None\n    return min(lst,key=len)\n",
        "num_ids": 34
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_idx = 0\n    min_len = lst[0]\n    for i in range(len(lst)):\n        if min_len > lst[i]:\n            min_len = lst[i]\n            min_idx = i\n    return min_idx\n",
        "num_ids": 72
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Write your code here.\n    min = []\n    n = len(lst)\n    i = 0\n    j = n - 1\n    while i < n:\n        if lst[i] < lst[j]:\n            min.append(lst[i])\n            i += 1\n        else:\n            min.append(lst[j])\n            j -= 1\n    return min",
        "num_ids": 96
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    smallest = lst[0]\n    smallest_index = 0\n    for i in range(1,len(lst)): \n        if lst[i] < smallest: \n            smallest = lst[i] \n            smallest_index = i \n    return smallest_index\n",
        "num_ids": 74
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #Calculate the area\n    area = (l[0]+b[0])*(l[1]+b[1])\n    return area\n    \n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    #Calculate the perimeter\n    perimeter = 2*(l[0]+b[0]) + 2*(l[1]+b[1])\n    return perimeter\n    \n    \ndef rectangle_diagonal(l,b):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    #Calculate the diagonal\n    diagonal = (l[0] + b[0]) * (l[1] + b[1])\n    return diagonal\n    \n    \ndef rectangle_perimeter_diagonal(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    #Calculate the perimeter\n    perimeter = (l[0] + b[0]) * (l[1] + b[1])\n    diagonal = (l[0] + b[0]) * (l[1] + b[1])\n    return perimeter, diagonal\n    \n    \ndef calculate_perimeter_triangle(length, width):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    #Calculate the perimeter\n    perimeter = length*2 + width*2\n    return perimeter\n    \n    \ndef calculate_perimeter_rectangle(height, width):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    #Calculate the perimeter\n    perimeter = (height + width)*2\n    return perimeter\n    \n    \ndef calculate_perimeter_rectangle_2(height, width):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    #Calculate the perimeter\n    perimeter = (((height + width)*2)/2)*3\n    return perimeter\n    \n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    #Calculate the area\n    area = (a*b) + (a*c) + (b*c)\n    return area\n    \n    \ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    #Calculate the perimeter\n    perimeter = (a + b + c) * 2\n    return perimeter\n    \n    \ndef triangle_diagonal(a,b,c):\n    '''\n    Write a function to calculate the diagonal of a triangle.\n    '''\n    #Calculate the diagonal\n    diagonal = (a + b + c) * (a + b + c) / 2\n    return diagonal\n    \n    \ndef triangle_perimeter_diagonal(a,b,c):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    #Calculate the perimeter\n    perimeter = (a + b + c) * (a + b + c) * (a + b + c) / 4\n    diagonal = (a + b + c) * (a + b + c) * (a + b + c) * (a + b + c) / 8\n    return perimeter, diagonal\n    \n    \n    \ndef recursive_function(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    return sum\n    \n    \n    \ndef reduce_recursive_function(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef recursive_function_2(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_2(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_3(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_4(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_5(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_6(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_7(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_8(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_9(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_10(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_11(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \ndef reduce_recursive_function_12(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[1:]:\n        sum += function(i)\n    return sum\n    \n    \n    \n    \ndef reduce_recursive_function_13(function, argument):\n    '''\n    Write a function to find the sum of a recursive function.\n    '''\n    #Calculate the sum\n    sum = function(argument[0])\n    for i in argument[",
        "num_ids": 26
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is\",area)\n",
        "num_ids": 22
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \n    #remove pass and write your code below\n",
        "num_ids": 20
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"Rectangle Area is:\", l*b)\n",
        "num_ids": 16
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # Width and Height of the Rectangle\n    width = l\n    height = b\n    # Calculate the area of the Rectangle\n    area = width*height\n    # Return the area\n    return area\n",
        "num_ids": 50
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for letter in str1:\n        if letter.isupper() is True:\n            str1 = str1.replace(letter, '')\n    return str1\n",
        "num_ids": 40
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if type(str1)!= str:\n        raise TypeError('The input is not string')\n",
        "num_ids": 25
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'(^[A-Z])(\\w+)',r'\\1\\2',str1)\n",
        "num_ids": 33
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('','','''['!.,':;?&%&=|{]}]+'''))\n",
        "num_ids": 3
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # 1: String to remove uppercase from\n    str2=str1.upper()\n    # 2: String to return without uppercase\n    return str2\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    # 1: String to remove digits from\n    str2=str1.replace('0','9')\n    # 2: String to return without digits\n    return str2\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    # 1: String to remove special characters from\n    str2=str1.replace(\"!\",\"1\")\n    # 2: String to return without special characters\n    return str2\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    # 1: String to remove spaces from\n    str2=str1.replace('\\n','')\n    # 2: String to return without spaces\n    return str2\ndef convert_to_int(str1):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    # 1: String to convert to int\n    str3=str1.replace('.','')\n    # 2: String to return int\n    return int(str3)\ndef remove_lst(lst1):\n    '''\n    Write a function to remove a list from a given list.\n    '''\n    # 1: List to remove from\n    str2=lst1[0:len(lst1)]\n    # 2: List to return without value\n    return str2\ndef remove_lst_of_strings(lst1):\n    '''\n    Write a function to remove a list of strings from a given list.\n    '''\n    # 1: List to remove from\n    str2=lst1[0:len(lst1)]\n    # 2: List to return without value\n    return str2\ndef lower_case(str1):\n    '''\n    Write a function to change all lowercase letters in a given string.\n    '''\n    # 1: String to return without lowercase letters\n    str3=str1.lower()\n    # 2: String to return with lowercase letters\n    return str3\ndef reverse_string(str1):\n    '''\n    Write a function to reverse the string.\n    '''\n    # 1: String to return reverse string\n    str4=str1[::-1]\n    # 2: String to return reversed string\n    return str4\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    # 1: String to remove special characters from\n    str5=str1.replace('!','1')\n    # 2: String to return without special characters\n    return str5\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    # 1: String to remove spaces from\n    str6=str1.replace('\\n',' ')\n    # 2: String to return without spaces\n    return str6\ndef is_prime(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    # 1: Number to check\n    num=num+1\n    # 2: Number to return\n    if num==1:\n        return False\n    # 3: Number to check\n    if num==2 or num==3:\n        return True\n    # 4: Number to return\n    for i in range(2,num):\n        if (num%i)==0:\n            return False\n    return True\ndef is_prime_number(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    # 1: Number to check\n    num=num+1\n    # 2: Number to return\n    if num==1:\n        return False\n    # 3: Number to check\n    if num==2 or num==3:\n        return True\n    # 4: Number to return\n    for i in range(2,num):\n        if (num%i)==0:\n            return False\n    return True\ndef remove_brackets(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str6=str1.replace('()','(').replace('[]','[').replace('()[')\n    # 2: String to return without brackets\n    return str6\ndef remove_brackets_2(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str7=str1.replace('()','()').replace('[]','[]').replace('()[')\n    # 2: String to return without brackets\n    return str7\ndef is_prime_number_2(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    # 1: Number to check\n    num=num+1\n    # 2: Number to return\n    if num==1:\n        return False\n    # 3: Number to check\n    if num==2 or num==3:\n        return True\n    # 4: Number to return\n    for i in range(2,num):\n        if (num%i)==0:\n            return False\n    return True\ndef remove_brackets_3(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str8=str1.replace('()','()').replace('[]','[]').replace('()[')\n    # 2: String to return without brackets\n    return str8\ndef remove_brackets_4(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str9=str1.replace('()','()').replace('[]','[]').replace('()[')\n    # 2: String to return without brackets\n    return str9\ndef remove_brackets_5(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str10=str1.replace('()','()').replace('[]','[]').replace('()[')\n    # 2: String to return without brackets\n    return str10\ndef remove_brackets_6(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str11=str1.replace('()','()').replace('[]','[]').replace('()[')\n    # 2: String to return without brackets\n    return str11\ndef remove_brackets_7(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str12=str1.replace('()','()').replace('[]','[]').replace('()[')\n    # 2: String to return without brackets\n    return str12\ndef remove_brackets_8(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str13=str1.replace('()','()').replace('[]','[]').replace('()[')\n    # 2: String to return without brackets\n    return str13\ndef remove_brackets_9(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str14=str1.replace('()','()').replace('[]','[]').replace('()[')\n    # 2: String to return without brackets\n    return str14\ndef remove_brackets_10(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str15=str1.replace('()','()').replace('[]','[]').replace('()[')\n    # 2: String to return without brackets\n    return str15\ndef remove_brackets_11(str1):\n    '''\n    Write a function to remove brackets in a string.\n    '''\n    # 1: String to remove brackets\n    str16=str1.replace('()','()').replace(",
        "num_ids": 26
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str2+=str1[i]\n    return str2\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str2+=str1[i]\n    return str2\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] not in \"!?\":\n            str2+=str1[i]\n    return str2\ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"!()-[]{};':\\\\\" or str1[i] in '\"`' or str1[i] in '$/.':\n            str2+=str1[i]\n    return str2\ndef remove_multiple_special(str1):\n    '''\n    Write a function to remove multiple special characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"!()-[]{};':\\\\\" or str1[i] in '\"`' or str1[i] in '$/.':\n            for j in range(i+1,len(str1)):\n                if str1[j] in \"!()-[]{};':\\\\\" or str1[j] in '\"`' or str1[j] in '$/.':\n                    str2+=str1[j]\n    return str2\ndef remove_number(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"123456789.\":\n            str2+=str1[i]\n    return str2\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"!()-[]{};':\\\\\" or str1[i] in '\"`' or str1[i] in '$/.':\n            for j in range(i+1,len(str1)):\n                if str1[j] in \"!()-[]{};':\\\\\" or str1[j] in '\"`' or str1[j] in '$/.':\n                    str2+=str1[j]\n    return str2\ndef remove_number_space(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"123456789.\":\n            str2+=str1[i]\n    return str2\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"123456789.\":\n            str2+=str1[i]\n    return str2\ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"!()-[]{};':\\\\\" or str1[i] in '\"`' or str1[i] in '$/.':\n            for j in range(i+1,len(str1)):\n                if str1[j] in \"!()-[]{};':\\\\\" or str1[j] in '\"`' or str1[j] in '$/.':\n                    str2+=str1[j]\n    return str2\ndef remove_multiple_special(str1):\n    '''\n    Write a function to remove multiple special characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"!()-[]{};':\\\\\" or str1[i] in '\"`' or str1[i] in '$/.':\n            for j in range(i+1,len(str1)):\n                if str1[j] in \"!()-[]{};':\\\\\" or str1[j] in '\"`' or str1[j] in '$/.':\n                    str2+=str1[j]\n    return str2\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"!()-[]{};':\\\\\" or str1[i] in '\"`' or str1[i] in '$/.':\n            for j in range(i+1,len(str1)):\n                if str1[j] in \"!()-[]{};':\\\\\" or str1[j] in '\"`' or str1[j] in '$/.':\n                    str2+=str1[j]\n    return str2\ndef remove_number_space(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"123456789.\":\n            str2+=str1[i]\n    return str2\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"123456789.\":\n            str2+=str1[i]\n    return str2\ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"!()-[]{};':\\\\\" or str1[i] in '\"`' or str1[i] in '$/.':\n            for j in range(i+1,len(str1)):\n                if str1[j] in \"!()-[]{};':\\\\\" or str1[j] in '\"`' or str1[j] in '$/.':\n                    str2+=str1[j]\n    return str2\ndef remove_multiple_special(str1):\n    '''\n    Write a function to remove multiple special characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"!()-[]{};':\\\\\" or str1[i] in '\"`' or str1[i] in '$/.':\n            for j in range(i+1,len(str1)):\n                if str1[j] in \"!()-[]{};':\\\\\" or str1[j] in '\"`' or str1[j] in '$/.':\n                    str2+=str1[j]\n    return str2\ndef remove_number_space(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in \"123456789.\":\n            str2+=str1[i]\n    return str2\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str",
        "num_ids": 4
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.upper()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def remove_upcase(word):\n        '''\n        Given word, remove all uppercase letters in this word.\n        '''\n        def replace_chars(word):\n            '''\n            Given word, replace all uppercase letters with a single uppercase char\n            '''\n            def replace_all_chars(word):\n                '''\n                Given word, replace all uppercase characters with a single\n                uppercase char.\n                '''\n                def upper_case_char(char):\n                    '''\n                    Given char, replace all uppercase characters with a single\n                    upper case char.\n                    '''\n                    def replace_char(char):\n                        '''\n                        Given char, replace all uppercase characters with a\n                        single lowercase char.\n                        '''\n                        def lower_case_char(char):\n                            '''\n                            Given char, replace all uppercase characters with a\n                            single lowercase char.\n                            '''\n                            def replace_lower_char(char):\n                                '''\n                                Given char, replace all uppercase characters with a\n                                single upper case char.\n                                '''\n                                def replace_upper_char(char):\n                                    '''\n                                    Given char, replace all uppercase characters with a\n                                    single lowercase char.\n                                    '''\n                                    def lower_case_char(char):\n                                        '''\n                                        Given char, replace all uppercase characters with a\n                                        single lowercase char.\n                                        '''\n                                        def replace_lower_char(char):\n                                            '''\n                                            Given char, replace all uppercase characters with a\n                                            single lowercase char.\n                                            '''\n                                            def replace_lower_case_char(char):\n                                                '''\n                                                Given char, replace all uppercase characters with a\n                                                single lowercase char.\n                                                '''\n                                                def lower_case_char(char):\n                                                    '''\n                                                    Given char, replace all uppercase characters with a\n                                                    single lowercase char.\n                                                    '''\n                                                    def lower_case_char(char):\n                                                        '''\n                                                        Given char, replace all uppercase characters with a\n                                                        single lowercase char.\n                                                        '''\n                                                        def replace_lower_case_char(char):\n                                                        '''\n                                                        Given char, replace all uppercase characters with a\n                                                        single lowercase char.\n                                                        '''\n                                                        def lower_case_char(char):\n                                                            '''\n                                                            Given char, replace all uppercase characters with a\n                                                            single lowercase char.\n                                                            '''\n                                                            def lower_case_char(char):\n                                                        '''\n                                                        Given char, replace all uppercase characters with a\n                                                        single lowercase char.\n                                                        '''\n                                                        def replace_lower_case_char(char):\n                                                            '''\n                                                            Given char, replace all uppercase characters with a\n                                                            single lowercase char.\n                                                            '''\n                                                            def lower_case_char(char):\n                                                                '''\n                                                                Given char, replace all uppercase characters with a\n                                                                single lowercase char.\n                                                                '''\n                                                                def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def lower_case_char(char):\n                                                                    '''\n                                                                    Given char, replace all uppercase characters with a\n                                                                    single lowercase char.\n                                                                    '''\n                                                                    def replace_lower_case",
        "num_ids": 11
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('([A-Z])', r' \\1 ', str1)\n",
        "num_ids": 23
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.upper()\n    \ndef remove_first(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[1:]\n    \ndef remove_second(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[2:]\n    \ndef remove_third(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[3:]\n    \ndef remove_fourth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[4:]\n    \ndef remove_fifth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[5:]\n    \ndef remove_sixth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[6:]\n    \ndef remove_seventh(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[7:]\n    \ndef remove_eighth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[8:]\n    \ndef remove_ninth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[9:]\n    \ndef remove_tenth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[10:]\n    \ndef remove_eleventh(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[11:]\n    \ndef remove_eighthtwo(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[12:]\n    \ndef remove_ninthtwo(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[13:]\n    \ndef remove_thirten(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[14:]\n    \ndef remove_twentyninth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[15:]\n    \ndef remove_thirty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[16:]\n    \ndef remove_trifatenth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[17:]\n    \ndef remove_twintwenty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[18:]\n    \ndef remove_twintwenthirty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[19:]\n    \ndef remove_twintthirty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[20:]\n    \ndef remove_thirtytwenty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[21:]\n    \ndef remove_thirtytwenty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[22:]\n    \ndef remove_thirtytwenten(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[23:]\n    \ndef remove_thirtytwentyone(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[24:]\n    \ndef remove_thirtytwentytwentieth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[25:]\n    \ndef remove_thirtytwentiethone(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[26:]\n    \ndef remove_twentytwentieth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[27:]\n    \ndef remove_twentytwentiethe(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[28:]\n    \ndef remove_twentytwentyone(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[29:]\n    \ndef remove_twentytwentythieth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[30:]\n    \ndef remove_twentytwentythiethone(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[31:]\n    \ndef remove_twentythieth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[32:]\n    \ndef remove_thirtenone(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[33:]\n    \ndef remove_thirten(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[34:]\n    \ndef remove_thirtythiethone(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[35:]\n    \ndef remove_thirtythieth(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[36:]\n    \ndef remove_thirtytwentyone(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[37:]\n    \ndef remove_thirtytwenty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[38:]\n    \ndef remove_thirtytwentytwo(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[39:]\n    \ndef remove_thirtytwentythirty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[40:]\n    \ndef remove_thirtytwentythirtyone(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[41:]\n    \ndef remove_thirtytwentythirtytwo(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[42:]\n    \ndef remove_twentytwentythirty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[43:]\n    \ndef remove_twentytwentythirtyone(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[44:]\n    \ndef remove_twentytwentythirtytwo(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[45:]\n    \ndef remove_twentytwentythirty(str1):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return str1[46:]\n    \ndef remove_twentythirtytwent",
        "num_ids": 21
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        return lst[i][0] \n",
        "num_ids": 27
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst.sort(key = len)\n    index_lst = []\n    for index, element in enumerate(lst):\n        if index == 0:\n            index_lst.append(index)\n        else:\n            if element[0]!= element[index]:\n                return lst[index][0]\n    else:\n        return lst[index_lst[0]]\n",
        "num_ids": 96
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst2 = list(filter(None, lst))\n    lst2.sort()\n    return lst2[0]\n",
        "num_ids": 34
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n    # list1 = []\n    # for i in range(len(lst)): \n    #     list1.append(lst[i][0]) \n    # return list1[0] \n",
        "num_ids": 59
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if type(lst)!= list:\n        print('Input must be of type list')\n        return -1\n",
        "num_ids": 29
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = \"\"\n    for i in lst: \n        result = result + str(i[0]) + \" \"\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    index=0\n    for i in lst:\n        print(i[index])\n        index +=1\n        \ndef Main():\n    '''\n    Write a python function to get all the sublist of a certain sublist.\n    '''\n    lst=[[1,2,3],[4,5,6],[7,8,9]]\n    Extract(lst)\n    \nMain()",
        "num_ids": 38
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print(i[0])\n",
        "num_ids": 18
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    n=0\n    for i in lst:\n        if i[0]=='B':\n            n=n+1\n    return(lst[n-1])",
        "num_ids": 43
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # define a function to return the first element of the list\n    def getFirst(lst):\n        # extract the first element of the list\n        first_elem = lst[0][0]\n        # return the first element of the list\n        return first_elem\n",
        "num_ids": 66
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n",
        "num_ids": 9
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    print(count)\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # return str.upper()\n    return str.upper().count('A')",
        "num_ids": 20
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if not str:\n        return 0\n    count=0\n    for char in str:\n        if char.isupper():\n            count+=1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i.isupper():\n            x += 1\n    return x\n    \ndef count_lower(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i.islower():\n            x += 1\n    return x\n    \ndef count_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            x += 1\n    return x\n    \ndef count_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i == \"b\" or i == \"c\" or i == \"d\" or i == \"f\" or i == \"g\" or i == \"h\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i == \"t\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\" or i == \"z\":\n            x += 1\n    return x\n    \ndef num_of_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"):\n            x += 1\n    return x\n    \ndef num_of_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"):\n            x += 1\n    return x\n    \ndef num_of_consonants_vowels(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"):\n            if i == \"A\":\n                x += 1\n            elif i == \"E\":\n                x += 1\n            elif i == \"I\":\n                x += 1\n            elif i == \"O\":\n                x += 1\n            elif i == \"U\":\n                x += 1\n    return x\n    \ndef num_of_consonants_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"E\", \"I\", \"O\", \"U\"):\n            if i == \"A\":\n                x += 1\n            elif i == \"E\":\n                x += 1\n            elif i == \"I\":\n                x += 1\n            elif i == \"O\":\n                x += 1\n            elif i == \"U\":\n                x += 1\n    return x\n    \ndef num_of_vowels_consonants(str):\n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"):\n            if i == \"A\":\n                x += 1\n            elif i == \"E\":\n                x += 1\n            elif i == \"I\":\n                x += 1\n            elif i == \"O\":\n                x += 1\n            elif i == \"U\":\n                x += 1\n    return x\n    \ndef num_of_consonants_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"E\", \"I\", \"O\", \"U\"):\n            if i == \"A\":\n                x += 1\n            elif i == \"E\":\n                x += 1\n            elif i == \"I\":\n                x += 1\n            elif i == \"O\":\n                x += 1\n            elif i == \"U\":\n                x += 1\n    return x\n    \ndef num_of_vowels_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"):\n            if i == \"A\":\n                x += 1\n            elif i == \"E\":\n                x += 1\n            elif i == \"I\":\n                x += 1\n            elif i == \"O\":\n                x += 1\n            elif i == \"U\":\n                x += 1\n    return x\n    \ndef num_of_consonants_vowels(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"E\", \"I\", \"O\", \"U\"):\n            if i == \"A\":\n                x += 1\n            elif i == \"E\":\n                x += 1\n            elif i == \"I\":\n                x += 1\n            elif i == \"O\":\n                x += 1\n            elif i == \"U\":\n                x += 1\n    return x\n    \ndef num_of_consonants_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"E\", \"I\", \"O\", \"U\"):\n            if i == \"A\":\n                x += 1\n            elif i == \"E\":\n                x += 1\n            elif i == \"I\":\n                x += 1\n            elif i == \"O\":\n                x += 1\n            elif i == \"U\":\n                x += 1\n    return x\n    \ndef num_of_consonants_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i in (\"b\", \"c\", \"d\", ",
        "num_ids": 28
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for letter in str:\n        if letter.isupper():\n            upper_count += 1\n    return upper_count\n",
        "num_ids": 37
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    lower = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n        elif i.islower():\n            lower += 1\n    return upper, lower\n",
        "num_ids": 52
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lst=[]\n    for i in str:\n        if i.isupper():\n            lst.append(i)\n    print(f\"Number of uppercase characters in the given string: {len(lst)}\")\n",
        "num_ids": 56
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter=0\n    for char in str:\n        if char.isupper():\n            counter+=1\n    return counter\n",
        "num_ids": 31
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    combo = list(combinations(list1, len(list1)-1))\n    return combo\n",
        "num_ids": 34
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1: return []\n    all_combinations = []\n",
        "num_ids": 19
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    if len(list1) > 1:\n        for i in range(len(list1)):\n            for j in range(i+1,len(list1)):\n                combos.append(list1[i] + list1[j])\n        return combos\n    else:\n        return []\n",
        "num_ids": 79
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(1, len(list1) + 1):\n        comb_list.append(list1[0:i])\n    return comb_list\n",
        "num_ids": 47
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # We are going to define a list of all possible combinations of the elements and check if all possible combinations exist.\n    # If not, then we are going to check if we can include the element in the combinations and\n    # if so, we will add it to the list and append it to the list to return it.\n    # if we cannot get all possible combinations, then we can just return the list.\n    # it is possible to have multiple elements that have same value but not equal,\n    # so we need to check if any of them can't be included in the final list,\n    # if it is, then we would have to include it in the list again\n    # but we won't be able to get all possible combinations with the same value,\n    # so we would have to check all possible combinations with the same value\n    # if all the values can't be included in the list, we return the list.\n    # else, we add it to the list and return it.\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    list1 = set(list1)\n    combinations = []\n    for i in range(len(list1)):\n        for j in combinations_list(list1-set([list1[i]])):\n            combinations.append([list1[i]]+j)\n    return combinations\n",
        "num_ids": 320
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combination_list = []\n    if len(list1) == 1:\n        combination_list.append(list1)\n        return combination_list\n    else:\n        for i in range(len(list1)):\n            for j in combinations_list:\n                new_list = list1[:]\n                new_list.append(j[i])\n                combination_list.append(new_list)\n        return combination_list\n",
        "num_ids": 106
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return combinations(list1, 2)\n",
        "num_ids": 12
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    possible_combinations = []\n    for i in range(1, len(list1)+1):\n        possible_combinations.append(list(str(list1)))\n    return possible_combinations\n",
        "num_ids": 51
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n",
        "num_ids": 8
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    for i in range(len(list1)+1):\n        for j in combinations(list1,i):\n            combos.append(j)\n    return combos\n",
        "num_ids": 47
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    ans = [1 for i in range(len(arr))]\n    arr.reverse()\n",
        "num_ids": 24
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            arr[i], arr[j] = arr[j], arr[i]\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    # print(arr)\n    return arr\n    # print(arr)\n",
        "num_ids": 96
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    \n    # base case\n    if n == 0:\n        return 0\n",
        "num_ids": 28
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # corner case: the array has a single element.\n    if len(arr) == 1:\n        return arr[0]\n    \n    # if the array is already sorted, then return the largest product.\n    if arr[0] < arr[1]:\n        return arr[0]\n    \n    # if it's all the way to the end of the array, then return the largest product.\n    elif arr[-1] < arr[-2]:\n        return arr[-1]\n    \n    # if it's all the way to the start, then return the largest product.\n    elif arr[0] > arr[1]:\n        return arr[1]\n    \n    # if it's all the way to the middle, then return the largest product.\n    elif arr[1] > arr[2]:\n        return arr[2]\n    \n    # if the array is already sorted, then return the largest product.\n    return max(arr[0], max_subarray_product(arr[1:]), max_subarray_product(arr[2:]))\n",
        "num_ids": 249
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # create a max sum array for the subarray\n    max_sum_array = [None for i in range(len(arr))]\n    max_sum_array[0] = arr[0]\n    # start at the index 1\n    for i in range(1, len(arr)):\n        max_sum_array[i] = max(max_sum_array[i-1] * arr[i], arr[i])\n    return max_sum_array\n",
        "num_ids": 111
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    max_subarray = 1\n    max_subarray_index = 0\n    for i in range(1, n):\n        subarray = arr[i]\n        if max_subarray == 1:\n            max_subarray = subarray\n            continue\n        if max_subarray_index < i - 1:\n            max_subarray_index = i - 1\n        if max_subarray < subarray and max_subarray_index + 1 < i:\n            max_subarray = subarray\n            continue\n        if max_subarray < subarray and max_subarray_index + 1 < i and max_subarray_index + 1 < i - 1:\n            max_subarray = subarray\n            continue\n        if max_subarray < subarray and max_subarray_index + 1 < i and max_subarray_index + 1 < i - 1:\n            max_subarray = subarray\n            continue\n    return max_subarray\n",
        "num_ids": 242
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_product = 0\n    arr_max = arr[0]\n    for num in arr:\n        if num > arr_max:\n            arr_max = num\n            max_product = 1\n        else:\n            arr_max = num\n            max_product = num / arr_max\n    return arr_max\n",
        "num_ids": 79
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_l = 1\n    max_r = 1\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n        if sum > 0:\n            max_l = max(max_l,i+1)\n        if sum < 0:\n            max_r = max(max_r, i+1)\n    return max_l,max_r\n",
        "num_ids": 97
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            count += (arr[i] * arr[j])\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_subarray_index = 0\n",
        "num_ids": 23
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    if not all(k in dict for k in range(n)):\n        return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key,value in dict.items():\n        if value!= key:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict = sorted(dict.values())\n    if len(dict)!= n:\n        return False\n    for i in range(n):\n        if i == n-1:\n            return dict[i] == dict[0]\n        elif dict[i]!= dict[i+1]:\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    i = 1\n    while (i < n):\n        if (dict[i] == dict[i-1]):\n            pass\n        else:\n            return False\n        i = i + 1\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        for key in dict.keys():\n            if not(dict[key]==i):\n                return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if not key in n:\n            return False\n        elif dict[key]!= n[key]:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    assert(isinstance(dict, dict)), 'dict is not a dictionary'\n    assert(len(dict)>0), 'dict is empty'\n    for k in dict:\n        if not k in n:\n            print('Error: key not found: '+k)\n            raise Exception(\"key not found\")\n        elif dict[k]!= n[k]:\n            print('Error: value not found: '+k)\n            raise Exception(\"value not found\")\n",
        "num_ids": 111
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    n = 0\n    while n < len(dict):\n        if dict[n]!= dict[n+1]:\n            n = n + 1\n            return False\n    return True\ndef search_dict(dict, key):\n    '''\n    Write a function to find the value in a dictionary.\n    '''\n    n = 0\n    while n < len(dict):\n        if dict[n] == key:\n            return n+1\n        n = n+1\n    return -1\ndef find_key(dict, key):\n    '''\n    Write a function to find the value in a dictionary.\n    '''\n    n = 0\n    while n < len(dict):\n        if dict[n] == key:\n            return n+1\n        n = n+1\n    return -1\ndef merge_dictionary(dict_to_merge, dict_to_add):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    dict_to_merge[0] = dict_to_merge[0] + dict_to_add[0]\n    dict_to_merge[1] = dict_to_merge[1] + dict_to_add[1]\n    return dict_to_merge\n",
        "num_ids": 71
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if dict[key]!= n:\n            return False\n    return True\n    \n",
        "num_ids": 32
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    temp_list = []\n    for x in dict:\n        temp_list.append(x)\n    for x in temp_list:\n        if x not in dict:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if (len(v) == 0):\n            del dict1[k]\n    return dict1\n",
        "num_ids": 38
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if (dict1[i]==''):\n            del dict1[i]\n    return dict1\n",
        "num_ids": 37
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    temp=[]\n    for item in dict1:\n        if len(dict1[item])==0:\n            temp.append(item)\n    temp.append('null')\n    dict1.pop(temp[0])\n    dict1.clear()\n    return dict1\n",
        "num_ids": 67
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) > 0:\n        while(dict1.values() == []):\n            dict1.popitem()\n",
        "num_ids": 33
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == None:\n            del dict1[i]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.pop('')\n    return dict1\n",
        "num_ids": 16
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in range(len(dict1)):\n        if len(dict1[i]) == 0:\n            del dict1[i]\n    return dict1\n    \n",
        "num_ids": 43
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.items():\n        if len(i[1]) == 0:\n            dict1.pop(i)\n    return dict1\n",
        "num_ids": 38
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i,j in dict1.items():\n        if j is None:\n            del dict1[i]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if not v:\n            del dict1[k]\n    return dict1\n",
        "num_ids": 33
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)-1):\n        curr_max = arr[i] * arr[i+1]\n        if max_so_far < curr_max:\n            max_so_far = curr_max\n        max_ending_here += arr[i] * arr[i+1]\n    return max_so_far, max_ending_here\n",
        "num_ids": 110
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # START YOUR SOLUTION\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = arr[i] * max_product\n    # END YOUR SOLUTION\n    return max_product\n    \n    \n    \n    \n    \n    # You can test your function on several inputs, but you may not use all of them.\n    # You only need to use part of the test cases.\n    \n    # === Problem 4\n    #\n    # (5 points)\n    # Complete the function so that it returns the maximum product that exists in the given array.\n    # The product of a non-negative integer is the product of the integers in the array.\n    #\n    # You can assume that all the inputs have an even number of elements.\n    #\n    # Input: arr1, arr2, arr3, arr4, arr5\n    # Output: max_product\n    #\n    # NOTE: If you are not able to use the functions that you have written earlier, then try this function on some of the small\n    # problems to see what it returns.\n    #\n    # You may not use the provided functions and the parameter 'arr1', 'arr2', or 'arr3' any number of times.\n",
        "num_ids": 292
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n",
        "num_ids": 24
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    elif len(arr)==2:\n        return arr[0]*arr[1]\n    else:\n        m1=min(arr[0],arr[1])\n        for i in range(2,len(arr)):\n            m1=max(m1*arr[i],arr[i])\n        return m1\narr=[int(x) for x in input(\"Enter array\").split()]\nprint(\"Maximum product is\",max_product(arr))\n",
        "num_ids": 129
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # create a new array with all products of increasing subsequence arr\n    res = arr[1:len(arr)]\n    \n    # start at second index and take the second number of all the products\n    for i in range(0, len(res)):\n        res[i] *= res[i + 1]\n        \n    return max(res)\n",
        "num_ids": 84
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # the idea of an increasing subsequence is to take two successive elements as a product.\n    # for example, [0,1,3,4,9,16,25,36,49,64]\n    # since if we take [0,1,3,4,9,16,25,36,49,64],\n    # the product of the two is: 2464.\n    # suppose we have [0,1,3,4,9,16,25,36,49,64], we have one greater subsequence [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]\n",
        "num_ids": 244
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if arr == None or len(arr) < 1:\n        return -1\n    if arr[0] > arr[1]:\n        return arr[0] * arr[1]\n    \n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            return arr[i] * arr[i + 1]\n        \n    return arr[-1]\n    \ndef min_product(arr):   \n    '''\n    Write a function to find the minimum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if arr == None or len(arr) < 1:\n        return -1\n    if arr[0] < arr[1]:\n        return arr[0] * arr[1]\n    \n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            return arr[i] * arr[i + 1]\n        \n    return arr[0] * arr[-1]\n    \ndef main():\n    print(\"\\n--Welcome to Merge Sort!---\")\n    print(\"The function accepts an array and returns the maximum product formed by multiplying numbers of increasing subsequences.\")\n    print(\"\\n--Your function should print the maximum product of an increasing subsequence--\")\n    \n    print(\"\\nEnter the array or text file:\")\n    if input() == \"sorted\":\n        arr = []\n        try:\n            file = open(input(), \"r\")\n            for line in file:\n                arr.append(int(line))\n            file.close()\n        except:\n            arr = None\n        if arr == None:\n            arr = [int(x) for x in input().split()]\n        print(max_product(arr))\n    elif input() == \"array\":\n        arr = []\n        try:\n            file = open(input(), \"r\")\n            for line in file:\n                arr.append(int(line))\n            file.close()\n        except:\n            arr = None\n        if arr == None:\n            arr = [int(x) for x in input().split()]\n        print(min_product(arr))\n    else:\n        print(\"\\nPlease enter either'sorted' or 'array'\")\n        \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 419
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Time complexity: O(n^2)\n    # Space Complexity: O(1)\n    i = 1\n    max_product = 1\n    # loop through the list\n    for num in arr:\n        # print the iteration of the number\n        print(i, num)\n        # divide the number by the biggest product\n        # if the result is bigger,\n        # we decrement the number by one\n        if max_product < num / (num * (num - i)):\n            max_product = num / (num * (num - i))\n        # if the result is smaller,\n        # we add one to the product\n        # of the number\n        elif max_product > num / (num * (num - i)):\n            max_product += 1\n        # if the number is not larger,\n        # we increase the index by one\n        else:\n            i += 1\n    return max_product\n",
        "num_ids": 215
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    result = float('-inf')\n    for i in range(1, len(arr)):\n        result = arr[i] if result > arr[i] else max(result, arr[i])\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    addition = 0\n    return addition\n",
        "num_ids": 12
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # define the list of tuples to add to\n    numbers = []\n    for i in range(0, len(test_tup) - 1):\n        numbers.append([test_tup[i], test_tup[i + 1]])\n    return numbers\n",
        "num_ids": 67
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    len_tup = len(test_tup)\n    i = 1\n    j = len_tup - 2\n    result = test_tup[0]\n    while i < len_tup and j >= 0:\n        if test_tup[i] == result:\n            return (test_tup[i], test_tup[j])\n        elif test_tup[j] == result:\n            return (test_tup[i], test_tup[j])\n        else:\n            result = test_tup[i]\n            i += 1\n            j -= 1\n    return (result, None)\n",
        "num_ids": 152
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sorted(test_tup))\n",
        "num_ids": 15
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[j+1] + test_tup[j] for j in range(len(test_tup)-1))\n",
        "num_ids": 38
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Create an empty tuple of size 4\n    temp = []\n    # Find the index of the first element of the tuple\n    i = 0\n    # Iterate through each element of the tuple\n    for j in range(len(test_tup)):\n        # If the element is less than the current element\n        if test_tup[j] < test_tup[i]:\n            # Add the element to the new tuple\n            temp.append(test_tup[j])\n        # If the element is greater than the current element\n        if test_tup[j] > test_tup[i]:\n            # Add the element to the new tuple\n            temp.append(test_tup[i])\n        # If the element is the same as the current element\n        if test_tup[j] == test_tup[i]:\n            # Add the element to the new tuple\n            temp.append(test_tup[j])\n        # Update the index\n        i = j + 1\n    return temp\n",
        "num_ids": 238
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    n_to_two = []\n    for i in range(len(test_tup)-1):\n        for j in range(i+1,len(test_tup)):\n            n_to_two.append(test_tup[i] + test_tup[j])\n    for i in range(len(n_to_two)-1):\n        for j in range(i+1,len(n_to_two)):\n            pairwise_sum += n_to_two[i] + n_to_two[j]\n    return pairwise_sum\n",
        "num_ids": 147
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # Create a copy of the tuple\n    d_tup = list(tup)\n    # Iterate through each element in the tuple\n    for i in range(len(d_tup)):\n        # Check if current element is the first element\n        if d_tup[i]!= d_tup[i-1]:\n            # Check if current element is the last element\n            if d_tup[i] == d_tup[i+1]:\n                # Check if current element is the middle element\n                if d_tup[i] == d_tup[i+2]:\n                    # Return\n                    return d_tup\n    # If none of the elements are the middle elements, return an empty tuple\n    return ()\n",
        "num_ids": 177
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    s = 1\n    for i in range(0, n):\n        s *= arr[i]\n",
        "num_ids": 27
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 0: \n        return 0\n    arr_sum = 0 \n    prod = 1\n    for i in range(len(arr)): \n        arr_sum += arr[i] * prod\n        prod = prod * arr[i] \n    if arr_sum % n!= 0: \n        return find_remainder(arr, n) \n    else: \n        return prod \n  ",
        "num_ids": 106
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product *= arr[i] \n    return product % n\n",
        "num_ids": 36
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    i = n\n    remainder = 0\n    while i > 0:\n        remainder = i % 10\n        i = i//10\n        arr[remainder] = arr[remainder]*10 + arr[remainder]\n",
        "num_ids": 61
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            product = arr[i] * arr[j]\n            if product % n!= 0:\n                return product % n\n",
        "num_ids": 59
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    i = 0\n    product = 1\n    while (i < len(arr)):\n        product *= arr[i]\n        i += 1\n    return product % n\n",
        "num_ids": 43
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    p=1\n    m=1\n    while (p<=n/2):\n        p*=arr[p]\n        m*=arr[m]\n        p+=1\n        m+=1\n    return m\n    \ndef solution(arr):\n    ans=1\n    for i in range(len(arr)):\n        ans*=arr[i]\n    \n    return ans\n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n***\\nDoctests passed.\\n***\\n\")\n    \n    else:\n        print(\"\\n***\\nDoctests failed.\\n***\\n\"",
        "num_ids": 173
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for i in range(1, len(arr)):\n        ans = ans * arr[i]\n    return ans % n\n",
        "num_ids": 37
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    while n > 0:\n        remainder = arr[n] % n\n        arr[n] = arr[n-1]\n        arr[n-1] = remainder\n        n = n - 1\n",
        "num_ids": 51
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 0:\n        raise ZeroDivisionError(\"Division by zero\")\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 42
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    x = 0\n    while x < len(l) - 1:\n        if l[x] == l[x+1]:\n            x += 1\n        else:\n            return False\n    return True\n    \n    \ndef main():\n    # print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    # print(check_Consecutive([1, 1, 2, 2, 3, 3]))\n    print(check_Consecutive([3, 3, 3, 2, 1, 1]))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 151
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    my_list = []\n    for i in l:\n        if i!= '.' and i!= '-' and i!='' and i!= '+':\n            my_list.append(int(i))\n    if len(my_list) > 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 78
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    tot = 0\n    for i in l:\n        if i >= 0:\n            tot += 1\n    if tot % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef check_Vowels(l): \n    '''\n    Write a python function to check whether the given list contains vowels or not.\n    '''\n    tot = 0\n    for i in l:\n        if i.lower() in 'aeiou':\n            tot += 1\n    if tot == 4:\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # get the length of the list \n    # and append the number 0 to it \n    # so we can count the number of consecutive elements in the list \n    l_len = len(l)\n    l.append(0)\n    \n    # initialize the count_consecutive \n    # variable to zero \n    count_consecutive = 0\n    \n    # traverse the list \n    # through it one element at a time \n    for i in range(l_len): \n        \n        # if the current element is greater \n        # than the previous element, \n        # we've found a consecutive number \n        # at this point \n        if l[i] > l[i - 1]: \n            count_consecutive += 1\n            \n    # return the count_consecutive \n    return count_consecutive ",
        "num_ids": 203
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    my_list = [int(i) for i in l]\n    result = 0\n    for i in range(len(my_list) - 1):\n        if my_list[i]!= my_list[i + 1]:\n            result = 1\n            break\n    return result",
        "num_ids": 69
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i]!= l[i+1]:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    if l[0] in l[1:]:\n        return True\n    while(i < len(l)):\n        if l[i] not in l[i+1:]:\n            return False\n        else:\n            i = i+1\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return False\n    num_set = set()\n    for num in l:\n        if num not in num_set:\n            num_set.add(num)\n        else:\n            return False\n    num_set.remove(max(num_set))\n    num_set.remove(min(num_set))\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    #  L = [5, 3, 2, 1, -6, -5, 3, 2, 1] \n    #  returns True if the list is Consecutive, otherwise False \n    #  \n    #  time complexity O(n) where n is the number of items in the list \n    #  space complexity O(n) \n    \n    #  Sol:\n    #  \n    #  end = 0\n    #  for i in range(len(L)): \n    #    if (end == i): \n    #      end = 0\n    #      return True \n    #    else: \n    #      end = i \n    #  return False \n",
        "num_ids": 167
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = False\n    if len(l) < 2: \n        return False \n    else: \n        i = 0 \n        while i < len(l): \n            if l[i]!= l[i + 1]: \n                consecutive = True \n            i += 1\n        return consecutive \n",
        "num_ids": 80
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_tuple = []\n    for ele in test_list1:\n        if ele in test_list2:\n            intersection_tuple.append(ele)\n",
        "num_ids": 43
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize tuple with 1st element as tuple itself\n    test_list_tuple = (test_list1[0],)\n",
        "num_ids": 33
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1)!= len(test_list2):\n        return None\n    tuple_list = []\n    for element1, element2 in zip(test_list1, test_list2):\n        if element1 == element2:\n            tuple_list.append(element1)\n    return tuple(tuple_list)\n",
        "num_ids": 84
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(sorted(set(test_list1).intersection(set(test_list2))))\n",
        "num_ids": 27
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0 or len(test_list2) == 0:\n        return ()\n    \n    result = ()\n    for i in test_list1:\n        if i in test_list2:\n            result = result + i\n    \n    return result\n",
        "num_ids": 69
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(0, len(test_list1)):\n        if test_list1[i] in test_list2:\n            pass\n        else:\n            intersection_list.append(test_list1[i])\n    return intersection_list\n",
        "num_ids": 72
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_tuple = []\n    list1 = test_list1\n    list2 = test_list2\n",
        "num_ids": 29
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # your code goes here\n    # determine tuples without duplicates\n    # use map to convert tuple to list\n    test_list1_list = list(map(tuple,test_list1))\n    test_list2_list = list(map(tuple,test_list2))\n",
        "num_ids": 70
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    ans=str1\n    for i in range(0,len(str1)):\n        if ch == str1[i]:\n            ans=ans[:i]+newch+ans[i+1:]\n    return ans\n",
        "num_ids": 55
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1)>1:\n        for i in range(len(str1)-1,-1,-1):\n            if ch == str1[i]:\n                if i+1 < len(str1):\n                    str1 = str1[:i] + newch + str1[i+1:]\n            else:\n                if i+1 < len(str1):\n                    str1 = str1[:i] + newch + str1[i+1:]\n    return str1\n",
        "num_ids": 118
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    i=0\n    while i<len(str1):\n        if str1[i]==ch:\n            str1=str1.replace(str1[i],'newchar')\n        i=i+1\n    return(str1)\n",
        "num_ids": 61
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1) == 0:\n        return str1\n    if len(str1) == 1:\n        return ch + str1\n    if newch =='':\n        return ch + str1[1:]\n    return ch + str1[:1] + newch + str1[1:]\n",
        "num_ids": 74
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    char_set = set(str1)\n    for i in char_set:\n        if i == ch:\n            str1 = str1.replace(i,newch)\n        else:\n            pass\n    return str1\n",
        "num_ids": 56
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for c in str1:\n        if c!= ch:\n            new_str += newch\n        else:\n            new_str += c\n    return new_str\n",
        "num_ids": 50
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    i,j=0,0\n    while i<len(str1):\n        while j<len(ch):\n            if ch[j]==ch[i]:\n                str1=str1.replace(ch[j],newch)\n                j+=1\n                i+=1\n            else:\n                j+=1\n        i+=1\n    return str1\n",
        "num_ids": 88
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #split the string\n    word1=str1.split()\n    word2=word1[0]\n",
        "num_ids": 28
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict1.copy()\n    sorted_dict.pop('L')\n    sorted_dict.pop('R')\n    sorted_dict.pop('U')\n    sorted_dict.pop('Z')\n    sorted_dict.pop('X')\n    sorted_dict.pop('C')\n    sorted_dict.pop('B')\n    sorted_dict.pop('D')\n    sorted_dict.pop('M')\n    sorted_dict.pop('T')\n    sorted_dict.pop('N')\n    sorted_dict.pop('G')\n    sorted_dict.pop('K')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('J')\n    sorted_dict.pop('W')\n    sorted_dict.pop('V')\n    sorted_dict.pop('M')\n    sorted_dict.pop('T')\n    sorted_dict.pop('N')\n    sorted_dict.pop('F')\n    sorted_dict.pop('I')\n    sorted_dict.pop('O')\n    sorted_dict.pop('L')\n    sorted_dict.pop('Y')\n    sorted_dict.pop('R')\n    sorted_dict.pop('F')\n    sorted_dict.pop('I')\n    sorted_dict.pop('M')\n    sorted_dict.pop('A')\n    sorted_dict.pop('N')\n    sorted_dict.pop('E')\n    sorted_dict.pop('P')\n    sorted_dict.pop('D')\n    sorted_dict.pop('S')\n    sorted_dict.pop('H')\n    sorted_dict.pop('A')\n    sorted_dict.pop('T')\n    sorted_dict.pop('C')\n    sorted_dict.pop('G')\n    sorted_dict.pop('L')\n    sorted_dict.pop('Z')\n    sorted_dict.pop('P')\n    sorted_dict.pop('G')\n    sorted_dict.pop('J')\n    sorted_dict.pop('W')\n    sorted_dict.pop('E')\n    sorted_dict.pop('Y')\n    sorted_dict.pop('F')\n    sorted_dict.pop('D')\n    sorted_dict.pop('S')\n    sorted_dict.pop('K')\n    sorted_dict.pop('X')\n    sorted_dict.pop('U')\n    sorted_dict.pop('R')\n    sorted_dict.pop('H')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('T')\n    sorted_dict.pop('J')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('S')\n    sorted_dict.pop('D')\n    sorted_dict.pop('V')\n    sorted_dict.pop('D')\n    sorted_dict.pop('Y')\n    sorted_dict.pop('C')\n    sorted_dict.pop('S')\n    sorted_dict.pop('H')\n    sorted_dict.pop('G')\n    sorted_dict.pop('W')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('J')\n    sorted_dict.pop('W')\n    sorted_dict.pop('L')\n    sorted_dict.pop('N')\n    sorted_dict.pop('T')\n    sorted_dict.pop('V')\n    sorted_dict.pop('W')\n    sorted_dict.pop('R')\n    sorted_dict.pop('L')\n    sorted_dict.pop('Y')\n    sorted_dict.pop('P')\n    sorted_dict.pop('H')\n    sorted_dict.pop('S')\n    sorted_dict.pop('Z')\n    sorted_dict.pop('X')\n    sorted_dict.pop('T')\n    sorted_dict.pop('N')\n    sorted_dict.pop('M')\n    sorted_dict.pop('H')\n    sorted_dict.pop('W')\n    sorted_dict.pop('D')\n    sorted_dict.pop('Y')\n    sorted_dict.pop('F')\n    sorted_dict.pop('G')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('E')\n    sorted_dict.pop('Z')\n    sorted_dict.pop('C')\n    sorted_dict.pop('K')\n    sorted_dict.pop('X')\n    sorted_dict.pop('I')\n    sorted_dict.pop('R')\n    sorted_dict.pop('Y')\n    sorted_dict.pop('J')\n    sorted_dict.pop('F')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('A')\n    sorted_dict.pop('E')\n    sorted_dict.pop('Z')\n    sorted_dict.pop('X')\n    sorted_dict.pop('A')\n    sorted_dict.pop('I')\n    sorted_dict.pop('F')\n    sorted_dict.pop('A')\n    sorted_dict.pop('R')\n    sorted_dict.pop('K')\n    sorted_dict.pop('X')\n    sorted_dict.pop('Z')\n    sorted_dict.pop('C')\n    sorted_dict.pop('W')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('T')\n    sorted_dict.pop('J')\n    sorted_dict.pop('T')\n    sorted_dict.pop('A')\n    sorted_dict.pop('R')\n    sorted_dict.pop('J')\n    sorted_dict.pop('C')\n    sorted_dict.pop('S')\n    sorted_dict.pop('K')\n    sorted_dict.pop('M')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('L')\n    sorted_dict.pop('N')\n    sorted_dict.pop('C')\n    sorted_dict.pop('R')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('S')\n    sorted_dict.pop('K')\n    sorted_dict.pop('T')\n    sorted_dict.pop('P')\n    sorted_dict.pop('G')\n    sorted_dict.pop('J')\n    sorted_dict.pop('W')\n    sorted_dict.pop('G')\n    sorted_dict.pop('F')\n    sorted_dict.pop('M')\n    sorted_dict.pop('F')\n    sorted_dict.pop('W')\n    sorted_dict.pop('R')\n    sorted_dict.pop('W')\n    sorted_dict.pop('R')\n    sorted_dict.pop('D')\n    sorted_dict.pop('V')\n    sorted_dict.pop('X')\n    sorted_dict.pop('W')\n    sorted_dict.pop('D')\n    sorted_dict.pop('W')\n    sorted_dict.pop('R')\n    sorted_dict.pop('Z')\n    sorted_dict.pop('T')\n    sorted_dict.pop('G')\n    sorted_dict.pop('Z')\n    sorted_dict.pop('P')\n    sorted_dict.pop('N')\n    sorted_dict.pop('M')\n    sorted_dict.pop('J')\n    sorted_dict.pop('A')\n    sorted_dict.pop('E')\n    sorted_dict.pop('Y')\n    sorted_dict.pop('I')\n    sorted_dict.pop('B')\n    sorted_dict.pop('B')\n    sorted_dict.pop('B')\n    sorted_dict.pop('C')\n    sorted_dict.pop('K')\n    sorted_dict.pop('K')\n    sorted_dict.pop('Q')\n    sorted_dict.pop('J')\n    sorted_dict.pop('J')",
        "num_ids": 2015
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # simple O(n)\n    lst=list(dict1.values())\n    lst.sort()\n    dict1.update(zip(lst,lst))\n    return dict1\n",
        "num_ids": 51
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict()\n    for i in dict1:\n        sorted_dict[i] = dict1[i]\n    return sorted_dict\n",
        "num_ids": 40
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # Your code here\n    return dict1\n",
        "num_ids": 15
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # make a copy of the dict\n    dict2 = dict1.copy()\n",
        "num_ids": 23
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp = dict()\n    for key, value in dict1.items():\n        if value in temp.keys():\n            temp[value] += 1\n        else:\n            temp[value] = 1\n    \n    return dict(sorted(temp.items(), key = lambda item: item[1], reverse = True))\n",
        "num_ids": 76
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = {}\n    for k, v in dict1.items():\n        if v in dict2:\n            dict2[v].append(k)\n        else:\n            dict2[v] = [k]\n    return dict2\n",
        "num_ids": 59
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    lst = dict1.items()\n    lst = sorted(lst, key=lambda item: item[1], reverse=True)\n    return lst\n",
        "num_ids": 40
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1=dict1.keys()\n    list1=Counter(list1).values()\n    list1.sort()\n    return list1\n",
        "num_ids": 36
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Check for empty list or None\n    if not nums:\n        raise TypeError(\"The list must contain non-None elements\")\n    \n    if len(nums) == 1:\n        return nums[0]\n    \n    if nums[0] > nums[-1]:\n        return nums[0] + big_sum(nums[1:])\n    else:\n        return nums[-1] + big_sum(nums[:-1])\n",
        "num_ids": 114
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums==[]:\n        return 0\n    lst = sorted(nums)\n    maxval = lst[-1]\n    minval = lst[0]\n    for x in lst:\n        if x<maxval:\n            maxval=x\n        if x>minval:\n            minval=x\n    return maxval+minval\n",
        "num_ids": 89
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    if n == 0:\n        return 0\n    \n    #make a list of largest and smallest elements\n    largest = [nums[i] for i in range(n) if nums[i] > nums[i+1]]\n    smallest = [nums[i] for i in range(n) if nums[i] < nums[i+1]]\n    \n    #returns the sum of the largest and smallest values\n    return sum(nums) - sum(smallest) - sum(largest)\n",
        "num_ids": 132
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    sum = max_value + min_value\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    a = nums.copy()\n    a.sort()\n    x = sum(a[0:len(a)-1])\n    y = sum(a[1:len(a)])\n    return x,y\n",
        "num_ids": 54
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n    \ndef big_sum_rec(nums, start, end):\n    '''\n    Write a python function that takes a list of numbers and returns the largest and smallest \n    value in the list.\n    '''\n    pass\n    \ndef remove_dups(nums):\n    '''\n    Given an unsorted array, return a copy with unique elements of the array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    \n    if sum < 0:\n        print(\"Error: negative sum found\")\n    elif sum > 0:\n        print(\"Sum is positive\")\n    else:\n        print(\"Sum is zero\")\n    \n    return sum\n",
        "num_ids": 73
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0], nums[0]\n    if len(nums) == 2:\n        return nums[1], nums[0]\n    if len(nums) == 3:\n        return max(nums[0], nums[1]), min(nums[0], nums[1])\n    return max(nums[0], nums[1]), min(nums[1], nums[0])\n",
        "num_ids": 115
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([nums[i] for i in range(len(nums)) if i % 2 == 0])\n",
        "num_ids": 29
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_sum = 0\n    small_sum = 0\n    for num in nums:\n        big_sum += num\n    for num in reversed(nums):\n        small_sum += num\n    if big_sum > small_sum:\n        return big_sum\n    else:\n        return small_sum\n    \n",
        "num_ids": 77
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    print(lower_string)\n",
        "num_ids": 20
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n",
        "num_ids": 18
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Your code here\n    lower_string = string.lower()\n    print(lower_string)\n    return lower_string\n",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string == '':\n        return ''\n    elif string.lower() =='':\n        return ''\n    else:\n        return string.lower()\n    \n    \ndef is_digit(string):\n    '''\n    Write a python function to check whether a given string is digits.\n    '''\n    if string == '':\n        return ''\n    elif string.isdigit():\n        return string\n    else:\n        return ''\n    \n    \ndef is_float(string):\n    '''\n    Write a python function to check whether a given string is float.\n    '''\n    if string == '':\n        return ''\n    elif string.isalpha():\n        return string\n    else:\n        return ''\n    \n    \ndef is_letter(string):\n    '''\n    Write a python function to check whether a given string is a letter.\n    '''\n    if string == '':\n        return ''\n    elif string.isalpha():\n        return string\n    else:\n        return ''\n    \n    \ndef is_upper(string):\n    '''\n    Write a python function to check whether a given string is upper case.\n    '''\n    if string == '':\n        return ''\n    elif string.isupper():\n        return string\n    else:\n        return ''\n    \n    \ndef is_special_char(string):\n    '''\n    Write a python function to check whether a given string is special characters.\n    '''\n    if string == '':\n        return ''\n    elif string in special_char:\n        return string\n    else:\n        return ''\n    \n    \ndef is_symbol(string):\n    '''\n    Write a python function to check whether a given string is a symbol.\n    '''\n    if string == '':\n        return ''\n    elif string in special_symbol:\n        return string\n    else:\n        return ''\n    \n    \ndef is_space(string):\n    '''\n    Write a python function to check whether a given string is a space.\n    '''\n    if string == '':\n        return ''\n    elif string =='':\n        return string\n    else:\n        return ''\n    \n    \ndef is_printable(string):\n    '''\n    Write a python function to check whether a given string is printable.\n    '''\n    if string == '':\n        return ''\n    elif string.isalnum():\n        return string\n    else:\n        return ''\n    \n    \ndef is_punctuation(string):\n    '''\n    Write a python function to check whether a given string is punctuation.\n    '''\n    if string == '':\n        return ''\n    elif string in punctuation:\n        return string\n    else:\n        return ''\n    \n    \ndef is_valid(string):\n    '''\n    Write a python function to check whether a given string is valid.\n    '''\n    if string == '':\n        return ''\n    elif string.isalpha():\n        return string\n    elif string.isdigit():\n        return string\n    elif string.isupper():\n        return string\n    elif string.islower():\n        return string\n    elif string.isalpha() or string.isdigit():\n        return string\n    elif string.isupper() or string.isalpha():\n        return string\n    elif string.isupper() or string.islower():\n        return string\n    elif string.isupper() or string.isalpha():\n        return string\n    elif string.isalpha() or string.isupper() or string.islower():\n        return string\n    elif string.isupper() or string.isalpha() or string.islower():\n        return string\n    elif string.islower() or string.isalpha():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.islower():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.islower() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha() or string.isupper():\n        return string\n    elif string.isupper() or string.isalpha(",
        "num_ids": 1326
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str_2=str(str1)\n    str_2=re.sub('[a-zA-Z]','',str_2)\n    return str_2\n",
        "num_ids": 43
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=str1.lower()\n    #print(str2)\n    str3=str(str2)\n    #print(str3)\n    i=0\n    for j in str3:\n        if j=='a':\n            i=i+1\n            str3=str3.replace(str3[i],\"\")\n    #print(str3)\n    return str3\n",
        "num_ids": 95
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # remove non-lower case characters\n    # save results in a dictionary\n    d = {}\n    for char in str1:\n        if char.lower() in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    # build a new string using the above dictionary\n    str2 = \"\"\n    for key in d:\n        str2 += key +'' + str(d[key])\n    return str2\n",
        "num_ids": 106
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\n",
        "num_ids": 26
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    s = re.sub(\"[a-z]\", \"\", str1) # removes all lowercase characters\n    #s = re.sub(\"[A-Z]\", \"\", str1)\n    #s = re.sub(\"[0-9]\", \"\", str1)\n    s = re.sub(\"[A-Z]\", \"\", s) # replaces all lowercase characters with a single space\n    s = re.sub(\"[0-9]\", \"\", s) # replaces all numbers with a single space\n    s = re.sub(\"[-]\", \"\", s) # replaces all -s with a single space\n    s = re.sub(\"[()]\", \"\", s) # replaces all parenthesis with a single space\n    \n    return s\n",
        "num_ids": 179
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in str1.lower():\n        if i not in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            str2 += i\n    return str2\n",
        "num_ids": 112
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    my_str = str1\n    my_list = []\n    for i in range(len(my_str)):\n        if my_str[i].islower():\n            my_list.append(my_str[i])\n    return ''.join(my_list)\n",
        "num_ids": 68
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #create a list of lowercase characters\n    lst = [c.lower() for c in str1]\n    #create a new string with all lowercase characters removed\n    str2 = ''\n    #iterate over the characters list to see if they are lowercase\n    for char in lst:\n        if char.islower():\n            #if the char is lowercase, replace it with its lowercase version\n            str2 += char.lower()\n        else:\n            #if the char is not lowercase, just remove it\n            str2 += char\n    #join the two strings together and return\n    return str2\n",
        "num_ids": 144
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    return str2\n",
        "num_ids": 17
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # write your code here\n    str1 = str1.lower()\n    return str1\n",
        "num_ids": 24
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    def first_Digit_fn(n):\n        \n        if n == 0:\n            return 0\n        else:\n            return int(str(n)[0])\n    \n    def last_Digit(n) :  \n        \n        if n == 0:\n            return 0\n        else:\n            return int(str(n)[len(str(n))-1])\n    \n    def first_Digit_value(n) :\n        \n        return n[0]\n    \n    def last_Digit_value(n) :\n        \n        return n[len(n)-1]\n    \n    if n == 0:\n        return 0\n    else:\n        if n < 10:\n            return n\n        else:\n            return n % 10\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if (n < 10) : return(n)\n    elif n < 100 : return(int(str(n)[0]))\n    else : return(n%10)\n    \nn = int(input(\"Enter a number: \"))\n",
        "num_ids": 61
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    elif n == 3 :\n        return 3\n    elif n == 4 :\n        return 4\n    elif n == 5 :\n        return 5\n    elif n == 6 :\n        return 6\n    elif n == 7 :\n        return 7\n    elif n == 8 :\n        return 8\n    elif n == 9 :\n        return 9\n    elif n == 10 :\n        return 10\n    elif n == 11 :\n        return 11\n    elif n == 12 :\n        return 12\n    elif n == 13 :\n        return 13\n    elif n == 14 :\n        return 14\n    elif n == 15 :\n        return 15\n    elif n == 16 :\n        return 16\n    elif n == 17 :\n        return 17\n    elif n == 18 :\n        return 18\n    elif n == 19 :\n        return 19\n    elif n == 20 :\n        return 20\n    elif n == 21 :\n        return 21\n    elif n == 22 :\n        return 22\n    elif n == 23 :\n        return 23\n    elif n == 24 :\n        return 24\n    elif n == 25 :\n        return 25\n    elif n == 26 :\n        return 26\n    elif n == 27 :\n        return 27\n    elif n == 28 :\n        return 28\n    elif n == 29 :\n        return 29\n    elif n == 30 :\n        return 30\n    elif n == 31 :\n        return 31\n    elif n == 32 :\n        return 32\n    elif n == 33 :\n        return 33\n    elif n == 34 :\n        return 34\n    elif n == 35 :\n        return 35\n    elif n == 36 :\n        return 36\n    elif n == 37 :\n        return 37\n    elif n == 38 :\n        return 38\n    elif n == 39 :\n        return 39\n    elif n == 40 :\n        return 40\n    elif n == 41 :\n        return 41\n    elif n == 42 :\n        return 42\n    elif n == 43 :\n        return 43\n    elif n == 44 :\n        return 44\n    elif n == 45 :\n        return 45\n    elif n == 46 :\n        return 46\n    elif n == 47 :\n        return 47\n    elif n == 48 :\n        return 48\n    elif n == 49 :\n        return 49\n    elif n == 50 :\n        return 50\n    elif n == 51 :\n        return 51\n    elif n == 52 :\n        return 52\n    elif n == 53 :\n        return 53\n    elif n == 54 :\n        return 54\n    elif n == 55 :\n        return 55\n    elif n == 56 :\n        return 56\n    elif n == 57 :\n        return 57\n    elif n == 58 :\n        return 58\n    elif n == 59 :\n        return 59\n    elif n == 60 :\n        return 60\n    elif n == 61 :\n        return 61\n    elif n == 62 :\n        return 62\n    elif n == 63 :\n        return 63\n    elif n == 64 :\n        return 64\n    elif n == 65 :\n        return 65\n    elif n == 66 :\n        return 66\n    elif n == 67 :\n        return 67\n    elif n == 68 :\n        return 68\n    elif n == 69 :\n        return 69\n    elif n == 70 :\n        return 70\n    elif n == 71 :\n        return 71\n    elif n == 72 :\n        return 72\n    elif n == 73 :\n        return 73\n    elif n == 74 :\n        return 74\n    elif n == 75 :\n        return 75\n    elif n == 76 :\n        return 76\n    elif n == 77 :\n        return 77\n    elif n == 78 :\n        return 78\n    elif n == 79 :\n        return 79\n    elif n == 80 :\n        return 80\n    elif n == 81 :\n        return 81\n    elif n == 82 :\n        return 82\n    elif n == 83 :\n        return 83\n    elif n == 84 :\n        return 84\n    elif n == 85 :\n        return 85\n    elif n == 86 :\n        return 86\n    elif n == 87 :\n        return 87\n    elif n == 88 :\n        return 88\n    elif n == 89 :\n        return 89\n    elif n == 90 :\n        return 90\n    elif n == 91 :\n        return 91\n    elif n == 92 :\n        return 92\n    elif n == 93 :\n        return 93\n    elif n == 94 :\n        return 94\n    elif n == 95 :\n        return 95\n    elif n == 96 :\n        return 96\n    elif n == 97 :\n        return 97\n    elif n == 98 :\n        return 98\n    elif n == 99 :\n        return 99\n    elif n == 100 :\n        return 100\n    elif n == 101 :\n        return 101\n    elif n == 102 :\n        return 102\n    elif n == 103 :\n        return 103\n    elif n == 104 :\n        return 104\n    elif n == 105 :\n        return 105\n    elif n == 106 :\n        return 106\n    elif n == 107 :\n        return 107\n    elif n == 108 :\n        return 108\n    elif n == 109 :\n        return 109\n    elif n == 110 :\n        return 110\n    elif n == 111 :\n        return 111\n    elif n == 112 :\n        return 112\n    elif n == 113 :\n        return 113\n    elif n == 114 :\n        return 114\n    elif n == 115 :\n        return 115\n    elif n == 116 :\n        return 116\n    elif n == 117 :\n        return 117\n    elif n == 118 :\n        return 118\n    elif n == 119 :\n        return 119\n    elif n == 120 :\n        return 120\n    elif n == 121 :\n        return 121\n    elif n == 122 :\n        return 122\n    elif n == 123 :\n        return 123\n    elif n == 124 :\n        return 124\n    elif n == 125 :\n        return 125\n    elif n == 126 :\n        return 126\n    elif n == 127 :\n        return 127\n    elif n == 128 :\n        return 128\n    elif n == 129 :\n        return 129\n    elif n == 130 :\n        return 130\n    elif n == 131 :\n        return 131\n    elif n == 132 :\n        return 132\n    elif n == 133 :\n        return 133\n    elif n == 134 :\n        return 134\n    elif n == 135 :\n        return 135\n    elif n == 136 :\n        return 136\n    elif n == 137 :\n        return 137\n    elif n == 138 :\n        return 138\n    elif n == 139 :\n        return 139\n    elif n == 140 :\n        return 140\n    elif n == 141 :\n        return 141\n    elif n == 142 :\n        return 142\n    elif n == 143 :\n        return 143\n    elif n == 144 :\n        return 144\n    elif n == 145 :\n        return 145\n    elif n == 146 :\n        return 146\n    elif n == 147 :\n        return 147\n    elif n == 148 :\n        return 148\n    elif n == 149 :\n        return 149\n    elif n == 150 :\n        return 150\n    elif n == 151 :\n        return 151\n    elif n == 152 :\n        return 152\n    elif n == 153 :\n        return 153\n    elif n == 154 :\n        return 154\n    elif n == 155 :\n        return 155\n    elif n == 156 :\n        return 156\n    elif n == 157 :\n        return 157\n    elif n == 158 :\n        return 158\n    elif n == 159 :\n        return 159\n    elif n == 160 :\n        return 160\n    elif n == 161 :\n        return 161\n    elif n == 162 :\n        return 162\n    elif n == 163 :\n        return 163\n    elif n == 164 :\n        return 164\n    elif n == 165 :\n        return 165\n    elif n == 166 :\n        return 166\n    elif n == 167 :\n        retur",
        "num_ids": 2016
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return int(str(n)[0])\n",
        "num_ids": 28
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 0:\n        n = n//10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[0]\n    else:\n        return str[1]\n    \ndef first_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the first multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[0:len(str)]\n    else:\n        return str[0:len(str)//10]\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[1]\n    else:\n        return str[2]\n    \ndef second_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the second multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[1:len(str)]\n    else:\n        return str[1:len(str)//10]\n    \ndef Third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[2]\n    else:\n        return str[3]\n    \ndef Third_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the third multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[2:len(str)]\n    else:\n        return str[2:len(str)//10]\n    \ndef Fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[3]\n    else:\n        return str[4]\n    \ndef Fourth_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the fourth multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[3:len(str)]\n    else:\n        return str[3:len(str)//10]\n    \ndef Fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[4]\n    else:\n        return str[5]\n    \ndef Fifth_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the fifth multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[5:len(str)]\n    else:\n        return str[5:len(str)//10]\n    \ndef sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[6]\n    else:\n        return str[7]\n    \ndef sixth_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the sixth multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[6:len(str)]\n    else:\n        return str[6:len(str)//10]\n    \ndef seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[7]\n    else:\n        return str[8]\n    \ndef seventh_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the seventh multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[7:len(str)]\n    else:\n        return str[7:len(str)//10]\n    \ndef eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[8]\n    else:\n        return str[9]\n    \ndef eighth_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the eighth multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[8:len(str)]\n    else:\n        return str[8:len(str)//10]\n    \ndef ninth_Digit(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[9]\n    else:\n        return str[10]\n    \ndef ninth_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the ninth multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[10:len(str)]\n    else:\n        return str[10:len(str)//10]\n    \ndef tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[11]\n    else:\n        return str[12]\n    \ndef tenth_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the tenth multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[11:len(str)]\n    else:\n        return str[11:len(str)//10]\n    \ndef eleventh_Digit(n) :  \n    '''\n    Write a python function to find the eleventh digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[12]\n    else:\n        return str[13]\n    \ndef eleventh_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the eleventh multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[12:len(str)]\n    else:\n        return str[12:len(str)//10]\n    \ndef twelfth_Digit(n) :  \n    '''\n    Write a python function to find the twelfth digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[13]\n    else:\n        return str[14]\n    \ndef twelfth_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the twelfth multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[13:len(str)]\n    else:\n        return str[13:len(str)//10]\n    \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[14]\n    else:\n        return str[15]\n    \ndef third_Multiple_Digits(n) :  \n    '''\n    Write a python function to find the third multiple of a given number.\n    '''\n    str = str(n)\n    if(n >= 10):\n        return str[14:len(str)]\n    else:\n        return str[14:len(str)//10]\n    \ndef fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digi",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    dig=[]\n    # print(n)\n    for i in range(len(n)):\n        if n[i]=='0':\n            dig.append(n[i])\n            dig.append(n[i])\n            dig.append(n[i])\n            # print(dig)\n            break\n        # print(dig)\n    return dig[0]\n    # print(f'{n[0]}')\n",
        "num_ids": 104
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n=str(n)\n    result = 0\n    for i in n:\n        result += int(i)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]\n    \n",
        "num_ids": 13
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = [] \n    for i in list: \n        if i%2!=0: \n            odd.append(i) \n    return odd \nprint(Split(list(range(1,100)))) \n",
        "num_ids": 55
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    a=[]\n    for i in list:\n        if i%2==0:\n            a.append(i)\n    return a\n    \n    \n",
        "num_ids": 39
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    num_list = list\n    odd = []\n    \n    for i in range(len(num_list)):\n        if num_list[i] % 2!= 0:\n            odd.append(num_list[i])\n    return odd\n    \n    \n    \ndef ListAdd(list):\n    '''\n    Write a python function which returns a new list with the sum of the elements of a list.\n    '''\n    sum = 0\n    new_list = []\n    for i in list:\n        sum += i\n        new_list.append(sum)\n    return new_list\n    \n    \n    \ndef ListSum(list):\n    '''\n    Write a python function which returns a new list with the sum of the elements of a list.\n    '''\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n    \n    \n    \ndef SumInList(list):\n    '''\n    Write a python function which returns a new list with the sum of the elements of a list.\n    '''\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n    \n    \n    \n    \n    \n    \ndef ListFind(list, num):\n    '''\n    Write a python function which returns a new list with the number of occurrences of the number in the given list.\n    '''\n    \n    counter = 0\n    for i in list:\n        if i == num:\n            counter += 1\n    return counter\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1693
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = [item for item in list if item % 2!= 0]\n    return odd_lst\n",
        "num_ids": 30
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i % 2 == 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in range(len(list)):\n        if list[i]%2==1:\n            odd.append(list[i])\n    return odd\n",
        "num_ids": 45
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    res = []\n    for i in list: \n        if (i%2)!= 0: \n            res.append(i) \n    return res\n",
        "num_ids": 40
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = n*(n+1)*(3*n+5)\n    print(result)\n    \ndifference(5)\n",
        "num_ids": 34
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n**3-n\n",
        "num_ids": 10
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    sum = 0\n    for i in range(0,len(cubes)):\n        sum += cubes[i]\n    difference = sum - n\n    return difference\n",
        "num_ids": 72
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1) :\n        sum_of_cubes += i ** 3\n    return sum_of_cubes - sum_of_cubes\n",
        "num_ids": 54
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # declaring the initial values\n    sum1 = 0\n    sum2 = 0\n    \n    # looping through the range of numbers\n    for i in range(1, n + 1) :\n        \n        # sum of cubes of the numbers\n        sum1 += i ** 3\n        \n    # sum of cubes of the first number\n    sum2 = sum1 ** 3\n",
        "num_ids": 89
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 : return 0\n    if n == 1 : return 1\n    return n*n*n\n",
        "num_ids": 28
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Declare a sum of cubes as a sum of cubes\n    sum_of_cubes = 0\n    # Declare a count as 0\n    count = 0\n    # Declare a temp variable as a variable that will be updated\n    temp = 0\n    # Declare a for loop\n    for i in range(1, n+1):\n        # Update the sum of cubes\n        sum_of_cubes = sum_of_cubes + i**3\n        # Update the count\n        count = count + 1\n        # Update the temp variable\n        temp = i\n        # Update the if condition\n        if count <= n:\n            # Update the if condition\n            if sum_of_cubes < temp:\n                # Update the if condition\n                if sum_of_cubes == temp:\n                    # Update the else condition\n                    pass\n                else:\n                    # Update the else condition\n                    print(sum_of_cubes, \"not equals to \", temp, \"which is less than the sum of cubes\")\n            # If the if condition is not true,\n            else:\n                # Update the else condition\n                pass\n        # If the if condition is true,\n        else:\n            # Update the else condition\n            pass\n    # If the if condition is false,\n    else:\n        # Update the else condition\n        pass\n    # Return the result\n    return sum_of_cubes - temp\n",
        "num_ids": 324
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans += i**3\n    return ans\n",
        "num_ids": 31
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import numpy as np\n    \n    #Initializing\n    n1 = 0\n    n2 = 0\n    for i in range(n):\n        n1 += (i**3)\n        n2 += (i**3)\n        \n    #Converting the sum of cubes into a list\n    cubes = [n1, n2]\n    \n    #Calling the function\n    answer = difference.difference(cubes)\n    \n    #Checking the type of answer\n    answer = answer.replace(\"\\n\", \"\")\n    answer = answer.replace(\" \", \"\")\n    answer = answer.split(\",\")\n    \n    #Checking for duplicates\n    if len(answer) == 2:\n        for i in range(2):\n            if len(answer[i]) > 1:\n                answer[i] = \"1\"\n    if len(answer) > 1:\n        if answer[0] == answer[1]:\n            answer.pop(1)\n    if answer == []:\n        answer = [0, 0]\n        \n    return answer\n",
        "num_ids": 251
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 1 :\n        return 1\n    elif n == 2 :\n        return 1\n    elif n == 3 :\n        return 5\n    elif n == 4 :\n        return 10\n    else :\n        return n * difference(n-1)\n",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    # If N is odd, then odd_count is 1. Else it is 0.\n    if N % 2 == 0 :\n        odd_count += 1\n    else :\n        odd_count = 0\n    # The last row of the matrix is a 1 if the sum of the row is odd.\n    odd_sum = int(N/2)\n    for i in range(1,odd_sum+1) :\n        # if the value of the row is odd then add 1.\n        if N%i == 0 :\n            odd_count += 1\n    # return the number of odd pairs.\n    return odd_count\n",
        "num_ids": 152
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    PairCount = 0\n    for i in range(N-1) :\n        if A[i]!= A[i+1] :\n            PairCount += 1\n    return PairCount\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    PairCount = 0\n    for i in range(N-1) :\n        if A[i]!= A[i+1] :\n            if A[i] % 2 == 0 :\n                PairCount += 1\n    return PairCount\n    \ndef find_Odd_Pair_and_Even_Pair(A,N) : \n    '''\n    Write a python function to find all pairs whose xor value is odd and even.\n    '''\n    PairCount = 0\n    for i in range(N-1) :\n        if A[i]!= A[i+1] :\n            if A[i] % 2 == 0 :\n                if A[i] % 2 == 0 :\n                    PairCount += 1\n    return PairCount\n    \ndef main() : \n    N = 10\n    print(find_Odd_Pair(A,N))\n    print(find_Even_Pair(A,N))\n    print(find_Odd_Pair_and_Even_Pair(A,N))\n",
        "num_ids": 140
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    A.sort()\n    i = N-1\n    if (A[N-1] & (A[N]>>1))  == (A[N] & (A[N+1]>>1)): #  xor of both sides of pair\n        return N-1\n    while i >= 0 :\n        if (A[i]&(A[i+1]>>1)) == ((A[i]&(A[i+1]<<1))<<1): #  xor of left half of pair\n            return i\n        i = i-1\n    return -1\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    \n    A.sort()\n    i = N-1\n    if (A[N-1] & (A[N]>>1))  == (A[N] & (A[N+1]>>1)): #  xor of both sides of pair\n        return N-1\n    while i >= 0 :\n        if (A[i]&(A[i+1]>>1)) == ((A[i]&(A[i+1]<<1))<<1): #  xor of left half of pair\n            return i\n        i = i-1\n    return -1\n    \ndef find_Even_or_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even or odd.\n    '''\n    \n    A.sort()\n    i = N-1\n    if (A[N-1] & (A[N]>>1))  == (A[N] & (A[N+1]>>1)): #  xor of both sides of pair\n        return N-1\n    while i >= 0 :\n        if (A[i]&(A[i+1]>>1)) == ((A[i]&(A[i+1]<<1))<<1): #  xor of left half of pair\n            return i\n        i = i-1\n    return -1\n    \ndef find_Odd_or_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd or even.\n    '''\n    \n    A.sort()\n    i = N-1\n    if (A[N-1] & (A[N]>>1))  == (A[N] & (A[N+1]>>1)): #  xor of both sides of pair\n        return N-1\n    while i >= 0 :\n        if (A[i]&(A[i+1]>>1)) == ((A[i]&(A[i+1]<<1))<<1): #  xor of left half of pair\n            return i\n        i = i-1\n    return -1\n    \ndef main() : \n    '''\n    create 2d array for number of pairs and store pair values in 2d array.\n    '''\n    n = int(input())\n    for i in range(n):\n        pair = [0]*n\n        a = int(input())\n        for j in range(n):\n            pair[j] = a%2\n            a = a//2\n        a = a%2\n        pair_arr = [pair[i:i+2] for i in range(0, len(pair), 2)]\n        print(*pair_arr)\n    \nif __name__ == '__main__' : \n    main()\n",
        "num_ids": 124
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]==A[j] and A[i]&1!= 0:\n                count+=1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = 0\n    for i in range(N) : \n        for j in range(N) :\n            if (A[i][0] & A[j][0] == A[i][0] ^ A[j][0]) :\n                if (A[i][0] & A[j][1] == A[i][0] ^ A[j][1]) :\n                    n = n + 1\n    print(n)\n    \nif __name__ == '__main__': \n    A = [[1,2],[3,4]] \n    B = [[1,2,3],[4,5,6],[7,8,9]] \n    find_Odd_Pair(A,4)\n    find_Odd_Pair(A,4)\n    find_Odd_Pair(B,4)\n    find_Odd_Pair(B,4)\n",
        "num_ids": 213
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    cnt=0\n    for i in range(len(A)) :\n        for j in range(i+1,len(A)) :\n            if A[i] == A[j] :\n                if A[i] == 1 :\n                    cnt+=1\n            else :\n                if A[j] == 1 :\n                    cnt+=1\n    return cnt\n",
        "num_ids": 92
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if (N == 1 or N == 2) :\n        return 1\n",
        "num_ids": 19
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(0,N) : \n        if (A[i] & 0x01)!= 0 : \n            odd += 1\n    return odd\n",
        "num_ids": 46
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A=A.split(\" \")\n    xor_list=[]\n    odd_list=[]\n    for i in range(len(A)):\n        if(A[i]==\"X\" or A[i]==\"O\"):\n            xor_list.append(A[i])\n    for i in range(len(xor_list)):\n        for j in range(i+1,len(xor_list)):\n            if(xor_list[i]==xor_list[j]):\n                odd_list.append(xor_list[i])\n                xor_list.remove(xor_list[i])\n    return len(odd_list)\n",
        "num_ids": 168
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)) :\n        for j in range(i+1,len(A)) :\n            if A[i] ^ A[j] == 0 :\n                if A[i] % 2 == 1 and A[j] % 2 == 0 :\n                    count += 1\n                elif A[i] % 2 == 0 and A[j] % 2 == 1 :\n                    count += 1\n    return count\n",
        "num_ids": 107
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    output = \"\"\n    for letter in string:\n        if letter.isupper():\n            output += \"Q\"\n        else:\n            output += \"A\"\n    return output\n",
        "num_ids": 44
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        if char.islower():\n            char = char.upper()\n        if char.isdigit():\n            char = char.zfill(10)\n        if char == '-':\n            char =''\n        if char == '+':\n            char = '+'\n        if char == '*':\n            char = '*'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':\n            char = '7'\n        if char == '8':\n            char = '8'\n        if char == '9':\n            char = '9'\n        if char == '0':\n            char = '0'\n        if char == '1':\n            char = '1'\n        if char == '2':\n            char = '2'\n        if char == '3':\n            char = '3'\n        if char == '4':\n            char = '4'\n        if char == '5':\n            char = '5'\n        if char == '6':\n            char = '6'\n        if char == '7':",
        "num_ids": 2016
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Write your code here\n    # raise NotImplementedError()\n    return string.lower()\n    # return string.upper()\n",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(c.upper() if c.islower() else c.lower() for c in string)\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    str = list(string)\n    for i in range(len(str)):\n        if str[i].isupper():\n            str[i] = str[i].lower()\n        elif str[i].islower():\n            str[i] = str[i].upper()\n    return ''.join(str)\n",
        "num_ids": 78
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Your code here\n    if string[0] == string[-1]:\n        string = string[::-1]\n        return string\n    else:\n        string = list(string)\n        for char in string:\n            if char == char.lower():\n                string[string.index(char)] = char.upper()\n            elif char == char.upper():\n                string[string.index(char)] = char.lower()\n        return \"\".join(string)\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2017
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for i in string:\n        if string.count(i) > 0:\n            new_string += i\n    return new_string\n",
        "num_ids": 41
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # case ='' * len(string)\n    # for char in string:\n    #     if char.upper() == char.lower():\n    #         case = case[:-1] + '_' + case[-1]\n    #     else:\n    #         case = case[:-1] + '_' + case[-1]\n    #     case ='' * len(case)\n",
        "num_ids": 95
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    count = 0\n    for char in string:\n        if char =='':\n            string = string.replace(' ','')\n        else:\n            count += 1\n    return string.upper() + (count // 2) *''\n",
        "num_ids": 56
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string[0] == string[1] == string[2] == string[3]:\n        return string[4] + string[5] + string[6] + string[7]\n    else:\n        return string[0] + string[1] + string[2] + string[3]\n",
        "num_ids": 72
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = 0\n    # Check if the input are integers\n    if type(n1) is not int:\n        print('Cannot find sum of per-digit difference between non-integers.')\n        return -1\n",
        "num_ids": 53
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digits = [int(d) for d in str(n1)]\n    digits.sort()\n    digits2 = [int(d) for d in str(n2)]\n    digits2.sort()\n    return sum(digits2[i]-digits[i] for i in range(len(digits)))\n    ",
        "num_ids": 81
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n",
        "num_ids": 22
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def nth_digit(n):\n        return (n%10)\n    def digits(n):\n        return int(n)\n    def digits_nums(n):\n        return int(str(n))\n    digit_sum = 0\n    for digit in n1:\n        digit_sum += digits(digit)\n    for digit in n2:\n        digit_sum += digits(digit)\n    return digit_sum-nth_digit(digit_sum)\n",
        "num_ids": 112
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_digits_difference = 0\n    \n    # loop over both numbers (n1, n2)\n    for digit_n1 in range(n1+1):\n        for digit_n2 in range(n2+1):\n            # if both numbers are equal, continue\n            if digit_n1 == digit_n2:\n                sum_of_digits_difference += digit_n1\n                continue\n            # if the sum is over 0, return the sum of the digit differences\n            elif sum_of_digits_difference > 0:\n                sum_of_digits_difference += abs(digit_n1 - digit_n2)\n                continue\n            # otherwise, return the sum of the digit differences\n            else:\n                sum_of_digits_difference += digit_n1 - digit_n2\n                continue\n    \n    return sum_of_digits_difference\n",
        "num_ids": 217
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digits = list(str(n1)) + list(str(n2))\n    sum_ = 0\n    for digit in digits:\n        sum_ += int(digit)\n    return sum_\n    \n",
        "num_ids": 51
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(n1-n2)\n",
        "num_ids": 13
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def digit_sum(n):\n        return sum([int(c) for c in str(n)])\n    return digit_sum(n1) - digit_sum(n2)\n",
        "num_ids": 46
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_distance_nums = n1 - n2\n    return digit_distance_nums\n    \ndef digit_distance_nums_reverse(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return n1 - n2\n    \ndef test_digit_distance_nums():\n    '''\n    Test cases:\n    1. n1 = 4\n    2. n1 = -12\n    3. n1 = 11\n    4. n1 = -12\n    5. n1 = 11\n    6. n1 = -12\n    7. n1 = -11\n    8. n1 = -12\n    9. n1 = 11\n    10. n1 = -12\n    '''\n    assert digit_distance_nums(4,11) == -5\n    assert digit_distance_nums(11, -12) == 5\n    assert digit_distance_nums(10, -11) == 5\n    assert digit_distance_nums(10, -12) == -5\n    assert digit_distance_nums(11, 11) == 5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, -11) == -5\n    assert digit_distance_nums(11, -12) == -5\n    assert digit_distance_nums(10, 10) == 5\n    assert digit_distance_nums(10, -11) == -5\n    assert digit_distance_nums(10, -12) == -5\n    assert digit_distance_nums(10, 11) == 5\n    assert digit_distance_nums(10, 12) == -5\n    assert digit_distance_nums(10, -11) == -5\n    assert digit_distance_nums(10, -12) == -5\n    assert digit_distance_nums(10, 11) == -5\n    assert digit_distance_nums(10, 12) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, -11) == -5\n    assert digit_distance_nums(11, -12) == -5\n    assert digit_distance_nums(10, 10) == -5\n    assert digit_distance_nums(10, -11) == 5\n    assert digit_distance_nums(10, -12) == -5\n    assert digit_distance_nums(10, 11) == 5\n    assert digit_distance_nums(10, 12) == -5\n    assert digit_distance_nums(10, 11) == 5\n    assert digit_distance_nums(10, -11) == -5\n    assert digit_distance_nums(10, -12) == -5\n    assert digit_distance_nums(10, 11) == -5\n    assert digit_distance_nums(10, -12) == -5\n    assert digit_distance_nums(10, 11) == -5\n    assert digit_distance_nums(10, 12) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, -11) == 5\n    assert digit_distance_nums(11, -12) == -5\n    assert digit_distance_nums(11, 11) == 5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, -11) == 5\n    assert digit_distance_nums(11, -12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, -11) == -5\n    assert digit_distance_nums(11, -12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    assert digit_distance_nums(11, 12) == -5\n    assert digit_distance_nums(11, 11) == -5\n    asser",
        "num_ids": 1817
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    if n1 < n2:\n        return digit_distance_nums(n1, n2 - 1)\n    return digit_distance_nums(n1 - 1, n2) + digit_distance_nums(n1, n2 - 1)\n",
        "num_ids": 76
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return sum([max(a[x:x+size]) for x in range(0, len(a), size)])\n",
        "num_ids": 31
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    # Initialize all sublists\n    sublists = [[] for _ in range(size)]\n    \n    # Subsets of the array\n    \n    for i in range(size):\n        for j in range(size-1):\n            if a[i] > a[j+1]:\n                sublists[i].append(a[j+1])\n        sublists[i].append(a[i])\n    \n    # Sum of the sublists\n    max_sum = 0\n    for sublist in sublists:\n        max_sum += sum(sublist)\n    \n    return max_sum\n    \na = [4,2,1,1,3]\nprint(max_sub_array_sum(a, len(a))",
        "num_ids": 177
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(len(a)):\n        max_sum = max(a[i], max_sum)\n",
        "num_ids": 37
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    l = [i for i in range(size)]\n    \n    sub_array_sums = []\n    \n    for i in range(size):\n        if len(l) > 1:\n            j = i\n            while j < size and a[j] < a[j+1]:\n                j = j + 1\n            if j < size:\n                sub_array_sums.append(a[i:j+1])\n        else:\n            sub_array_sums.append(a[i])\n    \n    return max(sub_array_sums)\n",
        "num_ids": 139
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Your code here\n    # write your code here\n    # get the end of the list\n    end = len(a) - 1\n",
        "num_ids": 34
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    i = 0\n    j = 0\n    while(i < size):\n        if (j < size and a[i] <= a[j]):\n            i += 1\n        else:\n            j += 1\n        \n        max_sum = max(max_sum, a[i] + a[j])\n    \n    return max_sum\n",
        "num_ids": 90
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    # counter to store the sum of largest sub-list\n    c = 0\n    \n    # outer loop to traverse the given list\n    for i in range(0, len(a) - size + 1):\n        \n        # inner loop to find the sum of the largest sub-list\n        for j in range(i, i + size):\n            \n            # if the given list is not empty\n            if j < len(a):\n                \n                # compare the sub-list with the current one\n                if a[j] > a[i] and j >= c:\n                    # increase the largest sub-list\n                    c = j\n    \n    # return the sum of the largest sub-list\n    return a[c]\n    \n",
        "num_ids": 171
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Create the empty array to save the largest subarray\n    sub_array = []\n",
        "num_ids": 22
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    i = 0\n    k = size\n    while i < k:\n        j = i\n        while j < k and a[j] < a[i]:\n            j+=1\n        if a[i] - a[j] > a[k-i] - a[k-j]:\n            a[k] = a[j] + a[k-j]\n            k = k - j\n        else:\n            a[k] = a[i] + a[j]\n            k = k - i\n        i+=1\n    return a\ndef check_sum(a, i, j):\n    while i <= j:\n        if a[i] + a[j] > a[i] + a[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef check_sum_dp(a, size):\n    if size == 0:\n        return True\n    if size == 1:\n        return check_sum(a, 0, 1)\n    else:\n        i = 0\n        j = 0\n        while i < size:\n            if a[i] == a[j]:\n                if check_sum_dp(a, size-1):\n                    return True\n                else:\n                    return False\n            elif a[i] + a[j] > a[i] + a[j]:\n                a[i] = a[j] + a[i]\n                i += 1\n                j += 1\n            else:\n                a[i] = a[j] + a[i]\n                i += 1\n                j += 1\n        return False\ndef find_max_sub_array_sum(a, size):\n    return max_sub_array_sum(a, size)\ndef find_max_sub_array_sum_dp(a, size):\n    return max_sub_array_sum_dp(a, size)\ndef check_sum_dp_memo(a, size):\n    dp = [[0]*(size+1) for _ in range(size+1)]\n    for i in range(size):\n        for j in range(i, size):\n            if a[i] + a[j] > a[i] + a[j]:\n                dp[i][j] = dp[i][j] or (dp[i][j] and dp[i+1][j+1])\n                dp[i][j] = dp[i][j] and (dp[i][j] and dp[i+1][j] or dp[i][j] and dp[i+1][j+1])\n            elif a[i] + a[j] == a[i] + a[j]:\n                dp[i][j] = dp[i][j] or (dp[i][j] and dp[i][j+1])\n    return dp[size][size]\ndef check_sum_dp_memo_dp(a, size):\n    dp = [[0]*(size+1) for _ in range(size+1)]\n    for i in range(size):\n        for j in range(i, size):\n            if a[i] + a[j] > a[i] + a[j]:\n                dp[i][j] = dp[i][j] or (dp[i][j] and dp[i][j+1])\n                dp[i][j] = dp[i][j] and (dp[i][j] and dp[i+1][j] or dp[i][j] and dp[i+1][j+1])\n            elif a[i] + a[j] == a[i] + a[j]:\n                dp[i][j] = dp[i][j] or (dp[i][j] and dp[i][j+1])\n    return dp[size][size]",
        "num_ids": 915
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    total = 0\n    i = 0\n    j = 0\n    k = size - 1\n    sub_list = []\n    while k >= i and j < k:\n        if j == size-1:\n            sub_list.append(a[j])\n            j = 0\n        elif i == size-1:\n            sub_list.append(a[i])\n            i += 1\n        elif a[j] > a[i]:\n            sub_list.append(a[j])\n            j += 1\n        else:\n            sub_list.append(a[i])\n            i += 1\n    while k >= i:\n        sub_list.append(a[k])\n        k -= 1\n    sub_list.reverse()\n    total = sum(sub_list)\n    return total\n",
        "num_ids": 192
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    while len(tup1)!= 0:\n        # Take the first element of the tuples and add it to the list\n        first = tup1.pop(0)\n        if tup2 is None:\n            break\n        if first in tup2:\n            tup1.extend(tup2)\n            tup2 = None\n        else:\n            tup1.append(first)\n    \n    while len(tup2)!= 0:\n        # Take the second element of the tuples and add it to the list\n        second = tup2.pop(0)\n        if tup1 is None:\n            break\n        if second in tup1:\n            tup2.extend(tup1)\n            tup1 = None\n        else:\n            tup1.append(second)\n    \n    return (tup1,tup2)",
        "num_ids": 233
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    res = []\n    elements = {}\n    if len(test_tup1) > len(test_tup2):\n        for elem in test_tup1:\n            if elem in elements:\n                elements[elem] += 1\n            else:\n                elements[elem] = 1\n    else:\n        for elem in test_tup2:\n            if elem in elements:\n                elements[elem] += 1\n            else:\n                elements[elem] = 1\n",
        "num_ids": 125
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return union_elements(test_tup2, test_tup1)\n    if len(test_tup1) > len(test_tup2):\n        return union_elements(test_tup1, test_tup2)\n",
        "num_ids": 82
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a new tuple with only the elements of the first tuple\n    new_tup = tuple(test_tup1[0:])\n    # create a new tuple with only the elements of the second tuple\n    new_tup2 = tuple(test_tup2[0:])\n    # create a new tuple with elements of both tuples\n    new_tup3 = tuple(new_tup2 + new_tup1)\n",
        "num_ids": 104
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return union_elements(test_tup2, test_tup1)\n    elif len(test_tup2) > len(test_tup1):\n        return union_elements(test_tup1, test_tup2)\n    else:\n        return (test_tup1, test_tup2)\n",
        "num_ids": 103
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    def sort_tuple_by_key(tuple_of_keys):\n        '''\n        The function sorts the tuple by key function to be able to use it on a list of tuples\n        '''\n        return tuple(sorted(tuple_of_keys, key = key))\n",
        "num_ids": 21
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1 + test_tup2\n    else:\n        return test_tup2 + test_tup1\n",
        "num_ids": 54
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 27
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    if len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    elif test_tup1[0] > test_tup2[0]:\n        return union_elements(test_tup1, test_tup2[1:])\n    else:\n        return union_elements(test_tup2, test_tup1[1:])\n        \ndef test_functions(test_tup1, test_tup2):\n    '''\n    Write a function to sort a tuple and return it in sorted order.\n    '''\n    \n    return union_elements(test_tup1, test_tup2)\n    \ndef main():\n    '''\n    Run main function to test your solution.\n    '''\n    \n    tup1 = (10, 20, 30, 40)\n    tup2 = (30, 40, 50, 60)\n    \n    test_functions(tup1, tup2)\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 67
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        longest_sublist_length = 0\n        for i in range(len(lst)):\n            for j in range(len(lst)):\n                if lst[i] == lst[j]:\n                    sublist_length = j - i + 1\n                    if sublist_length > longest_sublist_length:\n                        longest_sublist_length = sublist_length\n        return longest_sublist_length\n",
        "num_ids": 122
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        max_length=0\n        for i in range(len(lst)):\n            if max_length<len(lst[i]):\n                max_length=len(lst[i])\n        return max_length\n",
        "num_ids": 75
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # writing your code here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        list_len = []\n        for l in lst:\n            list_len.append(len(l))\n        return max(list_len)\n",
        "num_ids": 57
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = []\n    lst_length = []\n",
        "num_ids": 15
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublists = []\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            sublists.append(lst[i])\n    return sublists, max_len\n",
        "num_ids": 77
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    count = 0\n    for i in range(len(lst)):\n        count = len(lst[i])\n        if count > count_max:\n            count_max = count\n    return count_max\n    \ndef get_odd_even(lst):\n    '''\n    Write a python function to find the odd even numbers from a list.\n    '''\n    \n    even_odd = []\n    odd_even = []\n    \n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even_odd.append(lst[i])\n        else:\n            odd_even.append(lst[i])\n            \n    return odd_even, even_odd\n",
        "num_ids": 88
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n",
        "num_ids": 50
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # if the list is empty, return 0\n    if len(lst) == 0:\n        return 0\n",
        "num_ids": 28
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    if len(lst) < 1:\n        return -1\n    \n    if lst[0] > lst[1]:\n        return 1 + Find_Max_Length(lst[2:])\n",
        "num_ids": 53
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.sub(r\"([^\\u0021-\\uFFFD\\u4e00-\\u9fa5])\", r\" \\1 \", text)\n    return re.findall(r\"(?<=\\\")[^\\u0021-\\uFFFD\\u4e00-\\u9fa5]*(?=\\\")\", text)\n",
        "num_ids": 90
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('[^']+', text)\n    return values\n",
        "num_ids": 22
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val = re.findall(r\"([^\\s`\\[]+)([^\\s`])\", text)[0]\n    val = re.sub(\"\\s+\", \" \", val[0])\n    val = re.sub(r\"(.)\\1*\", r\"\\1\\1\", val)\n    val = val.replace(\"\\n\", \" \")\n    val = val.replace(\"\\t\", \" \")\n    val = val.replace(\"\\r\", \" \")\n    val = val.replace(\"\\f\", \" \")\n    val = val.replace(\"\\v\", \" \")\n    val = val.replace(\"\\xa0\", \" \")\n    val = val.replace(\"\\u2028\", \"\\n\")\n    val = val.replace(\"\\u2029\", \"\\n\")\n    return val.strip()\n",
        "num_ids": 199
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # split each element by a space.\n    text = re.split('[\\'\" ]', text)\n    # convert each element in list to string\n    text = list(map(str, text))\n    # list comprehension to get only values.\n    text = [x for x in text if x!= '']\n    return text\ndef convert_to_words(text):\n    '''\n    Write a function to convert each word of a string to word and phrase.\n    '''\n    # separate each element in list using''\n    text = re.split('[\\'']', text)\n    # for each element in list.\n    for i in range(len(text)):\n        # get only single character.\n        word = text[i]\n        # remove any non letter.\n        word = word.replace('a', '')\n        # remove the double space.\n        word = word.replace('\\'', '')\n        # convert single character to word.\n        word = word.lower()\n        # add spaces to word.\n        word = word.strip()\n        # append word to string.\n        text[i] = word\n    return text\ndef convert_to_words_hash(text):\n    '''\n    Write a function to convert each word of a string to a hash.\n    '''\n    # separate each element in list using''\n    text = re.split('[\\'']', text)\n    # for each element in list.\n    for i in range(len(text)):\n        # get only single character.\n        word = text[i]\n        # remove any non letter.\n        word = word.replace('a', '')\n        # remove the double space.\n        word = word.replace('\\'', '')\n        # convert single character to word.\n        word = word.lower()\n        # add spaces to word.\n        word = word.strip()\n        # convert single character to hash.\n        word = word.encode('utf-8')\n        # append word to string.\n        text[i] = word\n    return text\ndef extract_time_from_text(text):\n    '''\n    Write a function to extract time from a string.\n    '''\n    # split each element by a space.\n    text = re.split('[\\'']', text)\n    # convert each element in list to string.\n    text = list(map(str, text))\n    # list comprehension to get only time.\n    text = [x for x in text if x!= '']\n    # list comprehension to get only time.\n    text = [x for x in text if x!= '']\n    # convert each element in list to string.\n    text = list(map(str, text))\n    # list comprehension to get only time.\n    time = [x for x in text if x!= '']\n    # remove extra spaces.\n    time = [x for x in time if x!='']\n    # convert each element in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert the list to string.\n    time = list(map(str, time))\n    # convert the list to string.\n    time = list(map(str, time))\n    # remove duplicates.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # remove all duplicate characters.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # remove all duplicate characters.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # remove all duplicate characters.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # remove all duplicate characters.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # remove all duplicate characters.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # remove all duplicate characters.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # remove all duplicate characters.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # remove all duplicate characters.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # remove all duplicate characters.\n    time = list(dict.fromkeys(time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))\n    # convert all elements in list to string.\n    time = list(map(str, time))",
        "num_ids": 1505
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text.count('\"') == 1:\n        text = re.sub('(\\\".*?\\\")|(\\'.*?\\')', r'\\1', text)\n        print(text)\n    else:\n        text = re.sub('(\\\".*?\\\")|(\\'.*?\\')', r'\\1', text)\n        print(text)\n    return text.strip().replace('\"', '').replace(\"'\", '')\ndef find_entity_type(text, id):\n    '''\n    Write a function that returns the entity type of the given text.\n    '''\n    if text.count('\"') == 1:\n        text = re.sub('(\\\".*?\\\")|(\\'.*?\\')', r'\\1', text)\n        text = re.sub('\\<(.*?)\\>', r'\\<\\1\\>', text)\n        text = re.sub('[^a-zA-Z]', '', text)\n        text = re.sub('\\s','', text)\n        text = re.sub('\\n','', text)\n        text = re.sub('[^a-zA-Z0-9]', '', text)\n        text = re.sub('[^a-zA-Z]','', text)\n        text = re.sub('[^a-zA-Z0-9]','', text)\n        text = re.sub('\\d+', '', text)\n        text = text.strip()\n        text = text.lower()\n        text = text.replace(' ','')\n        text = text.replace('\\n', '')\n        text = text.replace('\\r', '')\n        text = text.replace('\\t', '')\n        text = text.replace('\\u001b[32m', '')\n        text = text.replace('\\u001b[31m', '')\n        text = text.replace('\\u001b[36m', '')\n        text = text.replace('\\u001b[33m', '')\n        text = text.replace('\\u001b[34m', '')\n        text = text.replace('\\u001b[35m', '')\n        text = text.replace('\\u001b[36m', '')\n        text = text.replace('\\u001b[37m', '')\n        text = text.replace('\\u001b[41m', '')\n        text = text.replace('\\u001b[42m', '')\n        text = text.replace('\\u001b[43m', '')\n        text = text.replace('\\u001b[44m', '')\n        text = text.replace('\\u001b[45m', '')\n        text = text.replace('\\u001b[46m', '')\n        text = text.replace('\\u001b[47m', '')\n        text = text.replace('\\u001b[48m', '')\n        text = text.replace('\\u001b[49m', '')\n        text = text.replace('\\u001b[5m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[11m', '')\n        text = text.replace('\\u001b[12m', '')\n        text = text.replace('\\u001b[13m', '')\n        text = text.replace('\\u001b[14m', '')\n        text = text.replace('\\u001b[15m', '')\n        text = text.replace('\\u001b[16m', '')\n        text = text.replace('\\u001b[17m', '')\n        text = text.replace('\\u001b[18m', '')\n        text = text.replace('\\u001b[19m', '')\n        text = text.replace('\\u001b[1m', '')\n        text = text.replace('\\u001b[2m', '')\n        text = text.replace('\\u001b[3m', '')\n        text = text.replace('\\u001b[4m', '')\n        text = text.replace('\\u001b[5m', '')\n        text = text.replace('\\u001b[6m', '')\n        text = text.replace('\\u001b[7m', '')\n        text = text.replace('\\u001b[8m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[11m', '')\n        text = text.replace('\\u001b[12m', '')\n        text = text.replace('\\u001b[13m', '')\n        text = text.replace('\\u001b[14m', '')\n        text = text.replace('\\u001b[15m', '')\n        text = text.replace('\\u001b[16m', '')\n        text = text.replace('\\u001b[17m', '')\n        text = text.replace('\\u001b[18m', '')\n        text = text.replace('\\u001b[19m', '')\n        text = text.replace('\\u001b[1m', '')\n        text = text.replace('\\u001b[2m', '')\n        text = text.replace('\\u001b[3m', '')\n        text = text.replace('\\u001b[4m', '')\n        text = text.replace('\\u001b[5m', '')\n        text = text.replace('\\u001b[6m', '')\n        text = text.replace('\\u001b[7m', '')\n        text = text.replace('\\u001b[8m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[11m', '')\n        text = text.replace('\\u001b[12m', '')\n        text = text.replace('\\u001b[13m', '')\n        text = text.replace('\\u001b[14m', '')\n        text = text.replace('\\u001b[15m', '')\n        text = text.replace('\\u001b[16m', '')\n        text = text.replace('\\u001b[17m', '')\n        text = text.replace('\\u001b[18m', '')\n        text = text.replace('\\u001b[19m', '')\n        text = text.replace('\\u001b[1m', '')\n        text = text.replace('\\u001b[2m', '')\n        text = text.replace('\\u001b[3m', '')\n        text = text.replace('\\u001b[4m', '')\n        text = text.replace('\\u001b[5m', '')\n        text = text.replace('\\u001b[6m', '')\n        text = text.replace('\\u001b[7m', '')\n        text = text.replace('\\u001b[8m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[11m', '')\n        text = text.replace('\\u001b[12m', '')\n        text = text.replace('\\u001b[13m', '')\n        text = text.replace('\\u001b[14m', '')\n        text = text.replace('\\u001b[15m', '')\n        text = text.replace('\\u001b[16m', '')\n        text = text.replace('\\u001b[17m', '')\n        text = text.replace('\\u001b[18m', '')\n        text = text.replace('\\u001b[19m', '')\n        text = text.replace('\\u001b[1m', '')\n        tex",
        "num_ids": 1874
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Find the start of the string.\n    start = text.find('\"')\n    # Find the end of the string.\n    end = text.find('\"')\n    # Split the string.\n    return text[start+1:end]\n",
        "num_ids": 60
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r\"\\\"(.+?)\\\"\",text)\n",
        "num_ids": 21
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    data = text.split('\"')\n    val_list = []\n    for value in data:\n        value = value.replace(\"\\\"\", \"\")\n        val_list.append(value)\n    return val_list\n",
        "num_ids": 54
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #regex = r'[^A-Za-z0-9\\s\\(\\)]+'\n    #quotation_mark = re.compile(regex)\n    '''\n    for line in file:\n        #print(line)\n        if line[0] == \" \":\n            line = line[1:]\n        #print(line)\n        match = quotation_mark.search(line)\n        print(match)\n        if match:\n            #print(line)\n            print(\"Here is the value\")\n            print(match.group())\n    '''\n    #regex = r'[^A-Za-z0-9\\s\\(\\)]+'\n    #quotation_mark = re.compile(regex)\n    return text\n",
        "num_ids": 48
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    r = re.findall(r'(.{2})', text)\n    list_of_values = list(map(lambda x: x.strip('\"'), r))\n    return list_of_values\ndef extract_names(text):\n    '''\n    Write a function to extract names from a string.\n    '''\n    r = re.findall(r'(.{3})', text)\n    list_of_names = list(map(lambda x: x.strip('\"'), r))\n    return list_of_names\ndef extract_hours(text):\n    '''\n    Write a function to extract hours from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[0:6], r))\ndef extract_decimal_hours(text):\n    '''\n    Write a function to extract hours from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[6:], r))\ndef extract_decimal_minutes(text):\n    '''\n    Write a function to extract minutes from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[3:], r))\ndef extract_decimal_seconds(text):\n    '''\n    Write a function to extract seconds from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[5:], r))\ndef extract_decimal_minutes_seconds(text):\n    '''\n    Write a function to extract minutes from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[4:], r))\ndef extract_decimal_seconds_minutes(text):\n    '''\n    Write a function to extract seconds from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[3:], r))\ndef extract_decimal_hours_seconds(text):\n    '''\n    Write a function to extract hours from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[0:5], r))\ndef extract_decimal_hours_minutes(text):\n    '''\n    Write a function to extract hours from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[5:], r))\ndef extract_decimal_seconds_hours(text):\n    '''\n    Write a function to extract seconds from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[4:], r))\ndef extract_decimal_hours_minutes_seconds(text):\n    '''\n    Write a function to extract hours from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[3:], r))\ndef extract_decimal_minutes_seconds_hours(text):\n    '''\n    Write a function to extract minutes from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[5:], r))\ndef extract_decimal_hours_seconds_minutes(text):\n    '''\n    Write a function to extract hours from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[3:], r))\ndef extract_decimal_minutes_seconds_hours(text):\n    '''\n    Write a function to extract minutes from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[3:], r))\ndef extract_decimal_hours_minutes_seconds(text):\n    '''\n    Write a function to extract hours from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[3:], r))\ndef extract_decimal_seconds_minutes(text):\n    '''\n    Write a function to extract seconds from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[4:], r))\ndef extract_decimal_hours_minutes_seconds(text):\n    '''\n    Write a function to extract hours from a string.\n    '''\n    r = re.findall(r'(.{2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2}):(.{1,2})', text)\n    return list(map(lambda x: x[4:], r))\ndef extract_decimal_hours",
        "num_ids": 93
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n = len(arr)\n    #2 and 3 are unique pairs but need to be distinct\n    if n == 2 or n == 3:\n        return 0\n    #convert to int and try to find two items that differ\n    try:\n        count = 0\n        for i in range(n):\n            for j in range(i,n):\n                if arr[i] == arr[j] or (arr[i] == arr[j] and arr[i]!= arr[j]):\n                    count += 1\n        return count\n    except:\n        return 0\n",
        "num_ids": 135
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                if arr[i] + arr[j] == n:\n                    count += 1\n            if arr[i] + arr[j] < n:\n                if arr[i] + arr[j] == n:\n                    count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 1: \n        return 0\n    elif n < 1: \n        return -1\n    elif len(arr) == 1:\n        return 1\n    else: \n        return (count_Pairs(arr[1:],n-1) + count_Pairs(arr[:len(arr)-1],n-1))\n",
        "num_ids": 85
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c=0\n    arr.sort()\n    for i in range(len(arr)-1):\n        if (arr[i]!= arr[i+1]):\n            c+=1\n    return c\n",
        "num_ids": 52
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Input -\n    # arr = [[1,1],[1,2]]\n    # n = 3\n",
        "num_ids": 27
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(1,n): \n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                pairs += 1\n    print(pairs)\n",
        "num_ids": 58
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # brute force\n",
        "num_ids": 7
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count_pairs = 0\n    arr.sort()\n    for i in range(0,len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            count_pairs += 1\n    return count_pairs\n",
        "num_ids": 61
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                count=count+1\n    return count \n",
        "num_ids": 60
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    # def split(word): \n    #     return word.split(',') \n    #     #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')",
        "num_ids": 2021
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # TODO: Write the code to do the splitting.\n    # Go over each char in string and check if the char is a special character.\n    # If so, split at the beginning of the char.\n    # Otherwise, split the char at the end of each word.\n    # Return the words in the list.\n",
        "num_ids": 74
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    word = word.strip()\n    return word\n",
        "num_ids": 22
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word\n",
        "num_ids": 6
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return(word.split())\n",
        "num_ids": 10
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Get the length of the word\n    len_word = len(word)\n",
        "num_ids": 21
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if word == \"\": return word\n    if word[0]!= \" \": return word.split( )\n    else: return word.split(\" \")\n",
        "num_ids": 40
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n >= 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n >= 0:\n        x = n % 10\n        n = n // 10\n        yield x\n        \n    # For non-positive numbers,\n    # simply use the remainder operator\n    ",
        "num_ids": 48
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return n % 10\n",
        "num_ids": 23
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # YOUR CODE HERE\n    return int(n)\n    \n    #raise NotImplementedError #NEEDED FOR TESTING\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    x = n % 10\n    sum = 0\n    while n > 0:\n        sum = sum * 10 + x % 10\n        x = n // 10\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = abs(n)\n    while n >= 10:\n        n //= 10\n    return n\n",
        "num_ids": 27
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return list1[0] == list1[0]\n    else:\n        first = list1[0]\n        list2 = []\n        for x in list1[1:]:\n            list2.append(x)\n        for x in list2:\n            if x < first:\n                return False\n        return True",
        "num_ids": 104
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #your code here\n    if len(list1) == 1:\n        return True\n    if list1[0] >= list1[1]:\n        return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # iterate through list\n    for index in range(len(list1) - 1):\n        # check whether the current index is greater than the last index\n        if list1[index] > list1[index + 1]:\n            return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1:\n        for i in range(len(list1)):\n            j = 0\n            while j < len(list1) and list1[j] < list1[i]:\n                j += 1\n            if j == len(list1):\n                return False\n        return True\n    else:\n        return True\n",
        "num_ids": 79
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return True\n    \n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n        \n    return True\n",
        "num_ids": 56
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    length=len(list1)\n    for i in range(length):\n        for j in range(0,length-i-1):\n            if list1[j]>list1[j+1]:\n                temp=list1[j]\n                list1[j]=list1[j+1]\n                list1[j+1]=temp\n    return list1\n",
        "num_ids": 89
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    l1 = list1[:]\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [[] for i in range(length)]\n",
        "num_ids": 14
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_ = []\n    for i in range(length):\n        d = {}\n        d['first_name'] = str(input('Enter your first name: '))\n        d['last_name'] = str(input('Enter your last name: '))\n        d['dob'] = str(input('Enter your date of birth: '))\n        d['gender'] = str(input('Enter your gender: '))\n        d['personal_info'] = str(input('Enter your personal information: '))\n        d['location'] = str(input('Enter your location: '))\n        d['personal_info'] = str(input('Enter your personal information: '))\n        d['id_no'] = int(input('Enter your id no: '))\n        list_.append(d)\n    return list_\n",
        "num_ids": 189
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty = []\n    for i in range(length):\n        empty.append(dict())\n    return empty\n",
        "num_ids": 28
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n",
        "num_ids": 6
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dict_n = []\n    for i in range(length):\n        dict_n.append(dict())\n",
        "num_ids": 28
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for item in range(length):\n        empty_list.append(dict())\n    return empty_list",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n    \n    \ndef is_greater(num1, num2):\n    '''\n    Write a function to check if two numbers are greater than each other.\n    '''\n    return num1 > num2\n    \n    \ndef is_multiple(num1, num2):\n    '''\n    Write a function to check if two numbers are a multiple of each other.\n    '''\n    return num1 % num2 == 0\n    \n    \ndef add(num1, num2):\n    '''\n    Write a function to add two numbers together.\n    '''\n    return num1 + num2\n    \n    \ndef subtract(num1, num2):\n    '''\n    Write a function to subtract two numbers.\n    '''\n    return num1 - num2\n    \n    \ndef multiply(num1, num2):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return num1 * num2\n    \n    \ndef divide(num1, num2):\n    '''\n    Write a function to divide two numbers.\n    '''\n    return num1 / num2\n    \n    \ndef square(num1):\n    '''\n    Write a function to square a number.\n    '''\n    return num1 ** 2\n    \n    \ndef cube(num1):\n    '''\n    Write a function to cube a number.\n    '''\n    return num1 ** 3\n    \n    \ndef sum(num1, num2):\n    '''\n    Write a function to sum two numbers.\n    '''\n    return num1 + num2\n    \n    \ndef square_of(num1):\n    '''\n    Write a function to square the values of a number.\n    '''\n    return num1 ** 2\n    \n    \ndef cube_of(num1):\n    '''\n    Write a function to cube the values of a number.\n    '''\n    return num1 ** 3\n    \n    \ndef swap(num1, num2):\n    '''\n    Write a function to swap the values of two numbers.\n    '''\n    return num1, num2\n    \n    \ndef average(num1, num2):\n    '''\n    Write a function to compute the average of two numbers.\n    '''\n    return num1 + num2 / 2\n    \n    \ndef main():\n    num1 = int(input('First number: '))\n    num2 = int(input('Second number: '))\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The sum of {num1} and {num2} is {square(num1)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {cube(num1)}')\n    print(f'The sum of {num1} and {num2} is {sum(num1, num2)}')\n    print(f'The square of {num1} is {square_of(num1)}')\n    print(f'The product of {num1} and {num2} is {multiply(num1, num2)}')\n    print(f'The square of {num1} is {square_of(nu",
        "num_ids": 1473
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n",
        "num_ids": 9
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 33
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sublist)\n    sorted_list = sorted(sorted_list, key=len)\n    return sorted_list\n",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(sublist):\n        '''\n        Sort each sublist of strings in a given list of lists.\n        '''\n        newlist=[]\n        for i in range(len(sublist)):\n            for j in range(len(sublist[i])):\n                newlist.append(sublist[i][j])\n        return newlist\n    return sorted(list1, key=sort_sublist)",
        "num_ids": 69
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n",
        "num_ids": 49
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    def sort(elem):\n        return elem[1]\n    \n    return sorted(list1, key = sort)\n    \n    \ndef is_palindrome(elem):\n    return elem == elem[::-1]\n    \n    \n    \ndef check_palindrome(elem):\n    '''\n    Write a function that checks if the input string is a palindrome.\n    '''\n    \n    if len(elem) < 2:\n        return True\n    if elem == elem[::-1]:\n        return True\n    return False\n    \n    \n    \ndef check_permutation(elem):\n    '''\n    Write a function that checks if a given string is a permutation of a given string.\n    '''\n    \n    if elem == elem[::-1]:\n        return True\n    return False\n    \n    \ndef is_valid_permutation(elem):\n    '''\n    Write a function that checks if a given string is a permutation of a given string.\n    '''\n    \n    for i in range(0, len(elem)):\n        for j in range(0, len(elem) - i - 1):\n            if elem[j]!= elem[j + i]:\n                return False\n    return True\n    \n    \ndef is_valid_sublist(elem, sublist):\n    '''\n    Write a function that checks if a given string is a sublist of a given string.\n    '''\n    \n    if elem in sublist:\n        return True\n    return False\n    \n    \n    \n    \ndef is_valid_triangle(elem):\n    '''\n    Write a function that checks if a given string is a triangle.\n    '''\n    \n    if len(elem) >= 3:\n        for i in range(0, len(elem) - 1):\n            for j in range(i + 1, len(elem)):\n                if elem[i] + elem[j] == elem[i] + elem[j] * 2:\n                    return True\n    return False\n    \n    \n    \n    \ndef is_valid_triangle(elem):\n    '''\n    Write a function that checks if a given string is a triangle.\n    '''\n    \n    if len(elem) >= 3:\n        if elem[0] + elem[1] == elem[0] + elem[1] * 2 or elem[2] + elem[3] == elem[2] + elem[3] * 2:\n            return True\n    return False\n    \n    \ndef is_valid_sudoku(elem):\n    '''\n    Write a function that checks if a given string is a sudoku.\n    '''\n    \n    if len(elem) == 81:\n        for i in range(0, 9):\n            if is_valid_sublist(elem, list(str(i))):\n                return True\n    return False\n    \n    \ndef is_valid_sudoku(elem):\n    '''\n    Write a function that checks if a given string is a sudoku.\n    '''\n    \n    if len(elem) == 81:\n        for i in range(0, 9):\n            if is_valid_sublist(elem, list(str(i))):\n                return True\n    return False\n    \n    \ndef is_valid_square(elem):\n    '''\n    Write a function that checks if a given string is a square.\n    '''\n    \n    if len(elem) == 9:\n        for i in range(0, 9):\n            if is_valid_sublist(elem, list(str(i))):\n                return True\n    return False\n    \n    \n    \ndef is_valid_square(elem):\n    '''\n    Write a function that checks if a given string is a square.\n    '''\n    \n    if len(elem) == 9:\n        for i in range(0, 3):\n            for j in range(0, 3):\n                if is_valid_sublist(elem, list(str(i * 3 + j))):\n                    return True\n    return False\n    \n    \n    \ndef is_valid_row(elem):\n    '''\n    Write a function that checks if a given string is a row.\n    '''\n    \n    if len(elem) == 81:\n        for i in range(0, 9):\n            if is_valid_sublist(elem, list(str(i))):\n                return True\n    return False\n    \n    \ndef is_valid_row(elem):\n    '''\n    Write a function that checks if a given string is a row.\n    '''\n    \n    if len(elem) == 9:\n        for i in range(0, 3):\n            for j in range(0, 3):\n                if is_valid_sublist(elem, list(str(i * 3 + j))):\n                    return True\n    return False\n    \n    \ndef is_valid_column(elem):\n    '''\n    Write a function that checks if a given string is a column.\n    '''\n    \n    if len(elem) == 9:\n        for i in range(0, 9):\n            if is_valid_sublist(elem, list(str(i))):\n                return True\n    return False\n    \n    \ndef is_valid_column(elem):\n    '''\n    Write a function that checks if a given string is a column.\n    '''\n    \n    if len(elem) == 9:\n        for i in range(0, 3):\n            for j in range(0, 9):\n                if is_valid_sublist(elem, list(str(i * 3 + j))):\n                    return True\n    return False\n    \n    \ndef is_valid_box(elem):\n    '''\n    Write a function that checks if a given string is a box.\n    '''\n    \n    if len(elem) == 81:\n        for i in range(0, 9):\n            if is_valid_sublist(elem, list(str(i))):\n                return True\n    return False\n    \n    \ndef is_valid_box(elem):\n    '''\n    Write a function that checks if a given string is a box.\n    '''\n    \n    if len(elem) == 9:\n        for i in range(0, 3):\n            for j in range(0, 3):\n                if is_valid_sublist(elem, list(str(i * 3 + j))):\n                    return True\n    return False\n    \n    \ndef is_valid_sublist(elem, sublist):\n    '''\n    Write a function that checks if a given string is a sublist of a given string.\n    '''\n    \n    if len(elem)!= len(sublist):\n        return False\n    if elem == sublist:\n        return True\n    return False\n    \n    \ndef is_valid_permutation(elem):\n    '''\n    Write a function that checks if a given string is a permutation of a given string.\n    '''\n    \n    if elem == elem[::-1]:\n        return True\n    return False\n    \n    \ndef is_valid_permutation(elem):\n    '''\n    Write a function that checks if a given string is a permutation of a given string.\n    '''\n    \n    if elem == elem[::-1]:\n        return True\n    return False\n    \n    \ndef is_valid_triangle(elem):\n    '''\n    Write a function that checks if a given string is a triangle.\n    '''\n    \n    if len(elem) == 81:\n        for i in range(0, 9):\n            if is_valid_sublist(elem, list(str(i))):\n                return True\n    return False\n    \n    \ndef is_valid_triangle(elem):\n    '''\n    Write a function that checks if a given string is a triangle.\n    '''\n    \n    if len(elem) == 81:\n        for i in range(0, 3):\n            for j in range(i + 1, 9):\n                if is_valid_sublist(elem, list(str(i * 3 + j))):\n                    return True\n    return Fals",
        "num_ids": 71
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] =='':\n                list1[i][j] =''\n    return list1\n",
        "num_ids": 59
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = list()\n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "num_ids": 41
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if list1==[]:\n        print(\"Your list is empty\")\n        return\n    else:\n        for i in range(0,len(list1)):\n            if list1[i]=='a':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='b':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='c':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='d':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='e':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='f':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='g':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='h':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='i':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='j':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='k':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='l':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='m':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='n':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='o':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='p':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='q':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='r':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='s':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='t':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='u':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='v':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='w':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='x':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='y':\n                list1[i].sort()\n                del list1[i]\n            if list1[i]=='z':\n                list1[i].sort()\n                del list1[i]\n        return sorted(list1)\n",
        "num_ids": 803
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Sort by alphabetical order\n    for sublist in list1:\n        for char in range(0,len(sublist)-1):\n            if sublist[char] > sublist[char+1]:\n                sublist[char], sublist[char+1] = sublist[char+1], sublist[char]\n    #Sort by numerical order\n    for sublist in list1:\n        for char in range(0,len(sublist)-1):\n            if sublist[char] < sublist[char+1]:\n                sublist[char], sublist[char+1] = sublist[char+1], sublist[char]\n",
        "num_ids": 153
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Your code here\n    if list1:\n        l1 = list1[0]\n        for x in list1[1:]:\n            l1.append(x)\n        l1.sort()\n    else:\n        l1 = []\n    return l1\n",
        "num_ids": 66
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp = []\n    i = 0\n    while i < len(list1):\n        temp.append(list1[i])\n        i += 1\n    temp.sort()\n    list1 = temp\n    return list1\n",
        "num_ids": 55
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if not nums:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(set(nums))\n    return nums\n",
        "num_ids": 19
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # iterate through each element in the lists.\n    # if element is in list, remove it from the list.\n    # if not, add the element to the list\n    # return the number of unique elements.\n    unique_elements = []\n    # set of unique elements\n    unique_elements = set(nums)\n    return len(nums) - len(unique_elements)\n",
        "num_ids": 94
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(set(nums))\n    return nums\n",
        "num_ids": 19
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # TODO: Finish this function\n",
        "num_ids": 11
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    return unique_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if not nums:\n        return []\n    \n    nums.sort()\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums\n",
        "num_ids": 67
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    return [x for x in nums if x not in nums[-1*len(nums):]]\n    \ndef list_merge(l1, l2):\n    '''\n    Merge two lists and return a new list.\n",
        "num_ids": 14
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # creating a dictionary to store the numbers\n    dictionary = {}\n    for i in range(len(nums)):\n        dictionary[nums[i]] = i\n    # populating a new dictionary with all the duplicate numbers\n    new_dict = {}\n    for k, v in dictionary.items():\n        if v not in new_dict.keys():\n            new_dict[v] = k\n        elif v == new_dict[v]:\n            new_dict[v] = v\n    print(new_dict)\n    return new_dict\n",
        "num_ids": 132
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_dict = {}\n    for num in nums:\n        if num not in nums_dict:\n            nums_dict[num] = 1\n        else:\n            nums_dict[num] += 1\n    return nums_dict\n",
        "num_ids": 62
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 0\n    for i in range(0,len(list_data)):\n        total += list_data[i]\n    print(total)\n",
        "num_ids": 39
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    t = 1\n    n = []\n    for i in list_data:\n        n.append(t)\n        t = t * i\n    n.sort()\n    n_product = 1\n    for k in n:\n        n_product = n_product * k\n    return n_product\n",
        "num_ids": 73
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_sum = 0\n    for element in list_data:\n        if element in unique_numbers:\n            total_sum += element\n    return total_sum\n",
        "num_ids": 41
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in range(len(list_data)):\n        product *= (i+1)\n",
        "num_ids": 31
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    max_value = list_data[0]\n    list_sum = 0\n    for num in list_data:\n        if num > max_value:\n            max_value = num\n            list_sum = list_sum + num\n    return list_sum\n",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    counter = 0\n    for ele in list_data:\n        if ele == list_data[0]:\n            counter = counter + 1\n    return counter\n",
        "num_ids": 38
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    s=set()\n    for i in range(len(list_data)):\n        if list_data[i] not in s:\n            s.add(list_data[i])\n    return s\n",
        "num_ids": 51
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_num = set()\n    for num in list_data:\n        if num in unique_num:\n            continue\n        else:\n            unique_num.add(num)\n    return len(unique_num)\n",
        "num_ids": 54
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for numbers in list_data:\n        if numbers not in unique_numbers:\n            unique_numbers.append(numbers)\n    return unique_numbers\n",
        "num_ids": 49
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return sum(set(list_data))\n",
        "num_ids": 13
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h/2\n",
        "num_ids": 10
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*r*h)/3\n",
        "num_ids": 13
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 4*pi*r*h\n    return S\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    A = (4/3)*np.pi*r*h\n    return A\n",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*r*h\n",
        "num_ids": 10
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3)*(pi*r**3)\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = (2*np.pi*r*h)\n    return surfacearea\n",
        "num_ids": 23
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n",
        "num_ids": 8
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5*r**2*h*(1+h)\n",
        "num_ids": 20
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * (r * h)\n",
        "num_ids": 12
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check for empty input\n    if not A or not B:\n        return None\n",
        "num_ids": 22
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    return True\n",
        "num_ids": 22
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return len(A) == len(B) and A == B\n",
        "num_ids": 18
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A.sort()\n    if A == B: \n        return True\n    else: \n        return False\n",
        "num_ids": 29
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    \n    # if the array is empty, it is not a sublist\n    if len(A) == 0:\n        return True\n",
        "num_ids": 49
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(A==[] or B==[]):\n        return False\n    if(len(A)==1):\n        return A[0]==B[0]\n    if(len(A)>1):\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return False\n    \nA=list(map(int,input(\"Enter A\").split()))\nB=list(map(int,input(\"Enter B\").split()))\nprint(is_Sub_Array(A,B)",
        "num_ids": 127
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A)!= len(B)):\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(A)):\n        for j in range(0,len(B)):\n            if A[i] == B[j]:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A \n",
        "num_ids": 9
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    for i in range(len(A)):\n        if A[i]!=B[i]:\n            return False\n    return True\n    \n    \ndef count_Sub_array(arr):\n    '''\n    Write a python function to count subarray in array.\n    '''\n    c=0\n    for i in range(len(arr)):\n        if is_Sub_Array(arr,arr[i:]):\n            c+=1\n    return c\n",
        "num_ids": 44
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1: \n        return n \n    else: \n        return (int(str(n)[-1]))*last_Digit_Factorial(int(str(n)[-2]))\n    \n",
        "num_ids": 55
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    if n == 0:\n        return 0\n    else:\n        while n!= 0:\n            n, digit = n % 10, n//10\n            fact *= digit\n        return fact\n",
        "num_ids": 53
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print (\"The number should be greater than 0\")\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "num_ids": 52
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Please enter an integer greater than or equal to 0.\")\n    else:\n        if n == 0:\n            print(\"The last digit is: \", n)\n        else:\n            if n >= 0:\n                n1 = n%10\n                n = n//10\n                n2 = n%10\n                n = n//10\n                n3 = n%10\n                n = n//10\n                n4 = n%10\n                n = n//10\n                n5 = n%10\n                n = n//10\n                n6 = n%10\n                n = n//10\n                n7 = n%10\n                n = n//10\n                n8 = n%10\n                n = n//10\n                n9 = n%10\n                n = n//10\n                n10 = n%10\n                n = n//10\n                n11 = n%10\n                n = n//10\n                n12 = n%10\n                n = n//10\n                n13 = n%10\n                n = n//10\n                n14 = n%10\n                n = n//10\n                n15 = n%10\n                n = n//10\n                n16 = n%10\n                n = n//10\n                n17 = n%10\n                n = n//10\n                n18 = n%10\n                n = n//10\n                n19 = n%10\n                n = n//10\n                n20 = n%10\n                n = n//10\n                n21 = n%10\n                n = n//10\n                n22 = n%10\n                n = n//10\n                n23 = n%10\n                n = n//10\n                n24 = n%10\n                n = n//10\n                n25 = n%10\n                n = n//10\n                n26 = n%10\n                n = n//10\n                n27 = n%10\n                n = n//10\n                n28 = n%10\n                n = n//10\n                n29 = n%10\n                n = n//10\n                n30 = n%10\n                n = n//10\n                n31 = n%10\n                n = n//10\n                n32 = n%10\n                n = n//10\n                n33 = n%10\n                n = n//10\n                n34 = n%10\n                n = n//10\n                n35 = n%10\n                n = n//10\n                n36 = n%10\n                n = n//10\n                n37 = n%10\n                n = n//10\n                n38 = n%10\n                n = n//10\n                n39 = n%10\n                n = n//10\n                n40 = n%10\n                n = n//10\n                n41 = n%10\n                n = n//10\n                n42 = n%10\n                n = n//10\n                n43 = n%10\n                n = n//10\n                n44 = n%10\n                n = n//10\n                n45 = n%10\n                n = n//10\n                n46 = n%10\n                n = n//10\n                n47 = n%10\n                n = n//10\n                n48 = n%10\n                n = n//10\n                n49 = n%10\n                n = n//10\n                n50 = n%10\n                n = n//10\n                n51 = n%10\n                n = n//10\n                n52 = n%10\n                n = n//10\n                n53 = n%10\n                n = n//10\n                n54 = n%10\n                n = n//10\n                n55 = n%10\n                n = n//10\n                n56 = n%10\n                n = n//10\n                n57 = n%10\n                n = n//10\n                n58 = n%10\n                n = n//10\n                n59 = n%10\n                n = n//10\n                n60 = n%10\n                n = n//10\n                n61 = n%10\n                n = n//10\n                n62 = n%10\n                n = n//10\n                n63 = n%10\n                n = n//10\n                n64 = n%10\n                n = n//10\n                n65 = n%10\n                n = n//10\n                n66 = n%10\n                n = n//10\n                n67 = n%10\n                n = n//10\n                n68 = n%10\n                n = n//10\n                n69 = n%10\n                n = n//10\n                n70 = n%10\n                n = n//10\n                n71 = n%10\n                n = n//10\n                n72 = n%10\n                n = n//10\n                n73 = n%10\n                n = n//10\n                n74 = n%10\n                n = n//10\n                n75 = n%10\n                n = n//10\n                n76 = n%10\n                n = n//10\n                n77 = n%10\n                n = n//10\n                n78 = n%10\n                n = n//10\n                n79 = n%10\n                n = n//10\n                n80 = n%10\n                n = n//10\n                n81 = n%10\n                n = n//10\n                n82 = n%10\n                n = n//10\n                n83 = n%10\n                n = n//10\n                n84 = n%10\n                n = n//10\n                n85 = n%10\n                n = n//10\n                n86 = n%10\n                n = n//10\n                n87 = n%10\n                n = n//10\n                n88 = n%10\n                n = n//10\n                n89 = n%10\n                n = n//10\n                n90 = n%10\n                n = n//10\n                n91 = n%10\n                n = n//10\n                n92 = n%10\n                n = n//10\n                n93 = n%10\n                n = n//10\n                n94 = n%10\n                n = n//10\n                n95 = n%10\n                n = n//10\n                n96 = n%10\n                n = n//10\n                n97 = n%10\n                n = n//10\n                n98 = n%10\n                n = n//10\n                n99 = n%10\n                n = n//10\n                n100 = n%10\n                n = n//10\n                n101 = n%10\n                n = n//10\n                n102 = n%10\n                n = n//10\n                n103 = n%10\n                n = n//10\n                n104 = n%10\n                n = n//10\n                n105 = n%10\n                n = n//10\n                n106 = n%10\n                n = n//10\n                n107 = n%10\n                n = n//10\n                n108 = n%10\n                n = n//10\n                n109 = n%10\n                n = n//10\n                n110 = n%10\n                n = n//10\n                n111 = n%10\n                n = n//10\n                n112 = n%10\n                n = n//10\n                n113 = n%10\n                n = n//10\n                n114 = n%10\n                n = n//10\n                n115 = n%10\n                n = n//10\n                n116 = n%10\n                n = n//10\n                n117 = n%10\n                n = n//10\n                n118 = n%10\n                n = n//10\n                n119 = n%10\n                n = n//10\n                n120 = n%10\n                n = n//10\n                n121 = n%10\n                n = n//10\n                n122 = n%10\n                n = n//10\n                n123 = n%10\n                n = n//10\n                n124 = n%10\n                n = n//10\n                n125 = n%10\n                n = n//10\n                n126 = n%10\n                n = n//10\n                n127 = n%10\n                n = n//10\n                n128 = n%10\n                n = n//10\n                n129 = n%10\n                n = n//10\n                n130 = n%10\n                n = n//10\n                ",
        "num_ids": 2009
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + last_Digit_Factorial(n//10)\n",
        "num_ids": 36
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 0\n    while n > 0: \n        result = result * n % 10 \n        n = n // 10 \n    return result \n",
        "num_ids": 38
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n > 0:\n        n = n // 10\n        fact = fact * n\n    return fact\n",
        "num_ids": 32
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return (n%10)**2\n",
        "num_ids": 12
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if (n == 0):\n        return 1\n    while (n!= 0):\n        n = n - 1\n        factorial = factorial * n\n    return factorial\n",
        "num_ids": 50
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result = result * i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n",
        "num_ids": 18
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n",
        "num_ids": 18
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n",
        "num_ids": 34
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i]+list2[i]+list3[i])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list=[]\n    new_list.extend(list1)\n    new_list.extend(list2)\n    new_list.extend(list3)\n    return new_list\n",
        "num_ids": 51
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # return a concatenated list from all the elements of the first list\n    # to the second\n    # to the third\n    \n    return (list1 + list2 + list3)\n",
        "num_ids": 46
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"The lists must be the same size\")\n    result = []\n    #Append all the elements in the first list to the result\n    for i in list1:\n        result.append(i)\n    #Append all the elements in the second list to the result\n    for j in list2:\n        result.append(j)\n    #Append all the elements in the third list to the result\n    for k in list3:\n        result.append(k)\n    return result\n",
        "num_ids": 138
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list3 + list2\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i] + list3[i])\n",
        "num_ids": 43
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i] + list2[i] + list3[i])\n",
        "num_ids": 51
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list_tup1 = []\n    list_tup2 = []\n    i = 0\n    while i < len(test_tup1):\n        list_tup1.append(test_tup1[i])\n        i = i+1\n    while i < len(test_tup2):\n        list_tup2.append(test_tup2[i])\n        i = i+1\n    list_tup1 = list(set(list_tup1))\n    list_tup2 = list(set(list_tup2))\n    return list_tup1, list_tup2\n",
        "num_ids": 151
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup1 = set(test_tup1) - set(test_tup2)\n    return dissimilar_tup1\n",
        "num_ids": 38
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    # Create a for-loop to iterate through each list element\n    # and compare two tuples elements in list one\n    # check if the element in list one is in list two\n    # return the tuple\n",
        "num_ids": 55
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                dissimilar.append(test_tup1[i])\n    return dissimilar\n",
        "num_ids": 83
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #find the common element\n    common = test_tup1[1]\n    dissimilar = []\n    for i in test_tup2:\n        if i[1]!= common:\n            dissimilar.append(i[0])\n    return dissimilar\n",
        "num_ids": 67
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    dissim_tup = set()\n    for element in tup1:\n        if element in tup2:\n            dissim_tup.add(element)\n    return dissim_tup\n",
        "num_ids": 80
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    l1 = []\n    l2 = []\n    for i in range(0, len(test_tup1)):\n        if (test_tup1[i] not in l1 and test_tup2[i] not in l2):\n            l1.append(test_tup1[i])\n            l2.append(test_tup2[i])\n    return l1, l2\n",
        "num_ids": 106
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1 = test_tup1[:]\n    tup2 = test_tup2[:]\n    \n    while len(tup1)>0 and len(tup2)>0:\n        if tup1[0] < tup2[0]:\n            tup1.pop(0)\n        else:\n            tup2.pop(0)\n    \n    return tup1+tup2\n",
        "num_ids": 103
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result_tup1 = tuple(test_tup1)\n    result_tup2 = tuple(test_tup2)\n    return result_tup1[0]!= result_tup2[0] and \\\n        result_tup1[1]!= result_tup2[1] and \\\n        result_tup1[2]!= result_tup2[2] and \\\n        result_tup1[3]!= result_tup2[3] and \\\n        result_tup1[4]!= result_tup2[4] and \\\n        result_tup1[5]!= result_tup2[5] and \\\n        result_tup1[6]!= result_tup2[6] and \\\n        result_tup1[7]!= result_tup2[7] and \\\n        result_tup1[8]!= result_tup2[8]\n",
        "num_ids": 231
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = set()\n    res = res.union(set(test_tup1))\n    res = res.union(set(test_tup2))\n    res = res.union(set(test_tup1 + test_tup2))\n    res = res.union(set(test_tup1 - test_tup2))\n    res = res.union(set(test_tup1 | test_tup2))\n    res = res.union(set(test_tup1 & test_tup2))\n    res = res.union(set(test_tup1 - test_tup2))\n    return res\n",
        "num_ids": 154
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple[0])\n    return test_tuple[1]\n",
        "num_ids": 26
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for n in test_tuple:\n        if n % 2 == 0:\n            even_list.append(n)\n    even_fnc(even_list)\n",
        "num_ids": 49
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_arr, odd_arr = test_tuple \n    even_idx, odd_idx = odd_arr.index(even_fnc), odd_arr.index(odd_fnc)\n    even_tuple = tuple(odd_arr[:even_idx]+even_arr[even_idx+1:])\n    odd_tuple = tuple(odd_arr[:odd_idx]+odd_arr[odd_idx+1:])\n    return even_tuple, odd_tuple \n",
        "num_ids": 126
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print('running even_ele')\n    odd_tuple = tuple(test_tuple)\n    odd_tuple = odd_tuple[0]\n    print(odd_tuple)\n    new_even = []\n    for i in odd_tuple:\n        if i%2!= 0:\n            new_even.append(i)\n    even_tuple = tuple(new_even)\n    even_tuple = tuple(even_tuple)\n    even_tuple = tuple(even_tuple)\n    even_tuple = even_fnc(even_tuple)\n    print(even_tuple)\n",
        "num_ids": 152
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_nested_tuple = []\n    for ele in test_tuple:\n        if ele%2 == 0:\n            even_nested_tuple.append(ele)\n    even_nested_tuple = tuple(even_nested_tuple)\n",
        "num_ids": 66
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    nested_tuple = []\n    even_tuple = []\n    for tuple_num,value in enumerate(test_tuple):\n        if tuple_num%2 == 0:\n            nested_tuple.append(value)\n        else:\n            even_tuple.append(value)\n    return (even_tuple,nested_tuple)\n",
        "num_ids": 103
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ele = 0\n    even_ele = [None for _ in range(len(test_tuple))]\n    for i in range(len(test_tuple)):\n        if test_tuple[i] % 2 == 0:\n            even_ele[i] = even_fnc(test_tuple[i])\n        else:\n            even_ele[i] = test_tuple[i]\n    return even_ele\n",
        "num_ids": 107
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def odd_ele(test_tuple, odd_fnc):\n        '''\n        Write a function to remove uneven elements in the nested mixed tuple.\n        '''\n        def get_odd_and_even(test_tuple):\n            odd_list = []\n            even_list = []\n            for i in test_tuple:\n                if i % 2 == 0:\n                    odd_list.append(i)\n                else:\n                    even_list.append(i)\n            return odd_list, even_list\n        \n        def odd_and_even_list(test_tuple):\n            odd_and_even = get_odd_and_even(test_tuple)\n            return odd_and_even\n",
        "num_ids": 132
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(test_tuple[0])):\n        if test_tuple[1][i] % 2 == 0:\n            even_list.append(test_tuple[0][i])\n        else:\n            odd_list.append(test_tuple[0][i])\n    return even_list, odd_list\n",
        "num_ids": 98
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if not i:\n            return test_tuple\n        if i % 2!= 0:\n            test_tuple.remove(i)\n    return test_tuple\n    \ntest_tuple = (1,2,3,4,5,6)\neven_fnc(test_tuple, even_fnc)\n",
        "num_ids": 90
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # write your code here\n    return((b**2)*s)\n",
        "num_ids": 19
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    for x in range(b):\n        for y in range(s):\n            area += (x + y)*b\n    return area\n",
        "num_ids": 39
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=0\n    b=b**2\n    s=s**2\n    for i in range(0,s):\n        for j in range(0,s):\n            area+=b+s-i-j\n    area=area**0.5\n    return area\n",
        "num_ids": 67
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def check(b,s):\n        if b == 0:\n            return s\n        return check(b - 1, s) + b * s\n",
        "num_ids": 37
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    result = 0\n    for i in range(b):\n        for j in range(s):\n            result += (i + j) * (1 + j) *.5\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    p = 0\n    if (b == 0):\n        p += 1\n    else:\n        for i in range(0,b):\n            p += 1\n            for j in range(0,s):\n                print(\" \", end=\"\")\n            for k in range(0,p):\n                print(\"*\", end=\"\")\n            print()\n        for i in range(0,b):\n            p += 1\n            for j in range(0,s):\n                print(\" \", end=\"\")\n            for k in range(0,p):\n                print(\"*\", end=\"\")\n            print()\n    print(\"The base edge of the pyramid is: \", p)",
        "num_ids": 156
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 0.5 * 4 * b * (s**2)\n",
        "num_ids": 18
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #determine if the base is an integer or an int\n    try:\n        base = int(b)\n    except:\n        base = int(b)\n    try:\n        height = int(s)\n    except:\n        height = int(s)\n    #return the area of the pyramid with the given base edge and height\n    return base * height\n",
        "num_ids": 87
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s*(s+1)/2\n    return area\n",
        "num_ids": 20
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return \"True\"\n    else:\n        return \"False\"\n",
        "num_ids": 26
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1=={}\n",
        "num_ids": 10
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 is {}\n",
        "num_ids": 9
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1.keys() == []\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "num_ids": 9
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1=={}\n",
        "num_ids": 10
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c=1\n    for i in range(1,num):\n        c=c*(i+1)\n    return c\n",
        "num_ids": 33
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num > 0:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n    else:\n        return 0\n",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def compute_nth_catalan(n, n_digit):\n        '''\n        Function computes the nth catalan number\n        '''\n        if n < 1:\n            return None\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 6\n        if n == 4:\n            return 24\n        if n == 5:\n            return 120\n        if n == 6:\n            return 720\n        if n == 7:\n            return 1560\n        if n == 8:\n            return 2560\n        if n == 9:\n            return 36360\n",
        "num_ids": 115
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # return function.__call__(x, y)\n    # return catalan_number(x, y)\n    return lambda x, y: catalan_number(x, y)\n    # return lambda x, y: catalan_number(x, y)\n",
        "num_ids": 64
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def calculate_catalan_number(num):\n        '''\n        Use a helper function to calculate the first nth term of the catalan number.\n        '''\n        if num == 1:\n            return 1\n        else:\n            return calculate_catalan_number(num-1) + calculate_catalan_number(num-2)\n    return calculate_catalan_number(num)\n",
        "num_ids": 55
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 6\n    if num == 4:\n        return 24\n    if num == 5:\n        return 120\n    if num == 6:\n        return 720\n    if num == 7:\n        return 2480\n    if num == 8:\n        return 12240\n    if num == 9:\n        return 5720\n    if num == 10:\n        return 5580\n    if num == 11:\n        return 5120\n    if num == 12:\n        return 6400\n    if num == 13:\n        return 21600\n    if num == 14:\n        return 6928\n    if num == 15:\n        return 13400\n    if num == 16:\n        return 38400\n    if num == 17:\n        return 9600\n    if num == 18:\n        return 18000\n    if num == 19:\n        return 46600\n    if num == 20:\n        return 26900\n    if num == 21:\n        return 9300\n    if num == 22:\n        return 18000\n    if num == 23:\n        return 7200\n    if num == 24:\n        return 7600\n    if num == 25:\n        return 5400\n    if num == 26:\n        return 6920\n    if num == 27:\n        return 9600\n    if num == 28:\n        return 25000\n    if num == 29:\n        return 7200\n    if num == 30:\n        return 5800\n    if num == 31:\n        return 12000\n    if num == 32:\n        return 15000\n    if num == 33:\n        return 20000\n    if num == 34:\n        return 50000\n    if num == 35:\n        return 9600\n    if num == 36:\n        return 25000\n    if num == 37:\n        return 13400\n    if num == 38:\n        return 5200\n    if num == 39:\n        return 9600\n    if num == 40:\n        return 25000\n    if num == 41:\n        return 7200\n    if num == 42:\n        return 5600\n    if num == 43:\n        return 25600\n    if num == 44:\n        return 27400\n    if num == 45:\n        return 29600\n    if num == 46:\n        return 9600\n    if num == 47:\n        return 26000\n    if num == 48:\n        return 27200\n    if num == 49:\n        return 9600\n    if num == 50:\n        return 25000\n    if num == 51:\n        return 7200\n    if num == 52:\n        return 55000\n    if num == 53:\n        return 9600\n    if num == 54:\n        return 25000\n    if num == 55:\n        return 11000\n    if num == 56:\n        return 100000\n    if num == 57:\n        return 90000\n    if num == 58:\n        return 100000\n    if num == 59:\n        return 50000\n    if num == 60:\n        return 100000\n    if num == 61:\n        return 99000\n    if num == 62:\n        return 40000\n    if num == 63:\n        return 25000\n    if num == 64:\n        return 90000\n    if num == 65:\n        return 35000\n    if num == 66:\n        return 90000\n    if num == 67:\n        return 90000\n    if num == 68:\n        return 40000\n    if num == 69:\n        return 90000\n    if num == 70:\n        return 25000\n    if num == 71:\n        return 35000\n    if num == 72:\n        return 50000\n    if num == 73:\n        return 25000\n    if num == 74:\n        return 30000\n    if num == 75:\n        return 90000\n    if num == 76:\n        return 90000\n    if num == 77:\n        return 50000\n    if num == 78:\n        return 90000\n    if num == 79:\n        return 3900\n    if num == 80:\n        return 40000\n    if num == 81:\n        return 70000\n    if num == 82:\n        return 2200\n    if num == 83:\n        return 3900\n    if num == 84:\n        return 60000\n    if num == 85:\n        return 90000\n    if num == 86:\n        return 90000\n    if num == 87:\n        return 90000\n    if num == 88:\n        return 90000\n    if num == 89:\n        return 90000\n    if num == 90:\n        return 90000\n    if num == 91:\n        return 40000\n    if num == 92:\n        return 90000\n    if num == 93:\n        return 50000\n    if num == 94:\n        return 90000\n    if num == 95:\n        return 13000\n    if num == 96:\n        return 14000\n    if num == 97:\n        return 15000\n    if num == 98:\n        return 16000\n    if num == 99:\n        return 17000\n    if num == 100:\n        return 18000\n    if num == 101:\n        return 19000\n    if num == 102:\n        return 20500\n    if num == 103:\n        return 21000\n    if num == 104:\n        return 18000\n    if num == 105:\n        return 19000\n    if num == 106:\n        return 21000\n    if num == 107:\n        return 24000\n    if num == 108:\n        return 21000\n    if num == 109:\n        return 21000\n    if num == 110:\n        return 24000\n    if num == 111:\n        return 25000\n    if num == 112:\n        return 21000\n    if num == 113:\n        return 24000\n    if num == 114:\n        return 25000\n    if num == 115:\n        return 25000\n    if num == 116:\n        return 25000\n    if num == 117:\n        return 25000\n    if num == 118:\n        return 25000\n    if num == 119:\n        return 25000\n    if num == 120:\n        return 25000\n    if num == 121:\n        return 25000\n    if num == 122:\n        return 25000\n    if num == 123:\n        return 25000\n    if num == 124:\n        return 25000\n    if num == 125:\n        return 25000\n    if num == 126:\n        return 25000\n    if num == 127:\n        return 25000\n    if num == 128:\n        return 25000\n    if num == 129:\n        return 25000\n    if num == 130:\n        return 25000\n    if num == 131:\n        return 25000\n    if num == 132:\n        return 25000\n    if num == 133:\n        return 25000\n    if num == 134:\n        return 25000\n    if num == 135:\n        return 25000\n    if num == 136:\n        return 25000\n    if num == 137:\n        return 25000\n    if num == 138:\n        return 25000\n    if num == 139:\n        return 25000\n    if num == 140:\n        return 25000\n    if num == 141:\n        return 25000\n    if num == 142:\n        return 25000\n    if num == 143:\n        return 25000\n    if num == 144:\n        return 25000\n    if num == 145:\n        return 25000\n    if num == 146:\n        return 25000\n    if num == 147:\n        return 25000\n    if num == 148:\n        return 25000\n    if num == 149:\n        return 25000\n    if num == 150:\n        return 25000\n    if num == 151:\n        return 25000\n    if num == 152:\n        return 25000\n    if num == 153:\n        return 25000\n    if num == 154:\n        return 25000\n    if num == 155:\n        return 25000\n    if num == 156:\n        return 25000\n    if num == 157:\n        return 25000\n    if num == 158:\n        return 25000\n    if num == 159:\n        return 25000\n    if num == 160:\n        return 25000\n    if num == 161:\n        return 25000\n    if num == 162:\n        return 25000\n    if num == 163:\n        return 25000\n    if num == 164:\n        return 25000\n    if num == 165:\n        return 25000\n    if num == 166:\n        return 25000\n    if num == 167:\n        return 25000\n    if num == 168:\n        return 25000\n    if num == 169:",
        "num_ids": 2019
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    prev = 1\n    while n < num:\n        n += 1\n        prev = prev * prev\n        prev = prev % (10 ** 9 + 7)\n    return prev\n    \ndef fatorial(n):\n    '''\n    Returns the product of the first n natural numbers in a \n    recursive factorization.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * fatorial(n - 1)\n",
        "num_ids": 53
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #Initialize result to 0\n    result = 0\n    #Get the number of terms\n    if num == 0:\n        return result\n    \n    #Get the first term\n    if num == 1:\n        return 1\n    \n    #For each term,\n    #calculate the number of combinations of 1-3\n    for i in range(2, num):\n        result += (catalan_number(num-1) * catalan_number(i-1))\n    \n    return result\n",
        "num_ids": 118
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return (catalan(n - 1) + catalan(n - 1))\n",
        "num_ids": 56
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    def catalan_number(num):\n        if num == 0:\n            return 1\n        if num == 1:\n            return 2\n        if num == 2:\n            return 3\n        if num == 3:\n            return 4\n        if num % 2 == 1:\n            return catalan_number(num - 2) * 2 + catalan_number(num - 1)\n        else:\n            return math.comb(num, num - 2) * catalan_number(num - 1) + math.comb(num - 1, num - 2) * 2\n",
        "num_ids": 135
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.findall(r'(?<=[^aeiou])[a-zA-Z]*ly$', text)\n    if match:\n        return match[0]\n    else:\n        return None\n    \ndef find_adjuncts(text):\n    '''\n    Write a function to find the first adjunct ending with ly and its positions in a given string.\n    '''\n    match = re.findall(r'(?<=[^aeiou])[^aeiou]*ly$', text)\n    if match:\n        return match[0]\n    else:\n        return None\n",
        "num_ids": 54
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    i = 0\n    while i < len(text) - 1:\n        if text[i] == \"l\" or text[i] == \"ly\":\n            adverbs.append(text[i])\n            i += 1\n        elif text[i] == \"a\" or text[i] == \"and\" or text[i] == \"the\":\n            adverbs.append(text[i])\n            i += 1\n        elif text[i] == \"e\" or text[i] == \"an\":\n            adverbs.append(text[i])\n            i += 1\n        elif text[i] == \"and\" or text[i] == \"an\":\n            adverbs.append(text[i])\n            i += 1\n        elif text[i] == \"e\" or text[i] == \"s\":\n            adverbs.append(text[i])\n            i += 1\n        elif text[i] == \"s\" or text[i] == \"t\":\n            adverbs.append(text[i])\n            i += 1\n        elif text[i] == \"y\" or text[i] == \"o\":\n            adverbs.append(text[i])\n            i += 1\n        elif text[i] == \"i\" or text[i] == \"and\":\n            adverbs.append(text[i])\n            i += 1\n        elif text[i] == \"t\" or text[i] == \"ing\":\n            adverbs.append(text[i])\n            i += 1\n        else:\n            i += 1\n    return adverbs\n",
        "num_ids": 380
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = {}\n    pattern = r'(.*)ly'\n    regex = re.compile(pattern)\n    m = regex.findall(text)\n    for i in m:\n        pos = i.find(':')\n        adverbs[i] = (pos, len(i))\n    return adverbs\n",
        "num_ids": 79
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Remove all adverbs from the input string\n    text = text.replace('ly', '')\n    # Create a pattern to find first adverb ending with ly\n    pattern = re.compile(r'ly', re.IGNORECASE)\n    # Find all adverbs in the string\n    adverbs = pattern.findall(text)\n    # Filter only the adverbs that were found\n    adverbs = list(filter(lambda x: x.endswith('ly'), adverbs))\n    # Return the first adverb ending with ly\n    return adverbs[0]\n",
        "num_ids": 134
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    last = 0\n    for index, i in enumerate(text):\n        if i == 'ly':\n            if last == 0:\n                last = index\n            elif text[last] == 'ly':\n                adverbs.append(last)\n                last = 0\n    return adverbs\ndef find_vocals(text):\n    '''\n    Write a function to find the first vowel ending with th.\n    '''\n    vocals = []\n    for i in text:\n        if i == 'th':\n            if len(vocals) == 0:\n                vocals.append(i)\n            elif i == vocals[len(vocals) - 1]:\n                vocals.append(i)\n    return vocals\ndef find_double_hyphen(text):\n    '''\n    Write a function to find the first double hyphen ending with th.\n    '''\n    double_hyphen = re.compile(r'^.*th')\n    double_hyphen_positions = []\n    for i in text:\n        if i == 'th':\n            double_hyphen_positions.append(double_hyphen.search(text).start())\n    return double_hyphen_positions\ndef find_intercept(text):\n    '''\n    Write a function to find the first intercept ending with th.\n    '''\n    intercept = re.compile(r'^.*th')\n    intercept_positions = []\n    for i in text:\n        if i == 'th':\n            intercept_positions.append(intercept.search(text).start())\n    return intercept_positions\ndef find_punctuation(text):\n    '''\n    Write a function to find the first punctuation ending with th.\n    '''\n    punctuation = re.compile(r'^.*th|th|th|th|th|th|th|th|th')\n    punctuation_positions = []\n    for i in text:\n        if i == 'th':\n            punctuation_positions.append(punctuation.search(text).start())\n    return punctuation_positions\ndef find_end_notes(text):\n    '''\n    Write a function to find the last note ending with th.\n    '''\n    end_notes = re.compile(r'^.*th')\n    end_notes_positions = []\n    for i in text:\n        if i == 'th':\n            end_notes_positions.append(end_notes.search(text).start())\n    return end_notes_positions\ndef find_number(text):\n    '''\n    Write a function to find the last number ending with th.\n    '''\n    number = re.compile(r'^.*th')\n    number_positions = []\n    for i in text:\n        if i == 'th':\n            number_positions.append(number.search(text).start())\n    return number_positions\ndef find_flor(text):\n    '''\n    Write a function to find the last flor ending with th.\n    '''\n    flor = re.compile(r'^.*th')\n    flor_positions = []\n    for i in text:\n        if i == 'th':\n            flor_positions.append(flor.search(text).start())\n    return flor_positions\ndef find_second_ly(text):\n    '''\n    Write a function to find the last secondly ending with th.\n    '''\n    secondly = re.compile(r'^.*th')\n    secondly_positions = []\n    for i in text:\n        if i == 'th':\n            secondly_positions.append(secondly.search(text).start())\n    return secondly_positions\ndef find_first_ly(text):\n    '''\n    Write a function to find the last firstly ending with th.\n    '''\n    firstly = re.compile(r'^.*th')\n    firstly_positions = []\n    for i in text:\n        if i == 'th':\n            firstly_positions.append(firstly.search(text).start())\n    return firstly_positions\ndef find_second_ly_to_end(text):\n    '''\n    Write a function to find the secondly ending to the end of the last firstly ending with th.\n    '''\n    secondly_to_end = re.compile(r'^.*th')\n    secondly_to_end_positions = []\n    for i in text:\n        if i == 'th':\n            secondly_to_end_positions.append(secondly_to_end.search(text).start())\n    return secondly_to_end_positions\ndef find_third_ly_to_end(text):\n    '''\n    Write a function to find the thirdly ending to the end of the last firstly ending with th.\n    '''\n    thirdly_to_end = re.compile(r'^.*th')\n    thirdly_to_end_positions = []\n    for i in text:\n        if i == 'th':\n            thirdly_to_end_positions.append(thirdly_to_end.search(text).start())\n    return thirdly_to_end_positions\ndef find_fourth_ly_to_end(text):\n    '''\n    Write a function to find the fourthly ending to the end of the last firstly ending with th.\n    '''\n    fourthly_to_end = re.compile(r'^.*th')\n    fourthly_to_end_positions = []\n    for i in text:\n        if i == 'th':\n            fourthly_to_end_positions.append(fourthly_to_end.search(text).start())\n    return fourthly_to_end_positions\ndef find_fifth_ly_to_end(text):\n    '''\n    Write a function to find the fifthly ending to the end of the last firstly ending with th.\n    '''\n    fifthly_to_end = re.compile(r'^.*th')\n    fifthly_to_end_positions = []\n    for i in text:\n        if i == 'th':\n            fifthly_to_end_positions.append(fifthly_to_end.search(text).start())\n    return fifthly_to_end_positions\ndef find_sixthly_to_end(text):\n    '''\n    Write a function to find the sixthly ending to the end of the last firstly ending with th.\n    '''\n    sixthly_to_end = re.compile(r'^.*th')\n    sixthly_to_end_positions = []\n    for i in text:\n        if i == 'th':\n            sixthly_to_end_positions.append(sixthly_to_end.search(text).start())\n    return sixthly_to_end_positions\ndef find_seventhly_to_end(text):\n    '''\n    Write a function to find the seventhly ending to the end of the last firstly ending with th.\n    '''\n    seventhly_to_end = re.compile(r'^.*th')\n    seventhly_to_end_positions = []\n    for i in text:\n        if i == 'th':\n            seventhly_to_end_positions.append(seventhly_to_end.search(text).start())\n    return seventhly_to_end_positions\ndef find_eighthly_to_end(text):\n    '''\n    Write a function to find the eighthly ending to the end of the last firstly ending with th.\n    '''\n    eighthly_to_end = re.compile(r'^.*th')\n    eighthly_to_end_positions = []\n    for i in text:\n        if i == 'th':\n            eighthly_to_end_positions.append(eighthly_to_end.search(text).start())\n    return eighthly_to_end_positions\ndef find_ninethly_to_end(text):\n    '''\n    Write a function to find the ninthly ending to the end of the last firstly ending with th.\n    '''\n    ninethly_to_end = re.compile(r'^.*th')\n    ninethly",
        "num_ids": 27
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = [u'\\u02C3', u'\\u02C3\\u02C3', u'\\u02C3\\u02C3\\u02C3', u'\\u02C3\\u02C3\\u02C3\\u02C3', u'\\u02C3\\u02C3\\u02C3\\u02C3\\u02C3']\n    text = text.replace('\\n','').replace('\\r', '').replace('\\t','')\n    for i in adverbs:\n        if i in text:\n            text = text.replace(i, '').replace('\\n','').replace('\\r', '').replace('\\t','')\n    text = text.split(' ')\n    text =''.join(text)\n    return text\n",
        "num_ids": 196
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # i = 0\n    # adverbs = []\n    # while i < len(text):\n    #     if text[i:i+2].endswith('ly'):\n    #         adverbs.append(i)\n    #     i+=1\n    # return adverbs\n    #return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(i)\n    # return adverbs\n    #adverbs = []\n    #for i in range(len(text)):\n    #    if text[i:i+2].endswith('ly'):\n    #        adverbs.append(",
        "num_ids": 2004
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    def is_ly_ending(i, word):\n        if word[i] == 'y':\n            return i+1 < len(word) and word[i+1] == 'ly'\n        else:\n            return False\n    for i, word in enumerate(text):\n        if word[:1] == 'ly' and is_ly_ending(i, word):\n            if len(word) > 2 and word[2] == 'e':\n                yield i+1, word\n            else:\n                yield i+1, word[1:]\n        else:\n            yield i, word\n",
        "num_ids": 145
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    adverb_ending = []\n    list = []\n    for i in range(len(text)):\n        if text[i].endswith('ly') or text[i].endswith('lya'):\n            adverb_ending.append(i)\n            adverbs.append(text[i])\n    for i in adverb_ending:\n        adverb_ending.remove(i)\n    for i in adverb_ending:\n        start = i\n        while text[start+1].endswith('ly'):\n            list.append(start)\n            start += 1\n        list.append(start)\n        start += 1\n    return list\n",
        "num_ids": 163
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # get the list of adverbs\n    adverbs = []\n    list = [\n        \"a\", \"an\", \"the\", \"for\", \"an\", \"a\", \"any\", \"the\", \"some\", \"an\",\n        \"any\", \"any\", \"any\", \"another\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"a\", \"a\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"a\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"a\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"a\", \"an\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", ",
        "num_ids": 1947
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if not heap or item[1] < heap[0][1]:\n            heapq.heappush(heap,item)\n        else:\n            heapq.heappushpop(heap,item)\n    return heap\n",
        "num_ids": 71
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[1])\n        # print(i[1])\n    \n    # print(heap)\n    # print(heapq.nlargest(n,heap))\n    # print(heapq.nsmallest(n,heap))\n    return heapq.nlargest(n,heap)\n",
        "num_ids": 100
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(n,0,-1):\n        if items[0]<heapq.heappop(items):\n            return i\n    return 0\ndef search_k_expensive_items(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef find_k_least_expensive_items(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items2(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items3(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items4(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items5(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items6(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items7(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items8(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items9(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items10(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items11(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items12(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items13(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items14(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items15(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items16(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items17(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items18(dataset,k):\n    '''\n    Writ",
        "num_ids": 4
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in items:\n        heapq.heappush(heap,i[2])\n",
        "num_ids": 32
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items) <= n:\n        return items\n    else:\n        return heapq.nlargest(n, items, key=lambda x: items[x])\n",
        "num_ids": 42
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    heap = []\n    \n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    \n    return heap\n",
        "num_ids": 64
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    for i in range(n):\n        heapq.heappush(heap,(sorted_items[i][1],i))\n",
        "num_ids": 66
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return []\n    \n    # Initialize the heap.\n    heapq.heapify(items)\n",
        "num_ids": 35
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in items:\n        heapq.heappush(heap,i)\n    #print heap\n    for i in range(n):\n        heapq.heappop(heap)\n    return heap\n",
        "num_ids": 61
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(0,n):\n        heapq.heappush(items,-items[i][1])\n    items=list(items)\n    items.sort(reverse=True)\n    items=items[0:n]\n    return items\n",
        "num_ids": 75
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n",
        "num_ids": 17
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:len(l)]\n",
        "num_ids": 19
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return list(l[n:])\n",
        "num_ids": 12
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    if l is None:\n        return None\n    else:\n        for i in range(n):\n            l.insert(0, l.pop(0))\n    \n    return l\n    ",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    i = 0\n    while i < n:\n        yield l[i:]\n        i += 1\n",
        "num_ids": 27
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(len(l)):\n        l[i] = l[i][:n] + l[i][n:]\n    return l\n",
        "num_ids": 39
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    def partition(l, n):\n        i = 0\n        p = []\n        while i < len(l):\n            if l[i] < n:\n                p.append(l[i])\n                i += 1\n            else:\n                p.append(l[i])\n                l.remove(l[i])\n        return p\n    return partition(l, n)\n",
        "num_ids": 92
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # write your code here\n    return l[:n],l[n:]\n",
        "num_ids": 21
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n",
        "num_ids": 27
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n    # Return a tuple.\n",
        "num_ids": 22
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n",
        "num_ids": 15
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in listx:\n        tup = tup + (i,)\n    return tup\n",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n",
        "num_ids": 15
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    return tuple(listx)\n",
        "num_ids": 12
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = ()\n    for i in range(len(listx)):\n        tuplex += (listx[i],)\n    return tuplex\n",
        "num_ids": 41
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = ()\n    for element in listx:\n        tuplex += (element,)\n    return tuplex\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2019
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    def check_leap(n):\n        if n % 4 == 0:\n            return True\n        elif n % 100 == 0:\n            return True\n        elif n % 400 == 0:\n            return True\n        else:\n            return False\n    if len(nums) > 2:\n        if check_leap(nums[0]) and check_leap(nums[1]):\n            return min(nums[0], nums[1]) - max(nums[0], nums[1])\n        else:\n            return min(nums[0], nums[1]) - max(nums[0], nums[1]) - 1\n    else:\n        return min(nums[0], nums[1]) - max(nums[0], nums[1])\n",
        "num_ids": 191
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # O(n)\n    # O(1)\n    big_nums = nums[0:len(nums)//2]\n    small_nums = nums[len(nums)//2:len(nums)//2+len(nums)//3]\n    small_nums.sort()\n    diff = 0\n    for i in range(len(nums)):\n        diff = abs(small_nums[i]-big_nums[i])\n    return diff\n",
        "num_ids": 121
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = nums[0] - nums[-1]\n    for i in range(1, len(nums)):\n        diff = max(diff, nums[i] - nums[i-1])\n    return diff\n",
        "num_ids": 58
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big_diff = nums[0] - nums[-1]\n    if big_diff > 0:\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                big_diff -= abs(nums[i])\n        print(big_diff)\n    elif big_diff < 0:\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                big_diff += abs(nums[i])\n        print(big_diff)\n    else:\n        print(0)\n",
        "num_ids": 139
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest, largest = min(nums), max(nums)\n    diff = largest - smallest\n    return diff\n",
        "num_ids": 30
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Using the built-in function sort()\n    nums.sort()\n    # print(nums)\n    return nums[len(nums)-1] - nums[0]\n",
        "num_ids": 47
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    temp = []\n    for i in range(len(nums)):\n        temp.append(nums[i]-min(nums))\n    for i in range(len(nums)):\n        if nums[i]!= min(nums):\n            temp[i] = nums[i] - min(nums)\n    return max(temp)\n",
        "num_ids": 89
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = []\n    for i in range(len(nums)):\n        if nums[i] > nums[i-1]:\n            diff.append(nums[i-1]-nums[i])\n        else:\n            diff.append(nums[i]-nums[i-1])\n    print(nums)\n    print(\"Difference is\",diff)\n    print(min(diff))\n    print(max(diff))\n",
        "num_ids": 109
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for num in nums:\n        if num > max:\n            max = num\n        elif num < min:\n            min = num\n    return max - min\n",
        "num_ids": 59
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return\n    if a > b:\n        a, b = b, a\n        a = b\n        b = a\n    for i in range(a, b+1):\n        if i == perfect_square(i):\n            return i\n",
        "num_ids": 66
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a==b:\n        return True\n    for i in range(a,b):\n        if(i**2==i):\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    '''\n    perfect_squares = []\n",
        "num_ids": 10
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if b == 0:\n        return a == 1\n    if a == b:\n        return True\n    \n    # lets go in 2's compliment of a and b\n    if b < a:\n        a, b = b, a\n    if a == b:\n        return True\n",
        "num_ids": 84
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square_sum = 0\n    square_sum += (a*a)\n    square_sum += (b*b)\n",
        "num_ids": 31
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # 1. Start by calculating the values of a and b.\n    a, b = sorted([a, b])\n    while a < b:\n        if (a**2 + b**2) % 1 == 0:\n            return [a, b]\n        else:\n            a += 1\n            b += 1\n",
        "num_ids": 75
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square_sum = 0\n    for i in range(int(a), int(b)+1):\n        if i == 0 or i == 1:\n            pass\n        else:\n            square_sum = i**2\n            if square_sum == i:\n                pass\n            else:\n                pass\n    return square_sum\n",
        "num_ids": 78
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def perfect_squares(a, b):\n        if b == 0:\n            return [a]\n        s = []\n        if b%2 == 0:\n            while a!= b:\n                if a == b:\n                    s.append(a)\n                    break\n                if a%2 == 1:\n                    a = a**2\n                    s.append(a)\n                    break\n                a = a*2\n                s.append(a)\n                a = a**2\n                s.append(a)\n                break\n            return s\n",
        "num_ids": 131
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    from math import sqrt, floor\n    return abs((sqrt(b**2) - a**2)//(b**2) - a**2)\n",
        "num_ids": 39
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x, y = a, b\n    while x * x <= y * y:\n        if x * x > y * y:\n            y = y - x\n        elif x * x < y * y:\n            x = x + y\n        else:\n            return x + y\n    return 'Not possible'\n",
        "num_ids": 76
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # return (cmath.polar(x), cmath.polar(y))\n    return ((x * x) / 2, (y * y) / 2)\n",
        "num_ids": 42
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\n",
        "num_ids": 10
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = round(x,1)\n    y = round(y,1)\n    if x < 0:\n        x = -x\n        y = -y\n    elif x >= 0:\n        x = -x\n    elif y >= 0:\n        y = -y\n    elif y < 0:\n        y = -y\n    if y <= 0:\n        x = -x\n    elif y >= 0:\n        y = -y\n    if x <= 0:\n        x = -x\n    elif x >= 0:\n        x = -x\n    return round(x,1), round(y,1)\ndef rect_coordinates(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    polar_x, polar_y = polar_x, polar_y\n    if polar_y < 0:\n        polar_y = -polar_y\n    elif polar_y >= 0:\n        polar_y = -polar_y\n    elif polar_y < 0:\n        polar_y = -polar_y\n    if polar_x < 0:\n        polar_x = -polar_x\n    elif polar_x >= 0:\n        polar_x = -polar_x\n    elif polar_x < 0:\n        polar_x = -polar_x\n    return polar_x, polar_y\ndef polar_fun(x, y):\n    '''\n    Write a function that will calculate the polar coordinates for the given x and y.\n    '''\n    r_x = (x**3+y**3)**0.5\n    r_y = (x**3+y**3)**0.5\n    polar_x = round(r_x*cmath.pi,1)\n    polar_y = round(r_y*cmath.pi,1)\n    if x < 0:\n        polar_x = -polar_x\n        polar_y = -polar_y\n    elif x >= 0:\n        polar_x = -polar_x\n        polar_y = -polar_y\n    elif y >= 0:\n        polar_x = -polar_x\n        polar_y = -polar_y\n    elif y < 0:\n        polar_x = -polar_x\n        polar_y = -polar_y\n    return round(polar_x,1), round(polar_y,1)\ndef rect_fun(polar_x, polar_y):\n    '''\n    Write a function that will calculate the rectangular coordinates for the given polar coordinates.\n    '''\n    r_x = (polar_x**3+polar_y**3)**0.5\n    r_y = (polar_x**3+polar_y**3)**0.5\n    return round(r_x,1), round(r_y,1)\ndef list_fun(polar_x, polar_y):\n    '''\n    Write a function that will calculate the rectangular coordinates for the given polar coordinates.\n    '''\n    r_x = (polar_x**3+polar_y**3)**0.5\n    r_y = (polar_x**3+polar_y**3)**0.5\n    r_z = (polar_x**3+polar_y**3)**0.5\n    return round(r_x,1), round(r_y,1), round(r_z,1)\ndef rectangle_fun(polar_x, polar_y):\n    '''\n    Write a function that will calculate the rectangular coordinates for the given polar coordinates.\n    '''\n    r_x = (polar_x**3+polar_y**3)**0.5\n    r_y = (polar_x**3+polar_y**3)**0.5\n    r_z = (polar_x**3+polar_y**3)**0.5\n    return round(r_x,1), round(r_y,1), round(r_z,1)\ndef torus_fun(r_x, r_y, r_z):\n    '''\n    Write a function that will calculate the polar coordinates for the given polar coordinates.\n    '''\n    x = (r_y-r_z)\n    y = -r_z\n    z = -r_x\n    return round(x,1), round(y,1), round(z,1)\ndef sphere_fun(r_x, r_y, r_z):\n    '''\n    Write a function that will calculate the polar coordinates for the given polar coordinates.\n    '''\n    r_x = (r_x**3+r_y**3+r_z**3)**0.5\n    r_y = (r_x**3+r_y**3+r_z**3)**0.5\n    r_z = (r_x**3+r_y**3+r_z**3)**0.5\n    return round(r_x,1), round(r_y,1), round(r_z,1)\ndef equilateral_tetra(a, b, c):\n    '''\n    Write a function that will calculate the polar coordinates for the given polar coordinates.\n    '''\n    x = ((b*c)-(a*b))/2\n    y = ((a*c)-(b*a))/2\n    z = (b*a)/(a**2-b**2+c**2)\n    return round(x,1), round(y,1), round(z,1)\ndef equilateral_rect(a, b, c):\n    '''\n    Write a function that will calculate the rectangular coordinates for the given polar coordinates.\n    '''\n    x = round((a*c)-(b*a),1)\n    y = round((b*c)-(a*b),1)\n    z = round((a*b)/(a**2-b**2+c**2),1)\n    return round(x,1), round(y,1), round(z,1)\ndef equilateral_tetra_rect(a, b, c):\n    '''\n    Write a function that will calculate the rectangular coordinates for the given polar coordinates.\n    '''\n    x = round(((b*c)-(a*b))/2,1)\n    y = round(((a*c)-(b*a))/2,1)\n    z = round(((b*a)/(a**2-b**2+c**2)),1)\n    return round(x,1), round(y,1), round(z,1)\ndef equilateral_tetra_rect_matrix(a, b, c):\n    '''\n    Write a function that will calculate the rectangular coordinates for the given polar coordinates.\n    '''\n    r = [[a,0,0,0],\n        [0,b,0,0],\n        [0,0,c,0],\n        [0,0,0,1]]\n    return r\ndef equilateral_tetra_rect_matrix_list(a, b, c):\n    '''\n    Write a function that will calculate the rectangular coordinates for the given polar coordinates.\n    '''\n    r = [[a,0,0,0],\n        [0,b,0,0],\n        [0,0,c,0],\n        [0,0,0,1]]\n    return r\ndef equilateral_tetra_rect_matrix_list_list(a, b, c):\n    '''\n    Write a function that will calculate the rectangular coordinates for the given polar coordinates.\n    '''\n    r = [[a,0,0,0],\n        [0,b,0,0],\n        [0,0,c,0],\n        [0,0,0,1]]\n    return r\ndef equilateral_tetra_rect_matrix_matrix_list(a, b, c):\n    '''\n    Write a function that will calculate the rectangular coordinates for the given polar coordinates.\n    '''\n    r = [[a,0,0,0],\n        [0,b,0,0],\n        [0,0,c,0],\n        [0,0,0,1]]\n    return r\ndef equilateral_tetr",
        "num_ids": 58
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    return r\n",
        "num_ids": 19
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    a = cmath.pi * 2 / 3\n    b = cmath.sqrt(x**2 + y**2)\n    angle = (3 * a * b) / 2\n    return (b, angle)\ndef polar_rect_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    bounds_b = (bounds[0] + bounds[2], bounds[1] + bounds[3])\n    return (bounds_b[0], bounds_b[1])\ndef polar_triangle(p):\n    '''\n    Write a function to calculate the triangle.\n    '''\n    a = ((p[0][0] - p[1][0]) ** 2 + (p[0][1] - p[1][1]) ** 2) ** 0.5\n    b = ((p[1][0] - p[2][0]) ** 2 + (p[1][1] - p[2][1]) ** 2) ** 0.5\n    c = ((p[0][1] - p[2][1]) ** 2 + (p[0][0] - p[2][0]) ** 2) ** 0.5\n    # return cmath.sqrt(a**2 + b**2)\n    return (a, b, c)\ndef polar_triangle_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    bounds_b = (bounds[0] + bounds[2], bounds[1] + bounds[3])\n    return (bounds_b[0], bounds_b[1])\ndef polar_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    return (bounds[0], bounds[1])\ndef polar_fade(a,b,c,d):\n    '''\n    Write a function to calculate the fade.\n    '''\n    return (a * d**2 - b * d + c)**0.5\ndef polar_fade_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    bounds_b = (bounds[0] + bounds[2], bounds[1] + bounds[3])\n    return (bounds_b[0], bounds_b[1])\ndef polar_sphere(p):\n    '''\n    Write a function to calculate the sphere.\n    '''\n    a = ((p[0][0] - p[1][0]) ** 2 + (p[0][1] - p[1][1]) ** 2) ** 0.5\n    b = ((p[1][0] - p[2][0]) ** 2 + (p[1][1] - p[2][1]) ** 2) ** 0.5\n    c = ((p[0][1] - p[2][1]) ** 2 + (p[0][0] - p[2][0]) ** 2) ** 0.5\n    return a,b,c\ndef polar_sphere_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    bounds_b = (bounds[0] + bounds[2], bounds[1] + bounds[3])\n    return (bounds_b[0], bounds_b[1])\ndef polar_circle(p):\n    '''\n    Write a function to calculate the circle.\n    '''\n    a = ((p[0][0] - p[1][0]) ** 2 + (p[0][1] - p[1][1]) ** 2) ** 0.5\n    b = ((p[1][0] - p[2][0]) ** 2 + (p[1][1] - p[2][1]) ** 2) ** 0.5\n    c = ((p[0][1] - p[2][1]) ** 2 + (p[0][0] - p[2][0]) ** 2) ** 0.5\n    return a,b,c\ndef polar_circle_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    bounds_b = (bounds[0] + bounds[2], bounds[1] + bounds[3])\n    return (bounds_b[0], bounds_b[1])\ndef polar_circles(p):\n    '''\n    Write a function to calculate the circles.\n    '''\n    a = ((p[0][0] - p[1][0]) ** 2 + (p[0][1] - p[1][1]) ** 2) ** 0.5\n    b = ((p[1][0] - p[2][0]) ** 2 + (p[1][1] - p[2][1]) ** 2) ** 0.5\n    c = ((p[0][1] - p[2][1]) ** 2 + (p[0][0] - p[2][0]) ** 2) ** 0.5\n    return a,b,c\ndef polar_circles_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    bounds_b = (bounds[0] + bounds[2], bounds[1] + bounds[3])\n    return (bounds_b[0], bounds_b[1])\ndef polar_polygon(p):\n    '''\n    Write a function to calculate the polygon.\n    '''\n    a = ((p[0][0] - p[1][0]) ** 2 + (p[0][1] - p[1][1]) ** 2) ** 0.5\n    b = ((p[1][0] - p[2][0]) ** 2 + (p[1][1] - p[2][1]) ** 2) ** 0.5\n    c = ((p[0][1] - p[2][1]) ** 2 + (p[0][0] - p[2][0]) ** 2) ** 0.5\n    return a,b,c\ndef polar_polygon_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    bounds_b = (bounds[0] + bounds[2], bounds[1] + bounds[3])\n    return (bounds_b[0], bounds_b[1])\ndef polar_cuboid(p):\n    '''\n    Write a function to calculate the cuboid.\n    '''\n    a = ((p[0][0] - p[1][0]) ** 2 + (p[0][1] - p[1][1]) ** 2) ** 0.5\n    b = ((p[1][0] - p[2][0]) ** 2 + (p[1][1] - p[2][1]) ** 2) ** 0.5\n    c = ((p[0][1] - p[2][1]) ** 2 + (p[0][0] - p[2][0]) ** 2) ** 0.5\n    return a,b,c\ndef polar_cuboid_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    bounds_b = (bounds[0] + bounds[2], bounds[1] + bounds[3])\n    return (bounds_b[0], bounds_b[1])\ndef polar_square(p):\n    '''\n    Write a function to calculate the square.\n    '''\n    a = ((p[0][0] - p[1][0]) ** 2 + (p[0][1] - p[1][1]) ** 2) ** 0.5\n    b = ((p[1][0] - p[2][0]) ** 2 + (p[1][1] - p[2][1]) ** 2) ** 0.5\n    return a,b\ndef polar_square_bounds(bounds):\n    '''\n    Write a function to calculate the bounds of a polar coordinates.\n    '''\n    bounds_b = (bounds[0] + bounds[2], bounds[1] + bounds[3])\n    return (bounds_b[0], bounds_b[1])\ndef polar_rect(x,y):\n    '''\n    Write a function to calculate the rectangular coordinates.\n    '''\n    a = ",
        "num_ids": 6
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = float(x)\n    theta = float(y)\n    x2 = x * math.cos(theta) - y * math.sin(theta)\n    y2 = x * math.sin(theta) + y * math.cos(theta)\n    return (round(x2,3),round(y2,3))\ndef rect_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    rad = float(x)\n    theta = float(y)\n    x2 = x * math.cos(theta) - y * math.sin(theta)\n    y2 = x * math.sin(theta) + y * math.cos(theta)\n    return (round(x2,3),round(y2,3))\ndef polar_circle(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = float(x)\n    theta = float(y)\n    x2 = cmath.exp(1j * theta) * math.cos(theta)\n    y2 = cmath.exp(1j * theta) * math.sin(theta)\n    return (round(x2,3),round(y2,3))\ndef circle_circle(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    rad = float(x)\n    theta = float(y)\n    x2 = x * math.cos(theta) - y * math.sin(theta)\n    y2 = x * math.sin(theta) + y * math.cos(theta)\n    return (round(x2,3),round(y2,3))\ndef polar_ellipse(x,y,r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = float(x)\n    theta = float(y)\n    x2 = r * math.cos(theta) - y * math.sin(theta)\n    y2 = r * math.sin(theta) + y * math.cos(theta)\n    return (round(x2,3),round(y2,3))\ndef ellipse_ellipse(x,y,r):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    rad = float(x)\n    theta = float(y)\n    x2 = r * math.cos(theta) - y * math.sin(theta)\n    y2 = r * math.sin(theta) + y * math.cos(theta)\n    return (round(x2,3),round(y2,3))\ndef x_y(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = polar_rect(x,y)\n    y = polar_rect(x[0],x[1])\n    return (round(x[0],3),round(y[0],3))\ndef x_y_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = rect_rect(x,y)\n    y = rect_rect(x[0],x[1])\n    return (round(x[0],3),round(y[0],3))\ndef x_y_3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = polar_circle(x,y)\n    y = polar_circle(x[0],x[1])\n    return (round(x[0],3),round(y[0],3))\ndef x_y_4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = polar_ellipse(x,y,2)\n    y = polar_ellipse(x[0],x[1],2)\n    return (round(x[0],3),round(y[0],3))\ndef x_y_5(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = ellipse_ellipse(x,y,2)\n    y = ellipse_ellipse(x[0],x[1],2)\n    return (round(x[0],3),round(y[0],3))\ndef l_r(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = float(x)\n    theta = float(y)\n    x2 = cmath.exp(1j * theta) * math.cos(theta)\n    y2 = cmath.exp(1j * theta) * math.sin(theta)\n    return (round(x2,3),round(y2,3))\ndef l_r_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    rad = float(x)\n    theta = float(y)\n    x2 = x * math.cos(theta) - y * math.sin(theta)\n    y2 = x * math.sin(theta) + y * math.cos(theta)\n    return (round(x2,3),round(y2,3))\ndef l_r_3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = ellipse_ellipse(x,y,2)\n    y = ellipse_ellipse(x[0],x[1],2)\n    return (round(x[0],3),round(y[0],3))\ndef f(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = float(x)\n    theta = cmath.exp(1j * rad) * math.cos(rad)\n    x2 = cmath.exp(1j * rad) * math.sin(rad)\n    y2 = cmath.exp(1j * rad) * math.sin(rad)\n    return (round(x2,3),round(y2,3))\ndef f_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = float(x)\n    theta = math.exp(1j * rad) * math.cos(rad)\n    x2 = math.exp(1j * rad) * math.sin(rad)\n    y2 = math.exp(1j * rad) * math.sin(rad)\n    return (round(x2,3),round(y2,3))\ndef f_3(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = float(x)\n    theta = math.exp(1j * rad) * math.cos(rad)\n    x2 = math.exp(1j * rad) * math.sin(rad)\n    y2 = math.exp(1j * rad) * math.sin(rad)\n    return (round(x2,3),round(y2,3))\ndef f_4(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = float(x)\n    theta = math.exp(1j * rad) * math.cos(rad)\n    x2 = math.exp(1j * rad) * math.sin(rad)\n    y2 = math.exp(1j * rad) * math.sin(rad)\n    return (round(x2,3),round(y2,3))\ndef f_5(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = float(x)\n    theta = math.exp(1j * rad) * math.cos(rad)\n    x2 = math.exp(1j * rad) * math.sin(rad)\n    y2 = math.exp(1j * rad) * math.sin(rad)\n    return (round(x2,3),round(y2,3))\ndef f_6(x):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi_x = math.atan2(y,x)\n    phi_y = math.acos(x/math.sqrt(y*y+1))\n    theta_z = cmath.phase(y*1j)\n    theta = cmath.phase(y*1j*cmath.pi/2)\n    return (phi_x,phi_y,theta_z,theta)\n",
        "num_ids": 100
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\n",
        "num_ids": 14
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta=cmath.atan2(y,x)\n    phi=cmath.acos(x/y)\n    return (math.cos(theta),math.sin(theta),phi)\n",
        "num_ids": 51
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.polar(x)\n    y=cmath.polar(y)\n    x_b=x[0]\n    y_b=y[0]\n    x_c=x[1]\n    y_c=y[1]\n    return x_b,y_b,x_c,y_c\ndef rectangle_trig(x_b,y_b,x_c,y_c):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=complex(x_c-x_b,y_c-y_b)\n    y=complex(x_b-x_c,y_b-y_c)\n    r=complex(complex(x.real,y.real)-complex(x.imag,y.imag),complex(x.imag,y.imag)-complex(x.real,y.imag))\n    return r\ndef matrix_trans(a,b,c):\n    '''\n    Write a function that returns the matrix of points (a,b,c).\n    '''\n    x=complex(b[0]+c[0],b[1]+c[1])\n    y=complex(a[0]+b[0],a[1]+b[1])\n    return x,y\ndef triangle_calc(x_b,y_b,x_c,y_c,z_0):\n    '''\n    Write a function to calculate the triangles area and perimeter.\n    '''\n    a1=complex(x_c-x_b,y_c-y_b)\n    a2=complex(x_b-x_c,y_b-y_c)\n    a3=complex(x_b-x_c,y_c-y_b)\n    b1=complex(x_c-x_b,y_c-y_b)\n    b2=complex(x_b-x_c,y_b-y_b)\n    b3=complex(x_b-x_c,y_b-y_b)\n    c1=complex(x_c-x_b,y_c-y_b)\n    c2=complex(x_b-x_c,y_c-y_b)\n    c3=complex(x_b-x_c,y_c-y_b)\n    a=a1+a2+a3+b1+b2+b3+c1+c2+c3\n    b=b1+b2+b3+c1+c2+c3+a2+a3+a1+b2+b3+b1+b2+b3\n    c=c1+c2+c3+b1+b2+b3+c1+c2+c3+b1+b2+b3+b1+b2+b3\n    return a,b,c\ndef perimeter_calc(a,b,c,d,e,f,g,h):\n    '''\n    Write a function that calculates the perimeter of a square using the following formula.\n    '''\n    perim=complex(a[0]+b[0]+c[0]+d[0]+e[0]+f[0]+g[0]+h[0])\n    return perim\ndef circle_calc(x_b,y_b,x_c,y_c,r):\n    '''\n    Write a function to calculate the area and circumference of a circle using the following formula.\n    '''\n    a=x_b+y_b+x_c+y_c+r\n    b=2*(x_b+y_b)\n    c=2*(x_c+y_c)\n    d=x_b+y_b+x_c+y_c+r\n    e=x_b+y_b+x_c+y_c+r\n    f=2*(x_b+y_b)\n    g=2*(x_c+y_c)\n    h=x_b+y_b+x_c+y_c+r\n    return a,b,c,d,e,f,g,h\ndef triangle_calc_2(x_b,y_b,x_c,y_c,z_0):\n    '''\n    Write a function to calculate the triangles area and perimeter.\n    '''\n    a1=complex(x_c-x_b,y_c-y_b)\n    a2=complex(x_b-x_c,y_b-y_c)\n    a3=complex(x_b-x_c,y_c-y_b)\n    b1=complex(x_c-x_b,y_c-y_b)\n    b2=complex(x_b-x_c,y_b-y_b)\n    b3=complex(x_b-x_c,y_b-y_b)\n    c1=complex(x_c-x_b,y_c-y_b)\n    c2=complex(x_b-x_c,y_c-y_b)\n    c3=complex(x_b-x_c,y_c-y_b)\n    a=a1+a2+a3+b1+b2+b3+c1+c2+c3\n    b=b1+b2+b3+c1+c2+c3+a2+a3+a1+b2+b3+b1+b2+b3\n    c=c1+c2+c3+b1+b2+b3+c1+c2+c3+b1+b2+b3+b1+b2+b3\n    return a,b,c\ndef circle_calc_2(x_b,y_b,x_c,y_c,r):\n    '''\n    Write a function to calculate the area and circumference of a circle using the following formula.\n    '''\n    a=x_b+y_b+x_c+y_c+r\n    b=2*(x_b+y_b)\n    c=2*(x_c+y_c)\n    d=x_b+y_b+x_c+y_c+r\n    e=x_b+y_b+x_c+y_c+r\n    f=2*(x_b+y_b)\n    g=2*(x_c+y_c)\n    h=x_b+y_b+x_c+y_c+r\n    return a,b,c,d,e,f,g,h\ndef triang_calc(x_b,y_b,x_c,y_c,z_0):\n    '''\n    Write a function to calculate the triangles area and perimeter.\n    '''\n    a1=complex(x_c-x_b,y_c-y_b)\n    a2=complex(x_b-x_c,y_b-y_c)\n    a3=complex(x_b-x_c,y_c-y_b)\n    b1=complex(x_c-x_b,y_c-y_b)\n    b2=complex(x_b-x_c,y_b-y_b)\n    b3=complex(x_b-x_c,y_b-y_b)\n    c1=complex(x_c-x_b,y_c-y_b)\n    c2=complex(x_b-x_c,y_c-y_b)\n    c3=complex(x_b-x_c,y_c-y_b)\n    a=a1+a2+a3+b1+b2+b3+c1+c2+c3\n    b=b1+b2+b3+c1+c2+c3+a2+a3+a1+b2+b3+b1+b2+b3\n    c=c1+c2+c3+b1+b2+b3+c1+c2+c3+b1+b2+b3+b1+b2+b3\n    return a,b,c\ndef triangle_calc_3(x_b,y_b,x_c,y",
        "num_ids": 361
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your code here\n    temp = newList[0]\n    newList[0] = newList[2]\n    newList[2] = temp\n    return newList\n",
        "num_ids": 44
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <=1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "num_ids": 52
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    print(newList)\n    \ndef mutate_List(newList): \n    '''\n    Write a python function to mutate a list.\n    '''\n    newList.remove(3)\n    newList.insert(3,4)\n    print(newList)\n    \ndef del_List(newList): \n    '''\n    Write a python function to delete a list.\n    '''\n    newList.remove(3)\n    newList.insert(3,4)\n    print(newList)\n    \ndef display_list(newList): \n    '''\n    Write a python function to display all elements in a list.\n    '''\n    for i in range(len(newList)):\n        print(newList[i])\n    \ndef range_generator(end): \n    '''\n    Write a python function to return a list of numbers in a given range.\n    '''\n    for i in range(end):\n        yield i\n",
        "num_ids": 16
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = list(newList)\n    newList.reverse()\n    print(\"Reverse order:\", newList)\n    return newList\n",
        "num_ids": 37
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.sort()\n    print(newList[0])\n    print(newList[-1])\n    \n    \nnew_List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nswap_List(new_List)\n    ",
        "num_ids": 69
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your code here\n    a = newList[0]\n    b = newList[-1]\n    newList[0] = b\n    newList[-1] = a\n    return newList",
        "num_ids": 50
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # convert the lists to strings\n    str1 = newList[0] \n    str2 = newList[len(newList)-1] \n    \n    # swap the first element with the last one\n    newList[0] = str2\n    newList[len(newList)-1] = str1 \n    return newList\n    \n    \ndef main():\n    '''\n    The main function.\n    '''\n    # get the list from the user\n    newList = [int(item) for item in input().split()]\n    print(swap_List(newList))\n",
        "num_ids": 41
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[0],newList[-1]\n",
        "num_ids": 16
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Create a temporary list \n    temp = newList[:]\n    \n    # Find the first element of the list \n    first = temp.pop(0)\n    \n    # Find the last element of the list \n    last = temp.pop()\n    \n    # Interact with the list \n    newList = temp + [last] + [first]\n    \n    return newList\n",
        "num_ids": 94
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if (len(newList) == 0):\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result=1\n    if(k>=1):\n        for i in range(1,k+1):\n            result=result*(n-i+1)\n        return result\n    else:\n        return 0\ndef binomial_coeff(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k-1)*(x+1)\ndef binomial_coeff_2(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_3(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_4(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_5(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_6(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_7(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_8(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_9(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_10(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_11(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_12(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_13(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_14(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_15(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_16(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_17(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_18(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_19(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_20(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_21(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_22(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_23(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_24(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_25(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_26(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_27(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_28(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_29(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_30(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_31(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_32(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coeff_33(x,k):\n    '''\n    Function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff(x,k)*(x+1)\ndef binomial_coef",
        "num_ids": 27
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    ans = 0 \n    for i in range(0,k):\n        ans += (n*i)**i\n    return ans\n",
        "num_ids": 34
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def _binomial_coeff(n,k):\n        '''\n        Write a recursive function for the binomial coefficient\n        '''\n        if n==0:\n            return 1\n        elif k==1:\n            return 0\n        else:\n            return (n*_binomial_coeff(n-1,k))\n    return _binomial_coeff(n,k)\n",
        "num_ids": 62
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    b=1\n    for i in range(1,k):\n        b*=n\n    return b\n",
        "num_ids": 28
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return (binomial_Coeff(n-1,k)*k)%(n+1)\n    \n    \ndef modularExponent(x,n,p):\n    '''\n    Write a python function to find the value of a number x**n modulo p.\n    '''\n    # your code here\n    return (x**(n+p-1))%(n+p)\n    \ndef chinese_remainder(a, b):\n    '''\n    Write a python function that returns the Chinese Remainder Theorem.\n    '''\n    # your code here\n    if b == 0:\n        return a\n    else:\n        return chinese_remainder(b, a%b)\n    \n    \ndef get_sum_of_two_multipliers(a,b):\n    '''\n    Write a python function that returns the sum of two multipliers (a,b)\n    '''\n    # your code here\n    if a == b:\n        return a\n    else:\n        return a+b\n    \n    \ndef modularExponent_inverse(a,m):\n    '''\n    Return the modular exponent inverse of a mod m.\n    '''\n    # your code here\n    if a == 0:\n        return 1\n    else:\n        return modularExponent_inverse(a%m,m)\n    \n    \ndef get_sum_of_two_multipliers_inv(a,b):\n    '''\n    Return the sum of two multipliers (a,b)\n    '''\n    # your code here\n    if a == b:\n        return a\n    else:\n        return modularExponent_inverse(a%b,b)\n    \n    \ndef to_base_10(x):\n    '''\n    Convert x to base 10.\n    '''\n    # your code here\n    return int(x)\n    \ndef to_base_2(x):\n    '''\n    Convert x to base 2.\n    '''\n    # your code here\n    return int(x)\n    \ndef from_base_2(x):\n    '''\n    Convert x to base 2.\n    '''\n    # your code here\n    return int(x)\n    \ndef to_base_10_inv(x):\n    '''\n    Convert x to base 10.\n    '''\n    # your code here\n    return int(x)\n    \ndef to_base_2_inv(x):\n    '''\n    Convert x to base 2.\n    '''\n    # your code here\n    return int(x)\n    \ndef to_base_10_pow(x,p):\n    '''\n    Convert x to base 10.\n    '''\n    # your code here\n    if p == 1:\n        return x\n    elif p == 2:\n        return x**2\n    else:\n        return x**(p-1)\n    \ndef to_base_2_pow(x,p):\n    '''\n    Convert x to base 2.\n    '''\n    # your code here\n    if p == 1:\n        return x\n    elif p == 2:\n        return x**2\n    else:\n        return x**(p-1)\n    \n    \ndef add(a,b):\n    '''\n    Return a + b.\n    '''\n    # your code here\n    if b == 0:\n        return a\n    else:\n        return a+b\n    \n    \ndef sum_mult(a,b):\n    '''\n    Return a + b*x.\n    '''\n    # your code here\n    if b == 0:\n        return a\n    else:\n        return a+b*to_base_10(a)\n    \ndef mult(a,b):\n    '''\n    Return a*b.\n    '''\n    # your code here\n    return a*b\n    \ndef sub(a,b):\n    '''\n    Return a - b.\n    '''\n    # your code here\n    if b == 0:\n        return a\n    else:\n        return a-b\n    \ndef mod(a,b):\n    '''\n    Return a mod b.\n    '''\n    # your code here\n    if b == 0:\n        return a\n    else:\n        return a%b\n    \ndef gcd(a,b):\n    '''\n    Return the greatest common divisor of a and b.\n    '''\n    # your code here\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n    \ndef modinv(a,n):\n    '''\n    Return the modular inverse of a mod n.\n    '''\n    # your code here\n    if a == 0:\n        return 0\n    else:\n        return modularExponent_inverse(a,n)\n    \n    \ndef mod_inverse(a,n):\n    '''\n    Return the modular inverse of a mod n.\n    '''\n    # your code here\n    if a == 0:\n        return 0\n    else:\n        return modularExponent_inverse(a,n)\n    \ndef inverse(a,n):\n    '''\n    Return the modular inverse of a mod n.\n    '''\n    # your code here\n    if a == 0:\n        return 0\n    else:\n        return modularExponent_inverse(a,n)\n    \n    \n    \ndef gcd_inv(a,b):\n    '''\n    Return the greatest common divisor of a and b.\n    '''\n    # your code here\n    if b == 0:\n        return a\n    else:\n        return gcd_inv(b,a%b)\n    \n    \ndef modinv_inv(a,n):\n    '''\n    Return the modular inverse of a mod n.\n    '''\n    # your code here\n    if a == 0:\n        return 0\n    else:\n        return modinv_inv(a,n)\n    \n    \ndef gcd_inv_inv(a,b):\n    '''\n    Return the greatest common divisor of a and b.\n    '''\n    # your code here\n    if b == 0:\n        return a\n    else:\n        return gcd_inv_inv(b,a%b)\n    \n    \ndef mod_inv_inv(a,n):\n    '''\n    Return the modular inverse of a mod n.\n    '''\n    # your code here\n    if a == 0:\n        return 0\n    else:\n        return modinv_inv(a,n)\n    \n    \ndef inv(a,n):\n    '''\n    Return the modular inverse of a mod n.\n    '''\n    # your code here\n    if a == 0:\n        return 0\n    else:\n        return modularExponent_inverse(a,n)\n    \n    \ndef modinv_inv(a,n):\n    '''\n    Return the modular inverse of a mod n.\n    '''\n    # your code here\n    if a == 0:\n        return 0\n    else:\n        return modularExponent_inverse(a,n)\n    \n    \ndef modinv_inv_inv(a,n):\n    '''\n    Return the modular inverse of a mod n.\n    '''\n    # your code here\n    if a == 0:\n        return 0\n    else:\n        return modinv_inv_inv(a,n)\n    \n    \n    \ndef power(a,n):\n    '''\n    Return the value of a**n.\n    '''\n    # your code here\n    if n == 1:\n        return a\n    else:\n        return power(a,n-1)*a\n    \n    \n    \ndef add_mult_add_pow(a,b,c):\n    '''\n    Return the value of a + b + c (a+b+c)**m.\n    '''\n    # your code here\n    if c == 0:\n        return 0\n    elif c == 1:\n        return add(a,b)\n    elif c == 2:\n        return add(add(a,b),c)\n    else:\n        return add(ad",
        "num_ids": 66
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the value for the sum of consecutive binomial co-efficients.\n    s = 0\n    for i in range(1,k+1):\n        s += n/i*(i**n-1)**(i-1)\n    return s\n",
        "num_ids": 63
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial(n,k)\n",
        "num_ids": 12
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n,0,-1):\n        sum += binomial_coeff(k,i) * (n-i) \n    return sum\n    \ndef binomial_coeff(n,k):\n    '''\n    Compute the nth term of the binomial coefficient.\n    '''\n    if n == 0: return 1\n    if n == 1: return 1\n    if n < 0 or k < 0 or k > n: return 0\n    return binomial_coeff(n-1,k) // binomial_coeff(n-1,k-1)\n    \ndef fib_list(n):\n    '''\n    Generate a list of the fibonacci numbers, ordered from 0 to n-1.\n    '''\n    if n == 0: return []\n    if n == 1: return [0]\n    if n == 2: return [0,1]\n    if n <= 2: return fib_list(n-1) + fib_list(n-2)\n    first, second = 0, 1\n    for i in range(n-2):\n        first, second = second, first+second\n        yield first\n",
        "num_ids": 96
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total_coeff=0\n    for i in range(1,n+1):\n        total_coeff+=i**k*(i-1)**(n-k)\n    return total_coeff\n",
        "num_ids": 52
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff_sum = 0\n    for i in range(1,n+1):\n        coeff_sum += (k**i) * ((1-k)**(n-i))\n    return coeff_sum\n",
        "num_ids": 54
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = list(ip)\n    ip_list.insert(0,'0')\n    ip_list = ''.join(ip_list)\n    return ip_list\ndef is_valid_ip(ip):\n    '''\n    Write a function to check if an ip is a valid one.\n    '''\n    ip = removezero_ip(ip)\n    ip = re.sub('^0','',ip)\n    if re.match('^(0\\d|1\\d\\d\\d|2[3-5]\\d|25[0-5]\\d|25[0-5]|25[1-5]\\d|25[0-4]\\d|25[0-2]\\d|25[0-1]\\d|26[0-3]\\d|26[0-4]\\d|26[0-9]\\d|26[0-7]\\d|26[0-5]\\d|26[0-2]\\d|26[0-1]\\d|26[0-7]\\d|27[0-9]\\d|27[0-4]\\d|27[0-9]\\d|27[0-2]\\d|27[0-8]\\d|27[0-9]\\d|27[1-4]\\d|27[0-2]\\d|27[1-3]\\d|27[1-5]\\d|27[1-8]\\d|27[2-7]\\d|27[0-9]\\d|27[1-3]\\d|27[1-5]\\d|27[1-7]\\d|27[1-9]\\d|27[2-4]\\d|27[2-9]\\d|27[3-4]\\d|27[3-6]\\d|27[3-9]\\d|27[4-7]\\d|27[4-9]\\d|27[5-8]\\d|27[4-9]\\d|27[5-7]\\d|27[5-8]\\d|27[6-7]\\d|27[6-9]\\d|27[7-9]\\d|27[7-8]\\d|27[8-9]\\d|27[9-8]\\d|27[9-6]\\d|27[9-7]\\d|27[9-8]\\d|27[9-6]\\d|27[9-4]\\d|27[9-5]\\d|27[9-8]\\d|27[9-2]\\d|27[9-5]\\d|27[9-6]\\d|27[9-4]\\d|27[9-2]\\d|27[9-8]\\d|27[9-3]\\d|27[9-9]\\d|27[9-8]\\d|27[9-0]\\d|27[9-7]\\d|27[9-4]\\d|27[9-7]\\d|27[9-9]\\d|27[9-8]\\d|27[9-2]\\d|27[9-7]\\d|27[9-4]\\d|27[9-2]\\d|27[9-5]\\d|27[9-8]\\d|27[9-6]\\d|27[9-7]\\d|27[9-3]\\d|27[9-5]\\d|27[9-8]\\d|27[9-4]\\d|27[9-2]\\d|27[9-7]\\d|27[9-8]\\d|27[9-5]\\d|27[9-4]\\d|27[9-0]\\d|27[9-4]\\d|27[9-3]\\d|27[9-9]\\d|27[9-6]\\d|27[9-7]\\d|27[9-2]\\d|27[9-8]\\d|27[9-6]\\d|27[9-5]\\d|27[9-8]\\d|27[9-7]\\d|27[9-2]\\d|27[9-4]\\d|27[9-7]\\d|27[9-0]\\d|27[9-5]\\d|27[9-8]\\d|27[9-7]\\d|27[9-0]\\d|27[9-6]\\d|27[9-8]\\d|27[9-8]\\d|27[9-0]\\d|27[9-0]\\d|27[9-6]\\d|27[9-5]\\d|27[9-8]\\d|27[9-4]\\d|27[9-8]\\d|27[9-3]\\d|27[9-9]\\d|27[9-6]\\d|27[9-7]\\d|27[9-4]\\d|27[9-0]\\d|27[9-7]\\d|27[9-4]\\d|27[9-2]\\d|27[9-5]\\d|27[9-6]\\d|27[9-7]\\d|27[9-4]\\d|27[9-2]\\d|27[9-7]\\d|27[9-0]\\d|27[9-5]\\d|27[9-6]\\d|27[9-3]\\d|27[9-8]\\d|27[9-4]\\d|27[9-2]\\d|27[9-7]\\d|27[9-8]\\d|27[9-6]\\d|27[9-5]\\d|27[9-8]\\d|27[9-7]\\d|27[9-4]\\d|27[9-8]\\d|27[9-3]\\d|27[9-9]\\d|27[9-7]\\d|27[9-4]\\d|27[9-2]\\d|27[9-7]\\d|27[9-8]\\d|27[9-6]\\d|27[9-7]\\d|27[9-5]\\d|27[9-7]\\d|27[9-2]\\d|27[9-7]\\d|27[9-5]\\d|27[9-8]\\d|27[9-4]\\d|27[9-7]\\d|27[9-0]\\d|27[9-5]\\d|27[9-8]\\d|27[9-6]\\d|27[9-7]\\d|27[9-5]\\d|27[9-8]\\d|27[9-4]\\d|27[9-0]\\d|27[9-5]\\d|27[9-8]\\d|27[9-6]\\d|27[9-7]\\d|27[9-4]\\d|27[9-8]\\d|27[9-3]\\d|27[9-9]\\d|27[9-8]\\d|27[9-6]\\d|27[9-5]\\d|27[9-8]\\d|27[9-7]\\d|27[9-5]\\d|27[9-8]\\d|27[9-6]\\d|27[9-5]\\d|27[9-8]\\d|27[9-4]\\d|27[9-7]\\d|27[9-4]\\d|27[9-3]\\d|27[9-9]\\d|27[9-8]\\d|27[9-6]\\d|27[9-5]\\d|27[9-8]\\d|27[9-5]\\d|27[9-8]\\d|27[9-4]\\d|27[9-7]\\d|27[9-5]\\d|27[9-3]\\d|27[9-9]\\d|27[9-0]\\d|27[9-6]\\d|27[9",
        "num_ids": 1938
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.split('.')\n",
        "num_ids": 11
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #return str(ip[:-1])\n    for i in range(len(ip)):\n        if ip[i]!= '0':\n            return ip\n    return ip\n",
        "num_ids": 45
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_count = 0\n    for i in ip:\n        if i == 0:\n            zero_count += 1\n        elif zero_count == 1:\n            return ip\n    return ip\n",
        "num_ids": 48
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return '0'\n    else:\n        return ip\n    # to clean the string, remove leading zeroes, and it's to be removed.\n    # '0.0.0.0' -> '0.0.0.0'\n    # '0.0.0' -> '0.0.0'\n    # '00.00.00' -> '00.00.00'\n    # remove leading zeroes\n    return re.sub(r'\\A\\d+', '', ip)\n",
        "num_ids": 132
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    s = ip.split('.')\n    return '.'.join(s[:1])+'.'+'.'.join(s[1:])\n",
        "num_ids": 39
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '0.0.0.0':\n        return ip\n    elif ip.count('.') == 3:\n        return ip.split('.')\n    else:\n        return ip.split('.')[0],ip.split('.')[1],ip.split('.')[2]\n",
        "num_ids": 73
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return str(ip).replace(str(ip).split('.')[0],'')\ndef is_valid_ip(ip):\n    '''\n    Write a function to determine if the string passed in is a valid ip address.\n    '''\n    return len(ip)==4 and re.search('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$',ip)\n",
        "num_ids": 113
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '0.0.0.0':\n        return ip\n    if ip.startswith('0.0.0.'):\n        return ip.replace('0.0.0.', '0.0.0.0.')\n    if ip.startswith('127.'):\n        return ip.replace('127.','127.0.0.')\n    else:\n        return ip\n",
        "num_ids": 97
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # creating empty string with zeros\n    empty_string = ''\n",
        "num_ids": 18
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in list1:\n        if i % 2!= 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return odd_list, even_list\n",
        "num_ids": 68
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)%2==0:\n        even_odd=list1[::2]\n    else:\n        even_odd=list1[1::2]\n    for i in range(0,len(even_odd),2):\n        list1[i]=list1[i]\n",
        "num_ids": 73
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n",
        "num_ids": 12
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for number in list1:\n        if number % 2 == 0:\n            even_sum += number\n        else:\n            odd_sum += number\n    print(f'The difference of the first even and first odd number of the list is {even_sum - odd_sum}')\n",
        "num_ids": 81
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    i = 0\n    while i < len(list1):\n        if list1[i] % 2 == 0:\n            even_odd.append(list1[i])\n        else:\n            i += 1\n    return even_odd\n",
        "num_ids": 65
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[0] - list1[1]\n",
        "num_ids": 55
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        x = list1[0]\n        y = list1[1]\n        list1[0] = list1[-1]\n        list1[-1] = x\n        return list1\n    else:\n        x = list1[0]\n        y = list1[1]\n        list1[0] = list1[-1]\n        list1[-1] = y\n        return list1\n",
        "num_ids": 113
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_1=[]\n    list_2=[]\n    for i in range(len(list1)):\n        if i%2==0:\n            list_1.append(list1[i])\n        else:\n            list_2.append(list1[i])\n    return list_1,list_2\n",
        "num_ids": 78
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    even_odd_list = []\n    \n    for number in list1:\n        if number % 2 == 0:\n            even_odd_list.append(number)\n            \n        else:\n            continue\n    \n    return even_odd_list\n    \n",
        "num_ids": 65
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    size = len(str1)\n    out = []\n    for i in range(size) : \n        if (str1[i] == str2[i]) : \n            out.append(1)\n            continue\n        elif str1[i]!= str2[i] : \n            out.append(0)\n    return out\n",
        "num_ids": 87
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n    if str1[0]!= str2[0]:\n        return -1\n    count = 0\n    i = 0\n    while (i < len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n        else:\n            i += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Checking base cases\n    if len(str1)!= len(str2):\n        return -1\n",
        "num_ids": 27
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    min_swap = 0\n    for i in range(0, len(str1)):\n        if str1[i] == str2[i]:\n            min_swap+=1\n        else:\n            break\n    return min_swap\n",
        "num_ids": 61
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    for i in range(len(str1)) : \n        for j in range(i+1,len(str1)+1): \n            if str1[i:j]!= str2[i:j] : \n                return 1\n    return 0\n",
        "num_ids": 66
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n",
        "num_ids": 21
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    count = 0\n    \n    if n > m:\n        swap = n - m\n        while swap > 0:\n            i = swap // 2\n            j = (swap % 2) + 1\n            if str1[i]!= str2[j]:\n                break\n            else:\n                swap = swap // 2\n        if swap == 0:\n            return 0\n        elif swap == n - m - 1:\n            return n\n        else :\n            return swap\n    else:\n        return 0",
        "num_ids": 140
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!=len(str2):\n        return -1\n    count=0\n    \n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            count+=1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2001
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = sorted(str1)\n    s2 = sorted(str2)\n    if (len(s1)!= len(s2)):\n        print(\"Not same length\")\n        return 0\n    else:\n        count = 0\n        for i in range(0,len(s1)):\n            if (s1[i]!= s2[i]):\n                if (s1[i] < s2[i]):\n                    count += 1\n        return count\n",
        "num_ids": 116
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum([len(t[0]) * len(t[1]) for t in tuple_list])\n",
        "num_ids": 27
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # for i in range(0, len(tuple_list)):\n    #     for j in range(0, len(tuple_list[i])):\n    #         print(tuple_list[i][j], end=\" \")\n    # print(\" \")\n",
        "num_ids": 67
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += len(str(item))\n    return size\n",
        "num_ids": 30
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return int(sys.getsizeof(tuple(tuple_list)))\n",
        "num_ids": 21
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for i in range(len(tuple_list)):\n        count += tuple_list[i][1]\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for x in tuple_list:\n        size += len(x)\n    return size\n",
        "num_ids": 28
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(str(tuple_list))\n",
        "num_ids": 14
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += el\n    return t\n    \ndef tuple_size_in_bits(tuple_list):\n    '''\n    Write a function to find the size in bits of the given tuple.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += el.bit_length()\n    return t\n    \ndef tuple_modulus(tuple_list):\n    '''\n    Write a function that returns the tuple's modulus.\n    '''\n    \n    t = 1\n    for el in tuple_list:\n        t = t * el\n    return t\n    \ndef tuple_add(tuple1, tuple2):\n    '''\n    Write a function that adds two tuples.\n    '''\n    \n    if len(tuple1)!= len(tuple2):\n        print('Error: tuples must be same length!')\n    else:\n        t = 0\n        for el in tuple1:\n            t += el\n        for el in tuple2:\n            t += el\n        return t\n    \ndef tuple_length(tuple_list):\n    '''\n    Write a function that returns the length of the given tuple.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += 1\n    return t\n    \ndef tuple_remove(tuple_list, index):\n    '''\n    Write a function that removes the first element of the given tuple.\n    '''\n    \n    if index < 0 or index >= len(tuple_list):\n        print('Error: index out of range!')\n    else:\n        t = 0\n        for el in tuple_list:\n            t += el\n        t = t - index\n        return t\n    \ndef tuple_sum(tuple_list):\n    '''\n    Write a function that returns the sum of all the elements of the given tuple.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += el\n    return t\n    \ndef tuple_concat(tuple_list):\n    '''\n    Write a function that concatenates two tuples.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += el\n    return t\n    \ndef tuple_shift(tuple_list):\n    '''\n    Write a function that adds one element of the given tuple to the right of it.\n    '''\n    \n    if len(tuple_list) < 1:\n        print('Error: list is empty!')\n    else:\n        t = 0\n        for el in tuple_list:\n            t += el\n        t = t + 1\n        return t\n    \ndef tuple_minus(tuple1, tuple2):\n    '''\n    Write a function that subtracts two tuples.\n    '''\n    \n    if len(tuple1)!= len(tuple2):\n        print('Error: tuples must be same length!')\n    else:\n        t = 0\n        for el in tuple1:\n            t += el\n        for el in tuple2:\n            t += el\n        return t\n    \ndef tuple_neg(tuple_list):\n    '''\n    Write a function that subtracts one element from the right of it.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += el\n    t = -t\n    return t\n    \ndef tuple_neg_sqr(tuple_list):\n    '''\n    Write a function that subtracts a square of each element from the right of it.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += el\n    t = -t*t\n    return t\n    \ndef tuple_div(tuple1, tuple2):\n    '''\n    Write a function that divides two tuples.\n    '''\n    \n    if tuple_size(tuple_list) == 0:\n        print('Error: tuples must not be empty!')\n    elif tuple_size(tuple_list) < 2:\n        print('Error: tuples must have at least 2 elements!')\n    else:\n        t = 0\n        for el in tuple1:\n            t += el\n        for el in tuple2:\n            t += el\n        t = t / tuple_size(tuple_list)\n        return t\n    \ndef tuple_invert(tuple_list):\n    '''\n    Write a function that inverts the tuples.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += el\n    t = -t\n    return t\n    \ndef tuple_add_element(tuple1, tuple2):\n    '''\n    Write a function that adds the elements of the given tuple to the left of it.\n    '''\n    \n    if len(tuple1)!= len(tuple2):\n        print('Error: tuples must be same length!')\n    else:\n        t = 0\n        for el in tuple1:\n            t += el\n        for el in tuple2:\n            t += el\n        t = t + tuple_size(tuple_list)\n        return t\n    \ndef tuple_sub_element(tuple1, tuple2):\n    '''\n    Write a function that subtracts the elements of the given tuple from the right of it.\n    '''\n    \n    if len(tuple1)!= len(tuple2):\n        print('Error: tuples must be same length!')\n    else:\n        t = 0\n        for el in tuple1:\n            t += el\n        for el in tuple2:\n            t += el\n        t = t - tuple_size(tuple_list)\n        return t\n    \ndef tuple_mul(tuple1, tuple2):\n    '''\n    Write a function that multiplies two tuples.\n    '''\n    \n    if len(tuple1)!= len(tuple2):\n        print('Error: tuples must be same length!')\n    else:\n        t = 0\n        for el in tuple1:\n            t += el\n        for el in tuple2:\n            t += el\n        t = t * tuple_size(tuple_list)\n        return t\n    \ndef tuple_div_element(tuple1, tuple2):\n    '''\n    Write a function that divides a tuple by an element.\n    '''\n    \n    if tuple_size(tuple_list) == 0:\n        print('Error: tuples must not be empty!')\n    elif tuple_size(tuple_list) < 2:\n        print('Error: tuples must have at least 2 elements!')\n    else:\n        t = 0\n        for el in tuple1:\n            t += el\n        for el in tuple2:\n            t += el\n        t = t / tuple_size(tuple_list)\n        return t\n    \ndef tuple_sqr(tuple_list):\n    '''\n    Write a function that returns a square of the given tuples.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += el\n    t = t**2\n    return t\n    \ndef tuple_invert_sqr(tuple_list):\n    '''\n    Write a function that inverts the elements of the given tuple.\n    '''\n    \n    t = 0\n    for el in tuple_list:\n        t += el\n    t = -t\n    return t\n    \ndef tuple_add_sqr(tuple1, tuple2):\n    '''\n    Write a function that adds a square of the given tuples to the left of it.\n    '''\n    \n    if len(tuple1)!= len(tuple2):\n        print('Error: tuples must be same length!')\n    else:\n        t = 0\n        for el in tuple1:\n            t += el\n        for el in tuple2:\n            t += el\n        t = t + tuple_size_in_bits(tuple_list)\n        return t\n    \ndef tuple_sub_sqr(tuple1, tuple2):\n    '''\n    Write a function that subtracts a square of the given tuples from the right of it.\n    '''\n    \n    if len(tuple1)!= len(tuple2):\n        print('Error: tuples must be same length!')\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = 0\n    for elem in tuple_list:\n        s += len(str(elem))\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size = size + i.itemsize\n    return size\n",
        "num_ids": 30
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1):\n        j = i + k - 1\n        if j > len(arr2):\n            j = j - k\n        if j >= 0:\n            if arr1[i] == arr2[j]:\n                return arr1[i]\n        else:\n            return arr1[i]\n        i += 1\n    return arr2[j",
        "num_ids": 99
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    kth_index = -1\n",
        "num_ids": 11
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if (arr1 == [] and arr2 == []):\n        return None\n    if (arr1 == [] or arr2 == []):\n        return None\n    if (k == 0):\n        return arr1[k]\n    if (k < 0):\n        return None\n    \n    # TEMPORARY HASH MAP\n    #     return arr2[k] if arr1[k] <= arr2[k] else arr1[k]\n    \n    arr3 = []\n    for arr in arr2:\n        arr3.append(arr)\n",
        "num_ids": 131
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k<1:\n        return -1\n    if k==1:\n        if arr1[0]<arr2[0]:\n            return arr1[0]\n        return arr2[0]\n",
        "num_ids": 51
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr2)-1\n    while left < right:\n        mid = (left + right)//2\n        if arr1[mid] < arr2[mid]:\n            left = mid + 1\n        elif arr1[mid] > arr2[mid]:\n            right = mid\n        else:\n            left = mid + 1\n            right = mid\n",
        "num_ids": 92
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr1) - 1\n    \n    while left <= right:\n        \n        mid = left + (right - left) // 2\n        \n        if arr1[mid] < arr2[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return arr2[left]\n    \n",
        "num_ids": 88
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < k or len(arr2) < k:\n        print('Only one and one of the elements in the array is in the index')\n        return 'Invalid Input'\n",
        "num_ids": 47
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the kth element\n    start = 0\n    end = len(arr1) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n",
        "num_ids": 46
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2 or len(arr1) < len(arr2):\n        return None\n",
        "num_ids": 28
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    l1 = 0\n    l2 = len(arr2)-1\n    r1 = len(arr1)-1\n",
        "num_ids": 32
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    remainder = number\n    count = 1\n    divide = 0\n    while(remainder!= 0):\n        remainder = int(remainder % 10)\n        count += 1\n    if count == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = 0\n    num = number\n    for i in range(0,len(str(number))):\n        s += int(str(number)[i])\n    for i in range(len(str(s))):\n        if s%10==int(str(s)[i]):\n            return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count=0\n    for i in range(1,number+1):\n        if i%2==0:\n            if number%i==0:\n                count+=1\n            else:\n                count+=0\n        else:\n            count+=1\n    if count==number:\n        return True\n    else:\n        return False\n",
        "num_ids": 80
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #Write your code here\n    n = 0\n    while(number > 0):\n        n += number % 10\n        number //= 10\n    return n == number\n",
        "num_ids": 41
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_list = list(str(number))\n    temp = 0\n",
        "num_ids": 19
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    lst = []\n    num = number\n    is_armstrong = False\n",
        "num_ids": 21
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    i = 0\n    while i < number:\n        total = total + i\n        i = i+1\n    return total == number\n",
        "num_ids": 39
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    last_digit_index = len(str(number)) - 1\n    for index in range(len(str(number))):\n        # Check for increasing number\n        if int(str(number)[index]) == int(str(number)[index + 1]):\n            # If both the digits are equal, it's a valid number\n            if index == last_digit_index:\n                return True\n        else:\n            return False\n",
        "num_ids": 100
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # The function should take a positive integer number and return True if it is a perfect square, otherwise return False.\n    if number < 0:\n        return False\n    if number == 1:\n        return True\n    for i in range(1, 10):\n        if i == 1:\n            if number % i == 0:\n                return False\n        else:\n            if number % i == 0:\n                return False\n            if number % i == i - 1:\n                return False\n    return True\n",
        "num_ids": 116
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(0,number):\n        num = int(input(\"Enter a number: \"))\n        sum = sum + num\n    average = sum/number\n    return sum, average\n",
        "num_ids": 57
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Your code here\n    total = 0\n    for i in range(1, number + 1):\n        total = total + i\n    return total / number\n",
        "num_ids": 39
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num1 = 0\n    sum = 0\n    if number > 0:\n        num1 = number\n        sum = number\n        while num1!= 0:\n            remainder = num1 % 10\n            sum += remainder\n            num1 = num1 // 10\n        average = sum/number\n        return sum, average\n    else:\n        return 0, 0",
        "num_ids": 86
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += i\n    average = total/number\n    return total, average\n",
        "num_ids": 34
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_value = 0\n    for i in range(number):\n        sum_value += i\n    average_value = sum_value / number\n    print(sum_value, \"is the sum of all natural numbers.\")\n    print(f\"The average of natural numbers is {average_value}\")\n    \ndef main():\n    sum_average(30)\n    sum_average(40)\n    sum_average(70)\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 117
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # TODO: complete this function\n    sum = 0\n    for i in range(1, len(number)+1):\n        sum += number[i-1]\n    average = sum / len(number)\n    return sum, average",
        "num_ids": 56
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    print(\"Sum and average:\")\n    sum_numbers = 0\n    average = 0\n",
        "num_ids": 24
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return average\n",
        "num_ids": 36
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    a = 0\n    if number == 0:\n        return 0\n    for i in range(0, number):\n        s += i\n    if number < 0:\n        return None\n    return s/number\n",
        "num_ids": 56
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    return sum/number\n",
        "num_ids": 31
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True \n    else: \n        return False \n \n ",
        "num_ids": 30
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print (\"{} is an even number.\".format(n))\n    else : \n        print (\"{} is not an even number.\".format(n))\n    return\n",
        "num_ids": 53
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0: \n        return True\n    else: \n        return False",
        "num_ids": 24
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n    # Write your code here\n",
        "num_ids": 30
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return -1\n    elif len(str1) == 1:\n        return str1[0]\n    else:\n        for i in range(0, len(str1)):\n            if str1[i] == str1[i+1]:\n                return str1[i]\n    return -1\n",
        "num_ids": 86
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1={}\n    for i in str1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    \n    for j in dict1:\n        if dict1[j]==1:\n            return j\n    \n    return \"no repeating character\"\n",
        "num_ids": 80
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    n = len(str1)\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in str1:\n        if freq[i] == 1:\n            return i\n",
        "num_ids": 78
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Input must be of type str\")\n    \n    for i in range(len(str1)):\n        if str1[i] == str1[i + 1]:\n            return str1[i]\n    \n    raise ValueError(\"The given string does not have any repeated characters.\")\n",
        "num_ids": 84
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    max_num = len(str1)\n    max_char = ''\n    first_char = ''\n    \n    for i in range(0,max_num):\n        if str1[i] == str1[i+1]:\n            if i+1 == max_num-1:\n                max_char = str1[i]\n                return max_char\n            else:\n                return max_char\n        else:\n            return max_char\n    \n    return max_char\n",
        "num_ids": 126
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return \"\"\n    \n    elif len(str1) == 1:\n        return str1[0]\n    \n    else:\n        for i in range(len(str1)):\n            if str1[i] == str1[i + 1]:\n                return str1[i]\n    \n    return \"\"\n",
        "num_ids": 88
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # if the string is empty, return None\n    if str1 == '':\n        return None\n    # if the string contains only one character, return that character\n    if str1.count(str1[0]) > 1:\n        return str1[0]\n    # initialize a list to store all repeated characters\n    list = []\n    # for each char in the string\n    for i in str1:\n        # if the char is in list\n        if i in list:\n            # append that char to list\n            list.append(i)\n        else:\n            # if the char is not in list, add it to list\n            list.append(i)\n    # return the first repeated character\n    return list[0]\n    \n    ",
        "num_ids": 173
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 is None or len(str1) == 0:\n        return -1\n    counter = dict()\n    for i in str1:\n        if i in counter.keys():\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    for i in counter.keys():\n        if counter[i] == 1:\n            return i\n    return -1\n",
        "num_ids": 94
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return \"\"\n",
        "num_ids": 17
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = [i for i in str1]\n    lst.sort()\n    print(lst)\n    print(lst.index(lst[0]))\n    print(lst[lst.index(lst[0])+1])\n    \nfirst_repeated_char('hello')\nfirst_repeated_char('a' * 8)\nfirst_repeated_char('a' * 3)\nfirst_repeated_char('a' * 4)\nfirst_repeated_char('a' * 1)\nfirst_repeated_char('a' * 0)\nfirst_repeated_char('a' * 2)\nfirst_repeated_char('a' * 1)\nfirst_repeated_char('a' * 1)\nfirst_repeated_char('a' * 5)\nfirst_repeated_char('a' * 10)\nfirst_repeated_char('a' * 5)\nfirst_repeated_char('a' * 2)\nfirst_repeated_char('a' * 3)\nfirst_repeated_char('a' * 8)\nfirst_repeated_char('a' * 3)\nfirst_repeated_char('a' * 4)\nfirst_repeated_char('a' * 1)\nfirst_repeated_char('a' * 0)\nfirst_repeated_char('a' * 2)\nfirst_repeated_char('a' * 1)\nfirst_repeated_char('a' * 1)\nfirst_repeated_char('a' * 5)\nfirst_repeated_char('a' * 10)",
        "num_ids": 374
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    ludic = []\n    for i in range(1, n+1):\n        lud = [j for j in range(1, i+1) if i%j == 0]\n        ludic.append(lud)\n    return ludic\n",
        "num_ids": 63
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if (i <= 1 or (i % 2 == 0 and i % 3 == 0) or (i % 4 == 0 and i % 5 == 0) or\n            (i % 7 == 0 and i % 9 == 0) or i % 10 == 0):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 93
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # write your code here\n    ludic = []\n    if n < 0:\n        return None\n    else:\n        while n > 0:\n            if n % 2 == 0:\n                ludic.append(n)\n                n = n//2\n            else:\n                n = n//2\n        return ludic\n        \n    ",
        "num_ids": 81
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(map(lambda x: x if x <= n else 0, range(1, n + 1)))\n",
        "num_ids": 28
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    def lud(n,k):\n        '''\n        Add each element of array to a temporary array and then return a sorted array of the elements in the temporary array that is the smallest.\n        '''\n        \n        l = []\n        for i in range(len(n)):\n            if n[i] not in l:\n                l.append(n[i])\n        l.sort()\n        return l\n    \n    l = []\n    for i in range(n):\n        if i not in l:\n            l.append(i)\n    return lud(l,k)\n",
        "num_ids": 94
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_lst = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic_lst.append(i)\n        elif i%2 == 0:\n            ludic_lst.append(i)\n        else:\n            ludic_lst.append(i-1)\n    return ludic_lst\n",
        "num_ids": 91
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n + 1):\n        if i <= 100:\n            ludic_list.append(i)\n    return ludic_list\n",
        "num_ids": 48
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    mylist=[]\n    for i in range(1,n+1):\n        if i<10:\n            mylist.append(i)\n        else:\n            if i%10==0:\n                mylist.append(i)\n    return mylist\ndef main():\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        print(len(get_ludic(n)))\n",
        "num_ids": 106
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(n,0,-1):\n        if i < 2:\n            result.append(i)\n        else:\n            num = int(i)\n            for j in range(0,len(result)-1):\n                if result[j] + 1 == num:\n                    result.pop(j)\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n) if i**3 < n and i**2 > n and i**3 < n]\n",
        "num_ids": 35
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #pass #delete this line when you implement this function\n    s=s.split(' ')\n    s[::-1]\n    return''.join(s)\n",
        "num_ids": 41
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join([word.strip().upper() for word in s.split()])\n",
        "num_ids": 22
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Your code here\n    str_new=''\n    for i in s:\n        if i==' ':\n            str_new+=' '\n        else:\n            str_new+=i\n    return str_new[::-1].strip()\n",
        "num_ids": 62
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # your code here\n    return''.join(reversed(s.split()))\n",
        "num_ids": 23
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    for x in s:\n        if x!= \"\":\n            print(x,end=\"\")\n        else:\n            print()\n",
        "num_ids": 42
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(word.replace(' ','') for word in s.split())\n",
        "num_ids": 22
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split())[::-1]\n",
        "num_ids": 17
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_list(num):\n    '''\n    Write a function that generates a list of prime numbers up to and including the number passed to it.\n    '''\n    lst = []\n    for i in range(1, num + 1):\n        if prime_num(i):\n            lst.append(i)\n    return lst\n",
        "num_ids": 44
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5)):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # If the integer is not divisible by any number, it is a prime number.\n    if num == 1:\n        return False\n    \n    # If it is divisible by any number, it is not prime number.\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True\n    \ndef check_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    \n    # Iterate till the number is divisible by another number.\n    while num % 2 == 0:\n        num /= 2\n    \n    # If the number is divisible by another number, it is not prime.\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    \n    return True\n",
        "num_ids": 106
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 73
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def is_prime(num):\n        if num == 2 or num == 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        for i in range(5, int(num**0.5)+1, 6):\n            if num % i == 0:\n                return False\n        return True\n    return is_prime(num)\n",
        "num_ids": 92
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    i=2\n    while i<=num:\n        if num%i==0:\n            return False\n        i+=1\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True\n    \n    \ndef comp_prime_factors(num):\n    '''\n    Write a function to find all the prime factors of the given integer.\n    '''\n    if prime_num(num):\n        return list(range(2, num+1))\n    \n    factor_list = []\n    for i in range(2, int(math.sqrt(num)+1)):\n        if num % i == 0:\n            factor_list.append(i)\n            \n            if i in factor_list:\n                factor_list.remove(i)\n    \n    return factor_list\n    \n    \ndef primes(n):\n    '''\n    Write a function that returns the prime numbers up to and including\n    n.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    \n    prime_list = []\n    for i in range(3, n, 2):\n        if prime_num(i):\n            prime_list.append(i)\n            \n    return prime_list\n",
        "num_ids": 78
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(num))+1, 2):\n            if num%i==0:\n                return False\n        return True\n",
        "num_ids": 83
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(num))+1, 6):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 81
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==0:\n        return False\n    if num==1:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * 0.017453293\n    return radian\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree >= 0 and degree <= 180:\n        return degree\n    else:\n        print(\"Invalid degree input.\")\n        return 0\n",
        "num_ids": 33
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * (180/math.pi)\n    return degree\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi / 180)\n    return rad\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (180/math.pi)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    radian = degree / 360 * 3.14159\n    return radian\n",
        "num_ids": 27
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree/360.0*math.pi\n    return degree\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # YOUR CODE HERE\n    return degree * (math.pi / 180)\n",
        "num_ids": 20
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180.0)\n    return radian\n",
        "num_ids": 23
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # define the regular expression\n    # define a match object\n    # match the string\n    # return match object, start index, end index\n    return re.findall(pattern, text), 0, 0\n",
        "num_ids": 49
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex_str = pattern\n    # search the whole string, excluding everything not between the matched regex\n    substr = re.findall(regex_str, text)\n",
        "num_ids": 42
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    # search the text for the pattern\n    while True:\n        pos = text.find(pattern, start)\n        # if no match, then we have found a match\n        if pos == -1:\n            # if we have reached the end of the string, we have a match\n            if end == len(text):\n                return ('', start, end)\n            # if we have a next match, we can't find it\n            return ('', -1, -1)\n        # if there is a match, we must check its end\n        if pos == len(text):\n            end = len(text)\n        # update the start index\n        start = pos + len(pattern)\n        # update the end index\n        end = pos + len(pattern) + len(pattern)\n",
        "num_ids": 190
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # filter out any empty elements\n    pattern = pattern.replace(\" \", \"\").lower()\n    # split the string into a list of string items\n    pattern = pattern.split(\" \")\n    # create a regex object\n    regex = re.compile(pattern)\n    # create a regex object\n    substring = re.search(regex, text)\n    # find the start index and end index of the substring\n    start = substring.start()\n    end = substring.end()\n    # return the start index, the end index, and the substring\n    return start, end, substring\n",
        "num_ids": 142
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    end_match = False\n    regex = re.compile(pattern)\n    while end_match == False:\n        match = regex.search(text, start)\n        if match:\n            start = match.start()\n            end = match.end()\n            end_match = True\n        else:\n            end_match = False\n    return start, end, end-start\n",
        "num_ids": 101
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    n, m, l = len(text), len(pattern), 0\n    while l < n:\n        while m < n and pattern.find(text[l:m+1])!= -1:\n            m += 1\n        l += 1\n    return l, m, n-m\n",
        "num_ids": 70
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Your code here\n    return 0, 0, 0\n",
        "num_ids": 16
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literal_pattern = re.compile(pattern)\n",
        "num_ids": 16
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    s = re.search(pattern, text)\n    return s.group(0), s.start(), s.end()\n",
        "num_ids": 31
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = -1\n    end_index = -1\n    match_index = 0\n    regex_pattern = re.compile(pattern)\n",
        "num_ids": 39
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n<1:\n        print(\"Incorrect input\")\n        return -1\n",
        "num_ids": 22
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 1 : \n        return n\n    return n * bell_Number(n - 1)\n",
        "num_ids": 27
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        print(\"1\") \n    elif n == 2: \n        print(\"1/2\") \n    elif n == 3: \n        print(\"1/3\") \n    elif n == 4: \n        print(\"1/4\") \n    elif n == 5: \n        print(\"1/5\") \n    elif n == 6: \n        print(\"1/6\") \n    elif n == 7: \n        print(\"1/7\") \n    elif n == 8: \n        print(\"1/8\") \n    elif n == 9: \n        print(\"1/9\") \n    elif n == 10: \n        print(\"1/10\") \n    else: \n        print(\"Not a valid number\") \n",
        "num_ids": 194
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    n=int(n)\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            print(i)\n            break\n    else:\n        print(n)\n",
        "num_ids": 63
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n_max = 1 + (n - 1)//2\n    return n_max * n_max - n\n",
        "num_ids": 29
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    '''\n    arr = list(range(1, n+1))\n    for i in arr:\n        print(i, end = \" \")\n    '''\n    arr = list(range(1, n+1))\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[1]\n    elif n % 2 == 0:\n        return arr[n//2]\n    else:\n        return arr[n//2] + arr[n//2-1]",
        "num_ids": 85
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n%2==0:\n        return 3*((n-1)/2)+1\n    else:\n        return (3*((n-1)/2)+(n//2))+1\n",
        "num_ids": 72
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    nth_bell_number = 1\n    for i in range(2, n):\n        nth_bell_number *= (i - 1)\n    return nth_bell_numbe",
        "num_ids": 47
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    #print(math.factorial(n))\n    print(((math.factorial(n))/((math.factorial(n-1))))+(math.factorial(n-1))/(n))\n",
        "num_ids": 54
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(0, len(list1)):\n        if L <= list1[i]:\n            break\n    return list1[i:]\n",
        "num_ids": 38
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(list1)\n    print(len(list1))\n    L = L[L.index(list1[L.index(list1[-1])]):]\n    L = L[:L.index(list1[-1])]\n    print(L)\n    return L\n",
        "num_ids": 72
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # your code goes here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list_=[]\n    i=0\n    while i<len(list1):\n        if list1[i]==L:\n            list_.insert(i+1,list1.pop(i))\n            i=i+1\n        else:\n            i=i+1\n    return list_\n",
        "num_ids": 74
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(0,len(list1)-L):\n        if i+L<len(list1):\n            list1[i],list1[i+L]=list1[i+L],list1[i]\n    return list1\n",
        "num_ids": 61
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(list1)\n",
        "num_ids": 10
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i < L:\n            list2.append(list1[i])\n        else:\n            return list2\n    return list2\n",
        "num_ids": 54
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    else:\n        l = len(list1)\n        L = list(L)\n        index = L.index(L[l - 1])\n        del L[index]\n        return L\n",
        "num_ids": 59
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i]!= list1[j]:\n                result.append(list1[j])\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list_of_elements = list1[:]\n    removed_element = list_of_elements[L]\n    list_of_elements.remove(removed_element)\n    return list_of_elements\n    \n    \ndef remove_nth_last_element(list1, n):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but then'th last element removed.\n    '''\n    list_of_elements = list1[:]\n    removed_element = list_of_elements[n]\n    list_of_elements.remove(removed_element)\n    return list_of_elements\n    \n    \ndef remove_nth_first_element(list1, n):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but then'th first element removed.\n    '''\n    list_of_elements = list1[:]\n    removed_element = list_of_elements[n]\n    list_of_elements.remove(removed_element)\n    return list_of_elements\n    \n    \ndef remove_nth_last_first_element(list1, n):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but then'th last first element removed.\n    '''\n    list_of_elements = list1[:]\n    removed_element = list_of_elements[n]\n    list_of_elements.remove(removed_element)\n    list_of_elements.remove(list_of_elements[n-1])\n    list_of_elements.remove(list_of_elements[n-1])\n    list_of_elements.insert(n, removed_element)\n    return list_of_elements\n    \n    \ndef remove_nth_from_last_to_first(list1, n):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but then'th from last to first element removed.\n    '''\n    list_of_elements = list1[:]\n    removed_element = list_of_elements[n]\n    list_of_elements.remove(removed_element)\n    list_of_elements.append(removed_element)\n    list_of_elements.remove(list_of_elements[n+1])\n    list_of_elements.remove(list_of_elements[n+1])\n    list_of_elements.append(list_of_elements[n])\n    list_of_elements.insert(n, removed_element)\n    return list_of_elements\n    \n    \ndef remove_nth_from_first_to_last(list1, n):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but then'th from first to last element removed.\n    '''\n    list_of_elements = list1[:]\n    removed_element = list_of_elements[n]\n    list_of_elements.remove(removed_element)\n    list_of_elements.remove(list_of_elements[n-1])\n    list_of_elements.append(removed_element)\n    list_of_elements.insert(n, list_of_elements[n-1])\n    list_of_elements.insert(n, removed_element)\n    return list_of_elements\n    \n    \ndef remove_all_from_list(list1, n):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but all elements from the list removed.\n    '''\n    list_of_elements = list1[:]\n    list_of_elements.remove(list_of_elements[n])\n    return list_of_elements\n    \n    \ndef count_all_occurences(list1, item):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the number of times the item appears in the list.\n    '''\n    list_of_elements = list1[:]\n    count = 0\n    for element in list_of_elements:\n        if element == item:\n            count += 1\n    return count\n    \n    \ndef count_occurences_of_item(list1, item):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the number of times the item appears in the list.\n    '''\n    list_of_elements = list1[:]\n    count = 0\n    for element in list_of_elements:\n        if element == item:\n            count += 1\n    return count\n    \n    \ndef remove_first_occurence_from_list(list1, item):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurence of the item removed.\n    '''\n    list_of_elements = list1[:]\n    list_of_elements.remove(list_of_elements[0])\n    return list_of_elements\n    \n    \ndef remove_last_occurence_from_list(list1, item):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the last occurence of the item removed.\n    '''\n    list_of_elements = list1[:]\n    list_of_elements.remove(list_of_elements[-1])\n    return list_of_elements\n    \n    \ndef insert_into_list(list1, item):\n    '''\n    Write a python function which takes a list and return a list with the same elements, but all elements of the list are now in the list.\n    '''\n    list_of_elements = list1[:]\n    for element in list_of_elements:\n        if element == item:\n            list_of_elements.insert(len(list_of_elements), item)\n            break\n    return list_of_elements\n    \n    \ndef remove_occurence_from_list(list1, item):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but all occurrences of the item removed.\n    '''\n    list_of_elements = list1[:]\n    for element in list_of_elements:\n        if element == item:\n            list_of_elements.remove(element)\n            break\n    return list_of_elements\n    \n    \ndef is_sub_list(list1, sub_list):\n    '''\n    Write a python function which takes a list and return a boolean whether or not it is a sub-list.\n    '''\n    list_of_elements = list1[:]\n    for element in list_of_elements:\n        if element in sub_list:\n            return True\n    return False\n    \n    \ndef add_elements_to_list(list1, sub_list):\n    '''\n    Write a python function which takes a list and a sub-list and return a list with the same elements, but the elements in sub_list are now also in the list.\n    '''\n    list_of_elements = list1[:]\n    for element in sub_list:\n        list_of_elements.append(element)\n    return list_of_elements\n    \n    \ndef get_index_of_item(list1, item):\n    '''\n    Write a python function which takes a list and a string and return a list index of the first occurrence of item in list1.\n    '''\n    list_of_elements = list1[:]\n    for index in range(len(list_of_elements)):\n        if item in list_of_elements[index]:\n            return index\n    return -1\n    \n    \ndef get_index_of_item_in_list(list1, item):\n    '''\n    Write a python function which takes a list and a string and return a list index of the first occurrence of item in the list1.\n    '''\n    list_of_elements = list1[:]\n    for index in range(le",
        "num_ids": 22
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print('\\n\\n')\n    return max(test_list, key= lambda row: row[N])\n",
        "num_ids": 29
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #Your code here\n    max=0\n    for i in range(len(test_list)):\n        if len(test_list[i]) > max:\n            max = len(test_list[i])\n    return max\n",
        "num_ids": 57
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[:, N-1])\n",
        "num_ids": 16
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i][N-1] for i in range(N))\n",
        "num_ids": 24
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n",
        "num_ids": 12
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # your code goes here\n    if not test_list:\n        return []\n    test_list = sorted(test_list, key=lambda x: x[N])\n    return test_list[N]\n    \n",
        "num_ids": 53
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][N]\n    else:\n        return max(test_list[0][:N])\n",
        "num_ids": 38
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda x: x[N])\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return 0\n    \n    if N == 1:\n        return max(test_list)\n",
        "num_ids": 32
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # check if all sublists have the same length\n    if len(lst) % 2 == 0:\n        # add the first and second element to the last element of the list\n        lst.append([lst.pop()])\n        lst.append([lst.pop()])\n    else:\n        # add the first element to the last element of the list\n        lst.append([lst.pop(0)])\n        # add the second element to the last element of the list\n        lst.append([lst.pop()])\n    # insert the first element of each sublist\n    for sublist in lst:\n        sublist.insert(0, sublist.pop())\n    # return the list with the first element of each sublist\n    return lst\n",
        "num_ids": 182
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][0])\n    return new_lst\n",
        "num_ids": 46
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return []\n    res=[]\n    for i in lst:\n        res.append(i[0])\n        res.append(i[1])\n    return res",
        "num_ids": 49
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        lst.sort()\n        return [lst[0]] + merge(lst[1:])",
        "num_ids": 45
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    while lst:\n        lst1.append(lst.pop(0))\n    while lst:\n        lst2.append(lst.pop(0))\n    return lst1 + lst2\n",
        "num_ids": 68
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    return [lst[0][0], lst[1][1]]\n",
        "num_ids": 22
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return list(zip(lst[0], lst[1])",
        "num_ids": 18
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = [None]*len(lst)\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            new_lst[i].append(lst[i][j])\n    return new_lst\n",
        "num_ids": 71
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # make a copy of the lst\n    new_lst = copy.deepcopy(lst)\n    # iterate over the lst\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j]!= 0:\n                new_lst[i][j] = lst[i][j]\n    return new_lst\n    \n",
        "num_ids": 106
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for x in lst:\n        result.append(x[0])\n        result.append(x[1])\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum = sum + item\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Write your code here.\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    def cummulative_sum(val_tuple):\n        '''\n        For each element in the tuple, increment its value by the sum of all the values\n        that are present in it.\n        '''\n        sum = 0\n        for i in val_tuple:\n            sum += i\n        return sum\n    \n    cummulative_sum(test_list)\n",
        "num_ids": 40
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    def recursion(current_sum, current_list):\n        if len(current_list) == 0:\n            return 0\n        elif len(current_list) == 1:\n            return current_sum + current_list[0]\n",
        "num_ids": 58
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum\n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    test_list = sorted(test_list)\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n",
        "num_ids": 59
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Write your code here.\n    cum_sum = 0\n    for num in test_list:\n        cum_sum = cum_sum + num\n    return cum_sum\n",
        "num_ids": 43
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for num in nums:\n        tuple_list.append(sum(num)/len(num))\n    return tuple_list\n",
        "num_ids": 41
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #returns average value for each tuple of tuples\n    return [(num[0] + num[1] + num[2]) / 3 for num in zip(*nums)]\n",
        "num_ids": 43
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for i in range(len(nums)):\n        num_list.append(nums[i])\n    total = 0\n    for i in num_list:\n        total = total + i\n    average = total / len(nums)\n    return average\n",
        "num_ids": 71
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = list(nums)\n    tuple_list_average = []\n    for item in tuple_list:\n        total = 0\n        for number in item:\n            total += number\n        average = total/len(item)\n        tuple_list_average.append(average)\n    return tuple_list_average\n    \n",
        "num_ids": 83
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(a,sum(b)/len(b)) for (a,b) in nums]\n",
        "num_ids": 26
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [tuple(sums) for sums in zip(*nums)]\n    \ndef max_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the maximum value for each tuple as a list.\n    '''\n    return [max(tup) for tup in zip(*nums)]\n    \ndef min_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the minimum value for each tuple as a list.\n    '''\n    return [min(tup) for tup in zip(*nums)]\n    \ndef list_intersection(list1, list2):\n    '''\n    Write a function which returns the intersection of two given lists as a new list.\n    '''\n    return [element for element in list1 if element in list2]\n    \ndef list_union(list1, list2):\n    '''\n    Write a function which returns the union of two given lists as a new list.\n    '''\n    return list(set(list1).union(list2))\n    \ndef list_difference(list1, list2):\n    '''\n    Write a function which returns the difference of two given lists as a new list.\n    '''\n    return [element for element in list1 if element not in list2]\n    \ndef list_length(list1):\n    '''\n    Write a function which returns the length of the given list as a new list.\n    '''\n    return len(list1)\n    \ndef boolean_or(list1, list2):\n    '''\n    Write a function which returns the boolean value of the intersection of two given lists as a new list.\n    '''\n    return bool(list1) or bool(list2)\n    \ndef boolean_and(list1, list2):\n    '''\n    Write a function which returns the boolean value of the union of two given lists as a new list.\n    '''\n    return bool(list1) and bool(list2)\n    \ndef boolean_xor(list1, list2):\n    '''\n    Write a function which returns the boolean value of the difference of two given lists as a new list.\n    '''\n    return bool(list1)!= bool(list2)\n    \ndef list_arg_or(list1, list2):\n    '''\n    Write a function which returns the intersection or union of two given lists as a new list.\n    '''\n    if list1 or list2:\n        return list(set(list1).union(list2))\n    else:\n        return []\n    \ndef list_arg_and(list1, list2):\n    '''\n    Write a function which returns the intersection or union of two given lists as a new list.\n    '''\n    if list1 and list2:\n        return list(set(list1).intersection(list2))\n    else:\n        return []\n    \ndef list_arg_xor(list1, list2):\n    '''\n    Write a function which returns the intersection or union of two given lists as a new list.\n    '''\n    if list1 or list2:\n        return list(set(list1).symmetric_difference(list2))\n    else:\n        return []\n    \ndef list_arg_intersection(list1, list2):\n    '''\n    Write a function which returns the intersection or union of two given lists as a new list.\n    '''\n    return list(set(list1).intersection(list2))\n    \ndef list_arg_union(list1, list2):\n    '''\n    Write a function which returns the union or union of two given lists as a new list.\n    '''\n    return list(set(list1).union(list2))\n    \ndef list_arg_difference(list1, list2):\n    '''\n    Write a function which returns the difference of two given lists as a new list.\n    '''\n    return [element for element in list1 if element not in list2]\n    \ndef list_arg_length(list1):\n    '''\n    Write a function which returns the length of the given list as a new list.\n    '''\n    return len(list1)\n    \ndef list_extend(list1, list2):\n    '''\n    Write a function which takes a given list and returns a new list which has the items from list1 and list2 in addition to those already in the list.\n    '''\n    return list1 + list2\n    \ndef list_extend_without_duplicates(list1):\n    '''\n    Write a function which takes a given list and returns a new list which has the items from list1 and it doesn't contain any duplicate items.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n    \ndef list_remove_duplicates(list1):\n    '''\n    Write a function which takes a given list and returns a new list with the items from list1 without duplicates.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n    \ndef list_remove_smallest(list1):\n    '''\n    Write a function which takes a given list and returns a new list with the items from list1 which have a length less than or equal to 4.\n    '''\n    new_list = []\n    for item in list1:\n        if len(item) < 4:\n            new_list.append(item)\n    return new_list\n    \ndef list_remove_largest(list1):\n    '''\n    Write a function which takes a given list and returns a new list with the items from list1 which have a length greater than or equal to 4.\n    '''\n    new_list = []\n    for item in list1:\n        if len(item) > 4:\n            new_list.append(item)\n    return new_list\n    \ndef list_pop(list1):\n    '''\n    Write a function which takes a given list and returns a new list which has the items from list1 in reverse order.\n    '''\n    new_list = []\n    for item in list1:\n        new_list.append(item)\n    return new_list\n    \ndef list_append(list1, item):\n    '''\n    Write a function which takes a given list and item and appends the item in the list1 at the end.\n    '''\n    list1.append(item)\n    \ndef list_remove(list1, item):\n    '''\n    Write a function which takes a given list and item and appends the item in the list1 at the beginning.\n    '''\n    list1.insert(0, item)\n    \ndef list_sort(list1):\n    '''\n    Write a function which takes a given list and sorts it.\n    '''\n    list1.sort()\n    \ndef list_sort_by_length(list1):\n    '''\n    Write a function which takes a given list and sorts it by the length of the list.\n    '''\n    list1.sort(key=len)\n    \ndef list_sort_by_alphabetic(list1):\n    '''\n    Write a function which takes a given list and sorts it by the alphabetical order of the list.\n    '''\n    list1.sort(key=lambda item: (item[0], item[1]))\n    \ndef list_sort_by_alphabetic_and_increasing(list1):\n    '''\n    Write a function which takes a given list and sorts it by the alphabetical order of the list and ascending.\n    '''\n    list1.sort(key=lambda item: (item[1], item[0]))\n    \ndef list_sort_by_alphabetic_and_descending(list1):\n    '''\n    Write a function which takes a given list and sorts it by the alphabetical order of the list and descending.\n    '''\n    list1.sort(key=lambda item: (item[1], item[0]))\n    \ndef list_sort_by_alphabetic_descending(list1):\n    '''\n    Write a function which takes a given list and sorts it by the alphabetical order of the list and descending.\n    '''\n    list1.sort(key=lambda item: (item[0], item[1])",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_of_tuples = []\n    for x in nums:\n        for y in x:\n            list_of_tuples.append(y)\n    list_of_tuples.sort()\n    \n    return [list_of_tuples[i] for i in range(0,len(list_of_tuples))]\n",
        "num_ids": 83
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_list = []\n    for item in nums:\n        for i in item:\n            total_list.append(i)\n    return total_list\n",
        "num_ids": 40
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #list comprehension:\n    list1=[]\n    for i in nums:\n        list1.append(i)\n    average=[]\n    for i in list1:\n        if len(i)==1:\n            average.append(i[0])\n        elif len(i)>1:\n            average.append(sum(i)/len(i))\n    return average",
        "num_ids": 92
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_lst = []\n    for x in nums:\n        for y in x:\n            avg_lst.append(y)\n    return avg_lst\n",
        "num_ids": 45
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    res = tuple_modulo(test_tup1, test_tup2)\n    for item in res:\n        if (item % 2 == 0):\n            print(item)\n",
        "num_ids": 46
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup_mod = list(test_tup1)\n    test_tup_mod.reverse()\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_1 = test_tup1[0] % test_tup1[1] # getting the modulo of the first tuple\n    mod_2 = test_tup2[0] % test_tup2[1] # getting the modulo of the second tuple\n",
        "num_ids": 66
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0] * test_tup2[0] % test_tup2[1]) % test_tup1[1]\n",
        "num_ids": 41
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1_mod_tup2 = (test_tup1[0] % test_tup2[0])\n    test_tup1_mod_tup2.reverse()\n    test_tup2_mod_tup1 = (test_tup2[0] % test_tup1[0])\n    test_tup2_mod_tup1.reverse()\n",
        "num_ids": 98
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Write your code here.\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "num_ids": 62
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuples must be the same length\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n",
        "num_ids": 83
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    mod = []\n    for t1 in tup1:\n        mod.append(t1)\n    for t2 in tup2:\n        mod.append(t2)\n    mod = tuple(mod)\n",
        "num_ids": 75
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = test_tup1[:]\n    test_tup2 = test_tup2[:]\n    modulo_of_tuple = tuple(map(lambda x: x % test_tup2[1], test_tup2[0]))\n    tuple_modulo_of_tuple = tuple(map(lambda x: x % test_tup1[1], test_tup1[0]))\n",
        "num_ids": 107
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0] % test_tup2[0]])\n    \ndef two_tuples_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0] % test_tup2[0]])\n    \ndef three_tuples_modulo(test_tup1, test_tup2, test_tup3):\n    '''\n    Write a function which takes three tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2) or len(test_tup1)!= len(test_tup3):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = tuple(test_tup3)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    elif test_tup2[0] % test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup2[0]])\n    \ndef four_tuples_modulo(test_tup1, test_tup2, test_tup3, test_tup4):\n    '''\n    Write a function which takes four tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2) or len(test_tup1)!= len(test_tup3) or len(test_tup1)!= len(test_tup4):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = tuple(test_tup3)\n    test_tup4 = tuple(test_tup4)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    elif test_tup2[0] % test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup2[0]])\n    \ndef five_tuples_modulo(test_tup1, test_tup2, test_tup3, test_tup4, test_tup5):\n    '''\n    Write a function which takes five tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2) or len(test_tup1)!= len(test_tup3) or len(test_tup1)!= len(test_tup4) or len(test_tup1)!= len(test_tup5):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = tuple(test_tup3)\n    test_tup4 = tuple(test_tup4)\n    test_tup5 = tuple(test_tup5)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    elif test_tup2[0] % test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0] % test_tup2[0]])\n    \ndef six_tuples_modulo(test_tup1, test_tup2, test_tup3, test_tup4, test_tup5):\n    '''\n    Write a function which takes six tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2) or len(test_tup1)!= len(test_tup3) or len(test_tup1)!= len(test_tup4) or len(test_tup1)!= len(test_tup5):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup",
        "num_ids": 101
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def get_S(x, y, k): \n        '''\n        returns number of ways for x^2 + y^2 to reach point on plane defined by x, y\n        '''\n        # If S is greater than 0, then that point is a jump \n        # (jump is always pointing into that point) \n        if S == 0: return 1\n        # If S is less than 0, then that point is not a jump \n        # and therefore no need to check for jump points \n        # which are on the line of the plane defined by x, y \n        if S < 0: return 0\n        # If S is equal to 0, then that point is a jump \n        # and therefore no need to check for jump points \n        # which are on the line of the plane defined by x, y \n        if S == 0: return 0\n        # For all the numbers of steps which are greater than 0,\n        # it is already checked in min_Jumps \n        for step in range(1, min(steps, k) + 1): \n            # If current step is less than k, then \n            # that point is not a jump and therefore no need to \n            # check for jump points \n            # which are on the line of the plane defined by x, y \n            if step < k: \n                # if current step is less than k, return \n                # the minimum number of jumps \n                return min(get_S(x, y, step), get_S(x, y, k))\n        # If all steps are less than k, the point is not a jump \n        # and therefore no need to check any of them \n        return 0\n    \n    # Initialization \n    N = len(d) \n    S = [[0 for x in range(N)] for y in range(N)] \n    \n    # For every step of length d, we want to check for the point (x, y) \n    # which is inside the plane defined by the given plane \n    for step in range(1, min(steps, k) + 1): \n        x = d[step - 1][0] \n        y = d[step - 1][1] \n        if y!= 0: \n            # Check the S of (x, y) is greater than zero \n            S[step - 1][x - 1] = S[step - 1][x] + 1\n        if x!= 0: \n            # Check the S of (x, y) is less than zero \n            S[step - 1][x - 1] = S[step - 1][x] + 1\n        if y!= 0: \n            # Check the S of (x, y) is equal to zero \n            S[step - 1][x - 1] = S[step - 1][x] + 1\n        if x!= 0: \n            # Check the S of (x, y) is greater than zero \n            S[step - 1][x] = S[step - 1][x - 1] + 1\n    \n    # If S is greater than 0, then that point is a jump \n    # (jump is always pointing into that point) \n    return get_S(0, 0, k)\n",
        "num_ids": 707
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1: \n        return steps\n    if steps == d:\n        return 0\n    if steps == d+1:\n        return 1\n    \n    \n    return min_Jumps(steps - 1, d) + min_Jumps(steps - d, d+1)\n",
        "num_ids": 70
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d[0][0] > 0:\n        return 0\n    if d[0][-1] > 0:\n        return 0\n    if d[-1][-1] > 0:\n        return 0\n    jumps = 0\n    #set the current step\n    i, j = 0, 0\n    #calculate how many steps are going through the matrix\n    while i < steps:\n        #set current step\n        j = 0\n        while j < steps:\n            #check whether the current step is in the range of the matrix\n            #if so, update the current step to (i, j)\n            if i < d[j][0] and j < d[j][-1]:\n                i = i + 1\n                j = j + 1\n            #if not, continue\n            else:\n                j = j + 1\n        #jumps counter\n        jumps = jumps + 1\n    #return the number of jumps\n    return jumps\n",
        "num_ids": 224
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return True\n    if d[steps][0] == d[steps - 1][0]:\n        return min_Jumps(steps - 1, d)\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    global min_Jumps\n    min_Jumps = -1\n    #count = 0\n    #for i in range(d):\n    #    count = 0\n    #    for j in range(d):\n    #        if steps[i][j] > 0:\n    #            count += 1\n    #    if count == d*d:\n    #        min_Jumps = count\n    #        return min_Jumps\n    #    else:\n    #        continue\n    #    print(\"Number of jumps required: \" + str(count))\n",
        "num_ids": 131
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    d = d % 1000\n    cnt = 0\n    for i in range(steps):\n        cnt += min_Jumps(i + 1, (d + d * (i + 1) / steps) % 1000)\n",
        "num_ids": 54
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d == 1:\n        return 0\n    elif d == 2:\n        return 1\n    elif d == 3:\n        return 2\n    elif d == 4:\n        return 4\n    elif d == 5:\n        return 5\n    elif d == 6:\n        return 6\n    elif d == 7:\n        return 7\n    else:\n        return -1\n",
        "num_ids": 106
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Step #1: Find the minimum number of jumps.\n    \n    # Step #2: Check if the target point is in the grid.\n    \n    # Step #3: If the target point is a wall, it will jump back to the grid point, which is not a wall.\n    \n    # Step #4: If the number of jumps is at least the minimum number of jumps, then return True, otherwise return False.\n    \n    # Step #5: Check if the grid point is in the boundary of the grid. If it is, it must be not in a wall.\n    \n    # Step #6: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #7: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #8: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #9: If the steps number is at least the minimum steps required to reach the grid point, then return True.\n    \n    # Step #10: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #11: If the steps number is at least the minimum steps required to reach the grid point, then return True.\n    \n    # Step #12: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #13: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #14: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #15: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #16: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #17: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #18: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #19: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #20: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #21: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #22: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #23: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #24: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #25: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #26: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #27: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #28: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #29: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #30: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #31: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #32: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #33: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #34: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #35: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #36: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #37: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #38: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #39: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #40: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #41: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #42: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #43: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #44: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #45: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #46: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #47: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #48: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #49: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #50: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #51: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #52: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #53: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #54: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #55: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #56: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #57: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #58: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #59: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #60: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #61: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #62: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #63: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #64: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Step #65: Check if the steps number is at least the minimum steps required to reach the grid point, else return False.\n    \n    # Ste",
        "num_ids": 1995
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Number of jumps = 1 + # of steps \n    # Number of jumps = # of steps \n    #  + 1 \n    #  + 2\n    #  + 3\n    #  + 4\n    #  + 5\n    #  + 6\n    #  + 7\n    #  + 8\n    #  + 9\n    #  + 10\n    #  + 11\n    #  + 12\n    #  + 13\n    #  + 14\n    #  + 15\n    #  + 16\n    #  + 17\n    #  + 18\n    #  + 19\n    #  + 20\n    #  + 21\n    #  + 22\n    #  + 23\n    #  + 24\n    #  + 25\n    #  + 26\n    #  + 27\n    #  + 28\n    #  + 29\n    #  + 30\n    #  + 31\n    #  + 32\n    #  + 33\n    #  + 34\n    #  + 35\n    #  + 36\n    #  + 37\n    #  + 38\n    #  + 39\n    #  + 40\n    #  + 41\n    #  + 42\n    #  + 43\n    #  + 44\n    #  + 45\n    #  + 46\n    #  + 47\n    #  + 48\n    #  + 49\n    #  + 50\n    #  + 51\n    #  + 52\n    #  + 53\n    #  + 54\n    #  + 55\n    #  + 56\n    #  + 57\n    #  + 58\n    #  + 59\n    #  + 60\n    #  + 61\n    #  + 62\n    #  + 63\n    #  + 64\n    #  + 65\n    #  + 66\n    #  + 67\n    #  + 68\n    #  + 69\n    #  + 70\n    #  + 71\n    #  + 72\n    #  + 73\n    #  + 74\n    #  + 75\n    #  + 76\n    #  + 77\n    #  + 78\n    #  + 79\n    #  + 80\n    #  + 81\n    #  + 82\n    #  + 83\n    #  + 84\n    #  + 85\n    #  + 86\n    #  + 87\n    #  + 88\n    #  + 89\n    #  + 90\n    #  + 91\n    #  + 92\n    #  + 93\n    #  + 94\n    #  + 95\n    #  + 96\n    #  + 97\n    #  + 98\n    #  + 99\n    #  + 100\n    #  + 101\n    #  + 102\n    #  + 103\n    #  + 104\n    #  + 105\n    #  + 106\n    #  + 107\n    #  + 108\n    #  + 109\n    #  + 110\n    #  + 111\n    #  + 112\n    #  + 113\n    #  + 114\n    #  + 115\n    #  + 116\n    #  + 117\n    #  + 118\n    #  + 119\n    #  + 120\n    #  + 121\n    #  + 122\n    #  + 123\n    #  + 124\n    #  + 125\n    #  + 126\n    #  + 127\n    #  + 128\n    #  + 129\n    #  + 130\n    #  + 131\n    #  + 132\n    #  + 133\n    #  + 134\n    #  + 135\n    #  + 136\n    #  + 137\n    #  + 138\n    #  + 139\n    #  + 140\n    #  + 141\n    #  + 142\n    #  + 143\n    #  + 144\n    #  + 145\n    #  + 146\n    #  + 147\n    #  + 148\n    #  + 149\n    #  + 150\n    #  + 151\n    #  + 152\n    #  + 153\n    #  + 154\n    #  + 155\n    #  + 156\n    #  + 157\n    #  + 158\n    #  + 159\n    #  + 160\n    #  + 161\n    #  + 162\n    #  + 163\n    #  + 164\n    #  + 165\n    #  + 166\n    #  + 167\n    #  + 168\n    #  + 169\n    #  + 170\n    #  + 171\n    #  + 172\n    #  + 173\n    #  + 174\n    #  + 175\n    #  + 176\n    #  + 177\n    #  + 178\n    #  + 179\n    #  + 180\n    #  + 181\n    #  + 182\n    #  + 183\n    #  + 184\n    #  + 185\n    #  + 186\n    #  + 187\n    #  + 188\n    #  + 189\n    #  + 190\n    #  + 191\n    #  + 192\n    #  + 193\n    #  + 194\n    #  + 195\n    #  + 196\n    #  + 197\n    #  + 198\n    #  + 199\n    #  + 200\n    #  + 201\n    #  + 202\n    #  + 203\n    #  + 204\n    #  + 205\n    #  + 206\n    #  + 207\n    #  + 208\n    #  + 209\n    #  + 210\n    #  + 211\n    #  + 212\n    #  + 213\n    #  + 214\n    #  + 215\n    #  + 216\n    #  + 217\n    #  + 218\n    #  + 219\n    #  + 220\n    #  + 221\n    #  + 222\n    #  + 223\n    #  + 224\n    #  + 225\n    #  + 226\n    #  + 227\n    #  + 228\n    #  + 229\n    #  + 230\n    #  + 231\n    #  + 232\n    #  + 233\n    #  + 234\n    #  + 235\n    #  + 236\n    #  + 237\n    #  + 238\n    #  + 239\n    #  + 240\n    #  + 241\n    #  + 242\n    #  + 243\n    #  + 244\n    #  + 245\n    #  + 246\n    #  + 247\n    #  + 248\n    #  + 249\n    #  + 250\n    #  + 251\n    #  + 252\n    #  + 253\n    #  + 254\n    #  + 255\n    #  + 256\n    #  + 257\n    #  + 258\n    #  + 259\n    #  + 260\n    #  + 261\n    #  + 262\n    #  + 263\n    #  + 264\n    #  + 265\n    #  + 266\n    #  + 267\n    #  + 268\n    #  + 269\n    #  + 270\n    #  + 271\n    #  + 272\n    #  + 273\n    #  + 274\n    #  + 275\n    #  + 276\n    #  + 277\n    #  + 278\n    #  + 279\n    #  + 280\n    #  + 281\n    #  + 282\n    #  + 283\n    #  + 284\n    #  + 285\n    #  + 286\n    #  + 287\n    #  + 288\n    #  + 289\n    #  + 290\n    #  + 291\n    #  + 292\n    #  + 293\n    #  + 294\n    #  + 295\n    #  + 296\n    #  + 297\n    #  + 298\n    #  + 299\n    #  + 300\n    #  + 301\n    #  + 302\n    #  + 303\n    #  + 304\n    #  + 305\n    #  + 306\n    #  + 307\n    #  + 308\n    #  + 309\n    #  + 310\n    #  + 311\n    #  + 312\n    #  + 313\n    #  + 314\n    #  + 315\n    #  + 316\n    #  + 317\n    #  + 318\n    #  + 319\n    #  + 320\n    #  + 321\n    #  + 322\n    #  + 323\n    #  + 324\n    #  + 325\n    #  + 326\n    #  + 327\n    #  + 328",
        "num_ids": 1994
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Input:\n    # steps: int, distance of each jump (d, 0)\n    # d: int, start point of path\n    # Output:\n    # count: int, number of jumps required\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)==0 or len(nums2)==0:\n        return []\n    else:\n        nums = [nums1[0]]\n        num2 = [nums2[0]]\n        i=0\n        while i < len(nums1):\n            if nums[0] == nums2[0]:\n                i+=1\n                continue\n            nums.append(nums[i]+nums[i+1])\n            num2.append(num2[i])\n            i+=2\n        return [nums,num2]\n",
        "num_ids": 140
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n = len(nums1)\n    for i in range(n):\n        for j in range(n):\n            if nums1[i]==nums2[j]:\n                return nums1[i]\n    return -1\n    \n    \n    \ndef main():\n    '''\n    Simple examples\n    '''\n    print(\"Hello World\")\n    \n    \n    nums1=[1,2,3,4,5]\n    print(div_list(nums1,nums1))\n    \n    nums2=[4,5,6]\n    print(div_list(nums1,nums2))\n    \n    \n    \n    \n    \n    \n    \n    \nif __name__==\"__main__\":\n    main()\n    ",
        "num_ids": 107
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # this is to find the divisors\n    i = 0\n    result = []\n    while i < len(nums1):\n        j = 0\n        while j < len(nums2):\n            if nums1[i] % nums2[j] == 0:\n                result.append(nums1[i])\n                result.append(nums2[j])\n                break\n            j += 1\n        i += 1\n",
        "num_ids": 106
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for (x,y) in zip(nums1,nums2)]\n",
        "num_ids": 26
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num/n for num, n in zip(nums1, nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)<2 or len(nums2)<2:\n        return False\n    if nums1[0]==nums2[0]:\n        return False\n    return nums1[0]/nums2[0]\n",
        "num_ids": 63
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #find the length of the second list and then make a copy\n    len_of_second = len(nums2)\n    #iterate through the second list\n    for i in range(len_of_second):\n        #find the length of the first list\n        len_of_first = len(nums1)\n        #find the index of the first list\n        first_index = nums1.index(nums2[i])\n        #find the index of the first element in the second list\n        first_element = nums1[first_index]\n        #if the second element is greater than the first element, change the second index to the first index\n        if first_element > first_index:\n            nums1[first_index],nums1[i] = nums1[i],nums1[first_index]\n    #return the modified list\n    return nums1",
        "num_ids": 209
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    c=[]\n    if len(nums1)>len(nums2):\n        for i in range(len(nums1)):\n            c.append(nums1[i])\n        for j in range(len(nums2)):\n            c.append(nums2[j])\n    else:\n        for i in range(len(nums2)):\n            c.append(nums2[i])\n        for j in range(len(nums1)):\n            c.append(nums1[j])\n    return c\n",
        "num_ids": 135
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list1=[]\n    list2=[]\n    list1=[x for x in nums1]\n    list2=[x for x in nums2]\n    n=len(list1)\n    i=0\n    while i<n:\n        list1[i]=list1[i]**2\n        i+=1\n    n=len(list2)\n    i=0\n    while i<n:\n        list2[i]=list2[i]**2\n        i+=1\n    return [list1,list2]\n",
        "num_ids": 130
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # your code goes here\n    return nums1[:len(nums2)],nums2[:len(nums1)]\n",
        "num_ids": 35
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #s = \"123425\"\n    #s = \"123456789\"\n    #s = \"99\"\n    s = \"89\"\n    #s = \"12\"\n    #s = \" \"\n    #s = \"-\"\n    #s = \"\"\n    #s = \" \"\n    #s = \" \"\n    #s = \" \"\n    s = test_str.strip()\n    s = s.replace(\" \",\"\")\n    s = s.replace(\"-\",\"\")\n    s = s.replace(\",\",\"\")\n    s = s.replace(\".\",\"\")\n    #print(s)\n    s = s.replace(\" \",\"\")\n    nums = list(s)\n    #print(nums)\n    nums = sorted(nums)\n    #print(nums)\n    pos = len(nums)-1\n    for i in range(len(nums)):\n        if nums[i]!= \".\":\n            nums[i] = nums[i+1]\n            nums[i] = nums[i+1]\n            #print(nums)\n            break\n    for i in range(len(nums)):\n        if nums[i] == \".\":\n            pos = i\n            break\n    nums[pos] = nums[pos-1]\n    nums[pos] = nums[pos+1]\n    nums[pos] = nums[pos-1]\n    nums[pos] = nums[pos+1]\n    nums[pos] = nums[pos-1]\n    #print(nums)\n    return \"\".join(nums)\n",
        "num_ids": 396
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # if string is empty, it does not need to be moved\n    if len(test_str) == 0:\n        return ''\n",
        "num_ids": 33
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('1', '2').replace('3', '4').replace('5', '6').replace('7', '8').replace('9', '0')\n    print(test_str)\n    test_str_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_str_list.append(test_str[i])\n    test_str = ''.join(test_str_list)\n    print(test_str)\n    return test_str\n",
        "num_ids": 137
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    start = 0\n    end = 0\n    for index, char in enumerate(test_str):\n        if char.isdigit():\n            end += 1\n            if end == 3:\n                print(''.join([str(i) for i in list(map(int, list(test_str[start:index])))]))\n                start = index\n        else:\n            end = 0\n",
        "num_ids": 94
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    start = test_str[0]\n    step = test_str[1]\n    new_str = \"\"\n",
        "num_ids": 29
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # get the length of the string\n    length = len(test_str)\n    # initialize an array of zeroes\n    num_zeroes = []\n    # for each letter in the string\n    for i in test_str:\n        # if a letter is a number, add it to the array\n        if i.isnumeric():\n            num_zeroes.append(i)\n    # create a new string by replacing each letter in the array\n    # by the number from the original string\n    new_test_str = ''.join(num_zeroes)\n    # return the new string\n    return new_test_str\n",
        "num_ids": 148
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Get string length\n    length = len(test_str)\n    # Set current index\n    i = 0\n    # Loop through string\n    while i < length:\n        # Check if current index is a number\n        if test_str[i].isdigit():\n            # Set current index to end\n            i = length\n            # Continue looping\n            continue\n        # Check if current index is a letter\n        elif test_str[i].isalpha():\n            # Set current index to the end\n            i = length\n            # Continue looping\n            continue\n        # Check if current index is a period\n        elif test_str[i] == '.':\n            # Set current index to end\n            i = length\n            # Continue looping\n            continue\n        # Check if current index is a space\n        elif test_str[i] =='':\n            # Set current index to the end\n            i = length\n            # Continue looping\n            continue\n        # Check if current index is a newline\n        elif test_str[i] == '\\n':\n            # Set current index to the end\n            i = length\n            # Continue looping\n            continue\n        # Move to next letter\n        else:\n            # Set current index to the end\n            i = length\n            # Continue looping\n            continue\n    # Return current index\n    return i\n",
        "num_ids": 318
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for c in test_str:\n        if c.isdigit():\n            x = ord(c)\n            if x > 122:\n                y = x - 26\n                print(\"Change this to '\", chr(y), \",'\")\n                x = ord(chr(y))\n                if x > 122:\n                    print(\"String is too long\")\n                    break\n                elif x == 122:\n                    print(chr(y), \" is right here\")\n                    test_str = test_str[0:len(test_str)-1] + chr(y + 26) + test_str[len(test_str)+1:]\n                    print(test_str, \" changed to '\", chr(y), \",'\")\n                    break\n                else:\n                    print(\"String is too long\")\n                    break\n            else:\n                print(\"String is not a number\")\n                break\n        else:\n            print(\"String is not a number\")\n            break\n    return test_str\n",
        "num_ids": 232
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result_string = ''\n    str_list = test_str.split()\n    if len(str_list) == 0:\n        return 'Please enter some string'\n    else:\n        for i in range(len(str_list)):\n            if str_list[i] == '0':\n                str_list[i] = '1'\n            else:\n                if str_list[i] == '1':\n                    str_list[i] = '0'\n                else:\n                    result_string += str_list[i]\n        return result_string\n",
        "num_ids": 136
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    final_str = \"\"\n    for char in test_str:\n        if char.isnumeric():\n            final_str = final_str + char\n    return final_str\n",
        "num_ids": 44
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    i = 0\n    max_num = a[0]\n    count_of_divisors = 1\n    max_count = 1\n    while count_of_divisors <= len(a):\n        if (a[i] % a[i+1]) == 0:\n            count_of_divisors += 1\n        else:\n            count_of_divisors = 1\n        i+=1\n        if max_num < a[i] / a[i-1]:\n            max_num = a[i] / a[i-1]\n            max_count += 1\n    return max_count, max_num\n",
        "num_ids": 151
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # define all the sublists\n    sublist1 = []\n    sublist2 = []\n    for x in a:\n        if x % 2 == 0:\n            sublist1.append(x)\n        else:\n            sublist2.append(x)\n    \n    # find all the lists\n    subset_list = [sublist1, sublist2]\n    \n    # construct the result\n    lst_len = len(a)\n    result = []\n    for sublist in subset_list:\n        if len(sublist) == lst_len:\n            result.append(max(sublist))\n    return result\n",
        "num_ids": 152
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from itertools import combinations\n    from operator import mul\n    \n    nums = a\n    \n    for i in range(2, len(nums)):\n        if(mul(i, i) in nums):\n            nums.remove(mul(i, i))\n    \n    return len(nums)\n",
        "num_ids": 80
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_length = -1\n    possible_length = [i for i in range(1, len(a)+1)]\n    for i in range(1, len(a)+1):\n        for j in range(1, len(a)+1):\n            if a[i-1]%a[j] == 0 and a[i-1]//a[j] > max_length:\n                possible_length[j] = possible_length[j] - a[i-1]\n            elif a[i-1]%a[j] == 0 and a[i-1]//a[j] < max_length:\n                possible_length[j] = possible_length[j] + a[i-1]//a[j]\n    return max(possible_length)\n",
        "num_ids": 190
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    m = len(a)\n    n = len(a[0])\n    for i in range(n):\n        for j in range(i):\n            if a[i][j] % a[i][j] == 0:\n                return len(a[i][:j] + a[i][j+1:]) + 1\n    return m + n + 1\n",
        "num_ids": 89
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Hint: use a set to keep track of the subset sizes\n    pass\n    # return set(range(max(a)+1, max(a)+a))\n",
        "num_ids": 41
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    subsets = []\n    largest = 0\n    for i in a:\n        subsets.append(i)\n        if len(subsets) > largest:\n            largest = len(subsets)\n    return largest\n",
        "num_ids": 55
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    res = []\n    subset_size = []\n    for i in range(len(a)):\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                if j not in subset_size:\n                    subset_size.append(j)\n                if i not in subset_size:\n                    subset_size.append(i)\n    return len(subset_size)\n",
        "num_ids": 103
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = len(a)\n    def check(n, s):\n        if n == size:\n            return s\n        if n % s == 0:\n            return check(n // s, s)\n        return -1\n    return check(1, len(a) - 1)\n",
        "num_ids": 69
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == len(arr2):\n        return find_median(arr1, arr2)\n    elif len(arr1) > len(arr2):\n        return get_median(arr1, arr2, len(arr1))\n    else:\n        return get_median(arr2, arr1, len(arr2))\n",
        "num_ids": 87
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==1:\n        return arr1[0]\n    else:\n        return (arr1[n//2] + arr2[n//2])/2\n",
        "num_ids": 42
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 2:\n        return None\n    else:\n        return arr1[n//2]\n    \n    # If list is already sorted\n    if n % 2 == 0:\n        return get_median(arr1, arr2, n//2)\n    else:\n        return (arr1[n//2] + arr2[n//2]) / 2\n",
        "num_ids": 89
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return\n    \n    arr1_index = len(arr1) - 1\n    arr2_index = len(arr2) - 1\n    \n    arr1_median = 0\n    arr2_median = 0\n",
        "num_ids": 74
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2!= 0:\n        return get_median(arr2, arr1, n//2)\n    else:\n        return (arr1[n//2] + arr2[n//2]) / 2\n",
        "num_ids": 55
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) == 0:\n        return 0\n    if len(arr2) == 0:\n        return -1\n    if n == 0:\n        return 0\n    \n    arr1_sorted_indexes = sorted(list(set(range(len(arr1))).difference(set(arr2))))\n    arr2_sorted_indexes = sorted(list(set(range(len(arr2))).difference(set(arr1))))\n",
        "num_ids": 139
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]\n",
        "num_ids": 46
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) < 2:\n        return arr1[n//2]\n    elif len(arr1) == 2:\n        return get_median(arr1[:n//2], arr2, n//2)\n    elif len(arr1) % 2 == 0:\n        return (arr1[n//2] + arr1[n//2 - 1])/2\n    else:\n        return arr1[n//2]\n",
        "num_ids": 109
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = n-1\n    while i < j:\n        if arr1[i] < arr2[i]:\n            i += 1\n        elif arr1[i] > arr2[i]:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return arr1[i]\n",
        "num_ids": 82
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n",
        "num_ids": 17
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(pow(nums[i],n))\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    l=[]\n    for i in nums:\n        l.append(i**n)\n    return l\n    ",
        "num_ids": 32
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(x,n) for x in nums]\n",
        "num_ids": 19
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n",
        "num_ids": 33
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    ans = []\n    for i in range(len(nums)):\n        ans.append(nums[i]**n)\n    return ans\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    #Solve the same problems as above\n    list_of_powers = [1]\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            list_of_powers.append(list_of_powers[-1] * nums[i])\n        else:\n            list_of_powers.append(list_of_powers[-1] ** nums[i])\n    return list_of_powers\n",
        "num_ids": 111
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    i = 1\n    result = [1]\n    for i in range(len(nums)):\n        result.append(result[i]**i)\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l = len(nums)\n    if(l <= 0):\n        return None\n    nums.sort()\n    ans = [1] * (n+1)\n    nums.reverse()\n    i = l-1\n    while(i >= 0):\n        ans[i] = nums[i]**(l-i)\n        i -= 1\n    return ans\n    \n",
        "num_ids": 94
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # list_n = []\n    # for num in nums:\n    #     list_n.append(num**n)\n",
        "num_ids": 33
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Base case\n    if len(string) == 0:\n        return True\n    \n    # Is first letter uppercase\n    if string[0] == string[0].upper():\n        return is_upper(string[1:])\n    \n    # Is second letter uppercase\n    if string[0] == string[1].upper():\n        return is_upper(string[2:])\n    \n    # Is third letter uppercase\n    if string[0] == string[2].upper():\n        return is_upper(string[3:])\n    \n    return False\n",
        "num_ids": 138
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if(string.isupper()):\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = \"\"\n    for char in string:\n        if char.isupper():\n            upper_string += char.upper()\n        else:\n            upper_string += char\n    return upper_string\n    \nprint(is_upper(\"Some string\"))\nprint(is_upper(\"Some string\"))\n",
        "num_ids": 73
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #Hint: use the string module to capitalize the first letter\n    return string.upper()\n",
        "num_ids": 24
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #your code here\n    return newList[0]\n    pass\n",
        "num_ids": 19
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 38
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(newList)\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    print(newList)\n",
        "num_ids": 49
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(f\"The new list is {newList}\")\n",
        "num_ids": 17
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList.append(newList[0])\n    newList.pop(0)\n    newList.append(newList[-1])\n    newList.pop(-1)\n    return newList\n    \ndef print_List(newList): \n    '''\n    Write a python function to print the contents of a given list.\n    '''\n    for i in range(len(newList)):\n        print(newList[i])\n        \ndef sort_List(newList):\n    '''\n    Write a python function to sort a given list of integers.\n    '''\n    newList.sort()\n    return newList\n    \ndef Sort_by_Element(newList, element):\n    '''\n    Write a python function to sort a given list of integers by the element.\n    '''\n    newList.sort(key = lambda x : x[element])\n    return newList\n",
        "num_ids": 23
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList[0:len(newList)/2]\n    b = newList[len(newList)/2:]\n    newList = a + b\n    print(a, b, newList)\n    return newList\n",
        "num_ids": 56
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # write your code here\n    if len(newList) > 1:\n        \n        if len(newList) == 1:\n            return newList\n        if len(newList) == 2:\n            return newList[1], newList[0]\n        if len(newList) == 3:\n            return newList[2], newList[1], newList[0]\n        if len(newList) == 4:\n            return newList[3], newList[2], newList[1], newList[0]\n        if len(newList) == 5:\n            return newList[4], newList[3], newList[2], newList[1], newList[0]\n        if len(newList) == 6:\n            return newList[5], newList[4], newList[3], newList[2], newList[1], newList[0]\n        if len(newList) == 7:\n            return newList[6], newList[5], newList[4], newList[3], newList[2], newList[1], newList[0]\n        if len(newList) == 8:\n            return newList[7], newList[6], newList[5], newList[4], newList[3], newList[2], newList[1], newList[0]\n        if len(newList) == 9:\n            return newList[8], newList[7], newList[6], newList[5], newList[4], newList[3], newList[2], newList[1], newList[0]\n        if len(newList) == 10:\n            return newList[9], newList[8], newList[7], newList[6], newList[5], newList[4], newList[3], newList[2], newList[1], newList[0]\n",
        "num_ids": 434
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList.pop(0)\n    b = newList.pop(0)\n    newList.insert(0,b)\n    newList.insert(0,a)\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    swap_value = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = swap_value\n    return newList\n    \n    \ndef get_greater(newList):\n    '''\n    Write a python function to find the index of the element greater than a given element in a given list.\n    '''\n    for i in range(len(newList)):\n        if newList[i] > newList[i-1]:\n            return newList.index(newList[i-1])\n    \n    return -1\n    \n    \ndef insert_sort(newList):\n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    for j in range(len(newList)):\n        for i in range(j+1):\n            if newList[i] > newList[i+1]:\n                swap_value = newList[i]\n                newList[i] = newList[i+1]\n                newList[i+1] = swap_value\n    return newList\n    \n    \ndef quickSort(newList):\n    '''\n    Write a python function to sort a given list in ascending order using the partition function.\n    '''\n    if len(newList) <= 1:\n        return newList\n    else:\n        partition_index = get_greater(newList)\n        if partition_index!= -1:\n            return quickSort(newList[:partition_index]) + [newList[partition_index]] + quickSort(newList[partition_index+1:])\n        else:\n            return newList\n",
        "num_ids": 97
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList[0])\n    newList.append(newList[-1])\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_circum(r) :\n        '''\n        Write a python function to find the area of a triangle that can be inscribed in a circle of a given radius.\n        '''\n        return r**2*math.pi\n    return area_circum(r)\n",
        "num_ids": 22
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 0 :\n        print('Please enter an even number.')\n        return 0\n    if r == 1 :\n        return 1\n    if r == 2 :\n        return 3\n",
        "num_ids": 46
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_of_triangle(a,b,c):\n        if (a+b>c and a+c>b and b+c>a):\n            return ((b*c)-(a*c))/2\n        else:\n            return float(\"inf\")\n    if r<1 :\n        return float(\"inf\")\n    else:\n        return area_of_triangle(a,b,c)\n",
        "num_ids": 100
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    #return the area of a triangle with the given radius\n    def triangle_area(r):\n        #calculate the semi-perimeter\n        s = (2*r)/math.sqrt(1-r**2)\n        #calculate the area of the triangle\n        return s*s\n    #return the area of the triangle with the given radius\n    def triangle_area(r):\n        #calculate the semi-perimeter\n        s = (2*r)/math.sqrt(1-r**2)\n        #calculate the area of the triangle\n        return s*s\n",
        "num_ids": 146
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1, int(math.sqrt(r * (r - 2))) + 1):\n        if (r * r - (i - 1) * (i - 1)) % (i - 1) == 0:\n            area += ((r * r - (i - 1) * (i - 1)) / (i - 1) * ((i - 1) ** 2 - 2 * i * (i - 1) + i + 1)) ** 0.5\n        else:\n            area += ((r * r - (i - 1) * (i - 1)) / (i - 1) * ((i - 1) ** 2 - 2 * i * (i - 1) + i + 1)) ** 0.5\n    return area\n",
        "num_ids": 175
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(radius) :\n        '''\n        Function returns the area of the triangle given the radius of the triangle.\n        '''\n        return 3*(radius**2)*(4/3)\n",
        "num_ids": 17
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0 :\n        print(\"Please Enter a non negative integer.\")\n        exit()\n    elif r == 0 :\n        return 0\n    else :\n        area = -1\n        for i in range(1, r):\n            for j in range(1, i):\n                a = i * (j + 1)\n                b = (i * j + 1) * (i * j + 2) / 6\n                c = (i * j + 1) * (i * j + 2) / 3\n                d = (i * j + 1) * (i * j + 2) * (i * j + 3) / 6\n                e = (i * j + 1) * (i * j + 2) * (i * j + 3) * (i * j + 4) / 6\n                f = (i * j + 1) * (i * j + 2) * (i * j + 3) * (i * j + 4) * (i * j + 5) / 6\n                g = (i * j + 1) * (i * j + 2) * (i * j + 3) * (i * j + 4) * (i * j + 5) * (i * j + 6) / 6\n                h = (i * j + 1) * (i * j + 2) * (i * j + 3) * (i * j + 4) * (i * j + 5) * (i * j + 6) * (i * j + 7) / 6\n                i = i + 1\n                if area == -1 :\n                    area = max(a,b,c,d,e,f,g,h)\n                    if area == a :\n                        print(\"The area of a square with a side of \" + str(i) + \" is equal to \" + str(area))\n                    elif area == b :\n                        print(\"The area of a square with a side of \" + str(i) + \" is equal to \" + str(area))\n                    elif area == c :\n                        print(\"The area of a square with a side of \" + str(i) + \" is equal to \" + str(area))\n                    elif area == d :\n                        print(\"The area of a square with a side of \" + str(i) + \" is equal to \" + str(area))\n                    elif area == e :\n                        print(\"The area of a square with a side of \" + str(i) + \" is equal to \" + str(area))\n                    elif area == f :\n                        print(\"The area of a square with a side of \" + str(i) + \" is equal to \" + str(area))\n                    elif area == g :\n                        print(\"The area of a square with a side of \" + str(i) + \" is equal to \" + str(area))\n                    elif area == h :\n                        print(\"The area of a square with a side of \" + str(i) + \" is equal to \" + str(area))\n    \n    return area\n",
        "num_ids": 692
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    from math import sqrt, cos, pi, sqrt\n    \n    # this math lib allows us to check whether the provided radius is a valid value\n    # if the radius is not a valid value, we print the function error message\n    if type(r)!= int or r <= 0 :\n        raise ValueError('Radius must be a positive integer')\n        \n    # a helper function that calculates the area of a triangle \n    # with sides a, b, and c\n    def area_of_triangle(a, b, c) : \n        return (a * b) / 2\n        \n    # compute the area of a triangle using the formula \n    # in the assignment handout\n    def area_of_triangle_using_other_consts(a, b, c) :\n        return (a * b) / 2 * (c - b) / (c - a)\n    \n    # use the math library's sqrt function to compute the area of a triangle\n    # using this formula, we can calculate the area of a triangle with any number of sides\n    # this is done for better readability\n    def area_of_triangle_using_sqrt(a, b, c) :\n        return sqrt(area_of_triangle_using_other_consts(a, b, c))\n    \n    # we check if the given radius is in the range of 0 to 2\n    # this is done for better readability\n    def is_triangle_in_circle(r) :\n        return r <= 2\n    \n    # check if the given radius is in the range of 0 to 2\n    # this is done for better readability\n    def is_triangle_in_radius_range(r) :\n        return 0 <= r <= 2\n    \n    # check if the given radius is in the range of 0 to 2\n    # this is done for better readability\n    def is_triangle_in_unit_circle(r) :\n        return r == 0 or r == 2\n    \n    # find the area of a triangle using the defined functions \n    # we check for the values of the inputs and create a list of the areas of the triangle\n    # this is done for better readability\n    def triangle_area_helper(r) :\n        # a helper function that returns the area of a triangle using the\n        # defined functions\n        area = area_of_triangle_using_sqrt(0, 0, 2)\n        area += area_of_triangle_using_sqrt(0, 2, 0)\n        area += area_of_triangle_using_sqrt(2, 0, 0)\n        area += area_of_triangle_using_sqrt(2, 2, 0)\n        area += area_of_triangle_using_sqrt(0, 0, 2)\n        area += area_of_triangle_using_sqrt(0, 2, 2)\n        area += area_of_triangle_using_sqrt(2, 0, 0)\n        area += area_of_triangle_using_sqrt(2, 2, 2)\n        \n        if is_triangle_in_unit_circle(r) :\n            area += area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            \n            return area\n        \n        elif is_triangle_in_circle(r) :\n            area = area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            \n            return area\n        \n        elif is_triangle_in_radius_range(r) :\n            area = area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            \n            return area\n        \n        elif is_triangle_in_unit_circle(r) :\n            area = area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n            area += area_of_triangle_using_sqrt(2, 2, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 0)\n            area += area_of_triangle_using_sqrt(0, 0, 2)\n            area += area_of_triangle_using_sqrt(0, 2, 0)\n            area += area_of_triangle_using_sqrt(2, 0, 0)\n        ",
        "num_ids": 2004
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * (r ** 2)\n    for i in range(r + 1) :\n        for j in range(r + 1) :\n            if (i + j) == r :\n                continue\n            if (i - j) == r :\n                continue\n            if (i + j + i + j) == r :\n                continue\n            area += 1\n            area += 1\n            area += 1\n    return area\ndef area_of_circle(r) :\n    '''\n    Write a python function to calculate the area of a circle with a given radius.\n    '''\n    return math.pi * (r ** 2)\n",
        "num_ids": 14
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    def triangle(side,radius) : \n    \n        while side >= 0 : \n        \n            if side < 0 : \n                if side == 0 : \n                    return 0 \n                \n                side -= 1 \n                \n                return side * side \n            \n            side -= 1 \n            \n            if side == 0 : \n                return side * radius * side \n            \n            return side * side * triangle(side-1, radius + side*side * 1/2) \n",
        "num_ids": 118
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if end == 0:\n        return start\n    \n    p = start\n    while p < end:\n        if array[p] == end:\n            p += 1\n        elif array[p] > end:\n            end = p\n        else:\n            p += 1\n            \n    return end",
        "num_ids": 89
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n",
        "num_ids": 19
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # find the start of the array\n    if end == None:\n        end = len(array) - 1\n    \n    # if array[start] == end of array, return 1\n    # Otherwise, calculate the index of start\n    while start < end and array[start] == array[end]:\n        start += 1\n        end -= 1\n    return end + 1 - start\n    \n",
        "num_ids": 91
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start == end:\n        return end\n    left = start\n    right = end\n    while left < right:\n        mid = left + (right-left)//2\n        if mid == 0:\n            return mid\n        elif array[mid] > array[left]:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n",
        "num_ids": 102
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n",
        "num_ids": 18
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start >= end:\n        return -1\n    \n    while start < end:\n        mid = start + (end-start)//2\n        if array[mid] == mid:\n            return mid\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 101
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    mid = (start+end) // 2\n    if mid == end:\n        return array[mid]\n    if mid == start:\n        return end\n    if array[mid] < array[mid-1]:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n",
        "num_ids": 106
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end is None):\n        end = len(array) - 1\n",
        "num_ids": 20
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end == 0:\n        return start\n    if start == end:\n        return start\n    p = start + (end - start) // 2\n    while p >= 0 and array[p] > array[p + 1]:\n        p = p - 1\n    p = p + 1\n    if array[p] < array[p + 1]:\n        return find_First_Missing(array,p,end)\n    else:\n        return p\n        \n    \ndef merge_Sort(array,start=0,end=None):\n    '''\n    Sort the list using merge sort.\n    '''\n    if end == None:\n        end = len(array)\n    if end == 0:\n        return array\n    if start == end:\n        return array\n    p = start + (end - start) // 2\n    arr1 = array[:p]\n    arr2 = array[p:end]\n    arr = arr1 + arr2\n    return merge_Sort(arr,start,p) + arr + merge_Sort(arr,p + 1,end)\n",
        "num_ids": 110
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    \n    if start >= end:\n        return end\n    \n    middle = (start+end)//2\n    \n    if array[middle] == middle:\n        middle = middle -1\n        \n    if array[middle] < array[middle+1]:\n        return find_First_Missing(array,middle+1,end)\n    else:\n        return find_First_Missing(array,start,middle-1)\n        \n    \n    \ndef find_Min(array):\n    '''\n    Write a python function to find the smallest number from a list of natural numbers.\n    '''\n    return min(array)\n",
        "num_ids": 9
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return re.sub(r'\\s+', '%20', string)\n",
        "num_ids": 21
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n",
        "num_ids": 19
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in string:\n        if i =='':\n            string = string.replace(' ','%20')\n        elif i == '\\n':\n            string = string.replace('\\n','%20')\n        elif i == '\\r':\n            string = string.replace('\\r','%20')\n        elif i == '\\t':\n            string = string.replace('\\t','%20')\n        else:\n            string = string.replace(' ','%20')\n    return string\n",
        "num_ids": 122
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    splitted = string.split()\n    for word in splitted:\n        word = word.replace(' ', '%20')\n    return''.join(word)\n",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Create a copy of the string\n    new_string = string\n",
        "num_ids": 18
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    string = string.replace('\\n', '%20')\n    string = string.replace('\\t', '%20')\n    return string\n",
        "num_ids": 49
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(0, len(list), 2): \n        if(list[i] % 2 == 0): \n            even_list.append(list[i]) \n    return even_list\n",
        "num_ids": 58
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Even_numbers = []\n    for x in list: \n        if x % 2 == 0: \n            Even_numbers.append(x) \n    return Even_numbers\n",
        "num_ids": 47
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    temp = []\n    while i < len(list):\n        if list[i] % 2 == 0:\n            temp.append(list[i])\n        i = i + 1\n    return temp\n",
        "num_ids": 54
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for item in list:\n        if item%2 == 0:\n            even_list.append(item)\n    return even_list\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [list[i] for i in range(0, len(list), 2)]\n",
        "num_ids": 23
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            evens.append(list[i])\n    return evens\n",
        "num_ids": 48
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for item in list:\n        if item % 2 == 0:\n            even.append(item)\n        else:\n            odd.append(item)\n    return even, odd\n",
        "num_ids": 54
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Even=[]\n    while (len(list)>1):\n        if (list[0]%2==0):\n            Even.append(list[0])\n        else:\n            del list[0]\n    return Even\n",
        "num_ids": 56
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list=[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            even_list.append(list[i])\n    return even_list\n",
        "num_ids": 51
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i = 0\n    while i < len(ele): \n        i += 1\n        if ele[i] - 1 not in sub: \n            sub.append(ele[i]) \n        if ele[i] + 1 not in sub: \n            sub.append(ele[i]) \n        if ele[i] - 1 not in sub: \n            sub.append(ele[i]) \n        if ele[i] + 1 not in sub: \n            sub.append(ele[i]) \n    return sub\n",
        "num_ids": 126
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return\n    sub.append(ele)\n    adjac(ele[0], sub)\n    adjac(ele[1], sub)\n",
        "num_ids": 42
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not ele in sub:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n",
        "num_ids": 40
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub)\n    else:\n        return sub\n    \ndef print_adjacent(elements):\n    '''\n    Write a function that takes as input an array of tuples and outputs its\n    adjacent elements in a form of a list.\n    '''\n    return adjac(elements[0]) + adjac(elements[1])\n",
        "num_ids": 22
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 0:\n        sub[0] = ele[1]\n    elif ele[0] == 1:\n        sub[1] = ele[1]\n    elif ele[0] == 2:\n        sub[2] = ele[1]\n    elif ele[0] == 3:\n        sub[3] = ele[1]\n    elif ele[0] == 4:\n        sub[0] = ele[1]\n        sub[1] = ele[2]\n        sub[2] = ele[3]\n    elif ele[0] == 5:\n        sub[0] = ele[1]\n        sub[1] = ele[2]\n        sub[2] = ele[3]\n        sub[3] = ele[4]\n    elif ele[0] == 6:\n        sub[0] = ele[1]\n        sub[1] = ele[2]\n        sub[2] = ele[3]\n        sub[3] = ele[4]\n        sub[4] = ele[5]\n    elif ele[0] == 7:\n        sub[0] = ele[1]\n        sub[1] = ele[2]\n        sub[2] = ele[3]\n        sub[3] = ele[4]\n        sub[4] = ele[5]\n        sub[5] = ele[6]\n    elif ele[0] == 8:\n        sub[0] = ele[1]\n        sub[1] = ele[2]\n        sub[2] = ele[3]\n        sub[3] = ele[4]\n        sub[4] = ele[5]\n        sub[5] = ele[6]\n        sub[6] = ele[7]\n    elif ele[0] == 9:\n        sub[0] = ele[1]\n        sub[1] = ele[2]\n        sub[2] = ele[3]\n        sub[3] = ele[4]\n        sub[4] = ele[5]\n        sub[5] = ele[6]\n        sub[6] = ele[7]\n        sub[7] = ele[8]\n    elif ele[0] == 10:\n        sub[0] = ele[1]\n        sub[1] = ele[2]\n        sub[2] = ele[3]\n        sub[3] = ele[4]\n        sub[4] = ele[5]\n        sub[5] = ele[6]\n        sub[6] = ele[7]\n        sub[7] = ele[8]\n        sub[8] = ele[9]\n    elif ele[0] == 11:\n        sub[0] = ele[1]\n        sub[1] = ele[2]\n        sub[2] = ele[3]\n        sub[3] = ele[4]\n        sub[4] = ele[5]\n        sub[5] = ele[6]\n        sub[6] = ele[7]\n        sub[7] = ele[8]\n        sub[8] = ele[9]\n        sub[9] = ele[10]\n    elif ele[0] == 12:\n        sub[0] = ele[1]\n        sub[1] = ele[2]\n        sub[2] = ele[3]\n        sub[3] = ele[4]\n        sub[4] = ele[5]\n        sub[5] = ele[6]\n        sub[6] = ele[7]\n        sub[7] = ele[8]\n        sub[8] = ele[9]\n        sub[9] = ele[10]\n        sub[10] = ele[11]\n    return sub\n",
        "num_ids": 885
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # For given ele, find all adjacent coordinates\n    if ele == (0,0):\n        return ()\n    elif ele in sub:\n        return ()\n    else:\n        # Check if all adjacent coordinates are within the given range\n        if ele[0] >= 0 and ele[0] <= sub[-1][0]:\n            if ele[1] >= 0 and ele[1] <= sub[-1][1]:\n                return ()\n            else:\n                return ()\n        else:\n            return ()\n",
        "num_ids": 120
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return sub\n    else:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n        return sub",
        "num_ids": 51
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return (ele[0] - 1, ele[1] + 1, ele[0] + 1, ele[1] - 1)\n",
        "num_ids": 34
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        return ele\n    elif len(sub) == 1:\n        return sub[0]\n    else:\n        return sub[0] + adjac(ele, sub[1:])\n",
        "num_ids": 56
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return sub\n    else: \n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub) \ndef report(data):\n    print(data)\n    print(\"*\"*40)\n    print(\"Below are the coordinates of all the elements in the list\")\n    print(\"*\"*40)\n    for i in range(len(data)):\n        print(i, \",\", data[i])\n    print(\"*\"*40)\n",
        "num_ids": 130
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\").replace(\".\",\"_\")\n    return text\n",
        "num_ids": 23
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\").replace(\"\\t\",\"_\").replace(\"\\n\",\"_\").replace(\"\\r\",\"_\").replace(\"\\f\",\"_\").replace(\"\\v\",\"_\")\n    return text\n",
        "num_ids": 53
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    out_text = \"\"\n    for char in text:\n        if char == \" \":\n            out_text += \"_\"\n        else:\n            out_text += char\n    return out_text\n",
        "num_ids": 49
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Iterate through text\n    for i in range(len(text)):\n        # If a character is a whitespace, it becomes an underscore\n        if text[i] == \" \":\n            text = text.replace(\" \",\"_\")\n        # If a character is not a whitespace, it remains as it is\n        else:\n            text = text.replace(text[i],\"_\")\n    # Return the resulting string\n    return text\n",
        "num_ids": 105
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = re.sub(' +', '_', text)\n    return new_text\n",
        "num_ids": 25
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    text = text.replace(\"  \",\"_\")\n    return text\n",
        "num_ids": 54
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"\\n\", \"_\")\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('.', '_')\n    text = text.replace(',', '_')\n    text = text.replace('[', '_')\n    text = text.replace(']', '_')\n    text = text.replace('{', '_')\n    text = text.replace('}', '_')\n    return text\n",
        "num_ids": 96
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\t', '_')\n    return text\n",
        "num_ids": 46
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('-', '_').lower()\n",
        "num_ids": 22
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # I will use the for loop to iterate over the list\n    for index in range(len(num_list)):\n        # if the number is 0\n        if num_list[index] == 0:\n            # add it to the end of the list\n            num_list.insert(index, num_list.pop(index+1))\n    return num_list\n",
        "num_ids": 88
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # pass\n    \n    print(\"\\n========== LIST: \",num_list,\" ==========\")\n    \n    num_list_0 = num_list[:0]\n    num_list_1 = num_list[1:]\n    \n    print(num_list_0)\n    print(num_list_1)\n    \n    if len(num_list_0)!= 0:\n        \n        for i in range(len(num_list_0)):\n            num_list_0[i] = num_list_0[i]+'0'\n        \n        print(num_list_0)\n    else:\n        \n        print(\"Empty List!\")\n    \n    print(\"\\n========== LIST: \",num_list,\" ==========\")\n    \n    # num_list = [0,1,2,3,4,5,6,7,8,9]\n    \n    # num_list.sort()\n    \n    # print(num_list)\n    \n    num_list.reverse()\n    print(num_list)\n    \n    return num_list\n    \n    \n    \n",
        "num_ids": 267
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    return num_list\n",
        "num_ids": 10
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_num_list = []\n    for i in num_list:\n        if i!= 0:\n            new_num_list.append(i)\n    print(new_num_list)\n    return new_num_list\n",
        "num_ids": 58
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [list(x) for x in zip(*[iter(num_list)]*3)",
        "num_ids": 24
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = 1\n            num_list[i] += 1\n    return num_list\n",
        "num_ids": 54
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    return num_list\n",
        "num_ids": 60
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.reverse()\n    new_list = [0 for i in range(len(num_list))]\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            new_list[i] = num_list[i]\n            del num_list[i]\n        else:\n            i += 1\n    return new_list\n",
        "num_ids": 97
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = list(num_list)\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 66
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = -num_list[i]\n    return num_list\n",
        "num_ids": 50
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # create hash table to store the xor result\n    H = {}\n    for i in range(n):\n        H[arr[i]] = arr[i] ^ arr[i]\n    # create the matrix to be used as hash table\n    temp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            temp[i][j] = H[arr[i]^arr[j]]\n    # use for loop to find the xor result\n    xor_Sum = 0\n    for i in range(n):\n        for j in range(n):\n            xor_Sum = xor_Sum ^ temp[i][j]\n    return xor_Sum\n",
        "num_ids": 179
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,n) : \n        s = s + arr[i]\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 3:\n        return 0\n    arr.sort()\n    res = 0\n    arr.reverse()\n    for i in range(len(arr)) :\n        if i == 0 :\n            res += arr[i]\n        else :\n            if arr[i]!= arr[i-1] :\n                res += arr[i]\n            else :\n                continue\n    return res\n",
        "num_ids": 99
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum = (sum ^ arr[i])\n    return sum \n",
        "num_ids": 34
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 1 or n > 2**32:\n        raise ValueError('n must be between 1 and 2^32')\n    if n % 2 == 0:\n        raise ValueError('n must be even number')\n    \n    result = 0\n    \n    for i in range(n//2):\n        result += arr[i] ^ arr[n-i-1]\n    return result\n",
        "num_ids": 93
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    s = 0\n    for i in range(0,n) : \n        s += arr[i] ^ arr[n-i-1]\n    \n    return s\n",
        "num_ids": 45
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n) : \n        xor += (arr[i]^arr[i+1])\n    return xor \n",
        "num_ids": 42
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr=sorted(arr)\n    s=0\n    while(n>0) : \n        if (n&1) : s = s+arr[n]\n        n=n>>1\n    return s\n",
        "num_ids": 54
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #print(\"a\")\n    for i in range(len(arr)-1) :\n        for j in range(i+1,len(arr)) :\n            #print(\"b\")\n            arr[i] ^= arr[j]\n    #print(\"c\")\n    #print(arr)\n    return arr[0] ^ arr[1] ^ arr[2] ^ arr[3] ^ arr[4] ^ arr[5] ^ arr[6] ^ arr[7] ^ arr[8] ^ arr[9] ^ arr[10] ^ arr[11] ^ arr[12]\n",
        "num_ids": 139
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #Your code here\n    sum=0\n    for i in range(len(arr)) : \n        sum=sum+(arr[i]^arr[i+1])\n    print(sum)\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min heap\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    \n    # Create a max heap\n    heap = []\n    for i in range(len(heap)):\n        heapq.heappushpop(heap, -heapq.heappop(heap))\n",
        "num_ids": 91
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def heapify(iterable, heap_size, node_index, array_size):\n        # If this node has less than its children, it is in the top\n        if node_index <= 0:\n            return\n        # If node has only one child, put it in the parent and recur for it\n        if array_size <= 1:\n            heapq.heapreplace(array, iterable[node_index])\n            return\n        # If this node is not a leaf node, recur for all its children\n        left_child = (node_index * 2) + 1\n        right_child = (node_index * 2) + 2\n        if left_child < array_size and iterable[node_index] < iterable[left_child]:\n            smaller_child = left_child\n        else:\n            smaller_child = node_index * 2\n        if right_child < array_size and iterable[node_index] < iterable[right_child]:\n            smaller_child = right_child\n        if array_size <= 1:\n            heapq.heapreplace(array, iterable[node_index])\n            return\n        # Swap the elements of this node with the smallest one in the heap\n        heapq.heapify(array, smaller_child)\n        array[smaller_child], array[node_index] = array[node_index], array[smaller_child]\n        heapify(iterable, heap_size, smaller_child, array_size - 1)\n    array = [None] * len(iterable)\n    heap_size = len(iterable)\n    # Build the heap, performing in-place sorting\n    for i in range(len(iterable)):\n        heapify(array, heap_size, i, len(iterable))\n    # Return the sorted array\n    return array\n",
        "num_ids": 434
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        val = iterable[i]\n        hq.heapreplace(iterable, val)\n    return iterable\n",
        "num_ids": 55
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n",
        "num_ids": 30
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable) - 1, -1, -1):\n        hq.heapify(iterable)\n        for k in range(i):\n            hq.heapreplace(iterable, hq.heappop(iterable))\n    return iterable\n",
        "num_ids": 71
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    i = 0\n    while i < len(iterable) - 1:\n        hq.heappush(iterable, -hq.heappop(iterable))\n        i += 1\n    return iterable\n",
        "num_ids": 53
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        heapq.heappush(h, i)\n    return h\n",
        "num_ids": 33
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    return hq.merge(h, iterable, hq.nlargest)\n",
        "num_ids": 27
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)-1, 0, -1):\n        for j in range(i):\n            if iterable[j] > iterable[j+1]:\n                iterable[j], iterable[j+1] = iterable[j+1], iterable[j]\n    return iterable\n",
        "num_ids": 78
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for num in iterable:\n        heapq.heappush(hq,num)\n    return(hq)\n",
        "num_ids": 38
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print('It is not possible to get there.')\n        return False\n    else:\n        print('It is possible to get there.')\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (sale_amount <= 0):\n        return (True, actual_cost)\n    return (False, 0",
        "num_ids": 28
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <=0:\n        return True\n    elif actual_cost <=0:\n        return False\n    else:\n        return noprofit_noloss(actual_cost-sale_amount,sale_amount)\n",
        "num_ids": 57
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Your code here\n    \n    if actual_cost>sale_amount:\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > 0:\n        profit = actual_cost-sale_amount\n        return profit >= 0\n    else:\n        return 0\n",
        "num_ids": 36
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost == 0 and sale_amount == 0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 33
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    sum = actual_cost*sale_amount\n    profit_loss = sum*0.75\n    if profit_loss <= sum:\n        return False\n    else:\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def wind_chill_t(t):\n        return (0.6215 + (0.6215 * (t + 273.15)) + 0.1671 * (t ** 0.16))\n",
        "num_ids": 49
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_k = v*1.8+32\n    v_c = v*1.8+32\n    t_c = t + 273.15\n    return round(math.log(v_k/v_c,10)+273.15)\n",
        "num_ids": 62
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return v + (v/100)*(t - 32)\ndef velocity(v,t):\n    '''\n    Write a function that calculates the wind speed at a given speed in km/h given a temperature in celsius.\n    '''\n    return v * math.pow(0.621371, t)\ndef wind_direction(wind_chill,wind_speed):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / wind_speed * 100,1)\ndef wind_speed_direction(wind_direction,wind_speed):\n    '''\n    Write a function that calculates the wind speed at a given speed in knots and a temperature in celsius.\n    '''\n    return round(wind_speed / wind_direction,1)\ndef wind_direction_direction(wind_direction,wind_speed,t):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index and temperature in celsius.\n    '''\n    return round(wind_direction / wind_speed * 100,1)\ndef wind_direction_speed(wind_direction,wind_speed,t):\n    '''\n    Write a function that calculates the wind speed at a given speed and a temperature in celsius.\n    '''\n    return wind_speed / wind_direction * math.pow(0.621371, t)\ndef wind_direction_t(wind_direction,wind_speed,t):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index.\n    '''\n    return round(wind_direction / wind_speed * 100,1)\ndef wind_direction_t_s(wind_direction,wind_speed,t):\n    '''\n    Write a function that calculates the wind speed at a given speed and a temperature in celsius.\n    '''\n    return round(wind_speed / wind_direction * math.pow(0.621371, t),1)\ndef wind_direction_t_c(wind_direction,wind_speed,t):\n    '''\n    Write a function that calculates the wind speed at a given speed and a temperature in celsius.\n    '''\n    return round(wind_speed / wind_direction * math.pow(0.621371, t),1)\ndef wind_direction_t_k(wind_direction,wind_speed,t):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index.\n    '''\n    return round(wind_direction / wind_speed * 100,1)\ndef wind_speed_t_c(wind_speed,t):\n    '''\n    Write a function that calculates the wind speed at a given speed and a temperature in celsius.\n    '''\n    return wind_speed / wind_direction * math.pow(0.621371, t)\ndef wind_speed_t_k(wind_speed,t):\n    '''\n    Write a function to determine the wind speed at a given speed and a temperature in celsius.\n    '''\n    return wind_speed / wind_direction * math.pow(0.621371, t)\ndef wind_direction_k(wind_chill,wind_speed,t):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / wind_speed * 100,1)\ndef wind_speed_direction_k(wind_chill,wind_speed,t):\n    '''\n    Write a function to determine the wind speed at a given speed and a temperature in celsius.\n    '''\n    return round(wind_speed / wind_chill * 100,1)\ndef wind_chill_k(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and a temperature in celsius.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_c",
        "num_ids": 9
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 0:\n        v *= -1\n        t *= -1\n    \n    if (t < 20):\n        return v\n    \n    T_c = (9/5) + (9/5) * (t + 4)\n    A = 1.6726\n",
        "num_ids": 70
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = v*(9/5) + 32\n    return wind_chill\n    \ndef main():\n    '''\n    Write a function to calculate the wind chill index of a given wind velocity and temperature.\n    The formula to compute the wind chill index is:\n    Wind chill = (9.0078 * T * T) / (T * T - 1) + 32\n    '''\n    print(wind_chill(100,60))\n",
        "num_ids": 15
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Convert the wind velocity into meters per second\n    wind_v = (v*3.6)/100\n    #Convert the temperature in Celsius into Kelvin\n    temp = (t+273.15)\n    #Calculate the wind chill\n    return (((0.6215*(temp**0.16)+0.7353*(temp**0.16))*math.log(((temp/95.0)+1.0)*(temp/95.0))) - 35.0)\n",
        "num_ids": 116
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = 2.55\n    B = 0.62\n    P = 1013.25\n    h = 0.62\n    q = 0.3\n    k = 0.4\n",
        "num_ids": 45
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (9.0 / 5.0) + (7.0 / 4.0) * v * math.exp((9.0 - 5.0) * t / 4.0)\n    return round(c,1)\n",
        "num_ids": 56
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Convert wind velocity into km/h\n    w = round(v*1.609)\n    #Convert wind temperature from celsius to kelvin\n    Tc = round(v*1.852,1)\n    #Convert wind chill index from kelvin to celsius\n    wc = round((Tc - 32.0) / 1.852,0)\n    #Return wind chill index rounded to the nearest integer\n    return round(wc)\ndef wind_speed(t, v):\n    '''\n    Write a function to calculate the wind speed in km/h rounded to the nearest integer given the wind speed in km/h and a temperature in celsius.\n    '''\n    #Convert wind speed from km/h to m/s\n    w = round(v*0.621371,2)\n    #Convert wind temperature from celsius to kelvin\n    Tc = round(v*1.852,1)\n    #Convert wind speed from m/s to km/h\n    wsp = round((Tc - 32.0) / 1.852,0)\n    #Return wind speed rounded to the nearest integer\n    return round(wsp)\ndef convert_degrees_to_feet(d):\n    '''\n    Write a function that converts degrees to feet.\n    '''\n    feet = round(d * 3.28084)\n    return feet\ndef convert_inches_to_feet(d):\n    '''\n    Write a function that converts inches to feet.\n    '''\n    feet = round(d * 3937.37)\n    return feet\ndef convert_inches_to_feet(d):\n    '''\n    Write a function that converts inches to feet.\n    '''\n    feet = round(d * 0.000004834)\n    return feet\ndef distance_metres(a, b):\n    '''\n    Write a function that returns the distance in metres between two points.\n    '''\n    d = round((a[0] - b[0])**2 + (a[1] - b[1])**2,2)\n    return d\ndef distance_metres(a, b):\n    '''\n    Write a function that returns the distance in metres between two points.\n    '''\n    d = round(math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2),2)\n    return d\ndef distance_feet(a, b):\n    '''\n    Write a function that returns the distance in feet between two points.\n    '''\n    d = round(a[0] - b[0],2)\n    return d\ndef distance_feet(a, b):\n    '''\n    Write a function that returns the distance in feet between two points.\n    '''\n    d = round(a[0] - b[0],2)\n    return d\ndef distance_km(a, b):\n    '''\n    Write a function that returns the distance in kilometers between two points.\n    '''\n    d = round(a[0] - b[0],2)\n    return d\ndef distance_km(a, b):\n    '''\n    Write a function that returns the distance in kilometers between two points.\n    '''\n    d = round(a[0] - b[0],2)\n    return d\ndef distance_miles(a, b):\n    '''\n    Write a function that returns the distance in miles between two points.\n    '''\n    d = round((a[0] - b[0])**2 + (a[1] - b[1])**2,2)\n    return d\ndef distance_miles(a, b):\n    '''\n    Write a function that returns the distance in miles between two points.\n    '''\n    d = round((a[0] - b[0])**2 + (a[1] - b[1])**2,2)\n    return d\ndef distance_meters(a, b):\n    '''\n    Write a function that returns the distance in meters between two points.\n    '''\n    d = round(a[0] - b[0],2)\n    return d\ndef distance_meters(a, b):\n    '''\n    Write a function that returns the distance in meters between two points.\n    '''\n    d = round(a[0] - b[0],2)\n    return d\ndef distance_km_meters(a, b):\n    '''\n    Write a function that returns the distance in kilometers and meters between two points.\n    '''\n    d = round((a[0] - b[0])**2 + (a[1] - b[1])**2,2)\n    return d\ndef distance_km_meters(a, b):\n    '''\n    Write a function that returns the distance in kilometers and meters between two points.\n    '''\n    d = round((a[0] - b[0])**2 + (a[1] - b[1])**2,2)\n    return d\ndef distance_foot_km_meters(a, b):\n    '''\n    Write a function that returns the distance in foot and meters between two points.\n    '''\n    d = round((a[0] - b[0])**2 + (a[1] - b[1])**2,2)\n    return d\ndef distance_foot_km_miles(a, b):\n    '''\n    Write a function that returns the distance in foot and miles between two points.\n    '''\n    d = round((a[0] - b[0])**2 + (a[1] - b[1])**2,2)\n    return d\ndef distance_foot_miles(a, b):\n    '''\n    Write a function that returns the distance in foot and miles between two points.\n    '''\n    d = round((a[0] - b[0])**2 + (a[1] - b[1])**2,2)\n    return d\ndef distance_in_mile(a, b):\n    '''\n    Write a function that returns the distance in miles between two points.\n    '''\n    d = round(a[0] - b[0],2)\n    return d\ndef distance_in_mile(a, b):\n    '''\n    Write a function that returns the distance in miles between two points.\n    '''\n    d = round(a[0] - b[0],2)\n    return d\ndef fahrenheit_to_celsius(f):\n    '''\n    Write a function that converts a degree Celsius to a degree Fahrenheit.\n    '''\n    c = (f - 32) * (5/9)\n    return c\ndef fahrenheit_to_celsius(f):\n    '''\n    Write a function that converts a degree Fahrenheit to a degree Celsius.\n    '''\n    c = (f - 32) * (5/9)\n    return c\ndef find_solar_radiation(v,t):\n    '''\n    Write a function that calculates the solar radiation present at a given temperature.\n    '''\n    #Convert wind speed from km/h to m/s\n    w = round(v*0.621371,2)\n    #Convert wind temperature from celsius to kelvin\n    Tc = round(v*1.852,1)\n    #Convert wind speed from m/s to km/h\n    wsp = round((Tc - 32.0) / 1.852,0)\n    #Convert wind temperature from kelvin to celsius\n    Tc = round(w * 0.000004834,2)\n    #Convert wind speed from m/s to km/h\n    wsp = round((Tc - 32.0) / 0.000004834,2)\n    #Convert wind speed from km/h to m/s\n    wsp = round((wsp - 2.0) * 0.0001,2)\n    #Convert wind temperature from kelvin to celsius\n    Tc = round(v * 0.000004834,2)\n    #Convert wind speed from m/s to km/h\n    wsp = round((Tc - 32.0) / 0.000004834,2)\n    #Convert wind speed from km/h to m/s\n    wsp = round((wsp - 2.0) * 0.0001,2)\n    #Convert wind temperatur",
        "num_ids": 317
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate wind chill index\n    z = (v/2)*(t+273.15)\n    #wind chill index rounded to the next integer\n    z = int(round(z))\n    # convert z to celsius\n    c = (z - 32) * 5/9\n    # calculate the wind chill temperature\n    t = (9 * (1 - (c/10))) + 273.15\n    \n    return t\n",
        "num_ids": 103
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Hint: use max() to get the length of all names, then get the length of the lowercase names.\n    \n    nam_lengths = []\n    for name in sample_names:\n        if len(name.lower()) > 3:\n            nam_lengths.append(len(name))\n    \n    return max(nam_lengths)\n    \n",
        "num_ids": 87
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    output = []\n    for name in sample_names:\n        if name[0] == name[0].lower():\n            output.append(len(name))\n    return sum(output)\n",
        "num_ids": 47
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_nam = 0\n    for i in range(len(sample_names)):\n        if(sample_names[i][0].islower()):\n            sum_nam += len(sample_names[i])\n    return sum_nam\n",
        "num_ids": 59
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def check_nam(name):\n        for i in range(len(name)):\n            if name[i].islower():\n                return False\n        return True\n    for i in range(len(sample_names)):\n        if check_nam(sample_names[i]) == False:\n            print(sample_names[i] + \": \" + str(len(sample_names[i])))\n",
        "num_ids": 97
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def nam_len(name):\n        '''\n        Recursively counts the number of letters in a given string.\n        '''\n        if len(name) == 0:\n            return 0\n        count = 1\n        for char in name:\n            if char.islower():\n                count += 1\n            else:\n                count += nam_len(name[0:char.lower()])\n        return count\n    \n    return [nam_len(name) for name in sample_names if len(name) >= 2]\n    \n",
        "num_ids": 95
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(x) for x in sample_names if x.islower()])\n",
        "num_ids": 24
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_nam = 0\n    for name in sample_names:\n        if len(name) > 0:\n            total_nam += len(name)\n    return total_nam\n",
        "num_ids": 44
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if len(sample_names) == 0:\n        return \"There are no names in your list\"\n",
        "num_ids": 26
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # get number of names\n    num_names = len(sample_names)\n",
        "num_ids": 21
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # your code goes here\n    new_sample = []\n    for name in sample_names:\n        if name.lower().startswith('m'):\n            new_sample.append(len(name))\n        else:\n            new_sample.append(0)\n    return sum(new_sample)\n",
        "num_ids": 74
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    ans = []\n    \n    for i in items:\n        if '(' in i:\n            if not i in ans:\n                ans.append(i)\n        if ')' in i:\n            if not i in ans:\n                ans.append(i)\n    \n    return ans\n",
        "num_ids": 70
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # use a list to keep track of the removed items\n    removed_items = []\n    # loop over the list\n    for item in items:\n        # find the brackets and if it is not empty\n        if not item[0] == '(':\n            # add the removed item to the removed list\n            removed_items.append(item)\n        else:\n            # remove the brackets\n            removed_items.pop()\n    # return the removed list\n    return removed_items\n",
        "num_ids": 114
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string=''\n    for item in items:\n        if item=='(':\n            string=string+')'\n        elif item==')':\n            string=string+'('\n    return string\ndef split_line(items):\n    '''\n    Write a function to split a line to a list of strings.\n    '''\n    line=''\n    for item in items:\n        line=line+' '+item\n    return line.split()\ndef words_in_string(line):\n    '''\n    Write a function to get all words in a string.\n    '''\n    words=[]\n    for item in line:\n        if item==' ':\n            continue\n        else:\n            words.append(item)\n    return words\ndef return_line_words(line):\n    '''\n    Write a function to return the line words.\n    '''\n    words=[]\n    for item in line:\n        if item==' ':\n            continue\n        else:\n            words.append(item)\n    return words\ndef return_words(line):\n    '''\n    Write a function to return the words in a line.\n    '''\n    words=[]\n    for item in line:\n        if item==' ':\n            continue\n        else:\n            words.append(item)\n    return words\ndef delete_words(line,words):\n    '''\n    Write a function to delete the words in a line.\n    '''\n    for item in words:\n        line=line.replace(item,'')\n    return line\ndef split_line_without_space(line):\n    '''\n    Write a function to split a line to a list of strings without spaces.\n    '''\n    line=line.split()\n    return line\ndef split_line_without_parenthesis(line):\n    '''\n    Write a function to split a line to a list of strings without spaces.\n    '''\n    line=line.split('(')\n    line=line[:-1]\n    return line\ndef check_parenthesis(line):\n    '''\n    Write a function to check if a line has a parenthesis.\n    '''\n    line=line.replace(')','(')\n    return line\ndef check_blank(line):\n    '''\n    Write a function to check if a line has a blank.\n    '''\n    line=line.replace(' ','')\n    return line\ndef check_space(line):\n    '''\n    Write a function to check if a line has a space.\n    '''\n    line=line.replace(' ','')\n    return line\ndef count_space(line):\n    '''\n    Write a function to count the spaces in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef parenthesis_count(line):\n    '''\n    Write a function to count the parenthesis in a line.\n    '''\n    count=0\n    for item in line:\n        if item=='(' or item==')':\n            count+=1\n    return count\ndef letters_count(line):\n    '''\n    Write a function to count the letters in a line.\n    '''\n    count=0\n    for item in line:\n        if item in 'abcdefghijklmnopqrstuvwxyz ':\n            count+=1\n    return count\ndef words_count(line):\n    '''\n    Write a function to count the words in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=1\n    return count\ndef words_count_in_line(line):\n    '''\n    Write a function to count the words in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=1\n    return count\ndef sum_word_in_line(line):\n    '''\n    Write a function to count the sum of words in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef sum_line_in_line(line):\n    '''\n    Write a function to count the sum of words in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef capitalize_line_in_line(line):\n    '''\n    Write a function to capitalize the first letter of a word in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            line=line.replace(item,'',1)\n            count+=1\n    return line.capitalize()\ndef words_count_with_brackets(line):\n    '''\n    Write a function to count the words in a line with brackets.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef count_brackets(line):\n    '''\n    Write a function to count the number of brackets in a line.\n    '''\n    count=0\n    for item in line:\n        if item=='(' or item==')':\n            count+=1\n    return count\ndef find_word(line,word):\n    '''\n    Write a function to find a word in a line.\n    '''\n    count=0\n    for item in line:\n        if item==word:\n            count+=1\n    return count\ndef words_count_with_punctuation(line):\n    '''\n    Write a function to count the words in a line with punctuation.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef words_count_with_brackets_and_punctuation(line):\n    '''\n    Write a function to count the words in a line with brackets and punctuation.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef find_first_space(line):\n    '''\n    Write a function to find the first space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef find_second_space(line):\n    '''\n    Write a function to find the second space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef find_last_space(line):\n    '''\n    Write a function to find the last space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef first_space_between_words(line):\n    '''\n    Write a function to find the first space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef second_space_between_words(line):\n    '''\n    Write a function to find the second space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef last_space_between_words(line):\n    '''\n    Write a function to find the last space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef find_first_parenthesis(line):\n    '''\n    Write a function to fin",
        "num_ids": 8
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def get_parenthesis(i):\n        if i == 0: return '()'\n        elif i == 1: return '()'\n        elif i == 2: return '[]'\n        elif i == 3: return '()[]'\n        elif i == 4: return '()[]{}'\n        elif i == 5: return '{[]}'\n        elif i == 6: return '{[]}[{}]'\n        elif i == 7: return '{[]}[{}[]'\n        elif i == 8: return '{[]}[{}[{}]'\n        elif i == 9: return '{[]}[{}[{}[]'\n        elif i == 10: return '{[]}[{}[]{}]'\n        elif i == 11: return '{[]}[{}[{}[{}]]'\n        elif i == 12: return '{[]}[{}[{}[{}]]{}]'\n        elif i == 13: return '{[]}[{}[{}[{}]]{}[]'\n        elif i == 14: return '{[]}[{}[{}[{}]]{}[{}]{}]'\n        elif i == 15: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]{}'\n        elif i == 16: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]{}'\n        elif i == 17: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]{}'\n        elif i == 18: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]{}'\n        elif i == 19: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]{}'\n        elif i == 20: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 21: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]{}'\n        elif i == 22: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 23: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 24: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 25: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 26: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 27: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 28: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 29: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 30: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 31: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 32: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 33: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 34: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 35: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 36: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 37: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 38: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 39: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}[{}]]{}'\n        elif i == 40: return '{[]}[{}[{}[{}]]{}[{}]]{}[{}]",
        "num_ids": 2010
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items == []:\n        return items\n    elif items[0] == '(':\n        return remove_parenthesis(items[1:])\n    else:\n        if items[0] == ')':\n            return remove_parenthesis(items[1:])\n        else:\n            return items[0:1] + remove_parenthesis(items[1:])\n",
        "num_ids": 89
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    parentheses = ''\n    for item in items:\n        if item == '(' or item == ')':\n            parentheses += item\n        else:\n            new_items.append(parentheses)\n            parentheses = ''\n    if parentheses!= '':\n        new_items.append(parentheses)\n    return new_items\n",
        "num_ids": 87
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    temp = []\n    for item in items:\n        if item[0] == \"(\":\n            temp.append(item)\n        elif item[-1] == \")\":\n            temp.append(item)\n    for i in temp:\n        result.append(i)\n    for i in result:\n        if i[0] == \"(\":\n            temp.remove(i)\n        elif i[-1] == \")\":\n            temp.remove(i)\n    return temp\n    \ndef remove_spaces(items):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    result = []\n    for item in items:\n        result.append(item.replace(\" \", \"\"))\n    return result\n    \ndef remove_brackets(items):\n    '''\n    Write a function to remove brackets from a string.\n    '''\n    result = []\n    for item in items:\n        if item == \"]\":\n            result.append(item)\n        elif item == \"[\":\n            result.append(item)\n    return result\n    \ndef remove_commas(items):\n    '''\n    Write a function to remove commas from a string.\n    '''\n    result = []\n    for item in items:\n        if item == \",\":\n            result.append(item)\n        elif item == \".\":\n            result.append(item)\n    return result\n    \ndef remove_doubles(items):\n    '''\n    Write a function to remove double brackets from a string.\n    '''\n    result = []\n    for item in items:\n        if item == \"}\":\n            result.append(item)\n        elif item == \"{\":\n            result.append(item)\n    return result\n    \ndef remove_hyphen(items):\n    '''\n    Write a function to remove hyphen from a string.\n    '''\n    result = []\n    for item in items:\n        if item == \"-\":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_whitespace(items):\n    '''\n    Get whitespace from a string.\n    '''\n    result = []\n    for item in items:\n        if item == \" \":\n            result.append(item)\n        elif item == \"\\t\":\n            result.append(\" \")\n        elif item == \"\\n\":\n            result.append(\"\\n\")\n        else:\n            result.append(item)\n    return result\n    \ndef get_space_first(items):\n    '''\n    Get space first from a string.\n    '''\n    result = []\n    for item in items:\n        if item == \" \":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_space_last(items):\n    '''\n    Get space last from a string.\n    '''\n    result = []\n    for item in items:\n        if item == \" \":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_any_space(items):\n    '''\n    Get any space from a string.\n    '''\n    result = []\n    for item in items:\n        if item == \" \":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_space_before_single_quotes(items):\n    '''\n    Get space before single quotes.\n    '''\n    result = []\n    for item in items:\n        if item == \"\\\"\":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_space_after_single_quotes(items):\n    '''\n    Get space after single quotes.\n    '''\n    result = []\n    for item in items:\n        if item == \"\\\"\":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_square_brackets(items):\n    '''\n    Get square brackets.\n    '''\n    result = []\n    for item in items:\n        if item == \"]\":\n            result.append(item)\n        elif item == \"[\":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_square_brackets_double(items):\n    '''\n    Get square brackets.\n    '''\n    result = []\n    for item in items:\n        if item == \"]\":\n            result.append(item)\n        elif item == \"[\":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_square_brackets_no_square(items):\n    '''\n    Get square brackets.\n    '''\n    result = []\n    for item in items:\n        if item == \"[\":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_square_brackets_no_square_double(items):\n    '''\n    Get square brackets.\n    '''\n    result = []\n    for item in items:\n        if item == \"[\":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_all_parentheses(items):\n    '''\n    Get all parenthesis.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        else:\n            if item[0] == \")\":\n                result.append(item)\n    return result\n    \ndef get_all_parentheses_no_square(items):\n    '''\n    Get all parenthesis.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        else:\n            if item[0] == \")\":\n                result.append(item)\n    return result\n    \ndef get_all_parentheses_no_square_double(items):\n    '''\n    Get all parenthesis.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        else:\n            if item[0] == \")\":\n                result.append(item)\n    return result\n    \ndef get_all_parentheses_with_spaces(items):\n    '''\n    Get all parenthesis.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        else:\n            if item[0] == \")\":\n                result.append(item)\n    return result\n    \ndef get_parentheses_no_spaces(items):\n    '''\n    Get parentheses without spaces.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_parentheses_with_spaces(items):\n    '''\n    Get parentheses with spaces.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef get_parentheses_no_spaces_double(items):\n    '''\n    Get parentheses without spaces.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        else:\n            if item[0] == \")\":\n                result.append(item)\n    return result\n    \ndef get_parentheses_no_square_no_spaces(items):\n    '''\n    Get parentheses without spaces.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        else:\n            if item[0] == \")\":\n                result.append(item)\n    return result\n    \ndef get_parentheses_no_square_doubl",
        "num_ids": 74
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def remove_parenthesis(items):\n        '''\n        Function to remove the parenthesis from the list of strings\n        '''\n        regex = r'(\\([^()]*\\)[^()]+\\))'\n        temp = re.findall(regex, str(items))\n        for item in temp:\n            if item[0] == '(' or item[-1] == ')':\n                items.remove(item)\n        return items\n    return remove_parenthesis(items)\n",
        "num_ids": 88
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis if the string has not its parenthesis\n    if len(items) == 0:\n        return \"\", []\n    else:\n        # If the string has an empty parenthesis, we return the elements and just return the empty string\n        if items[0] == \"\":\n            return items[1:], []\n        else:\n            return items, []\n",
        "num_ids": 88
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_regex = re.compile(r\"\\(.*?\\)\")\n    s = ''\n    for item in items:\n        s += re.sub(parenthesis_regex, '', item) +''\n    return s\n",
        "num_ids": 59
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n > 1:\n        n = n - 1\n        while (n % 2 == 1):\n            n = n / 2\n        if n % 2 == 1:\n            return n\n",
        "num_ids": 46
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = str(n) \n    return int(s[-1]) \n",
        "num_ids": 22
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        if n == 1: \n            return 2\n        if n == 2: \n            return 3\n        if n == 3: \n            return 4\n        if n == 4: \n            return 5\n        if n == 5: \n            return 6\n        if n == 6: \n            return 7\n",
        "num_ids": 91
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    n = 1\n    while(n > i):\n        if (n % 2)!= 0:\n            i += 1\n        n /= 2\n    return i\n",
        "num_ids": 46
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n % 4!= 0):\n        return n+1\n    else:\n        return n-1\n",
        "num_ids": 29
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def check(n, row, col):\n        # Checks if the given number is in the diagonal\n        if n == row * col:\n            # If it is, it is a non-diagonal and returns it\n            return True\n        # Else if it is not in the diagonal, it is not a non-diagonal\n        # and returns false\n        else:\n            return False\n",
        "num_ids": 89
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 1):\n        return 0\n    else:\n        return (n - 1) * n\n",
        "num_ids": 28
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # return the nth nonagonal number\n    # input : n (int)\n    # output : int\n    if n == 0: \n        return n\n    elif n == 1: \n        return n \n    else: \n        n1 = n // 2\n        return is_nonagonal(n1) \n",
        "num_ids": 78
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0: \n        return n \n    else: \n        return n-1\n",
        "num_ids": 28
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # You can use the fact that this is even faster\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return n//2+1\n    \n    # n = n-1\n    # # if the number has been multiplied by 2\n    # # if this number is divisible by 2,\n    # # return the next number\n    # # else, return the next number multiplied by 2\n    # return (n//2+1) if n%2==0 else n*2\n",
        "num_ids": 121
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_list = text.split()\n    if text_list[0].lower() == 'z':\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace(\"z\",\"\")\n    if text!= '':\n        if len(text) == 1:\n            return True\n        if text[0].isupper() or text[0].isdigit() or text[0] == '_' or text[-1] == '_' or text[-1] == '_':\n            return False\n        if text[0].lower() == text[-1].lower():\n            return True\n        else:\n            return False\n",
        "num_ids": 116
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # If a word starts with 'z'\n    if re.match(r'(^\\w+)\\Z', text):\n        return True\n    # If a word ends with 'z'\n    elif re.match(r'(^\\w+)\\Z', text[-1]):\n        return True\n",
        "num_ids": 75
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub(r'(?<=\\d)([A-Z][a-z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-z][A-Z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([a-z][a-z][A-Z])', r'\\1', text)\n    text = re.sub(r'(?<=\\d)([A-Z][a-",
        "num_ids": 2001
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = 'z'\n    pattern1 = 'Z'\n    pattern2 = 'Z'\n    pattern3 = 'Z'\n    pattern4 = 'Z'\n    pattern5 = 'Z'\n    pattern6 = 'Z'\n    pattern7 = 'Z'\n    pattern8 = 'Z'\n    pattern9 = 'Z'\n    pattern10 = 'Z'\n    pattern11 = 'Z'\n    pattern12 = 'Z'\n    pattern13 = 'Z'\n    pattern14 = 'Z'\n    pattern15 = 'Z'\n    pattern16 = 'Z'\n    pattern17 = 'Z'\n    pattern18 = 'Z'\n    pattern19 = 'Z'\n    pattern20 = 'Z'\n    pattern21 = 'Z'\n    pattern22 = 'Z'\n    pattern23 = 'Z'\n    pattern24 = 'Z'\n    pattern25 = 'Z'\n    pattern26 = 'Z'\n    pattern27 = 'Z'\n    pattern28 = 'Z'\n    pattern29 = 'Z'\n    pattern30 = 'Z'\n    pattern31 = 'Z'\n    pattern32 = 'Z'\n    pattern33 = 'Z'\n    pattern34 = 'Z'\n    pattern35 = 'Z'\n    pattern36 = 'Z'\n    pattern37 = 'Z'\n    pattern38 = 'Z'\n    pattern39 = 'Z'\n    pattern40 = 'Z'\n    pattern41 = 'Z'\n    pattern42 = 'Z'\n    pattern43 = 'Z'\n    pattern44 = 'Z'\n    pattern45 = 'Z'\n    pattern46 = 'Z'\n    pattern47 = 'Z'\n    pattern48 = 'Z'\n    pattern49 = 'Z'\n    pattern50 = 'Z'\n    pattern51 = 'Z'\n    pattern52 = 'Z'\n    pattern53 = 'Z'\n    pattern54 = 'Z'\n    pattern55 = 'Z'\n    pattern56 = 'Z'\n    pattern57 = 'Z'\n    pattern58 = 'Z'\n    pattern59 = 'Z'\n    pattern60 = 'Z'\n    pattern61 = 'Z'\n    pattern62 = 'Z'\n    pattern63 = 'Z'\n    pattern64 = 'Z'\n    pattern65 = 'Z'\n    pattern66 = 'Z'\n    pattern67 = 'Z'\n    pattern68 = 'Z'\n    pattern69 = 'Z'\n    pattern70 = 'Z'\n    pattern71 = 'Z'\n    pattern72 = 'Z'\n    pattern73 = 'Z'\n    pattern74 = 'Z'\n    pattern75 = 'Z'\n    pattern76 = 'Z'\n    pattern77 = 'Z'\n    pattern78 = 'Z'\n    pattern79 = 'Z'\n    pattern80 = 'Z'\n    pattern81 = 'Z'\n    pattern82 = 'Z'\n    pattern83 = 'Z'\n    pattern84 = 'Z'\n    pattern85 = 'Z'\n    pattern86 = 'Z'\n    pattern87 = 'Z'\n    pattern88 = 'Z'\n    pattern89 = 'Z'\n    pattern90 = 'Z'\n    pattern91 = 'Z'\n    pattern92 = 'Z'\n    pattern93 = 'Z'\n    pattern94 = 'Z'\n    pattern95 = 'Z'\n    pattern96 = 'Z'\n    pattern97 = 'Z'\n    pattern98 = 'Z'\n    pattern99 = 'Z'\n    pattern100 = 'Z'\n    pattern101 = 'Z'\n    pattern102 = 'Z'\n    pattern103 = 'Z'\n    pattern104 = 'Z'\n    pattern105 = 'Z'\n    pattern106 = 'Z'\n    pattern107 = 'Z'\n    pattern108 = 'Z'\n    pattern109 = 'Z'\n    pattern110 = 'Z'\n    pattern111 = 'Z'\n    pattern112 = 'Z'\n    pattern113 = 'Z'\n    pattern114 = 'Z'\n    pattern115 = 'Z'\n    pattern116 = 'Z'\n    pattern117 = 'Z'\n    pattern118 = 'Z'\n    pattern119 = 'Z'\n    pattern120 = 'Z'\n    pattern121 = 'Z'\n    pattern122 = 'Z'\n    pattern123 = 'Z'\n    pattern124 = 'Z'\n    pattern125 = 'Z'\n    pattern126 = 'Z'\n    pattern127 = 'Z'\n    pattern128 = 'Z'\n    pattern129 = 'Z'\n    pattern130 = 'Z'\n    pattern131 = 'Z'\n    pattern132 = 'Z'\n    pattern133 = 'Z'\n    pattern134 = 'Z'\n    pattern135 = 'Z'\n    pattern136 = 'Z'\n    pattern137 = 'Z'\n    pattern138 = 'Z'\n    pattern139 = 'Z'\n    pattern140 = 'Z'\n    pattern141 = 'Z'\n    pattern142 = 'Z'\n    pattern143 = 'Z'\n    pattern144 = 'Z'\n    pattern145 = 'Z'\n    pattern146 = 'Z'\n    pattern147 = 'Z'\n    pattern148 = 'Z'\n    pattern149 = 'Z'\n    pattern150 = 'Z'\n    pattern151 = 'Z'\n    pattern152 = 'Z'\n    pattern153 = 'Z'\n    pattern154 = 'Z'\n    pattern155 = 'Z'\n    pattern156 = 'Z'\n    pattern157 = 'Z'\n    pattern158 = 'Z'\n    pattern159 = 'Z'\n    pattern160 = 'Z'\n    pattern161 = 'Z'\n    pattern162 = 'Z'\n    pattern163 = 'Z'\n    pattern164 = 'Z'\n    pattern165 = 'Z'\n    pattern166 = 'Z'\n    pattern167 = 'Z'\n    pattern168 = 'Z'\n    pattern169 = 'Z'\n    pattern170 = 'Z'\n    pattern171 = 'Z'\n    pattern172 = 'Z'\n    pattern173 = 'Z'\n    pattern174 = 'Z'\n    pattern175 = 'Z'\n    pattern176 = 'Z'\n    pattern177 = 'Z'\n    pattern178 = 'Z'\n    pattern179 = 'Z'\n    pattern180 = 'Z'\n    pattern181 = 'Z'\n    pattern182 = 'Z'\n    pattern183 = 'Z'\n    pattern184 = 'Z'\n    pattern185 = 'Z'\n    pattern186 = 'Z'\n    pattern187 = 'Z'\n    pattern188 = 'Z'\n    pattern189 = 'Z'\n    pattern190 = 'Z'\n    pattern191 = 'Z'\n    pattern192 = 'Z'\n    pattern193 = 'Z'\n    pattern194 = 'Z'\n    pattern195 = 'Z'\n    pattern196 = 'Z'\n    pattern197 = 'Z'\n    pattern198 = 'Z'\n    pattern199 = 'Z'\n    pattern200 = 'Z'\n    pattern201 = 'Z'\n    pattern202 = 'Z'\n    pattern203 = 'Z'\n    pattern204 = 'Z'\n    pattern205 = 'Z'\n    pattern206 = 'Z'\n    pattern207 = 'Z'\n    pattern208 = 'Z'\n    pattern209 = 'Z'\n    pattern210 = 'Z'\n    pattern211 = 'Z'\n    pattern212 = 'Z'\n    pattern213 = 'Z'\n    pattern214 = 'Z'\n    pattern215 = 'Z'\n    pattern216 = 'Z'\n    pattern217 = 'Z'\n    pattern218 = 'Z'\n    pattern219 = 'Z'\n    pattern220 = 'Z'\n    pattern221 = 'Z'\n    pattern222 = 'Z'\n    pattern223 = 'Z'\n    pattern224 = 'Z'\n    pattern225 = 'Z'\n    pattern226 = 'Z'\n    pattern227 = 'Z'\n    pattern228 = 'Z'\n    pattern229 = 'Z'\n    pattern230 = 'Z'\n    pattern231 = 'Z'\n    pattern232 = 'Z'\n    pattern233 = 'Z'\n    pattern234 = 'Z'\n    pattern235 = 'Z'\n    pattern236 = 'Z'\n    pattern237 = 'Z'\n    pattern238 = 'Z'\n    pattern239 = 'Z'\n    pattern240 = 'Z'\n    pattern241 = 'Z'\n    pattern242 = 'Z'\n    pattern243 = 'Z'\n    pattern244 = 'Z'\n    pattern245 = 'Z'\n    pattern246 = 'Z'\n    pattern247 = 'Z'\n    pattern248 = 'Z'\n    pattern249 = 'Z'\n",
        "num_ids": 2001
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'z(?!(?<=.|\\W)|\\w)'+r'(?<=.|\\W)+')\n    if text.find('z') == -1:\n        return False\n    else:\n        return True\n",
        "num_ids": 66
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub('[^0-9]','',text)\n    return text.strip()\n",
        "num_ids": 27
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search(r'z', text)\n    return match!= None\n",
        "num_ids": 23
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = text.replace(\". \", \" \")\n    text = re.sub(r'[^\\w\\s]','', text)\n    if 'z' in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = text.split(' ')\n    for i in range(len(word)):\n        if word[i].strip()=='':\n            del(word[i])\n            del(word[0])\n        else:\n            break\n    return''.join(word)\n",
        "num_ids": 67
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n",
        "num_ids": 7
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed = []\n    for index in range(len(input)):\n        reversed.append(input[len(input)-index-1])\n    return reversed\n",
        "num_ids": 43
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    if(len(input) < k):\n        return input\n    else:\n        for i in range(k, len(input)):\n            result.append(input[i])\n        result = result[::-1]\n        for i in range(k):\n            result.insert(i, input[i])\n        return result",
        "num_ids": 84
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    newArr = []\n    i = k-1\n    while(i >= 0):\n        newArr.append(input[i])\n        i = i-1\n    newArr = newArr[::-1]\n    return newArr\n",
        "num_ids": 63
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(0, k):\n        temp = input[i]\n        j = i\n        while j >= 0 and j < k and input[j] > temp:\n            input[j+1] = input[j]\n            j = j-1\n        input[j+1] = temp\n    return input\n",
        "num_ids": 78
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-k] \ndef main(): \n    print(\"The number of elements in the given array is %d \" % len(arr))\n    \n    print(\"\\n1. After the array is created.\")\n    print(\"2. Reverse array starting from 0 by default.\")\n    print(\"3. Reverse array by k.\")\n    print(\"4. Reverse the array by a specific position.\")\n    print(\"5. Reverse array by specific position using the function.\")\n    print(\"6. Reverse array by specific position using the function.\")\n    print(\"7. Reverse array by specific position using the function.\")\n    print(\"8. Reverse array by specific position using the function.\")\n    print(\"9. Reverse array by specific position using the function.\")\n    print(\"10. Reverse array by specific position using the function.\")\n    print(\"11. Reverse array by specific position using the function.\")\n    print(\"12. Reverse array by specific position using the function.\")\n    print(\"13. Reverse array by specific position using the function.\")\n    print(\"14. Reverse array by specific position using the function.\")\n    print(\"15. Reverse array by specific position using the function.\")\n    print(\"16. Reverse array by specific position using the function.\")\n    print(\"17. Reverse array by specific position using the function.\")\n    print(\"18. Reverse array by specific position using the function.\")\n    print(\"19. Reverse array by specific position using the function.\")\n    print(\"20. Reverse array by specific position using the function.\")\n    print(\"21. Reverse array by specific position using the function.\")\n    print(\"22. Reverse array by specific position using the function.\")\n    print(\"23. Reverse array by specific position using the function.\")\n    print(\"24. Reverse array by specific position using the function.\")\n    print(\"25. Reverse array by specific position using the function.\")\n    print(\"26. Reverse array by specific position using the function.\")\n    print(\"27. Reverse array by specific position using the function.\")\n    print(\"28. Reverse array by specific position using the function.\")\n    print(\"29. Reverse array by specific position using the function.\")\n    print(\"30. Reverse array by specific position using the function.\")\n    print(\"31. Reverse array by specific position using the function.\")\n    print(\"32. Reverse array by specific position using the function.\")\n    print(\"33. Reverse array by specific position using the function.\")\n    print(\"34. Reverse array by specific position using the function.\")\n    print(\"35. Reverse array by specific position using the function.\")\n    print(\"36. Reverse array by specific position using the function.\")\n    print(\"37. Reverse array by specific position using the function.\")\n    print(\"38. Reverse array by specific position using the function.\")\n    print(\"39. Reverse array by specific position using the function.\")\n    print(\"40. Reverse array by specific position using the function.\")\n    print(\"41. Reverse array by specific position using the function.\")\n    print(\"42. Reverse array by specific position using the function.\")\n    print(\"43. Reverse array by specific position using the function.\")\n    print(\"44. Reverse array by specific position using the function.\")\n    print(\"45. Reverse array by specific position using the function.\")\n    print(\"46. Reverse array by specific position using the function.\")\n    print(\"47. Reverse array by specific position using the function.\")\n    print(\"48. Reverse array by specific position using the function.\")\n    print(\"49. Reverse array by specific position using the function.\")\n    print(\"50. Reverse array by specific position using the function.\")\n    print(\"51. Reverse array by specific position using the function.\")\n    print(\"52. Reverse array by specific position using the function.\")\n    print(\"53. Reverse array by specific position using the function.\")\n    print(\"54. Reverse array by specific position using the function.\")\n    print(\"55. Reverse array by specific position using the function.\")\n    print(\"56. Reverse array by specific position using the function.\")\n    print(\"57. Reverse array by specific position using the function.\")\n    print(\"58. Reverse array by specific position using the function.\")\n    print(\"59. Reverse array by specific position using the function.\")\n    print(\"60. Reverse array by specific position using the function.\")\n    print(\"61. Reverse array by specific position using the function.\")\n    print(\"62. Reverse array by specific position using the function.\")\n    print(\"63. Reverse array by specific position using the function.\")\n    print(\"64. Reverse array by specific position using the function.\")\n    print(\"65. Reverse array by specific position using the function.\")\n    print(\"66. Reverse array by specific position using the function.\")\n    print(\"67. Reverse array by specific position using the function.\")\n    print(\"68. Reverse array by specific position using the function.\")\n    print(\"69. Reverse array by specific position using the function.\")\n    print(\"70. Reverse array by specific position using the function.\")\n    print(\"71. Reverse array by specific position using the function.\")\n    print(\"72. Reverse array by specific position using the function.\")\n    print(\"73. Reverse array by specific position using the function.\")\n    print(\"74. Reverse array by specific position using the function.\")\n    print(\"75. Reverse array by specific position using the function.\")\n    print(\"76. Reverse array by specific position using the function.\")\n    print(\"77. Reverse array by specific position using the function.\")\n    print(\"78. Reverse array by specific position using the function.\")\n    print(\"79. Reverse array by specific position using the function.\")\n    print(\"80. Reverse array by specific position using the function.\")\n    print(\"81. Reverse array by specific position using the function.\")\n    print(\"82. Reverse array by specific position using the function.\")\n    print(\"83. Reverse array by specific position using the function.\")\n    print(\"84. Reverse array by specific position using the function.\")\n    print(\"85. Reverse array by specific position using the function.\")\n    print(\"86. Reverse array by specific position using the function.\")\n    print(\"87. Reverse array by specific position using the function.\")\n    print(\"88. Reverse array by specific position using the function.\")\n    print(\"89. Reverse array by specific position using the function.\")\n    print(\"90. Reverse array by specific position using the function.\")\n    print(\"91. Reverse array by specific position using the function.\")\n    print(\"92. Reverse array by specific position using the function.\")\n    print(\"93. Reverse array by specific position using the function.\")\n    print(\"94. Reverse array by specific position using the function.\")\n    print(\"95. Reverse array by specific position using the function.\")\n    print(\"96. Reverse array by specific position using the function.\")\n    print(\"97. Reverse array by specific position using the function.\")\n    print(\"98. Reverse array by specific position using the function.\")\n    print(\"99. Reverse array by specific position using the function.\")\n    print(\"100. Reverse array by specific position using the function.\")\n    print(\"101. Reverse array by specific position using the function.\")\n    print(\"102. Reverse array by specific position using the function.\")\n    print(\"103. Reverse array by specific position using the function.\")\n    print(\"104. Reverse array by specific position using the function.\")\n    print(\"105. Reverse array by specific position using the function.\")\n    print(\"106. Reverse array by specific position using the function.\")\n    print(\"107. Reverse array by specific position using the function.\")\n    print(\"108. Reverse array by specific position using the function.\")\n    print(\"109. Reverse array by specific position using the function.\")\n    print(\"110. Reverse array by specific position using the function.\")\n    print(\"111. Reverse array by specific position using the function.\")\n    print(\"112. Reverse array by specific position using the function.\")\n    print(\"113. Reverse array by specific position using the function.\")\n    print(\"114. Reverse array by specific position using the function.\")\n    print(\"115. Reverse array by specific position using the function.\")\n    print(\"116. Reverse array by specific position using the function.\")\n    print(\"117. Reverse array by specific position using the function.\")\n    print(\"118. Reverse array by specific position using the function.\")\n    print(\"119. Reverse array by specific position using the function.\")\n    print(\"120. Reverse array by specific position using the function.\")\n    print(\"121. Reverse array by specific position using the function.\")\n    print(\"122. Reverse array by specific position using the function.\")\n    print(\"123. Reverse array by specific position using the function.\")\n    print(\"124. Reverse array by specific position using the function.\")\n    print(\"125. Reverse array by specific position using the function.\")\n    print(\"126. Reverse array by specific position using the function.\")\n    print(\"127. Reverse array by specific position using the function.\")\n    print(\"128. Reverse array by specific position using the function.\")\n    print(\"129. Reverse array by specific position using the function.\")\n    print(\"130. Reverse array by specific position using the function.\")\n    print(\"131. Reverse array by specific position using the function.\")\n    print(\"132. Reverse array by specific position usin",
        "num_ids": 2010
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # input is an array of the array you want to reverse\n    # k is the position at which to start reversing the array\n    # output is the same array with the reversed value\n    output = input[::-1]\n    for i in range(k):\n        output.append(output[i])\n    return output\n",
        "num_ids": 75
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print('input', input)\n    print('k', k)\n    print('')\n",
        "num_ids": 24
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a variable to store the output array\n    output = []\n    # Initialize an iterator\n    i = 0\n    # Add the value to the output array\n    while (i < len(input)):\n        # Add the element from the input array\n        output.append(input[i])\n        # Move the iterator forward by k\n        i += k\n        # Move to the next position and iterate\n    # Return the reversed array\n    return output\n    \ndef merge_sort(input, k): \n    '''\n    Write a python function to sort an array.\n    '''\n    # Create a variable to store the output array\n    output = []\n    # Initialize an iterator\n    i = 0\n    # Add the value to the output array\n    while (i < len(input)): \n        # Check if the current position is the last position or not\n        if (i == len(input) - 1 or i < len(input) // 2): \n            # Check if the value is less than the maximum\n            if (input[i] < input[i+k]):\n                # Update the value\n                output.append(input[i])\n            # Move the iterator forward by k\n            i += k\n        # Move the iterator forward by k\n        i += k\n        # Check if the position is the last position or not\n        if (i > len(input) - 1): \n            # If the position is not the last position,\n            # then move the position forward by k \n            output.append(input[i])\n            # Move the iterator forward by k\n            i = 0\n            # Check if the position is the last position or not\n    # Return the reversed array\n    return output\n    \ndef linear_search(input, search_element): \n    '''\n    Write a python function to search an element in an array.\n    '''\n    # Create a variable to store the output array\n    output = []\n    # Initialize an iterator\n    i = 0\n    # Add the value to the output array\n    while (i < len(input)):\n        # Check if the current position is the last position or not\n        if (i == len(input) - 1 or i < len(input) // 2): \n            # If the position is not the last position, then move the position forward by k \n            if (input[i] == search_element): \n                # Update the value\n                output.append(i)\n        # Move the iterator forward by k\n        i += 1\n        # Move to the next position and iterate\n    # Return the reversed array\n    return output\n    \ndef main(): \n    print(\"Arrays: \")\n    arr = [8, 5, 1, 10, 9, 11, 12, 2, 3, 4, 6]\n    print(arr)\n    print(\"Sorts: \")\n    print(sorted(arr))\n    print(\"Reversed: \")\n    print(reverse_Array_Upto_K(arr, 2))\n    print(\"Merge: \")\n    print(merge_sort(arr, 2))\n    print(\"Linear Search: \")\n    print(linear_search(arr, 6))\n    print(\"Linear Search: \")\n    print(linear_search(arr, 12))\n    print(\"Linear Search: \")\n    print(linear_search(arr, -4))\n    print(\"Linear Search: \")\n    print(linear_search(arr, 10))\n",
        "num_ids": 378
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + tuple(test_dict)\n    return new_tup\n",
        "num_ids": 27
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup[key] = test_dict[key]\n",
        "num_ids": 27
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup, test_dict)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup\n",
        "num_ids": 34
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    print(test_tup)\n    for key in test_dict.keys():\n        test_tup[key] = test_dict[key]\n    print(test_tup)\n    return test_tup\n    \ndef add_tuple(tuple1, tuple2):\n    '''\n    Write a function that takes in two tuples, then adds both tuples together.\n    '''\n    print(tuple1 + tuple2)\n    return tuple1 + tuple2\n",
        "num_ids": 21
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not type(test_tup) is tuple:\n        test_tup = (test_tup,)\n    for i in test_dict:\n        test_tup = test_tup + (i, test_dict[i])\n    return test_tup\n",
        "num_ids": 66
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, val in test_dict.items():\n        test_tup.append((key, val))\n    return test_tup\n",
        "num_ids": 35
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # test_tup += test_dict\n    for key in test_dict:\n        test_tup += (key, test_dict[key])\n    return test_tup\n",
        "num_ids": 45
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # your code here\n    pass",
        "num_ids": 10
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    \n    if cost==[]:\n        return 0\n    \n    else:\n        N=len(cost)\n        result=[]\n        \n        if N==1:\n            return cost[0][0]\n        \n        else:\n            for i in range(0,N-1):\n                for j in range(0,i+1):\n                    result.append(cost[i][j])\n            \n            for i in range(N-1,N):\n                for j in range(N-1,i-1,-1):\n                    result.append(cost[i][j])\n            \n            result=max(result)\n            \n        return result/N\n        \n        \nprint(maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]])",
        "num_ids": 191
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    # setup\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n        \n    # execute\n    for row in range(1,n):\n        dp[row][row] = dp[row-1][row] + dp[row-1][row-1]\n        \n    # find the max\n    max = 0\n    for col in range(n):\n        for row in range(n-col):\n            dp[row][col+row] = dp[row+1][col+row] + dp[row+1][col]\n            if dp[row][col+row] > max:\n                max = dp[row][col+row]\n    \n    return max/n\n",
        "num_ids": 208
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if (len(cost) == 0):\n        return 0\n    elif (len(cost) == 1):\n        return cost[0][0]\n    elif (len(cost) == 2):\n        return (cost[0][0]+cost[1][0])/2\n    else:\n        result = 0\n        currentMax = 0\n        for i in range(len(cost)):\n            for j in range(len(cost[i])):\n                if (cost[i][j] > currentMax):\n                    currentMax = cost[i][j]\n            result += currentMax\n        result /= len(cost)\n        return result\n",
        "num_ids": 153
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    result = 0\n    for i in range(N):\n        for j in range(N):\n            result += cost[i][j]\n    return result/N\n",
        "num_ids": 49
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    average = [0] * n\n    for i in range(n):\n        for j in range(n):\n            average[i] += cost[i][j]\n    for i in range(n):\n        average[i] = average[i] / n\n    return average\n",
        "num_ids": 76
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    average = 0\n    # calculate path\n    for x in range(len(cost)-1):\n        for y in range(len(cost[0])-1):\n            if y == 0:\n                average += cost[x][y]\n            elif y == len(cost[0])-1:\n                average += cost[x][y]/len(cost[0])\n            else:\n                average += cost[x][y]/len(cost[0])\n",
        "num_ids": 111
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    result = 0\n",
        "num_ids": 7
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    stack = []\n    total = 0\n    for i in range(N):\n        for j in range(N):\n            total += cost[i][j]\n            stack.append([i, j])\n        \n    while stack:\n        curr = stack.pop()\n        i, j = curr[0], curr[1]\n        if not len(stack):\n            return 0\n        \n        if i+1 < N and cost[i+1][j] > cost[i][j] + cost[i+1][j]:\n            stack.append([i+1, j])\n        if i-1 >= 0 and cost[i-1][j] > cost[i][j] + cost[i-1][j]:\n            stack.append([i-1, j])\n        if j+1 < N and cost[i][j+1] > cost[i][j] + cost[i][j+1]:\n            stack.append([i, j+1])\n        if j-1 >= 0 and cost[i][j-1] > cost[i][j] + cost[i][j-1]:\n            stack.append([i, j-1])\n    return total/total\n",
        "num_ids": 290
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    for row in cost:\n        for i in range(0,len(row)):\n            if row[i]!= 0:\n                row[i] = row[i]/cost[row[i]]\n    return cost\n",
        "num_ids": 56
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maximum = 0\n    current = 0\n    # In the function we know that the maximum number of cells visited is in the paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if cost[i][j] > maximum:\n                maximum = cost[i][j]\n                current = j\n    return maximum/len(cost)\n",
        "num_ids": 93
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.keys():\n        for tuple in students.get(student):\n            student_height = tuple[0]\n            student_weight = tuple[1]\n            if student_height >= h and student_weight >= w:\n                students.pop(student)\n                print(student)\n    \n    return students\n",
        "num_ids": 78
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res=[]\n    for i in students:\n        if(students[i][0]>h and students[i][1]>w):\n            res.append(i)\n    return res\ndef find_best_students(data,i):\n    '''\n    The input is given as - a dictionary with a student name as a key, - min height, - min weight, the student's class as a value. \n    Write a function to find the best student by class and its index.\n    '''\n    #TODO:  Write your code here\n    min_height = 100\n    min_weight = 100\n    class_list=[]\n    for k,v in data.items():\n        if v[0]>min_height and v[1]>min_weight:\n            class_list.append([v[0],v[1],k])\n    class_list.sort(key = lambda x: x[2])\n    print(class_list)\n    return class_list[0]\ndef write_result(result,file_name):\n    '''\n    The input is given as - a string of the format'student_name height weight'. Write a function to write the result to the file in the correct format.\n    '''\n    #TODO:  Write your code here\n    with open(file_name,'w') as f:\n        for i,j in result:\n            f.write(str(i)+\" \"+str(j)+\"\\n\")\n    return\ndef main():\n    #TODO:  Write your code here\n    data={}\n    filename = input(\"Enter the filename with extention: \")\n    with open(filename) as f:\n        for line in f:\n            line=line.split()\n            data[line[0]]=[float(line[1]),float(line[2])]\n    f.close()\n    result=filter_data(data,min_height,min_weight)\n    result=find_best_students(data,result)\n    write_result(result,output_filename)\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 210
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = dict()\n    for student in students:\n        if not student['student_height'] or not student['student_weight']:\n            continue\n        if student['student_height'] > h or student['student_weight'] > w:\n            continue\n        else:\n            result[student['student_name']] = student\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if len(student) > 0 and all(i > w for i in student[1]):\n            if student[1][0] > h:\n                students.remove(student)\n        \n    return students\n",
        "num_ids": 59
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Creating a list to hold the filtered list\n    filt_list = []\n    for name in students:\n        if students[name][1] > h and students[name][2] > w:\n            filt_list.append(name)\n    return filt_list\n",
        "num_ids": 67
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #create empty list to hold data\n    data = []\n    for student in students:\n        if student[1][0] >= h and student[1][1] >= w:\n            data.append(student)\n    \n    return data\n",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_h = students[0][1]\n    min_w = students[0][2]\n",
        "num_ids": 26
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    stds=[]\n    for s in students:\n        if (s[\"student_height\"]>=h and s[\"student_weight\"]>=w):\n            stds.append(s)\n    print(len(stds))\n    return stds\n",
        "num_ids": 62
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # TODO: write the code here.\n    if(len(students) == 0):\n        return students\n    \n    student_dict = {}\n    for i in range(len(students)):\n        if students[i][1] > w:\n            student_dict.update({students[i][0]:students[i][1]})\n    \n    if(len(student_dict) == 0):\n        return students\n",
        "num_ids": 105
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #Convert the lists into sets\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    #Find the set difference\n    return len(nums1_set.difference(nums2_set))\n",
        "num_ids": 66
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    n3 = 0\n    for i in range(n1):\n        for j in range(n2):\n            if nums1[i] == nums2[j]:\n                n3 += 1\n    return n3\n",
        "num_ids": 77
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    c=0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i]==nums2[j]:\n                c+=1\n    return c\ndef count_unique_elements(lst):\n    '''\n    The input is a list. Write a function to return the number of unique elements in the input list.\n    '''\n    return len(set(lst))\ndef unique_elements(lst):\n    '''\n    The input is a list. Return the list of unique elements in the list.\n    '''\n    return list(set(lst))\ndef is_sorted(lst):\n    '''\n    The input is a list. Return true if the input list is sorted in ascending order, and false if not.\n    '''\n    return sorted(lst)==lst\ndef remove_duplicates(lst):\n    '''\n    The input is a list. Return a list of the elements that appear in the list, but do not appear in the input list.\n    '''\n    d=set(lst)\n    return [x for x in lst if x not in d]\ndef find_duplicates(lst):\n    '''\n    The input is a list. Return the elements that appear in the list, but do not appear in the input list.\n    '''\n    s=set(lst)\n    d=[]\n    for x in s:\n        if x not in lst:\n            d.append(x)\n    return d\ndef bubble_sort(lst):\n    '''\n    The input is a list. Return a list of the elements that appear in the list, in increasing order, in ascending order.\n    '''\n    for i in range(len(lst)-1):\n        for j in range(len(lst)-1-i):\n            if lst[j]>lst[j+1]:\n                lst[j],lst[j+1]=lst[j+1],lst[j]\n    return lst\ndef shell_sort(lst):\n    '''\n    The input is a list. Return a list of the elements that appear in the list, in ascending order, in a shell sort.\n    '''\n    gap=int(len(lst)/2)\n    for i in range(gap,len(lst)):\n        temp=lst[i]\n        j=i\n        while j>=gap and lst[j-gap]>temp:\n            lst[j]=lst[j-gap]\n            j-=gap\n        lst[j]=temp\n    return lst\ndef insertion_sort(lst):\n    '''\n    The input is a list. Return a list of the elements that appear in the list, in ascending order, in a insertion sort.\n    '''\n    for i in range(1,len(lst)):\n        for j in range(i,0,-1):\n            if lst[j]<lst[j-1]:\n                lst[j],lst[j-1]=lst[j-1],lst[j]\n            else:\n                break\n    return lst\ndef merge_sort(lst):\n    '''\n    The input is a list. Return a list of the elements that appear in the list, in ascending order, in a merge sort.\n    '''\n    if len(lst)>1:\n        mid=len(lst)//2\n        L=lst[:mid]\n        R=lst[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i=0\n        j=0\n        k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                lst[k]=L[i]\n                i+=1\n            else:\n                lst[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            lst[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            lst[k]=R[j]\n            j+=1\n            k+=1\n    return lst\ndef quick_sort(lst):\n    '''\n    The input is a list. Return a list of the elements that appear in the list, in ascending order, in a quick sort.\n    '''\n    if len(lst)<=1:\n        return lst\n    p=[]\n    p1,p2=0,0\n    pq=[]\n    while p1<len(lst) or p2<len(lst):\n        if p1<len(lst):\n            if lst[p1]>lst[p2]:\n                pq.append(lst[p1])\n                p1+=1\n            else:\n                pq.append(lst[p2])\n                p2+=1\n        else:\n            pq.append(lst[p2])\n            p2+=1\n    return pq+lst[p1:]+lst[:p1]\ndef merge_sort(lst):\n    '''\n    The input is a list. Return a list of the elements that appear in the list, in ascending order, in a merge sort.\n    '''\n    if len(lst)<=1:\n        return lst\n    mid=len(lst)//2\n    L=lst[:mid]\n    R=lst[mid:]\n    merge_sort(L)\n    merge_sort(R)\n    i=0\n    j=0\n    k=0\n    while i<len(L) and j<len(R):\n        if L[i]<R[j]:\n            lst[k]=L[i]\n            i+=1\n        else:\n            lst[k]=R[j]\n            j+=1\n        k+=1\n    while i<len(L):\n        lst[k]=L[i]\n        i+=1\n        k+=1\n    while j<len(R):\n        lst[k]=R[j]\n        j+=1\n        k+=1\n    return lst\ndef merge_sort(lst):\n    '''\n    The input is a list. Return a list of the elements that appear in the list, in ascending order, in a merge sort.\n    '''\n    if len(lst)<=1:\n        return lst\n    gap=int(len(lst)/2)\n    left=[]\n    right=[]\n    p=0\n    while p<len(lst):\n        if p<gap:\n            left.append(lst[p])\n            p+=1\n        else:\n            right.append(lst[p])\n            p+=1\n    merge_sort(left)\n    merge_sort(right)\n    i=0\n    j=0\n    k=0\n    while i<len(left) and j<len(right):\n        if left[i]<right[j]:\n            lst[k]=left[i]\n            i+=1\n        else:\n            lst[k]=right[j]\n            j+=1\n        k+=1\n    while i<len(left):\n        lst[k]=left[i]\n        i+=1\n        k+=1\n    while j<len(right):\n        lst[k]=right[j]\n        j+=1\n        k+=1\n    return lst\ndef quick_sort(lst):\n    '''\n    The input is a list. Return a list of the elements that appear in the list, in ascending order, in a quick sort.\n    '''\n    if len(lst)<=1:\n        return lst\n    p=[]\n    p1,p2=0,0\n    pq=[]\n    while p1<len(lst) or p2<len(lst):\n        if p1<len(lst):\n            if lst[p1]>lst[p2]:\n                pq.append(lst[p1])\n                p1+=1\n            else:\n                pq.append(lst[p2])\n                p2+=1\n        else:\n            pq.append(lst[p",
        "num_ids": 144
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    \n    for index in range(0, len(nums1)):\n        if(nums1[index] == nums2[index]):\n            count += 1\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    p = 0\n    q = 0\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            p += 1\n        else:\n            q += 1\n    return p, q\n",
        "num_ids": 67
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_dict = dict()\n    nums2_dict = dict()\n    for i in range(len(nums1)):\n        nums1_dict[nums1[i]] = nums1[i]\n",
        "num_ids": 57
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    s1_length = len(nums1)\n    s2_length = len(nums2)\n    if s1_length == s2_length:\n        return len(set(nums1).intersection(nums2))\n    else:\n        return s1_length - s2_length\n",
        "num_ids": 75
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    n1 = len(nums1)\n    n2 = len(nums2)\n    for i in range(n1):\n        for j in range(n2):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n",
        "num_ids": 42
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while base!= 0:\n        total += base % 10\n        base = int(base / 10)\n    return total * power\n",
        "num_ids": 38
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    if base == 0:\n        return 0\n    else:\n        while base!= 0:\n            total += base % 10\n            base = base // 10\n        return total * power\n",
        "num_ids": 50
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base!= 0:\n        digit = base % 10\n        base = base // 10\n        sum = sum + digit\n    return sum * power\n",
        "num_ids": 42
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # YOUR CODE HERE\n    pass\n    #raise NotImplementedError\n",
        "num_ids": 20
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base==10:\n        return int(power)\n    else:\n        return power_base_sum(base, int(power))\n",
        "num_ids": 35
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += power % 10\n        power = power // 10\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base) if int(i) <= power])\n",
        "num_ids": 26
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base * power\n",
        "num_ids": 8
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = abs(power)\n    return sum(base // 10**power) * base\n",
        "num_ids": 23
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        sum_digits += power % base\n        power //= base\n    return sum_digits\n    \ndef power_sequence(digits, sequence):\n    '''\n    Write a function that takes a sequence of digits (a list of digits), and a base value, and returns the total sum of all digits for the power of the base.\n    '''\n    total = 0\n    for digit in sequence:\n        total += power_base_sum(digits, digit)\n    return total\n    \ndef is_palindrome(number):\n    '''\n    Write a function that takes in a number (int) and returns True if the number is a palindrome, False otherwise.\n    '''\n    string = str(number)\n    rev = string[::-1]\n    if int(string[::-1]) == int(rev):\n        return True\n    return False\n    \ndef is_palindrome_v2(number):\n    '''\n    Write a function that takes in a number (int), and returns True if the number is a palindrome, False otherwise.\n    '''\n    reversed_number = 0\n    rev_number = 0\n    for digit in str(number):\n        reversed_number += int(digit) * (10 ** len(str(digit)) - 1)\n        rev_number += int(digit) * (10 ** (len(str(digit)) - 1))\n    return int(reversed_number) == int(rev_number)\n    \n",
        "num_ids": 96
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #soup = bs4.BeautifulSoup(text1, 'html.parser')\n    #quotation_mark = soup.find('b').find_next('b').contents[0]\n    #quotation_mark = re.findall(r'\"(.*?)\"', quotation_mark)\n    #quotation_mark = quotation_mark.replace('\"', '')\n    #quotation_mark = re.findall(r'[^\"\\']', quotation_mark)\n    quotation_mark = re.findall(r'\"[^\"]*\"', text1)\n    quotation_mark = quotation_mark[0]\n    #print(quotation_mark)\n    return quotation_mark\n",
        "num_ids": 169
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    # Separate all quotation marks from the text\n    text = text1.split('\"')\n    # Put the quotation marks back into a string and remove the quotes\n    text2 = ''\n    for word in text:\n        word = word.replace(\"'\", \"\")\n        text2 += word + \" \"\n",
        "num_ids": 75
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    def split_quotation(text):\n        '''Split a string into sentences.\n        '''\n        sentences = re.split('(?<=[.?!])([^\".,!?])', text)\n        return sentences\n    def remove_quotation(sentences):\n        '''Remove quotation marks from sentences.\n        '''\n        sentences = [s.replace(u'\\u2029','') for s in sentences]\n        sentences = [s.replace('.', '') for s in sentences]\n        sentences = [s.replace(u'\\u2019','') for s in sentences]\n        sentences = [s.replace('.', '') for s in sentences]\n        return sentences\n    \n    def find_infinite_words(text):\n        '''\n        Find infinite words in a string.\n        '''\n        infinite_words = []\n        for word in text.split():\n            if re.search('[^\\w]', word):\n                infinite_words.append(word)\n        return infinite_words\n    \n    def find_the_nearest_one(sentences, word):\n        '''\n        Find the nearest word to the given one.\n        '''\n        i = 0\n        nearest_words = []\n        \n        while len(sentences) > i and sentences[i]!= word:\n            if re.search(word, sentences[i]):\n                nearest_words.append(sentences[i])\n                i += 1\n            else:\n                i += 1\n        \n        return nearest_words\n    \n    def print_nearest_one(sentences, word):\n        '''\n        Print the nearest one to the given one.\n        '''\n        print(word)\n        print(find_nearest_one(sentences, word))\n    \n    def find_the_nearest_word(sentences, word):\n        '''\n        Find the nearest word to the given one.\n        '''\n        nearest_word = \"\"\n        for sentence in sentences:\n            if word in sentence:\n                nearest_word = sentence\n                break\n        return nearest_word\n    \n    def remove_punctuation(sentences):\n        '''\n        Remove punctuation.\n        '''\n        for i in range(len(sentences)):\n            sentences[i] = sentences[i].translate(str.maketrans('', '', string.punctuation))\n        return sentences\n    \n    def remove_all_stopwords(sentences):\n        '''\n        Remove all stopwords.\n        '''\n        for i in range(len(sentences)):\n            sentences[i] = sentences[i].translate(str.maketrans('', '', string.punctuation))\n        return sentences\n    \n    def remove_stopwords(sentences):\n        '''\n        Remove all stopwords.\n        '''\n        for i in range(len(sentences)):\n            sentences[i] = sentences[i].translate(str.maketrans('', '', string.punctuation))\n        return sentences\n    \n    def remove_numbers(sentences):\n        '''\n        Remove all numbers.\n        '''\n        for i in range(len(sentences)):\n            sentences[i] = sentences[i].translate(str.maketrans('', '', string.digits))\n        return sentences\n    \n    def find_numbers(sentences, word):\n        '''\n        Find numbers to the given word.\n        '''\n        i = 0\n        numbers = []\n        \n        while i < len(sentences) and re.search(word, sentences[i]):\n            numbers.append(sentences[i])\n            i += 1\n        \n        return numbers\n    \n    def remove_numbers_stopwords(sentences):\n        '''\n        Remove all numbers and stopwords from sentences.\n        '''\n        for sentence in sentences:\n            sentence = sentence.translate(str.maketrans('', '', string.digits))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sen",
        "num_ids": 1076
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern1=re.compile(r'(?<![0-9])([^\\s-])')\n    match1=pattern1.finditer(text1)\n    ans1=list()\n    for match1_item in match1:\n        ans1.append(match1_item.group())\n    return ans1\ndef extract_group_delimiter(text):\n    '''\n    Extracts the delimiter, because the regex does not work when the string contains a space.\n    '''\n    pattern=re.compile(r'\\b\\s+')\n    match=pattern.findall(text)\n    return match\ndef check_score(text):\n    '''\n    Check if the entered score is a number.\n    '''\n    pattern=re.compile(r'^[0-9]+$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef read_quotation(text):\n    '''\n    Read the quotation and return the value.\n    '''\n    text2=text.split(\" \")\n    ans=[]\n    for x in text2:\n        ans.append(extract_quotation(x))\n    return ans\ndef check_comma(text):\n    '''\n    Check if the entered value contains comma.\n    '''\n    pattern=re.compile(r',')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_valid(text):\n    '''\n    Check if the entered value contains a valid expression.\n    '''\n    pattern=re.compile(r'^[a-zA-Z]')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_float(text):\n    '''\n    Check if the entered value is a number.\n    '''\n    pattern=re.compile(r'^[0-9]+$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_phone(text):\n    '''\n    Check if the entered value contains a phone number.\n    '''\n    pattern=re.compile(r'\\+?[0-9]{10,12}')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_int(text):\n    '''\n    Check if the entered value contains a number.\n    '''\n    pattern=re.compile(r'^[0-9]+$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_currency(text):\n    '''\n    Check if the entered value contains a currency.\n    '''\n    pattern=re.compile(r'^[A-Z]')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_money(text):\n    '''\n    Check if the entered value contains a money.\n    '''\n    pattern=re.compile(r'\\d{1,4}$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_date(text):\n    '''\n    Check if the entered value contains a date.\n    '''\n    pattern=re.compile(r'^[0-9]{4}-\\d{2}-\\d{2}$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_text(text):\n    '''\n    Check if the entered value contains any text.\n    '''\n    pattern=re.compile(r'^[A-Za-z\\s]{1,30}$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_url(text):\n    '''\n    Check if the entered value contains a URL.\n    '''\n    pattern=re.compile(r'^[a-zA-Z0-9\\-]+\\.([a-zA-Z]{2,4})(:\\d{1,5})?$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_email(text):\n    '''\n    Check if the entered value contains an email address.\n    '''\n    pattern=re.compile(r'^[A-Za-z0-9\\.\\+_-]+@[A-Za-z0-9\\._-]+\\.[a-zA-Z]{2,4}$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_bearer(text):\n    '''\n    Check if the entered value contains a bearer token.\n    '''\n    pattern=re.compile(r'^Bearer(?:Token|Token\\s+Secret)$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_url_hash(text):\n    '''\n    Check if the entered value contains a URL hash.\n    '''\n    pattern=re.compile(r'^[A-Za-z0-9\\-]+\\.([a-zA-Z]{2,4})(:\\d{1,5})?$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_any_date(text):\n    '''\n    Check if the entered value contains any date.\n    '''\n    pattern=re.compile(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_any_text(text):\n    '''\n    Check if the entered value contains any text.\n    '''\n    pattern=re.compile(r'^[A-Za-z0-9\\s]{1,30}$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_any_url(text):\n    '''\n    Check if the entered value contains any URL.\n    '''\n    pattern=re.compile(r'^[a-zA-Z0-9\\.\\+_-]+\\.([a-zA-Z]{2,4})(:\\d{1,5})?$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_any_email(text):\n    '''\n    Check if the entered value contains any email address.\n    '''\n    pattern=re.compile(r'^[A-Za-z0-9\\.\\+_-]+\\.[A-Za-z0-9\\.\\+_-]+\\.[A-Za-z0-9\\.\\+_-]+$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_any_bearer(text):\n    '''\n    Check if the entered value contains any bearer token.\n    '''\n    pattern=re.compile(r'^Bearer(?:Token|Token\\s+Secret)$')\n    match=pattern.findall(text)\n    if len(match)==0:\n        return False\n    else:\n        return True\ndef is_none(text):\n    '''\n    Check i",
        "num_ids": 5
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace('\\n','').replace('\\t','')\n    text1 = text1.replace('\\r','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('\\t','')\n    text1 = text1.replace('\\r','')\n    text1 = text1.replace('\\n','')\n    text1 = text1.replace('  ',' ')\n    text1 = text1.replace('<',' ')\n    text1 = text1.replace('>',' ')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('!',' ')\n    text1 = text1.replace('.',' ')\n    text1 = text1.replace('?',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('+',' ')\n    text1 = text1.replace('|',' ')\n    text1 = text1.replace('/',' ')\n    text1 = text1.replace('_',' ')\n    text1 = text1.replace('*',' ')\n    text1 = text1.replace(':',' ')\n    text1 = text1.replace(';',' ')\n    text1 = text1.replace(';',' ')\n    text1 = text1.replace('&',' ')\n    text1 = text1.replace('&',' ')\n    text1 = text1.replace('!',' ')\n    text1 = text1.replace('.',' ')\n    text1 = text1.replace('?',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('(',' ')\n    text1 = text1.replace(')',' ')\n    text1 = text1.replace('{',' ')\n    text1 = text1.replace('}',' ')\n    text1 = text1.replace('~',' ')\n    text1 = text1.replace('&&',' ')\n    text1 = text1.replace('||',' ')\n    text1 = text1.replace('~',' ')\n    text1 = text1.replace('!',' ')\n    text1 = text1.replace('.',' ')\n    text1 = text1.replace('?',' ')\n    text1 = text1.replace('+',' ')\n    text1 = text1.replace('0',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('e',' ')\n    text1 = text1.replace('#',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('_',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('(',' ')\n    text1 = text1.replace(')',' ')\n    text1 = text1.replace('!',' ')\n    text1 = text1.replace('.',' ')\n    text1 = text1.replace('?',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('@',' ')\n    text1 = text1.replace('#',' ')\n    text1 = text1.replace('/',' ')\n    text1 = text1.replace('&',' ')\n    text1 = text1.replace('@',' ')\n    text1 = text1.replace('!',' ')\n    text1 = text1.replace('.',' ')\n    text1 = text1.replace('?',' ')\n    text1 = text1.replace('e',' ')\n    text1 = text1.replace('#',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('+',' ')\n    text1 = text1.replace('0',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('&',' ')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')',' ')\n    text1 = text1.replace('{',' ')\n    text1 = text1.replace('}',' ')\n    text1 = text1.replace('~',' ')\n    text1 = text1.replace('&&',' ')\n    text1 = text1.replace('||',' ')\n    text1 = text1.replace('~',' ')\n    text1 = text1.replace('!',' ')\n    text1 = text1.replace('.',' ')\n    text1 = text1.replace('?',' ')\n    text1 = text1.replace('+',' ')\n    text1 = text1.replace('0',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('e',' ')\n    text1 = text1.replace('#',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('_',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('@',' ')\n    text1 = text1.replace('#',' ')\n    text1 = text1.replace('/',' ')\n    text1 = text1.replace('&',' ')\n    text1 = text1.replace('@',' ')\n    text1 = text1.replace('!',' ')\n    text1 = text1.replace('.',' ')\n    text1 = text1.replace('?',' ')\n    text1 = text1.replace('e',' ')\n    text1 = text1.replace('#',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('+',' ')\n    text1 = text1.replace('0',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('&',' ')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')',' ')\n    text1 = text1.replace('{',' ')\n    text1 = text1.replace('}',' ')\n    text1 = text1.replace('~',' ')\n    text1 = text1.replace('&&',' ')\n    text1 = text1.replace('||',' ')\n    text1 = text1.replace('~',' ')\n    text1 = text1.replace('!',' ')\n    text1 = text1.replace('.',' ')\n    text1 = text1.replace('?',' ')\n    text1 = text1.replace('+',' ')\n    text1 = text1.replace('0',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('e',' ')\n    text1 = text1.replace('#',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('_',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('@',' ')\n    text1 = text1.replace('#',' ')\n    text1 = text1.replace('/',' ')\n    text1 = text1.replace('&',' ')\n    text1 = text1.replace('@',' ')\n    text1 = text1.replace('!',' ')\n    text1 = text1.replace('.',' ')\n    text1 = text1.replace('?',' ')\n    text1 = text1.replace('e',' ')\n    text1 = text1.replace('#',' ')\n    text1 = text1.replace('$',' ')\n    text1 = text1.replace('+',' ')\n    text1 = text1.replace('0',' ')\n    text1 = text1.replace('-',' ')\n    text1 = text1.replace('&',' ')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')',' ')\n    text1 = text1.replace(",
        "num_ids": 2011
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = []\n    if not text1:\n        return result\n",
        "num_ids": 18
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #check whether quotation mark present or not\n    if '\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '?' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('?','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if ':' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace(':','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if ',' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace(',','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\''\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\\"\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\\"\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\\"' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\\"','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'\\'' in text1:\n        #extract quotation mark and convert to lower\n        text1=text1.replace('\\'\\'\\'','')\n        text1=text1.lower()\n    #check whether quotation mark present or not\n    if '\\''\\'' in text1:\n        #extract quotation mark and conver",
        "num_ids": 2021
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    start = 0\n    end = 0\n    for i in range(len(text1)):\n        if text1[i] =='':\n            start += 1\n            end += 1\n            if text1[i+1] == '.':\n                end += 1\n                if text1[i-1] == '.':\n                    end += 1\n    return end - start\n",
        "num_ids": 90
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\d+\\-\\d+\\s\\w*', text1)\n",
        "num_ids": 26
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex_quotation_marks = r'(?<=[,.;:!])[ ]'\n    pattern = re.compile(regex_quotation_marks)\n    match_obj = pattern.search(text1)\n    return match_obj.group()\n",
        "num_ids": 65
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = []\n    i = 0\n    for x in test_tup:\n        i += 1\n        res.append(x * i)\n    return tuple(res)\n",
        "num_ids": 44
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup = new_tup + (test_tup[i] * test_tup[i+1])\n    return new_tup\n",
        "num_ids": 62
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x: x * test_tup[0], test_tup[1:]))\n    \n    \ndef count_elements(test_tup):\n    '''\n    Write a function that takes a tuple of elements (e_1,...,e_{N+1}) and returns an integer value of the number of times that element appears in the tuple.\n    '''\n    return len(set(test_tup))\n",
        "num_ids": 14
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    return tuple([x*test_tup[i+1] for i, x in enumerate(test_tup)]",
        "num_ids": 32
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result = result + (test_tup[i],)\n",
        "num_ids": 37
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # YOUR CODE HERE\n    tup = test_tup\n    for i in range(len(tup)-1):\n        tup[i] = tup[i] * tup[i+1]\n    return tup\n",
        "num_ids": 59
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for index, value in enumerate(test_tup):\n        result.append(value * test_tup[index+1])\n    return result\n    \ndef create_list(test_tuple):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the list is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for index, value in enumerate(test_tuple):\n        result.append(value * test_tuple[index+1])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = test_tup[0]\n    e = test_tup[1:]\n    e_p = []\n    for i in range(n):\n        e_p.append(e[i] * e[i+1])\n    return e_p\n",
        "num_ids": 65
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda tup: tup[0] * tup[1], test_tup))\n    \ndef check_solution(test_tup, sol):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_{N+1}) and a solution and returns True if the solution is a tuple (t_1,...,t_{N+1}) and False if not.\n    '''\n    return tuple(map(lambda tup: tup[0] == sol, test_tup))\n    \ndef test_multiply_elements():\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_{N+1}) and a solution and returns True if the solution is a tuple (t_1,...,t_{N+1}) and False if not.\n    '''\n    print(multiply_elements((1,2,3)))\n    print(check_solution(((1,2,3),3), ((1,2,3),3)))\n    print(multiply_elements((1,2,3)))\n    print(check_solution(((1,2,3),3), ((1,2,3),3)))\n    print(multiply_elements((1,2,3)))\n    print(check_solution(((1,2,3),3), ((1,2,3),3)))\n    \ndef main():\n    test_multiply_elements()\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 167
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1_sum=0\n    lst2_sum=0\n    for i in range(len(lst1)):\n        lst1_sum += lst1[i]\n    for i in range(len(lst2)):\n        lst2_sum += lst2[i]\n    return lst1_sum+lst2_sum\n",
        "num_ids": 90
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    for i in range(len(lst1)):\n        new_lst.append(lst1[i] + lst2[i])\n    return new_lst\n",
        "num_ids": 53
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summ = []\n    for i in range(len(lst1)):\n        summ.append(lst1[i] + lst2[i])\n    return summ\n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1)+sum(lst2)\n",
        "num_ids": 17
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for (x,y) in zip(lst1,lst2)]\n",
        "num_ids": 26
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    temp_lst1 = []\n    temp_lst2 = []\n    \n    for i in lst1:\n        temp_lst1.append(i)\n    for j in lst2:\n        temp_lst2.append(j)\n    \n    result = temp_lst1+temp_lst2\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    ans = 0\n    for i in range(len(lst1)):\n        ans += lst1[i] + lst2[i]\n    return ans\n    \n    \n    \n    ",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1 + lst2)\n",
        "num_ids": 15
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(list(group) for group in groupby(sorted(nums)))\n",
        "num_ids": 23
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list,groupby(sorted(nums))))\n",
        "num_ids": 20
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Your code here\n    temp=[]\n    i=0\n    while i<len(nums):\n        if nums[i]!=nums[i-1]:\n            temp.append(nums[i])\n        i+=1\n    return temp\n",
        "num_ids": 65
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a list of unique elements\n    unique_elements = set(nums)\n",
        "num_ids": 23
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # sort by list\n    nums = sorted(nums)\n    result = []\n",
        "num_ids": 23
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    res = []\n    for e in nums:\n        if e in seen:\n            res.append(e)\n        else:\n            seen.add(e)\n    return res\n    \ndef count_substring(string, sub_string):\n    '''\n    Return number of occurrences of substring in a given string.\n    '''\n    n = 0\n    for i in range(len(string)):\n        if string[i:i+len(sub_string)] == sub_string:\n            n += 1\n    return n\n    \ndef find_non_repeating_characters(string):\n    '''\n    Return the index of the first and last non-repeating character in a given string.\n    '''\n    start_idx = 0\n    end_idx = 0\n    for i in range(len(string)):\n        char = string[i]\n        occurrence = count_substring(string, char)\n        if occurrence == 1:\n            if i < len(string) - 1:\n                if string[i+1] == char:\n                    end_idx += 1\n            if i > 0:\n                if string[i-1] == char:\n                    start_idx += 1\n    return start_idx, end_idx\n",
        "num_ids": 130
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    else:\n        previous = None\n        for current in nums:\n            if previous!= current:\n                yield previous\n                previous = current\n            else:\n                previous = None\n    yield previous\n",
        "num_ids": 65
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    else:\n        dic = {}\n        res = []\n        for i in range(len(nums)):\n            if nums[i] not in dic:\n                dic[nums[i]] = 0\n            else:\n                dic[nums[i]] += 1\n        for key,value in dic.items():\n            if value == 1:\n                res.append(key)\n        return res\n",
        "num_ids": 113
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    curr_list = []\n    curr_idx = 0\n    for i in range(len(nums)):\n        if nums[i] not in curr_list:\n            curr_list.append(nums[i])\n        else:\n            idx = curr_idx\n            while idx < len(nums):\n                if nums[idx] == nums[i]:\n                    curr_list.pop()\n                    idx += 1\n                else:\n                    idx += 1\n            curr_idx = idx\n",
        "num_ids": 136
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return None\n    seen = set()\n    seen_add = seen.add\n    return [x for x in nums if not (x in seen or seen_add(x))]\n",
        "num_ids": 52
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralSurfaceArea = math.pi * r * r\n    lateralSurfaceArea = math.sqrt(lateralSurfaceArea)\n    lateralSurfaceArea = lateralSurfaceArea * h\n    lateralSurfaceArea = math.sqrt(lateralSurfaceArea)\n    return lateralSurfaceArea\ndef lateralSurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralSurfaceArea = math.pi * r * r\n    lateralSurfaceArea = math.sqrt(lateralSurfaceArea)\n    lateralSurfaceArea = lateralSurfaceArea * h\n    lateralSurfaceArea = math.sqrt(lateralSurfaceArea)\n    return lateralSurfaceArea\ndef main():\n    r = float(input('Enter the radius of the cone in meters: '))\n    h = float(input('Enter the height of the cone in meters: '))\n    if r < 0:\n        print('The radius of the cone should be a positive number.')\n        r = float(input('Enter the radius of the cone in meters: '))\n    if h < 0:\n        print('The height of the cone should be a positive number.')\n        h = float(input('Enter the height of the cone in meters: '))\n    lateralSurfaceArea = lateralsurface_cone(r,h)\n    print('The area of the cone is:',lateralSurfaceArea,'meters^2')\nif __name__ == '__main__':\n    main(",
        "num_ids": 258
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #print \"Input: r = \" + str(r) + \", h = \" + str(h)\n    # Establish variables:\n    x = r * math.cos(math.radians(h)) # Using r to get the surface area in x.\n    y = r * math.sin(math.radians(h)) # Using r to get the surface area in y.\n    # Find the surface area of the cone.\n    A = (y**2) - (x**2) # Calculate the surface area.\n    # Return the surface area.\n    return A\n",
        "num_ids": 135
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    c = math.pi * r * r * (h/2)\n    return c\n",
        "num_ids": 23
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralSurface=math.pi*(r**2)*h\n    return lateralSurface\n",
        "num_ids": 25
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # determine area\n    # base-top\n    # convert to meters\n    # then calculate the volume\n    # return the volume\n    # the volume is in cubic meters\n    a = (h * math.sin(math.radians(r)))\n    b = (h * math.cos(math.radians(r)))\n    # perimeter\n    c = (r * 2 * math.tan(math.radians(90)))\n    # area\n    return a*b*c\n",
        "num_ids": 113
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    c1 = -h\n    c2 = r/math.cos(math.radians(90))\n    a1 = math.sqrt((r-c1)*(r-c1)*math.tan(math.radians(90))+math.cos(math.radians(90)))\n    a2 = math.sqrt((r-c2)*(r-c2)*math.tan(math.radians(90))+math.cos(math.radians(90)))\n    return a1+a2\n",
        "num_ids": 123
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r_half = r/2\n    height = math.tan(math.radians(h))\n    width = math.tan(math.radians(h/2))\n    area = (width**2 + height**2 - 2*width*height*math.cos(math.radians(h)))**0.5\n    return (2*r_half**2*height**2*area)/(math.tan(math.radians(h))**2)\n",
        "num_ids": 110
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Write your code here\n    #print(r)\n    #print(h)\n    #final_area=0.5*r*h\n    #print(final_area)\n    r=r*2\n    h=h*2\n    surface_area=2*math.pi*r*h\n    #print(surface_area)\n    return surface_area\n",
        "num_ids": 90
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area_of_cone = 2*r*h\n    print(f\"The lateral surface area of a cone with radius {r} and height {h} is {lateral_area_of_cone}\")\n    return lateral_area_of_cone\n",
        "num_ids": 63
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return h*math.sqrt(r*(r-h)**2 - h*r**2)\n",
        "num_ids": 28
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\"/\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\":\", \":\")\n    text = text.replace(\"!\", \":\")\n    text = text.replace(\"?\", \":\")\n    text = text.replace(\"'\", \":\")\n    text = text.replace(\"@\", \":\")\n    text = text.replace(\"[\", \":\")\n    text = text.replace(\"]\", \":\")\n    text = text.replace(\"{\", \":\")\n    text = text.replace(\"}\", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"\\t\", \":\")\n    text = text.replace(\"\\n\", \":\")\n    text = text.replace(\"\\\"\", \":\")\n    text = text.replace(\"\\\\\", \":\")\n    return text\ndef csv_to_dict(input_file):\n    '''\n    Write a function to parse and convert a CSV file to a dictionary.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Parse the file\n    with open(input_file) as f:\n        reader = csv.reader(f)\n        csv_dict = {row[0]:row[1:] for row in reader}\n    return csv_dict\ndef create_dict(input_file, key_word):\n    '''\n    Create a dictionary from a csv file.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [key_word] + [word for row in csv_dict.values() for word in row]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_lower_case(input_file):\n    '''\n    Given a CSV file, return a dictionary with lowercase keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word.lower() for word in csv_dict.values()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_capitalized(input_file):\n    '''\n    Given a CSV file, return a dictionary with capitalized keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word.capitalize() for word in csv_dict.values()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_non_word(input_file):\n    '''\n    Given a CSV file, return a dictionary with keys that aren't words.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word.lower() for word in csv_dict.values()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_numbers(input_file):\n    '''\n    Given a CSV file, return a dictionary with numbers as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.isnumeric()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_urls(input_file):\n    '''\n    Given a CSV file, return a dictionary with urls as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.find('http') > -1]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_mixed(input_file):\n    '''\n    Given a CSV file, return a dictionary with mixed keys as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.endswith(\".csv\")]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_url_subdomain(input_file):\n    '''\n    Given a CSV file, return a dictionary with subdomain keys as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.endswith(\".csv\")]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_path(input_file):\n    '''\n    Given a CSV file, return a dictionary with path keys as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''",
        "num_ids": 1
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_with_special_char = text.replace(' ',':').replace('.',':').replace(',',':').replace(';',':')\n    text_without_special_char = re.sub(r'\\s+',':',text_with_special_char).replace('\\n','').replace('\\t',' ')\n    return text_without_special_char\n",
        "num_ids": 92
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('(?:(?:\\\\s|,)*)(.)*', r':\\1', text)\n    text = re.sub('(?:(?:\\\\s|,)*)(.)*', r':\\1', text)\n    text = re.sub('(?:(?:\\\\s|,)*)(.)*', r':\\1', text)\n    return text\n",
        "num_ids": 90
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    regex = r\"[\\w\\-_\\.\\s]+\"\n    replacements = [('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s)', ': '), ('(?:\\s",
        "num_ids": 2008
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', '\\n')\n    text = text.replace('.', '\\n')\n    text = text.replace(',', '\\n')\n    text = text.replace('-', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replace('!', '\\n')\n    text = text.replace('?', '\\n')\n    text = text.replace('$', '\\n')\n    text = text.replace('&', '\\n')\n    text = text.replace('*', '\\n')\n    text = text.replace('%', '\\n')\n    text = text.replace('(', '\\n')\n    text = text.replace(')', '\\n')\n    text = text.replace('+', '\\n')\n    text = text.replace('=', '\\n')\n    text = text.replac",
        "num_ids": 2010
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace('-',':')\n    text = text.replace('-',':')\n    text = text.replace('_',':')\n    text = text.replace(':','::')\n    text = text.replace('.','::')\n    text = text.replace('-','::')\n    text = text.replace('_','::')\n    return text\n",
        "num_ids": 114
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    text_list = text.split(' ')\n    new_text = ''\n    for i in range(len(text_list)):\n        if text_list[i].isspace() or text_list[i].startswith('('):\n            new_text += ':'\n        elif text_list[i].endswith(')'):\n            new_text +=''\n        else:\n            new_text += text_list[i]\n    return new_text\ndef replace_specialchar_num(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_list = text.split(' ')\n    new_text = ''\n    for i in range(len(text_list)):\n        if text_list[i].isspace() or text_list[i].startswith('('):\n            new_text += ':'\n        else:\n            if text_list[i].isdigit():\n                new_text +=''\n            else:\n                new_text += text_list[i]\n    return new_text\n",
        "num_ids": 114
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = ''\n    for i in text:\n        if i.isspace():\n            i = ':'\n        if i == '.' or i == ',':\n            i = ':'\n        if i =='':\n            i = ':'\n        if i == '\\t':\n            i = ':'\n        if i =='':\n            i = ':'\n        if i == '\\t':\n            i = ':'\n        result += i\n    return result\n",
        "num_ids": 112
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    text = text.replace('.',':')\n    text = text.replace('-',' ')\n    text = text.replace(',',' ')\n    text = text.replace('!',' ')\n    text = text.replace('?',' ')\n    text = text.replace('.',':')\n    text = text.replace('\\n',' ')\n    text = text.replace('\\t',' ')\n    text = text.replace('\\r',' ')\n    text = text.replace('\\v',' ')\n    return text\n",
        "num_ids": 175
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('\\n',' ')\n    text = text.replace('\\t',' ')\n    text = text.replace('\\n\\n',' ')\n    text = text.replace('\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\n\\n',' ')\n    text = text.replace('\\n\\n\\",
        "num_ids": 2008
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    m = len(A)\n    if m == 0:\n        return None\n    if m == 1:\n        return 0 if A[0] == x else -1\n",
        "num_ids": 42
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n    return -1\n",
        "num_ids": 92
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    i = 0\n    while i < n:\n        if A[i] == x:\n            return i\n        else:\n            i = i + 1\n    return -1\n",
        "num_ids": 52
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = 0\n    while i < len(A):\n        if A[i] == x:\n            return j\n        j = j+1\n        i = i + 1\n",
        "num_ids": 49
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    print(\"\\nfind_first_occurrence\")\n    # Base case\n    if A[0] == x:\n        return 0\n    # If the array is empty\n    if A[0] > x:\n        return len(A)\n    # If the array is not sorted\n    if A[0] < x:\n        return len(A) - 1\n",
        "num_ids": 87
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = len(A)\n    if l==0:\n        return -1\n    else:\n        mid = l//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            return find_first_occurrence(A[mid+1:], x)\n        else:\n            return find_first_occurrence(A[:mid], x)\n",
        "num_ids": 98
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    x_position = A.index(x)\n    x_position = x_position + 1 if A[x_position] == x else x_position\n    return x_position\n",
        "num_ids": 44
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    x_index = -1\n    for i in range(len(A)):\n        if A[i] == x:\n            x_index = i\n            break\n    return x_index\n",
        "num_ids": 48
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n",
        "num_ids": 28
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    min_idx = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            break\n    for i in range(len(A)):\n        if A[i] == x:\n            min_idx = i\n    return min_idx\n",
        "num_ids": 72
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    current = arr[0]\n    res = arr[0]\n    for i in range(1, len(arr)):\n        current = current*arr[i]\n        res = res + current\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    n = len(arr)\n    for i in range(0, n):\n        #for j in range(0, n-i-1):\n        #    print(arr[i:i+j+1])\n        for j in range(0,n-i-1):\n            total += arr[i+j]*arr[i+j+1]\n    return total",
        "num_ids": 95
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    # if list length = 0 => return result\n    if len(arr) == 0:\n        return result\n    # if arr length = 1 => append 1 to result\n    elif len(arr) == 1:\n        result = arr[0]\n        return result\n    # find product of subarrays from subarrays and add to result\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i!= j:\n                result += arr[i] * arr[j]\n    return result\n",
        "num_ids": 138
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Code here\n",
        "num_ids": 7
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr.sort()\n    print(arr)\n    temp = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            print(arr[i], arr[j], arr[i] * arr[j])\n            temp += arr[i] * arr[j]\n            print(temp)\n    return temp\n",
        "num_ids": 93
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    count = 1\n    for i in range(len(arr)-1):\n        count = count*arr[i]\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Declare empty list\n    l = []\n    \n    # Create a for-loop to loop through the list of integers\n    #     - each iteration adds one element of each sublist\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if(i > 0):\n                if(arr[i][j] < arr[i-1][j]):\n                    l.append(arr[i][j])\n            else:\n                l.append(arr[i][j])\n                \n    # Create an empty array with the same length as arr\n    sum_of_all_subarrays = []\n    \n    # Loop through each subarray of the given list\n    # Sum of all elements of subarray is product of all possible subarrays\n    for i in range(len(l)):\n        temp_sum = 0\n        # For each element in the subarray add one to the total\n        for j in range(i, len(l)):\n            temp_sum += l[j] * (i-j)\n            # Add all elements to the sum_of_all_subarrays\n            sum_of_all_subarrays.append(temp_sum)\n    return sum(sum_of_all_subarrays)\n",
        "num_ids": 303
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = 0\n    p = 1\n    for i in range(len(arr)):\n        p = arr[i] * p\n        ans += p\n    return ans\n",
        "num_ids": 43
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # your code here\n    n = len(arr)\n    if n==0:\n        return 0\n    total = 0\n    for i in range(0,n):\n        total = total + sum(arr[i:n])\n    return total\n",
        "num_ids": 61
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int('{}{}{}'.format(n, '1' if n % 2 == 0 else '0', '1' if n % 2 == 1 else '0'))\n",
        "num_ids": 43
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & 0xF\n    if n == 0xF:\n        n = 1\n    else:\n        n = 0\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)\n    if n[0] == '1':\n        n = n[2:]\n    elif n[0] == '0':\n        n = n[2:] + '1'\n    if n[-1] == '0':\n        n = n[:-1] + '0'\n    return n\n",
        "num_ids": 82
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    res = bin(n).replace('0b', '')\n    # res = bin(n)[2:]\n    if res[-1] == '1':\n        res = res[:-1] + '0'\n    else:\n        res = res[:-1] + '1'\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    tmp = bin(n)[2:]\n    tmp = tmp.zfill(len(tmp))\n    \n    return tmp[0:len(tmp)-1] + tmp[len(tmp)-1:]\n    \nprint(set_middle_bits(9))\nprint(set_middle_bits(10))\nprint(set_middle_bits(100))\n",
        "num_ids": 84
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & (n - 1)\n",
        "num_ids": 12
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    output = ''\n    n = bin(n)[2:]\n    start, end = 1, 0\n    for i in range(len(n)):\n        if n[i] == '1':\n            start = start + 1\n        if n[i] == '0':\n            end = end + 1\n        if start == 1 and end == 1:\n            break\n    return start, end\n",
        "num_ids": 94
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    new_val = bin(n) # format to 2's complement, B's\n    \n    if len(new_val) > 2:\n        new_val = new_val[2:]\n    \n    if len(new_val) < 2:\n        new_val = '0' * (2 - len(new_val)) + new_val\n    \n    \n    \n    return int(new_val, 2)\n    \n",
        "num_ids": 103
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return n\n    if n == 1:\n        return 0\n    temp = n\n    # print(temp)\n    temp_1 = n\n    temp_2 = n-1\n    # print(temp_1,temp_2)\n    # print(n,n-1)\n    # print(n,temp_2)\n    # print(temp_1,temp_2)\n    while (n>1):\n        # print(temp)\n        if n%2==0:\n            temp = temp_2\n        else:\n            temp = temp_1\n        # print(temp)\n        n = n/2\n        temp_2 = temp_2 -1\n        temp_1 = temp_1 -1\n        # print(temp_1,temp_2)\n        # print(n,n-1)\n        # print(n,temp_2)\n    # print(n)\n    # print(n,temp_2)\n    # print(temp_1,temp_2)\n    return n\n",
        "num_ids": 248
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Write your code here.\n    if (n & (n-1) == n):\n        n = n & ~1\n    else:\n        n = n | 1\n    if n > (2**31-1):\n        n = n - (2**31)\n    return n\n",
        "num_ids": 70
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    j = 0\n    for i in range(n-1, -1, -1):\n        if a[i] > x:\n            j = i\n            break\n    return j\n",
        "num_ids": 54
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    low = 0\n    high = len(a)-1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return low\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    low = 0\n    high = len(a)-1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return low\n",
        "num_ids": 72
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l, r = 0, len(a) - 1\n    # Your code here\n    return right_insertion(a, x, l, r)\n",
        "num_ids": 38
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Insert into left_list\n    left = bisect.bisect_left(a, x, lo=0, hi=len(a))\n    \n    # If found the first element of a list, return this\n    if left == 0:\n        return left\n",
        "num_ids": 63
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=bisect.bisect_left(a,x)\n    if i==len(a):\n        return False\n    else:\n        return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=bisect.bisect_right(a,x)\n    if i==len(a):\n        return False\n    else:\n        return i\ndef delete_min(a):\n    '''\n    Write a function to delete the minimum value in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    while(a[i]>a[i+1]):\n        i+=1\n    if i==len(a)-1:\n        return None\n    else:\n        return a[i+1]\ndef delete_max(a):\n    '''\n    Write a function to delete the maximum value in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    while(a[i]<a[i+1]):\n        i+=1\n    if i==len(a)-1:\n        return None\n    else:\n        return a[i]\ndef find_min(a):\n    '''\n    Write a function to get the minimum value in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    while(a[i]>a[i+1]):\n        i+=1\n    if i==len(a)-1:\n        return None\n    else:\n        return a[i+1]\ndef find_max(a):\n    '''\n    Write a function to get the maximum value in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    while(a[i]<a[i+1]):\n        i+=1\n    if i==len(a)-1:\n        return None\n    else:\n        return a[i]\ndef linear_search(a, x):\n    '''\n    Write a function to search for an element in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    while(a[i]!=x):\n        i+=1\n    if(a[i]==x):\n        return i\n    else:\n        return None\ndef binary_search(a, x):\n    '''\n    Write a function to search for an element in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    while(a[i]!=x):\n        i+=1\n    if(a[i]==x):\n        return i\n    else:\n        return None\ndef ceiling_search(a, x):\n    '''\n    Write a function to find the index of the last element in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    while(a[i]!=x):\n        i+=1\n    if(a[i]==x):\n        return i\n    else:\n        return None\ndef floor_search(a, x):\n    '''\n    Write a function to find the index of the first element in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    while(a[i]!=x):\n        i+=1\n    if(a[i]==x):\n        return i\n    else:\n        return None\ndef merge_sorted(a, b):\n    '''\n    Write a function to merge a sorted array into b, such that the new array is monotone increasing. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    c=[]\n    while(len(a)!=0):\n        c.append(a.pop(0))\n    while(len(b)!=0):\n        c.append(b.pop(0))\n    return c\ndef merge_left(a, b):\n    '''\n    Write a function to merge a sorted array into b, such that the new array is monotone increasing. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    c=[]\n    i=0\n    while(len(a)>0):\n        c.append(a.pop(0))\n        i+=1\n    while(len(b)>0):\n        c.append(b.pop(0))\n        i+=1\n    return c\ndef merge_right(a, b):\n    '''\n    Write a function to merge a sorted array into b, such that the new array is monotone increasing. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    c=[]\n    i=0\n    while(len(a)>0):\n        c.append(a.pop(0))\n        i+=1\n    while(len(b)>0):\n        c.append(b.pop(0))\n        i+=1\n    return c\ndef find_median(a):\n    '''\n    Write a function to find the median of a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)==0:\n        return None\n    elif len(a)==1:\n        return a[0]\n    else:\n        i=len(a)//2\n        if len(a)%2==0:\n            return (a[i]+(a[i-1]))/2\n        else:\n            return (a[i]+(a[i+1]))/2\ndef median(a):\n    '''\n    Write a function to find the median of a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)==0:\n        return None\n    elif len(a)==1:\n        return a[0]\n    else:\n        return (a[len(a)//2]+(a[len(a)//2-1]))/2\ndef repeat_last(a):\n    '''\n    Write a function to repeat a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)==0:\n        return None\n    elif len(a)==1:\n        return a[",
        "num_ids": 31
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if i!= len(a) else len(a)\n",
        "num_ids": 35
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    c = bisect.bisect_left(a, x)\n    if c == 0:\n        return a.insert(c, x)\n    return a[:c-1] + [x] + a[c:]\n",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    return l if l < len(a) else 0\n",
        "num_ids": 31
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'aeiouAEIOU'\n    if re.search(vowels, string): \n        return True\n    else: \n        return False\n",
        "num_ids": 43
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in \"AEIOU\" and string[1] in \"AEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        else:\n            return False\ndef is_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant or not using regex.\n    '''\n    for x in string:\n        if x in \"abcdefghijklmnopqrstuvwxyz\":\n            return True\n        else:\n            return False\ndef check_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant or not using regex.\n    '''\n    for x in string:\n        if x in \"abcdefghijklmnopqrstuvwxyz\":\n            return True\n        else:\n            return False\ndef is_vowel_vowel(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel and vowel and consonant or not using regex.\n    '''\n    for x in string:\n        if x in \"aeiouAEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef is_consonant_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and consonant and vowel or not using regex.\n    '''\n    for x in string:\n        if x in \"abcdefghijklmnopqrstuvwxyz\":\n            return True\n        elif x in \"AEIOU\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef check_consonant_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and consonant and vowel or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef is_vowel_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel and consonant or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef is_consonant_vowel(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and vowel or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef is_consonant_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and consonant and vowel or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef is_vowel_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel and consonant or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef is_consonant_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and consonant and vowel or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef check_vowel(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef is_consonant_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and consonant or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef check_consonant_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and consonant or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef is_consonant_vowel(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and vowel or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\ndef is_consonant_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and consonant or not using regex.\n    '''\n    for x in string:\n        if x in \"AEIOU\":\n            return True\n        elif x in \"abcdefghijklmnopqrstuvwxyz\":\n            if string.index(x) + 1 == len(string):\n                return True\n            else:\n                return False\n",
        "num_ids": 73
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = string.replace(\" \", \"\")\n    if len(string)>1:\n        if string[0] in \"aeiouAEIOU\":\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if len(string) < 2:\n        return False\n    if string[0] not in \"aeiouAEIOU\":\n        return False\n    if not(re.search(regex, string[1:])):\n        return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    for i in string: \n        if i in vowels: \n            return True\n    return False\ndef check_str2(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    for i in string: \n        if i in vowels: \n            if not re.search(vowels, string): \n                return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    m = re.search(regex, string)\n    if m is None:\n        return False\n    else:\n        return True\n",
        "num_ids": 34
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)):\n        print('Vowel')\n    else:\n        print('Not a vowel')\n",
        "num_ids": 36
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)\n    \nprint(geometric_sum(5))\n",
        "num_ids": 42
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 42
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum(n):\n        if n == 1:\n            return n\n        return n * geometric_sum(n-1)\n",
        "num_ids": 35
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return geometric_sum(n-1) + geometric_sum(n-2)\n",
        "num_ids": 61
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    sum = n * (n + 1) / 2\n    print(sum)\n",
        "num_ids": 21
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Your code here\n    #def GeomSum(n):\n    #    if n == 1:\n    #        return 1\n    #    else:\n    #        return GeomSum(n-1) + GeomSum(n-2)\n    #print(GeomSum(n))\n    #return GeomSum(n)\n    def GeomSum(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return GeomSum(n-1) + GeomSum(n-2)\n",
        "num_ids": 138
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = []\n    \n    for i in range(n):\n        l.append(i)\n    \n    l.sort()\n",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    A = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                A[i][j] = A[i][j] + A[j][k]\n    for i in range(n):\n        for j in range(n):\n            if A[i][j] < 10**(-6):\n                A[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if A[i][j] < 10**(-6):\n                A[i][j] = 0\n    if A[0][0] == A[0][1] and A[0][0] == A[0][2] and A[0][0] == A[0][3] and A[0][0] == A[0][4]:\n        A[0][0] = 0\n    if A[n-1][n-1] == A[n-1][n-2] and A[n-1][n-1] == A[n-1][n-3] and A[n-1][n-1] == A[n-1][n-4]:\n        A[n-1][n-1] = 0\n    if A[0][0] == A[0][1] and A[0][0] == A[0][2] and A[0][0] == A[0][3] and A[0][0] == A[0][4]:\n        A[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            if A[i][j] > A[i][j-1] and A[i][j] > A[i][j+1] and A[i][j] > A[i-1][j] and A[i][j] > A[i+1][j]:\n                A[i][j] = A[i][j] * 10\n    return A\n",
        "num_ids": 984
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    d = {3: 1, 5: 2, 7: 3, 9: 4, 11: 5, 13: 6, 17: 7, 19: 8, 21: 9, 23: 10, 29: 11, 31: 12, 37: 13, 41: 14, 43: 15, 47: 16, 53: 17, 59: 18, 61: 19, 67: 20, 71: 21, 73: 22, 79: 23, 83: 24, 89: 25, 97: 26, 101: 27, 103: 28, 107: 29, 109: 30, 111: 31, 113: 32}\n    index = 0\n    for i in range(n + 1): \n        a = math.floor(i / 10) \n        b = math.floor((i % 10) / 5) \n        c = math.floor((i % 10) / 3) \n        if (a, b, c) in d.values(): \n            index = d[a, b, c]\n    return index \n",
        "num_ids": 230
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = [] \n    for i in range(n, 0, -1): \n        l.append(i) \n    return l.index(min(l)) \n",
        "num_ids": 44
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Count the number of digits\n    # n = int(math.ceil(math.log10(n)))\n    # binary search\n    index = 0\n    while (n!= 0):\n        index = index + 1\n        n = n // 10\n    return index\n",
        "num_ids": 66
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    largest_index = 0\n    largest_number = 0\n    smallest_number = 1\n",
        "num_ids": 26
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    c = 0\n    while n > 0: \n        d = n % 10\n        n = math.floor(n/10) \n        c += 1 \n    return c \n",
        "num_ids": 46
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    print('\\n*** Finding index of the smallest triangular number with n digits ***\\n')\n    for i in range(n):\n        print('* '*i, end='')\n        for j in range(i+1):\n            print(' ', end='')\n        print('*')\n    index = input('\\nEnter the index: ')\n    if int(index) > n:\n        print('Invalid index!')\n    else:\n        return int(index)\n",
        "num_ids": 114
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index=math.floor(math.log(n,10)) \n    return index\n    \ndef find_Index_2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index=math.floor(math.log(n,2))\n    return index\n    \ndef solve(n):\n    '''\n    Write a python function to solve the n-th triangular number. \n    https://www.geeksforgeeks.org/solve-the-n-th-triangular-number-n-n-digits-/\n    '''\n    for i in range(1,n+1):\n        index1=find_Index(i)\n        index2=find_Index_2(i)\n        triangular=i*i\n        if index1<index2:\n            n1=i\n            n2=index1\n            n3=index2\n        else:\n            n1=index2\n            n2=index1\n            n3=i\n        for j in range(n1,n3+1):\n            triangular+=j*j\n            if i%j==0:\n                break\n        print(f\"{i} = {triangular}\")\n    ",
        "num_ids": 151
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    keys = list(test_tup)\n    return {keys[i]: keys[i+1] for i in range(0, len(keys), 2)}\n",
        "num_ids": 40
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict([(test_tup[i],test_tup[i + 1]) for i in range(len(test_tup) - 1)])\n",
        "num_ids": 40
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    adjacency_dict = {}\n    for i in range(0, len(test_tup)):\n        adjacency_dict[test_tup[i][0]] = test_tup[i][1]\n    return adjacency_dict\n",
        "num_ids": 63
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for index, val in enumerate(test_tup):\n        result_dict[val] = test_tup[index+1]\n    return result_dict\n",
        "num_ids": 48
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    def tuple_to_dict_first(test_tup):\n        '''\n        Convert the tuple to a key-value dictionary.\n        '''\n        keys = []\n        vals = []\n        for i in range(len(test_tup)):\n            if test_tup[i][0] == 'Key':\n                keys.append(test_tup[i][1])\n            else:\n                vals.append(test_tup[i][1])\n        return keys, vals\n",
        "num_ids": 84
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    output = {}\n    for i in range(len(test_tup)):\n        output[test_tup[i]] = i\n    return output\n    \ndef read_from_file(filename):\n    '''\n    Reads a file and converts the tuple to a key-value dictionary using adjacent elements. \n    '''\n    with open(filename) as f:\n        for line in f:\n            tup = tuple(map(int, line.split(',')))\n            yield tuple_to_dict(tup)\n",
        "num_ids": 49
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                dict[test_tup[i]] = test_tup[j]\n    return dict\n",
        "num_ids": 78
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    keys = list(test_tup[0])\n    for item in range(1,len(test_tup[0])):\n        keys.append(test_tup[item][0])\n    return keys\n",
        "num_ids": 53
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict1={}\n    for i in range(0,len(test_tup)-1):\n        dict1[test_tup[i]]=test_tup[i+1]\n    return dict1\n",
        "num_ids": 53
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Dictionaries are hashable, so can only contain immutable values\n    dictionary = {}\n    for key, val in test_tup:\n        dictionary[key] = val\n    return dictionary\n",
        "num_ids": 49
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==len(s)",
        "num_ids": 15
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s_list = list(s)\n    for character in s_list :\n        if character not in same_characters :\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    temp=[]\n    for i in s :\n        if i in temp :\n            return False\n        temp.append(i)\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if type(s) == list:\n        for c in s:\n            if c!='' and c!= '.' and c!= '?':\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    elif s[0] == s[-1] :\n        return all_Characters_Same(s[1:])\n    else :\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    if s[0]!= s[-1]:\n        return False\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s[0] == s[-1]",
        "num_ids": 14
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.replace('\\n','').replace('\\r','').replace('\\t','').replace(' ','')==s.replace('\\n','').replace('\\r','').replace('\\t','').replace(' ','')\n",
        "num_ids": 62
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if s.count(i) > 1 :\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    res = 0\n    for i in s:\n        if i!= s[0]:\n            res += 1\n    if res == len(s):\n        return 1\n    else:\n        return 0\n",
        "num_ids": 50
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    # if the side of the tetrahedron is 1\n    if side == 1:\n        return 0\n    # if the side of the tetrahedron is 2\n    elif side == 2:\n        area = 0.25*side*side\n    elif side == 3:\n        area = 0.5*side*side\n    elif side == 4:\n        area = side**2\n    return area\n",
        "num_ids": 103
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1.5*math.pi\n    elif side == 2:\n        return math.sqrt(3)*math.pi\n    elif side == 3:\n        return 2*math.sqrt(5)*math.pi\n    else:\n        return 0\n",
        "num_ids": 85
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        side_count = 4\n    elif side == 2:\n        side_count = 6\n    else:\n        side_count = 8\n    side_count = side_count - 1\n    side_count = side_count % 3\n    area = side_count*side_count\n    return area\n",
        "num_ids": 79
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    x = side/2\n    y = side/3\n    z = side/4\n    a = math.sqrt(x**2 + y**2 + z**2)\n    return a\n",
        "num_ids": 48
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side*side*side\n    b = side**2*side**2\n    c = side**2*side\n    d = 2*side\n    return b/3+2*c/3\ndef area_sphere(radius):\n    '''\n    Write a function to caluculate the area of a sphere with radius\n    '''\n    a = 4/3*(math.pi)*radius\n    return a\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron with side\n    '''\n    a = side**3\n    return a\ndef volume_sphere(radius):\n    '''\n    Write a function to caluculate the volume of a sphere with radius\n    '''\n    a = 4/3*(math.pi)*(radius**3)\n    return a\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube with side\n    '''\n    a = 4/3*math.pi*side**3\n    return a\ndef volume_cube_2(side):\n    '''\n    Write a function to calculate the volume of a cube with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cylinder(side):\n    '''\n    Write a function to calculate the volume of a cylinder with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cylinder_2(side):\n    '''\n    Write a function to calculate the volume of a cylinder with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cylinder_3(side):\n    '''\n    Write a function to calculate the volume of a cylinder with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cone(side):\n    '''\n    Write a function to calculate the volume of a cone with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cone_2(side):\n    '''\n    Write a function to calculate the volume of a cone with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cone_3(side):\n    '''\n    Write a function to calculate the volume of a cone with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_polygon(side):\n    '''\n    Write a function to calculate the volume of a polygon with side\n    '''\n    a = 4/3*math.pi*side**3\n    return a\ndef volume_plane(side):\n    '''\n    Write a function to calculate the volume of a plane with side\n    '''\n    a = 4/3*side\n    return a\ndef volume_plane_2(side):\n    '''\n    Write a function to calculate the volume of a plane with side\n    '''\n    a = 4/3*side\n    return a\ndef volume_plane_3(side):\n    '''\n    Write a function to calculate the volume of a plane with side\n    '''\n    a = 4/3*side\n    return a\ndef volume_sphere(side):\n    '''\n    Write a function to calculate the volume of a sphere with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_sphere_2(side):\n    '''\n    Write a function to calculate the volume of a sphere with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_sphere_3(side):\n    '''\n    Write a function to calculate the volume of a sphere with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cylinder(side):\n    '''\n    Write a function to calculate the volume of a cylinder with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cylinder_2(side):\n    '''\n    Write a function to calculate the volume of a cylinder with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cylinder_3(side):\n    '''\n    Write a function to calculate the volume of a cylinder with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cone(side):\n    '''\n    Write a function to calculate the volume of a cone with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cone_2(side):\n    '''\n    Write a function to calculate the volume of a cone with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cone_3(side):\n    '''\n    Write a function to calculate the volume of a cone with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_polygon(side):\n    '''\n    Write a function to calculate the volume of a polygon with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_plane(side):\n    '''\n    Write a function to calculate the volume of a plane with side\n    '''\n    a = 4/3*side\n    return a\ndef volume_plane_2(side):\n    '''\n    Write a function to calculate the volume of a plane with side\n    '''\n    a = 4/3*side\n    return a\ndef volume_plane_3(side):\n    '''\n    Write a function to calculate the volume of a plane with side\n    '''\n    a = 4/3*side\n    return a\ndef volume_sphere(side):\n    '''\n    Write a function to calculate the volume of a sphere with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_sphere_2(side):\n    '''\n    Write a function to calculate the volume of a sphere with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_sphere_3(side):\n    '''\n    Write a function to calculate the volume of a sphere with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cylinder(side):\n    '''\n    Write a function to calculate the volume of a cylinder with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cylinder_2(side):\n    '''\n    Write a function to calculate the volume of a cylinder with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cylinder_3(side):\n    '''\n    Write a function to calculate the volume of a cylinder with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cone(side):\n    '''\n    Write a function to calculate the volume of a cone with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cone_2(side):\n    '''\n    Write a function to calculate the volume of a cone with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_cone_3(side):\n    '''\n    Write a function to calculate the volume of a cone with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_polygon(side):\n    '''\n    Write a function to calculate the volume of a polygon with side\n    '''\n    a = 4/3*(math.pi)*side**3\n    return a\ndef volume_plane(side):\n    '''\n    Write a function to calculate the volume of a plane with side\n    '''\n    a = 4/",
        "num_ids": 7
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == \"infinity\":\n        return 0.0\n    if side == \"neginfinity\":\n        return -0.0\n    if side == \"teta_1\":\n        return math.sqrt(6)/2.0\n    if side == \"teta_2\":\n        return math.sqrt(3)/2.0\n    if side == \"teta_3\":\n        return math.sqrt(2)/2.0\n    if side == \"teta_4\":\n        return math.sqrt(1)/2.0\n    if side == \"teta_5\":\n        return math.sqrt(0.5)/2.0\n    if side == \"teta_6\":\n        return math.sqrt(0.25)/2.0\n    if side == \"teta_7\":\n        return math.sqrt(0.125)/2.0\n    if side == \"teta_8\":\n        return math.sqrt(0.0625)/2.0\n    if side == \"teta_9\":\n        return math.sqrt(0.03125)/2.0\n    if side == \"teta_10\":\n        return math.sqrt(0.05)/2.0\n    if side == \"teta_11\":\n        return math.sqrt(0.1)/2.0\n    if side == \"teta_12\":\n        return math.sqrt(0.0625)/2.0\n    if side == \"teta_13\":\n        return math.sqrt(0.125)/2.0\n    if side == \"teta_14\":\n        return math.sqrt(0.1875)/2.0\n    if side == \"teta_15\":\n        return math.sqrt(0.25)/2.0\n    if side == \"teta_16\":\n        return math.sqrt(0.3125)/2.0\n    if side == \"teta_17\":\n        return math.sqrt(0.3525)/2.0\n    if side == \"teta_18\":\n        return math.sqrt(0.4125)/2.0\n    if side == \"teta_19\":\n        return math.sqrt(0.46875)/2.0\n    if side == \"teta_20\":\n        return math.sqrt(0.53125)/2.0\n    if side == \"teta_21\":\n        return math.sqrt(0.625)/2.0\n    if side == \"teta_22\":\n        return math.sqrt(0.65625)/2.0\n    if side == \"teta_23\":\n        return math.sqrt(0.75)/2.0\n    if side == \"teta_24\":\n        return math.sqrt(0.875)/2.0\n    if side == \"teta_25\":\n        return math.sqrt(1.0)/2.0\n    if side == \"teta_26\":\n        return math.sqrt(1.25)/2.0\n    if side == \"teta_27\":\n        return math.sqrt(1.5)/2.0\n    if side == \"teta_28\":\n        return math.sqrt(1.75)/2.0\n    if side == \"teta_29\":\n        return math.sqrt(2.0)/2.0\n    if side == \"teta_30\":\n        return math.sqrt(2.25)/2.0\n    if side == \"teta_31\":\n        return math.sqrt(2.5)/2.0\n    if side == \"teta_32\":\n        return math.sqrt(2.75)/2.0\n    if side == \"teta_33\":\n        return math.sqrt(3.0)/2.0\n    if side == \"teta_34\":\n        return math.sqrt(3.25)/2.0\n    if side == \"teta_35\":\n        return math.sqrt(3.5)/2.0\n    if side == \"teta_36\":\n        return math.sqrt(3.75)/2.0\n    if side == \"teta_37\":\n        return math.sqrt(4.0)/2.0\n    if side == \"teta_38\":\n        return math.sqrt(4.25)/2.0\n    if side == \"teta_39\":\n        return math.sqrt(4.5)/2.0\n    if side == \"teta_40\":\n        return math.sqrt(4.75)/2.0\n    if side == \"teta_41\":\n        return math.sqrt(5.0)/2.0\n    if side == \"teta_42\":\n        return math.sqrt(5.25)/2.0\n    if side == \"teta_43\":\n        return math.sqrt(5.5)/2.0\n    if side == \"teta_44\":\n        return math.sqrt(5.75)/2.0\n    if side == \"teta_45\":\n        return math.sqrt(6.0)/2.0\n    if side == \"teta_46\":\n        return math.sqrt(6.25)/2.0\n    if side == \"teta_47\":\n        return math.sqrt(6.5)/2.0\n    if side == \"teta_48\":\n        return math.sqrt(6.75)/2.0\n    if side == \"teta_49\":\n        return math.sqrt(7.0)/2.0\n    if side == \"teta_50\":\n        return math.sqrt(7.25)/2.0\n    if side == \"teta_51\":\n        return math.sqrt(7.5)/2.0\n    if side == \"teta_52\":\n        return math.sqrt(7.75)/2.0\n    if side == \"teta_53\":\n        return math.sqrt(8.0)/2.0\n    if side == \"teta_54\":\n        return math.sqrt(8.25)/2.0\n    if side == \"teta_55\":\n        return math.sqrt(8.5)/2.0\n    if side == \"teta_56\":\n        return math.sqrt(8.75)/2.0\n    if side == \"teta_57\":\n        return math.sqrt(9.0)/2.0\n    if side == \"teta_58\":\n        return math.sqrt(9.25)/2.0\n    if side == \"teta_59\":\n        return math.sqrt(9.5)/2.0\n    if side == \"teta_60\":\n        return math.sqrt(9.75)/2.0\n    if side == \"teta_61\":\n        return math.sqrt(10.0)/2.0\n    if side == \"teta_62\":\n        return math.sqrt(10.25)/2.0\n    if side == \"teta_63\":\n        return math.sqrt(10.5)/2.0\n    if side == \"teta_64\":\n        return math.sqrt(10.75)/2.0\n    if side == \"teta_65\":\n        return math.sqrt(11.0)/2.0\n    if side == \"teta_66\":\n        return math.sqrt(11.25)/2.0\n    if side == \"teta_67\":\n        return math.sqrt(11.5)/2.0\n    if side == \"teta_68\":\n        return math.sqrt(11.75)/2.0\n    if side == \"teta_69\":\n        return math.sqrt(12.0)/2.0\n    if side == \"teta_70\":\n        return math.sqrt(12.25)/2.0\n    if side == \"teta_71\":\n        return math.sqrt(12.5)/2.0\n    if side == \"teta_72\":\n        return math.sqrt(12.75)/2.0\n    if side == \"teta_73\":\n        return math.sqrt(13.0)/2.0\n    if side == \"teta_74\":\n        return math.sqrt(13.25)/2.0\n    if side == \"teta_75\":\n        return math.sqrt(13.5)/2.0\n    if side == \"teta_76\":\n        return math.sqrt(13.75)/",
        "num_ids": 2009
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == \"Q\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"C\":\n        return 2 * math.pi * (1 / 3)\n    elif side == \"D\":\n        return 1.5 * math.pi * (1 / 3)\n    else:\n        print(\"Incorrect input.\")\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    if side == \"A\":\n        return 1.5 * math.pi * (1 / 3)\n    elif side == \"B\":\n        return 2.5 * math.pi * (1 / 3)\n    elif side == \"C\":\n        return 3.0 * math.pi * (1 / 3)\n    elif side == \"D\":\n        return 3.5 * math.pi * (1 / 3)\n    elif side == \"E\":\n        return 5.0 * math.pi * (1 / 3)\n    elif side == \"F\":\n        return 7.0 * math.pi * (1 / 3)\n    elif side == \"G\":\n        return 9.0 * math.pi * (1 / 3)\n    elif side == \"H\":\n        return 11.0 * math.pi * (1 / 3)\n    elif side == \"I\":\n        return 13.0 * math.pi * (1 / 3)\n    else:\n        print(\"Incorrect input.\")\ndef area_cylinder(side):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    if side == \"A\":\n        return 2.0 * math.pi * (1 / 3)\n    elif side == \"B\":\n        return math.pi * (1 / 3)\n    elif side == \"C\":\n        return 2.0 * math.pi * (1 / 3)\n    elif side == \"D\":\n        return math.pi * (1 / 3)\n    elif side == \"E\":\n        return 3.0 * math.pi * (1 / 3)\n    elif side == \"F\":\n        return 2.0 * math.pi * (1 / 3)\n    elif side == \"G\":\n        return 4.0 * math.pi * (1 / 3)\n    elif side == \"H\":\n        return 6.0 * math.pi * (1 / 3)\n    elif side == \"I\":\n        return 10.0 * math.pi * (1 / 3)\n    elif side == \"J\":\n        return 9.0 * math.pi * (1 / 3)\n    elif side == \"K\":\n        return 5.0 * math.pi * (1 / 3)\n    elif side == \"L\":\n        return 7.0 * math.pi * (1 / 3)\n    else:\n        print(\"Incorrect input.\")\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return (3.14 * radius * radius)\ndef area_convex_poly(side):\n    '''\n    Write a function to caluclate the area of a convex polygon.\n    '''\n    if side == \"Q\":\n        return (1 + math.sqrt(5)) * math.pi * (3 ** 0.5)\n    elif side == \"C\":\n        return 1.0 + math.sqrt(3) * math.pi * (3 ** 0.5)\n    elif side == \"D\":\n        return math.pi * (3 ** 0.5)\n    elif side == \"E\":\n        return 2.0 * math.pi * (3 ** 0.5)\n    elif side == \"F\":\n        return 1.0 + math.sqrt(3) * math.pi * (3 ** 0.5)\n    elif side == \"G\":\n        return math.pi * (3 ** 0.5)\n    elif side == \"H\":\n        return 2.0 * math.pi * (3 ** 0.5)\n    elif side == \"I\":\n        return 4.0 * math.pi * (3 ** 0.5)\n    elif side == \"J\":\n        return 4.0 * math.pi * (3 ** 0.5)\n    else:\n        print(\"Incorrect input.\")\ndef area_trisurface(side):\n    '''\n    Write a function to caluclate the area of a trisurface.\n    '''\n    if side == \"Q\":\n        return 0.25 * math.pi * (3 ** 0.5)\n    elif side == \"C\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"D\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"E\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"F\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"G\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"H\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"I\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"J\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"K\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"L\":\n        return 0.25 * math.pi * (3 ** 0.5)\n    else:\n        print(\"Incorrect input.\")\ndef area_quadrilateral(side):\n    '''\n    Write a function to caluclate the area of a quadrilateral triangle.\n    '''\n    if side == \"Q\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"C\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"D\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"E\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"F\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"G\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"H\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"I\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"J\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"K\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"L\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    else:\n        print(\"Incorrect input.\")\ndef area_rectangle(side):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    if side == \"A\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"B\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"C\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"D\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"E\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"F\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"G\":\n        return 1.0 * math.pi * (3 ** 0.5)\n    elif side == \"H\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == \"I\":\n        return 0.5 * math.pi * (3 ** 0.5)\n    elif side == ",
        "num_ids": 250
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = math.sqrt(side/3)\n    return a\n",
        "num_ids": 19
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == \"X\":\n        return 4*math.pi*(math.sqrt(3)/6)\n    elif side == \"Y\":\n        return 4*math.pi*(math.sqrt(3)/6)\n    elif side == \"Z\":\n        return 4*math.pi*(math.sqrt(3)/6)\n    else:\n        return 4*math.pi*(math.sqrt(3)/6)\n",
        "num_ids": 108
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side*side*math.sqrt(3.0)\n",
        "num_ids": 18
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Code here\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.append(list[i+m])\n    new_list.reverse()\n    list = new_list\n    return list\n",
        "num_ids": 71
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    i = 0\n    while(i < len(list)):\n        list[i], list[len(list)-1-i] = list[len(list)-1-i], list[i]\n        i += 1\n    return list\n",
        "num_ids": 58
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return rotate_right(list, m-1) + [list[-1]] + rotate_right(list[:len(list)-m], m-1)\n",
        "num_ids": 40
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    count=0\n    length=len(list)\n    \n    if length==1:\n        return list\n    while count<m:\n        count+=1\n        list=list[-1:]+list[0:-1]\n    return list\n",
        "num_ids": 60
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) < 2:\n        return list\n",
        "num_ids": 16
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0,m):\n        a = list[i]\n        list[i] = list[i-1]\n        list[i-1] = a\n        print(a)\n        print(list)\n        \ndef add(a, b, c, d, e, f, g):\n    '''\n    Write a function to add numbers between two lists.\n    '''\n    add = []\n    add.append(a)\n    add.append(b)\n    add.append(c)\n    add.append(d)\n    add.append(e)\n    add.append(f)\n    add.append(g)\n    print(add)\n    for i in add:\n        print(i)\n    \ndef sort_func(lst):\n    '''\n    Write a function that sorts the given list of numbers in ascending order.\n    '''\n    for i in range(len(lst) - 1, 0, -1):\n        for j in range(i):\n            if(lst[j] < lst[j+1]):\n                temp = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n    print(lst)\n",
        "num_ids": 91
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    k=0\n    l=len(list)\n    if(m>l):\n        return list\n",
        "num_ids": 27
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 1:\n        return list\n    if len(list) % 2 == 0:\n        return rotate_list(list, len(list)/2)\n    else:\n        return rotate_list(list[:len(list)/2]+list[len(list)/2+1:], len(list)/2)\n",
        "num_ids": 80
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return not test_tup\n",
        "num_ids": 10
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    else:\n        for i in range(len(test_tup)):\n            if test_tup[i] is not None:\n                return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if type(test_tup) is not tuple:\n        raise TypeError('tuple is not a tuple')\n    for i in test_tup:\n        if i is not None:\n            raise TypeError('tuple contains None value')\n",
        "num_ids": 59
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        raise ValueError('The given tuple must not be empty.')\n    elif any(i is None for i in test_tup):\n        raise ValueError('The given tuple must not contain any None values.')\n    else:\n        return test_tup\n",
        "num_ids": 75
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None:\n        return True\n    else:\n        return False\n    pass\n",
        "num_ids": 30
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup)\n",
        "num_ids": 12
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisibles = []\n    for n in range(startnum,endnum+1):\n        if n % 1 == 0:\n            divisibles.append(n)\n    return divisibles\n",
        "num_ids": 49
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # your code here\n    # complete this function\n    return [int(i) for i in range(startnum, endnum + 1) if i % 10 == 0]\n",
        "num_ids": 42
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # my own helper function:\n    def extract_digits(number):\n        '''Extract digits from an integer.'''\n        if type(number) is not int:\n            raise TypeError('number must be an integer')\n        if number < 1:\n            raise ValueError('number must be greater than 0')\n        else:\n            return list(map(int, str(number)))\n    \n    # initialize\n    num_dict = {}\n    result = []\n    \n    # iterate through each digit\n    for digit in extract_digits(startnum):\n        # check each digit against num_dict\n        if digit in num_dict:\n            # add to result if it matches\n            if num_dict[digit]!= digit:\n                result.append(digit)\n                num_dict[digit] = digit\n        else:\n            # add digit to num_dict\n            num_dict[digit] = digit\n    \n    # return the result\n    return result\n",
        "num_ids": 197
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(num):\n        return all(c in '1234567890' for c in str(num))\n    return sum(filter(divisible_by_digits, range(startnum, endnum + 1)))\n",
        "num_ids": 60
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(num):\n        return num % 10 == 0\n    return [num for num in range(startnum, endnum + 1) if is_divisible(num)]\n",
        "num_ids": 46
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_multiple(num):\n        if num % 10 == 0:\n            return True\n        else:\n            return False\n    for i in range(startnum, endnum + 1):\n        if is_multiple(i) == True:\n            print(i)\n",
        "num_ids": 65
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(number, divisor):\n        return number % divisor == 0\n",
        "num_ids": 30
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    divisibles = []\n    for i in range(startnum, endnum + 1):\n        if i % 10 == 0:\n            divisibles.append(i)\n    return divisibles\n",
        "num_ids": 69
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(num):\n        return True if (num % 10) == 0 else False\n    return [num for num in range(startnum, endnum) if is_divisible_by_digit(num)]\n    \nprint(divisible_by_digits(1234, 5678)",
        "num_ids": 76
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    nums = list(range(startnum, endnum + 1))\n    summ = sum(nums)\n    for num in nums:\n        if num % nums[-1] == 0:\n            print(num)\n            ",
        "num_ids": 58
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<0:\n        print(\"The radius of a sector must be positive\")\n        return None\n    elif a<0:\n        print(\"The angle of a sector must be positive\")\n        return None\n    elif a>math.pi:\n        print(\"The angle of a sector must be smaller than pi/2\")\n        return None\n    elif r==0:\n        print(\"The sector is the square root of the area of the radius\")\n        return math.pi*r**2\n    elif r==1:\n        print(\"The sector is the area of a circle\")\n        return r*r*math.pi\n    else:\n        n = math.sqrt(r*r-a*a)\n        print(n)\n        if n<0.001:\n            print(\"The sector is a square root of the area of the radius\")\n            return math.pi*n**2\n        else:\n            print(\"The sector is a circle\")\n            return n**2*math.pi\n",
        "num_ids": 235
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is larger than 360 degrees\n    if ((r - a) > 360):\n        # convert angle to radians\n        angle = (r - a) / 180 * math.pi\n        # check if angle is greater than 90 degrees\n        if (angle > math.pi):\n            # if so, return None\n            return None\n        else:\n            # convert angle to radians\n            #return (math.pi * r ** 2)\n            return None\n    # otherwise, return the area\n    else:\n        return math.pi * (r ** 2)\n",
        "num_ids": 133
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r==0:\n        return math.tan(math.radians(a))\n    elif r<0:\n        return -sector_area(-r,a)\n    elif r>=0:\n        # check for parallel lines\n        if math.cos(math.radians(a))>0:\n            return math.tan(math.radians(a))\n        else:\n            # if paralell lines\n            if math.sin(math.radians(a))>0:\n                return -sector_area(r,a)\n            else:\n                return sector_area(-r,a)\n",
        "num_ids": 146
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0:\n        a = 360 + a\n    return r*math.cos(math.radians(a))\n",
        "num_ids": 32
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Your code here\n    if a>180:\n        return None\n    elif a==360:\n        return 0.0\n    elif a==0:\n        return 0.0\n    elif a<0:\n        return None\n    else:\n        return a*math.pi*r*math.sin(a*math.pi/180)\n",
        "num_ids": 86
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = (a - 90) * math.pi / 180\n    if angle > 0 and angle < 360:\n        return r * math.sin(angle)\n    elif angle > 360 and angle < 720:\n        return r * math.sin(angle / 360)\n    elif angle > 720 and angle < 860:\n        return r * math.sin(angle / 720)\n    else:\n        return None\ndef circle_area(r,a):\n    '''\n    Write a function that returns the area of a circle.\n    '''\n    return r * math.pi * (2 ** (1/2))\ndef square_area(r,a):\n    '''\n    Write a function that returns the area of a square.\n    '''\n    return r * math.sqrt(2)\ndef triangle_area(r,a):\n    '''\n    Write a function that returns the area of a triangle.\n    '''\n    return r * (1 / 3)\ndef parallelogram_area(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (2 ** (1/2))\ndef parallelogram_area_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (2 ** (1/2)) * (1 / 3)\ndef parallelogram_area_triangle(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (2 ** (1/2)) * (1 / 3) * (1 / 3)\ndef rectangle_area(r,a):\n    '''\n    Write a function that returns the area of a rectangle.\n    '''\n    return r * math.pi * (1 / 2)\ndef rectangle_area_square(r,a):\n    '''\n    Write a function that returns the area of a rectangle.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2)\ndef rectangle_area_triangle(r,a):\n    '''\n    Write a function that returns the area of a rectangle.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2)\ndef rectangle_area_parallelogram(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2)\ndef rectangle_area_parallelogram_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef triangle_area_square(r,a):\n    '''\n    Write a function that returns the area of a triangle.\n    '''\n    return r * math.sqrt(2)\ndef parallelogram_area_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_triangle(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_parallelogram(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_parallelogram_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_rectangle(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_parallelogram_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_rectangle_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_parallelogram_rectangle(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_parallelogram_paralleline(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_parallelogram_paralleline_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_rectangle_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_parallelogram_rectangle_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_rectangle_paralleline_square(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_parallelogram_rectangle_paralleline(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_rectangle_paralleline_paralleline(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2) * (1 / 2)\ndef parallelogram_area_paralleline_paralleline(r,a):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return r * math.pi * (1 / 2) * (1 / 2",
        "num_ids": 20
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n",
        "num_ids": 6
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    theta = math.degrees(a)\n    if(theta<=360):\n        theta = 360-theta\n        r = r*math.cos(math.radians(theta))\n    else:\n        r = r*math.cos(math.radians(theta))\n    return r\n",
        "num_ids": 77
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = r**2 * math.cos(a * math.pi/180)\n    return sector_area\n",
        "num_ids": 30
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a<0 or a>360):\n        return None\n    if(r<=0 or r>10):\n        return None\n    if(r>10):\n        a = math.atan(a/180*math.pi)*180\n    return(a*r*r)\n",
        "num_ids": 70
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Build the table\n    n = len(X)\n    m = len(Y)\n    T = [[0 for x in range(m+1)] for x in range(n+1)]\n    # Build the table\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            else:\n                T[i][j] = max(T[i-1][j], T[i][j-1])\n    # Find the longest common subsequence\n    lcs = \"\"\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if T[i][j] == T[i][j+1]:\n            lcs += X[i] + Y[j]\n            i += 1\n            j += 1\n        elif T[i][j] == T[i+1][j]:\n            lcs += X[i] + Y[j]\n            i += 1\n        elif T[i][j] == T[i+1][j+1]:\n            lcs += X[i] + Y[j]\n            j += 1\n    return lcs\n",
        "num_ids": 309
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X)\n    N = len(Y)\n    T = len(Z)\n    \n    # Create DP array to store results \n    # Create a 2D array to store lcs results\n    # Create a 2D array to store lcs results \n    # Create a 2D array to store lcs results \n    # Create a 2D array to store lcs results \n    \n    LCS = [[0 for x in range(N + 1)] for y in range(M + 1)] # 2D array to store LCS results \n    \n    # Build 2D array to store LCS results \n    # For each character in string X\n    # store results of X followed by LCS results of Y \n    # for each result of X, store in index in index\n    for i in range(M + 1):\n        for j in range(N + 1):\n            if i == 0 or j == 0:\n                LCS[i][j] = 0 # Base case \n            elif X[i - 1] == Y[j - 1]: # case if two characters are adjacent \n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else: # else, it will be the last character \n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n    \n    # Store lcs results \n    # for each character in string X \n    # Store the index of the characters \n    # in the string \n    # in the 2D array \n    # Index of the first character in string X \n    # is stored in index \n    # Index of the last character in string X \n    # is stored in index \n    # in the 2D array \n    # Index of the first character in string Y \n    # is stored in index \n    # Index of the last character in string Y \n    # is stored in index \n    # in the 2D array \n    # Index of the first character in string Z \n    # is stored in index \n    # Index of the last character in string Z \n    # is stored in index \n    # in the 2D array \n    \n    for i in range(1, M + 1):\n        for j in range(1, N + 1):\n            if X[i - 1] == Y[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n    \n    # find the longest common subsequence \n    # from LCS results \n    # to string X, Y and Z \n    # and return the result \n    return LCS[M][N]\n",
        "num_ids": 649
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) + len(Y) + len(Z)\n    n = len(X) + len(Y)\n    \n    #initializing the result\n    result = 0\n    \n    #iterating over the maximum length of the subsequences\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            #print(X[i - 1], Y[j - 1], Z[i - 1])\n            if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[i - 1]:\n                result += 1\n    \n    return result\n        \n",
        "num_ids": 154
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    N, M, R = len(X), len(Y), len(Z)\n    L, R = M + 1, N + 1\n    LRC = [[0] * (R + 1) for _ in range(L + 1)]\n    LRC[0][0] = 0\n    \n    for L in range(M + 1):\n        for R in range(N + 1):\n            if L >= M and R >= N:\n                LRC[R][L] = max(LRC[R - 1][L], LRC[R - 1][L - M] + 1)\n            elif L >= M:\n                LRC[R][L] = max(LRC[R - 1][L], LRC[R - 1][L - M] + 1)\n            elif R >= N:\n                LRC[R][L] = max(LRC[R - 1][L], LRC[R - 1][L - M] + 1)\n            else:\n                LRC[R][L] = max(LRC[R - 1][L], LRC[R - 1][L - M], LRC[R - 1][L - 1] + 1)\n    return LRC[L][R]\n",
        "num_ids": 285
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    len_X = len(X) \n    len_Y = len(Y) \n    len_Z = len(Z) \n    # Create an array to store the L,R,U characters \n    lcs_array = [ [0 for x in range(0, len_X+1)] for y in range(0, len_Y+1)] \n    # Initialize L,R,U to 0 \n    for i in range(0, len_X+1): \n        for j in range(0, len_Y+1): \n            for k in range(0, len_Z+1): \n                if i == 0 or j == 0 or k == 0: \n                    lcs_array[i][j] = 0 \n                # If the character at the i-th and j-th \n                # index is equal to the k-th character, then the \n                # character at the i-th and j-th index \n                # is counted as LCS of the three strings \n                # i.e, the LCS is the maximum length \n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    lcs_array[i][j] = lcs_array[i-1][j-1] + 1 \n                    # Update L,R,U characters for \n                    # next iteration if the character at \n                    # i-th and j-th index is different \n                    if lcs_array[i][j] > lcs_array[i-1][j-1]: \n                        lcs_array[i][j] = lcs_array[i-1][j-1] \n                else: \n                    lcs_array[i][j] = 0 \n    return lcs_array[len_X][len_Y] \n",
        "num_ids": 430
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    '''\n    Final result will be a sequence of sequences, \n    where each sequence is the result of recursively calling lcs_of_three\n    with its two and one strings passed as arguments\n    '''\n    '''\n    Get the longest common subsequence\n    '''\n    '''\n    This is a very simple function\n    '''\n    # Hint: it's important to note that when lcs_of_three\n    # is called, the resulting array is a pointer to \n    # the first and second elements of the result\n    # array. That is, the result array is a reference to \n    # the first element, the second element and the \n    # third element\n    # in this case, the result is an array of the size \n    # of the first array\n    # and the second array is the first element\n    # and the third array is the second element\n",
        "num_ids": 125
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    LCS = [[0]*(len(Z)+1) for i in range(len(X)+1)]\n    for i in range(1,len(X)+1):\n        for j in range(1,len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[len(X)][len(Y)]\n",
        "num_ids": 140
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    if len(X)!= len(Y) or len(X)!= len(Z):\n        return \"Error: lengths of the strings must be equal!\"\n    \n    if not X or not Y or not Z:\n        return 0\n    \n    for i in range(len(X) - 1):\n        for j in range(len(Y) - 1):\n            if X[i] == Y[j] and X[i] == Z[j]:\n                return i + 1\n    \n    return 0\n",
        "num_ids": 122
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    max_lcs = 0\n    lcs = []\n    for i in range(0, m):\n        for j in range(0, n):\n            if X[i] == Y[j] and X[i]!= Y[j]:\n                break\n        else:\n            if X[i]!= Y[j]:\n                if len(lcs) == 0 or lcs[-1]!= X[i]:\n                    lcs.append(X[i])\n            if len(lcs) > max_lcs:\n                max_lcs = len(lcs)\n    return max_lcs\n",
        "num_ids": 164
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # insert value into hash table\n    m = len(X)\n    n = len(Y)\n    c = [[0]*(n+1) for i in range(m+1)]\n",
        "num_ids": 48
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split(' ')\n    capital = []\n    for word in words:\n        if word[0].isupper():\n            capital.append(word)\n    words = []\n    for word in capital:\n        if word[0].isupper():\n            words.append(word)\n    return words\n",
        "num_ids": 77
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"\\b\\w{1}\\b\", \" \", str1).split()\n",
        "num_ids": 27
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = str1.split()\n    capital_words_str = \"\"\n    for word in word_list:\n        if word[0].isupper():\n            capital_words_str += word[0].upper() + \" \"\n        else:\n            capital_words_str += word[0] + \" \"\n    return capital_words_str\n",
        "num_ids": 85
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = str1.lower()\n    word = re.split(' ', new_str)\n    capital_word = re.findall(r'([a-zA-Z]\\.)+', new_str)\n    for word in word:\n        if word[0].isupper():\n            word = word.capitalize()\n    for w in word:\n        if word.startswith(capital_word):\n            word = word[1:] +''\n    return word.replace(' ','')\n",
        "num_ids": 121
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    str1 = \" \".join(str1)\n    str1 = re.sub(r'(.)\\1+', r'\\1 ', str1)\n    return str1\n",
        "num_ids": 54
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(':','')\n    str1 = str1.replace(' ','')\n    str1 = str1.replace(',','')\n    str1 = str1.replace('-','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('.','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('the','')\n    str1 = str1.replace('is','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('have','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('have','')\n    str1 = str1.replace('the','')\n    str1 = str1.replace('would','')\n    str1 = str1.replace('have','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('are','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('have','')\n    str1 = str1.replace('of','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('are','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('be','')\n    str1 = str1.replace('have','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('have','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('have','')\n    str1 = str1.replace('have','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('and','')\n    st",
        "num_ids": 1874
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.lower()\n    str1=str1.strip()\n    list1=str1.split()\n    str1=' '.join(list1)\n    print(str1)\n",
        "num_ids": 50
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z])\\s+', r' \\1', str1)\n",
        "num_ids": 28
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.split(r'(?<=[a-z])[A-Z]', str1)\n    for i in range(len(words)):\n        if words[i].isupper():\n            words[i] = words[i].upper()\n        else:\n            words[i] = words[i].lower()\n    return \" \".join(words)\n",
        "num_ids": 90
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    l1=str1.split()\n    for i in l1:\n        if i[0].isupper():\n            i=i[0].upper()+i[1:]\n        else:\n            i=i[0]+i[1:]\n        l1.append(i)\n    return''.join(l1)\n    \ndef capital_words_spaces2(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    new_str=''\n    for i in str1:\n        if i[0].isupper():\n            i=i[0].upper()+i[1:]\n        else:\n            i=i[0]+i[1:]\n        new_str+=i\n    return new_str\n    \ndef is_its_valid_name(name):\n    '''\n    This function checks whether the given string is a valid name,\n    that is it consists of 4 or more characters.\n    '''\n    if not isinstance(name,str):\n        return False\n    if len(name)<4:\n        return False\n    if len(name)>=4:\n        return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_sorted = []\n    for i in nums_str:\n        if type(i) == str:\n            nums_str_sorted.append(int(i))\n        elif type(i) == float:\n            nums_str_sorted.append(i)\n",
        "num_ids": 74
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "num_ids": 26
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Count the number of each character and return the sorted list of strings\n    count_nums = [len(num) for num in nums_str]\n    nums_str_sorted = [num for num in nums_str if num in count_nums]\n    return nums_str_sorted\n",
        "num_ids": 75
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    nums_str = re.sub('[^0-9]+', '', nums_str)\n    nums_str_list = nums_str.split(\" \")\n    nums_str_list.sort()\n    return \" \".join(nums_str_list)\n",
        "num_ids": 74
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sort_nums = sorted(nums_str)\n    return sort_nums\n",
        "num_ids": 23
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str)\n",
        "num_ids": 12
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_nums = []\n    for i in range(len(nums_str)):\n        new_nums.append(float(nums_str[i]))\n    print(new_nums)\n    new_nums.sort()\n    print(new_nums)\n    nums_str[:] = new_nums\n",
        "num_ids": 84
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    a_str = []\n    for num in nums_str:\n        a_str.append(int(num))\n",
        "num_ids": 31
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = []\n    nums_copy = nums_str.copy()\n    nums_copy.sort()\n    nums_copy.reverse()\n    for num in nums_copy:\n        sorted_nums.append(int(num))\n    return sorted_nums\n    \ndef sort_strings(strs):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    \n    '''\n    strs_copy = strs.copy()\n    strs_copy.sort()\n    return strs_copy\n    \ndef remove_duplicates(strs):\n    '''\n    Write a function to remove duplicate elements in a given list of strings of numbers.\n    \n    '''\n    strs_copy = strs.copy()\n    strs_copy.sort()\n    return strs_copy\n    \ndef remove_common_ends(strs):\n    '''\n    Write a function to remove common ending characters from a given list of strings of numbers.\n    \n    '''\n    strs_copy = strs.copy()\n    strs_copy.sort()\n    return strs_copy\n    \ndef compare_strings(strs):\n    '''\n    Write a function to compare two given lists of strings of numbers.\n    \n    '''\n    strs_copy = strs.copy()\n    strs_copy.sort()\n    return strs_copy\n    \ndef get_all_words(strs):\n    '''\n    Write a function to extract all words from a given list of strings of numbers.\n    \n    '''\n    words_list = []\n    strs_copy = strs.copy()\n    strs_copy.sort()\n    for num in strs_copy:\n        for word in num.split():\n            words_list.append(word)\n    return words_list\n    \ndef get_numbers_without_repeating_letters(nums):\n    '''\n    Write a function to get all numbers without repeated letters.\n    \n    '''\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    nums_copy_copy = nums_copy.copy()\n    nums_copy_copy.sort()\n    count = 0\n    for i in nums_copy:\n        for j in nums_copy_copy:\n            if i!= j:\n                if i!= j:\n                    count += 1\n                    break\n    return count\n    \ndef get_numbers_with_repeating_letters(nums):\n    '''\n    Write a function to get all numbers with repeated letters.\n    \n    '''\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    count = 0\n    for i in nums_copy:\n        for j in nums_copy:\n            if i == j:\n                count += 1\n                break\n    return count\n    \ndef get_all_words_without_repeating_letters(nums):\n    '''\n    Write a function to get all words without repeated letters.\n    \n    '''\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    for num in nums_copy:\n        if num == nums_copy[0]:\n            nums_copy.pop(0)\n    return nums_copy\n    \ndef get_numbers_with_repeating_letters_and_remove_duplicates(nums):\n    '''\n    Write a function to get all numbers with repeated letters and their associated letters.\n    \n    '''\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    for i in range(len(nums_copy) - 1):\n        for j in range(i + 1, len(nums_copy)):\n            if nums_copy[i] == nums_copy[j]:\n                nums_copy.pop(i)\n    return nums_copy\n    \ndef check_for_equivalent_letters(strs):\n    '''\n    Write a function to check for equivalent letters in a given string.\n    \n    '''\n    strs_copy = strs.copy()\n    strs_copy.sort()\n    return strs_copy\n    \ndef nums_to_binary(nums):\n    '''\n    Write a function to convert an integer to its corresponding binary representation.\n    \n    '''\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    return nums_copy\n    \ndef check_for_equivalent_numbers(nums):\n    '''\n    Write a function to check for equivalent numbers in a given list of numbers.\n    \n    '''\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    return nums_copy\n    \ndef compare_lists(list1, list2):\n    '''\n    Write a function to compare two lists of numbers.\n    \n    '''\n    list1_copy = list1.copy()\n    list1_copy.sort()\n    list2_copy = list2.copy()\n    list2_copy.sort()\n    if list1_copy == list2_copy:\n        return True\n    else:\n        return False\n    \ndef get_largest_subarray(nums):\n    '''\n    Write a function to find the largest sub-array in a given list of numbers.\n    \n    '''\n    subarray_size = 0\n    max_subarray = 0\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    for i in range(len(nums_copy) - 1):\n        for j in range(i + 1, len(nums_copy)):\n            subarray_size += 1\n            if nums_copy[i] + nums_copy[j] == nums_copy[j]:\n                max_subarray = max(max_subarray, subarray_size)\n            else:\n                continue\n    return max_subarray\n    \ndef get_largest_subarray_with_duplicates(nums):\n    '''\n    Write a function to find the largest sub-array in a given list of numbers with duplicate elements.\n    \n    '''\n    subarray_size = 0\n    max_subarray = 0\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    for i in range(len(nums_copy) - 1):\n        for j in range(i + 1, len(nums_copy)):\n            if nums_copy[i] + nums_copy[j] == nums_copy[j]:\n                subarray_size += 1\n                if subarray_size > max_subarray:\n                    max_subarray = max(max_subarray, subarray_size)\n                else:\n                    continue\n    return max_subarray\n    \ndef get_number_of_elements(nums):\n    '''\n    Write a function to find the number of elements in a given list of numbers.\n    \n    '''\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    return len(nums_copy)\n    \ndef get_number_of_elements_with_duplicates(nums):\n    '''\n    Write a function to find the number of elements with duplicate elements in a given list of numbers.\n    \n    '''\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    count = 0\n    for i in nums_copy:\n        for j in nums_copy:\n            if i!= j:\n                count += 1\n    return count\n    \ndef get_number_of_elements_without_duplicates(nums):\n    '''\n    Write a function to get the number of elements without duplicate elements in a given list of numbers.\n    \n    '''\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    count = 0\n    for i in nums_copy:\n        for j in nums_copy:\n            if i!= j:\n                count += 1\n    return count\n    \ndef get_unique_elements_with_duplicates(nums):\n    '''\n    Write a function to get the unique element",
        "num_ids": 11
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    my_list = nums_str.copy()\n    nums_str.sort()\n    nums_str.reverse()\n    print(\"Given list: {}\".format(my_list))\n    print(\"Sorted list: {}\".format(nums_str))\n",
        "num_ids": 65
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list) == 0:\n        test_list.append(test_tup)\n    else:\n        test_list.append(test_list[-1])\n        test_list.append(test_tup)\n",
        "num_ids": 59
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \ndef add_tuple_2(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \ndef check_input(tuple):\n    '''\n    Write a function to check the given tuple is of type list or tuple or not.\n    '''\n    if type(tuple)!= list:\n        return False\n    elif type(tuple[0])!= list:\n        return False\n    else:\n        for element in tuple:\n            if type(element)!= list:\n                return False\n        return True\n        \ndef insert_tuple(test_list, test_tup):\n    '''\n    Write a function to insert the given tuple in the given list.\n    '''\n    tuple_len = len(test_list)\n    if tuple_len == 0:\n        return test_list.append(test_tup)\n    elif tuple_len > 1:\n        if type(test_tup)!= tuple:\n            return test_list.append(test_tup)\n        else:\n            for element in test_tup:\n                if type(element)!= tuple:\n                    return test_list.append(element)\n                else:\n                    for element_i in element:\n                        if type(element_i)!= tuple:\n                            return test_list.append(element_i)\n                        else:\n                            for element_i_i in element_i:\n                                if type(element_i_i)!= tuple:\n                                    return test_list.append(element_i_i)\n                                else:\n                                    for element_i_i_i in element_i_i:\n                                        if type(element_i_i_i)!= tuple:\n                                            return test_list.append(element_i_i_i)\n                                        else:\n                                            for element_i_i_i_i in element_i_i_i:\n                                                if type(element_i_i_i_i)!= tuple:\n                                                    return test_list.append(element_i_i_i_i)\n                                                else:\n                                                    for element_i_i_i_i_i in element_i_i_i_i:\n                                                        if type(element_i_i_i_i_i)!= tuple:\n                                                            return test_list.append(element_i_i_i_i_i)\n                                                        else:\n                                                            for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                if type(element_i_i_i_i_i)!= tuple:\n                                                                        return test_list.append(element_i_i_i_i_i_i)\n                                                                else:\n                                                                        for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                            if type(element_i_i_i_i_i)!= tuple:\n                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                            else:\n                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                    if type(element_i_i_i_i_i)!= tuple:\n                                                                                        return test_list.append(element_i_i_i_i_i_i)\n                                                                                    else:\n                                                                                        for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                if type(element_i_i_i_i_i)!= tuple:\n                                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                                                else:\n                                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                    if type(element_i_i_i_i_i)!= tuple:\n                                                                                                        return test_list.append(element_i_i_i_i_i_i)\n                                                                                                    else:\n                                                                                                        for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                            if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                                                            else:\n                                                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                    if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                    return test_list.append(element_i_i_i_i_i_i)\n                                                                                                                    else:\n                                                                                                                    for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                        if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                        return test_list.append(element_i_i_i_i_i_i)\n                                                                                                                        else:\n                                                                                                                        for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                            if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                                                                            else:\n                                                                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                                if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                                                                            else:\n                                                                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                                if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                                                                            else:\n                                                                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                                if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                                                                            else:\n                                                                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                                if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                                                                            else:\n                                                                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                                if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                                                                            else:\n                                                                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                                if type(element_i_i_i_i_i)!= tuple:\n                                                                                                                                return test_list.append(element_i_i_i_i_i_i)\n                                                                                                                            else:\n                                                                                                                                for element_i_i_i_i_i_i in element_i_i_i_i_i:\n                                                                                                                                if type(element_i_i_i_i_i)!= tuple",
        "num_ids": 1777
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n",
        "num_ids": 13
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "num_ids": 24
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Your code here\n    for index, element in enumerate(test_list):\n        test_list[index] = element+test_tup[index]\n    return test_list\n    #raise NotImplementedError('You have to complete the abstract method add_tuple()')",
        "num_ids": 68
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    t_list = [i for i in test_list]\n    t_list.extend(test_tup)\n    return t_list\n",
        "num_ids": 37
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = test_tup[i]\n    return test_list\n",
        "num_ids": 40
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_list = []\n    for el in test_list:\n        new_list.append(el + test_tup)\n    return new_list\n",
        "num_ids": 39
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "num_ids": 24
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2 * i] or arr[i] < arr[2 * i + 1]:\n        return False\n    if arr[i] > arr[2 * i]:\n        return True\n    if arr[2 * i] > arr[2 * i + 1]:\n        return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) <= 2:\n        return True\n    elif i >= len(arr)//2:\n        if arr[i] > arr[2*i] or arr[i] > arr[2*i+1]:\n            return False\n        return check_min_heap_helper(arr, i)\n    elif i*2+1 < len(arr) and arr[i] > arr[i*2+1]:\n        return check_min_heap_helper(arr, i*2+1)\n    else:\n        return check_min_heap_helper(arr, i*2)\n",
        "num_ids": 150
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    return arr[i] < arr[2 * i]\n",
        "num_ids": 29
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[(i//2)]:\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2*i+1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # check if arr[i] is greater than arr[2*i+1]\n    if arr[i] > arr[2*i+1]:\n        # check if arr[i] is greater than arr[2*i]\n        return True\n    # check if arr[i] is greater than arr[2*i+1]\n    if arr[i] > arr[2*i]:\n        # if we have a pair, i.e. arr[2*i+1] and arr[2*i+2]\n        # we swap the two values\n        arr[i], arr[2*i+1] = arr[2*i+1], arr[i]\n        # if arr[2*i] is greater than arr[2*i+1]\n        # swap arr[2*i] and arr[2*i+1]\n        if arr[2*i] > arr[2*i+1]:\n            arr[2*i], arr[2*i+1] = arr[2*i+1], arr[2*i]\n            # if we have a pair, i.e. arr[2*i+1] and arr[2*i]\n        # we swap the two values\n        # swap arr[2*i] and arr[2*i+1]\n        if arr[2*i] > arr[2*i+1]:\n            arr[2*i], arr[2*i+1] = arr[2*i+1], arr[2*i]\n        # if arr[2*i+1] is greater than arr[2*i]\n        # swap arr[2*i] and arr[2*i+1]\n        if arr[2*i+1] > arr[2*i]:\n            arr[2*i], arr[2*i+1] = arr[2*i+1], arr[2*i]\n        # if arr[2*i+1] is greater than arr[2*i]\n        # swap arr[2*i] and arr[2*i+1]\n        if arr[2*i+1] > arr[2*i]:\n            arr[2*i], arr[2*i+1] = arr[2*i+1], arr[2*i]\n        # return arr[i]\n    else:\n        return False\n",
        "num_ids": 546
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    heap = []\n    temp = -1\n    for element in arr:\n        if element == 0:\n            return False\n        heapq.heappush(heap, -element)\n        if -temp > 0:\n            if heap[0] < -temp:\n                return False\n        temp = -1\n    if -temp > 0:\n        return False\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    if arr[i] < arr[(i+1)%len(arr)]:\n        return False\n    if arr[(i+1)%len(arr)] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, (i+1)//2)\n",
        "num_ids": 87
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i<0 or i>=len(arr): return False\n    if arr[i]<arr[i//2] or arr[i]>arr[(i+1)//2]: return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr):\n        if arr[i] > arr[2*i] or arr[i] > arr[2*i+1]:\n            return False\n    else:\n        return True\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return 152\n    if n == 154:\n        return 153\n    if n == 155:\n        return 154\n    if n == 156:\n        return 155\n    if n == 157:\n        return 156\n    if n == 158:\n        return 157\n    if n == 159:\n        return 158\n    if n == 160:\n        return 159\n    if n == 161:\n        return 160\n    if n == 162:\n        return 161\n    if n == 163:\n        return 162\n    if n == 164:\n        return 163\n    if n == 165:\n        return 164\n    if n == 166:\n        return 165\n    if n == 167:\n        return 166\n    if n == 168:\n        return 167\n    if n == 169:\n        return 168\n    if n == 170:\n        return 169\n    if n == 171:\n        return 170\n    if n == 172:\n        return 171\n    if n == 173:\n        return 172\n    if n == 174:\n        return 173\n    if n == 175:\n        return 174\n    if n == 176:\n        return 175\n",
        "num_ids": 1949
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return 0\n    \n    j = 1\n    while n > 1:\n        if n % j == 0:\n            n /= j\n            j += 1\n        else:\n            j += 1\n    return n\n",
        "num_ids": 60
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Code Here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return(int((n-1)/3))\ndef jacobsthal_numer(n,a):\n    '''\n    Write a function to compute the jacobsthal number with a given integer n. https://www.geeksforgeeks.org/jacobsthal-numerics-numbers/ \n    '''\n    if(n<=1):\n        return(a)\n    else:\n        return(int(n/3)*a)\ndef jacobsthal_demon(n):\n    '''\n    Write a function to compute the jacobsthal number with a given integer n. https://www.geeksforgeeks.org/jacobsthal-numerics-numbers/\n    '''\n    if(n<=1):\n        return(n)\n    else:\n        return(int(n/3)*n)",
        "num_ids": 32
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n==4:\n        return 4\n    elif n==5:\n        return 5\n    elif n==6:\n        return 6\n    elif n==7:\n        return 7\n    elif n==8:\n        return 8\n    elif n==9:\n        return 9\n    elif n==10:\n        return 10\n    elif n==11:\n        return 11\n    elif n==12:\n        return 12\n    elif n==13:\n        return 13\n    elif n==14:\n        return 14\n    elif n==15:\n        return 15\n    elif n==16:\n        return 16\n    elif n==17:\n        return 17\n    elif n==18:\n        return 18\n    elif n==19:\n        return 19\n    elif n==20:\n        return 20\n    elif n==21:\n        return 21\n    elif n==22:\n        return 22\n    elif n==23:\n        return 23\n    elif n==24:\n        return 24\n    elif n==25:\n        return 25\n    elif n==26:\n        return 26\n    elif n==27:\n        return 27\n    elif n==28:\n        return 28\n    elif n==29:\n        return 29\n    elif n==30:\n        return 30\n    elif n==31:\n        return 31\n    elif n==32:\n        return 32\n    elif n==33:\n        return 33\n    elif n==34:\n        return 34\n    elif n==35:\n        return 35\n    elif n==36:\n        return 36\n    elif n==37:\n        return 37\n    elif n==38:\n        return 38\n    elif n==39:\n        return 39\n    elif n==40:\n        return 40\n    elif n==41:\n        return 41\n    elif n==42:\n        return 42\n    elif n==43:\n        return 43\n    elif n==44:\n        return 44\n    elif n==45:\n        return 45\n    elif n==46:\n        return 46\n    elif n==47:\n        return 47\n    elif n==48:\n        return 48\n    elif n==49:\n        return 49\n    elif n==50:\n        return 50\n    elif n==51:\n        return 51\n    elif n==52:\n        return 52\n    elif n==53:\n        return 53\n    elif n==54:\n        return 54\n    elif n==55:\n        return 55\n    elif n==56:\n        return 56\n    elif n==57:\n        return 57\n    elif n==58:\n        return 58\n    elif n==59:\n        return 59\n    elif n==60:\n        return 60\n    elif n==61:\n        return 61\n    elif n==62:\n        return 62\n    elif n==63:\n        return 63\n    elif n==64:\n        return 64\n    elif n==65:\n        return 65\n    elif n==66:\n        return 66\n    elif n==67:\n        return 67\n    elif n==68:\n        return 68\n    elif n==69:\n        return 69\n    elif n==70:\n        return 70\n    elif n==71:\n        return 71\n    elif n==72:\n        return 72\n    elif n==73:\n        return 73\n    elif n==74:\n        return 74\n    elif n==75:\n        return 75\n    elif n==76:\n        return 76\n    elif n==77:\n        return 77\n    elif n==78:\n        return 78\n    elif n==79:\n        return 79\n    elif n==80:\n        return 80\n    elif n==81:\n        return 81\n    elif n==82:\n        return 82\n    elif n==83:\n        return 83\n    elif n==84:\n        return 84\n    elif n==85:\n        return 85\n    elif n==86:\n        return 86\n    elif n==87:\n        return 87\n    elif n==88:\n        return 88\n    elif n==89:\n        return 89\n    elif n==90:\n        return 90\n    elif n==91:\n        return 91\n    elif n==92:\n        return 92\n    elif n==93:\n        return 93\n    elif n==94:\n        return 94\n    elif n==95:\n        return 95\n    elif n==96:\n        return 96\n    elif n==97:\n        return 97\n    elif n==98:\n        return 98\n    elif n==99:\n        return 99\n    elif n==100:\n        return 100\n    elif n==101:\n        return 101\n    elif n==102:\n        return 102\n    elif n==103:\n        return 103\n    elif n==104:\n        return 104\n    elif n==105:\n        return 105\n    elif n==106:\n        return 106\n    elif n==107:\n        return 107\n    elif n==108:\n        return 108\n    elif n==109:\n        return 109\n    elif n==110:\n        return 110\n    elif n==111:\n        return 111\n    elif n==112:\n        return 112\n    elif n==113:\n        return 113\n    elif n==114:\n        return 114\n    elif n==115:\n        return 115\n    elif n==116:\n        return 116\n    elif n==117:\n        return 117\n    elif n==118:\n        return 118\n    elif n==119:\n        return 119\n    elif n==120:\n        return 120\n    elif n==121:\n        return 121\n    elif n==122:\n        return 122\n    elif n==123:\n        return 123\n    elif n==124:\n        return 124\n    elif n==125:\n        return 125\n    elif n==126:\n        return 126\n    elif n==127:\n        return 127\n    elif n==128:\n        return 128\n    elif n==129:\n        return 129\n    elif n==130:\n        return 130\n    elif n==131:\n        return 131\n    elif n==132:\n        return 132\n    elif n==133:\n        return 133\n    elif n==134:\n        return 134\n    elif n==135:\n        return 135\n    elif n==136:\n        return 136\n    elif n==137:\n        return 137\n    elif n==138:\n        return 138\n    elif n==139:\n        return 139\n    elif n==140:\n        return 140\n    elif n==141:\n        return 141\n    elif n==142:\n        return 142\n    elif n==143:\n        return 143\n    elif n==144:\n        return 144\n    elif n==145:\n        return 145\n    elif n==146:\n        return 146\n    elif n==147:\n        return 147\n    elif n==148:\n        return 148\n    elif n==149:\n        return 149\n    elif n==150:\n        return 150\n    elif n==151:\n        return 151\n    elif n==152:\n        return 152\n    elif n==153:\n        return 153\n    elif n==154:\n        return 154\n    elif n==155:\n        return 155\n    elif n==156:\n        return 156\n    elif n==157:\n        return 157\n    elif n==158:\n        return 158\n    elif n==159:\n        return 159\n    elif n==160:\n        return 160\n    elif n==161:\n        return 161\n    elif n=",
        "num_ids": 1950
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = []\n    for i in range(n):\n        x.append(0)\n    for i in range(n-1):\n        x[i] = (x[i]**2) + x[i+1]\n    return x[n-1]\n",
        "num_ids": 66
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    for i in range(1, n+1):\n        #print(n)\n        x = i * i\n        #print(x)\n        if x % 2 == 0:\n            print(f\"{i} is a jacobsthal number.\")\n        else:\n            print(f\"{i} is not a jacobsthal number.\")\n",
        "num_ids": 86
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n + 1\n",
        "num_ids": 8
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 1\n    while(x <= n):\n        y = x*x\n        z = x*x*x\n        a = x*x\n        b = x*x*x\n        c = x*x\n        d = x*x*x\n        e = x*x*x\n        f = x*x*x\n        g = x*x\n        h = x*x*x\n        i = x*x*x\n        j = x*x*x\n        k = x*x*x\n        l = x*x*x\n        m = x*x*x\n        n = x*x*x\n        o = x*x*x\n        p = x*x*x\n        q = x*x*x\n        r = x*x*x\n        s = x*x*x\n        t = x*x*x\n        u = x*x*x\n        v = x*x*x\n        w = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*x\n        x = x*x*",
        "num_ids": 1949
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 3\n    if n == 9:\n        return 4\n    if n == 10:\n        return 5\n    if n == 11:\n        return 6\n    if n == 12:\n        return 7\n    if n == 13:\n        return 8\n    if n == 14:\n        return 9\n    if n == 15:\n        return 10\n    if n == 16:\n        return 11\n    if n == 17:\n        return 12\n    if n == 18:\n        return 13\n    if n == 19:\n        return 14\n    if n == 20:\n        return 15\n    if n == 21:\n        return 16\n    if n == 22:\n        return 17\n    if n == 23:\n        return 18\n    if n == 24:\n        return 19\n    if n == 25:\n        return 20\n    if n == 26:\n        return 21\n    if n == 27:\n        return 22\n    if n == 28:\n        return 23\n    if n == 29:\n        return 24\n    if n == 30:\n        return 25\n    if n == 31:\n        return 26\n    if n == 32:\n        return 27\n    if n == 33:\n        return 28\n    if n == 34:\n        return 29\n    if n == 35:\n        return 30\n    if n == 36:\n        return 31\n    if n == 37:\n        return 32\n    if n == 38:\n        return 33\n    if n == 39:\n        return 34\n    if n == 40:\n        return 35\n    if n == 41:\n        return 36\n    if n == 42:\n        return 37\n    if n == 43:\n        return 38\n    if n == 44:\n        return 39\n    if n == 45:\n        return 40\n    if n == 46:\n        return 41\n    if n == 47:\n        return 42\n    if n == 48:\n        return 43\n    if n == 49:\n        return 44\n    if n == 50:\n        return 45\n    if n == 51:\n        return 46\n    if n == 52:\n        return 47\n    if n == 53:\n        return 48\n    if n == 54:\n        return 49\n    if n == 55:\n        return 50\n    if n == 56:\n        return 51\n    if n == 57:\n        return 52\n    if n == 58:\n        return 53\n    if n == 59:\n        return 54\n    if n == 60:\n        return 55\n    if n == 61:\n        return 56\n    if n == 62:\n        return 57\n    if n == 63:\n        return 58\n    if n == 64:\n        return 59\n    if n == 65:\n        return 60\n    if n == 66:\n        return 61\n    if n == 67:\n        return 62\n    if n == 68:\n        return 63\n    if n == 69:\n        return 64\n    if n == 70:\n        return 65\n    if n == 71:\n        return 66\n    if n == 72:\n        return 67\n    if n == 73:\n        return 68\n    if n == 74:\n        return 69\n    if n == 75:\n        return 70\n    if n == 76:\n        return 71\n    if n == 77:\n        return 72\n    if n == 78:\n        return 73\n    if n == 79:\n        return 74\n    if n == 80:\n        return 75\n    if n == 81:\n        return 76\n    if n == 82:\n        return 77\n    if n == 83:\n        return 78\n    if n == 84:\n        return 79\n    if n == 85:\n        return 80\n    if n == 86:\n        return 81\n    if n == 87:\n        return 82\n    if n == 88:\n        return 83\n    if n == 89:\n        return 84\n    if n == 90:\n        return 85\n    if n == 91:\n        return 86\n    if n == 92:\n        return 87\n    if n == 93:\n        return 88\n    if n == 94:\n        return 89\n    if n == 95:\n        return 90\n    if n == 96:\n        return 91\n    if n == 97:\n        return 92\n    if n == 98:\n        return 93\n    if n == 99:\n        return 94\n    if n == 100:\n        return 95\n    if n == 101:\n        return 96\n    if n == 102:\n        return 97\n    if n == 103:\n        return 98\n    if n == 104:\n        return 99\n    if n == 105:\n        return 100\n    if n == 106:\n        return 101\n    if n == 107:\n        return 102\n    if n == 108:\n        return 103\n    if n == 109:\n        return 104\n    if n == 110:\n        return 105\n    if n == 111:\n        return 106\n    if n == 112:\n        return 107\n    if n == 113:\n        return 108\n    if n == 114:\n        return 109\n    if n == 115:\n        return 110\n    if n == 116:\n        return 111\n    if n == 117:\n        return 112\n    if n == 118:\n        return 113\n    if n == 119:\n        return 114\n    if n == 120:\n        return 115\n    if n == 121:\n        return 116\n    if n == 122:\n        return 117\n    if n == 123:\n        return 118\n    if n == 124:\n        return 119\n    if n == 125:\n        return 120\n    if n == 126:\n        return 121\n    if n == 127:\n        return 122\n    if n == 128:\n        return 123\n    if n == 129:\n        return 124\n    if n == 130:\n        return 125\n    if n == 131:\n        return 126\n    if n == 132:\n        return 127\n    if n == 133:\n        return 128\n    if n == 134:\n        return 129\n    if n == 135:\n        return 130\n    if n == 136:\n        return 131\n    if n == 137:\n        return 132\n    if n == 138:\n        return 133\n    if n == 139:\n        return 134\n    if n == 140:\n        return 135\n    if n == 141:\n        return 136\n    if n == 142:\n        return 137\n    if n == 143:\n        return 138\n    if n == 144:\n        return 139\n    if n == 145:\n        return 140\n    if n == 146:\n        return 141\n    if n == 147:\n        return 142\n    if n == 148:\n        return 143\n    if n == 149:\n        return 144\n    if n == 150:\n        return 145\n    if n == 151:\n        return 146\n    if n == 152:\n        return 147\n    if n == 153:\n        return 148\n    if n == 154:\n        return 149\n    if n == 155:\n        return 150\n    if n == 156:\n        return 151\n    if n == 157:\n        return 152\n    if n == 158:\n        return 153\n    if n == 159:\n        return 154\n    if n == 160:\n        return 155\n    if n == 161:\n        return 156\n    if n == 162:\n        return 157\n    if n == 163:\n        return 158\n    if n == 164:\n        return 159\n    if n == 165:\n        return 160\n    if n == 166:\n        return 161\n    if n == 167:\n        return 162\n    if n == 168:\n        return 163\n    if n == 169:\n        return 164\n    if n == 170:\n        return 165\n    if n == 171:\n        return 166\n    if n == 172:\n        return 167\n    if n == 173:\n        return 168\n    if n == 174:\n        return 169\n    if n == 175:\n        return 170\n    if n == 176:\n        return 171\n",
        "num_ids": 1949
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #sort all the tuple to match the order of the list\n    test_list.sort()\n    #initialize k as the number of records of a tuple\n    k = len(test_list)\n    #initialize an empty array of k records, for use by the inner for loop\n    records = []\n    #loop through all the tuples in the list\n    for i in range(k):\n        #if the tuple is already in the list, append it to the records array\n        if test_list[i] in records:\n            records.append(test_list[i])\n        #if the tuple is not in the list, add it to the array, but keep it sorted to match the order of the list\n        else:\n            records.append(test_list[i])\n            #change the k value to reflect the number of records\n            k -= 1\n    #return the number of records, k\n    return k\n",
        "num_ids": 215
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return None\n    if K == 1:\n        return sorted(test_list)\n    #todo: use sorted, but you have to access the tuple from test case\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n    #todo: use heapq\n    heapq.heapify(new_list)\n    heapq.heappush(new_list, (0, 0, 0, 0))\n    #todo: add the same record to the list\n    while len(new_list) > K:\n        x, y, z, w = heapq.heappop(new_list)\n        heapq.heappush(new_list, (x + y, z, w, w + 1))\n    return new_list\n",
        "num_ids": 200
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    smallest_value = float('inf')\n    smallest_k = 0\n    for i in range(len(test_list)):\n        temp_value = test_list[i][0]\n        k = test_list[i][1]\n        if temp_value < smallest_value:\n            smallest_value = temp_value\n            smallest_k = k\n    return smallest_k\n",
        "num_ids": 96
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = 1\n    for i in range(K):\n        minimum = 1\n        for j in range(len(test_list)):\n            if test_list[j][1] < minimum:\n                minimum = test_list[j][1]\n        minimum = minimum\n        if minimum < 1:\n            minimum = 1\n    return minimum\n",
        "num_ids": 82
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    a = sorted(test_list, key=lambda x: x[1])\n    return a[:K]\n",
        "num_ids": 29
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = 0\n",
        "num_ids": 7
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = len(test_list) # only store k in the variable k to avoid recomputing k at every iteration\n    # choose a random element as the minimum\n    best_element = test_list[0]\n    # keep track of the minimum\n    min_k = 0\n    # visit all elements\n    for i in range(0, len(test_list)):\n        # find the minimum for this element\n        if test_list[i] < best_element:\n            best_element = test_list[i]\n            min_k = k\n        else:\n            k = k - 1\n    return min_k # return the k\n",
        "num_ids": 151
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    mins = []\n    for i in range(len(test_list)):\n        mins.append(test_list[i])\n    mins.sort()\n    return mins[:K]\n",
        "num_ids": 47
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a tuple list to find the minimum k records\n    min_k_list = []\n",
        "num_ids": 24
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = len(test_list)\n    # need to fill out this array\n    # max_k = l*(l-1)//2\n    max_k = l\n    for i in range(l):\n        for j in range(i+1, l):\n            if test_list[i] + test_list[j] < max_k:\n                max_k = test_list[i] + test_list[j]\n    return max_k\n",
        "num_ids": 112
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    common_elements_list.append(l1[i])\n    return common_elements_list\n",
        "num_ids": 96
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n",
        "num_ids": 9
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    if len(l1) < 3:\n        if len(l2) < 3:\n            if len(l3) < 3:\n                return index_list\n            elif len(l2) == 3:\n                for i in range(0, 3):\n                    if l2[i] in l1:\n                        index_list.append(l2[i])\n                if len(l3) == 3:\n                    for i in range(0, 3):\n                        if l3[i] in l1:\n                            index_list.append(l3[i])\n            else:\n                for i in range(0, 3):\n                    if l2[i] in l1:\n                        index_list.append(l2[i])\n                if len(l3) == 3:\n                    for i in range(0, 3):\n                        if l3[i] in l1:\n                            index_list.append(l3[i])\n        else:\n            for i in range(0, 3):\n                if l1[i] in l2:\n                    index_list.append(l1[i])\n            for i in range(0, 3):\n                if l1[i] in l3:\n                    index_list.append(l1[i])\n    else:\n        for i in range(0, 3):\n            if l1[i] in l2:\n                index_list.append(l1[i])\n            if l1[i] in l3:\n                index_list.append(l1[i])\n        for i in range(0, 3):\n            if l2[i] in l3:\n                index_list.append(l2[i])\n            if l2[i] in l1:\n                index_list.append(l2[i])\n        for i in range(0, 3):\n            if l3[i] in l1:\n                index_list.append(l3[i])\n            if l3[i] in l2:\n                index_list.append(l3[i])\n    return index_list\n",
        "num_ids": 499
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] not in common_list:\n            common_list.append(l1[i])\n    for j in range(len(l2)):\n        if l2[j] not in common_list:\n            common_list.append(l2[j])\n    for k in range(len(l3)):\n        if l3[k] not in common_list:\n            common_list.append(l3[k])\n    return common_list\n",
        "num_ids": 135
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    d = {}\n    for i in l1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in l2:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in l3:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] == 3:\n            return [i, d[i]]\n    return []\n",
        "num_ids": 143
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            index.append(l1[i])\n    return index\n",
        "num_ids": 65
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j] and l3[i] == l2[j]:\n                index_list.append(i)\n    return index_list\n",
        "num_ids": 77
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    a=[]\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i]==l2[j]==l3[k]:\n                    a.append(l1[i])\n    return a\n",
        "num_ids": 81
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            index_list.append(l1[i])\n        elif l1[i] in l3:\n            index_list.append(l1[i])\n        elif l2[i] in l3:\n            index_list.append(l2[i])\n        else:\n            index_list.append(l3[i])\n    return index_list\n",
        "num_ids": 122
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return sorted(set(list(l1[i] + l2[i] + l3[i] for i in range(len(l1)))) - set(l1[0] + l2[0] + l3[0]))\n",
        "num_ids": 59
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Not working, use sorted, time complexity O(n+k)\n    # O(n+k) time complexity\n    # O(n) space complexity\n    \n    return min(numbers)\n",
        "num_ids": 49
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    length = len(numbers)\n    if length == 1:\n        return numbers[0]\n    \n    if length % 2 == 0:\n        index1 = length//2\n        index2 = index1 + 1\n",
        "num_ids": 53
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_value = numbers[0]\n    for i in range(1, len(numbers)):\n        if smallest_value > numbers[i]:\n            smallest_value = numbers[i]\n    return smallest_value\n",
        "num_ids": 56
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    numbers.sort()\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #If we find a non-integer, then we know there is no second smallest number.\n    if not isinstance(numbers[0], int):\n        raise TypeError(\"Second smallest number must be an integer\")\n    if len(numbers) < 2:\n        raise ValueError(\"Only one element is needed\")\n    min_number = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < min_number:\n            min_number = numbers[i]\n    return min_number\n",
        "num_ids": 127
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first_smallest = numbers[0]\n    for number in numbers:\n        if number < first_smallest:\n            first_smallest = number\n    return first_smallest\n",
        "num_ids": 45
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    numbers = [x for x in numbers if x!= smallest]\n    numbers.sort()\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # # sorted() method takes a function and an iterable.\n    # # But it doesn't sort the list if you don't pass an iterable to it.\n    # # You can sort it using itertools.\n    # # But you can't sort the list if you don't know the data type.\n    # # You can also use sorted() to make the list always sorted.\n    \n    # # for example, sorted([4, 6, 1, 7, 3]) will return\n    # # [1, 1, 3, 6, 7].\n    # # If we sort the list, it will return the smallest value.\n",
        "num_ids": 144
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace(\"\\n\",\" \")\n    text = text.lower()\n    text = re.sub('[!@#$%^&*\\(\\)_~+-]','',text)\n    text = text.split(\" \")\n    # text = [i.strip() for i in text]\n",
        "num_ids": 76
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b':\n        text=text[1:]\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>3:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>2:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by four 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>4:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>1:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>2:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>3:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>4:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>5:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>6:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>7:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>8:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>9:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>10:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef text_match_zero_one_15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or more.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # your code here\n    if text[0]=='b' and len(text)>11:\n        return re.search(r'^\\b', text)\n    else:\n        return re.search(r'^\\b', text)\ndef tex",
        "num_ids": 63
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    pattern=r'(?:[a-zA-Z]{2,}){1,2}'\n    matches= re.findall(pattern, text)\n    return matches\n",
        "num_ids": 77
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # return False if the pattern is zero or one\n    # return True if the pattern is one or more times\n    # return False if the pattern is not a zero or one\n    # return True if the pattern is a zero or one\n    # return True if the pattern is zero or one\n    pattern = re.compile(r\"a(\\b)b\")\n    return pattern.match(text) is not None\n",
        "num_ids": 95
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text.replace('a.', 'b.')\n    text = text.replace('a', 'b').replace('a.', 'b.')\n    text = text",
        "num_ids": 1974
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    print(text)\n    if 'a' in text or 'b' in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    zero_one = re.compile('a\\d+b\\s')\n    match = zero_one.findall(text)\n    return match\n",
        "num_ids": 38
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    words = text.split()\n    for word in words:\n        if word[0] in \"a|b\":\n            return word[0].lower()\n    return \"match zero one\"\n",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    if text.startswith('http'):\n        return 0\n    else:\n        for char in text:\n            if char == 'a':\n                count = count + 1\n            else:\n                count = count - 1\n        return count\n    \ndef text_match_zero_one_no_letters(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for char in text:\n        if char not in ['a','b']:\n            count = count + 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(\\b[a-z]+)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(1)\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    s = 0\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                s += 1\n        count += s\n        s = 0\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Python Program to count the pairs of reverse strings\n",
        "num_ids": 14
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #print(test_list)\n    my_string = ''\n    for i in range(len(test_list)):\n        my_string += test_list[i]\n    #print(my_string)\n    #print(len(my_string))\n    return my_string.count('reversed')\n",
        "num_ids": 77
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list) - 1):\n            if test_list[j] == test_list[i] and test_list[i] == test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    c = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                c = c + 1\n    return c\n",
        "num_ids": 70
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Count the number of pairs\n    # of reverse strings\n    count = 0\n    \n    # For each element in list\n    for i in range(len(test_list)-1):\n        # Create variables to store next two\n        # characters in current position\n        prev_char = test_list[i]\n        next_char = test_list[i+1]\n        \n        # Only count if they are equal\n        if prev_char == next_char:\n            # Increment count\n            count += 1\n    \n    # Return count\n    return count\n    ",
        "num_ids": 135
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.reverse()\n    length = len(test_list)\n    output = 0\n    for i in range(length):\n        if test_list[i] == test_list[length - 1 - i]:\n            output = output + 1\n    return output\n",
        "num_ids": 65
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reversed_list = test_list[::-1]\n    count = 0\n    i = 0\n    j = 0\n    while i < len(test_list):\n        if test_list[i] == reversed_list[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            i = i + 1\n            j = j + 1\n    return count\n    # pass # remove pass statement\n",
        "num_ids": 105
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {}\n",
        "num_ids": 6
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    counter = {}\n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n            counter[i] = counter.get(i, 0) + 1\n    return counter\n",
        "num_ids": 63
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = dict()\n    for i in list1:\n        t = tuple(i)\n        dictionary[t] = dictionary.get(t, 0) + 1\n    return dictionary\n",
        "num_ids": 47
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if type(list1) is not list:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for item in list1:\n        if item not in result:\n            result[item] = 1\n        else:\n            result[item] += 1\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    '''\n    if len(list1) <= 2:\n        return {list1[0]:len(list1)}\n    else:\n        list1 = sorted(list1)\n        count = {}\n        for i in list1:\n            count[i] = list1.count(i)\n        return count\n    '''\n    \n    d1 = {}\n    for i in list1:\n        if i not in d1:\n            d1[i] = list1.count(i)\n    \n    return d1\n    \n    \n",
        "num_ids": 53
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    num_dict = {}\n    tup_list = list1\n    while len(tup_list) > 0:\n        if tup_list[0] in num_dict:\n            num_dict[tup_list[0]] += 1\n        else:\n            num_dict[tup_list[0]] = 1\n        tup_list = tup_list[1:]\n    \n    return num_dict\n",
        "num_ids": 102
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tupleList = {}\n    for sublist in list1:\n        subList = tuple(sublist)\n        if subList not in tupleList:\n            tupleList[subList] = 1\n        else:\n            tupleList[subList] = tupleList[subList] + 1\n    return tupleList\n",
        "num_ids": 76
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #raise NotImplementedError\n    unique_sublist = {}\n    for i in list1:\n        if i not in unique_sublist:\n            unique_sublist[i] = 1\n        else:\n            unique_sublist[i] += 1\n    return unique_sublist\n",
        "num_ids": 71
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        list1[i] = tuple(list1[i])\n        if list1[i] not in d.keys():\n            d[list1[i]] = 1\n        else:\n            d[list1[i]] += 1\n    return d\n",
        "num_ids": 79
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return bool(num[0]) and num[1:].isdigit()\n",
        "num_ids": 21
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    prec = 2\n    flag = False\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace(' ', '')\n    if len(num) == 0:\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if len(num) > prec:\n        prec = int(num)\n        return False\n    else:\n        return True\n",
        "num_ids": 121
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if(num[0] == '-' or num[0] == '+'):\n        num = num[1:]\n    if(num[-1] == '.'):\n        num = num[:-1]\n    num = float(num)\n    if(num > 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.replace(\".\", \"\").isdigit()\n",
        "num_ids": 16
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if(type(num)!= str):\n        print(\"That is not a valid input. Please enter a number\")\n    elif(num.count(\".\")!= 1):\n        print(\"It should contain exactly one decimal point\")\n    elif(num[0] == \"-\"):\n        print(\"The first character should be either a minus sign or a minus sign followed by a number\")\n    else:\n        return True\n",
        "num_ids": 98
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    \n    for i in arr:\n        if i in arr[1:]:\n            return False\n    \n    return True\n",
        "num_ids": 45
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return len(unique_elements) == 1\n",
        "num_ids": 51
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return True\n    else:\n        for i in arr:\n            if arr.count(i) > 1:\n                return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if len(set(arr))==1:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #declare a hash set for unique elements\n    set_arr = set(arr)\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return arr[0] == arr[0]\n    else:\n        for i in arr:\n            if arr.count(i)!= 1:\n                return False\n        return True\n",
        "num_ids": 55
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if arr.count(i) > 1:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    arr.sort()\n    for i in arr:\n        if i in arr:\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for x in arr:\n        if arr.count(x) > 1:\n            count += 1\n",
        "num_ids": 31
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if(1 <= monthnum3 <= 12):\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        monthnum3 = 31\n    elif monthnum3 == 2:\n        monthnum3 = 28\n    elif monthnum3 == 3:\n        monthnum3 = 31\n    elif monthnum3 == 4:\n        monthnum3 = 30\n    elif monthnum3 == 5:\n        monthnum3 = 31\n    elif monthnum3 == 6:\n        monthnum3 = 30\n    elif monthnum3 == 7:\n        monthnum3 = 31\n    elif monthnum3 == 8:\n        monthnum3 = 31\n    elif monthnum3 == 9:\n        monthnum3 = 30\n    elif monthnum3 == 10:\n        monthnum3 = 31\n    elif monthnum3 == 11:\n        monthnum3 = 30\n    elif monthnum3 == 12:\n        monthnum3 = 31\n    else:\n        return False\n    return True\n",
        "num_ids": 217
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        if monthnum3 == 1:\n            return monthnum3 == 30\n        elif monthnum3 == 2:\n            return monthnum3 == 29\n        elif monthnum3 == 3:\n            return monthnum3 == 31\n        elif monthnum3 == 4:\n            return monthnum3 == 30\n        elif monthnum3 == 5:\n            return monthnum3 == 31\n        elif monthnum3 == 6:\n            return monthnum3 == 30\n        elif monthnum3 == 7:\n            return monthnum3 == 31\n        elif monthnum3 == 8:\n            return monthnum3 == 30\n        elif monthnum3 == 9:\n            return monthnum3 == 31\n        elif monthnum3 == 10:\n            return monthnum3 == 30\n        elif monthnum3 == 11:\n            return monthnum3 == 31\n        elif monthnum3 == 12:\n            return monthnum3 == 30\n        else:\n            return False\n    \ndef monthnumber_days(monthnum3):\n    '''\n    Write a function to calculate the number of days in a given month.\n    '''\n    days3 = 0\n    months3 = 0\n    if monthnum3 == 1:\n        months3 = 31\n        days3 = 29\n    if monthnum3 == 2:\n        months3 = 28\n        days3 = 31\n    if monthnum3 == 3:\n        months3 = 31\n        days3 = 30\n    if monthnum3 == 4:\n        months3 = 31\n        days3 = 31\n    if monthnum3 == 5:\n        months3 = 30\n        days3 = 30\n    if monthnum3 == 6:\n        months3 = 31\n        days3 = 31\n    if monthnum3 == 7:\n        months3 = 31\n        days3 = 30\n    if monthnum3 == 8:\n        months3 = 30\n        days3 = 31\n    if monthnum3 == 9:\n        months3 = 31\n        days3 = 30\n    if monthnum3 == 10:\n        months3 = 31\n        days3 = 31\n    if monthnum3 == 11:\n        months3 = 30\n        days3 = 30\n    if monthnum3 == 12:\n        months3 = 31\n        days3 = 31\n    return days3, months3\n",
        "num_ids": 274
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # % (monthnum3 - 1) \n    # monthnum3 = (monthnum3 - 1) % 12\n    # return monthnum3 == 0 or monthnum3 == 2 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12\n    return monthnum3 in [1, 3, 5, 7, 8, 10, 12]\n",
        "num_ids": 97
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber3 = int(monthnum3)\n    if monthnumber3 % 3 == 0:\n        if monthnumber3 % 4 == 0:\n            if monthnumber3 % 100 == 0:\n                if monthnumber3 % 400 == 0:\n                    if monthnumber3 == 29:\n                        return True\n                    else:\n                        return False\n                else:\n                    return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 111
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = monthnum3.lower()\n    if monthnum3 in ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']:\n        return True\n    else:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    check_list = ['0','1','2','3','4','5','6','7','8','9','10','11','12']\n    if monthnum3 in check_list:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 % 2 == 0:\n            return monthnum3 == 30\n        else:\n            return monthnum3 == 31\n    else:\n        return \"Invalid Input\"\n",
        "num_ids": 59
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        if monthnum3 == 1:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 1:\n            return True\n        elif monthnum3 == 2:\n            return False\n        elif monthnum3 == 3:\n            return True\n        elif monthnum3 == 4:\n            return False\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return False\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return False\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return False\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n",
        "num_ids": 203
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0:\n        return 0\n    \n    if n < 0:\n        return -1\n    \n    if arr[0] < arr[1]:\n        return arr[0] - arr[1]\n    \n    return find_min_diff(arr,n-1)\n",
        "num_ids": 70
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Assign an empty list to hold the output \n    output = [] \n",
        "num_ids": 21
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Input\n    # arr = [1,4,3,2,8,5]\n    # n = 6\n    # Output\n    # minDiff = 6\n    arr = sorted(arr)\n    n = len(arr)\n    minDiff = arr[0] - arr[1]\n    for i in range(2,n):\n        minDiff = min(minDiff, arr[i] - arr[i-1])\n    return minDiff\n    \ndef minDiff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Input\n    # arr = [1,4,3,2,8,5]\n    # n = 6\n    # Output\n    # minDiff = 6\n    arr = sorted(arr)\n    n = len(arr)\n    minDiff = arr[0] - arr[1]\n    for i in range(2, n):\n        minDiff = min(minDiff, arr[i] - arr[i-1])\n    return minDiff\n    \ndef minDiff_index(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Input\n    # arr = [1,4,3,2,8,5]\n    # n = 6\n    # Output\n    # minDiff = 6\n    arr = sorted(arr)\n    n = len(arr)\n    minDiff = arr[0] - arr[1]\n    for i in range(2, n):\n        minDiff = min(minDiff, arr[i] - arr[i-1])\n    return minDiff\n    \ndef minDiff_idx(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Input\n    # arr = [1,4,3,2,8,5]\n    # n = 6\n    # Output\n    # minDiff = 6\n    arr = sorted(arr)\n    n = len(arr)\n    minDiff = arr[0] - arr[1]\n    for i in range(2, n):\n        minDiff = min(minDiff, arr[i] - arr[i-1])\n    return minDiff\n",
        "num_ids": 108
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    def find_min(arr,l,h): \n        if l > h: \n            return 0\n        mid = (l + h)//2\n        if arr[mid] == mid: \n            return mid \n        elif arr[mid] < mid: \n            return find_min(arr,mid + 1,h) \n        else: \n            return find_min(arr,l,mid - 1) \n    return find_min(arr,0,n-1) \nprint(find_min_diff([1,3,2,5,6,4],4))\n",
        "num_ids": 143
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0:\n        return arr[0]\n    elif n == 1:\n        return arr[0]\n    else:\n        return find_min_diff(arr[1:n],n-1) - arr[0]\n",
        "num_ids": 59
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if (n < 2):\n        return n\n    else:\n        return find_min_diff(arr,n-1) - find_min_diff(arr,n-2)\n",
        "num_ids": 46
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr_min_diff = sys.maxsize\n    i = 0\n    j = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == 0:\n                continue\n            else:\n                arr_min_diff = min(arr_min_diff, abs(arr[i] - arr[j]))\n    return arr_min_diff\n",
        "num_ids": 106
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    # create a temp list\n    temp_list = []\n    \n    # calculate the length of the array \n    length = len(arr)\n    \n    # process till the end\n    for i in range(0,length-1):\n        # insert the element at the end of the list\n        temp_list.append(arr[i])\n        # insert the element at the beginning of the list\n        temp_list.insert(0,arr[i+1])\n        \n    # return the first element in the array\n    return temp_list[0]\n",
        "num_ids": 133
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Let min be the minimum between two elements\n    min = arr[0]\n    # Start at 1st element and keep track of min\n    for i in range(1,n):\n        min = arr[i] - min\n        # if min is the same, return it\n        if min == arr[i]:\n            return arr[i]\n    # if not found, return '0'\n    return '0'",
        "num_ids": 98
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # find the largest element\n    min_index = 0\n    min_value = arr[0]\n    for i in range(n):\n        if min_value > arr[i]:\n            min_value = arr[i]\n            min_index = i\n    \n    # find the smallest element\n    max_index = n-1\n    max_value = arr[n-1]\n    for i in range(n-1,0,-1):\n        if max_value < arr[i]:\n            max_value = arr[i]\n            max_index = i\n    \n    # find the two values\n    diff_value = arr[min_index] - arr[max_index]\n    \n    # return the two values\n    return diff_value\n",
        "num_ids": 179
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    # Split the string into each character\n    for i in str:\n        if i.isdigit():\n            digits += 1\n        else:\n            break\n    return digits\n",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    counter = 0\n    for char in str:\n        if char.isdigit():\n            counter += 1\n    return counter\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # Hash Map to store the hash value of a string\n    d = dict()\n    \n    # Loop through the string\n    for char in str:\n        # Add the char if it's in the dictionary\n        if char in d:\n            # Increment the value by 1\n            d[char] += 1\n        else:\n            # Add the char\n            d[char] = 1\n    # Get the number of digits from the dictionary\n    number_of_digits = len(str) - len(d)\n    # Return the number of digits\n    return number_of_digits\n",
        "num_ids": 137
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    lst = [i for i in str if i.isdigit()]\n    return len(lst)\n",
        "num_ids": 29
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2017
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (n+1) % 10 == 1\n",
        "num_ids": 14
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return True\n",
        "num_ids": 13
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    \n    if n < 0:\n        return 0\n    \n    n = n % (10**9+7)\n    if n == 0:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 60
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            return False\n        divisor += 1\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: return True\n    elif n < 0: return False\n    else:\n        num_1 = pow(n, 2)\n        num_2 = math.sqrt(num_1)\n        return pow(num_1, 3) == num_2 and pow(num_1, 2) == num_2\n",
        "num_ids": 80
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return True if n % 2 == 1 else False \n",
        "num_ids": 15
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 3 == 1:\n        return 2\n    if n % 3 == 2:\n        return 3\n    if n % 3 == 0:\n        return 4\n",
        "num_ids": 63
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while i < n:\n        if n % i == 0:\n            print(i)\n            n //= i \n            i = 1 \n            continue \n        i += 1 \n    return n \n",
        "num_ids": 57
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # n is odd or even\n    if n % 2 == 0: \n        # n odd\n        if n == 1: \n            return 0\n        # n even\n        return 1\n    # n odd\n    else:\n        # n even\n        if n == 2:\n            return 1\n        # n even\n        return 2\n    \ndef prime_factors(n):\n    '''\n    Find prime factors of n.\n    '''\n    # n is odd or even\n    if n % 2 == 0: \n        # n odd\n        return [2]\n    # n even\n    else:\n        # n even\n        return [3, 5]\n    \ndef is_prime(n): \n    '''\n    Return True if n is prime.\n    '''\n    # Check if n is a prime number\n    # Only odd numbers\n    if n % 2 == 0: \n        # n odd\n        return False\n    # n even\n    else: \n        # n even\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if n % i == 0: \n                return False\n        # n even\n        return True\n        \ndef lcm(x,y):\n    '''\n    Find the least common multiple.\n    '''\n    # Check for primes\n    if is_prime(x) and is_prime(y): \n        return math.gcd(x,y)\n    else:\n        return 1\n    \ndef gcd(a, b): \n    '''\n    Find the Greatest Common Divisor of a and b. \n    '''\n    while a % b!= 0: \n        a = b \n        b = a % b\n    return b \n",
        "num_ids": 31
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n + 1 if n % 2 == 0 else n - 1\n",
        "num_ids": 18
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x, l1.index(x)) for x in l1 if x in l1[::-1]]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        if l1[i]==l1[i+1]:\n            continue\n        else:\n            l.append((l1[i],l1[i+1]))\n    return l\n",
        "num_ids": 67
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        if l1[i] == l1[i + 1] and l1[i] not in pairs:\n            pairs.append([l1[i], l1[i + 1]])\n    return pairs\n",
        "num_ids": 73
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j]:\n                l2.append((l1[i], l1[j]))\n    return l2\n",
        "num_ids": 75
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 2:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            s.append((l1[i],l1[j]))\n    return s\n",
        "num_ids": 58
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    count = 0\n    lst = []\n    for i in l1:\n        if count == 0:\n            lst.append([i, i])\n            count += 1\n        elif count % 2 == 1:\n            lst.append([i, i])\n        elif count % 2 == 0:\n            lst.append([i, i])\n            count += 1\n    return lst\n",
        "num_ids": 96
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        if i >= 1:\n            if l1[i] == l1[i-1]:\n                pairs.append((l1[i], l1[i]))\n            else:\n                pairs.append((l1[i], l1[i-1]))\n    return pairs\n",
        "num_ids": 90
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Empty list to store pairs\n    li = []\n    # While there are items left in the list\n    while len(l1) > 0:\n        # Start at the last index of the list\n        index = len(l1) - 1\n        # Get the last item in the list\n        item = l1[index]\n        # If the item is greater than the current item\n        if item > l1[index - 1]:\n            # Store the index of the item\n            index_i = index - 1\n            # Check if the current item is equal to the previous item\n            # If so, append the index of the previous item as the pair\n            while index_i > 0 and item < l1[index_i]:\n                li.append((l1[index_i], index_i))\n                # The item at the index itself is equal to the previous item\n                index_i = index_i - 1\n            # When the item is less than the previous item, append the item as the pair\n            while index_i > 0 and item > l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n        # If the item is less than the current item\n        elif item < l1[index]:\n            # Store the index of the item\n            index_i = index - 1\n            # Check if the current item is equal to the previous item\n            # If so, append the index of the previous item as the pair\n            while index_i > 0 and item < l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n            # When the item is greater than the previous item, append the item as the pair\n            while index_i > 0 and item > l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n        # If the item is equal to the previous item\n        elif item == l1[index - 1]:\n            # Store the index of the item\n            index_i = index - 1\n            # Check if the current item is equal to the previous item\n            # If so, append the index of the previous item as the pair\n            while index_i > 0 and item == l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n            # When the item is greater than the previous item, append the item as the pair\n            while index_i > 0 and item > l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n        # If the item is equal to the previous item\n        elif item == l1[index]:\n            # Store the index of the item\n            index_i = index - 1\n            # Check if the current item is equal to the previous item\n            # If so, append the index of the previous item as the pair\n            while index_i > 0 and item == l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n            # When the item is less than the previous item, append the item as the pair\n            while index_i > 0 and item < l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n            # When the item is greater than the previous item, append the item as the pair\n            while index_i > 0 and item > l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n        # If the item is less than the previous item\n        elif item < l1[index]:\n            # Store the index of the item\n            index_i = index - 1\n            # Check if the current item is equal to the previous item\n            # If so, append the index of the previous item as the pair\n            while index_i > 0 and item < l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n            # When the item is greater than the previous item, append the item as the pair\n            while index_i > 0 and item > l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n            # When the item is less than the previous item, append the item as the pair\n            while index_i > 0 and item < l1[index_i]:\n                li.append((l1[index_i], index_i))\n                index_i = index_i - 1\n    # If the list is empty\n    if len(l1) == 0:\n        return []\n    return li\n",
        "num_ids": 1163
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # [x,y] - list index pair\n    \n    pair_list = []\n    \n    for i in range(len(l1) - 1):\n        if i!= len(l1) - 1:\n            pair_list.append([l1[i], l1[i + 1]])\n        \n    return pair_list\n    \ndef intersection(l1, l2):\n    '''\n    Write a function to return a list of all unique elements in a given list.\n    '''\n    \n    pair_list = []\n    \n    for item in l1:\n        pair_list.append([item, l1.count(item)])\n    \n    for item in l2:\n        if item not in pair_list:\n            pair_list.append([item, l2.count(item)])\n    \n    return pair_list\n    \ndef pair_list_length(l1, l2):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # [x,y] - list index pair\n    \n    pair_list = []\n    \n    for i in range(len(l1) - 1):\n        if i!= len(l1) - 1:\n            pair_list.append([l1[i], l1[i + 1]])\n        \n    return pair_list\n    \ndef union(l1, l2):\n    '''\n    Write a function to return a list of all unique elements in a given list.\n    '''\n    # [x,y] - list index pair\n    \n    unions = []\n    \n    for i in range(len(l1) - 1):\n        if i!= len(l1) - 1:\n            if l1[i] not in l1 and l2[i] not in l1:\n                unions.append([l1[i], l2[i]])\n    \n    return unions\n    \ndef minimum(l1, l2):\n    '''\n    Write a function to return the minimum element in a given array.\n    '''\n    # [x,y] - list index pair\n    \n    min_index = l1[0]\n    \n    for i in range(1, len(l1)):\n        if l1[i] < min_index:\n            min_index = l1[i]\n    \n    return min_index\n    \ndef maximum(l1, l2):\n    '''\n    Write a function to return the maximum element in a given array.\n    '''\n    # [x,y] - list index pair\n    \n    max_index = l1[0]\n    \n    for i in range(1, len(l1)):\n        if l1[i] > max_index:\n            max_index = l1[i]\n    \n    return max_index\n    \ndef average(l1, l2):\n    '''\n    Write a function to return the average of a given array.\n    '''\n    # [x,y] - list index pair\n    \n    average = 0\n    \n    for i in range(len(l1)):\n        average += l1[i]\n        \n    average /= len(l1)\n    \n    return average\n    \ndef average_elements(l1, l2):\n    '''\n    Write a function to return the average of a given array.\n    '''\n    # [x,y] - list index pair\n    \n    if len(l1) == 0:\n        return 0\n    \n    return average(l1, l2)\n    \ndef unique(l1):\n    '''\n    Write a function to return a list of all unique elements in a given list.\n    '''\n    # [x,y] - list index pair\n    \n    unique_list = []\n    \n    for item in l1:\n        if item not in unique_list:\n            unique_list.append(item)\n    \n    return unique_list\n    \ndef sort_elements(l1):\n    '''\n    Write a function to return a list of all elements in a given list, in order.\n    '''\n    # [x,y] - list index pair\n    \n    sorted_list = []\n    \n    for i in range(len(l1)):\n        sorted_list.append(l1[i])\n        \n    return sorted_list\n    \ndef radix_sort(l1):\n    '''\n    Write a function to return a list of all elements in a given list, in order, using\n    a different sorting algorithm. The number of digits should be a multiple of the\n    radix of the sorting algorithm.\n    '''\n    # [x,y] - list index pair\n    \n    radix = 10\n    \n    for i in range(len(l1)):\n        number = l1[i]\n        digit = len(str(number))\n        \n        if digit == len(str(number)):\n            radix = i\n            break\n            \n    digits = []\n    for i in range(digit):\n        digits.append([])\n        \n    for i in range(digit):\n        for j in range(len(l1)):\n            digit = len(str(l1[j]))\n            \n            if digit == len(str(l1[j])):\n                digits[i].append(l1[j])\n                \n    for i in range(len(digits)):\n        for j in range(len(digits[i])):\n            l1[i] = digits[i][j]\n    \n    return l1\n    \ndef selection_sort(l1):\n    '''\n    Write a function to return a list of all elements in a given list, in order, using\n    a different sorting algorithm. The number of digits should be a multiple of the\n    selection sorting algorithm.\n    '''\n    # [x,y] - list index pair\n    \n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    for i in range(len(l1)):\n        min_index = digits[i]\n        \n        for j in range(i, len(digits)):\n            if digits[j] < min_index:\n                min_index = digits[j]\n                \n        digits[i] = min_index\n    \n    return digits\n    \ndef insertion_sort(l1):\n    '''\n    Write a function to return a list of all elements in a given list, in order, using\n    a different sorting algorithm. The number of digits should be a multiple of the\n    insertion sorting algorithm.\n    '''\n    # [x,y] - list index pair\n    \n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    for i in range(1, len(digits)):\n        for j in range(i, len(digits)):\n            if digits[j] < digits[j - 1]:\n                digits[j - 1] = digits[j]\n                \n    return digits\n    \ndef bubble_sort(l1):\n    '''\n    Write a function to return a list of all elements in a given list, in order, using\n    a different sorting algorithm. The number of digits should be a multiple of the\n    bubble sorting algorithm.\n    '''\n    # [x,y] - list index pair\n    \n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    for i in range(len(l1)):\n        for j in range(len(digits)):\n            if digits[j] < digits[j - 1]:\n                digits[j - 1] = digits[j]\n                \n    return digits\n    \ndef shell_sort(l1):\n    '''\n    Write a function to return a list of all elements in a given list, in order, using\n    a different sorting algorithm. The number of digits should be a multiple of the\n    shell sorting algorithm.\n    '''\n    # [x,y] - list index pair\n    \n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    for i in range(len(l1)):\n        mid = len(digits) // 2\n        \n        for j in range(mid, len(digits)):\n            if digits[j] > digits",
        "num_ids": 93
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                counter += 1\n    return counter\n",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    sum = list(set(sum))\n    sum_list = [sum[0]]\n    for i in range(1, len(sum)):\n        if sum[i] == sum[i-1]:\n            sum_list.append(sum[i])\n    pairs_count = 0\n    for pair in list(set(sum_list)):\n        if pair == sum_list[-1]:\n            pairs_count += 1\n    return pairs_count\n",
        "num_ids": 111
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    c = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] + arr[i+1] == sum:\n            c+=1\n    return c",
        "num_ids": 51
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    total = 0\n    i = 0\n    while i < len(arr)-1:\n        total += arr[i] - arr[i+1]\n        i+=1\n    if sum == total:\n        return total\n    return -1\n",
        "num_ids": 65
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if(sum == arr[i]):\n            count += 1\n        if(sum > arr[i]):\n            break\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i]+arr[j]:\n                pairs.append([arr[i], arr[j]])\n    return len(pairs)\n",
        "num_ids": 73
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l = len(li1)\n    l2 = len(li2)\n    li = []\n    if l2>l:\n        for x in range(l2):\n            if x%l==0:\n                li.append(li2[x])\n        return li\n    else:\n        for i in range(l):\n            if i%l==0:\n                li.append(li1[i])\n        return li\n",
        "num_ids": 105
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    list1 = []\n    list2 = []\n    if type(li1)==list:\n        list1=li1\n        list2=li2\n    elif type(li1)==set:\n        list1 = list(set(li1))\n    else:\n        list1 = li1\n    if type(li2)==list:\n        list2=li2\n        list1 = list(set(list2)-set(list1))\n    elif type(li2)==set:\n        list2 = list(set(list2)-set(list1))\n    else:\n        list2 = list2\n    return list1,list2\n",
        "num_ids": 157
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)==len(li2):\n        li1_diff=[]\n        li2_diff=[]\n        i=0\n        while i<len(li1):\n            if li1[i]!=li2[i]:\n                li1_diff.append(li1[i])\n                li2_diff.append(li2[i])\n            else:\n                i=i+1\n        return li1_diff,li2_diff\n    else:\n        raise ValueError('Invalid Input')\n",
        "num_ids": 126
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # your code goes here\n    return li1[0] - li2[0]\n",
        "num_ids": 23
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1_diff = [x for x in li1 if x not in li2]\n    li2_diff = [x for x in li2 if x not in li1]\n    li3_diff = set(li1_diff).intersection(set(li2_diff))\n    li3_diff = sorted(li3_diff)\n    return li3_diff\n",
        "num_ids": 89
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n        \n    \nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [1,2,3,4,5,6,7,8,9]\nprint(Diff(li1,li2))\n",
        "num_ids": 97
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1) == len(li2):\n        li1 = li1[:-1] + [li1[-1]]\n    elif len(li1) > len(li2):\n        li2 = li2[:-1] + [li2[-1]]\n    else:\n        li2 = li2[:-1] + [li2[-1]]\n    return li1, li2\n",
        "num_ids": 100
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if li1 == [] or li2 == []:\n        return []\n    if len(li1) == len(li2):\n        return li1[:]\n    return li1[:] + li2[:]\n",
        "num_ids": 52
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1=list(li1)\n    li2=list(li2)\n    li3=[]\n    for i in li2:\n        li3.append(i)\n    li4=[]\n    for i in li1:\n        li4.append(i)\n    return li4\n",
        "num_ids": 73
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    li = []\n    for i in li1:\n        li.append(i)\n    for i in li2:\n        li.append(i)\n    for i in range(len(li)):\n        for j in range(i+1,len(li)):\n            if li[i] == li[j]:\n                result.append(li[i])\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if n % 2 == 0 : \n        n -= 1\n        n = n*3\n    return n+odd_num_sum(n)\n    \ndef odd_num_sum(",
        "num_ids": 54
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n) : \n        if i % 2 == 0 : \n            s += i ** 4\n    return s \n",
        "num_ids": 40
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    return odd_num_sum(n-1) + odd_num_sum(n-2) + odd_num_sum(n-3) + odd_num_sum(n-4)\n",
        "num_ids": 70
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0:\n        return -1\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i**3\n    return sum\nprint(odd_num_sum(5))\n",
        "num_ids": 60
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(n+1) : \n        sum = sum + (4*x)**2\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    a = int(input(\"Enter the number of natural numbers to find: \"))\n    i = 1\n    while (i<=a):\n        print(f\"{i} is {i**3}\")\n        i=i+1\n    return n**3\n",
        "num_ids": 64
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum = sum + (4**i)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        print('Please enter a positive integer.')\n    elif n > 0 : \n        # sum of 3 natural numbers\n        sum_of_3 = 0\n        for i in range(1, n+1) : \n            if i % 3 == 0:\n                sum_of_3 += i\n        print(sum_of_3)\n",
        "num_ids": 90
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n==0:\n        return 0\n    elif n%2==0:\n        return n*odd_num_sum(n-1)\n    else:\n        return odd_num_sum(n-1)\n",
        "num_ids": 55
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n * n * n + n * n * n * n\n",
        "num_ids": 18
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def balanced(string):\n        open_brackets = ['(', '[', '{']\n        closed_brackets = [')', ']', '}']\n        stack = []\n        for char in string:\n            if char in open_brackets:\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                elif char == stack[-1]:\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    stack = deque()\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            elif char == stack[-1]:\n                stack.pop()\n            else:\n                return False\n    return balanced(string=exp)\n",
        "num_ids": 206
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # convert given expression to a deque\n    expression = deque(exp)\n",
        "num_ids": 21
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pos = 0\n    # pos= 0\n    # while pos <= len(exp):\n    #     if exp[pos] in ['(', ')', '{', '}']:\n    #         pos += 1\n    #     else:\n    #         pos += 1\n    #         if exp[pos] =='':\n    #             pos += 1\n    #         else:\n    #             break\n",
        "num_ids": 96
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 1: return True\n    else:\n        while len(exp)!= 0:\n            if exp[0] == '(':\n                exp = exp[1:]\n            else:\n                if exp[-1]!= '(':\n                    return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 1:\n        return True\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return len(stack) == 0\n",
        "num_ids": 88
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    parenthesis = {\n        ')': '(',\n        '}': \"{\",\n        ']': '[',\n        ']' : '['\n    }\n",
        "num_ids": 45
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 86
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in '({[':\n            stack.append(i)\n        elif i in ')}]':\n            if not stack:\n                return False\n            stack.pop()\n        else:\n            return False\n    if not stack:\n        return True\n    return False\n",
        "num_ids": 81
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == '(':\n                    continue\n                else:\n                    return False\n    if len(stack)!= 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 101
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if len(stack) == 0:\n                return 'NO'\n            else:\n                if not stack[len(stack) - 1] == '(':\n                    return 'NO'\n                else:\n                    stack.pop()\n        else:\n            return 'NO'\n    if len(stack)!= 0:\n        return 'NO'\n    return 'YES'\n",
        "num_ids": 124
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    pass\n    \n    pas",
        "num_ids": 15
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def remove_length_test(s,k):\n        # if k is 0 or less then do nothing\n        if k <= 0 or len(s) < k:\n            return s\n        # if k is greater then remove all words starting with first word of string s\n        if len(s) >= k:\n            return remove_length_test(s[1:],k)\n",
        "num_ids": 89
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    res = []\n    for i in test_str:\n        if len(i) == K:\n            res.append(i)\n    return ''.join(res)\n",
        "num_ids": 45
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def remove(string, n):\n        l = string[:n]\n        return l\n",
        "num_ids": 24
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) <= K:\n        return test_str\n    else:\n        return \"Error\"\n",
        "num_ids": 30
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = []\n    n = len(test_str)\n    for i in range(n):\n        for j in range(n-i-1):\n            if len(test_str[j:j+K]) > K:\n                break\n        else:\n            result.append(test_str[j:j+K])\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == '':\n        return ''\n    else:\n        return remove_length_2(test_str, K)\n",
        "num_ids": 34
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    for i in range(len(test_str)):\n        for j in range(i, len(test_str)):\n            if len(test_str[i]) == K:\n                test_str.remove(test_str[i])\n                break\n    return \" \".join(test_str)",
        "num_ids": 87
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    str_split = re.findall(pattern,text)\n    if len(str_split) == 0:\n        return None\n    else:\n        for i in range(len(str_split)):\n            if i == len(str_split)-1:\n                return str_split[i]\n    return None\ndef occurrence_substring_dict(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    str_split = re.findall(pattern,text)\n    if len(str_split) == 0:\n        return None\n    else:\n        for i in range(len(str_split)):\n            if i == len(str_split)-1:\n                return str_split[i]\n    return None\n",
        "num_ids": 77
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern.lower() in text.lower():\n        print(\"The substring was found at position : \",pattern.lower().index(text.lower().replace(\" \",\"\")) )\n        return pattern.lower().index(text.lower().replace(\" \",\"\"))\n    else:\n        return None\n    \ndef occurence_substring2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text.lower():\n        print(\"The substring was found at position : \",pattern.lower().index(text.lower().replace(\" \",\"\")) )\n        return pattern.lower().index(text.lower().replace(\" \",\"\"))\n    else:\n        return None\n",
        "num_ids": 66
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # your code here\n    if not pattern:\n        return None\n    start = 0\n    end = len(text) - 1\n    m = None\n    for i in range(len(pattern)):\n        if pattern[i]!= '?':\n            if m is None:\n                m = i\n            else:\n                if text[m] == pattern[i] and end >= m:\n                    end = m\n        else:\n            if m is None:\n                m = i\n            else:\n                if text[m] == pattern[i] and start <= m:\n                    start = m\n    if m is None:\n        return None\n    else:\n        return text[m:end + 1]\n",
        "num_ids": 168
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #Examples:\n    #occurance_substring('saturday','s')\n    #return'saturday'\n    #occurance_substring('kitty','k')\n    #return 'k'\n    return None\n",
        "num_ids": 53
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find the start index of the substring\n    start_index = find_substring_start(text,pattern)\n    # find the end index of the substring\n    end_index = find_substring_end(text,pattern)\n    # if the substring is found return True\n    return None if start_index is None or end_index is None else True if start_index < end_index else False\n",
        "num_ids": 97
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    # define the search pattern\n    search_pattern = re.compile(pattern)\n    # create a pattern for the search\n    pattern = re.compile(pattern)\n    # find all the occurance of the pattern\n    match = search_pattern.finditer(text)\n    for i in match:\n        # check the positions\n        if i.start()>0 and i.end()<len(text):\n            yield i.start(),i.end()\n    return None\n        \ndef main():\n    # choose a file name\n    file_name = input('Please enter a filename: ')\n    # read the file and choose the words in the file\n    with open(file_name, 'r') as f:\n        text = f.read()\n    # define the pattern\n    pattern = input('Please enter a pattern: ')\n    # find the occurrences\n    occurances = occurance_substring(text,pattern)\n    if occurances is not None:\n        for i in occurances:\n            print(f'{i[0]} occurs at {i[1]}')\n        # input('Enter to end...')\n    else:\n        print('No matching substring')\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 295
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_compile = re.compile(pattern)\n    matches = pattern_compile.finditer(text)\n    for match in matches:\n        if match.start() == match.end():\n            return None\n    return matches\n",
        "num_ids": 58
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = ''.join(c for c in text if c not in'')\n    pos = text.find(pattern)\n    if pos == -1:\n        return None\n    else:\n        return pos,pos+len(pattern)\ndef count_substring(text,pattern):\n    '''\n    Write a function to count the number of the substrings within a string.\n    '''\n    count = 0\n    pos = occurance_substring(text,pattern)\n    while pos!= -1:\n        count+=1\n        pos = occurance_substring(text,pattern)\n    return count\ndef main():\n    '''\n    Read the file path and call the count_substring function.\n    '''\n    text = input(\"Enter the file path: \")\n    pattern = input(\"Enter the pattern: \")\n    res = count_substring(text,pattern)\n    print(\"Pattern:\",pattern,\"\\nNumber of substrings:\",res)\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 75
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res=re.findall(pattern,text)\n    if len(res)>0:\n        for i in range(len(res)):\n            start=res[i][0]\n            end=res[i][1]\n            start=res[i][0]\n            start=res[i][1]\n            return start,end\n    else:\n        return None\n",
        "num_ids": 91
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not text:\n        return None\n    if len(pattern) == 1:\n        if re.search(pattern[0],text):\n            return text\n    else:\n        text_start = text.find(pattern[0])\n        text_end = text.find(pattern[1])\n        if text_start >= 0 and text_end >= 0:\n            return text[text_start:text_end + len(pattern[1])]\n        else:\n            return None\n",
        "num_ids": 114
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    print(nums)\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            print(nums[i])\n            return False\n    print(\"All is odd\")\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if(nums[i]%2!=0):\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if nums[index] % 2 == 1:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[index % 2] % 2 == 0 for index in range(len(nums)))\n",
        "num_ids": 28
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            odd += 1\n            if odd > 1:\n                return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(i%2 == 1 for i in nums)",
        "num_ids": 17
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    # loop through each character\n    for char in test_str:\n        # if a letter is a vowel\n        if char in 'aeiou':\n            count += 1\n        # if a letter is a consonant\n        else:\n            # if a letter is a vowel, then it's a neighbor\n            if char in 'aeiou':\n                count += 1\n    return count\n",
        "num_ids": 95
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    s = ''\n    for i in test_str:\n        if i in vowels:\n            s += i\n    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')\n",
        "num_ids": 77
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    my_str = test_str.lower()\n    counter = 0\n    vowels_counter = 0\n    for letter in my_str:\n        if letter in 'aeiou':\n            if letter == 'a':\n                vowels_counter += 1\n            elif letter == 'e':\n                vowels_counter += 1\n            elif letter == 'i':\n                vowels_counter += 1\n            elif letter == 'o':\n                vowels_counter += 1\n            elif letter == 'u':\n                vowels_counter += 1\n        if letter == 'y':\n            counter += 1\n    print(vowels_counter, counter)\n",
        "num_ids": 161
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count_vowels_dict = {}\n    \n    for char in test_str:\n        if char in vowels:\n            count_vowels_dict[char] = count_vowels_dict.get(char, 0) + 1\n    return count_vowels_dict\n",
        "num_ids": 92
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    for char in test_str:\n        if char in 'aeiou':\n            vowels_count += 1\n    return vowels_count\n",
        "num_ids": 46
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in test_str:\n        if i in 'aeiou':\n            vowels += 1\n    return vowels\n",
        "num_ids": 40
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    cnt = 0\n    for c in test_str:\n        if c.isalpha():\n            if c.isupper():\n                if c.islower():\n                    cnt += 1\n    return cnt\n",
        "num_ids": 64
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # convert to lowercase\n    test_str = test_str.lower()\n    # get the unique letters\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    # create the vowel count array\n    vowel_count = [0]*26\n    # iterate through the test string\n    for c in test_str:\n        # get the index of the letter\n        idx = ord(c) - ord('a')\n        # if the letter is a vowel\n        if idx in vowels:\n            # increment the value of the vowel count array\n            vowel_count[idx] += 1\n    # return the vowel count\n    return vowel_count\n    ",
        "num_ids": 170
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    vowels_count = 0\n    for vowel in vowels:\n        if test_str.count(vowel) > 0:\n            vowels_count += 1\n    return vowels_count",
        "num_ids": 88
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "num_ids": 11
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    def find_sum(arr):\n        '''\n        Write a python function to find the sum of non-repeated elements in a given list.\n        '''\n        start = 0\n        sum = 0\n        for i in range(len(arr)):\n            if (arr[i]!= arr[start]):\n                start = i+1\n                sum = sum + arr[i]\n        return sum\n    return find_sum(arr)\n",
        "num_ids": 69
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(set(arr))\n    for i in arr:\n        if arr.count(i)!= arr.count(i):\n            return i\n",
        "num_ids": 39
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([i for i in arr if arr.count(i)>1])\n",
        "num_ids": 22
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    new_list = []\n    for i in arr:\n        if i not in new_list:\n            new_list.append(i)\n    sum = 0\n    for i in new_list:\n        sum = sum + i\n    return sum\n",
        "num_ids": 61
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    num_list = []\n    for num in arr:\n        if num not in num_list:\n            num_list.append(num)\n    return len(num_list)\n",
        "num_ids": 45
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Efficient solution:\n    # set of non-repeated elements = set(arr).\n    # sum of non-repeated elements = 0\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    #  \n    #  \n    #  SOLUTION:\n    #  dict = {}\n    #  for i in arr:\n    #      if i in dict:\n    #          dict[i] = dict[i]+1\n    #      else:\n    #          dict[i] = 1\n    #  return sum(dict.values())\n",
        "num_ids": 139
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in sum:\n            sum += i\n    return sum\n    \nif __name__ == '__main__':\n    print('Example 1:')\n    print('Input : ')\n    print('arr = [1,2,5,4,4,4,3]')\n    print('Exception :')\n    print('3')\n    print('Output :')\n    print(find_sum([1,2,5,4,4,4,3]))\n    print()\n",
        "num_ids": 129
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #append the list to the list\n    arr.sort()\n    print(arr)\n    return sum(arr)\n",
        "num_ids": 30
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return 0\n    count = dict()\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return sum(count.values())\n",
        "num_ids": 65
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    dups = []\n    for group in groupby(list1):\n        dups.append(list(group))\n",
        "num_ids": 30
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for x in list1:\n        if x not in result:\n            result.append(x)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1, lambda x: x in x)\n    consecutive_duplicates_list = [list(group) for key, group in grouped_list]\n",
        "num_ids": 48
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) < 2:\n        return list1\n    \n    result = []\n    i = 0\n    while i < len(list1):\n        prev = list1[i]\n        if prev in list1[i+1:] and prev not in result:\n            i+=1\n        else:\n            result.append(prev)\n            i+=1\n    return result\n",
        "num_ids": 93
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    ans = []\n    for i in range(len(list1)):\n        # group = groupby(list1[i:], key=len)\n        group = list(groupby(list1[i:]))\n        for j in range(len(list1) - i):\n            if list1[i + j] == list1[i + j + 1]:\n                ans.append([list1[i + j], list1[i + j + 1]])\n                # break\n",
        "num_ids": 115
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    i = 0\n    for j in range(len(list1)):\n        if j == len(list1) - 1:\n            result.append(list1[i:])\n        elif list1[j] == list1[j + 1]:\n            if j!= len(list1) - 1:\n                result.append(list1[i:j + 1])\n                i = j + 1\n            else:\n                result.append(list1[i:])\n                i = 0\n        else:\n            result.append(list1[i:j + 1])\n            i = j + 1\n    return result\n",
        "num_ids": 154
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    new_list2 = []\n    for n in list1:\n        n = str(n)\n        n2 = []\n        for i in range(0, len(n)-1):\n            if n[i] == n[i+1]:\n                n2.append(n[i])\n            else:\n                n2.append(n[i])\n        new_list.append(n2)\n    for n2 in new_list:\n        if len(n2) > 1:\n            for i in range(0, len(n2)-1):\n                if n2[i] == n2[i+1]:\n                    n2[i] = n2[i+1]\n                else:\n                    n2[i] = n2[i+1]\n    return new_list\ndef sublists(l):\n    '''\n    The sublists of a list are a list of lists. \n    For each list we can use the following rule:\n    '''\n    if len(l) <= 1:\n        return [[l[0]]]\n    else:\n        sublists = []\n        for i in range(0, len(l)):\n            for j in range(i+1, len(l)):\n                sublists.append(l[i] + l[j])\n        return sublists\ndef count_consecutive_duplicates(list1):\n    '''\n    Count the number of consecutive duplicates of elements in a list. \n    '''\n    print(list1)\n    temp_list = []\n    for i in range(0, len(list1)):\n        n = 0\n        for j in range(0, len(list1)):\n            if list1[i] == list1[j]:\n                n += 1\n        temp_list.append(n)\n    return sum(temp_list)\ndef count_consecutive_duplicates2(list1):\n    '''\n    Count the number of consecutive duplicates of elements in a list.\n    '''\n    temp_list = []\n    for i in range(0, len(list1)):\n        n = 0\n        for j in range(0, len(list1)):\n            if list1[i] == list1[j]:\n                n += 1\n        temp_list.append(n)\n    return sum(temp_list)\ndef check_sorted(list1):\n    '''\n    Check if list1 is sorted.\n    '''\n    for i in range(0, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\ndef is_duplicate(n, count, n1, n2):\n    '''\n    Is the given number n duplicated?\n    '''\n    if count == 0:\n        return True\n    if count == 1 and (n1!= n2):\n        return True\n    if n == n1:\n        return is_duplicate(n, count-1, n1, n2)\n    return is_duplicate(n, count-1, n1, n2) or is_duplicate(n, count-1, n1, n2) or is_duplicate(n, count-1, n2, n1)\ndef is_consecutive(n, count, n1, n2):\n    '''\n    Is the given number n consecutive?\n    '''\n    if count == 0:\n        return True\n    if count == 1 and (n1!= n2):\n        return True\n    if n == n1:\n        return is_consecutive(n, count-1, n1, n2)\n    if n == n2:\n        return is_consecutive(n, count-1, n1, n2)\n    return is_consecutive(n, count-1, n1, n2) or is_consecutive(n, count-1, n2, n1)\ndef count_consecutive_duplicates_sorted(list1):\n    '''\n    Count the number of consecutive duplicates of elements in a list. \n    '''\n    count = 0\n    for n in list1:\n        count += 1\n        if check_sorted(list1):\n            if is_duplicate(n, count, list1[0], list1[-1]):\n                count -= 1\n    return count\ndef count_consecutive_duplicates_sorted2(list1):\n    '''\n    Count the number of consecutive duplicates of elements in a list. \n    '''\n    count = 0\n    for n in list1:\n        count += 1\n        if check_sorted(list1):\n            if is_consecutive(n, count, list1[0], list1[-1]):\n                count -= 1\n    return count\ndef dup_group(list1):\n    '''\n    A list is a group of elements. \n    The group is a list of lists. \n    Elements in a group are the same, but with different elements.\n    '''\n    list1_group = []\n    for i in range(0, len(list1)-1):\n        n = list1[i]\n        k = list1[i+1]\n        if n!= k:\n            list1_group.append([n, k])\n    return list1_group\ndef group_dup_group(list1):\n    '''\n    A list is a group of elements. \n    The group is a list of lists. \n    Elements in a group are the same, but with different elements.\n    '''\n    list1_group = []\n    for i in range(0, len(list1)-1):\n        n = list1[i]\n        k = list1[i+1]\n        if n == k:\n            list1_group.append([n, k])\n        else:\n            list1_group.append([n, k])\n    return list1_group\ndef group_dup_group_sorted(list1):\n    '''\n    A list is a group of elements. \n    The group is a list of lists. \n    Elements in a group are the same, but with different elements.\n    '''\n    list1_group = []\n    for i in range(0, len(list1)-1):\n        n = list1[i]\n        k = list1[i+1]\n        if n!= k:\n            list1_group.append([n, k])\n    return list1_group\ndef group_dup_group2(list1):\n    '''\n    A list is a group of elements. \n    The group is a list of lists. \n    Elements in a group are the same, but with different elements.\n    '''\n    list1_group = []\n    for i in range(0, len(list1)-1):\n        n = list1[i]\n        k = list1[i+1]\n        if n == k:\n            list1_group.append([n, k])\n        else:\n            list1_group.append([n, k])\n            list1_group.append([n, k])\n    return list1_group\ndef group_dup_group2_sorted(list1):\n    '''\n    A list is a group of elements. \n    The group is a list of lists. \n    Elements in a group are the same, but with different elements.\n    '''\n    list1_group = []\n    for i in range(0, len(list1)-1):\n        n = list1[i]\n        k = list1[i+1]\n        if n == k:\n            list1_group.append([n, k])\n        else:\n            list1_group.append([n, k])\n            list1_group.append([n, k])\n            list1_group.append([n, k])\n    return list1_group\ndef duplicate_group(list1):\n    '''\n    A list is a group of elements. \n    The group is a list of lists. \n    Elements in a group are the same, but with different elements.\n    '''\n    list1_group = []\n    for i in range(0, len(list1)-1):\n        n = list1[i]\n        k = list1[i+1]\n        if ",
        "num_ids": 49
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    #create the nested list\n    list2 = []\n    for element in list1:\n        list2.append(element)\n    #iterate over the outer list and append its elements to the inner list\n    for element in list1:\n        list2.append(element)\n    #iterate over the inner list and append the duplicates\n    for element in list1:\n        for index, element in enumerate(list1):\n            if element == element:\n                list2[index] = element\n    return list2\n",
        "num_ids": 124
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack_list = []\n    def recur(list, r, c):\n        if r == len(list):\n            pack_list.append(list)\n            return\n        else:\n            recur(list, r + 1, c)\n            recur(list, r, c + 1)\n    recur(list1, 0, 0)\n    return pack_list\n",
        "num_ids": 91
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    \n    n = len(list1)\n    l = 0\n    r = 0\n    g = 0\n    list_result = []\n    while(r < n):\n        \n        if list1[r] == list1[l]:\n            l += 1\n        else:\n            list_result.append([list1[r], list1[l]])\n            l += 1\n            r += 1\n            g += 1\n        \n        if l == n-1:\n            l = 0\n            r += 1\n            g += 1\n    \n    return list_result\n",
        "num_ids": 138
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        dict[list1[i]] = list1[i]\n    return dict\n",
        "num_ids": 39
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_count = {}\n    if len(list1) <= 1:\n        return unique_count\n",
        "num_ids": 26
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counter = {}\n    for i in list1:\n        for j in i:\n            if j in counter:\n                counter[j] = counter[j] + 1\n            else:\n                counter[j] = 1\n    return counter\n",
        "num_ids": 58
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counter = { }\n    for item in list1:\n        if type(item) is tuple:\n            counter[tuple(item)] = counter.get(tuple(item), 0) + 1\n        else:\n            counter[item] = counter.get(item, 0) + 1\n    return counter\n",
        "num_ids": 74
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        tmp = list(list1[i])\n        tmp.sort()\n        if tmp in result:\n            result[tmp] += 1\n        else:\n            result[tmp] = 1\n    return result\n",
        "num_ids": 68
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Solution:\n    sublists = {}\n    for i in range(len(list1)):\n        sublists[tuple(list1[i])] = sublists.get(tuple(list1[i]), 0) + 1\n    return sublists\n",
        "num_ids": 63
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            for j in range(len(list1[i])):\n                if list1[i][j] in count:\n                    count[list1[i][j]] += 1\n                else:\n                    count[list1[i][j]] = 1\n    return count",
        "num_ids": 94
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique = {}\n    for x in list1:\n        if x not in unique:\n            unique[x] = 1\n        else:\n            unique[x] += 1\n    return unique\n",
        "num_ids": 47
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counter = {}\n    for i in range(0, len(list1)):\n        if list1[i] in counter:\n            counter[list1[i]] += 1\n        else:\n            counter[list1[i]] = 1\n    return counter\n",
        "num_ids": 65
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sub_dict = {}\n    for i in list1:\n        if i not in sub_dict.keys():\n            sub_dict[i] = 1\n        else:\n            sub_dict[i] += 1\n    return sub_dict\n",
        "num_ids": 59
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = list(combinations(test_list,2))\n",
        "num_ids": 19
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    def tuples(s):\n        l = []\n        for i in s:\n            l.append(tuple(i))\n        return l\n    \n    \n    test_list = [tuple(s) for s in test_list]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1970
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    combinations_list = []\n    for i in test_list:\n        combinations_list.append(tuple(combinations(test_list,i)))\n    return combinations_list\n",
        "num_ids": 54
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    temp = []\n    for i in test_list:\n        if len(i) == 1:\n            res.append(tuple(i))\n        else:\n            temp = []\n            for j in range(len(i)):\n                for k in combinations(i, j):\n                    if tuple(k) not in temp:\n                        temp.append(tuple(k))\n            res.append(temp)\n    return res\n",
        "num_ids": 108
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    result_list = list(combinations(test_list,2))\n    return result_list\n",
        "num_ids": 33
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    def recur(k):\n        if len(test_list) == 1:\n            return 1\n        if test_list[-1] == k:\n            return recur(k-test_list[-1]) + recur(k)\n        else:\n            return recur(k-test_list[-1])\n    return recur(test_list[0])\n",
        "num_ids": 103
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list)==1:\n        return (list(test_list[0]))\n    combinations = []\n    for i in range(1,len(test_list)+1):\n        for j in combinations(test_list,i):\n            combinations.append(j)\n    print(combinations)\n    return(combinations)\n",
        "num_ids": 86
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def get_combinations_by_combination(combination, test_list):\n        combinations_found = []\n        for element in test_list:\n            try:\n                if tuple(element) in combination:\n                    combinations_found.append(tuple(element))\n            except:\n                pass\n        return combinations_found\n",
        "num_ids": 80
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    count = 0\n    temp_list = []\n    for i in test_list:\n        temp_list = temp_list + i\n    temp_list = list(temp_list)\n    temp_list.sort()\n    for i in range(len(temp_list)):\n        for j in combinations(temp_list, i + 1):\n            if j not in temp_list:\n                count += 1\n    return count\n",
        "num_ids": 102
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def combination_sum(k,tup):\n        \"\"\"\n        Recursive function to find all possible combination of k sums and tuples in the given tuple\n        \"\"\"\n        if k == 0:\n            return list(tup)\n        else:\n            result = []\n            for i in range(len(tup)):\n                for k2 in range(k):\n                    for comb in combinations(tup,i):\n                        result.append(comb)\n            return result\n    def all_combinations(nums):\n        \"\"\"\n        Return all possible combinations of nums\n        \"\"\"\n        # iterate over all possible combinations of nums\n        return combination_sum(len(nums),tuple(nums))\n    # find all combinations of sums with tuples\n    result = all_combinations(test_list)\n    return result\n",
        "num_ids": 195
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0 :\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 :\n        return 0\n    if n % 2 == 0 :\n        return 2\n    return 1 + count_divisors(n/2)\n",
        "num_ids": 41
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    if count == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 58
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) : \n        if n%i == 0 : \n            count += 1\n    if count == 1 : \n        return \"Yes\"\n    else : \n        return \"No\"\n",
        "num_ids": 62
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    if n == 1: \n        return True\n    else : \n        divisors = 0\n        for i in range(1, int(math.sqrt(n)) + 1): \n            if n % i == 0: \n                divisors += 1\n        if divisors % 2 == 0: \n            return True \n        else: \n            return False \n",
        "num_ids": 94
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_list = []\n    for divisor in range(1, n):\n        if n % divisor == 0:\n            divisors_list.append(divisor)\n    if len(divisors_list) > 0:\n        print('Divisors list :', divisors_list)\n        print('Number of divisors is:', len(divisors_list))\n    else:\n        print('Divisors list : Empty')\n    \n    '''\n    Write a python function to calculate the sum of all divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-29.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    total = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            total = total + divisor\n    print('The sum of divisors is:', total)\n    \n    '''\n    Write a python function to find the factorial of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-32.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    factorial = 1\n    print('Factorial of'+ str(number) +'is:', factorial)\n    if number < 0:\n        print('Number can not be negative.')\n    else:\n        if number == 0:\n            print('Number can not be 0.')\n        else:\n            for i in range(1, number+1):\n                factorial = factorial * i\n            print('Factorial of', str(number), 'is:', factorial)\n    \n    '''\n    Write a python function to find the square root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-4-exercise-30.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    result = math.sqrt(number)\n    print('The square root of'+ str(number) +'is:', result)\n    \n    '''\n    Write a python function to find the square of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-28.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    square_root = math.sqrt(number)\n    print('The square of'+ str(number) +'is:', square_root)\n    \n    '''\n    Write a python function to get the number of the sum of the squares of the numbers 1 to 100. https://www.w3resource.com/python-exercises/basic/python-basic-6-exercise-15.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    total = 0\n    for i in range(1, number+1):\n        total = total + (i ** 2)\n    print('The sum of the squares of the numbers 1 to 100 is:', total)\n    \n    '''\n    Write a python function to get the number of the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-7-exercise-19.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    result = math.pow(number, 3)\n    print('The cube root of'+ str(number) +'is:', result)\n    \n    '''\n    Write a python function to find the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-8-exercise-28.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    cube_root = math.pow(number, 1/3)\n    print('The cube root of'+ str(number) +'is:', cube_root)\n    \n    '''\n    Write a python function to get the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-9-exercise-16.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    cube_root = math.pow(number, 1/3)\n    print('The cube root of'+ str(number) +'is:', cube_root)\n    \n    '''\n    Write a python function to get the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-10-exercise-23.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    cube_root = math.pow(number, 1/3)\n    print('The cube root of'+ str(number) +'is:', cube_root)\n    \n    '''\n    Write a python function to get the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-11-exercise-28.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    cube_root = math.pow(number, 1/3)\n    print('The cube root of'+ str(number) +'is:', cube_root)\n    \n    '''\n    Write a python function to get the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-12-exercise-25.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    cube_root = math.pow(number, 1/3)\n    print('The cube root of'+ str(number) +'is:', cube_root)\n    \n    '''\n    Write a python function to get the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-13-exercise-27.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    cube_root = math.pow(number, 1/3)\n    print('The cube root of'+ str(number) +'is:', cube_root)\n    \n    '''\n    Write a python function to get the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-14-exercise-29.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    cube_root = math.pow(number, 1/3)\n    print('The cube root of'+ str(number) +'is:', cube_root)\n    \n    '''\n    Write a python function to get the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-15-exercise-27.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    cube_root = math.pow(number, 1/3)\n    print('The cube root of'+ str(number) +'is:', cube_root)\n    \n    '''\n    Write a python function to get the cube root of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-16-exercise-27.php\n    '''\n    print('Enter number: ', end='')\n    number = int(input())\n    cube_root = math.pow(number, 1/3)\n    print('The cube root of'+ str(number) +'is:', cube_root)\n    \n    '''\n    Write a python function to get the cube root of a given number. https://www.w3resource.com/python-exercise",
        "num_ids": 31
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    return divisors \ndef count_divisors2(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors3(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors4(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors5(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors6(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors7(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors8(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors9(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors10(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors11(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors12(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors13(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors14(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors15(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors16(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \ndef count_divisors17(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
        "num_ids": 49
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            count += 1\n    return count\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            count += 1\n    return count\ndef is_prime(n):\n    '''\n    To check whether a number is prime or not.\n    '''\n    if n == 2 or n == 3 or n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(5, math.ceil(math.sqrt(n)), 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_factor(n):\n    '''\n    To check whether a number is a prime factor or not.\n    '''\n    if n == 2 or n == 3 or n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(5, math.ceil(math.sqrt(n)), 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_factor_other(n):\n    '''\n    To check whether a number is a prime factor or not.\n    '''\n    if n == 2 or n == 3 or n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(5, math.ceil(math.sqrt(n)), 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 91
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0 : \n        return n, \"even\"\n    else :\n        return n + 1, \"odd\"\n",
        "num_ids": 34
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n==1) : \n        return \"No\"\n    if (n==2) : \n        return \"Even\"\n    else : \n        count = 0\n        for i in range(1, n) : \n            if (n % i) == 0 : \n                count = count + 1\n        if (count == 0) : \n            return \"No\"\n        else : \n            return \"Even\" \nprint(count_divisors(4)",
        "num_ids": 114
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Create a dictionary to store the index of odd subarray and sum of its elements\n    odd_sub_dict = {}\n    odd_sum = 0\n",
        "num_ids": 37
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odds = 0\n    for i in range(len(arr) - 1):\n        if arr[i] % 2 == 1:\n            odds += arr[i]\n        else:\n            continue\n    return odds\n",
        "num_ids": 54
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr) - 1):\n        if (i % 2 == 0):\n            total += arr[i]\n    return total\n",
        "num_ids": 43
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(i % 2 == 1):\n            sum += arr[i]\n    return sum\n    # if(len(arr) % 2 == 1):\n    #     return 0\n",
        "num_ids": 61
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if (i % 2) == 0:\n            odd_sum += arr[i]\n    return odd_sum\n",
        "num_ids": 48
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([i for i in arr if i%2])\n",
        "num_ids": 17
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum_ = []\n    for i in range(len(arr)):\n        if len(arr) % 2 == 1:\n            odd_length_sum_.append(arr[i])\n        else:\n            odd_length_sum_.append(arr[i] + arr[i+1])\n    return sum(odd_length_sum_)\n",
        "num_ids": 87
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    # i - index of odd subarray\n    # j - index of even subarray\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n        else:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 74
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    def odd_length_sum_rec(arr, start, end):\n        if start >= end:\n            return 0\n        mid = (start+end)//2\n        if arr[mid] == mid:\n            return odd_length_sum_rec(arr, start, mid-1) + odd_length_sum_rec(arr, mid+1, end)\n        else:\n            return odd_length_sum_rec(arr, start, mid-1) + odd_length_sum_rec(arr, mid+1, end)\n",
        "num_ids": 127
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(1, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n    \ndef prime_factorize(n):\n    '''\n    Write a python function to find the prime factor of a number.\n    '''\n    factor = 2\n    while factor <= n/2:\n        if n%factor == 0:\n            return factor\n        factor+=1\n    return None\n",
        "num_ids": 38
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    c = int(255 * r + 0.5)\n    m = int(255 * g + 0.5)\n    y = int(255 * b + 0.5)\n    min_val = min(c, m, y)\n    max_val = max(c, m, y)\n    delta = max_val - min_val\n    if delta == 0:\n        return (0, 0, 0)\n    if delta == 0.000001:\n        return (0, 0, 0)\n    if m == 0:\n        s = 0\n    else:\n        s = delta / m\n    if c == 0:\n        h = 0\n    else:\n        h = delta / c\n    if y == 0:\n        v = 0\n    else:\n        v = delta / y\n    if s < 0.0031308:\n        h = 0\n    if s > 0.0031308:\n        h = 1\n    if h < 0.301029:\n        v = 0\n    if h > 0.301029:\n        v = 1\n    if v < 0.200002:\n        s = 0\n    if v > 0.200002:\n        s = 1\n    if s < 0.0001:\n        s = 0\n    return (int(h * 6.1134), int(s * 6.1134), int(v * 6.1134))\n",
        "num_ids": 327
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #convert to float type\n    #convert to 1d array\n    b = b.astype(float)\n    g = g.astype(float)\n    r = r.astype(float)\n    \n    #calculate the saturation value\n    s = b + g + r - r\n    \n    #calculate the hue value\n    h = 0.5 * (1 + np.tanh(((np.fabs(s) - 1) / 2.55) * np.pi))\n    \n    #calculate the value of v\n    v = b * (1 - h) + g * h\n    \n    #convert the result to hsv\n    return hsv_to_rgb(h,s,v)\n    \n",
        "num_ids": 180
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if (r, g, b) == (255, 0, 0):\n        return 0, 0, 0\n    elif (r, g, b) == (0, 255, 0):\n        return 0, 0, 255\n    elif (r, g, b) == (0, 0, 255):\n        return 255, 255, 255\n    elif (r, g, b) == (255, 255, 0):\n        return 255, 255, 0\n    else:\n        raise ValueError('Wrong argument.')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1983
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # r, g, b = map(int, [r, g, b])\n    r = int(r)\n    g = int(g)\n    b = int(b)\n    a = int(0.04045 * r + 0.5) # Convert to 0-1\n    c = int(0.35 * r + 0.5) # Convert to 0-1\n    x = c / (1.0 - a)\n    y = c / (1.0 - b)\n    if 0 <= x <= 1 and 0 <= y <= 1:\n        return (int(a * 6.0), int(b * 6.0), int(x * 6.0))\n    else:\n        return (255, 255, 255)\n    \n",
        "num_ids": 176
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n    x = max(r,g,b)\n    y = min(r,g,b)\n    c = x/y\n    if c <= 0.5:\n        h = 0.0\n    elif c <= 1.0:\n        h = 60.0 + int((6.0-1.0)*c)\n    else:\n        h = 120.0 + int((6.0-c)*(6.0-1.0))\n    s = 0.0\n    v = 0.0\n    if r <= 0.0:\n        s = 0.0\n    else:\n        s = max(0.0, min(100.0, y/x*100.0))\n    if g <= 0.0:\n        v = 0.0\n    else:\n        v = max(0.0, min(100.0, y/x*100.0))\n    h = max(0.0, min(100.0, y/x*100.0))\n    if b <= 0.0:\n        return 0.0, 0.0, 0.0\n    return h, s, v\n",
        "num_ids": 286
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # modify the colors to your needs\n    def get_color(rgb):\n        r, g, b = rgb\n        return (float(r)/255.0, float(g)/255.0, float(b)/255.0)\n    \n    # convert from hsv to rgb\n    def rgb_to_hsv(r, g, b):\n        '''\n        Convert rgb to hsv, modified by https://stackoverflow.com/a/11721201/1587704\n        '''\n        # modify the colors to your needs\n        def get_color(hsv):\n            hsv = hsv[1:]\n            # scale the colors\n            r, g, b = [int(i*255) for i in hsv]\n            r, g, b = [int(i/255) for i in [r, g, b]]\n            return (r, g, b)\n        \n        # rgb to hsv\n        rgb = get_color(rgb)\n        return (1.0, 0.0, 0.0) + rgb\n        \n    # convert rgb to hsv\n    hsv = rgb_to_hsv(r, g, b)\n    \n    # round the values to the nearest integer\n    r = int(round(r))\n    g = int(round(g))\n    b = int(round(b))\n    return (r, g, b) + hsv\n",
        "num_ids": 215
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    \n    # create an empty list to save values\n    hsv = []\n    \n    # calculate for each pixel the saturation value\n    for i in range(len(r)):\n        for j in range(len(r[i])):\n            r_sum = r[i][j] + g[i][j] + b[i][j]\n            saturation = (r_sum/255.0)\n            \n            # calculate the value for the hue value\n            hue = hue_min + (hue_max - hue_min) * (saturation - saturation_min)\n            \n            # create the value for the saturation value\n            h = hue % 360\n            s = saturation\n            \n            # create the value for the hue value\n            h_sum = hue_min + (hue_max - hue_min) * (h - hue)\n            h_avg = (h_sum + hue_sum) / 2\n            \n            # calculate the value for the value of the hue value\n            v = ((h_sum + hue_sum) / 2 - h_avg) * (s - saturation)\n            \n            # save values\n            hsv.append([s, v, h])\n    \n    # convert the values\n    for i in range(len(hsv)):\n        hsv[i][0] = hsv[i][0] * hue_scale\n        hsv[i][1] = hsv[i][1] * saturation_scale\n        hsv[i][2] = hsv[i][2] * value_scale\n    \n    # return the hsv values\n    return hsv\n",
        "num_ids": 406
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #define variables\n    h = 0\n    s = 0\n    v = 0\n    #load the image\n    im = Image.open(r)\n    #convert to rgb\n    im = im.convert('RGB')\n    #loop over the image in the background\n    for i in im.split():\n        #convert to float\n        v = i.histogram()\n        #create saturation and value\n        s = float(v[0])/float(i.size)\n        #create hsv\n        h = float(v[0])/float(i.size)\n        #convert to integer and convert to int\n        i = int(h*256)\n        #convert back to image\n        i = (255-i)\n        i = int(i*255)\n        #write the pixel value to the image\n        i = format(i,'b')\n        #write the pixel value to the image\n        im.putpixel((i,0),i)\n    #save the new image\n    im.save(r,format='JPEG',quality=100)\n    #return the color\n    return (h,s,v)\n",
        "num_ids": 269
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = int(r*6)/255\n    s = int(g*6)/255\n    v = int(b*6)/255\n    \n    if v<0:\n        h = 0\n        s = 0\n        v = int(v*6)/255\n    \n    h_base = h*6\n    s_base = s*6\n    v_base = v*6\n    \n    if h_base>255:\n        h_base = 255\n    if s_base>255:\n        s_base = 255\n    if v_base>255:\n        v_base = 255\n    \n    h = h_base\n    s = s_base\n    v = v_base\n    \n    if h<0:\n        h = 0\n    if s<0:\n        s = 0\n        v = 0\n    \n    if h>255:\n        h = 255\n    if s>255:\n        s = 255\n    if v>255:\n        v = 255\n    \n    if h>0:\n        h = int(h/6)\n    if s>0:\n        s = int(s/6)\n    if v>0:\n        v = int(v/6)\n    \n    if v<0:\n        v = int(v/6)\n    \n    if v>=1:\n        v = int(v/6)\n    \n    if h>=1:\n        h = int(h/6)\n    if s>=1:\n        s = int(s/6)\n    if v>=1:\n        v = int(v/6)\n    \n    if h<=0:\n        h = 0\n    if s<=0:\n        s = 0\n    if v<=0:\n        v = 0\n    \n    # if h<=0:\n    #     h = 0\n    # if s<=0:\n    #     s = 0\n    # if v<=0:\n    #     v = 0\n    \n    # if h>0:\n    #     h = h-1\n    # if s>0:\n    #     s = s-1\n    # if v>0:\n    #     v = v-1\n    \n    if v<0:\n        h = int(h)\n        s = int(s)\n        v = int(v)\n    \n    if h>0:\n        h = int(h)\n    if s>0:\n        s = int(s)\n    if v>0:\n        v = int(v)\n    \n    if v<0:\n        h = 0\n        s = 0\n        v = 255\n    \n    if h<0:\n        h = 255\n        s = 0\n        v = 0\n    \n    if h>255:\n        h = 255\n    if s<0:\n        s = 255\n        v = 0\n    \n    if s>255:\n        s = 255\n        v = 255\n    \n    if v<0:\n        v = 255\n    \n    if v>255:\n        v = 255\n    \n    if h<0:\n        h = 0\n    if s<0:\n        s = 0\n    if v<0:\n        v = 0\n    \n    if h>0:\n        h = int(h/6)\n    if s>0:\n        s = int(s/6)\n    if v>0:\n        v = int(v/6)\n    \n    if h>=1:\n        h = int(h/6)\n    if s>=1:\n        s = int(s/6)\n    if v>=1:\n        v = int(v/6)\n    \n    if h<=0:\n        h = 0\n    if s<=0:\n        s = 0\n    if v<=0:\n        v = 0\n    \n    # if h<=0:\n    #     h = 0\n    # if s<=0:\n    #     s = 0\n    # if v<=0:\n    #     v = 0\n    \n    # if h>=1:\n    #     h = h-1\n    # if s>=1:\n    #     s = s-1\n    # if v>=1:\n    #     v = v-1\n    \n    if h<=0:\n        h = int(h)\n        s = int(s)\n        v = int(v)\n    \n    if s<=0:\n        s = int(s)\n    if v<=0:\n        v = int(v)\n    \n    if h>0:\n        h = h-1\n    if s>0:\n        s = s-1\n    if v>0:\n        v = v-1\n    \n    if h<=0:\n        h = 0\n        s = 0\n        v = 255\n    \n    if s<=0:\n        s = 255\n        v = 0\n    \n    if v<0:\n        v = 255\n    \n    if h>0:\n        h = 0\n        s = 0\n        v = 255\n    \n    if s>0:\n        s = 0\n        v = 255\n    \n    if v<0:\n        v = 255\n    \n    if h<0:\n        h = 0\n    if s<0:\n        s = 0\n    if v<0:\n        v = 255\n    \n    if h>=1:\n        h = 0\n    if s>=1:\n        s = 0\n    if v>=1:\n        v = 255\n    \n    if h<=0:\n        h = 0\n    if s<=0:\n        s = 0\n    if v<=0:\n        v = 255\n    \n    if h>0:\n        h = int(h)\n        s = int(s)\n        v = int(v)\n    \n    if h<=0:\n        h = 0\n        s = 0\n        v = 255\n    \n    if s<=0:\n        s = 0\n        v = 255\n    \n    if v<=0:\n        v = 255\n    \n    if h>0:\n        h = 0\n        s = 255\n        v = 0\n    \n    if s<=0:\n        s = 255\n        v = 0\n    \n    if v<=0:\n        v = 255\n    \n    if h>=1:\n        h = 0\n        s = 0\n        v = 255\n    \n    if s<=0:\n        s = 0\n        v = 0\n    \n    if v<=0:\n        v = 255\n    \n    if h<=0:\n        h = 255\n        s = 0\n        v = 0\n    \n    if s<=0:\n        s = 0\n        v = 255\n    \n    if v<=0:\n        v = 255\n    \n    if h<=0:\n        h = 255\n        s = 0\n        v = 0\n    \n    if s<=0:\n        s = 0\n        v = 255\n    \n    if v<=0:\n        v = 255\n    \n    if h<0:\n        h = 0\n        s = 255\n        v = 0\n    \n    if s<0:\n        s = 255\n        v = 0\n    \n    if v<0:\n        v = 255\n    \n    if h<0:\n        h = 0\n        s = 255\n        v = 0\n    \n    if s<0:\n        s = 255\n        v = 0\n    \n    if v<0:\n        v = 255\n    \n    if h>0:\n        h = 0\n        s = 0\n        v = 255\n    \n    if s>0:\n        s = 0\n        v = 255\n    \n    if v>0:\n        v = 255\n    \n    if h>0:\n        h = int(h)\n        s = int(s)\n        v = int(v)\n    \n    if h<0:\n        h = 0\n        s = 0\n        v = 255\n    \n    if s<0:\n        s = 0\n        v = 255\n    \n    if v<0:\n        v = 255\n    \n",
        "num_ids": 1971
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert from RGB to HSB\n    (h, s, v) = colorsys.rgb_to_hsv(r, g, b)\n",
        "num_ids": 38
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for item in list1:\n        if item % 2 == 0:\n            result *= item\n        else:\n            result /= item\n",
        "num_ids": 40
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    prod = 1\n    if len(list1) % 2 == 0:\n        even = list1[0]\n        odd = list1[0]\n        for i in range(1,len(list1),2):\n            prod *=list1[i]\n    else:\n        even = list1[len(list1)//2]\n        odd = list1[len(list1)//2]\n        for i in range(len(list1),0,-2):\n            prod *=list1[i]\n    return (prod,even,odd)\n",
        "num_ids": 148
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    mul = 1\n    odd_num = 0\n    even_num = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            mul *= list1[i]\n            even_num += 1\n        else:\n            mul *= list1[i]\n            odd_num += 1\n    return mul, even_num, odd_num\n",
        "num_ids": 96
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if len(list1) == 0:\n        return [1, 1]\n    elif len(list1) == 1:\n        return [list1[0], list1[0]]\n    elif len(list1) == 2:\n        return list1[0] * list1[1]\n    elif len(list1) == 3:\n        return list1[0] * list1[1] * list1[2]\n    elif len(list1) == 4:\n        return list1[0] * list1[1] * list1[2] * list1[3]\n    elif len(list1) == 5:\n        return list1[0] * list1[1] * list1[2] * list1[3] * list1[4]\n    elif len(list1) == 6:\n        return list1[0] * list1[1] * list1[2] * list1[3] * list1[4] * list1[5]\n    elif len(list1) == 7:\n        return list1[0] * list1[1] * list1[2] * list1[3] * list1[4] * list1[5] * list1[6]\n    elif len(list1) == 8:\n        return list1[0] * list1[1] * list1[2] * list1[3] * list1[4] * list1[5] * list1[6] * list1[7]\n    elif len(list1) == 9:\n        return list1[0] * list1[1] * list1[2] * list1[3] * list1[4] * list1[5] * list1[6] * list1[7] * list1[8]\n    else:\n        return [1, 1] * len(list1)\n",
        "num_ids": 468
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = []\n    prod = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            prod = prod * i\n    return prod\n",
        "num_ids": 58
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    res = 1\n    for i in list1:\n        res = res * i\n    return res\n",
        "num_ids": 26
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for n in list1:\n        if n % 2 == 0:\n            result *= n\n        else:\n            result /= n\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num = 0\n    num_2 = 0\n    for x in list1:\n        if x % 2 == 0:\n            num += x\n        else:\n            num_2 += x\n    return num*num_2\n",
        "num_ids": 55
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    if len(list1)%2==0:\n        even=list1[0::2]\n        odd=list1[1::2]\n    else:\n        even=list1[0::2]\n        odd=list1[1::2]\n    prod=[]\n    for i in range(len(even)):\n        prod.append(even[i]*odd[i])\n    return prod\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2010
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    length = len(list1)\n    \n    if length == 0:\n        return 0\n    elif length == 1:\n        return list1[0]\n    else:\n        temp = list1[0]\n        for i in range(1, length):\n            if list1[i] % 2 == 0:\n                temp *= list1[i]\n            else:\n                temp /= list1[i]\n        return temp\n        \n        \n    \nprint(mul_even_odd([5, 10, 14, 2])",
        "num_ids": 130
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    res = tuple(map(int, test_str))\n    return res\n",
        "num_ids": 20
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str is None:\n        return 0\n    if isinstance(test_str, str):\n        return tuple(map(int, test_str.split()))\n    if isinstance(test_str, tuple):\n        return tuple(map(int, test_str))\n",
        "num_ids": 68
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    list_of_str = test_str.split(\",\")\n    for index,value in enumerate(list_of_str):\n        list_of_str[index] = int(value)\n    return list_of_str\n",
        "num_ids": 57
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n",
        "num_ids": 15
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = ()\n    for i in range(0,len(test_str)-1):\n        result += (test_str[i],)\n    result += (test_str[len(test_str)-1],)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(test_str)):\n        new_tuple += (int(test_str[i]),)\n    return new_tuple\n",
        "num_ids": 48
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        tuple_str_int = tuple(map(int, test_str))\n        return tuple_str_int\n    except:\n        print(\"Please provide a valid tuple string as input\")\n        return\n",
        "num_ids": 53
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def str_tuple(l):\n        \"\"\"Convert l to a tuple.\"\"\"\n        return tuple(l)\n    def int_tuple(l):\n        \"\"\"Convert l to a tuple.\"\"\"\n        return tuple(map(int, l))\n    return (str_tuple, int_tuple)\n",
        "num_ids": 76
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_ints = tuple(map(int,test_str.split()))\n    return test_str_ints\n",
        "num_ids": 31
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def int_convert(test_str):\n        '''\n        Write a function to convert tuple string to integer tuple.\n        '''\n        def rec_convert(test_str):\n            '''\n            Convert the input string to integer tuple.\n            '''\n            try:\n                test_str = test_str.split(',')\n            except:\n                return\n            result = []\n            for x in test_str:\n                if not x.strip():\n                    continue\n                elif x.isdigit():\n                    result.append(int(x))\n                else:\n                    result.append(x)\n            return result\n        try:\n            return tuple(map(int, test_str))\n        except:\n            return tuple(map(str, test_str))\n    return int_convert(test_str)\n",
        "num_ids": 134
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n",
        "num_ids": 68
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left_bound = bisect.bisect_left(a, x)\n    if left_bound < len(a):\n        return left_bound\n    return len(a)\n",
        "num_ids": 44
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Your code here\n    n = len(a)\n    mid = n//2\n    if n%2 == 0:\n        x = mid-1\n    else:\n        x = mid+1\n    if x >= 0:\n        if n - mid - 1 >= x:\n            return x\n        elif a[mid] > a[mid + 1]:\n            return x+1\n        elif a[mid] <= a[mid + 1]:\n            return mid\n        else:\n            return n\n    else:\n        return 0\n",
        "num_ids": 128
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return -1\n    return i\n",
        "num_ids": 36
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    print(f'value is {x}')\n    pos = bisect.bisect_right(a, x)\n    print(f'pos is {pos}')\n    return pos\n",
        "num_ids": 46
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    if l == len(a):\n        return l\n    else:\n        return l + 1\n",
        "num_ids": 41
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l, r = 0, len(a) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\n",
        "num_ids": 68
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where a is present\n    i = bisect.bisect_right(a, x)\n    # Insertion point is at index i\n    # The return value of the function should be the right index\n    return i\n",
        "num_ids": 56
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # arr = list(a)\n    # i = bisect.bisect_left(arr, x, lo=0, hi=len(arr))\n    # return i\n    a_i = bisect.bisect_left(a, x)\n    if a_i >= len(a):\n        return len(a) - 1\n    else:\n        return a_i\ndef right_insertion_2(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    x_i = bisect.bisect_left(a, x)\n    if x_i >= len(a):\n        return x_i\n    else:\n        return x_i + 1\n",
        "num_ids": 49
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    pos = 0\n    while True:\n        i = bisect.bisect_right(a, x)\n        if i!= pos:\n            break\n        pos = i\n    return pos\n",
        "num_ids": 56
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Set the number of matches\n    num_matches = 0\n    # Loop through the text\n    for i in text:\n        # If the text is a match\n        if i == 'a' or i == 'b':\n            # Increase the number of matches\n            num_matches += 1\n    # Return the number of matches\n    return num_matches\n",
        "num_ids": 86
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # print(\"text_match_three:\", text)\n    text_split = re.split('[a-zA-Z0-9_]', text)\n    # print(\"text_split:\", text_split)\n    text_new_list = []\n    \n    for word in text_split:\n        if word[0:3] == 'a' or word[0:3] == 'b':\n            text_new_list.append(word)\n    \n    return text_new_list\n",
        "num_ids": 121
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = re.findall('a\\b', text)\n    b = re.findall('b\\b', text)\n    c = re.findall('c\\b', text)\n    return a == b == c\n",
        "num_ids": 55
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.findall(r'[a-zA-Z]\\w+\\s[a-zA-Z]\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\",
        "num_ids": 2009
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'(a{3}b){3}',text).group()\ndef test():\n    print(text_match_three('''\n        abc\n        def\n        ghi\n    '''))\n    print(text_match_three('a'))\n    print(text_match_three('abc'))\n    print(text_match_three('aabcdefghijkl'))\n    print(text_match_three('aabcdefghijklm'))\n    print(text_match_three('aabcdefghijklmn'))\n    print(text_match_three('aabcdefghijklp'))\n    print(text_match_three('aabcdefghijklq'))\n    print(text_match_three('aabcdefghijkls'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('aabcdefghijkl;'))\n    print(text_match_three('",
        "num_ids": 1954
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #get all letters in the string\n    s = []\n    for char in text:\n        s.append(char)\n    #create list of letters\n    l = []\n    for letter in s:\n        l.append(letter)\n",
        "num_ids": 58
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #pattern = r\"a\\(b\\)\"\n    #return re.match(pattern, text)\n    pattern = r\"\\s*a\\s*\\(b\\)\\s*\\(b\\)\"\n    return re.findall(pattern, text)\n",
        "num_ids": 64
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'(a[b])([0-9])(b)'\n    text = re.sub(pattern, r'\\1\\2\\3', text)\n    pattern = r'([^a-z])([b0-9])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([0-9])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-z])'\n    text = re.sub(pattern, r'\\1 \\2', text)\n    pattern = r'([^a-z])([a-",
        "num_ids": 2009
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    for i in range(len(text)):\n        if text[i] == \"a\":\n            if text[i+1] == \"b\":\n                return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    def three_a_b(text):\n        '''\n        Split text into a list of strings.\n        '''\n        three_a_b_list = []\n        t = re.findall('a\\s*b',text)\n        for item in t:\n            three_a_b_list.append(item)\n        return three_a_b_list\n    three_a_b_list = three_a_b(text)\n    '''\n    output:\n    [['a', 'b'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']]\n    '''\n    return three_a_b_list\n",
        "num_ids": 12
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    for index, value in enumerate(test_list):\n        new_tuple += (value, test_str[index])\n    return new_tuple\n",
        "num_ids": 47
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_list + test_str\n    return new_tuple\n",
        "num_ids": 23
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.split(',')\n    return tuple(test_list)\n",
        "num_ids": 25
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(str.upper, test_list))\n    \n    \ndef test_exceptions(test_str):\n    '''\n    Write a function to raise exceptions from a test.\n    '''\n    raise ValueError('This is an exception')\n    \n    \ndef test_input(test_str):\n    '''\n    Write a function to test a string.\n    '''\n    pass\n    \n    \ndef main():\n    '''\n    Write a function to test your function.\n    '''\n    print('Hello! Welcome to the Python Code Generator!')\n    print('We are going to ask you to enter your name, age, and a number.')\n    test_str = input('What is your name? ')\n    test_exceptions(test_str)\n    print(f'Good job {test_str}!')\n    print('Here are some examples of possible output:')\n    print('These are the types of data you will get from the tests in this example:')\n    print(f'new_tuple([\"1\", \"2\", \"3\"], \"a string\")')\n    print(f'new_tuple(\"Hello\", \"World\")')\n    print(f'new_tuple([1, 2, 3], \"three\")')\n    print(f'new_tuple((\"a\", \"b\", \"c\", \"d\"), \"a string\")')\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n",
        "num_ids": 227
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = []\n    for idx in range(len(test_list)):\n        test_tuple.append(test_list[idx])\n    return test_tuple\n",
        "num_ids": 48
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = list(test_str)\n    return tuple(test_list)\n",
        "num_ids": 23
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for element in test_list:\n        new_list.append(element)\n    return tuple(new_list)\n",
        "num_ids": 37
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Check if the length of the string is equal to the length of the list\n    if len(test_str) == len(test_list):\n        # Return a tuple from the given string and the list\n        return tuple(test_str, test_list)\n    else:\n        # Return a tuple with all the characters of the string and the list\n        return tuple(test_str, *test_list)\n    # Return None if the length of the string is larger than the length of the list\n    return None\n",
        "num_ids": 119
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    test_list_int = [int(i) for i in test_list.split(',')]\n",
        "num_ids": 35
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = []\n    for char in test_list:\n        tuple_list.append(char)\n    tuple_str = tuple(tuple_list)\n    return tuple_str\n",
        "num_ids": 50
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_numbers.append(nums[i])\n    if len(even_numbers) == len(nums):\n        return True\n    else:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i % 2 == 0) and (nums[i] % 2 == 0):\n            return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    odds = [x for x in nums if x%2==0]\n    return odds\n",
        "num_ids": 25
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    l = list(nums)\n    even_nums = []\n    \n    for x in l:\n        if x % 2 == 0:\n            even_nums.append(x)\n        \n    if len(even_nums)!= len(set(even_nums)):\n        return False\n    else:\n        return True\n    \n    ",
        "num_ids": 88
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0,len(nums)-1):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == 0\n",
        "num_ids": 47
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n    return count == 0\n",
        "num_ids": 35
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if index % 2 == 0:\n            continue\n        if nums[index] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if (i%2 == 0) and (nums[i] % 2 == 0):\n            return False\n    return True\n        \nprint(even_position([1,2,3,4,5,6]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11,12])",
        "num_ids": 127
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return True\n    if len(nums) == 1:\n        return False\n    if nums[0] % 2 == 0:\n        return True\n    for i in range(1,len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n    return False\n",
        "num_ids": 85
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # your code here\n    return (",
        "num_ids": 11
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def outer():\n        if len(test_tup) > 1:\n            first = test_tup[0]\n            nested = test_tup[1]\n            test_tup = first, nested\n        return test_tup\n    return outer\n",
        "num_ids": 64
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n",
        "num_ids": 25
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = (tuple(test_tup))\n    lst = list(test_tup)\n    lst.remove(())\n    test_tup = tuple(lst)\n    return test_tup\n",
        "num_ids": 57
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([value for (value,_) in test_tup])\n",
        "num_ids": 20
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # The \"remove\" function is used to remove elements from a tuple\n    # and also to make sure that the tuple is actually a tuple and not a list\n    # return\n    # The syntax is\n    # return tuple(remove(x, y))\n    # where x is the item to remove and y is the item to return\n    # the tuple is a tuple\n    pass\n",
        "num_ids": 87
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    remove_list = []\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup) - 1):\n            if test_tup[j] == test_tup[j + 1]:\n                remove_list.append(test_tup[j])\n                test_tup = test_tup[:j] + test_tup[j + 2:]\n",
        "num_ids": 101
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return(test_tup[0])\n",
        "num_ids": 13
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        raise TypeError(\"Invalid type: \" + str(type(test_tup)))\n    else:\n        # Note: If we use tuple() or list() here, the items in the tuple should not be modified.\n        # However, we should keep them for later processing, so that we can access them.\n        test_tup = tuple(test_tup)\n        # The following will work without using anything.\n        # test_tup = list(test_tup)\n        test_tup.pop(0)\n        test_tup.pop(0)\n        return test_tup\n",
        "num_ids": 153
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Write your code here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count = count + len(i)\n        else:\n            pass\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count+=1\n    return count\n    \nprint(count_list([1,2,3,4,5]))\nprint(count_list([1,2,3,4]))\n",
        "num_ids": 71
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Take the parameter as a string\n    # Check whether it contains a space or not\n    # If not, make it a space\n    count_list_space = input_list.count(' ')\n    if count_list_space == 0:\n        print(\"List must contain at least one value\")\n    else:\n        # Get the length of the string\n        list_length = len(input_list)\n        # Create the count variable\n        count = 0\n        for i in range(list_length):\n            # Check whether the current list is a list\n            if input_list[i] == '[' or input_list[i] == '{':\n                # If the current value is a list, append the length of the list\n                count += 1\n            else:\n                # If the current value is not a list, return the length of the list\n                return list_length - count\n        \n        # If there are no more values in the list, the count is equal to the length of the string\n        # If there are no more values in the list, return the length of the string\n        return list_length\n",
        "num_ids": 255
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output = 0 \n    for i in range(1, len(input_list)): \n        if type(input_list[i]) == list: \n            output += count_list(input_list[i]) \n    return output \n",
        "num_ids": 60
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # remove duplicate\n    #remove all the duplicates\n    #sort the list\n    #return the number of unique values in the list\n    #repeat that\n    #append the unique values to the original list\n    #repeat that\n    \n    unique_list = []\n    for l in input_list:\n        if l not in unique_list:\n            unique_list.append(l)\n    print(len(unique_list))\n    return len(unique_list)\n    \ndef odd_even(input_list):\n    '''\n    Write a python function to return True if the input list is odd and False if the input list is even.\n    '''\n    # remove duplicate\n    #remove all the duplicates\n    #sort the list\n    #return the number of unique values in the list\n    #repeat that\n    \n    unique_list = []\n    for l in input_list:\n        if l not in unique_list:\n            unique_list.append(l)\n    print(len(unique_list))\n    return len(unique_list)%2 == 0\n",
        "num_ids": 99
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    c = 0\n    for i in input_list:\n        if type(i) == list:\n            c += 1\n    return c\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    sum_of_lists = 0\n    for i in input_list:\n        sum_of_lists += len(i)\n    return sum_of_lists\n",
        "num_ids": 40
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Create a for-loop to iterate through each element in the list.\n    for i in range(len(input_list)):\n        # Append the number of times list i appears to occur to a new list.\n        input_list[i].append(list.count(input_list[i]))\n    return input_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2011
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    lst = input_list.count(list)\n    print(lst)\n    \n",
        "num_ids": 26
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    cnt = 0\n    for lst in input_list: \n        if isinstance(lst, list): \n            cnt += 1\n    return cnt\n    \n    \n",
        "num_ids": 46
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    j=len(arr)-1\n    while arr[j]<=x:\n        j-=1\n    return j\ndef front(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    i=0\n    while i<len(arr):\n        if arr[i]>x:\n            return i\n        i+=1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    j=len(arr)-1\n    while arr[j]<=x:\n        j-=1\n    return j\ndef at_position(arr,x):\n    '''\n    Write a python function to find the index of an element in a sorted array.\n    '''\n    j=last(arr,x)\n    i=first(arr,x)\n    if i==-1:\n        return -1\n    else:\n        return i\ndef print_array(arr):\n    for i in arr:\n        print(i,end=' ')\n    print()",
        "num_ids": 71
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)<=1:\n        return -1\n    \n    slow=0\n    fast=len(arr)-1\n    while slow<fast:\n        slow=slow+1\n        if arr[slow]>arr[fast]:\n            fast=fast-1\n        else:\n            return slow\n    return -1\n",
        "num_ids": 80
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    end=len(arr)-1\n    start=0\n    while start<end:\n        mid=(start+end)//2\n        if arr[mid]<x:\n            start=mid+1\n        else:\n            end=mid\n    return start\n",
        "num_ids": 63
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    \n    mid = len(arr)//2\n    if arr[mid] == x:\n        return mid\n    \n    if arr[mid] > x:\n        return last(arr[:mid],x)\n    \n    else:\n        return last(arr[mid+1:],x)\n",
        "num_ids": 86
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return None\n    if arr[-1]<arr[0]:\n        return 0\n    if arr[-1]>arr[-1]:\n        return len(arr)-1\n    mid=len(arr)//2\n    if arr[mid]==x:\n        return mid\n    if arr[mid]>x:\n        return last(arr[mid:],x)\n    else:\n        return last(arr[:mid],x)\n    \n    \ndef quicksort(arr,first,last):\n    '''\n    Find the middle element of a sorted array and sort the elements.\n    '''\n    if first<last:\n        p=partition(arr,first,last)\n        quicksort(arr,first,p-1)\n        quicksort(arr,p+1,last)\n",
        "num_ids": 50
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start=0\n    end=len(arr)-1\n    while start<end:\n        mid = start + (end - start) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            end = mid\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 82
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # find the index of the last element\n    pos=len(arr)-1\n    while arr[pos]<x:\n        pos-=1\n    return pos\n",
        "num_ids": 41
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0 or len(arr)==1:\n        return -1\n    if arr[len(arr)-1]<x:\n        return len(arr)-1\n    else:\n        return len(arr)-1\ndef search(arr,x):\n    '''\n    Write a python function to find the index of the first occurrence of a value in a sorted array.\n    '''\n    if len(arr)==0 or len(arr)==1:\n        return -1\n    if arr[0]<x:\n        return 0\n    if arr[len(arr)-1]<x:\n        return len(arr)-1\n    else:\n        if arr[len(arr)-1]==x:\n            return 0\n        else:\n            return -1\n",
        "num_ids": 91
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # find all 'a' in text\n    text_a_list = re.findall('a', text)\n    # find all 'b' in text\n    text_b_list = re.findall('b', text)\n    # if 'a' is found in text, a must be a part of text\n    if len(text_a_list)!= 0:\n        if text_a_list[0] in text and text_a_list[-1] in text:\n            return 'a'\n        else:\n            return 'b'\n    # if 'b' is found in text, b must be a part of text\n    if len(text_b_list)!= 0:\n        if text_b_list[0] in text and text_b_list[-1] in text:\n            return 'b'\n        else:\n            return 'a'\n    else:\n        return 'a'\n",
        "num_ids": 216
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(a)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match a/b in text\"\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(b)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match b/a in text\"\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(a)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match a/b in text\"\ndef text_startb_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(b)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match b/a in text\"\ndef text_endb_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(a)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match a/b in text\"\ndef text_enda_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(a)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match a/a in text\"\ndef text_startb_a(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(b)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match b/a in text\"\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(a)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match a/b in text\"\ndef text_startb_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(b)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match b/a in text\"\ndef text_endb_a(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(a)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match a/b in text\"\ndef text_enda_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(a)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match a/a in text\"\ndef text_startb_a(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(b)')\n    # Perform the regex-matching on the text\n    result = pattern_a_b.search(text)\n    # Check if we matched anything\n    if result!= None:\n        # If so, return the full-matching string\n        return result.group()\n    else:\n        return \"Could not match b/a in text\"\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Helper function that returns the regular expression for \"a\" followed by anything\n    pattern_a_b = re.compile('(?<!\\s)(a)')\n    # Perform the regex-matching on the text\n    result ",
        "num_ids": 58
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a(?=\\w)', text) is not None\n",
        "num_ids": 24
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_a = r'(?:[a-zA-Z0-9]+[a-zA-Z0-9_.]+|\\.)+'\n    text_b = r'[a-zA-Z0-9_.]+'\n    text_ab = r'[a-zA-Z0-9_.]+\\.'\n    text_bk = r'\\b'\n    text_c = r'[a-zA-Z0-9_]+'\n    text_ch = r'\\s+'\n    pattern = re.compile(text_a + text_b + text_ab + text_bk + text_c + text_ch)\n    return pattern.search(text).group()\n",
        "num_ids": 176
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('a{1}b', text).groups()[0]\n    else:\n        return re.search('a{1}b', text).group()\n    \ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'c' followed by anything, ending in 'c'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('c{1}c', text).groups()[0]\n    else:\n        return re.search('c{1}c', text).group()\n    \ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'd' followed by anything, ending in 'd'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('d{1}d', text).groups()[0]\n    else:\n        return re.search('d{1}d', text).group()\n    \ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'e'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('e{1}e', text).groups()[0]\n    else:\n        return re.search('e{1}e', text).group()\n    \ndef text_starta_endf(text):\n    '''\n    Write a function that matches a string that has an 'f' followed by anything, ending in 'f'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('f{1}f', text).groups()[0]\n    else:\n        return re.search('f{1}f', text).group()\n    \ndef text_starta_endg(text):\n    '''\n    Write a function that matches a string that has an 'g' followed by anything, ending in 'g'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('g{1}g', text).groups()[0]\n    else:\n        return re.search('g{1}g', text).group()\n    \ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has an 'h' followed by anything, ending in 'h'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('h{1}h', text).groups()[0]\n    else:\n        return re.search('h{1}h', text).group()\n    \ndef text_starta_endi(text):\n    '''\n    Write a function that matches a string that has an 'i' followed by anything, ending in 'i'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('i{1}i', text).groups()[0]\n    else:\n        return re.search('i{1}i', text).group()\n    \ndef text_starta_endj(text):\n    '''\n    Write a function that matches a string that has an 'j' followed by anything, ending in 'j'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('j{1}j', text).groups()[0]\n    else:\n        return re.search('j{1}j', text).group()\n    \ndef text_starta_endk(text):\n    '''\n    Write a function that matches a string that has an 'k' followed by anything, ending in 'k'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('k{1}k', text).groups()[0]\n    else:\n        return re.search('k{1}k', text).group()\n    \ndef text_starta_endl(text):\n    '''\n    Write a function that matches a string that has an 'l' followed by anything, ending in 'l'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('l{1}l', text).groups()[0]\n    else:\n        return re.search('l{1}l', text).group()\n    \ndef text_starta_endm(text):\n    '''\n    Write a function that matches a string that has an'm' followed by anything, ending in'm'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('m{1}m', text).groups()[0]\n    else:\n        return re.search('m{1}m', text).group()\n    \ndef text_starta_endn(text):\n    '''\n    Write a function that matches a string that has an 'n' followed by anything, ending in 'n'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('n{1}n', text).groups()[0]\n    else:\n        return re.search('n{1}n', text).group()\n    \ndef text_starta_endo(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by anything, ending in 'o'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('o{1}o', text).groups()[0]\n    else:\n        return re.search('o{1}o', text).group()\n    \ndef text_starta_endp(text):\n    '''\n    Write a function that matches a string that has an 'p' followed by anything, ending in 'p'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('p{1}p', text).groups()[0]\n    else:\n        return re.search('p{1}p', text).group()\n    \ndef text_starta_endq(text):\n    '''\n    Write a function that matches a string that has an 'q' followed by anything, ending in 'q'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('q{1}q', text).groups()[0]\n    else:\n        return re.search('q{1}q', text).group()\n    \ndef text_starta_endr(text):\n    '''\n    Write a function that matches a string that has an 'r' followed by anything, ending in 'r'.\n    '''\n    # Text can be a list or a string\n    if type(text) == list:\n        text = ''.join(text)\n        return re.search('r{1}r', text).groups()[0]\n    else:\n        return re.search('r{1}r', text).group()\n    \ndef text_starta_ends(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in's'",
        "num_ids": 23
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search(r'(?i)(a)(.+)(b)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in's'.\n    '''\n    if re.search(r'(?i)(a)(.+)(s)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in's'.\n    '''\n    if re.search(r'(?i)(a)(.+)(s)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in's'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub17(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub18(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub19(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub20(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub21(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub22(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    if re.search(r'(?i)(a)(.+)(e)', text, re.IGNORECASE):\n        return True\n    else:\n        return False\ndef text_starta_endsub23(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_startb_end(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, starting with 'a'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_end(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_end_end(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_endb_end(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, starting with 'b'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_end_endb(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_begin(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'b'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_beginb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, starting with 'a'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_bega(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_bega_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_bega_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_bega_endb_end(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_bega_end_end(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_bega_end_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_bega_endb_end(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_bega_end_endb(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_end_end_end(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_end_end_endb(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_end_end_endb_end(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_end_end_endb_end(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending with 'e'.\n    '''\n    lista = []\n    for i in range(len(text)-1):\n        if re.search('\\w', text[i:i+3]):\n            lista.append(text[i:i+3])\n    return lista\ndef text_end_end_end",
        "num_ids": 68
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    my_pattern = re.compile(r'a\\b')\n    #Find all matches.\n    matches = my_pattern.findall(text)\n    #Iterate through the matches list and add end b.\n    for match in matches:\n        text = text.replace(match, endb+match)\n    #Return the text.\n    return text\n",
        "num_ids": 87
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(r'a\\b', text)\n",
        "num_ids": 18
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Case insensitive: If the text starts with a, it should be treated as ending in\n    # something ending in b, as this will be a 'b' in the end.\n    # If it's not, it's treated as it's a 'a'\n    start_pattern = r'^(a)(\\s)(b)'\n    end_pattern = r'(\\s)(b)'\n    return re.search(start_pattern, text)\n",
        "num_ids": 103
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict.values():\n        sum+=x\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    print(dict)\n    total = 0\n    for key in dict:\n        total += dict[key]\n    print(total)\n    \ndef return_dictionary(dictionary):\n    '''\n    Write function to find the given dictionary.\n    '''\n    print(dictionary)\n    for key in dictionary:\n        print(key, dictionary[key])\n    \ndef main():\n    '''\n    1. Read in the file\n    2. Create a dictionary from the file\n    3. Print the sum\n    4. Print the dictionary\n    '''\n    filename = 'names.txt'\n    file = open(filename, 'r')\n    dict = {}\n    for line in file:\n        name, surname = line.strip().split('-')\n        dict[name] = surname\n    file.close()\n    return_sum(dict)\n    return_dictionary(dict)\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 95
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # TODO: modify the code so that it takes an argument that is a dictionary and returns the sum\n    # of all the items in the dictionary.\n    # If the dictionary is empty, or has no items, then return 0.\n    # Note: the input dictionary may contain duplicate keys, and the function should\n    # ignore those items\n    if len(dict) == 0 or dict == {}:\n        return 0\n    else:\n        sum = 0\n        for item in dict:\n            sum += dict[item]\n        return sum\n",
        "num_ids": 123
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for items in dict.values():\n        sum=sum(items)\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key,value in dict.items():\n        sum = sum + value\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 2 or n > 100:\n        return -1\n    else:\n        sum = 0\n        i = 2\n        while i <= n:\n            if i % 2 == 0:\n                sum += i\n                i += 1\n            else:\n                i += 1\n        return sum\n",
        "num_ids": 71
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 2:\n        return n\n    else:\n        return sum_odd(n-1) + sum_odd(n-2)\n",
        "num_ids": 37
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(l, r + 1): \n        if i % 2!= 0: \n            sum_odd = sum_odd + i \n    return sum_odd \n",
        "num_ids": 53
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            odds += i\n    return odds\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    a=0\n    while a <= n:\n        if n%2==1:\n            a+=1\n        else:\n            pass\n        n=n//2\n    return a\ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    a=0\n    while a <= n:\n        if n%2==0:\n            a+=1\n        else:\n            pass\n        n=n//2\n    return a\ndef sum_range(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    a=0\n    while a <= n:\n        if n%2==0:\n            a+=1\n        else:\n            pass\n        n=n//2\n    return a\n",
        "num_ids": 46
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s=0\n    for i in range(l,r+1):\n        if i%2!=0:\n            s=s+i\n    print(s)\nsum_odd(5)\n",
        "num_ids": 50
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = int(n) \n    while(l <= r): \n        if(n % 2 == 1): \n            l = l + 1\n            n = n / 2 \n        else: \n            r = r - 1 \n    return l \n",
        "num_ids": 69
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n): \n        if i % 2!= 0: \n            sum = sum + i \n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n\n    sum = 0\n    while (r-l >= 1):\n        if (r % 2 == 1):\n            sum += r\n            r = r // 2\n        else:\n            l = l + 1\n    return sum\n",
        "num_ids": 64
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        print('Invalid input')\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 9\n    else:\n        for i in range(n):\n            if i % 2!= 0:\n                continue\n            else:\n                sum = n + sum_odd(n - 1)\n                break\n    return sum\n",
        "num_ids": 131
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum=sum+arr[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] > arr[1]:\n            return arr[1]\n        else:\n            return arr[0]\n    else:\n        return _sum(arr[:-1]) + _sum(arr[1:])\n",
        "num_ids": 105
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for value in arr:\n        total += value\n    return total\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n    \ndef is_number(s):\n    '''\n    Write a python function to check whether a string is a number or not.\n    '''\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    res = n\n    res = bin(res)[2:].zfill(32)\n    n = (n << d)\n    n = bin(n)[2:].zfill(32)\n    return n\n",
        "num_ids": 52
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    a = n & (1 << d)\n    b = (n >> d) & (1 << d)\n    n = (n << d) | (a << (d + 1)) | b\n",
        "num_ids": 50
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n | (1<<d) \n",
        "num_ids": 14
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = n%(2**32)\n    r = n//(2**32)\n    if l==r:\n        return 0\n    if l%2==0:\n        return l-r\n    else:\n        return r+l\n",
        "num_ids": 60
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp=n\n    temp=temp>>(32-d)\n    temp=temp|(n<<(32-d))\n    temp=temp>>(32-d)\n    return temp\n",
        "num_ids": 47
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert (n >= 0)\n    a = n % 32 \n    n = n // 32 \n    \n    if n > d:\n        n -= (d << 32)\n    \n    #print (\"\\n n is\", n)\n    if (a < d):\n        n = n + ((d << (32-a)) & (1 << 32))\n    elif (a >= d):\n        n = (n + (a << 32)) % (1 << 32)\n    #print (\"n is\", n)\n    return n\n",
        "num_ids": 127
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # do conversion\n    n = n ^ (1 << d)\n    # then shift\n    n = (n >> d) | (n << (32-d))\n    # and then convert back to 8 bit\n    n = n >> (8-d)\n    return n\n",
        "num_ids": 66
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & (1 << d)\n    return n | (n >> d)\n",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Your code here\n    n = n & ~(-1)\n    n = n << d\n    n = n | (1 << d)\n    return n\n",
        "num_ids": 40
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a=str(bin(n))[2:]\n    l=len(a)\n    x=l%4\n    if x==0:\n        return (int(a,2)+d)\n    elif x==1:\n        return (n)\n    elif x==2:\n        return (d)\n    elif x==3:\n        return (int(a,2)+d)\n    \ndef main():\n    print(\"Enter a positive integer: \")\n    try:\n        x=int(input())\n        print(\"Enter a positive integer: \")\n        y=int(input())\n        print(\"Enter a positive integer: \")\n        z=int(input())\n    except ValueError:\n        print(\"Invalid Input. Enter a number.\")\n    while True:\n        print(\"\")\n        print(\"1. Left Rotate\")\n        print(\"2. Right Rotate\")\n        print(\"3. Exit\")\n        print(\"Enter a number: \")\n        x=input()\n        if x==\"1\":\n            print(\"Left Rotate: \")\n            y=left_rotate(y,1)\n            print(y)\n        elif x==\"2\":\n            print(\"Right Rotate: \")\n            y=left_rotate(y,3)\n            print(y)\n        elif x==\"3\":\n            print(\"\")\n            print(\"Bye!\")\n            break\n        else:\n            print(\"Invalid Input. Enter a number.\")\n    return 0\nmain()",
        "num_ids": 356
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','', text)\n    return text\n",
        "num_ids": 21
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = str(text)\n    text = re.sub(\" +\",\" \",text)\n    text = re.sub(r'^ +',' ',text)\n    text = re.sub(r' +$',' ',text)\n    text = re.sub(r' +', \" \", text)\n    return text\n",
        "num_ids": 75
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # YOUR CODE HERE\n    return text.replace(\" \", \"\")\n    \n    \n",
        "num_ids": 22
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \",\"\")\n    return text\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +',' ',text).strip()\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text_without_spaces = re.sub(r'^\\s+', '', text)\n    return text_without_spaces\n",
        "num_ids": 35
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n",
        "num_ids": 14
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    stripped_text = re.sub(r'^\\s+', '', text)\n    return stripped_text\n",
        "num_ids": 30
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(char if char!='' else'' for char in text.lower())\n",
        "num_ids": 24
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)\n",
        "num_ids": 27
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Declare a list for the 3 numbers\n    x = [x,y,z]\n    # Initialize counter\n    count = 0\n    # For each item in the list\n    for item in x:\n        # Check if item is equal\n        if item == x[0]:\n            # If the current item is equal\n            if x[1] == x[2]:\n                # Increase counter by one\n                count += 1\n        elif item == x[1]:\n            # If the current item is equal\n            if x[2] == x[0]:\n                # Increase counter by one\n                count += 1\n        elif item == x[2]:\n            # If the current item is equal\n            if x[0] == x[1]:\n                # Increase counter by one\n                count += 1\n    # Print the results\n    print(count)\n",
        "num_ids": 199
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    l1 = list(x)\n    l2 = list(y)\n    l3 = list(z)\n",
        "num_ids": 29
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # 1. Declare a variable called nums\n    # 2. Declare a variable called nums\n    # 3. Declare a variable called total\n    # 4. Declare a function called check\n    # 5. Initialize a list of numbers, as an array\n    # 6. Initialize a count, as an array\n    # 7. Use nums, nums, and total to call a function\n    # 8. Call a function with a value of x as argument\n    # 9. Print the value of the array\n    # 10. Call a function with a value of y as argument\n    # 11. Print the value of the array\n    # 12. Call a function with a value of z as argument\n",
        "num_ids": 161
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x+y==z\n    assert x+z==y+z\n    assert x+z==z+y+z\n    assert x+y==z+y\n    assert x+z==y+z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+z==y\n    assert x+y==z\n    assert x+y==z\n    assert x+y==z\n    assert x+y=",
        "num_ids": 2010
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    for i in range(x,y):\n        if i==z:\n            result += 1\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    # Time complexity = O(n)\n    # Space Complexity = O(1)\n    \n    if x==y and y==z:\n        print('No. of equal numbers:', 0)\n    elif x==y or y==z or z==x:\n        print('No. of equal numbers:', x)\n    elif x==z and z==y:\n        print('No. of equal numbers:', z)\n    elif x==z or z==y or y==x:\n        print('No. of equal numbers:', y)\n    else:\n        print('No. of equal numbers:', z+y+x)\n",
        "num_ids": 155
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # testing x, y and z\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    # finding count of numbers from x, y and z\n    count = 0\n    if x == y == z:\n        count = 1\n    else:\n        count = 0\n    # displaying result\n    print(\"The number of equal numbers from x, y and z is :\",count)",
        "num_ids": 100
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Write your code here.\n    # TODO: Now you can solve this problem.\n    print(x)\n    print(y)\n    print(z)\n",
        "num_ids": 41
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x>y and x>z):\n        return x\n    elif (y>x and y>z):\n        return y\n    else:\n        return z\nprint(test_three_equal(1,2,3))",
        "num_ids": 57
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x + y + z)\n",
        "num_ids": 12
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count = 0\n    # for i in range(len(arr) - 1):\n    #     for j in range(i + 1, len(arr)):\n    #         if arr[i] > arr[j]:\n    #             count += 1\n    # return count\n",
        "num_ids": 67
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    count = 0\n    j = 0\n    while j < length:\n        i = j\n        while i > 0:\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n                i -= 1\n                j -= 1\n            else:\n                i -= 1\n        j += 1\n    return count\n",
        "num_ids": 103
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count the number of rotations\n    count = 0\n",
        "num_ids": 16
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    counter = 0\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i]!= arr[len(arr)-1]:\n            if arr[i] > arr[i+1]:\n                counter += 1\n            if arr[i] < arr[i+1]:\n                counter += 1\n    return counter\n",
        "num_ids": 86
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    count = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    m = len(arr)\n    n = len(arr[0])\n    s = 0\n    t = 0\n    r = 0\n    for i in range(m):\n        for j in range(n):\n            if arr[i][j] > arr[i][t]:\n                t += 1\n            elif arr[i][j] > arr[i][s]:\n                s += 1\n            elif arr[i][j] < arr[i][t]:\n                t = s\n                s = j\n            elif arr[i][j] < arr[i][t]:\n                s += j\n            else:\n                t += 1\n            if t > s:\n                r += 1\n        t = 0\n        s = 0\n    return r\n",
        "num_ids": 180
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    \n    # If array is already sorted\n    if arr == sorted(arr):\n        return 0\n    \n    # Initialize the first index to be 0\n    first_index = 0\n    # Initialize the last index to be the length of array\n    last_index = len(arr) - 1\n    # Initialize the current index to be 0\n    current_index = 0\n",
        "num_ids": 95
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    s = 0\n    m = 1\n    for i in range(n):\n        s += arr[i]\n        if s > m:\n            m = s\n            m %= n\n    return m\n",
        "num_ids": 59
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i]>=arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            count+=1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    size = len(arr)\n",
        "num_ids": 10
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq = int(n**0.5)\n    if sq == int(sq) and n%sq == 0:\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if it is a perfect square\n    if n % 2 == 0:\n        # if it is perfectly square\n        if n == (n >> 1):\n            return True\n        else:\n            return False\n    else:\n        # check if it is not a perfect square\n        if n == (n >> 1):\n            return True\n        else:\n            return False\n        \n        ",
        "num_ids": 91
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0):\n        return True\n",
        "num_ids": 14
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i * i <= n :\n        if n % i == 0 :\n            return False\n        i += 1\n",
        "num_ids": 34
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    else:\n        return is_perfect_square(n//2)\n",
        "num_ids": 54
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if number is in base 2\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_perfect_square(n // 2)\n",
        "num_ids": 54
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return n == int(n)\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            i = 3\n            while i * i <= n:\n                if n % i == 0:\n                    return False\n                i += 2\n            return True",
        "num_ids": 86
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        if n == 1:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            return is_perfect_square(n-1) and is_perfect_square(n//2)\n",
        "num_ids": 82
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0):\n        return False\n    if (n == 0):\n        return True\n    if (n == 1):\n        return True\n    if (n % 2 == 0):\n        return False\n    if (n == (n ** 0.5)):\n        return True\n    else:\n        return False\n        ",
        "num_ids": 79
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == int(n):\n        return True\n    if n < 0:\n        return False\n    if n == int(n/2):\n        return True\n    if n%2 == 0:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if (i % 2) == 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product == 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)%2 == 0: \n        return True\n    else: \n        return False \n",
        "num_ids": 29
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==1:\n        return True\n    return arr[0]*arr[1]==arr[1]*arr[0] \n",
        "num_ids": 39
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) % 2 == 0: \n        return False \n    else: \n        return True \n",
        "num_ids": 30
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)): \n        if arr[i] % 2 == 0: \n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for n in arr:\n        if n % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return arr[0] % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = [0, 0] # init the highest\n    for list in lists:\n        for x in list:\n            if x > max[0]:\n                max = x, list\n    return max[1]\n",
        "num_ids": 52
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your code here\n    return None\n",
        "num_ids": 12
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # create a new empty list\n    max_sum = []\n    # loop over the list\n    for i in lists:\n        # add each value to the new list\n        for num in i:\n            # add the value to the new list\n            max_sum.append(num)\n",
        "num_ids": 68
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    s = sum(lists)\n    return [i for i in lists if i[0] == s]\n",
        "num_ids": 27
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for item in lists:\n        # print(item)\n        if max(item) not in max_sum_list:\n            max_sum_list.append(max(item))\n",
        "num_ids": 54
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = []\n    for list in lists:\n        if list not in highest_sum:\n            highest_sum.append(list)\n    return highest_sum\n",
        "num_ids": 42
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for list in lists:\n        max_sum += max(list)\n    return max_sum\n",
        "num_ids": 32
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = []\n    for i in range(len(lists)):\n        s = 0\n        for j in lists[i]:\n            s += j\n        if s > highest[-1]:\n            highest.append(s)\n    return highest\n",
        "num_ids": 60
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run += 1\n    return max_run\n",
        "num_ids": 48
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    for i in range(0,len(test_str)):\n        if test_str[i].isupper():\n            if max < i:\n                max = i\n    return max\n",
        "num_ids": 51
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_chars = set(test_str)\n    return uppercase_chars\n",
        "num_ids": 26
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Find characters in string\n    dict_char = {}\n    for char in test_str:\n        if char.isupper():\n            dict_char[char] = dict_char.get(char,0) + 1\n    \n    # Convert dict to list\n    list_char = sorted(list(dict_char.items()), key=lambda x: x[1], reverse=True)\n    \n    # Return max\n    return list_char[0][0]\n    ",
        "num_ids": 114
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    test_str_length = len(test_str)\n    for i in range(test_str_length):\n        if test_str[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upper_code = 0\n    max_lower_code = 0\n    max_uppercase_code = 0\n",
        "num_ids": 31
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    all_uppercase = 0\n    run_uppercase = 0\n    for letter in test_str:\n        if letter.isupper():\n            all_uppercase += 1\n        elif letter.islower():\n            run_uppercase += 1\n    if all_uppercase == len(test_str):\n        return run_uppercase\n    else:\n        return 0\n",
        "num_ids": 95
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase = 0\n    for i in test_str:\n        if i.isupper():\n            if i.isupper():\n                if max_run_uppercase < len(i):\n                    max_run_uppercase = len(i)\n            else:\n                if max_run_uppercase < len(i):\n                    max_run_uppercase = len(i)\n    return max_run_uppercase\n",
        "num_ids": 110
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    MAX_RUN = 0\n    max_run_upp = []\n    \n    for i in test_str:\n        if i.isupper():\n            if len(max_run_upp) < len(max_run_upp[-1]):\n                max_run_upp = max_run_upp[-1]\n        \n            else:\n                max_run_upp = max_run_upp[:-1]\n            \n    return len(max_run_upp)\n",
        "num_ids": 115
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return \"\"\n    elif len(test_str) == 1:\n        return test_str\n",
        "num_ids": 37
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # O(N) solution\n    return nums[0]\n",
        "num_ids": 18
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    low = 0\n    mid = 0\n    high = len(nums) - 1\n    \n    while(low <= high):\n        mid = (low + high) // 2\n        if(mid % 2 == 0):\n            return mid\n        elif(mid == 0):\n            return nums[mid]\n        elif(mid < 0):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n",
        "num_ids": 106
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums.sort()\n    first_num = nums[0]\n    pos = 0\n    for num in range(1, len(nums)):\n        if num % 2!= 0:\n            pos += 1\n            if nums[pos] < num:\n                first_num = nums[pos]\n                break\n    return first_num\n",
        "num_ids": 86
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #return the first odd element\n    return nums[0]\n",
        "num_ids": 18
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    a = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i]%2!=0:\n            a = nums[i]\n    return a\n",
        "num_ids": 53
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0]\n",
        "num_ids": 10
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return nums[i]\n",
        "num_ids": 37
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            return nums[i]\n",
        "num_ids": 32
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    x = int(len(nums))\n    if x % 2 == 1:\n        return None\n    else:\n        num = nums[0]\n        i = 1\n        while i <= x:\n            if nums[i] % 2!= 0:\n                num = nums[i]\n                break\n            i += 1\n        return num\n        # I had not taken the try/except statement so i just used this for this solution\n",
        "num_ids": 106
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # n = len(nums)\n    # if n <= 1:\n    #     return nums[0]\n    # elif nums[0] % 2 == 0:\n    #     return first_odd(nums[1:])\n    # else:\n    #     return nums[nums[0]//2]\n    return min(nums)\n",
        "num_ids": 89
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        if len(test_tup) == len(K):\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    K = sorted(K)\n    test_tup = list(test_tup)\n    if len(test_tup) == len(K):\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_list = []\n    for i in test_tup:\n        check_list.append(i)\n    return K in check_list\n",
        "num_ids": 37
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #insert your code here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # if test_tup[1] is not None and test_tup[2] is not None:\n    #     if test_tup[1] == test_tup[2]:\n    #         return True\n    # elif test_tup[1] == None:\n    #     return False\n    # elif test_tup[2] == None:\n    #     return False\n    # else:\n    #     return False\n",
        "num_ids": 107
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup[0]) == K\n",
        "num_ids": 16
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0][0] == test_tup[1][0]\n",
        "num_ids": 24
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    else:\n        return False\n    \n    \ndef check_A(test_tup, A):\n    '''\n    Write a function to check if the given tuples contain the A or not.\n    '''\n    if test_tup[0] == A:\n        return True\n    else:\n        return False\n    \n    \ndef check_T(test_tup, T):\n    '''\n    Write a function to check if the given tuples contain the T or not.\n    '''\n    if test_tup[0] == T:\n        return True\n    else:\n        return False\n    \n    \ndef check_B(test_tup, B):\n    '''\n    Write a function to check if the given tuples contain the B or not.\n    '''\n    if test_tup[0] == B:\n        return True\n    else:\n        return False\n    \n    \ndef check_I(test_tup, I):\n    '''\n    Write a function to check if the given tuples contain the I or not.\n    '''\n    if test_tup[0] == I:\n        return True\n    else:\n        return False\n    \n    \ndef check_G(test_tup, G):\n    '''\n    Write a function to check if the given tuples contain the G or not.\n    '''\n    if test_tup[0] == G:\n        return True\n    else:\n        return False\n    \n    \ndef check_J(test_tup, J):\n    '''\n    Write a function to check if the given tuples contain the J or not.\n    '''\n    if test_tup[0] == J:\n        return True\n    else:\n        return False\n    \n    \ndef check_R(test_tup, R):\n    '''\n    Write a function to check if the given tuples contain the R or not.\n    '''\n    if test_tup[0] == R:\n        return True\n    else:\n        return False\n    \n    \ndef check_S(test_tup, S):\n    '''\n    Write a function to check if the given tuples contain the S or not.\n    '''\n    if test_tup[0] == S:\n        return True\n    else:\n        return False\n    \n    \ndef check_T_I(test_tup, T_I):\n    '''\n    Write a function to check if the given tuples contain the T_I or not.\n    '''\n    if test_tup[0] == T_I:\n        return True\n    else:\n        return False\n    \n    \ndef check_T_G(test_tup, T_G):\n    '''\n    Write a function to check if the given tuples contain the T_G or not.\n    '''\n    if test_tup[0] == T_G:\n        return True\n    else:\n        return False\n    \n    \ndef check_T_J(test_tup, T_J):\n    '''\n    Write a function to check if the given tuples contain the T_J or not.\n    '''\n    if test_tup[0] == T_J:\n        return True\n    else:\n        return False\n    \n    \ndef check_A_G(test_tup, A_G):\n    '''\n    Write a function to check if the given tuples contain the A_G or not.\n    '''\n    if test_tup[0] == A_G:\n        return True\n    else:\n        return False\n    \n    \ndef check_A_J(test_tup, A_J):\n    '''\n    Write a function to check if the given tuples contain the A_J or not.\n    '''\n    if test_tup[0] == A_J:\n        return True\n    else:\n        return False\n    \n    \ndef check_B_T(test_tup, B_T):\n    '''\n    Write a function to check if the given tuples contain the B_T or not.\n    '''\n    if test_tup[0] == B_T:\n        return True\n    else:\n        return False\n    \n    \ndef check_T_S(test_tup, T_S):\n    '''\n    Write a function to check if the given tuples contain the T_S or not.\n    '''\n    if test_tup[0] == T_S:\n        return True\n    else:\n        return False\n    \n    \ndef check_I_A(test_tup, I_A):\n    '''\n    Write a function to check if the given tuples contain the I_A or not.\n    '''\n    if test_tup[0] == I_A:\n        return True\n    else:\n        return False\n    \n    \ndef check_G_J(test_tup, G_J):\n    '''\n    Write a function to check if the given tuples contain the G_J or not.\n    '''\n    if test_tup[0] == G_J:\n        return True\n    else:\n        return False\n    \n    \ndef check_J_R(test_tup, J_R):\n    '''\n    Write a function to check if the given tuples contain the J_R or not.\n    '''\n    if test_tup[0] == J_R:\n        return True\n    else:\n        return False\n    \n    \ndef check_T_S_A(test_tup, T_S_A):\n    '''\n    Write a function to check if the given tuples contain the T_S_A or not.\n    '''\n    if test_tup[0] == T_S_A:\n        return True\n    else:\n        return False\n    \n    \ndef check_T_I_G(test_tup, T_I_G):\n    '''\n    Write a function to check if the given tuples contain the T_I_G or not.\n    '''\n    if test_tup[0] == T_I_G:\n        return True\n    else:\n        return False\n    \n    \ndef check_G_A_T(test_tup, G_A_T):\n    '''\n    Write a function to check if the given tuples contain the G_A_T or not.\n    '''\n    if test_tup[0] == G_A_T:\n        return True\n    else:\n        return False\n    \n    \ndef check_T_R_A(test_tup, T_R_A):\n    '''\n    Write a function to check if the given tuples contain the T_R_A or not.\n    '''\n    if test_tup[0] == T_R_A:\n        return True\n    else:\n        return False\n    \n    \ndef check_T_R_S(test_tup, T_R_S):\n    '''\n    Write a function to check if the given tuples contain the T_R_S or not.\n    '''\n    if test_tup[0] == T_R_S:\n        return True\n    else:\n        return False\n    \n    \ndef check_A_R_T(test_tup, A_R_T):\n    '''\n    Write a function to check if the given tuples contain the A_R_T or not.\n    '''\n    if test_tup[0] == A_R_T:\n        return True\n    else:\n        return False\n    \n    \ndef check_J_R_T(test_tup, J_R_T):\n    '''\n    Write a function to check if the given tuples contain the J_R_T or not.\n    '''\n    if test_tup[0] == J_R_T:\n        return True\n    else:\n        return False\n    \n    \ndef check_T_S_A_J(test_tup, T_S_A_J):\n    '''\n    Write a function to check if the given tuples contain the T_S_A_J or not.\n    '''\n    if test_tup[0] == T_S_A_J:\n        return True\n    else:\n        return False",
        "num_ids": 32
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # k = 0\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == K:\n            return True\n",
        "num_ids": 42
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    T = set(test_tup)\n    if K in T:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup2[1] < test_tup1[1]\n",
        "num_ids": 40
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # TODO: Write your code here.\n",
        "num_ids": 13
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup = tuple(test_tup2)\n    small = False\n    if tup:\n        for each in test_tup1:\n            if each < tup[0]:\n                small = True\n    return small\n",
        "num_ids": 56
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1 == test_tup2:\n        return False\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #Write your code here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #create a tuple\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n",
        "num_ids": 36
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return_val = True\n    for item in test_tup1:\n        if item in test_tup2:\n            if test_tup2[test_tup1.index(item)] < item:\n                return_val = False\n    return return_val\n",
        "num_ids": 66
    }
]