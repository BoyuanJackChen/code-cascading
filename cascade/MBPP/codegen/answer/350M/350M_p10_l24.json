[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # YOUR CODE HERE\n    tup1 = test_tup1\n    tup2 = test_tup2\n    shared = []\n    index = []\n    for i in range(len(tup1)):\n        for j in range(i+1, len(tup1)):\n            if tup1[i] == tup1[j]:\n                shared.append(tup1[i])\n                index.append(j)\n    #for i in range(len(tup2)):\n        #if tup2[i] in shared:\n            #shared.remove(tup2[i])\n            #index.remove(i)\n    return shared, index\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return (test_tup1[0] == test_tup2[0])\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1_indices = []\n    tup2_indices = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                tup1_indices.append(i)\n                tup2_indices.append(j)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    x = len(test_tup1)\n    y = len(test_tup2)\n    z = len(test_tup1) + len(test_tup2)\n    if x == y:\n        elements = {}\n        for i in range(x):\n            elements[test_tup1[i]] = test_tup2[i]\n        return elements\n    elif x < y:\n        for i in range(x):\n            if test_tup1[i] in test_tup2:\n                test_tup2.remove(test_tup1[i])\n            else:\n                break\n        return similar_elements(test_tup1, test_tup2)\n    else:\n        for i in range(y):\n            if test_tup2[i] in test_tup1:\n                test_tup1.remove(test_tup2[i])\n            else:\n                break\n        return similar_elements(test_tup1, test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #create a list of all the elements\n    shared_elements = []\n    #loop through the two lists\n    for element1 in test_tup1:\n        for element2 in test_tup2:\n            #if element1 and element2 are the same element\n            if element1 == element2:\n                #append them to the list\n                shared_elements.append(element1)\n    #return the list of shared elements\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code here\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    if type(test_tup1[0]) is not tuple or type(test_tup2[0]) is not tuple:\n        return None\n    \n    shared_tup = []\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            shared_tup.append(tup1)\n            shared_tup.append(tup2)\n    return shared_tup"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup3 = list(set(test_tup1) & set(test_tup2))\n    test_tup3.sort()\n    return test_tup3\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = []\n    l2 = []\n    for i in test_tup1:\n        if i in test_tup2:\n            l1.append(i)\n    for i in test_tup2:\n        if i in test_tup1:\n            l2.append(i)\n    return l1, l2\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2 == 0:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%3 == 0:\n        return False\n    if n%5 == 0:\n        return False\n    if n%7 == 0:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n%2 == 0:\n        return False\n    if n==3 or n==4:\n        return True\n    if n%2 == 0 or n%3 == 0:\n        return False\n    if n%5 == 0:\n        return False\n    if n%7 == 0:\n        return False\n    if n%4 == 0:\n        return False\n    for i in range(2,int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_odd_prime(n):\n    '''\n    Write a python function to identify prime numbers that are odd.\n    '''\n    if n%2 == 0:\n        return False\n    if n==3 or n==4:\n        return True\n    if n%2 == 0 or n%3 == 0:\n        return False\n    if n%5 == 0:\n        return False\n    if n%7 == 0:\n        return False\n    if n%4 == 0:\n        return False\n    for i in range(2,int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n > 2 and n % 3 == 0:\n        return False\n    else:\n        for i in range(5, math.floor(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n % 2) == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        return is_not_prime(n-1)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(4, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_abundant(n):\n    '''\n    Write a python function to identify abundant numbers.\n    '''\n    return not any([is_prime(n), is_not_prime(n)])\ndef is_strictly_prime(n):\n    '''\n    Write a python function to identify strictly prime numbers.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_inverse(n):\n    '''\n    Write a python function to identify an inverse number.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_primitive_root(n):\n    '''\n    Write a python function to identify primitive roots.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_negative_prime(n):\n    '''\n    Write a python function to identify negative numbers.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2 or n == 3:\n        return False\n    else:\n        for i in range(4, n, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_cyclic(n):\n    '''\n    Write a python function to identify cyclic numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_group(n):\n    '''\n    Write a python function to identify prime group numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_group_recursive(n):\n    '''\n    Write a python function to identify prime group numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_group_memo(n):\n    '''\n    Write a python function to identify prime group numbers.\n    '''\n    memo = [False for _ in range(n+1)]\n    def is_prime_group_recursive(n, memo):\n        if n == 0:\n            return True\n        elif n == 1:\n            return False\n        elif n == 2:\n            return True\n        else:\n            if memo[n]:\n                return memo[n]\n            else:\n                if n % 2 == 0:\n                    return is_prime_group_recursive(n//2, memo)\n                else:\n                    for i in range(3, int(math.sqrt(n))+1, 2):\n                        if n % i == 0:\n                            break\n                    else:\n                        return False\n                    if memo[n//i] and memo[n//i+1]:\n                        return True\n                    memo[n//i] = True\n                    memo[n//i+1] = True\n                    return is_prime_group_recursive(n//i, memo)\n    return is_prime_group_recursive(n, memo)\ndef is_primitive_group(n):\n    '''\n    Write a python function to identify prime group numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n == 8:\n        return True\n    elif n == 9:\n        return True\n    elif n == 10:\n        return True\n    else:\n        for i in range(10, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_group_recursive(n, memo):\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n == 8:\n        return True\n    elif n == 9:\n        return True\n    elif n == 10:\n        return True\n    else:\n        for i in range(10, int(math.sqrt(n))+1):\n            if n % i == 0:\n                break\n        else:\n            return False\n        for j in range(10, int(math.sqrt(n))+1, 2):\n            if n % j == 0:\n                break\n        else:\n            return False\n        if n in memo:\n            return memo[n]\n        else:\n            memo[n] = True\n            return is_prime_group_recursive(n//2, memo) or is_prime_group_recursive(n//2+1, memo)\ndef is_prime_group_memo(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n == 8:\n        return True\n    elif n == 9:\n        return True\n    elif n == 10:\n        return True\n    else:\n        for i in range(10, int(math.sqrt(n))+1):\n            if n % i == 0:\n                break\n        else:\n            return False\n        for j in range(10, int(math.sqrt(n))+1, 2):\n            if n % j == 0:\n                break\n        else:\n            return False\n        if n in memo:\n            return memo[n]\n        else:\n            memo[n] = True\n            return is_prime_group_memo(n//2, memo) or is_prime_group_memo(n//2+1, memo)\ndef is_prime_group_recursive(n, memo):\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n == 8:\n        return True\n    elif n == 9:\n        return True\n    elif n == 10:\n        return True\n    else:\n        for i in range(10, int(math.sqrt(n))+1):\n            if n % i == 0:\n                break\n        else:\n            return False\n        for j in range(10, int(math.sqrt(n))+1, 2):\n            if n % j == 0:\n                break\n        else:\n            return False\n        i"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    return is_prime\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    if n % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n == 2 or n == 3) or (n % 2 == 0) or (n % 3 == 0):\n        return False\n    elif n == 4 or n == 5:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n,nums)[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = nums[:n]\n    hq.heapify(nums)\n    return hq.nlargest(n,nums)[-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # TODO: Write your code here.\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(len(nums)):\n        heapq.heappush(heap,[nums[i],i])\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    return heapq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(0,len(nums)):\n        heapq.heappush(heap, -nums[i])\n    for i in range(len(nums)-1,-1,-1):\n        heapq.heappop(heap)\n    return -heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for _ in range(n):\n        yield hq.heappop(nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    for i in range(n):\n        hq.heappush(nums, nums[0])\n    \n    # sort the list\n    nums = sorted(nums, reverse=True)\n    return nums\n    \ndef heap_queue_largest_v2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    for i in range(n):\n        heapq.heappush(nums, nums[0])\n        \n    # sort the list\n    nums = sorted(nums, reverse=True)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # define the key function\n    def key(num):\n        return num//n\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #return sorted(nums,reverse=True)\n    \n    \n    \n    \n    hq.heapify(nums)\n    n = n-1\n    k = 0\n    while n>=0:\n        print('heap',nums)\n        if k>=0:\n            print('heapq',nums)\n            print('heapq.heappop',nums)\n            nums = heapq.heappop(nums)\n            k+=1\n        else:\n            print('heapq.heappop',nums)\n            print('heapq.heapify',nums)\n            nums = heapq.heapify(nums)\n            n = n-1\n    return nums\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power_of_two = False\n    if (x>2):\n        for i in range(2,abs(x)):\n            if (x%i)==0:\n                power_of_two = True\n    else:\n        power_of_two = True\n    return power_of_two"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x>0):\n        if (x&1==1):\n            print(True)\n        else:\n            print(False)\n    else:\n        print(False)\n        \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x < 0 or x > 20:\n        return False\n    else:\n        return is_Power_Of_Two(x-1) and is_Power_Of_Two(x-2)\n    \n    "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    '''\n    def is_Power_Of_Two(x):\n        return x & (x-1) == 0\n    '''\n    return ((x & (x-1))!= 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x == 1:\n        return False\n    else:\n        if x % 2 == 0:\n            return False\n        else:\n            return True\n    \nprint(is_Power_Of_Two(0))\nprint(is_Power_Of_Two(1))\nprint(is_Power_Of_Two(2)"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x % 2 == 0): \n        return True\n    else: \n        return False\n    \n    \ndef main(): \n    '''\n    input: the first number \n    output: the last number \n    '''\n    # Write your code here\n    \n    x = int(input())\n    if is_Power_Of_Two(x): \n        print(x) \n    else: \n        print(\"The number does not differ at one bit.\") \n    \nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2!= 0:\n        print(\"The two numbers are not equal.\")\n    else:\n        print(\"The two numbers are equal.\")\n        \nis_Power_Of_Two(50)\nis_Power_Of_Two(50)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>0:\n        if x%2==0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0: \n        return True\n    elif x==1:\n        return False\n    else:\n        if x%2==0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text:\n        for char in word:\n            if len(word) >= 4:\n                result.append(char)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # RE : str\n    regex = r'(\\w+)'\n    # pattern : str\n    pattern = re.compile(regex)\n    # matches : list\n    matches = pattern.findall(text)\n    # new_text : str\n    new_text = ''.join(matches)\n    # new_text = re.sub(pattern, r'\\1\\1', text)\n    return new_text\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    word_list = []\n    for word in text.split():\n        if len(word) >= 4:\n            word_list.append(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #FIND ALL WORDS WITH > 4 CHARACTERS IN THE TEXT\n    res = re.findall(r\"[a-zA-Z]+[a-zA-Z]+\", text)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    text = text.replace(\" \",\"\")\n    pattern = re.compile(r\"\\b[a-zA-Z0-9_]+\\b\")\n    for i in range(len(text)):\n        if re.match(pattern, text[i]):\n            result.append(text[i])\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    str_in_temp = text\n    list_found_long_char = []\n    #Pattern\n    long_str = r'\\w+[A-Za-z0-9_]*\\w+'\n    # Find all characters in string and filter out those which are longer than 4 characters\n    for word in re.findall(long_str, str_in_temp):\n        if len(word) > 4:\n            list_found_long_char.append(word)\n    # Return list of found long characters\n    return list_found_long_char\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w+', text)\n    "
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(r'[^\\w\\s]{4,}')\n    return list(filter(regex.search, text.lower().split()))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    dic = {}\n    for char in text:\n        if char.isalpha() and len(char) >= 4:\n            dic[char] = 1\n    return dic\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    string = text.lower()\n    words = re.findall(r'\\w+', string)\n    longest = ''\n    for word in words:\n        if len(word) >= 4:\n            if word not in longest:\n                longest = word\n    return longest\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums.sort()\n    square_nums = []\n    square = []\n    for num in nums:\n        square.append(num**2)\n    square_nums = square\n    return square_nums\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num**2)\n    return square_list\n    # Your code here\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    if not nums: return []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # iterate over the list and square the elements\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # get length of list and return\n    def get_len(nums):\n        return len(nums)\n    # find sum of squares\n    def square_sum(nums):\n        def sum(i):\n            return nums[i]**2\n        return sum(range(get_len(nums)))\n    # find squares of all elements\n    def square_all(nums):\n        return square_sum(nums)\n    # return squares of each element\n    return square_all(nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for n in nums:\n        squares.append(n*n)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums = list(nums)\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # O(n^2) for solution\n    rotations = 0\n    rotations_str = \"\"\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    #initializing the variables\n    rotations = 0\n    i = 0\n    \n    #loop through string\n    for i in range(len(str)):\n        \n        #if its the same letter\n        if(str[i] == str[i-1]):\n            rotations += 1\n            \n        #if not the same letter\n        else:\n            rotations += 1\n            \n            #if we reach the end of the string\n            if(i+1 == len(str)):\n                rotations = 0\n    \n    return rotations\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    rot = str\n    for i in range(len(str)-1):\n        if(str[i] == str[i+1]):\n            count = count + 1\n        else:\n            rot = rot + str[i]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    lst = list(str)\n    lst.sort()\n    n = len(lst)\n    for i in range(n):\n        lst.insert(n-1-i, lst.pop(0))\n    return n-1-len(lst)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = []\n    n = len(str)\n    d = {}\n    for i in range(n):\n        d[str[i]] = i\n    for i in range(n-1):\n        if d[str[i]] + 1 < d[str[i+1]]:\n            l.append(d[str[i]] + 1)\n            d[str[i]] = d[str[i+1]]\n            d[str[i+1]] = d[str[i]]\n    return min(l)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            return 0\n    return 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    i = 0\n    j = 0\n    count = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)<=1: \n        return 0\n    stack = []\n    curr_rotations = 0\n    for i in str:\n        if i not in stack:\n            stack.append(i)\n        else:\n            stack.pop()\n            curr_rotations += 1\n    return curr_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    min_rotations = 0\n    for i in range(len(str) - 1, -1, -1): \n        if str[i] == str[i + 1]: \n            continue\n        elif str[i] == str[i - 1]: \n            rotations = 1\n        else: \n            rotations = 0\n        if rotations < min_rotations: \n            min_rotations = rotations\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # get string length\n    n = len(str)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    print(s[:s.find(ch)])\n    print(s[s.find(ch)+1:])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pos = 0\n    end = len(s)\n    if(ch.lower()==\"a\"): \n        start = \"0\"\n        end = \"1\"\n    elif(ch.lower()==\"c\"): \n        start = \"2\"\n        end = \"3\"\n    elif(ch.lower()==\"d\"): \n        start = \"4\"\n        end = \"5\"\n    elif(ch.lower()==\"e\"): \n        start = \"6\"\n        end = \"7\"\n    elif(ch.lower()==\"f\"): \n        start = \"8\"\n        end = \"9\"\n    elif(ch.lower()==\"g\"): \n        start = \"a\"\n        end = \"z\"\n    else: \n        start = \"A\"\n        end = \"Z\"\n    \n    if(s[pos] == start): \n        s = s.replace(s[pos],\"\") \n    elif(s[pos] == end): \n        s = s.replace(s[pos],\"\") \n        pos += 1\n    else: \n        print(\"Invalid Input\") \n    \n    while(pos < end and s[pos]!=end): \n        pos += 1\n        \n    return s[:pos] + en"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s: \n        return ''\n    if ch==' ': \n        return ''\n    if not s.find(ch): \n        return s[:-1]+remove_Occ(s[:-1],ch) \n    else:\n        return s[:-1]+remove_Occ(s[1:],ch) \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    # use a 'while loop' to find first occurrence\n    first_occ = 0\n    first_occ_index = 0\n    for i in range(0, len(s)):\n        # print('i ='+ str(i))\n        if(s[i] == ch):\n            # print('s[i] ='+ str(s[i]))\n            first_occ = i\n            break\n    \n    # print('first_occ ='+ str(first_occ))\n    \n    # use a 'while loop' to find last occurrence\n    last_occ = 0\n    last_occ_index = 0\n    for i in range(0, len(s) - 1):\n        # print('i ='+ str(i))\n        if(s[i] == ch):\n            last_occ = i\n            break\n    \n    # print('last_occ ='+ str(last_occ))\n    \n    # delete the first occurrence\n    s = s[0:first_occ - 1] + s[first_occ:]\n    \n    # delete the last occurrence\n    s = s[0:last_occ + 1] + s[last_occ:]\n    \n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code here\n    # test your code in the following code\n    # test code\n    a = s\n    if a[-1] == ch:\n        a = a[:-1]\n    else:\n        a = a[1:]\n    if a[0] == ch:\n        a = a[1:]\n    return a"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s: \n        return 0\n    else: \n        i = 0\n        while i < len(s): \n            if s[i] == ch: \n                del s[i] \n                i -= 1 \n                break \n            i += 1\n    return len(s) \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=[]\n    x=s.find(ch)\n    l.append(x)\n    s=s[:x]+s[x+1:]\n    return s,l\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = s.find(ch)\n    s = s[:i] + s[i + len(ch):]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[ch-1:]+s[ch:]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort()\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    max_sum = 0\n    for i in range(M.shape[0]):\n        if i > 0:\n            max_sum += M[i, :].sum()\n    \n    for i in range(M.shape[0]):\n        for j in range(i, M.shape[0]):\n            if M[i, :].sum() > 0:\n                M[j, :] = M[j, :].sum() - M[i, :]\n                \n    for i in range(M.shape[0]):\n        if i == M.shape[0] - 1:\n            M[i, :] = 0\n        else:\n            M[i, :] = M[i, :].sum()\n    \n    for i in range(M.shape[0]):\n        if M[i, :].sum() == 0:\n            continue\n        elif M[i, :].sum() > max_sum:\n            for j in range(i, M.shape[0]):\n                if j == i:\n                    M[i, :] = 0\n                else:\n                    M[i, :] = M[j, :] - M[i, :]\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a temporary matrix\n    temp_matrix = [[0]*len(M[0]) for i in range(len(M))]\n    # iterate over rows\n    for r in range(len(M)):\n        # iterate over columns\n        for c in range(len(M[0])):\n            # update temporary_matrix\n            temp_matrix[r][c] = M[r][c]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x: x[0])\n    M.sort(key=lambda x: x[1])\n    M.sort(key=lambda x: x[2])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    for k in range(M.shape[0]):\n        s = sum(M[k])\n        M[k].sort()\n        M[k] = s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i,len(M)):\n            if M[i][j]==0:\n                M[i][j]=' '\n            elif M[i][j]==1:\n                M[i][j]='*'\n    return M\n    \ndef transpose(M):\n    '''\n    Write a function to transpose the given matrix.\n    '''\n    for i in range(len(M)):\n        for j in range(i):\n            M[i][j],M[j][i]=M[j][i],M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M)):\n            sum = sum + M[j][i]\n        temp = M[i]\n        M[i] = sum\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Base case\n    if len(M) == 1:\n        return M\n    \n    # Sort rows\n    r_sorted = sorted(M[0], reverse = True)\n    \n    # Sort columns\n    c_sorted = sorted(M[1], reverse = True)\n    \n    # Merge\n    for i in range(1, len(M)):\n        M[i][0] += M[i][1]\n        M[i][1] += M[i][0]\n    \n    # Create new matrix\n    new_matrix = [[0 for _ in range(len(M[0]))] for _ in range(len(M))]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            new_matrix[i][j] = M[i][j]\n    \n    # Return new matrix\n    return new_matrix\n    \ndef check_missing_tokens(s, tokens):\n    '''\n    Checks if a given token was found in the given string and return true if it was found and false if it was not.\n    '''\n    # Base case\n    if not s or len(s) <= 0:\n        return False\n    \n    # Check if token is in the list\n    for i in range(len(tokens)):\n        if s[i] in tokens[i]:\n            return True\n    \n    # Return false if no token was found\n    return False\n    \ndef count_tokens(s):\n    '''\n    Count the number of spaces in the string.\n    '''\n    # Base case\n    if not s or len(s) <= 0:\n        return 0\n    \n    # Count spaces in the string\n    space_count = 0\n    for i in range(len(s)):\n        if s[i] =='':\n            space_count += 1\n    \n    # Return count of spaces\n    return space_count\n    \ndef check_space_pattern(s, tokens):\n    '''\n    Checks if a given string has a space pattern in it.\n    '''\n    # Base case\n    if not s or len(s) <= 0:\n        return False\n    \n    # Check if string has a space pattern\n    if not s[0] in tokens[0]:\n        return False\n    \n    # Return true if the string has a space pattern\n    return True\n    \ndef check_string(s):\n    '''\n    Checks if a given string is in an alphanumeric or printable ASCII string.\n    '''\n    # Base case\n    if not s or len(s) <= 0:\n        return False\n    \n    # Base case\n    if len(s) <= 1 or any(ch.isdigit() for ch in s):\n        return False\n    \n    # Check if string is in ascii char\n    for ch in s:\n        if ord(ch) >= ord('A') and ord(ch) <= ord('Z'):\n            return False\n    \n    # Return true if string is in ascii\n    return True\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    m = len(M)\n    for i in range(0, m):\n        s += M[i][i]\n    for i in range(0, m):\n        for j in range(i, m):\n            if s < M[i][j]:\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # build list of rows\n    rows = []\n    for r in range(len(M)):\n        rows.append(r)\n        \n    # sort rows and sum them\n    for row in rows:\n        sum_row = 0\n        for col in range(len(M)):\n            sum_row += M[row][col]\n        rows[row] = sum_row\n        \n    # now sort the rows in descending order\n    for row in range(len(rows)):\n        rows[row] = rows[row]\n        \n    # now sort the rows in ascending order\n    for row in rows:\n        rows[row] = rows[row] + 1\n        \n    # now sort rows in ascending order\n    for row in rows:\n        rows[row] = rows[row] - 1\n        \n    return rows\n        \nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = 0\n    for i in range (l,b+1,h):\n        for j in range (i,b+1,h):\n            for k in range (j,b+1,h):\n                if (i+j+k)%2 == 0:\n                    v = v + 1\n    return v"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l*b*h)/3\n    print(\"Volume of a triangle is: \" + str(vol))\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    L = l;\n    b = b;\n    h = h;\n    m = (b*h)/(L*L);\n    V = m*h;\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = b*h*(l+b)/(4*(l+b)*(l-b))\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    def volume(l,b,h) : \n        '''\n        Write a python function to calculate the volume of a triangle prism.\n        '''\n        if l==b and h==b: \n            return b*h\n        if (l>b or h>b) : \n            return None\n        if (l<b) and (h>b) : \n            return None\n        if (l>b and h<b) : \n            return None\n        if (l<b) and h>b : \n            return None\n        if (l>b and h<b) : \n            return (b*h)/2\n        if (l<b and h>b) : \n            return (b*l)/2\n        if (l<b and h<b) : \n            return (b*(b-h)/2)/2\n        if (l<b and h>b) : \n            return ((b*(b-h)/2)+(b-l)/2)\n        if (l<b and h>b) : \n            return ((b*(b-h)/2)+(b-l)/2)+(b-h)/2\n    return volume(l,b,h)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if h >=0 and h <= 2*(b-a) :\n        return l * h\n    else :\n        return 'Enter valid height of prism'\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (h * b) * l\n    print('Volume :',volume)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # your code goes here\n    m = (l+b)/2\n    vol = 0\n    for i in range(0, int((2*h)/3), 3):\n        vol = vol + pow(m,3)/3\n    return vol\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text == '':\n        return False\n    elif text[0] == '_':\n        return False\n    else:\n        letters = list(text.lower())\n        for i in letters:\n            if i == '_':\n                return False\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for char in text:\n        if(char.isalpha()):\n            if(char.isupper()):\n                if(char in \"abcdefghijklmnopqrstuvwxyz\"):\n                    return True\n                else:\n                    return False\n            else:\n                if(char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n                    return True\n                else:\n                    return False\n        else:\n            return False\n    return False\n    \ndef password_dictionary():\n    '''\n    This function will read the password file and create a dictionary of the following format:\n    {\n    \"first letter\": [\n        [lowercase characters],\n        [uppercase characters],\n        [numbers]\n    ],\n    \"last letter\": [\n        [lowercase characters],\n        [uppercase characters],\n        [numbers]\n    ],\n    ...\n    }\n    '''\n    password_file = open(\"password_list.txt\", \"r\")\n    \n    password_dictionary = {}\n    \n    for line in password_file:\n        line = line.rstrip()\n        password_dictionary[line.split()[0]] = line.split()[1:len(line.split())]\n    \n    password_file.close()\n    return password_dictionary\n    \ndef range_check(start, end):\n    '''\n    This function will check if a range is between the input range.\n    '''\n    return (start <= range(int(input(\"Enter the start of range: \"))) and end >= range(int(input(\"Enter the end of range: \"))))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-zA-Z][A-Za-z0-9_]*)\\_([a-zA-Z][A-Za-z0-9_]*)\\_([a-zA-Z][A-Za-z0-9_]*)\\_')\n    return bool(pattern.search(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # YOUR CODE HERE\n    if len(re.findall(r'[A-Z]', text)) == 0:\n        return False\n    elif len(re.findall(r'[a-z]', text)) == 0:\n        return False\n    elif len(re.findall(r'[0-9]', text)) == 0:\n        return False\n    elif len(re.findall(r'[_]', text)) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for x in text:\n        if x in 'abcdefghijklmnopqrstuvwxyz':\n            return True\n    return False\n    \ndef text_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains only lowercase letters, no digits, and at least one uppercase letter.\n    '''\n    pattern = r\"[A-Z]\\w+[a-z]+[A-Z]+\"\n    return re.search(pattern, text)!= None\n    \ndef text_lowercase_with_numbers(text):\n    '''\n    Write a function that returns true if the input string contains only lowercase letters, numbers and uppercase letters.\n    '''\n    pattern = r\"[A-Z]\\w+[0-9]+[A-Z]+\"\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # FILL IN THE BLOCK OF CODE BELOW THIS COMMENT\n    # TEST: print(text_lowercase_underscore('Hello world'))\n    # TEST: print(text_lowercase_underscore('Test'))\n    # TEST: print(text_lowercase_underscore('Handsome life'))\n    # TEST: print(text_lowercase_underscore('It is a great race. It has a huge place in a lot of California.'))\n    # FILL IN THE BLOCK BELOW THIS COMMENT\n    return re.search('[a-zA-Z0-9_]+', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if(is_num(text)):\n        return False\n    if(is_alpha(text)):\n        return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    count = 0\n    underscore = re.compile(r'[a-zA-Z0-9_]+')\n    for i in text:\n        if i.isupper() == False:\n            if i.islower() == True:\n                count += 1\n        if i.isupper() == True:\n            count += 1\n        if i.islower() == False:\n            if i.isupper() == True:\n                count += 1\n    return count >= 1\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    return re.search(\"[a-zA-Z0-9_]+\", text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    return ''.join([c.lower() if c.isalpha() else c.upper() for c in text if c.isalpha()]) == text\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    if len(a) > 0:\n        for i in range(len(a)):\n            perimeter += a[i]**2\n    return perimeter\n    \ndef square_square_deviation(a):\n    '''\n    Write a function that returns the square of the square of the difference between the square of the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the difference between the square of the square of the differenc"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return round(4 * a ** 2, 2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    s = 0\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            s = s + a[i][j]\n    return s\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a*(a+1)*2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass # replace this pass (a = input())\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a < 0:\n        return -1\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \ndef cube_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a cube given its side length as input.\n    '''\n    return 3*a*a*a\n    \ndef is_square(a):\n    '''\n    Write a function that returns whether or not a number is square or not.\n    '''\n    return a**2 == a\n    \ndef is_cube(a):\n    '''\n    Write a function that returns whether or not a number is cube or not.\n    '''\n    return a**3 == a\n    \ndef addition(a, b):\n    '''\n    Write a function that returns the sum of a and b.\n    '''\n    return a+b\n    \ndef subtraction(a, b):\n    '''\n    Write a function that returns the difference of a and b.\n    '''\n    return a-b\n    \ndef multiplication(a, b):\n    '''\n    Write a function that returns the product of a and b.\n    '''\n    return a*b\n    \ndef division(a, b):\n    '''\n    Write a function that returns the quotient of a and b.\n    '''\n    return a/b\n    \ndef square(a):\n    '''\n    Write a function that returns the square of a.\n    '''\n    return a**2\n    \ndef cube(a):\n    '''\n    Write a function that returns the cube of a.\n    '''\n    return a**3\n    \ndef test_function(test_case, expected, function):\n    '''\n    This function takes in a tuple that contains the function name, the tuple of arguments expected for the function, and the function itself\n    '''\n    test_case_tuple = tuple(test_case)\n    print(test_case_tuple)\n    print(expected)\n    print(function.__name__)\n    if test_case_tuple == expected:\n        return True\n    else:\n        return False\n    \ntest_function((square, (2,), square), (4,), square"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    square = math.sqrt(a**2)\n    return square\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a*4\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n    #raise NotImplementedError()\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = []\n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            li.append(string[i])\n    return li\ndef check_string(string):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    if not string:\n        return True\n    if len(string) == 1:\n        return True\n    if str_to_list(string) == str_to_list(string[::-1]):\n        return True\n    else:\n        return False\ndef encrypt(string, key):\n    '''\n    Write a function to encrypt the given string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        new_string += str(ord(string[i]) + key)\n    return new_string\ndef decrypt(string, key):\n    '''\n    Write a function to decrypt the given string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        new_string += str(ord(string[i]) - key)\n    return new_string\ndef main():\n    '''\n    You can use this to test the program.\n    '''\n    string = 'abcd'\n    key = 13\n    if check_string(string) and check_string(encrypt(string, key)):\n        print(\"Success\")\n    else:\n        print(\"Fail\")\nmain()"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) < 1:\n        return string\n    else:\n        for i in range(len(string)):\n            if string[i] in string[:i]:\n                string = string[:i] + string[i+1:]\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    list_result = []\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = ''\n    for c in string:\n        if c not in new_string:\n            new_string += c\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in range(0, len(string)):\n        if string[i] not in l:\n            l.append(string[i])\n    return l\ndef list_to_str(l):\n    '''\n    Write a function to convert the list to string.\n    '''\n    str1 = \"\".join(l)\n    return str1\ndef str_to_list_recursion(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in range(0, len(string)):\n        if string[i] not in l:\n            l.append(string[i])\n    return l\ndef list_to_str_recursion(l):\n    '''\n    Write a function to convert the list to string.\n    '''\n    str1 = \"\".join(l)\n    return str1\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # if all characters are present, we return empty string.\n    if len(string) == 0:\n        return string\n    # if there is only one character present, return it as it is.\n    elif len(string) == 1:\n        return [string]\n    # else, if there are many characters, each of them need to be checked.\n    else:\n        # if the characters are present, then we keep the characters till now.\n        new_string = list(string)\n        new_string[0] = new_string[0].lower()\n        new_string[1] = new_string[1].lower()\n        # new_string[0] = new_string[0].upper()\n        # new_string[1] = new_string[1].upper()\n        # return new_string\n        # we return the list of characters just without their upper and lowercase counterparts\n        # this returns a list of the characters\n        return [new_string[0] + new_string[1]]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for x in range(len(string)):\n        if string[x] not in list:\n            list.append(string[x])\n    return list\ndef list_to_str(list):\n    '''\n    Write a function to print the concatenation of the character in the second string.\n    '''\n    return ''.join(list)\ndef main():\n    print(str_to_list(\"Geeks For Geeks\"))\nif __name__=='__main__':\n    main()\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for ch in string:\n        if ch in l:\n            continue\n        l.append(ch)\n    return l\ndef main():\n    '''\n    Write a function to find the last character of a string.\n    '''\n    string = 'abcdefghijklmnopqrstuvwxyz'\n    print(list_to_str(string))\n    print(str_to_list(string))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # code here\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string == \"\":\n        return \"\"\n    \n    if len(string) <= 1:\n        return string\n    \n    temp = string[0]\n    string = string[1:]\n    \n    return str_to_list(string) + temp\n    \ndef list_to_str(list): \n    '''\n    Write a function to reverse the string in the list.\n    '''\n    if len(list) <= 0:\n        return \"\"\n    \n    if len(list) > 1:\n        return list[-1] + list_to_str(list[:-1])\n    \n    return list[0]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    count = 0\n    for n in arraynums:\n        for x in arraynums:\n            if n == x:\n                count += 1\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if i in arraynums:\n            continue\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    array1 = arraynums[:]\n    print(arraynums)\n    array1.sort()\n    print(array1)\n    print(arraynums)\n    print(array1)\n    duplicates = []\n    print(\"array1 size = \", len(arraynums))\n    print(\"array2 size = \", len(arraynums))\n    for i in range(len(arraynums)):\n        print(\"i = \", i)\n        if (arraynums[i] in array1):\n            print(\"Array[i] = \", arraynums[i])\n            duplicates.append(arraynums[i])\n    return duplicates\n    #print(duplicates)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # pass the value in\n    if arraynums == arraynums:\n        return True\n    # pass the values in\n    for i in range(0, len(arraynums)):\n        # pass the value in\n        for j in range(i, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n    # pass the values in\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            duplicate = True\n    return duplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = duplicate_element_not_in(arraynums)\n    assert result is None\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # your code goes here\n    test = set(arraynums)\n    print(test)\n    print(test==set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert (len(arraynums) == 10), \"Length of array should be 10\"\n    doubled = []\n    for number in arraynums:\n        if number in doubled:\n            return True\n        else:\n            doubled.append(number)\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 5:\n        return True\n    elif x % 10 == 3:\n        return False\n    elif x % 10 == 2:\n        return False\n    elif x % 10 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Your code here\n    if x < 40:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <=0 or x >=10:\n        return \"Error: invalid input, please input a number between 0 and 10.\"\n    if x%5 == 0 or x%5 == 1:\n        return \"Error: invalid input, please input a number between 0 and 5.\"\n    if x%3 == 0 or x%3 == 1:\n        return \"Error: invalid input, please input a number between 0 and 3.\"\n    else:\n        return x\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==1:\n        return \"There is a woodball.\"\n    if x==2:\n        return \"There is no woodball.\"\n    if x==3:\n        return \"There is no woodball.\"\n    if x==4:\n        return \"There is no woodball.\"\n    if x==5:\n        return \"There is no woodball.\"\n    if x==6:\n        return \"There is no woodball.\"\n    if x==7:\n        return \"There is no woodball.\"\n    if x==8:\n        return \"There is no woodball.\"\n    if x==9:\n        return \"There is no woodball.\"\n    if x==10:\n        return \"There is no woodball.\"\n    if x==11:\n        return \"There is no woodball.\"\n    if x==12:\n        return \"There is no woodball.\"\n    if x==13:\n        return \"There is no woodball.\"\n    if x==14:\n        return \"There is no woodball.\"\n    if x==15:\n        return \"There is no woodball.\"\n    if x==16:\n        return \"There is no woodball.\"\n    if x==17:\n        return \"There is no woodball.\"\n    if x==18:\n        return \"There is no woodball.\"\n    if x==19:\n        return \"There is no woodball.\"\n    if x==20:\n        return \"There is no woodball.\"\n    if x==21:\n        return \"There is no woodball.\"\n    if x==22:\n        return \"There is no woodball.\"\n    if x==23:\n        return \"There is no woodball.\"\n    if x==24:\n        return \"There is no woodball.\"\n    if x==25:\n        return \"There is no woodball.\"\n    if x==26:\n        return \"There is no woodball.\"\n    if x==27:\n        return \"There is no woodball.\"\n    if x==28:\n        return \"There is no woodball.\"\n    if x==29:\n        return \"There is no woodball.\"\n    if x==30:\n        return \"There is no woodball.\"\n    if x==31:\n        return \"There is no woodball.\"\n    if x==32:\n        return \"There is no woodball.\"\n    if x==33:\n        return \"There is no woodball.\"\n    if x==34:\n        return \"There is no woodball.\"\n    if x==35:\n        return \"There is no woodball.\"\n    if x==36:\n        return \"There is no woodball.\"\n    if x==37:\n        return \"There is no woodball.\"\n    if x==38:\n        return \"There is no woodball.\"\n    if x==39:\n        return \"There is no woodball.\"\n    if x==40:\n        return \"There is no woodball.\"\n    if x==41:\n        return \"There is no woodball.\"\n    if x==42:\n        return \"There is no woodball.\"\n    if x==43:\n        return \"There is no woodball.\"\n    if x==44:\n        return \"There is no woodball.\"\n    if x==45:\n        return \"There is no woodball.\"\n    if x==46:\n        return \"There is no woodball.\"\n    if x==47:\n        return \"There is no woodball.\"\n    if x==48:\n        return \"There is no woodball.\"\n    if x==49:\n        return \"There is no woodball.\"\n    if x==50:\n        return \"There is no woodball.\"\n    if x==51:\n        return \"There is no woodball.\"\n    if x==52:\n        return \"There is no woodball.\"\n    if x==53:\n        return \"There is no woodball.\"\n    if x==54:\n        return \"There is no woodball.\"\n    if x==55:\n        return \"There is no woodball.\"\n    if x==56:\n        return \"There is no woodball.\"\n    if x==57:\n        return \"There is no woodball.\"\n    if x==58:\n        return \"There is no woodball.\"\n    if x==59:\n        return \"There is no woodball.\"\n    if x==60:\n        return \"There is no woodball.\"\n    if x==61:\n        return \"There is no woodball.\"\n    if x==62:\n        return \"There is no woodball.\"\n    if x==63:\n        return \"There is no woodball.\"\n    if x==64:\n        return \"There is no woodball.\"\n    if x==65:\n        return \"There is no woodball.\"\n    if x==66:\n        return \"There is no woodball.\"\n    if x==67:\n        return \"There is no woodball.\"\n    if x==68:\n        return \"There is no woodball.\"\n    if x==69:\n        return \"There is no woodball.\"\n    if x==70:\n        return \"There is no woodball.\"\n    if x==71:\n        return \"There is no woodball.\"\n    if x==72:\n        return \"There is no woodball.\"\n    if x==73:\n        return \"There is no woodball.\"\n    if x==74:\n        return \"There is no woodball.\"\n    if x==75:\n        return \"There is no woodball.\"\n    if x==76:\n        return \"There is no woodball.\"\n    if x==77:\n        return \"There is no woodball.\"\n    if x==78:\n        return \"There is no woodball.\"\n    if x==79:\n        return \"There is no woodball.\"\n    if x==80:\n        return \"There is no woodball.\"\n    if x==81:\n        return \"There is no woodball.\"\n    if x==82:\n        return \"There is no woodball.\"\n    if x==83:\n        return \"There is no woodball.\"\n    if x==84:\n        return \"There is no woodball.\"\n    if x==85:\n        return \"There is no woodball.\"\n    if x==86:\n        return \"There is no woodball.\"\n    if x==87:\n        return \"There is no woodball.\"\n    if x==88:\n        return \"There is no woodball.\"\n    if x==89:\n        return \"There is no woodball.\"\n    if x==90:\n        return \"There is no woodball.\"\n    if x==91:\n        return \"There is no woodball.\"\n    if x==92:\n        return \"There is no woodball.\"\n    if x==93:\n        return \"There is no woodball.\"\n    if x==94:\n        return \"There is no woodball.\"\n    if x==95:\n        return \"There is no woodball.\"\n    if x==96:\n        return \"There is no woodball.\"\n    if x==97:\n        return \"There is no woodball.\"\n    if x==98:\n        return \"There is no woodball.\"\n    if x==99:\n        return \"There is no woodball.\"\n    if x==100:\n        return \"There is no woodball.\"\n    if x==101:\n        return \"There is no woodball.\"\n    if x==102:\n        return \"There is no woodball.\"\n    if x==103:\n        return \"There is no woodball.\"\n    if x==104:\n        return \"There is no woodball.\"\n    if x==105:\n        return \"There is no woodball.\"\n    if x==106:\n        return \"There is no woodball.\"\n    if x==107:\n        return \"There is no woodball.\"\n    if x==108:\n        return \"There is no woodball.\"\n    if x==109:\n        return \"There is no woodball.\"\n    if x==110:\n        return \"There is no woodball.\"\n    if x==111:\n        return \"There is no woodball.\"\n    if x==112:\n        return \"There is no woodball.\"\n    if x==113:\n        return \"There is no woodball.\"\n    if x==114:\n        return \"There is no woodball.\"\n    if x==115:\n        return \"There is no woodball.\"\n    if x==116:\n        return \"There is no woodball.\"\n    if x==117:\n        return \"There is no woodball.\"\n    if x==118:\n        return \"There is no woodball.\"\n    if x==119:"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 10:\n        return 'Woodball'\n    else:\n        return 'Not woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 1:\n        return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rev_num = num % 10 * 10 + rev_num\n        num //= 10\n    return rev_num"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return False\n    else:\n        return num % 2 == 1\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > rev_num:\n        rev_num += 1\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = ''\n    while num:\n        rev_num += str(num % 2)\n        num //= 2\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num:\n        rev_num += num % 10\n        num = num // 10\n    return rev_num == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = int(num)\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2, n):\n            if n%i==0:\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = ''\n    if num > 0:\n        while num > 0:\n            rev_num = str(num % 2) + rev_num\n            num = num // 2\n    else:\n        print('Invalid Input. Please try again')\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num >= 1:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if rev == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num = num\n    rev_num = rev_num * 2\n    rev_num = rev_num - rev_num\n    return rev_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize the number list to keep all digits\n    num_list = []\n    \n    # Loop through all digits of the input and add it to the number list\n    for i in range(0, len(arr)):\n        num_list.append(int(arr[i]))\n    # If the number list contains any positive numbers, return it\n    if num_list!= [] : \n        return num_list[-1]\n    else:\n        return -1\n    "
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr : \n        if num > max_num : \n            max_num = num \n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    max_digit = 0\n    for i in range(len(arr)) : \n        if arr[i] > max_num : \n            max_num = arr[i]\n            max_digit = arr[i]\n    return max_digit, max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # define a dictionary to store the digits as keys and the list of lengths as values\n    dic = {}\n    for i in range(len(arr)):\n        dic[arr[i]] = len(arr)-i\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(len(arr)) :\n        if arr[i] > max_num : \n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    MaxNum = []\n    MaxNum.append(arr[0])\n    for i in range(1,len(arr)) :\n        if arr[i] > MaxNum[-1] :\n            MaxNum.append(arr[i])\n    return MaxNum[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr)\n    max = arr[-1]\n    for num in arr:\n        if num > max:\n            max = num\n    return max\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Your code here\n    d = []\n    for i in arr : \n        d.append(i)\n    d.sort()\n    \n    return max(d)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = 0\n    for num in arr:\n        if num > Max_Num:\n            Max_Num = num\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    if len(arr) == 0 : \n        print(\"No number can be formed\")\n    else : \n        for i in arr : \n            num = int(i) \n            if num > max_num : \n                max_num = num \n        print(max_num) \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign = ''\n    if (x>=0) and (y>=0):\n        sign = '>'\n    elif (x>=0) and (y<0):\n        sign = '<'\n    elif (x<0) and (y>=0):\n        sign = '>'\n    elif (x<0) and (y<0):\n        sign = '<'\n    if sign=='':\n        sign='_'\n    print(sign)\n    return sign\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return \"x has positive sign\"\n    if x < y:\n        return \"y has positive sign\"\n    if x == y:\n        return \"no opposite sign\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign_1 = -x\n    sign_2 = -y\n    sign = sign_1 if sign_1!= sign_2 else sign_2\n    return sign\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return 1\n    else:\n        return -1\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0 and x>0 and -x>0 and y>0 and -y>0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return x>y\n    elif x<y:\n        return x<y\n    else:\n        return x==y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        print(\"The first number is greater than the second number\")\n    elif x < y:\n        print(\"The first number is less than the second number\")\n    else:\n        print(\"Both numbers are equal to \",x,y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=abs(x)\n    y=abs(y)\n    if x>y:\n        return x-y\n    else:\n        return y-x\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x==y):\n        return(0)\n    else:\n        if(x[0]=='-' and y[0]=='-'):\n            return(1)\n        elif(y[0]=='-' and x[0]=='-'):\n            return(1)\n        elif(x[0]=='-' and y[0]=='+'):\n            return(0)\n        elif(y[0]=='-' and x[0]=='+'):\n            return(0)\n        else:\n            return(0)\ndef check_sign(x):\n    '''\n    Write a python function to check whether the given integer is positive or negative or zero or zero.\n    '''\n    x=str(x)\n    if(x[0]=='-'):\n        return(1)\n    elif(x[0]=='+'):\n        return(0)\n    else:\n        return(0)\ndef check_carry(x):\n    '''\n    Write a python function to check whether the given integer is positive or negative or zero or zero.\n    '''\n    x=str(x)\n    if(x[0]=='+'):\n        return(1)\n    else:\n        return(0)\ndef check_negative(x):\n    '''\n    Write a python function to check whether the given integer is negative or zero or zero.\n    '''\n    x=str(x)\n    if(x[0]=='-'):\n        return(1)\n    else:\n        return(0)\ndef check_zero(x):\n    '''\n    Write a python function to check whether the given integer is zero or zero.\n    '''\n    x=str(x)\n    if(x[0]=='+'):\n        return(1)\n    else:\n        return(0)\ndef opp_signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    elif(opposite_Signs(x,y)==1):\n        return(1)\n    else:\n        return(0)\ndef op_zeros(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]=='+'):\n        return(1)\n    elif(y[0]=='+'):\n        return(0)\n    elif(opposite_Signs(x,y)==0):\n        return(1)\n    else:\n        return(0)\ndef op_zero(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_sign(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]=='+'):\n        return(0)\n    elif(opposite_Signs(x,y)==1):\n        return(1)\n    else:\n        return(0)\ndef op_zero(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_sign(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_zeros(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_zero(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_zero(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_zeros(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef opp_zeros(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_zeros(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_zero(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef op_zero_as_sign(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=str(x)\n    y=str(y)\n    if(x[0]==y[0]):\n        return(0)\n    else:\n        return(1)\ndef check_data(x,y):\n    '''\n    Write a python function to check whether the given two integers are equal or not.\n    '"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #write your code here\n    if n<=0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return n**3\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 20\n    elif n == 5:\n        return 50\n    elif n == 6:\n        return 100\n    elif n == 7:\n        return 200\n    elif n == 8:\n        return 500\n    elif n == 9:\n        return 1000\n    else:\n        print(f\"{n} is not a valid number of octagonal numbers\")\n        exit()\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n -= 1\n    if n <= 1:\n        return n\n    elif n % 2 == 0:\n        return (n * is_octagonal(n - 1))\n    else:\n        return is_octagonal(n + 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    a = 0\n    b = n\n    c = 0\n    while a < b:\n        if b % a == 0:\n            c = a\n            a += 1\n        else:\n            a += 1\n        b = c\n    return b"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return n\n    elif n % 2:\n        return n * is_octagonal(n-1)\n    else:\n        return is_octagonal(3*n+1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2 + n//2)%10\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # your code here\n    # makes a list of the nth numbers between 1 and n+1\n    \n    if (n == 0): \n        return 1\n    elif (n == 1): \n        return 2\n    elif (n == 2): \n        return 3\n    elif (n == 3): \n        return 4\n    elif (n == 4): \n        return 5\n    elif (n == 5): \n        return 6\n    elif (n == 6): \n        return 7\n    elif (n == 7): \n        return 8\n    elif (n == 8): \n        return 9\n    elif (n == 9): \n        return 10\n    elif (n == 10): \n        return 11\n    elif (n == 11): \n        return 12\n    elif (n == 12): \n        return 13\n    elif (n == 13): \n        return 14\n    elif (n == 14): \n        return 15\n    elif (n == 15): \n        return 16\n    elif (n == 16): \n        return 17\n    elif (n == 17): \n        return 18\n    elif (n == 18): \n        return 19\n    elif (n == 19): \n        return 20\n    elif (n == 20): \n        return 21\n    elif (n == 21): \n        return 22\n    elif (n == 22): \n        return 23\n    elif (n == 23): \n        return 24\n    elif (n == 24): \n        return 25\n    elif (n == 25): \n        return 26\n    elif (n == 26): \n        return 27\n    elif (n == 27): \n        return 28\n    elif (n == 28): \n        return 29\n    elif (n == 29): \n        return 30\n    elif (n == 30): \n        return 31\n    elif (n == 31): \n        return 32\n    elif (n == 32): \n        return 33\n    elif (n == 33): \n        return 34\n    elif (n == 34): \n        return 35\n    elif (n == 35): \n        return 36\n    elif (n == 36): \n        return 37\n    elif (n == 37): \n        return 38\n    elif (n == 38): \n        return 39\n    elif (n == 39): \n        return 40\n    elif (n == 40): \n        return 41\n    elif (n == 41): \n        return 42\n    elif (n == 42): \n        return 43\n    elif (n == 43): \n        return 44\n    elif (n == 44): \n        return 45\n    elif (n == 45): \n        return 46\n    elif (n == 46): \n        return 47\n    elif (n == 47): \n        return 48\n    elif (n == 48): \n        return 49\n    elif (n == 49): \n        return 50\n    elif (n == 50): \n        return 51\n    elif (n == 51): \n        return 52\n    elif (n == 52): \n        return 53\n    elif (n == 53): \n        return 54\n    elif (n == 54): \n        return 55\n    elif (n == 55): \n        return 56\n    elif (n == 56): \n        return 57\n    elif (n == 57): \n        return 58\n    elif (n == 58): \n        return 59\n    elif (n == 59): \n        return 60\n    elif (n == 60): \n        return 61\n    elif (n == 61): \n        return 62\n    elif (n == 62): \n        return 63\n    elif (n == 63): \n        return 64\n    elif (n == 64): \n        return 65\n    elif (n == 65): \n        return 66\n    elif (n == 66): \n        return 67\n    elif (n == 67): \n        return 68\n    elif (n == 68): \n        return 69\n    elif (n == 69): \n        return 70\n    elif (n == 70): \n        return 71\n    elif (n == 71): \n        return 72\n    elif (n == 72): \n        return 73\n    elif (n == 73): \n        return 74\n    elif (n == 74): \n        return 75\n    elif (n == 75): \n        return 76\n    elif (n == 76): \n        return 77\n    elif (n == 77): \n        return 78\n    elif (n == 78): \n        return 79\n    elif (n == 79): \n        return 80\n    elif (n == 80): \n        return 81\n    elif (n == 81): \n        return 82\n    elif (n == 82): \n        return 83\n    elif (n == 83): \n        return 84\n    elif (n == 84): \n        return 85\n    elif (n == 85): \n        return 86\n    elif (n == 86): \n        return 87\n    elif (n == 87): \n        return 88\n    elif (n == 88): \n        return 89\n    elif (n == 89): \n        return 90\n    elif (n == 90): \n        return 91\n    elif (n == 91): \n        return 92\n    elif (n == 92): \n        return 93\n    elif (n == 93): \n        return 94\n    elif (n == 94): \n        return 95\n    elif (n == 95): \n        return 96\n    elif (n == 96): \n        return 97\n    elif (n == 97): \n        return 98\n    elif (n == 98): \n        return 99\n    elif (n == 99): \n        return 100\n    elif (n == 100): \n        return 101\n    elif (n == 101): \n        return 102\n    elif (n == 102): \n        return 103\n    elif (n == 103): \n        return 104\n    elif (n == 104): \n        return 105\n    elif (n == 105): \n        return 106\n    elif (n == 106): \n        return 107\n    elif (n == 107): \n        return 108\n    elif (n == 108): \n        return 109\n    elif (n == 109): \n        return 110\n    elif (n == 110): \n        return 111\n    elif (n == 111): \n        return 112\n    elif (n == 112): \n        return 113\n    elif (n == 113): \n        return 114\n    elif (n == 114): \n        return 115\n    elif (n == 115): \n        return 116\n    elif (n == 116): \n        return 117\n    elif (n == 117): \n        return 118\n    elif (n == 118): \n        return 119\n    elif (n == 119): \n        return 120\n    elif (n == 120): \n        return 121\n    elif (n == 121): \n        return 122\n    elif (n == 122): \n        return 123\n    elif (n == 123): \n        return 124\n    elif (n == 124): \n        return 125\n    elif (n == 125): \n        return 126\n    elif (n == 126): \n        return 127\n    elif (n == 127): \n        return 128\n    elif (n == 128): \n        return 129\n    elif (n == 129): \n        return 130\n    elif (n == 130): \n        return 131\n    elif (n == 131): \n        return 132\n    elif (n == 132): \n        return 133\n    elif (n == 133): \n        return 134\n    elif (n == 134): \n        return 135\n    elif (n == 135): \n        return 136\n    elif (n == 136): \n        return 137\n    elif (n == 137): \n        return 138\n    elif (n == 138): \n        return 139\n    elif (n == 139): \n        return 140\n    elif (n == 140): \n        return 141\n    elif (n == 141): \n        return 142\n    elif "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    p = 1\n    while (n > 1):\n        if n % p == 0:\n            return n\n        p += 1\n    return 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return -1\n    i = 0\n    while i < n:\n        if i == n / 2:\n            return (n * (3 * i + 1) + 1) / 6\n        elif i == n / 2 - 1:\n            return (n * (3 * i + 1) + 1) / 6\n        elif i == n / 2:\n            return (n * (3 * i + 1) + 1) / 2\n        elif i == n - 1:\n            return (n * (3 * i + 1) + 1) / 2\n        else:\n            i += 1\n    return -1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 1:\n        return n\n    else:\n        return n-1\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    \n    if n == 1:\n        return 1\n    \n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            pass\n        else:\n            return 0\n            \n    return count_Substrings(s[1:])\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = []\n    substring_length = []\n    for i in range(len(s)-1):\n        sub = s[i:i+2]\n        if len(sub) == 1:\n            substrings.append(sub)\n            substring_length.append(len(sub))\n        else:\n            if len(sub) >= 2:\n                substrings.append(sub)\n                substring_length.append(len(sub))\n    return len(substrings), sum(substring_length)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n == 0:\n        return 0\n    substring_count = 0\n    for i in range(0,n):\n        digits = []\n        for j in range(i,n):\n            digits.append(s[j])\n        substring_count += len(set(digits))\n    return substring_count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1] and s[i] not in ['0','1']:\n            count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            num = sum([int(x) for x in str(s[i:j])])\n            if num == num:\n                subs[j-i] += 1\n    return subs\n    \n    \n    \ndef count_invalid(s):\n    '''\n    Write a python function to count the number of valid strings.\n    '''\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            for k in range(j+1, len(s)):\n                if s[i:j+1] == s[j:k+1]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s)<=1:\n        return 0\n    else:\n        sub_length=[]\n        sub_sum=[]\n        max_sum=0\n        sub_length.append(s[0])\n        for i in range(1,len(s)):\n            if s[i]!=s[i-1]:\n                max_sum=max(max_sum,len(sub_length))\n                sub_length.append(s[i])\n                sub_sum.append(int(s[i]))\n        \n        count=0\n        for i in range(0,len(sub_length)):\n            #print(sub_length[i],\"sub_length[i]\",sub_length[i]+s[i+1])\n            if sub_length[i]+s[i+1]==s[i]:\n                count+=1\n            else:\n                count+=max_sum-1\n        return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_Substrings_helper(s, i, j, c, dictionary):\n        if i >= len(s) or j >= len(s) or s[i]!= s[j] or sum(map(int, s[i:j]))!= c:\n            return 0\n        if i == j:\n            return 1\n        if dictionary[i][j] == 0:\n            return count_Substrings_helper(s, i+1, j+1, c+1, dictionary)\n        else:\n            return count_Substrings_helper(s, i+1, j+1, c, dictionary) + count_Substrings_helper(s, i+1, j, c, dictionary)\n    d = defaultdict(lambda: defaultdict(int))\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += count_Substrings_helper(s, i, j, 0, d)\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j].count('0')!= 0:\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        sum = int(s[i])\n        for j in range(i+1,len(s)):\n            sum = sum + int(s[j])\n            if sum == sum:\n                res = res + 1\n    return res"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # # #\n    # # #\n    # # #\n    def count_Substrings_1(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[j] == s[i]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_2(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[j] == s[i]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_3(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_4(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_5(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_6(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_7(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_8(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_9(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_10(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_11(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_12(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_13(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_14(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_15(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_16(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_17(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_18(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_19(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings_20(s):\n        if len(s) == 0:\n            return 0\n        sub_Count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    sub_Count += 1\n        return sub_Count\n    # # #\n    # # #\n    # # #\n    def count_Substrings"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # first try to return smallest number in the list\n    smallest = xs[0]\n    # loop through all numbers in the list\n    for num in xs:\n        # check if number is smallest\n        if num < smallest:\n            # update smallest number\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        small = min(xs)\n        ind = xs.index(small)\n        return small\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = xs[0]\n    for x in xs:\n        if x < smallest_number:\n            smallest_number = x\n    return smallest_number\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    nums = sorted(xs)\n    return nums[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs_copy = sorted(xs, reverse=True)\n    return xs_copy[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min(map(lambda x:x if x<=max(xs) else max(xs),xs))\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    sorted_xs = sorted(xs)\n    smallest = sorted_xs[0]\n    for x in sorted_xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    lowest_num = xs[0]\n    for num in xs:\n        if num < lowest_num:\n            lowest_num = num\n    return lowest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float(\"inf\")\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # create a variable for smallest number \n    smallest = None\n    # create a for loop that iterates the list \n    for i in range(len(xs)):\n        # check if the number is smaller \n        if xs[i] < smallest:\n            # if so, update the smallest number \n            smallest = xs[i]\n    # return the smallest number \n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # if empty\n    if test_list == ():\n        return 0\n    # if list is empty\n    elif len(test_list) == 0:\n        return 0\n    # for each index in tuple_list\n    for i in range(len(test_list)):\n        # if current index in tuple_list is not the last index\n        if i < (len(test_list) - 1):\n            # if first element is less than last element\n            if test_list[i] > test_list[i + 1]:\n                # return the difference\n                return test_list[i] - test_list[i + 1]\n        else:\n            # if it is the last element\n            return test_list[i] - test_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #iterate through the list\n    for i in range(len(test_list)):\n        #convert the value to a list\n        value = list(test_list[i])\n        #iterate through the value\n        for j in range(len(value)):\n            if j!= i:\n                #if the value has a difference\n                if abs(value[j] - value[i]) > 1:\n                    #update the value to a list\n                    value[j] = value[i]\n                #reset the value to the original\n                value[i] = 0\n    #return the max difference\n    return max(value)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    my_dict = {}\n    temp_list = []\n    for i in range(len(test_list)):\n        if i+1 in test_list:\n            temp_list.append(test_list[i])\n        else:\n            my_dict[i] = test_list[i]\n    for i in range(1, len(test_list)+1):\n        if i+1 in test_list:\n            temp_list.append(test_list[i])\n        else:\n            my_dict[i] = test_list[i]\n    for i in my_dict:\n        if my_dict[i] == 0:\n            temp_list.append(0)\n    temp_list.sort()\n    temp_list = temp_list[::-1]\n    my_dict = dict(zip(temp_list, test_list))\n    print(my_dict)\n    my_dict_new = {}\n    for i in my_dict:\n        my_dict_new[my_dict[i]] = i\n    return my_dict_new[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list_len = len(test_list)\n    max_difference = 0\n    for i in range(test_list_len):\n        for j in range(i+1, test_list_len):\n            if test_list[i] - test_list[j]!= 1:\n                if max_difference < abs(test_list[i] - test_list[j]):\n                    max_difference = abs(test_list[i] - test_list[j])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    temp = 0\n    for i in range(len(test_list)):\n        temp = test_list[i][1] - test_list[i][0]\n        if temp > max_difference:\n            max_difference = temp\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list:\n        result = []\n        for i in range(len(test_list)-1):\n            for j in range(i+1,len(test_list)):\n                result.append(abs(test_list[i]-test_list[j]))\n        return max(result)\n    else:\n        return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    l = len(test_list)\n    i = 0\n    j = 0\n    while i < l:\n        if test_list[i] - test_list[j] > 0:\n            test_list[i], test_list[j] = test_list[j], test_list[i]\n            i = i + 1\n            j = j + 1\n        else:\n            i = i + 1\n    return test_list\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference=0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            difference=test_list[i]-test_list[j]\n            if difference > max_difference:\n                max_difference=difference\n    return max_difference\n    \ntest_list = (1,3,5,7,9,3,1,4,6,7,8,9,1,3,6,7,8,9)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for index in range(len(test_list) - 1):\n        if test_list[index][1]!= test_list[index + 1][1]:\n            if test_list[index][1] - test_list[index + 1][1] > max_diff:\n                max_diff = test_list[index][1] - test_list[index + 1][1]\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #Convert subjectmarks into a list of tuples.\n    subjectmarkslist=[]\n    for sub in subjectmarks:\n        subjectmarkslist.append(tuple(sub))\n    #Sort the subjectmarkslist in alphabetical order.\n    subjectmarkslist.sort()\n    #Convert subjectmarkslist into a tuple list.\n    subjectmarkstuple=[]\n    for sub in subjectmarkslist:\n        subjectmarkstuple.append(tuple(sub))\n    #Return subjectmarkstuple in sorted order.\n    return subjectmarkstuple"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort(tup):\n        return (tup[1], tup[0])\n    subjectmarks.sort(key=sort)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    a = []\n    for x in subjectmarks:\n        a.append(x[1])\n    a.sort(reverse=True)\n    return a\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: (x[1], x[0]))\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(\"Sorting the list of tuples.\")\n    # First make a new list of tuples where each tuple is (time, marks)\n    # The time tuple will be the first element of the tuple\n    subjectmarks_new = []\n    for x in subjectmarks:\n        subjectmarks_new.append(x[1])\n    # sort the list of tuples\n    subjectmarks.sort(key=lambda x: x[1])\n    # Replace the first value in the list\n    subjectmarks[0] = subjectmarks_new[0]\n    # Delete the last two elements of the list\n    subjectmarks = subjectmarks[1:-1]\n    print(subjectmarks)\n    print(\"The list after sorting is:\")\n    for i in subjectmarks:\n        print(i)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_tuple = []\n    for i in range(len(subjectmarks)):\n        new_tuple.append(subjectmarks[i][1])\n    new_tuple.sort()\n    for i in new_tuple:\n        subjectmarks[i] = tuple(subjectmarks[i])\n    subjectmarks.sort()\n    print(subjectmarks)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if len(subjectmarks)<=1:\n        return subjectmarks\n    else:\n        midpoint=len(subjectmarks)//2\n        first=subjectmarks[midpoint]\n        second=subjectmarks[midpoint+1]\n        subjectmarks.pop(midpoint)\n        subjectmarks.pop(midpoint)\n        subjectmarks.append(first)\n        subjectmarks.append(second)\n        return sort_subjectmarks(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_marks(marks):\n        '''\n        Takes a list of tuples and returns it sorted in the second value.\n        '''\n        return sorted(marks, key=lambda x: x[1])\n    \n    # Checking if the list has any duplicates\n    if len(subjectmarks) == 0:\n        raise ValueError('List is empty')\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return sum(recursive_list_sum(data_list[1:]))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened = []\n    sum = 0\n    for item in data_list:\n        sum += item\n        flattened.append(sum)\n    return flattened\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    for element in data_list:\n        if isinstance(element, list):\n            data_list += element\n            # data_list = [data_list, element]\n        else:\n            data_list += element\n    data_list.sort(key=len)\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for item in data_list:\n        sum += item\n    return sum\n    \ndata = [[2,4,5],[1,3,5],[2,3,5]]\nprint(recursive_list_sum(data)"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return []\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_data_list = []\n    for data in data_list:\n        if type(data) is list:\n            for item in data:\n                sum_data_list.append(item)\n        else:\n            sum_data_list.append(data)\n    return sum_data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sorted_list = sorted(data_list)\n    return sum(sorted_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return data_list\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([i for i in list if i > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #Initialize an empty array to store positive numbers\n    positive = []\n    #Iterate through the elements of the list.\n    for i in list:\n        #If it is positive, add it to the array of positive numbers\n        if i >= 0:\n            positive.append(i)\n        #Otherwise, set the value to be 0\n    #Return the count of positive numbers\n    return len(positive)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for number in list:\n        if number>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in range(len(list)):\n        if list[i] >= 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive=0\n    for item in list:\n        if item >= 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    # recursivley, recursion-1, recursion-2\n    return bell_number(n-1)+bell_number(n-2)\ndef main():\n    print(bell_number(50))\n    print(bell_number(100))\n    print(bell_number(200))\n    print(bell_number(400))\n    print(bell_number(5000))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1: return 1\n    if n == 2: return 2\n    else:\n        a = bell_number(n-1)\n        b = bell_number(n-2)\n        return a+b\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # NOTE:  you'll need to create a hash table that maps each number to the number of distinct ways it can be partitioned.\n    # HINT:  If the table has any duplicates, the number of ways can be computed by enumerating all possible ways,\n    # i.e., if there's a number of ways to partition n = 5 and the number of distinct ways to partition n = 10,\n    # the number of ways to partition n = 100 is ~1234567.\n    # For example,\n    # 5 = 3^2 + 2^2 + 1\n    # 10 = 3^2 + 1\n    # 100 = 3^2 + 2^2 + 1\n    # So the number of ways to partition 3^2 + 2^2 + 1 is 3^2 + 2^2 + 1 = 3^2 + 2^2 + 1 = 5.\n    # The number of ways to partition 100 = 100 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1,000 = 1"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = 0\n    for i in range(n):\n        for j in range(i):\n            if (i-j)>0 and (i-j)%(n-j)==0 and ((i-j)/(n-j))%(n-j)>0:\n                ways+=1\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return bell_number(n//3) + bell_number(n//3+1) + bell_number(n//3+2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [0] * n\n    dp[0], dp[1], dp[2], dp[3] = 1, 0, 0, 0\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 3]\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 6\n    if n==5:\n        return 9\n    if n==6:\n        return 24\n    if n==7:\n        return 49\n    if n==8:\n        return 64\n    if n==9:\n        return 108\n    if n==10:\n        return 108\n    if n==11:\n        return 212\n    if n==12:\n        return 432\n    if n==13:\n        return 672\n    if n==14:\n        return 1020\n    if n==15:\n        return 1550\n    if n==16:\n        return 2530\n    if n==17:\n        return 3200\n    if n==18:\n        return 4300\n    if n==19:\n        return 5400\n    if n==20:\n        return 7200\n    if n==21:\n        return 9300\n    if n==22:\n        return 10800\n    if n==23:\n        return 11400\n    if n==24:\n        return 12300\n    if n==25:\n        return 15000\n    if n==26:\n        return 25000\n    if n==27:\n        return 3400\n    if n==28:\n        return 3900\n    if n==29:\n        return 5500\n    if n==30:\n        return 7500\n    if n==31:\n        return 10520\n    if n==32:\n        return 14400\n    if n==33:\n        return 19200\n    if n==34:\n        return 25200\n    if n==35:\n        return 320000\n    if n==36:\n        return 393000\n    if n==37:\n        return 550000\n    if n==38:\n        return 7200000\n    if n==39:\n        return 1080000\n    if n==40:\n        return 1550000\n    if n==41:\n        return 262000\n    if n==42:\n        return 363000\n    if n==43:\n        return 5400000\n    if n==44:\n        return 69200000\n    if n==45:\n        return 72000000\n    if n==46:\n        return 9300000\n    if n==47:\n        return 12000000\n    if n==48:\n        return 15000000\n    if n==49:\n        return 17000000\n    if n==50:\n        return 2020000\n    if n==51:\n        return 24000000\n    if n==52:\n        return 29000000\n    if n==53:\n        return 37000000\n    if n==54:\n        return 54000000\n    if n==55:\n        return 72000000\n    if n==56:\n        return 9300000\n    if n==57:\n        return 12000000\n    if n==58:\n        return 15000000\n    if n==59:\n        return 17000000\n    if n==60:\n        return 2020000\n    if n==61:\n        return 24000000\n    if n==62:\n        return 29000000\n    if n==63:\n        return 37000000\n    if n==64:\n        return 54000000\n    if n==65:\n        return 72000000\n    if n==66:\n        return 9300000\n    if n==67:\n        return 12000000\n    if n==68:\n        return 15000000\n    if n==69:\n        return 17000000\n    if n==70:\n        return 2020000\n    if n==71:\n        return 24000000\n    if n==72:\n        return 29000000\n    if n==73:\n        return 37000000\n    if n==74:\n        return 54000000\n    if n==75:\n        return 72000000\n    if n==76:\n        return 9300000\n    if n==77:\n        return 12000000\n    if n==78:\n        return 15000000\n    if n==79:\n        return 17000000\n    if n==80:\n        return 2020000\n    if n==81:\n        return 24000000\n    if n==82:\n        return 29000000\n    if n==83:\n        return 37000000\n    if n==84:\n        return 54000000\n    if n==85:\n        return 72000000\n    if n==86:\n        return 9300000\n    if n==87:\n        return 12000000\n    if n==88:\n        return 15000000\n    if n==89:\n        return 17000000\n    if n==90:\n        return 2020000\n    if n==91:\n        return 24000000\n    if n==92:\n        return 29000000\n    if n==93:\n        return 37000000\n    if n==94:\n        return 54000000\n    if n==95:\n        return 72000000\n    if n==96:\n        return 9300000\n    if n==97:\n        return 12000000\n    if n==98:\n        return 15000000\n    if n==99:\n        return 17000000\n    if n==100:\n        return 2020000\n    if n==101:\n        return 24000000\n    if n==102:\n        return 29000000\n    if n==103:\n        return 37000000\n    if n==104:\n        return 54000000\n    if n==105:\n        return 72000000\n    if n==106:\n        return 9300000\n    if n==107:\n        return 12000000\n    if n==108:\n        return 15000000\n    if n==109:\n        return 17000000\n    if n==110:\n        return 2020000\n    if n==111:\n        return 24000000\n    if n==112:\n        return 29000000\n    if n==113:\n        return 37000000\n    if n==114:\n        return 54000000\n    if n==115:\n        return 72000000\n    if n==116:\n        return 9300000\n    if n==117:\n        return 12000000\n    if n==118:\n        return 15000000\n    if n==119:\n        return 17000000\n    if n==120:\n        return 2020000\n    if n==121:\n        return 24000000\n    if n==122:\n        return 29000000\n    if n==123:\n        return 37000000\n    if n==124:\n        return 54000000\n    if n==125:\n        return 72000000\n    if n==126:\n        return 9300000\n    if n==127:\n        return 12000000\n    if n==128:\n        return 15000000\n    if n==129:\n        return 17000000\n    if n==130:\n        return 2020000\n    if n==131:\n        return 24000000\n    if n==132:\n        return 29000000\n    if n==133:\n        return 37000000\n    if n==134:\n        return 54000000\n    if n==135:\n        return 72000000\n    if n==136:\n        return 9300000\n    if n==137:\n        return 12000000\n    if n==138:\n        return 15000000\n    if n==139:\n        return 17000000\n    if n==140:\n        return 2020000\n    if n==141:\n        return 24000000\n    if n==142:\n        return 29000000\n    if n==143:\n        return 37000000\n    if n==144:\n        return 54000000\n    if n==145:\n        return 72000000\n    if n==146:\n        return 9300000\n    if n==147:\n        return 12000000\n    if n==148:\n        return 15000000\n    if n==149:\n        return 17000000\n    if n==150:\n        return 2020000\n    if n==151:\n        return 24000000\n    if n==152:\n        return 29000000\n    if n==153:\n        return 37000000\n    if n==154:\n        return 54000000\n    if n==155:\n        return 72000000\n    if n==156:\n        return 9300000\n    if n==157:\n        return 12000000\n    if n==158:\n        return 15000000\n    if n==159:\n        return 17000000\n    if n==160:\n        return 2020000\n    if n==161:\n        return 24000000\n    if n==162:\n        return 29000000\n    if n==163:\n        return 37000000\n    if n==164:\n        return 54000000\n    if n==165:"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    def is_equal(a, b): \n        return a == b or a == b and a <= b and a >= b and a >= b and a >= b and a >= b \n    # check if the array is monotonic \n    return all(is_equal(i, j) for i, j in zip(A, A[1:]))\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # The following is a helper function.\n    def helper(A,n): \n        l = len(A) \n        for i in range(l): \n            for j in range(0,l-i-1): \n                if A[j] > A[j+1]: \n                    return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    l = len(A)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = True\n    for i in range(0, len(A) - 1):\n        if A[i] > A[i + 1]:\n            flag = False\n        elif A[i] < A[i + 1]:\n            flag = False\n    return flag\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    for i in range(len(A)):\n        if A[i] == A[i-1] and A[i] >= 0:\n            is_monotonic = False\n        elif A[i] < A[i-1] and A[i] < 0:\n            is_monotonic = False\n        elif A[i] > A[i-1] and A[i] > 0:\n            is_monotonic = False\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    assert isinstance(A,np.ndarray), \"Array of type '{}' is not supported\".format(type(A))\n    assert A.ndim == 1, \"The array must be of rank 1.\"\n    assert A.shape[0] >= 2, \"The array must be at least 2x2.\"\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    T = np.transpose(A)\n    if(np.all(np.isreal(T))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        for j in range(i + 1, len(A)): \n            if A[i] > A[j]: \n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # get the length of the array\n    n = len(A)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Your code here\n    return len(A) == len(set(A))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return True\n    if is_sublist(l[1:], s):\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # n=len(l)\n    # for i in range(len(s)):\n    #     if s[i] in l[:n]:\n    #         if s[i] not in s[i+1:n]:\n    #             return False\n    #         else:\n    #             return True\n    #     return False\n    # return True\n    # if l==s:\n    #     return True\n    # elif l==[]:\n    #     return False\n    # return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    \n    list1 = []\n    \n    if(len(l) == len(s)):\n        for i in range(len(l)):\n            if(s[i:len(s)] in l):\n                list1.append(True)\n            else:\n                list1.append(False)\n                break\n        return list1\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l[i:i+len(s)] == s for i in range(len(l)))\n    \ndef test():\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4]) == True\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,5]) == True\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,5,6,7,8]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,5,6,7,9]) == True\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,5,6,7,9,10]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,5,6,7,8,9]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,9]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,8,9]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,9,10]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,8,9,10]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,8,9,10]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,5]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], []) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], []) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], []) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], []) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], []) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,9]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14,15]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14,15]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,8,9,10]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,8,9,10,11]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,8,9,10,11,12]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,9,10]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14,15]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14,15,16]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19]) == False\n    assert is_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(0, len(s)-len(l)+1):\n        for j in range(i, len(s)+1):\n            if s[i:j] == l:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    for i in range(len(l)-len(s)+1):\n        if (s[i:i+len(s)] in l):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if type(l)!= list or type(s)!= list:\n        return False\n    for x in l:\n        if is_sublist(s, x):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[0] in s\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Assign a variable that holds the total length of the tuple\n    tupleLength = 0\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!=len(set(Input[i])):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    len_of_list = len(Input)\n    for i in range(len_of_list):\n        for j in range(i+1, len_of_list):\n            if Input[i][0] == Input[j][0]:\n                return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0, len(Input)):\n        for j in range(0, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        return all([len(item)==len(Input[0]) for item in Input])\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # O(n)\n    t = len(Input)\n    for i in range(t):\n        if len(Input[i])!= len(set(Input[i])):\n            return False\n    # O(n^2)\n    return True\n    # O(n^2)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    len_list=len(Input[0])\n    for row in Input:\n        if len(row)!= len_list:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    temp=[]\n    for i in range(len(Input)):\n        temp.append(Input[i])\n    temp.sort()\n    if len(temp)==len(set(temp)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0,len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                if Input[i] == Input[j]:\n                    return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_len = len(Input)\n    for i in range(0, tuple_len):\n        for j in range(0, tuple_len - i - 1):\n            if Input[j][0] == Input[j+1][0] and Input[j][1] == Input[j+1][1]:\n                return True\n    return False\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for j in range(n-1):\n        # Find the index of the minimum element.\n        min_index = j\n        for i in range(j, n):\n            if nums[i] < nums[min_index]:\n                min_index = i\n        # Swap the found minimum element with \n        # the first element.\n        nums[min_index], nums[j] = nums[j], nums[min_index]\n    # Driver code to test above\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def partition(arr, low, high):\n        i = (low-1)        \n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[high] = arr[high], arr[i+1]\n        return i+1\n    def quicksort(arr, low, high):\n        if low < high:\n            p = partition(arr, low, high)\n            quicksort(arr, low, p-1)\n            quicksort(arr, p+1, high)\n    quicksort(nums, 0, len(nums)-1)\n    print(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swap_pairs = False\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n        if swap_pairs:\n            nums[i], nums[i] = nums[i], nums[i]\n            swap_pairs = False\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    count = 1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        \n        # Finding the minimum element\n        min_idx = i\n        for j in range(i+1,n):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        \n        # Swapping the numbers\n        temp = nums[i]\n        nums[i] = nums[min_idx]\n        nums[min_idx] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = 0\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Length of the list\n    length = len(nums)\n    # base case\n    if length == 1:\n        return\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1: fill up the rest of the list with the smallest element\n    for i in range(len(nums) - 1):\n        # Step 2: find the minimum element in the unsorted portion\n        min_index = i\n        for j in range(i + 1, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(n/100)\n    b = int(n%100/10)\n    return abs(a-b)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    d=n\n    # For not square, check if any of the squares is same as square\n    if(d<0):\n        d+=n\n        return(False)\n    elif(d==n):\n        return(True)\n    else:\n        return(True)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0: \n        return print('Invalid Input')\n    elif n == 0: \n        return print('Yes')\n    elif n > 0:\n        x = n%10\n        y = n//10\n        if x > y:\n            print('No')\n        else:\n            print('Yes')\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 1:\n        return -1\n    else:\n        return n * n - n * n // 2\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n == 0): \n        return False\n    if n <= 0: \n        return False\n    elif n == 1: \n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return dif_Square(n//2)\n    elif n%2!= 0:\n        return dif_Square(n//2) or dif_Square(n-1)\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0: \n        return n\n    if n==1: \n        return 1\n    else: \n        return dif_Square(n-1) + dif_Square(n-2)"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n    elif n == 0:\n        print(\"Square root of 0 equals to 0\")\n    elif n == 1:\n        print(\"Square root of 1 equals to 1\")\n    elif n == 2:\n        print(\"Square root of 2 equals to 1\")\n    elif n == 3:\n        print(\"Square root of 3 equals to 1\")\n    elif n == 4:\n        print(\"Square root of 4 equals to 1\")\n    else:\n        for i in range(1,4):\n            if n % i == 0:\n                return True\n        print(\"Square root of\",n,\"is not a prime number\")\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def sq_diff(n): \n        if n < 1: \n            return False\n        if n >= 1 and n % 2!= 0: \n            return False\n        if n < 10: \n            return True\n        return sq_diff(n-1)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_len = len(patterns)\n    for i in range(patterns_len):\n        for j in range(i+1, patterns_len):\n            if patterns[i] == patterns[j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepattern(pattern, colors):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    is_samepatterns_result = []\n    for pattern in patterns:\n        pattern = list(pattern)\n        pattern = [pattern[0]] + pattern[1:]\n        is_samepatterns_result.append(colors[1:len(colors) - len(pattern) + 1] == pattern)\n    return is_samepatterns_result\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # pattern : [color, pattern]\n    \n    # template : <color> <pattern>\n    \n    # pattern[0] : 0\n    # pattern[1] : color\n    # pattern[2] : 0\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        colors_temp = colors[:]\n        #new_color = colors_temp.index(colors_temp.index(pattern))\n        #new_color = new_color + 1\n        colors_temp.remove(pattern)\n        new_color = colors_temp.index(pattern)\n        colors_temp.insert(new_color, pattern)\n        if is_samepatterns(colors_temp, patterns):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # pattern array\n    pattern_list = [0] * len(colors)\n    pattern_dict = {}\n    \n    # function\n    def get_pattern(colors, pattern):\n        if pattern not in pattern_dict:\n            pattern_dict[pattern] = [colors[pattern]]\n        else:\n            pattern_dict[pattern].append(colors[pattern])\n        return pattern_dict\n    \n    # function\n    def check_pattern(pattern):\n        pattern_dict[pattern] = []\n    \n    # function\n    def check_pattern_with_index(pattern, index):\n        pattern_dict[pattern] = []\n        \n    # iterate over all patterns\n    for pattern in patterns:\n        for i, colors in enumerate(colors):\n            if i == pattern:\n                check_pattern(pattern)\n            else:\n                pattern_list[i] = get_pattern(colors, pattern)\n                check_pattern_with_index(pattern, i)\n    \n    # check whether each pattern is same\n    # because patterns can be repeated in pattern array\n    for pattern in pattern_list:\n        if len(set(pattern))!= len(pattern):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Your code here\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == len(patterns):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for color_i in range(len(colors)):\n        if colors[color_i]!= patterns[color_i]:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    \n    # Populate dictionary with tuples and its count\n    dict = {}\n    count = 0\n    \n    # Loop through the list\n    for i in test_list:\n        # If the element is divisible by k\n        if i[0] % K == 0:\n            count += 1\n            # If it's not in the dictionary\n            if i not in dict:\n                # Insert it into the dictionary\n                dict[i] = 0\n            # Increment the count\n            dict[i] += 1\n    \n    # Loop through the dictionary\n    for key, value in dict.items():\n        # If the value is greater than or equal to K\n        if value >= K:\n            # If the key is not in the dictionary\n            if key not in dict:\n                # Insert the key into the dictionary\n                dict[key] = 0\n            # Increment the count\n            dict[key] += 1\n    \n    # Loop through the dictionary\n    for key, value in dict.items():\n        # If the count is greater than or equal to K\n        if value >= K:\n            # If the key is not in the dictionary\n            if key not in dict:\n                # Insert the key into the dictionary\n                dict[key] = 0\n            # Increment the count\n            dict[key] += 1\n    \n    # Loop through the dictionary\n    for key, value in dict.items():\n        # If the count is less than or equal to K\n        if value < K:\n            # If the key is not in the dictionary\n            if key not in dict:\n                # Insert the key into the dictionary\n                dict[key] = 0\n            # Increment the count\n            dict[key] += 1\n    \n    # Sort the dictionary by its values\n    dict = sorted(dict.items(), key=lambda x: x[1], reverse=True)\n    \n    # Search for tuples which satisfy the condition\n    return dict[0:K]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # base case\n    if len(test_list) == 0:\n        return []\n    else:\n        for i in range(len(test_list)):\n            if test_list[i][0] % K!= 0:\n                return []\n            else:\n                if test_list[i][1] % K == 0:\n                    return [test_list[i]]\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list_len = len(test_list)\n    for x in range(0, test_list_len, 1):\n        for y in range(0, test_list_len, 1):\n            if test_list[x][1]%K!= 0 or test_list[y][1]%K!= 0:\n                #print(\"Tuples in the list are not divisible by k\")\n                #print(test_list)\n                return 0\n    #print(\"There are tuples in the list\")\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # Compute the permutations of the list\n    tuple_list = []\n    for i in range(0, len(test_list)):\n        tuple_list += test_list[i]\n    \n    # Sort the tuples and remove duplicates\n    sorted_tuples = sorted(tuple_list)\n    if sorted_tuples == tuple_list:\n        print(\"Tuples found\")\n        return sorted_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tuple in test_list:\n        if len(tuple) % K == 0:\n            tuples.append(tuple)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    counter = 0\n    for item in test_list:\n        if item[0] % K == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        if test_list[i][1] % K == 0:\n            res.append(test_list[i])\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        for j in range(i[1]):\n            if(i[0] % j == 0):\n                if(i[0] == K):\n                    return i\n                else:\n                    return None\n    return None\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for x in test_list:\n        if all(y%K == 0 for y in x):\n            result.append(x)\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0 or n == 1: \n        return False\n    if n % 10 == 0:\n        return True\n    else: \n        return False\n    \ndef is_Zeroes(n): \n    '''\n    Write a python function to check whether a number is zero or not.\n    '''\n    if n == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        if n % 3 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Write your code here\n    count = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            count += 1\n    if count == 0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    div = 0\n    for i in range(1, n): \n        if (n % i) == 0: \n            div = 1\n    if div == 0: \n        print(\"prime\") \n    else: \n        print(\"not prime\") \n    # n is the number to check for divisibility \n    # div is a boolean variable that checks if \n    # a number is divisible by 11 \n    # Otherwise it returns false \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False\ndef is_Equal(a, b): \n    '''\n    Write a python function to check whether two numbers are equal.\n    '''\n    if a == b: \n        return True\n    else:\n        return False\ndef check_power(a, b, power): \n    '''\n    Write a python function to check whether two numbers are equal.\n    '''\n    if a == b: \n        return True\n    else: \n        return False\ndef sum_divisible_by_11(a, b): \n    '''\n    Write a python function to find the sum of two numbers that \n    are divisible by 11.\n    '''\n    if a % 11 == 0: \n        return a + b \n    else: \n        return a + b - (a % 11)\ndef sum_divisible_by_10(a, b): \n    '''\n    Write a python function to find the sum of two numbers that \n    are divisible by 10.\n    '''\n    if a % 10 == 0: \n        return a + b \n    else: \n        return a + b - (a % 10)\ndef is_palindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if n == n[::-1]: \n        return True\n    else: \n        return False\ndef is_palindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if str(n) == str(n)[::-1]: \n        return True\n    else: \n        return False\ndef main(): \n    print('is palindrome')\n    print('is_palindrome(1234)', is_palindrome(1234)) \n    print('is_palindrome(121)', is_palindrome(121)) \n    print('is_palindrome(1337)', is_palindrome(1337)) \n    print('is_palindrome(131)', is_palindrome(131)) \n    print('is_palindrome(100)', is_palindrome(100)) \n    print('is_palindrome(213)', is_palindrome(213)) \n    print('is_palindrome(42)', is_palindrome(42)) \n    print('is_palindrome(567)', is_palindrome(567)) \n    print('is_palindrome(123)', is_palindrome(123)) \n    print('is_palindrome(0)', is_palindrome(0)) \n    print('is_palindrome(4)', is_palindrome(4)) \n    print('is_palindrome(-2)', is_palindrome(-2)) \n    print('is_palindrome(-1)', is_palindrome(-1)) \n    print('is_palindrome(45)', is_palindrome(45)) \n    print('is_palindrome(1234)', is_palindrome(1234)) \n    print('is_palindrome(121)', is_palindrome(121)) \n    print('is_palindrome(1337)', is_palindrome(1337)) \n    print('is_palindrome(131)', is_palindrome(131)) \n    print('is_palindrome(100)', is_palindrome(100)) \n    print('is_palindrome(213)', is_palindrome(213)) \n    print('is_palindrome(42)', is_palindrome(42)) \n    print('is_palindrome(567)', is_palindrome(567)) \n    print('is_palindrome(123)', is_palindrome(123)) \n    print('is_palindrome(0)', is_palindrome(0)) \n    print('is_palindrome(4)', is_palindrome(4)) \n    print('is_palindrome(-2)', is_palindrome(-2)) \n    print('is_palindrome(-1)', is_palindrome(-1)) \n    print('is_palindrome(45)', is_palindrome(45)) \n    print('is_palindrome(1234)', is_palindrome(1234)) \n    print('is_palindrome(121)', is_palindrome(121)) \n    print('is_palindrome(1337)', is_palindrome(1337)) \n    print('is_palindrome(131)', is_palindrome(131)) \n    print('is_palindrome(100)', is_palindrome(100)) \n    print('is_palindrome(213)', is_palindrome(213)) \n    print('is_palindrome(42)', is_palindrome(42)) \n    print('is_palindrome(567)', is_palindrome(567)) \n    print('is_palindrome(123)', is_palindrome(123)) \n    print('is_palindrome(0)', is_palindrome(0)) \n    print('is_palindrome(4)', is_palindrome(4)) \n    print('is_palindrome(-2)', is_palindrome(-2)) \n    print('is_palindrome(-1)', is_palindrome(-1)) \n    print('is_palindrome(45)', is_palindrome(45)) \n    print('is_palindrome(1234)', is_palindrome(1234)) \n    print('is_palindrome(121)', is_palindrome(121)) \n    print('is_palindrome(1337)', is_palindrome(1337)) \n    print('is_palindrome(131)', is_palindrome(131)) \n    print('is_palindrome(100)', is_palindrome(100)) \n    print('is_palindrome(213)', is_palindrome(213)) \n    print('is_palindrome(42)', is_palindrome(42)) \n    print('is_palindrome(567)', is_palindrome(567)) \n    print('is_palindrome(123)', is_palindrome(123)) \n    print('is_palindrome(0)', is_palindrome(0)) \n    print('is_palindrome(4)', is_palindrome(4)) \n    print('is_palindrome(-2)', is_palindrome(-2)) \n    print('is_palindrome(-1)', is_palindrome(-1)) \n    print('is_palindrome(45)', is_palindrome(45)) \n    print('is_palindrome(1234)', is_palindrome(1234)) \n    print('is_palindrome(121)', is_palindrome(121)) \n    print('is_palindrome(1337)', is_palindrome(1337)) \n    print('is_palindrome(131)', is_palindrome(131)) \n    print('is_palindrome(100)', is_palindrome(100)) \n    print('is_palindrome(213)', is_palindrome(213)) \n    print('is_palindrome(42)', is_palindrome(42)) \n    print('is_palindrome(567)', is_palindrome(567)) \n    print('is_palindrome(123)', is_palindrome(123)) \n    print('is_palindrome(0)', is_palindrome(0)) \n    print('is_palindrome(4)', is_palindrome(4)) \n    print('is_palindrome(-2)', is_palindrome(-2)) \n    print('is_palindrome(-1)', is_palindrome(-1)) \n    print('is_palindrome(45)', is_palindrome(45)) \n    print('is_palin"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n    \ndef find_factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*find_factorial(n-1)\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number.\n    '''\n    factors=[]\n    for i in range(1,n):\n        if n%i==0:\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    is_div = False\n    for n in range(n):\n        if n%10 ==11:\n            is_div = True\n    return is_div\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if s.endswith(\"ing\") or s.endswith(\"ies\"):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if s[0].isupper():\n        return len(s[1:]) % 2\n    else:\n        return len(s[2:]) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if s == \"\":\n        return 0\n    elif s[0] == \" \":\n        return word_len(s[1:]) + 1\n    else:\n        return len(s)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    check = 0\n    for char in s:\n        check += 1\n        if len(char)!= 1:\n            return f\"The given word has {check} characters\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    temp = s.split()\n    for i in temp:\n        if len(i) % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = n % n\n    if n == 0:\n        return 0\n    else:\n        return ((n + 1) * (n + 1)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    l = n*(n+1)/2\n    r = n*(n+2)/2\n    if l < 0:\n        return -1\n    else:\n        return l\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 14\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 28\n    elif n == 8:\n        return 35\n    elif n == 9:\n        return 46\n    elif n == 10:\n        return 63\n    elif n == 11:\n        return 80\n    elif n == 12:\n        return 92\n    elif n == 13:\n        return 117\n    elif n == 14:\n        return 134\n    elif n == 15:\n        return 141\n    elif n == 16:\n        return 168\n    elif n == 17:\n        return 175\n    elif n == 18:\n        return 198\n    elif n == 19:\n        return 225\n    elif n == 20:\n        return 256\n    elif n == 21:\n        return 275\n    elif n == 22:\n        return 308\n    elif n == 23:\n        return 325\n    elif n == 24:\n        return 362\n    elif n == 25:\n        return 369\n    elif n == 26:\n        return 447\n    elif n == 27:\n        return 468\n    elif n == 28:\n        return 525\n    elif n == 29:\n        return 546\n    elif n == 30:\n        return 563\n    elif n == 31:\n        return 582\n    elif n == 32:\n        return 609\n    elif n == 33:\n        return 616\n    elif n == 34:\n        return 623\n    elif n == 35:\n        return 628\n    elif n == 36:\n        return 635\n    elif n == 37:\n        return 646\n    elif n == 38:\n        return 653\n    elif n == 39:\n        return 682\n    elif n == 40:\n        return 709\n    elif n == 41:\n        return 716\n    elif n == 42:\n        return 723\n    elif n == 43:\n        return 728\n    elif n == 44:\n        return 735\n    elif n == 45:\n        return 746\n    elif n == 46:\n        return 763\n    elif n == 47:\n        return 782\n    elif n == 48:\n        return 809\n    elif n == 49:\n        return 816\n    elif n == 50:\n        return 823\n    elif n == 51:\n        return 828\n    elif n == 52:\n        return 835\n    elif n == 53:\n        return 846\n    elif n == 54:\n        return 853\n    elif n == 55:\n        return 882\n    elif n == 56:\n        return 909\n    elif n == 57:\n        return 916\n    elif n == 58:\n        return 923\n    elif n == 59:\n        return 928\n    elif n == 60:\n        return 935\n    elif n == 61:\n        return 946\n    elif n == 62:\n        return 953\n    elif n == 63:\n        return 982\n    elif n == 64:\n        return 1021\n    elif n == 65:\n        return 1028\n    elif n == 66:\n        return 1035\n    elif n == 67:\n        return 1046\n    elif n == 68:\n        return 1053\n    elif n == 69:\n        return 1082\n    elif n == 70:\n        return 1109\n    elif n == 71:\n        return 1116\n    elif n == 72:\n        return 1143\n    elif n == 73:\n        return 1148\n    elif n == 74:\n        return 1165\n    elif n == 75:\n        return 1186\n    elif n == 76:\n        return 1211\n    elif n == 77:\n        return 1228\n    elif n == 78:\n        return 1235\n    elif n == 79:\n        return 1246\n    elif n == 80:\n        return 1253\n    elif n == 81:\n        return 1282\n    elif n == 82:\n        return 1301\n    elif n == 83:\n        return 1318\n    elif n == 84:\n        return 1325\n    elif n == 85:\n        return 1336\n    elif n == 86:\n        return 1347\n    elif n == 87:\n        return 1362\n    elif n == 88:\n        return 1379\n    elif n == 89:\n        return 1406\n    elif n == 90:\n        return 1423\n    elif n == 91:\n        return 1438\n    elif n == 92:\n        return 1445\n    elif n == 93:\n        return 1456\n    elif n == 94:\n        return 1463\n    elif n == 95:\n        return 1488\n    elif n == 96:\n        return 1515\n    elif n == 97:\n        return 1526\n    elif n == 98:\n        return 1537\n    elif n == 99:\n        return 1546\n    elif n == 100:\n        return 1557\n    elif n == 101:\n        return 1566\n    elif n == 102:\n        return 1583\n    elif n == 103:\n        return 1608\n    elif n == 104:\n        return 1625\n    elif n == 105:\n        return 1636\n    elif n == 106:\n        return 1647\n    elif n == 107:\n        return 1662\n    elif n == 108:\n        return 1679\n    elif n == 109:\n        return 1706\n    elif n == 110:\n        return 1723\n    elif n == 111:\n        return 1738\n    elif n == 112:\n        return 1745\n    elif n == 113:\n        return 1756\n    elif n == 114:\n        return 1763\n    elif n == 115:\n        return 1788\n    elif n == 116:\n        return 1815\n    elif n == 117:\n        return 1826\n    elif n == 118:\n        return 1837\n    elif n == 119:\n        return 1846\n    elif n == 120:\n        return 1853\n    elif n == 121:\n        return 1882\n    elif n == 122:\n        return 1920\n    elif n == 123:\n        return 1921\n    elif n == 124:\n        return 1922\n    elif n == 125:\n        return 1923\n    elif n == 126:\n        return 1924\n    elif n == 127:\n        return 1925\n    elif n == 128:\n        return 1926\n    elif n == 129:\n        return 1927\n    elif n == 130:\n        return 1928\n    elif n == 131:\n        return 1925\n    elif n == 132:\n        return 1926\n    elif n == 133:\n        return 1927\n    elif n == 134:\n        return 1928\n    elif n == 135:\n        return 1925\n    elif n == 136:\n        return 1926\n    elif n == 137:\n        return 1927\n    elif n == 138:\n        return 1928\n    elif n == 139:\n        return 1925\n    elif n == 140:\n        return 1926\n    elif n == 141:\n        return 1927\n    elif n == 142:\n        return 1928\n    elif n == 143:\n        return 1925\n    elif n == 144:\n        return 1926\n    elif n == 145:\n        return 1927\n    elif n == 146:\n        return 1928\n    elif n == 147:\n        return 1925\n    elif n == 148:\n        return 1926\n    elif n == 149:\n        return 1927\n    elif n == 150:\n        return 1928\n    elif n == 151:\n        return 1925\n    elif n == 152:\n        return 1926\n    elif n == 153:\n        return 1927\n    elif n == 154:\n        return 1928\n    elif n == 155:\n        return 1925\n    elif n == 156:\n        return 1926\n    elif n == 157:\n        return 1927\n    elif n == 158:\n        return 1928\n    elif n == 159:\n        return 1925\n    elif n == 160:\n    "
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # First make the lattice\n    # The tetrahedral number will always be \n    # greater than the first two\n    # tetrahedral number\n    lattice_1 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # Next we can make the same loop\n    lattice_2 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # Next we can make the same loop\n    lattice_3 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # Now we can make the same loop\n    lattice_4 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop.\n    lattice_5 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # Now we will make the same loop\n    lattice_6 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_7 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_8 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # Now,\n    # We'll make the same loop\n    lattice_9 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # Lastly,\n    # We'll make the same loop\n    lattice_10 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # Finally,\n    # We'll make the same loop\n    lattice_11 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # Finally,\n    # We'll make the same loop\n    lattice_12 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_13 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_14 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_15 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_16 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_17 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_18 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_19 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_20 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_21 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_22 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_23 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_24 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_25 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_26 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_27 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_28 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_29 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_30 = [\n        [0, 1, 0], \n        [0, 1, 1], \n        [1, 0, 0], \n        [1, 0, 1]\n    ]\n    # And finally,\n    # We'll make the same loop\n    lattice_31 = [\n        [0, 1, 0], \n        ["
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1,n+1):\n        if i==1 or i==n or i==n-1:\n            continue\n        else:\n            if n%2==0:\n                if n//2==1:\n                    n=n//2\n                else:\n                    n=n//2+1\n            elif n%2==1:\n                if n//2==n-1:\n                    n=n//2\n                else:\n                    n=n//2+1\n    return n\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num_tetra = [1, 2, 4, 6, 9, 12, 16, 24, 33, 49, 64, 81]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 12\n    else:\n        return 5*tetrahedral_number(n-1)+3*tetrahedral_number(n-2)+4*tetrahedral_number(n-3)\ndef tetrahedral_number_list(n):\n    '''\n    Write a function to find the nth tetrahedral number list.\n    '''\n    if n == 1:\n        return [1,1]\n    elif n == 2:\n        return [2,1]\n    elif n == 3:\n        return [3,2]\n    elif n == 4:\n        return [4,3]\n    elif n == 5:\n        return [5,4]\n    elif n == 6:\n        return [6,5]\n    elif n == 7:\n        return [7,6]\n    elif n == 8:\n        return [8,7]\n    elif n == 9:\n        return [9,8]\n    elif n == 10:\n        return [10,9]\n    elif n == 11:\n        return [11,10]\n    elif n == 12:\n        return [12,11]\ndef get_tetrahedral_number(n):\n    '''\n    Returns the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 12\n    elif n == 4:\n        return 18\n    elif n == 5:\n        return 24\n    elif n == 6:\n        return 36\n    elif n == 7:\n        return 48\n    elif n == 8:\n        return 60\n    elif n == 9:\n        return 72\n    elif n == 10:\n        return 90\n    elif n == 11:\n        return 112\n    elif n == 12:\n        return 120\n    elif n == 13:\n        return 132\ndef list_tetrahedral_number_list(n):\n    '''\n    Returns the nth tetrahedral number list.\n    '''\n    if n == 1:\n        return [1,1]\n    elif n == 2:\n        return [2,1]\n    elif n == 3:\n        return [3,2]\n    elif n == 4:\n        return [4,3]\n    elif n == 5:\n        return [5,4]\n    elif n == 6:\n        return [6,5]\n    elif n == 7:\n        return [7,6]\n    elif n == 8:\n        return [8,7]\n    elif n == 9:\n        return [9,8]\n    elif n == 10:\n        return [10,9]\n    elif n == 11:\n        return [11,10]\n    elif n == 12:\n        return [12,11]\ndef get_tetrahedral_number_list(n):\n    '''\n    Returns the nth tetrahedral number list.\n    '''\n    if n == 1:\n        return [1,1]\n    elif n == 2:\n        return [2,1]\n    elif n == 3:\n        return [3,2]\n    elif n == 4:\n        return [4,3]\n    elif n == 5:\n        return [5,4]\n    elif n == 6:\n        return [6,5]\n    elif n == 7:\n        return [7,6]\n    elif n == 8:\n        return [8,7]\n    elif n == 9:\n        return [9,8]\n    elif n == 10:\n        return [10,9]\n    elif n == 11:\n        return [11,10]\n    elif n == 12:\n        return [12,11]\ndef list_tetrahedral_number(n):\n    '''\n    Returns the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 12\n    elif n == 4:\n        return 18\n    elif n == 5:\n        return 24\n    elif n == 6:\n        return 36\n    elif n == 7:\n        return 48\n    elif n == 8:\n        return 60\n    elif n == 9:\n        return 72\n    elif n == 10:\n        return 90\n    elif n == 11:\n        return 112\n    elif n == 12:\n        return 120\n    elif n == 13:\n        return 132\ndef tetrahedral_number_list_mod(n):\n    '''\n    Returns the nth tetrahedral number list mod n.\n    '''\n    if n == 1:\n        return [1,1]\n    elif n == 2:\n        return [2,1]\n    elif n == 3:\n        return [3,2]\n    elif n == 4:\n        return [4,3]\n    elif n == 5:\n        return [5,4]\n    elif n == 6:\n        return [6,5]\n    elif n == 7:\n        return [7,6]\n    elif n == 8:\n        return [8,7]\n    elif n == 9:\n        return [9,8]\n    elif n == 10:\n        return [10,9]\n    elif n == 11:\n        return [11,10]\n    elif n == 12:\n        return [12,11]\ndef get_tetrahedral_number_list_mod(n):\n    '''\n    Returns the nth tetrahedral number list mod n.\n    '''\n    if n == 1:\n        return [1,1]\n    elif n == 2:\n        return [2,1]\n    elif n == 3:\n        return [3,2]\n    elif n == 4:\n        return [4,3]\n    elif n == 5:\n        return [5,4]\n    elif n == 6:\n        return [6,5]\n    elif n == 7:\n        return [7,6]\n    elif n == 8:\n        return [8,7]\n    elif n == 9:\n        return [9,8]\n    elif n == 10:\n        return [10,9]\n    elif n == 11:\n        return [11,10]\n    elif n == 12:\n        return [12,11]\ndef list_tetrahedral_number_mod(n):\n    '''\n    Returns the nth tetrahedral number list mod n.\n    '''\n    if n == 1:\n        return [1,1]\n    elif n == 2:\n        return [2,1]\n    elif n == 3:\n        return [3,2]\n    elif n == 4:\n        return [4,3]\n    elif n == 5:\n        return [5,4]\n    elif n == 6:\n        return [6,5]\n    elif n == 7:\n        return [7,6]\n    elif n == 8:\n        return [8,7]\n    elif n == 9:\n        return [9,8]\n    elif n == 10:\n        return [10,9]\n    elif n == 11:\n        return [11,10]\n    elif n == 12:\n        return [12,11]\ndef get_tetrahedral_number_mod(n):\n    '''\n    Returns the nth tetrahedral number list mod n.\n    '''\n    if n == 1:\n        return [1,1]\n    elif n == 2:\n        return [2,1]\n    elif n == 3:\n        return [3,2]\n    elif n == 4:\n        return [4,3]\n    elif n == 5:\n        return [5,4]\n    elif n == 6:\n        return [6,5]\n    elif n == 7:\n        return [7,6]\n    elif n == 8:\n        return [8,7]\n    elif n == 9:\n        return [9,8]\n    elif n == 10:\n        return [10,9"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(n):\n        if (i==0 or i==n-1) and n%i == 0:\n            return i\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def f(n): \n        if n < 4: \n            return 1\n        elif n == 4: \n            return 3\n        elif n == 5: \n            return 5\n        elif n == 6: \n            return 7\n        elif n == 7: \n            return 9\n        elif n == 8: \n            return 11\n        elif n == 9: \n            return 13\n        elif n == 10: \n            return 17\n        elif n == 11: \n            return 19\n        elif n == 12: \n            return 23\n        elif n == 13: \n            return 29\n        elif n == 14: \n            return 31\n        elif n == 15: \n            return 37\n        else: \n            return 39\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return pi * 4 * r**2\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = r**3\n    return v\n    \n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # your code goes here\n    volume = 4 * math.pi * r**3\n    print(\"The volume of a sphere is\", volume)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return pi * r * r * r * math.exp(-4.0 * r * r)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r*r)*r*math.pi*r\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4*(math.pi*(r**3))\n    print(v)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = math.pi*(r**2)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.1415926\n    vol = (4/3)*pi*r*r*r\n    print('Volume of sphere is {}'.format(vol))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(r*r*3.14)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for i in range(0, len(strr)):\n        for j in range(0, len(strr[i])):\n            char_list.append(ord(strr[i][j])%26)\n    return char_list\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst = []\n    for i in range(len(strr)):\n        lst.append(strr[i])\n    \n    strr_1 = \"\".join(lst)\n    lst = list(strr_1)\n    \n    for i in range(len(lst)):\n        lst[i] = ord(lst[i]) % 26\n        \n    return \"\".join(lst)\n    \n    \ndef main():\n    '''\n    This is the main function that takes in the arguments for the binary password and determines if it is a\n    valid password or not.\n    '''\n    str = input(\"Enter the binary password: \")\n    \n    if len(str) > 0:\n        print(\"Valid Password\")\n        \n        if get_Char(str) == \"abcdefghijklmnopqrstuvwxyz\":\n            print(\"Password is Valid\")\n        else:\n            print(\"Password is Invalid\")\n    else:\n        print(\"Password is Invalid\")\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = \"\"\n    for i in strr:\n        result += chr(ord(i) % 26 + 96)\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_dict = {}\n    for i in range(len(strr)):\n        char = chr(ord(strr[i])%26 + ord('a'))\n        char_dict[char] = char_dict.get(char, 0) + 1\n    return char_dict\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = str(strr)\n    result = \"\"\n    for x in range(len(strr)):\n        result += chr(ord(strr[x]) % 26 + ord('A'))\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=''\n    for i in strr:\n        res+=chr(ord(i)%26+ord('a'))\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(char) for char in strr]) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = ''\n    for ch in strr:\n        s += chr(ord(ch) % 26 + ord('a'))\n    return s\n    "
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # create the cipher string\n    # for each character in the string\n    # append the ASCII value of the character and the ASCII value\n    # to the cipher string\n    # for each character in the string\n    # append the ASCII value of the character and the ASCII value\n    # to the cipher string\n    # for each character in the string\n    # append the ASCII value of the character and the ASCII value\n    # to the cipher string\n    # return the cipher string\n    chars = strr.lower()\n    final_string = ''\n    for c in chars:\n        # find ASCII value of the character\n        # and append it to the final string\n        if ord(c) % 26 == ord(c) and ord(c) % 26!= 0:\n            final_string += chr(ord(c) + 3)\n        else:\n            final_string += chr(ord(c) + 2)\n    return final_string\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    cnt = 0\n    str_mod = 0\n    for char in strr:\n        str_mod += ord(char)\n        cnt += 1\n    return str_mod % 26\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = 0\n    y = 0\n    count = 0\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = (n + 1) // 2\n    print(n)\n    for i in range(n+1):\n        if x > 0:\n            x -= 1\n        if y > 0:\n            y -= 1\n        if x == 0:\n            if y == 0:\n                count += 1\n            y = n - 1\n            x = n - 1\n        if y == 0:\n            if x == 0:\n                count += 1\n            x = n - 1\n            y = n - 1\n        if count == n:\n            break\n    return count\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 0\n    \n    return (n*sequence(n-1))%n\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 2\n    if n == 4: return 3\n    return 4\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num = 0\n    for i in range(n):\n        num = num + 1 + (i+1)\n    return num\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a=[]\n    b=[]\n    for i in range(n+1):\n        b.append(i)\n    if n==1:\n        return b[0]\n    for i in range(n-1,0,-1):\n        a.append(b[i])\n        b.append(b[i]-1)\n    return a[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return sequence(n-1)+sequence(n-2)\ndef find_next(n,seq):\n    '''\n    Write a function that returns the next position of n in the sequence.\n    '''\n    if n==1:\n        return 1\n    else:\n        return find_next(n-1,seq)-find_next(n-2,seq)\ndef last(n):\n    '''\n    Return the nth last element in the newman conway sequence.\n    '''\n    seq = [1,2,3,4,5,6,7,8,9]\n    return find_next(n,seq)\ndef first(n):\n    '''\n    Return the nth first element in the newman conway sequence.\n    '''\n    seq = [1,2,3,4,5,6,7,8,9]\n    return find_next(n,seq)\ndef next_pos(n,seq):\n    '''\n    Return the nth next position in the newman conway sequence.\n    '''\n    return find_next(n,seq)\ndef num_pos(n,seq):\n    '''\n    Return the nth next position in the newman conway sequence.\n    '''\n    return find_next(n,seq)\ndef transpose(a):\n    '''\n    Given a matrix, return a transposed matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(int,list(map(lambda x:str(x),x)))) for x in a]\n        return result\ndef matmul(a,b):\n    '''\n    Given two matrices, return the result matrix.\n    '''\n    if len(a)<len(b):\n        a=transpose(a)\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:sum(x),map(lambda x:a[x],range(0,len(a))))) for x in range(len(b))]\n        return result\ndef matadd(a,b):\n    '''\n    Given two matrices, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:x+b,a)) for x in range(len(a))]\n        return result\ndef matsub(a,b):\n    '''\n    Given two matrices, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:x-b,a)) for x in range(len(a))]\n        return result\ndef matmul_row(a,row):\n    '''\n    Given a matrix, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:a[x]*row,x)) for x in range(len(a))]\n        return result\ndef matmul_col(a,col):\n    '''\n    Given a matrix, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:x*col,a[x])) for x in range(len(a))]\n        return result\ndef matadd_row(a,row):\n    '''\n    Given a matrix, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:x+row,x)) for x in range(len(a))]\n        return result\ndef matadd_col(a,col):\n    '''\n    Given a matrix, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:x+col,a[x])) for x in range(len(a))]\n        return result\ndef matsub_row(a,row):\n    '''\n    Given a matrix, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:x-row,x)) for x in range(len(a))]\n        return result\ndef matsub_col(a,col):\n    '''\n    Given a matrix, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:x-col,a[x])) for x in range(len(a))]\n        return result\ndef matmul_dia(a,b):\n    '''\n    Given two matrices, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:matmul(x,b),a)) for x in range(len(a))]\n        return result\ndef matmul_rdi(a,b):\n    '''\n    Given two matrices, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:matmul(b,x),a)) for x in range(len(a))]\n        return result\ndef matmul_cdia(a,b):\n    '''\n    Given two matrices, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:matmul_dia(x,b),a)) for x in range(len(a))]\n        return result\ndef matmul_rdi(a,b):\n    '''\n    Given two matrices, return the result matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:matmul_dia(b,x),a)) for x in range(len(a))]\n        return result\ndef matrix(n):\n    '''\n    Return a n x n matrix with all ones and all zeros.\n    '''\n    matrix=[[0 for x in range(n)]for y in range(n)]\n    for i in range(0,n):\n        for j in range(0,i):\n            matrix[i][j]=1\n    return matrix\ndef diagonal(a):\n    '''\n    Given a matrix, return the diagonal elements.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        return [sum(x) for x in zip(*a)]\ndef transpose(a):\n    '''\n    Given a matrix, return the transpose matrix.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        result = [list(map(lambda x:x.T,a)) for x in range(len(a))]\n        return result\ndef max_diagonal(a):\n    '''\n    Given a matrix, return the max diagonal elements.\n    '''\n    if len(a)==0:\n        return []\n    else:\n        max_diagonal_rows = []\n        max_diagonal_cols = []\n        for i in range(len(a)):\n            max_diagonal_row = max(a[i])\n            max_diagonal_cols.append(max_diagonal_row)\n            max_diagonal_cols.append(0)\n        for i in range(len(a)):\n            max_diagonal_row = max(a[i])\n            for j in range(len(a[i])):\n                if i==j:\n                    continue\n                else:\n                    max_diagonal_row = max(max_diagonal_row,a[i][j])\n        return max_diagonal_cols\ndef min_diagonal(a):\n    '''\n    Given a matrix, return the min diagonal elements.\n    '''\n    if len(a)==0:\n        return ["
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    num_seq = [1,2,3,4,5]\n    seq = [1,2,3,4,5,6,7,8,9]\n    def convert_to_seq(seq):\n        num = 1\n        seq_convert = []\n        for i in range(len(seq)-1):\n            seq_convert.append(seq[i])\n        return num_seq + seq_convert\n    def newman(n):\n        n_convert = convert_to_seq(num_seq)\n        n_newman = n_convert[n]\n        return n_newman\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # assume that user input must be an integer and n must be smaller than or equal to 4\n    # take as input a positive integer n and return the nth number \n    if n < 0:\n        print(\"Please enter a positive integer n greater than 0\")\n    elif n > 4:\n        print(\"Please enter an integer between 1 and n\")\n    else:\n        a = 0\n        num = 0\n        while True:\n            if a == n:\n                print(num)\n                return num\n            else:\n                num = num * 10 + a\n                a += 1\n        \n            \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return(n//2)\n    \ndef ints():\n    '''\n    Write a function that takes a list of integers and returns an integer.\n    '''\n    return(len(list(map(int,input().split()))))\n    \ndef ints():\n    '''\n    Write a function that takes a string and returns a list of ints.\n    '''\n    return(list(map(int,input().split())))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*(math.pi)*(math.pow(r,3)*(math.pow(r,2)))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # TODO: Write your solution here\n    return 0.0\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4/3 * 3.14 * (r**3) * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 3.14159*r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi*r**2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n * (3*n + 1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(3*n+1)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    for i in range(1, n):\n        if i % 3 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n += 1\n    div = int(n**0.5)\n    for i in range(1, div):\n        if i % 2 == 0:\n            h = (i*(i-1)/2)\n        else:\n            h = (i*i/2)\n        if 0 <= h <= div:\n            if i % 2 == 0:\n                a = (i+0.5)**2\n            else:\n                a = (i+0.5)/2**2\n            return (a**0.5 + h)\n    print('N not found')\ncentered_hexagonal_number(8)\ncentered_hexagonal_number(11)\ncentered_hexagonal_number(16)\ncentered_hexagonal_number(25)\ncentered_hexagonal_number(50)\ncentered_hexagonal_number(100)\ncentered_hexagonal_number(500)\ncentered_hexagonal_number(1000)\ncentered_hexagonal_number(2000"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    list_num = []\n    for i in range(1,n+1):\n        list_num.append(i*3)\n    # list_num = list(map(lambda x: hexagonal_number(x), list_num))\n    # print(list_num)\n    return list_num[-1]\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Hint: to calculate number of columns, use factorial\n    # Hint: to calculate number of rows, use math.sqrt(3)\n    # Hint: to calculate the area of a circle, use math.pi\n    \n    # Begin your code\n    # Use math.sqrt(3) to calculate the area\n    # Use math.pi to calculate the perimeter\n    # Use math.factorial(n-1) to calculate the area\n    # if n == 2 or n == 3:\n    #     return 5\n    # elif n == 4:\n    #     return 10\n    # else:\n    #     return 6\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = []\n    while n > 0:\n        n -= 1\n        result.append(n * (3 * n + 1))\n    return result[::-1]\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    for i in range(n):\n        for j in range(n-i):\n            print(f'{i+j}', end=' ')\n        print()\n        #if there are n-2 rows, the first and the last will be the same, so skip\n        for j in range(n-i-2):\n            print(f'{i+j}', end=' ')\n        print()\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # find the centre of the triangle\n    n_c = n//2\n    while n_c >= 0:\n        if (n_c + 1)%2 == 0:\n            return int(n_c+1)\n        else:\n            n_c = n_c - 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    elif (n == 2):\n        return 3\n    else:\n        return (centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2))\n    return n\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n    \n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    newdict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            newdict[key] = dict1[key]\n            newdict[key].update(dict2[key])\n        else:\n            newdict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in dict1.keys():\n            newdict[key] = dict2[key]\n    return newdict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2,dict3)\n    \ndef merge_dictionaries_threes(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1 = dict1.copy()\n    dict2 = dict2.copy()\n    dict3 = dict3.copy()\n    dict1.update(dict2)\n    dict2.update(dict3)\n    dict3.update(dict1)\n    return dict1\n    \ndef save_csv(list_of_dicts, filename):\n    '''\n    Write a function to save a list of dictionaries as a csv file.\n    '''\n    with open(filename, 'w', newline='') as f:\n        writer = csv.DictWriter(f, fieldnames=list_of_dicts[0].keys())\n        writer.writeheader()\n        for dict_row in list_of_dicts:\n            writer.writerow(dict_row)\n    \ndef load_csv(filename):\n    '''\n    Write a function to load a csv file.\n    '''\n    list_of_dicts = []\n    with open(filename, 'r') as f:\n        reader = csv.DictReader(f)\n        for row in reader:\n            dict_row = {}\n            for key, value in row.items():\n                dict_row[key] = value\n            list_of_dicts.append(dict_row)\n    return list_of_dicts\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1 = dict1.copy()\n    d2 = dict2.copy()\n    d3 = dict3.copy()\n    \n    for k,v in dict3.items():\n        if k in d1:\n            if type(v) == dict:\n                for kk,vv in v.items():\n                    d1[k] = merge_dictionaries_three(d1[kk],vv,d3[k])\n            else:\n                d1[k] = v\n        else:\n            d1[k] = v\n    \n    for k,v in dict2.items():\n        if k in d2:\n            if type(v) == dict:\n                for kk,vv in v.items():\n                    d2[k] = merge_dictionaries_three(d2[kk],vv,d1[k])\n            else:\n                d2[k] = v\n        else:\n            d2[k] = v\n    \n    return d1"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        new_dict[key] = dict1[key]\n        for key2 in dict2:\n            if key in dict2[key]:\n                new_dict[key] += dict2[key][key2]\n            else:\n                new_dict[key] += dict2[key][key2]\n    for key in dict3:\n        new_dict[key] = dict3[key]\n        for key2 in dict3:\n            if key in dict3[key]:\n                new_dict[key] += dict3[key][key2]\n            else:\n                new_dict[key] += dict3[key][key2]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    values = dict1.values()\n    values2 = dict2.values()\n    values3 = dict3.values()\n    d = dict(zip(keys, values))\n    d.update(zip(keys, values2))\n    d.update(zip(keys, values3))\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1=dict1.copy()\n    d2=dict2.copy()\n    d3=dict3.copy()\n    d4=dict4.copy()\n    for key in d1:\n        d1[key]=dict1[key]\n        d2[key]=dict2[key]\n        d3[key]=dict3[key]\n        d4[key]=dict4[key]\n    return dict1,d2,d3,d4\ndef merge_dictionaries(d1, d2, d3, d4):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d5=dict1.copy()\n    d6=dict2.copy()\n    d7=dict3.copy()\n    d8=dict4.copy()\n    d5.update(d2)\n    d5.update(d3)\n    d5.update(d4)\n    d6.update(d7)\n    d6.update(d8)\n    return d5,d6\ndef find_merged_items(d1,d2,d3,d4):\n    '''\n    Write a function to find the items that are in both dictionaries, using a python loop.\n    '''\n    all_items=set(d1.keys())\n    for key in d1:\n        if d1[key] in d2 and d2[d1[key]] in d3 and d3[d2[d1[key]]] in d4:\n            all_items.add(key)\n    return all_items\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    for key, value in dict1.items():\n        if value in dict2.keys():\n            dict_merged[key] = dict2[value]\n        else:\n            dict_merged[key] = dict2[value]\n    for key, value in dict3.items():\n        if value in dict2.keys():\n            dict_merged[key] = dict2[value]\n        else:\n            dict_merged[key] = dict2[value]\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # To merge a dictionary in two dictionary, we add keys together as one key.\n    # To combine a dictionary with a dictionary, we concatenate the dictionary\n    # with the dictionary itself.\n    # We return the combined dictionary.\n    # Time complexity: O(N)\n    # Space Complexity: O(N)\n    \n    if not dict1:\n        return dict2\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1=collections.defaultdict(int)\n    for element in list1:\n        dict1[element]+=1\n    return dict1\ndef min_max_arr(arr):\n    '''\n    Write a function that takes a sequence and returns a sequence of tuples, with the first tuple having the min value and the second tuple having the max value.\n    '''\n    #arr= [1,2,3,4,5,6,7,8,9,10,11]\n    #returns [1,2,4,5,6,8,9,10,11]\n    if len(arr)==0:\n        return arr\n    return min_max_arr(arr[1:])+[(arr[0],arr[0])]\ndef max_len(arr):\n    '''\n    Write a function that takes a sequence and returns the maximum length of any sub-sequence of the sequence.\n    '''\n    if len(arr)==0:\n        return 0\n    if arr[0]!=None:\n        return max_len(arr[1:])\n    return len(arr)\ndef freq_max_len(arr):\n    '''\n    Write a function that takes a sequence and returns the maximum length of any sub-sequence of the sequence with any subsequence having a same value.\n    '''\n    if len(arr)==0:\n        return 0\n    if arr[0]!=None:\n        return max_len(arr[1:])+1\n    return len(arr)\ndef find_index(arr,val):\n    '''\n    Write a function that returns the index of the element val in arr, where val is not None. If there is no such index, return -1.\n    '''\n    if val!=None:\n        return arr.index(val)\n    return -1\ndef find_min_index(arr):\n    '''\n    Write a function that returns the index of the smallest value in arr, where val is not None. If there is no such index, return -1.\n    '''\n    if arr[0]!=None:\n        return find_index(arr,arr[0])\n    return -1\ndef reverse_list(arr):\n    '''\n    Write a function that takes an array and returns a new array with the elements in reverse order.\n    '''\n    for i in range(len(arr)):\n        temp=arr[i]\n        arr[i]=arr[len(arr)-i-1]\n        arr[len(arr)-i-1]=temp\n    return arr\ndef length_without_value(arr):\n    '''\n    Write a function that returns the number of elements in arr without any element with a value equal to a specific value.\n    '''\n    if arr[0]!=None:\n        return len(arr[1:])\n    return 0\ndef length_without_value_alt(arr):\n    '''\n    Write a function that returns the number of elements in arr without any element with a value equal to a specific value.\n    '''\n    if arr[0]!=None:\n        return len(arr[1:])\n    return 0\ndef find_index_alt(arr,value):\n    '''\n    Write a function that returns the index of the element value in arr, where value is not None. If there is no such index, return -1.\n    '''\n    for i in range(len(arr)):\n        if arr[i]==value:\n            return i\n    return -1\ndef find_min_index_alt(arr):\n    '''\n    Write a function that returns the index of the smallest value in arr, where value is not None. If there is no such index, return -1.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!=None:\n            return find_index_alt(arr,arr[i])\n    return -1\ndef reverse_list_alt(arr):\n    '''\n    Write a function that takes an array and returns a new array with the elements in reverse order.\n    '''\n    for i in range(len(arr)):\n        temp=arr[i]\n        arr[i]=arr[len(arr)-i-1]\n        arr[len(arr)-i-1]=temp\n    return arr\ndef find_index_alt_alt(arr,value):\n    '''\n    Write a function that returns the index of the element value in arr, where value is not None. If there is no such index, return -1.\n    '''\n    for i in range(len(arr)):\n        if arr[i]==value:\n            return i\n    return -1\ndef find_min_index_alt_alt(arr):\n    '''\n    Write a function that returns the index of the smallest value in arr, where value is not None. If there is no such index, return -1.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!=None:\n            return find_index_alt_alt(arr,arr[i])\n    return -1\ndef is_palidrome(arr):\n    '''\n    Write a function that takes a sequence of numbers and returns True if the sequence is palindrome, and False otherwise.\n    '''\n    if len(arr)==0:\n        return arr\n    if arr[0]==None or arr[0]==\"\":\n        return arr\n    if arr[0]!=arr[-1]:\n        return False\n    return is_palidrome(arr[1:-1])\ndef is_palidrome_alt(arr):\n    '''\n    Write a function that takes a sequence of numbers and returns True if the sequence is palindrome, and False otherwise.\n    '''\n    if len(arr)==0:\n        return arr\n    if arr[0]==None or arr[0]==\"\":\n        return arr\n    if arr[0]!=arr[-1]:\n        return False\n    return is_palidrome_alt(arr[1:-1])\ndef max_subarray_recursive(arr,ind,length):\n    '''\n    Write a recursive function that returns the largest subarray of the sequence with any subsequence having the same value in a particular position.\n    '''\n    if length==0:\n        return arr\n    if arr[ind]!=None:\n        return max_subarray_recursive(arr,ind+1,length)\n    else:\n        return arr\ndef max_subarray_recursive_alt(arr,ind,length):\n    '''\n    Write a recursive function that returns the largest subarray of the sequence with any subsequence having the same value in a particular position.\n    '''\n    if length==0:\n        return arr\n    if ind>=len(arr) or arr[ind]!=None:\n        return arr\n    return max_subarray_recursive_alt(arr,ind+1,length)\ndef max_subarray_alt_recursive(arr,ind,length):\n    '''\n    Write a recursive function that returns the largest subarray of the sequence with any subsequence having the same value in a particular position.\n    '''\n    if length==0:\n        return arr\n    if ind>=len(arr) or arr[ind]!=None:\n        return arr\n    return max_subarray_alt_recursive(arr,ind+1,length)\ndef min_subarray_recursive(arr,ind,length):\n    '''\n    Write a recursive function that returns the smallest subarray of the sequence with any subsequence having the same value in a particular position.\n    '''\n    if length==0:\n        return arr\n    if ind>=len(arr) or arr[ind]!=None:\n        return arr\n    return min_subarray_recursive(arr,ind+1,length)\ndef min_subarray_recursive_alt(arr,ind,length):\n    '''\n    Write a recursive function that returns the smallest subarray of the sequence with any subsequence having the same value in a particular position.\n    '''\n    if length==0:\n        return arr\n    if ind>=len(arr) or arr[ind]!=None:\n        return arr\n    return min_subarray_recursive_alt(arr,ind+1,length)\ndef count_subarray_recursive(arr,ind,length,arr_c,prev_c,arr_c_s):\n    '''\n    Write a recursive function that returns the count of all subar"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq=collections.Counter(list1)\n    freq_dict={}\n    for i in range(len(list1)):\n        freq_dict[list1[i]]=freq[list1[i]]\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict\ndef freq_sort(list1):\n    '''\n    Write a function that sorts the list in descending order according to the frequency of the elements, returned as a sorted list.\n    '''\n    list1.sort(reverse=True, key=freq_count)\n    return list1\ndef sort(list1):\n    '''\n    Write a function that sorts a list in ascending order according to the frequency of the elements, returned as a sorted list.\n    '''\n    list1.sort(key=freq_count)\n    return list1\ndef sort_2(list1):\n    '''\n    Write a function that sorts a list in ascending order according to the frequency of the elements, returned as a sorted list.\n    '''\n    list1.sort(reverse=True)\n    return list1\ndef sort_3(list1):\n    '''\n    Write a function that sorts a list in ascending order according to the frequency of the elements, returned as a sorted list.\n    '''\n    list1.sort(key=freq_count, reverse=True)\n    return list1\ndef max_3(list1):\n    '''\n    Write a function that sorts a list in ascending order according to the frequency of the elements, returned as a sorted list.\n    '''\n    list1.sort(reverse=True)\n    return list1\ndef max_2(list1):\n    '''\n    Write a function that sorts a list in descending order according to the frequency of the elements, returned as a sorted list.\n    '''\n    list1.sort(key=freq_count, reverse=True)\n    return list1\ndef max_1(list1):\n    '''\n    Write a function that sorts a list in descending order according to the frequency of the elements, returned as a sorted list.\n    '''\n    list1.sort(reverse=True)\n    return list1\ndef remove_numbers(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    return list1\ndef remove_numbers_2(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    return list1\ndef remove_numbers_3(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_4(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_5(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_6(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_7(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_8(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_9(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_10(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_11(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_12(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_13(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_14(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_15(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_16(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_17(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_18(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop(3)\n    list1.pop(3)\n    list1.pop(3)\n    return list1\ndef remove_numbers_19(list1):\n    '''\n    Write a function that removes the last three elements of a list, and returns the same list.\n    '''\n    list1[0:3] = []\n    list1.pop"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    mydict = collections.Counter(list1)\n    return mydict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1 = [int(i) for i in list1]\n    if(type(list1) is not list):\n        raise TypeError\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # your code here\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1=sorted(list1,reverse=True)\n    freq={}\n    for i in range(len(list1)):\n        if list1[i] in freq:\n            freq[list1[i]]+=1\n        else:\n            freq[list1[i]]=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq=collections.Counter(list1)\n    freq_dict={}\n    for k,v in freq.items():\n        freq_dict[k] = v\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    mydict = {}\n    for elem in list1:\n        if elem not in mydict:\n            mydict[elem] = 1\n        else:\n            mydict[elem] += 1\n    return mydict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return None\n    elif N == 0:\n        return -1\n    elif N in [0, 1, 2]:\n        return N\n    elif N % 2 == 0:\n        return closest_num(N//2)\n    elif N % 2 == 1:\n        return closest_num(3*N+1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    elif N == 3:\n        return 3\n    elif N == 4:\n        return 4\n    elif N == 5:\n        return 5\n    else:\n        return closest_num(N - 1) + closest_num(N - 2) + closest_num(N - 3) + closest_num(N - 4) + closest_num(N - 5)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N < 0:\n        return 0\n    \n    elif N == 1:\n        return 1\n    \n    else:\n        smallest = -1\n        for n in range(N):\n            if n < 0:\n                if smallest < n:\n                    smallest = n\n            elif n == 0:\n                if smallest > n:\n                    smallest = n\n            else:\n                if smallest > n and smallest < n:\n                    smallest = n\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    a = N\n    b = N\n    while True:\n        if a % 2 == 0:\n            b = b / 2\n            a = a // 2\n        else:\n            b = b / 2\n            a = a * 2\n        if a == b:\n            return a\n        else:\n            return min(a, b)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n    if N == 10:\n        return N\n    if N == 20:\n        return 20\n    if N == 25:\n        return 25\n    if N == 26:\n        return 26\n    if N == 27:\n        return 27\n    if N == 28:\n        return 28\n    if N == 29:\n        return 29\n    if N == 30:\n        return 30\n    if N == 31:\n        return 31\n    if N == 32:\n        return 32\n    if N == 33:\n        return 33\n    if N == 34:\n        return 34\n    if N == 35:\n        return 35\n    if N == 36:\n        return 36\n    if N == 37:\n        return 37\n    if N == 38:\n        return 38\n    if N == 39:\n        return 39\n    if N == 40:\n        return 40\n    if N == 41:\n        return 41\n    if N == 42:\n        return 42\n    if N == 43:\n        return 43\n    if N == 44:\n        return 44\n    if N == 45:\n        return 45\n    if N == 46:\n        return 46\n    if N == 47:\n        return 47\n    if N == 48:\n        return 48\n    if N == 49:\n        return 49\n    if N == 50:\n        return 50\n    if N == 51:\n        return 51\n    if N == 52:\n        return 52\n    if N == 53:\n        return 53\n    if N == 54:\n        return 54\n    if N == 55:\n        return 55\n    if N == 56:\n        return 56\n    if N == 57:\n        return 57\n    if N == 58:\n        return 58\n    if N == 59:\n        return 59\n    if N == 60:\n        return 60\n    if N == 61:\n        return 61\n    if N == 62:\n        return 62\n    if N == 63:\n        return 63\n    if N == 64:\n        return 64\n    if N == 65:\n        return 65\n    if N == 66:\n        return 66\n    if N == 67:\n        return 67\n    if N == 68:\n        return 68\n    if N == 69:\n        return 69\n    if N == 70:\n        return 70\n    if N == 71:\n        return 71\n    if N == 72:\n        return 72\n    if N == 73:\n        return 73\n    if N == 74:\n        return 74\n    if N == 75:\n        return 75\n    if N == 76:\n        return 76\n    if N == 77:\n        return 77\n    if N == 78:\n        return 78\n    if N == 79:\n        return 79\n    if N == 80:\n        return 80\n    if N == 81:\n        return 81\n    if N == 82:\n        return 82\n    if N == 83:\n        return 83\n    if N == 84:\n        return 84\n    if N == 85:\n        return 85\n    if N == 86:\n        return 86\n    if N == 87:\n        return 87\n    if N == 88:\n        return 88\n    if N == 89:\n        return 89\n    if N == 90:\n        return 90\n    if N == 91:\n        return 91\n    if N == 92:\n        return 92\n    if N == 93:\n        return 93\n    if N == 94:\n        return 94\n    if N == 95:\n        return 95\n    if N == 96:\n        return 96\n    if N == 97:\n        return 97\n    if N == 98:\n        return 98\n    if N == 99:\n        return 99\n    if N == 100:\n        return 100\n    if N == 101:\n        return 101\n    if N == 102:\n        return 102\n    if N == 103:\n        return 103\n    if N == 104:\n        return 104\n    if N == 105:\n        return 105\n    if N == 106:\n        return 106\n    if N == 107:\n        return 107\n    if N == 108:\n        return 108\n    if N == 109:\n        return 109\n    if N == 110:\n        return 110\n    if N == 111:\n        return 111\n    if N == 112:\n        return 112\n    if N == 113:\n        return 113\n    if N == 114:\n        return 114\n    if N == 115:\n        return 115\n    if N == 116:\n        return 116\n    if N == 117:\n        return 117\n    if N == 118:\n        return 118\n    if N == 119:\n        return 119\n    if N == 120:\n        return 120\n    if N == 121:\n        return 121\n    if N == 122:\n        return 122\n    if N == 123:\n        return 123\n    if N == 124:\n        return 124\n    if N == 125:\n        return 125\n    if N == 126:\n        return 126\n    if N == 127:\n        return 127\n    if N == 128:\n        return 128\n    if N == 129:\n        return 129\n    if N == 130:\n        return 130\n    if N == 131:\n        return 131\n    if N == 132:\n        return 132\n    if N == 133:\n        return 133\n    if N == 134:\n        return 134\n    if N == 135:\n        return 135\n    if N == 136:\n        return 136\n    if N == 137:\n        return 137\n    if N == 138:\n        return 138\n    if N == 139:\n        return 139\n    if N == 140:\n        return 140\n    if N == 141:\n        return 141\n    if N == 142:\n        return 142\n    if N == 143:\n        return 143\n    if N == 144:\n        return 144\n    if N == 145:\n        return 145\n    if N == 146:\n        return 146\n    if N == 147:\n        return 147\n    if N == 148:\n        return 148\n    if N == 149:\n        return 149\n    if N == 150:\n        return 150\n    if N == 151:\n        return 151\n    if N == 152:\n        return 152\n    if N == 153:\n        return 153\n    if N == 154:\n        return 154\n    if N == 155:\n        return 155\n    if N == 156:\n        return 156\n    if N == 157:\n        return 157\n    if N == 158:\n        return 158\n    if N == 159:\n        return 159\n    if N == 160:\n        return 160\n    if N == 161:\n        return 161\n    if N == 162:\n        return 162\n    if N == 163:\n        return 163\n    if N == 164:\n        return 164\n    if N == 165:\n        return 165\n    if N == 166:\n        return 166\n    if N == 167:\n        return 167\n    if N == 168:\n        return 168\n    if N == 169:\n        return 169\n    if N == 170:\n        return 170\n    if N == 171:\n        return 171\n    if N == 172:\n        return 172\n    if N == 173:\n        return 173\n    if N == 174:\n        return 174\n    if N == 175:\n        return 175\n    if N == 176:\n        return 176\n    if N == 177:\n        return 177\n    if N == 178:\n        return 178\n    if N == 179:\n        return 179\n    if N == 180:\n        return 180\n    if N == 181:\n        return 181\n    if N == 182:\n        return 182\n    if N == 183:\n        return 183\n    if N == 184:\n        return 184\n    if N == 185:\n        return 185\n    if N == 186:\n        return 186\n    if N == 187:\n        return 187\n    if N == 188:\n        return 188\n    if N == 189:\n        return 189\n    if N == 190:\n        return 190\n    if N == 191:\n        return 191\n    if N == 192:\n        return 192\n    if N == 193:\n        return 193\n    if N == 194:\n        return 194\n    if N == 195:\n        return 195\n    if N == 196:\n        return 196\n    if N == 197:\n        return 197\n    if N == 198:\n        return 198\n    if N == 199:\n        return 199\n    if N == 200:\n        return 200\n    if N == 201:\n        return 201\n    if N == 202:\n        return 202\n    if N == 203:\n        return 203\n    if N == 204:\n        return 204\n    if N == 20"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = [n for n in range(N+1)]\n    i = 0\n    while len(l) > i:\n        if l[i] == l[i+1]:\n            i = i+1\n        else:\n            if l[i] < l[i+1]:\n                l[i], l[i+1] = l[i+1], l[i]\n            else:\n                i += 1\n    return l[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = 9999999\n    for i in range(1, N + 1):\n        if smallest_num > i:\n            smallest_num = i\n    return smallest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    lst = [i for i in range(10)]\n    for i in lst:\n        if i > N:\n            lst.remove(i)\n    for i in lst:\n        if N - i == 1:\n            lst.remove(i)\n    lst.sort()\n    return lst[-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 1000\n    for i in range(0,N):\n        for j in range(i+1,N+1):\n            if abs(i-j) < closest:\n                closest = abs(i-j)\n                closest_i = i\n                closest_j = j\n    print('The closest number to n is: ', closest_i, '\\nThe closest number to n is: ', closest_j)\n    \n    \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = []\n    for i in range(1, N):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(i/2)\n    if len(l) == 1:\n        return l[0]\n    else:\n        l.sort()\n        return l[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1==[]:\n        return 0\n    else:\n        return len(list1[0])+len(list1[1])\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(len(word) for word in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # your code goes here\n    max = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max:\n            max = len(list1[i])\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(len(list1))\n    return len(list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    longest_word_list = []\n    for element in list1:\n        if len(element) > len(longest_word):\n            longest_word = element\n            longest_word_list = [element]\n        elif len(element) > len(longest_word):\n            longest_word = element\n            longest_word_list = [element]\n        elif len(element) == len(longest_word):\n            longest_word_list.append(element)\n    return longest_word_list\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # your code goes here\n    t = 0\n    for x in list1:\n        if len(x) > t:\n            t = len(x)\n    return t\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    s = 0\n    for i in list1:\n        s+=len(i)\n    return s\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l1 = len(list1)\n    l2 = []\n    i = 0\n    for i in range(l1):\n        l2.append(list1[i])\n    l = len(max(l2, key = len))\n    return l\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # my_list = [str1.lower()] # define a list of all the characters\n    # for char in my_list:\n    #     if sub_str in char:\n    #         sub_str = sub_str.lower()\n    # return sub_str in str1.lower()\n    sub_str = sub_str.lower()\n    char_list = []\n    for char in sub_str:\n        if char in str1.lower():\n            char_list.append(char)\n    return len(char_list)==0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # 1. You need to initialize a list of strings.\n    # 2. The sub_str is not a substring of any string in the list.\n    # 3. Find the index of the first occurrence of the sub_str.\n    # 4. If there are multiple, return the first index. Otherwise, return the position of the first occurrence.\n    # 5. Assume there is only one occurrence of the sub_str.\n    # 6. In order to find the position of the first occurrence, you need to find the index of the first occurrence of the substring.\n    # 7. If there are multiple, return the first index. Otherwise, return the position of the first occurrence.\n    # 8. If there are multiple, return the position of the first occurrence. Otherwise, return the index of the first occurrence.\n    # 9. If there are multiple, return the position of the first occurrence. Otherwise, return the index of the first occurrence.\n    \n    # 1. Initialize a list of strings.\n    # 2. The sub_str is not a substring of any string in the list.\n    # 3. Find the index of the first occurrence of the sub_str.\n    # 4. If there are multiple, return the first index. Otherwise, return the position of the first occurrence.\n    # 5. Assume there is only one occurrence of the sub_str.\n    # 6. In order to find the position of the first occurrence, you need to find the index of the first occurrence of the substring.\n    # 7. If there are multiple, return the first index. Otherwise, return the position of the first occurrence.\n    # 8. If there are multiple, return the position of the first occurrence. Otherwise, return the index of the first occurrence.\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # convert all the string values to lower case\n    sub_str = sub_str.lower()\n    # create empty dictionary to store values\n    sub_dict = {}\n    # iterate through each string value\n    for val in sub_str:\n        # if the value is in the dictionary, add it to the dictionary\n        if val in sub_dict.keys():\n            sub_dict[val] += 1\n        # if the value is not in the dictionary, add it to the dictionary\n        else:\n            sub_dict[val] = 1\n    # return the dictionary value\n    return len(sub_dict) == len(sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    n = len(sub_str)\n    start_pos = 0\n    matched = False\n    result = []\n    for i in range(len(str1)):\n        if(str1[i:i+n] == sub_str):\n            matched = True\n            result.append(i)\n            start_pos = i+n\n        elif(str1[i:i+n] == sub_str):\n            matched = False\n            result.append(i)\n        if(matched == False):\n            result.append(i)\n    if(len(result) == 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_lst = list(sub_str)\n    str_list = list(str1)\n    res = []\n    for i in range(len(str_list)):\n        for j in range(len(str_list) - i):\n            if str_list[j:j+i+1] == sub_str_lst:\n                res.append(str_list[j:j+i+1])\n    if len(res) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return [i for i, x in enumerate(str1) if x == sub_str][0]\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l=[]\n    for i in str1:\n        if(i in sub_str):\n            l.append(i)\n    if(len(l)==len(sub_str)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    index = 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # 1. Define a function called substring which returns True if a string is present in a list of string values.\n    def substring(str):\n        return len(str)>= len(sub_str)\n    # 2. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    sub_string = lambda s: len(s)>= len(sub_str)\n    # 3. Write a function called test_string which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    test_string = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 4. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: all(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 5. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 6. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 7. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 8. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 9. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: all(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 10. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 11. Write a function called test_string which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    test_string = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 12. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: all(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 13. Write a function called test_string which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    test_string = lambda s: all(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 14. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 15. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: all(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 16. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 17. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 18. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: all(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 19. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 20. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 21. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: all(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 22. Write a function called test_string which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    test_string = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 23. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: all(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 24. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 25. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s: all(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 26. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 27. Write a function called find_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    find_substring = lambda s: any(substring(s) for sub_str in sub_str for sub_str in sub_str)\n    # 28. Write a function called check_substring which takes a string as an argument and returns True if the string is a substring of a string in a list of string values.\n    check_substring = lambda s"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str == s for s in str1)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #check if the input is positive integer\n    if n > 0:\n        #check if the input is divisible by 10\n        if n % 10 == 0:\n            # if the input is divisible by 10 then it should be undulating.\n            return True\n        else:\n            # if not divisible by 10 then it should not be undulating.\n            return False\n    else:\n        # if the input is less than 0 then it should not be undulating.\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # write your code here\n    def f(n):\n        if n==0:\n            return True\n        if n%2==0:\n            return f(n//2)\n        else:\n            return f(n-1)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 10 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 4: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0: return True\n    if n<0: return False\n    if n%2==0: return is_undulating(n//2)\n    else: return is_undulating(3*n+1)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # case 1: n = 5, n = 7 -> True\n    if n == 5 or n == 7:\n        return True\n    # case 2: n = 6 -> True\n    elif n == 6:\n        return False\n    # case 3: n = 8 -> True\n    elif n == 8:\n        return False\n    # case 4: n = 9 -> True\n    elif n == 9:\n        return False\n    # case 5: n = 10 -> True\n    elif n == 10:\n        return False\n    # case 6: n = 11 -> True\n    elif n == 11:\n        return False\n    # case 7: n = 12 -> True\n    elif n == 12:\n        return False\n    # case 8: n = 13 -> True\n    elif n == 13:\n        return False\n    # case 9: n = 14 -> True\n    elif n == 14:\n        return False\n    # case 10: n = 15 -> True\n    elif n == 15:\n        return False\n    # case 11: n = 16 -> True\n    elif n == 16:\n        return False\n    # case 12: n = 17 -> True\n    elif n == 17:\n        return False\n    # case 13: n = 18 -> True\n    elif n == 18:\n        return False\n    # case 14: n = 19 -> True\n    elif n == 19:\n        return False\n    # case 15: n = 20 -> True\n    elif n == 20:\n        return False\n    # case 16: n = 21 -> True\n    elif n == 21:\n        return False\n    # case 17: n = 22 -> True\n    elif n == 22:\n        return False\n    # case 18: n = 23 -> True\n    elif n == 23:\n        return False\n    # case 19: n = 24 -> True\n    elif n == 24:\n        return False\n    # case 20: n = 25 -> True\n    elif n == 25:\n        return False\n    # case 21: n = 26 -> True\n    elif n == 26:\n        return False\n    # case 22: n = 27 -> True\n    elif n == 27:\n        return False\n    # case 23: n = 28 -> True\n    elif n == 28:\n        return False\n    # case 24: n = 29 -> True\n    elif n == 29:\n        return False\n    # case 25: n = 30 -> True\n    elif n == 30:\n        return False\n    # case 26: n = 31 -> True\n    elif n == 31:\n        return False\n    # case 27: n = 32 -> True\n    elif n == 32:\n        return False\n    # case 28: n = 33 -> True\n    elif n == 33:\n        return False\n    # case 29: n = 34 -> True\n    elif n == 34:\n        return False\n    # case 30: n = 35 -> True\n    elif n == 35:\n        return False\n    # case 31: n = 36 -> True\n    elif n == 36:\n        return False\n    # case 32: n = 37 -> True\n    elif n == 37:\n        return False\n    # case 33: n = 38 -> True\n    elif n == 38:\n        return False\n    # case 34: n = 39 -> True\n    elif n == 39:\n        return False\n    # case 35: n = 40 -> True\n    elif n == 40:\n        return False\n    # case 36: n = 41 -> True\n    elif n == 41:\n        return False\n    # case 37: n = 42 -> True\n    elif n == 42:\n        return False\n    # case 38: n = 43 -> True\n    elif n == 43:\n        return False\n    # case 39: n = 44 -> True\n    elif n == 44:\n        return False\n    # case 40: n = 45 -> True\n    elif n == 45:\n        return False\n    # case 41: n = 46 -> True\n    elif n == 46:\n        return False\n    # case 42: n = 47 -> True\n    elif n == 47:\n        return False\n    # case 43: n = 48 -> True\n    elif n == 48:\n        return False\n    # case 44: n = 49 -> True\n    elif n == 49:\n        return False\n    # case 45: n = 50 -> True\n    elif n == 50:\n        return False\n    # case 46: n = 51 -> True\n    elif n == 51:\n        return False\n    # case 47: n = 52 -> True\n    elif n == 52:\n        return False\n    # case 48: n = 53 -> True\n    elif n == 53:\n        return False\n    # case 49: n = 54 -> True\n    elif n == 54:\n        return False\n    # case 50: n = 55 -> True\n    elif n == 55:\n        return False\n    # case 51: n = 56 -> True\n    elif n == 56:\n        return False\n    # case 52: n = 57 -> True\n    elif n == 57:\n        return False\n    # case 53: n = 58 -> True\n    elif n == 58:\n        return False\n    # case 54: n = 59 -> True\n    elif n == 59:\n        return False\n    # case 55: n = 60 -> True\n    elif n == 60:\n        return False\n    # case 56: n = 61 -> True\n    elif n == 61:\n        return False\n    # case 57: n = 62 -> True\n    elif n == 62:\n        return False\n    # case 58: n = 63 -> True\n    elif n == 63:\n        return False\n    # case 59: n = 64 -> True\n    elif n == 64:\n        return False\n    # case 60: n = 65 -> True\n    elif n == 65:\n        return False\n    # case 61: n = 66 -> True\n    elif n == 66:\n        return False\n    # case 62: n = 67 -> True\n    elif n == 67:\n        return False\n    # case 63: n = 68 -> True\n    elif n == 68:\n        return False\n    # case 64: n = 69 -> True\n    elif n == 69:\n        return False\n    # case 65: n = 70 -> True\n    elif n == 70:\n        return False\n    # case 66: n = 71 -> True\n    elif n == 71:\n        return False\n    # case 67: n = 72 -> True\n    elif n == 72:\n        return False\n    # case 68: n = 73 -> True\n    elif n == 73:\n        return False\n    # case 69: n = 74 -> True\n    elif n == 74:\n        return False\n    # case 70: n = 75 -> True\n    elif n == 75:\n        return False\n    # case 71: n = 76 -> True\n    elif n == 76:\n        return False\n    # case 72: n = 77 -> True\n    elif n == 77:\n        return False\n    # case 73: n = 78 -> True\n    elif n == 78:\n        return False\n    # case 74: n = 79 -> True\n    elif n == 79:\n        return False\n    # case 75: n = 80 -> True\n    elif n == 80:\n        return False\n    # case 76: n = 81 -> True\n    elif n == 81:\n        return False\n    # case 77: n = 82 -> True\n    elif n == 82:\n        return False\n    # case 78: n = 83 -> True\n    elif n == 83:\n        return False\n    # case 79: n = 84 -> True\n    elif n == 84:\n        return False\n    # case 80: n = 85 -> True\n    elif n == 85:\n        return False\n    # case 81: n = 86 -> True\n    elif n == 86:\n        return False\n    # case 82: n = 87 -> True\n    elif n == 87:\n        return False\n    # case 83: n = 88 -> True\n    elif n == 88:\n        return False\n    # case 84: n = 89 -> True\n    elif n == 89:\n        return False\n    # case 85: n = 90 -> True\n    elif n == 90:\n        return False\n    # case 86: n = 91 -> True\n    elif n == 91:\n        return False\n    # case 87: n = 92 -> True\n    elif n == 92:\n        return False\n    # cas"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n<=0:\n        return False\n    \n    if n == 1:\n        return True\n    \n    if n%3==0:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True\n    elif n % 2 == 0: \n        return is_undulating(n/2)\n    else: \n        return is_undulating(3 * n)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return a ** -1\n    else:\n        return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        print(a)\n    else:\n        print(a,'x',b,'=',a**b)\n        power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b == 0):\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b<0:\n        return None\n    elif b==1:\n        return a\n    else:\n        return a**b\n    \ndef function_ex(a, b):\n    '''\n    Write a function that takes two arguments a and b. It should return\n    the addition of a and b, or a/b, or a+b when a and b are both 0\n    (they will both be equal to 0).\n    '''\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    elif a+b==0:\n        return None\n    else:\n        return a+b\n    \ndef add_and_subtract(a, b):\n    '''\n    Write a function that returns the addition of a and b,\n    or a-b when b is equal to 0.\n    '''\n    if b==0:\n        return a\n    elif b==1:\n        return None\n    elif a+b==0:\n        return None\n    else:\n        return a-b\n    \ndef multiply_numbers(a, b):\n    '''\n    Write a function that takes two arguments, a and b, and returns\n    a multiplication of a and b.\n    '''\n    if b==0:\n        return a\n    elif b==1:\n        return None\n    elif a*b==0:\n        return None\n    else:\n        return a*b\n        \ndef divide_number(a, b):\n    '''\n    Write a function that takes two arguments, a and b, and returns\n    a division of a and b.\n    '''\n    if b==0:\n        return None\n    elif b==1:\n        return None\n    elif a/b==0:\n        return None\n    else:\n        return a/b\n        \ndef add_double_numbers(a, b):\n    '''\n    Write a function that takes two arguments, a and b, and returns\n    a division of a and b, but where the result is a double\n    the first number is a double, and the second number is a\n    double.\n    '''\n    if b==0:\n        return None\n    elif b==1:\n        return None\n    elif a/b==1:\n        return None\n    else:\n        return a/b\n    \ndef multiply_double_numbers(a, b):\n    '''\n    Write a function that takes two arguments, a and b, and returns\n    a division of a and b, but where the result is a double\n    the first number is a double, and the second number is a\n    double.\n    '''\n    if b==0:\n        return None\n    elif b==1:\n        return None\n    elif a/b==1:\n        return None\n    else:\n        return a*b\n        \ndef square_numbers(a):\n    '''\n    Write a function that takes a list of numbers and returns\n    a new list with squares of those numbers.\n    '''\n    a_squared=[]\n    for item in a:\n        a_squared.append(item**2)\n    return a_squared\n    \ndef square_numbers_2(a):\n    '''\n    Write a function that takes a list of numbers and returns\n    a new list with squares of those numbers, but squaring\n    the numbers as well.\n    '''\n    a_squared=[]\n    for item in a:\n        a_squared.append(item**2)\n    return a_squared\n    \ndef square_numbers_3(a):\n    '''\n    Write a function that takes a list of numbers and returns\n    a new list with squares of those numbers.\n    '''\n    a_squared=[]\n    for item in a:\n        a_squared.append(item**2)\n    return a_squared\n    \ndef square_numbers_4(a):\n    '''\n    Write a function that takes a list of numbers and returns\n    a new list with squares of those numbers, but squaring\n    the numbers as well.\n    '''\n    a_squared=[]\n    for item in a:\n        a_squared.append(item**2)\n    return a_squared\n    \ndef square_numbers_5(a):\n    '''\n    Write a function that takes a list of numbers and returns\n    a new list with squares of those numbers.\n    '''\n    a_squared=[]\n    for item in a:\n        a_squared.append(item**2)\n    return a_squared\n    \ndef main():\n    print('Simple Addition and Subtraction Program')\n    print('What is the result of the following calculation?')\n    print('1. Addition')\n    print('2. Subtraction')\n    print('3. Multiply')\n    print('4. Division')\n    print('5. Square Numbers')\n    print('6. Square Numbers 2')\n    print('7. Square Numbers 3')\n    print('8. Square Numbers 4')\n    print('9. Square Numbers 5')\n    print('10. Square Numbers 6')\n    \n    choice=input('Please enter a choice: ')\n    if choice=='1':\n        a=int(input('Enter the first number: '))\n        b=int(input('Enter the second number: '))\n        print('The result of',a,'+',b,'is',add_and_subtract(a,b))\n    elif choice=='2':\n        a=int(input('Enter the first number: '))\n        b=int(input('Enter the second number: '))\n        print('The result of',a,'-',b,'is',add_double_numbers(a,b))\n    elif choice=='3':\n        a=int(input('Enter the first number: '))\n        b=int(input('Enter the second number: '))\n        print('The result of',a,'*',b,'is',multiply_numbers(a,b))\n    elif choice=='4':\n        a=int(input('Enter the first number: '))\n        b=int(input('Enter the second number: '))\n        print('The result of',a,'/',b,'is',divide_number(a,b))\n    elif choice=='5':\n        a=int(input('Enter the first number: '))\n        b=int(input('Enter the second number: '))\n        print('The result of',a,'**',b,'is',square_numbers(a))\n    elif choice=='6':\n        a=int(input('Enter the first number: '))\n        print('The result of',a,'**2 is',square_numbers_2(a))\n    elif choice=='7':\n        a=int(input('Enter the first number: '))\n        print('The result of',a,'**3 is',square_numbers_3(a))\n    elif choice=='8':\n        a=int(input('Enter the first number: '))\n        print('The result of',a,'**4 is',square_numbers_4(a))\n    elif choice=='9':\n        a=int(input('Enter the first number: '))\n        print('The result of',a,'**5 is',square_numbers_5(a))\n    elif choice=='10':\n        a=int(input('Enter the first number: '))\n        print('The result of',a,'**6 is',square_numbers_6(a))\n    else:\n        print('Invalid input')\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    l_dict = {}\n    for (key, value) in test_list:\n        if key in l_dict:\n            if value < l_dict[key]:\n                l_dict[key] = value\n        else:\n            l_dict[key] = value\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][0]\n    elif len(test_list) == 2:\n        return test_list[0][1]\n    else:\n        return index_minimum(test_list[1:])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # remove the tuple from the list and return it\n    return test_list[0][1]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the greatest second value.\n    '''\n    # remove the tuple from the list and return it\n    return test_list[0][2]\n    \ndef index_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all of the values in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(test_list)\n    \ndef index_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of all of the values in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(test_list) / len(test_list)\n    \ndef index_length(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return len(test_list)\n    \ndef index_square(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all of the values squared in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return test_list[0] ** 2\n    \ndef index_sum_squares(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all of the values squared in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(x ** 2 for x in test_list)\n    \ndef index_average_squares(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of all of the values squared in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(x ** 2 for x in test_list) / len(test_list)\n    \ndef index_length_squares(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the tuple squared.\n    '''\n    # remove the tuple from the list and return it\n    return sum(x ** 2 for x in test_list) ** 0.5\n    \ndef index_product(test_list):\n    '''\n    Given a list of tuples, write a function that returns the product of all of the values in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return reduce(itemgetter(0), test_list)\n    \ndef index_greatest_and_least(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the greatest and the least value in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return max(test_list, key = itemgetter(1))\n    \ndef index_sum_greatest_and_least(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the sum of all of the values with the greatest second value in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return max(test_list, key = itemgetter(1))\n    \ndef index_sum_second_greatest_and_least(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all of the values with the second greatest second value in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return max(test_list, key = itemgetter(1))\n    \ndef index_length_greatest_and_least(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the tuple with the greatest second value in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return max(test_list, key = itemgetter(1))\n    \ndef index_average_greatest_and_least(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of all of the values with the greatest second value in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(test_list, 0) / len(test_list)\n    \ndef index_average_second_greatest_and_least(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of all of the values with the second greatest second value in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(x[1] for x in test_list) / len(test_list)\n    \ndef index_length_greatest_and_second_greatest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the tuple with the second greatest second value in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return max(test_list, key = itemgetter(1))\n    \ndef index_length_second_greatest_and_second_greatest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the tuple with the second greatest second value in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return max(test_list, key = itemgetter(1))\n    \ndef index_sum_second_greatest_and_second_greatest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all of the values with the second greatest second value in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(x[1] for x in test_list)\n    \ndef index_sum_second_greatest_and_second_greatest_even(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all of the values with the second greatest second value in the tuple with even values in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(x[1] for x in test_list if x[1] % 2 == 0)\n    \ndef index_length_second_greatest_and_second_greatest_even(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the tuple with the second greatest second value in the tuple with even values in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return max(test_list, key = itemgetter(1))\n    \ndef index_average_second_greatest_and_second_greatest_even(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of all of the values with the second greatest second value in the tuple with even values in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(x[1] for x in test_list if x[1] % 2 == 0) / len(test_list)\n    \ndef index_average_second_greatest_and_second_greatest_odd(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of all of the values with the second greatest second value in the tuple with odd values in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return sum(x[1] for x in test_list if x[1] % 2 == 1) / len(test_list)\n    \ndef index_length_second_greatest_and_second_greatest_odd(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the tuple with the second greatest second value in the tuple with odd values in the tuple.\n    '''\n    # remove the tuple from the list and return it\n    return max(test_list, key = itemge"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0][0]\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < smallest:\n            smallest = test_list[i][0]\n    return smallest\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # perform loop, get the first element\n    smallest_value = test_list[0]\n    # loop through the elements\n    for item in test_list:\n        # if the first value is less than the second value, then add the second value to the first value\n        if smallest_value[1] < item[1]:\n            smallest_value = item\n    # return the value of the tuple with the smallest second value\n    return smallest_value\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(2))\n    return test_list[0][2]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def value(p):\n        if p[1] < p[0][1]:\n            return p[0]\n        else:\n            return p[1]\n    return sorted(test_list, key=value)[0]\ndef create_string_of_numbers(x):\n    if isinstance(x, (str, int)):\n        return str(x)\n    elif isinstance(x, list):\n        return create_string_of_numbers(x[0]) + str(x[1])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    result = min(test_list, key = itemgetter(1))\n    return result[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0]\n    for tuple in test_list:\n        if tuple[1] < smallest[1]:\n            smallest = tuple\n    return smallest\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Create a list of tuples of (first, second) values\n    numbers = [(value[0], value[1]) for value in test_list]\n    # Sort the list\n    numbers = sorted(numbers, key=itemgetter(1))\n    # Get the first value\n    return numbers[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return -1\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    len_count = 0\n    for i in range(0, len(lst)):\n        len_count = len_count + 1\n    return len_count\n    \n    \n    \ndef Slices(a, B):\n    '''\n    Write a python function to get the number of slices in a list.\n    '''\n    return len(a) - B\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst)\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i][1] < lst[j][1]:\n                min = lst[j][1]\n                index = j\n    lst[index][1] = lst[i][1]\n    lst[i][1] = min\n    return lst\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][j] < lst[i][j+1]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return len(lst)\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    dic = {}\n    for i in lst:\n        dic[i] = lst.count(i)\n        \n    lst = sorted(dic.items(), key=lambda item: item[1])\n    res = lst[0][0]\n    return res\n    \nif __name__ == '__main__':\n    lst = [7, 3, 2, 4, 5, 6, 1, 8, 9, 10, 11, 12, 13]\n    print(lst)\n    print(Find_Min_Length(lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Your code here\n    return len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    sorted_lst = sorted(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for i in lst:\n        min_length = min(min_length,len(i))\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0]\n    for lst_item in lst:\n        if lst_item < min_length:\n            min_length = lst_item\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize the count variable as zero\n    count = 0\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    else:\n        return 1 + divisor(n // 2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count = count + 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    if n == 0 or n == 1:\n        return 1\n    for i in range(1, n):\n        if n % i == 0:\n            div += 1\n    return div\n    \ndef isprime(n):\n    '''\n    Write a python function to check if a number is a prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return n // 2 + divisor(n // 2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor.append(i)\n    return len(divisor)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    lst = []\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for x in range(n):\n            if x == 0:\n                lst.append(1)\n            elif x == 1:\n                lst.append(n)\n            else:\n                lst.append(x+1)\n        return sum(lst)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 0:\n        raise ValueError(\"Please enter an integer greater than 0\")\n    else:\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    l=[]\n    for x in range(1,n):\n        if n%x==0:\n            l.append(x)\n    return len(l)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the values\n    frequency_dict = {}\n    # Iterate through the list\n    for i in range(0, len(list1)):\n        # Make a string of the list, and store the elements\n        string = \"\"\n        for element in list1[i]:\n            string += str(element) + \" \"\n        # Replace spaces with underscores\n        string = string.replace(\" \", \"_\")\n        # Add to dictionary\n        frequency_dict[string] = list1[i].count(list1[i][0])\n        # Make sure it is unique\n        if frequency_dict.get(string) == None:\n            frequency_dict[string] = 1\n        else:\n            frequency_dict[string] += 1\n    # Return dictionary\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    # iterate through list\n    for sublist in list1:\n        # iterate through each list item\n        for item in sublist:\n            # add each item to dictionary\n            if item in dictionary:\n                dictionary[item] += 1\n            else:\n                dictionary[item] = 1\n    # return dictionary\n    return dictionary\n    \ndef count_sort(list1):\n    '''\n    Write a function to sort a list of list of integers.\n    '''\n    # create a list to sort\n    list2 = []\n    # iterate through list\n    for sublist in list1:\n        # append each list item to list2\n        list2 += sublist\n    # create sorted list\n    list3 = []\n    # iterate through list2\n    for sublist in list2:\n        # append each list item to list3\n        list3 += sorted(sublist)\n    # return sorted list\n    return list3\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict_frequency={}\n    for l in list1:\n        for i in range(0,len(l),1):\n            if l[i] in dict_frequency.keys():\n                dict_frequency[l[i]]+=1\n            else:\n                dict_frequency[l[i]]=1\n    return dict_frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    #the four main functions are implemented, so you can use them as you would expect\n    #add each element to a key, and when you run the function, it adds to dictionary\n    #if the key does not already exist, then adds it to the dictionary, and if it already exists, it appends it\n    #to the dictionary and then returns the dictionary\n    #or you can use the list, you can also use it as a key to store an element, you can return the dictionary\n    #and you return the dictionary\n    def add_to_dictionary(list1):\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                #print(i)\n                #print(j)\n                if list1[i][j] == list1[i][j]:\n                    pass\n                else:\n                    #print(list1[i][j])\n                    dictionary[list1[i][j]] = dictionary.get(list1[i][j], 0) + 1\n        return dictionary\n    #now that you have a dictionary, you can create it using the function add_to_dictionary\n    def add_to_dictionary_list(list1):\n        #create a list and iterate through\n        list1.sort()\n        for i in range(len(list1)):\n            for j in range(i, len(list1)):\n                if list1[i][j] == list1[i][j]:\n                    pass\n                else:\n                    dictionary[list1[i][j]] = dictionary.get(list1[i][j], 0) + 1\n        #then sort the list\n        list1.sort()\n        return dictionary\n    #now that you have the same function, you can create a function to add the elements to the dictionary\n    def add_to_dictionary_list_simple(list1):\n        #create a list and iterate through\n        for i in range(len(list1)):\n            for j in range(i, len(list1)):\n                #print(i)\n                #print(j)\n                if list1[i][j] == list1[i][j]:\n                    pass\n                else:\n                    dictionary[list1[i][j]] = dictionary.get(list1[i][j], 0) + 1\n        #then sort the list\n        list1.sort()\n        return dictionary\n    #creating the dictionary\n    def add_to_dictionary_list_simple_array(list1):\n        #create a list and iterate through\n        list1.sort()\n        for i in range(len(list1)):\n            for j in range(i, len(list1)):\n                #print(i)\n                #print(j)\n                if list1[i][j] == list1[i][j]:\n                    pass\n                else:\n                    dictionary[list1[i][j]] = dictionary.get(list1[i][j], 0) + 1\n        #then sort the list\n        list1.sort()\n        return dictionary\n    #returns the dictionary in sorted order\n    def sorted_dictionary(dictionary):\n        #iterate through the dictionary\n        for i in dictionary:\n            #if the key is not already present, then append it to the list\n            if not dictionary[i]:\n                #print(i)\n                #print(dictionary[i])\n                dictionary[i].append(list(i))\n        #then sort the dictionary\n        sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[0])\n        return sorted_dictionary\n    #returns the dictionary with the highest value\n    def highest_value_dictionary(dictionary):\n        #iterate through the dictionary\n        for i in dictionary:\n            #if the key is not already present, then append it to the list\n            if not dictionary[i]:\n                #print(i)\n                #print(dictionary[i])\n                dictionary[i].append(list(i))\n        #then sort the dictionary\n        sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[0])\n        return sorted_dictionary\n    #returns the dictionary with the highest value and a list of the values\n    def highest_value_dictionary_list(dictionary):\n        #iterate through the dictionary\n        for i in dictionary:\n            #if the key is not already present, then append it to the list\n            if not dictionary[i]:\n                #print(i)\n                #print(dictionary[i])\n                dictionary[i].append(list(i))\n        #then sort the dictionary\n        sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[0])\n        return sorted_dictionary\n    #returns a dictionary of the highest values and the elements of the dictionary\n    def highest_value_dictionary_list_array(dictionary):\n        #iterate through the dictionary\n        for i in dictionary:\n            #if the key is not already present, then append it to the list\n            if not dictionary[i]:\n                #print(i)\n                #print(dictionary[i])\n                dictionary[i].append(list(i))\n        #then sort the dictionary\n        sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[0])\n        return sorted_dictionary\n    #returns the dictionary with the highest values and an array of the values\n    def highest_value_dictionary_list_array_array(dictionary):\n        #iterate through the dictionary\n        for i in dictionary:\n            #if the key is not already present, then append it to the list\n            if not dictionary[i]:\n                #print(i)\n                #print(dictionary[i])\n                dictionary[i].append(list(i))\n        #then sort the dictionary\n        sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[0])\n        return sorted_dictionary\n    #returns the highest value dictionary and an array of the highest value dictionary\n    def highest_value_dictionary_list_array_array_array(dictionary):\n        #iterate through the dictionary\n        for i in dictionary:\n            #if the key is not already present, then append it to the list\n            if not dictionary[i]:\n                #print(i)\n                #print(dictionary[i])\n                dictionary[i].append(list(i))\n        #then sort the dictionary\n        sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[0])\n        return sorted_dictionary\n    #returns a dictionary of the highest values and an array of the highest values\n    def highest_value_dictionary_list_array_array_array_array(dictionary):\n        #iterate through the dictionary\n        for i in dictionary:\n            #if the key is not already present, then append it to the list\n            if not dictionary[i]:\n                #print(i)\n                #print(dictionary[i])\n                dictionary[i].append(list(i))\n        #then sort the dictionary\n        sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[0])\n        return sorted_dictionary\n    #returns the highest value dictionary and an array of the highest value dictionary\n    def highest_value_dictionary_list_array_array_array_array(dictionary):\n        #iterate through the dictionary\n        for i in dictionary:\n            #if the key is not already present, then append it to the list\n            if not dictionary[i]:\n                #print(i)\n                #print(dictionary[i])\n                dictionary[i].append(list(i))\n        #then sort the dictionary\n        sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[0])\n        return sorted_dictionary\n    #returns a dictionary of the highest values and an array of the highest values\n    def highest_value_dictionary_list_array_array_array_array(dictionary):\n        #iterate through the dictionary\n        for i in dictionary:\n            #if the key is not already present, then append it to the list\n            if not dictionary[i]:\n                #print(i)\n                #print(dictionary[i])\n                dictionary[i].append(list(i))\n        #then sort the dictionary\n        sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[0])\n        return sorted_dictionary\n    #returns the highest value dictionary and an array of th"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in frequency_dictionary:\n                frequency_dictionary[list1[i][j]]+=1\n            else:\n                frequency_dictionary[list1[i][j]]=1\n    return frequency_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    num_elements = len(list1[0])\n    frequency_dictionary = {}\n    for i in range(0, num_elements):\n        frequency_dictionary[list1[0][i]] = 0\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import defaultdict\n    # Convert list to dictionary\n    freq = defaultdict(lambda: 0)\n    for i in list1:\n        freq[i] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for x in list1:\n        for y in x:\n            if y not in dict1:\n                dict1[y] = 1\n            else:\n                dict1[y] += 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append([])\n        for j in range(len(i)):\n            list2[j].append(i[j])\n    dictionary = {}\n    for i in range(len(list2)):\n        if list2[i] not in dictionary:\n            dictionary[list2[i]] = 1\n        else:\n            dictionary[list2[i]] += 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dictionary = {}\n    for lst in list1:\n        for elem in lst:\n            if elem not in freq_dictionary:\n                freq_dictionary[elem] = 1\n            else:\n                freq_dictionary[elem] = freq_dictionary[elem] + 1\n    return freq_dictionary\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # the function returns the final list\n    # if the list is empty, then return an empty list\n    # if it's a single number, return it\n    # if it's a list, return the function\n    # if the list is a list, return it\n    # if it is a single number, return the result\n    # if it is a single number, return it\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # divide by the length of the list\n    # divide by the length of the list\n    # multiply by the length of the list\n    # multiply the numbers by the length of the list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = [sum(numbers[x:x+len(numbers)])/len(numbers) for x in range(len(numbers))]\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i]*i)\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not isinstance(numbers, list):\n        raise TypeError('Type of numbers must be list')\n    result = [0 for i in range(len(numbers))]\n    if len(numbers) == 0:\n        return result\n    for num in numbers:\n        result[len(numbers) - 1] = result[len(numbers) - 1] + num\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult = 1\n    for i in range(len(numbers)):\n        mult *= numbers[i]\n    return mult\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    result = []\n    for num in numbers:\n        result.append(num * length)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = [num * length for num, length in zip(numbers, len(numbers))]\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # divide = int(len(numbers) / int(numbers[0]))\n    # temp = []\n    # for i in numbers:\n    #     temp.append(i * int(len(numbers) / int(i)))\n    # return temp\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)\n    \nprint(multiply_num([1, 2, 3, 4, 5]))\nprint(multiply_num([2, 4, 6, 8, 10]))\nprint(multiply_num([3, 2, 5, 1, 4])"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert any positive integer to its binary representation\n    if n > 0:\n        return '{0:b}'.format(n)\n    else:\n        raise Exception('Invalid Input: Must be greater than 0')\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n_list = []\n    while n:\n        n_list.append(int(n%2))\n        n = n//2\n    result = ''.join(str(e) for e in n_list)\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n:\n        n, r = divmod(n, 2)\n        binary = str(r) + binary\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = \"\"\n    # if n is even, set decimal to 0\n    # if n is odd, set decimal to 1\n    # add leading 0s if it is present\n    # add trailing zeros if it is present\n    # return the string\n    if (n % 2) == 0:\n        n -= 1\n        # write two digits in binary\n        while n > 0:\n            # get next digit\n            digit = n % 2\n            # add digit to binary\n            binary_number += str(digit)\n            # subtract n from the number\n            n = n // 2\n        # convert the last digit to 0\n        binary_number += str(0)\n        # add leading zeros if it is present\n        # add trailing zeros if it is present\n        if len(binary_number) >= 4:\n            binary_number = binary_number[-4:]\n        return binary_number\n    else:\n        # if n is odd, set decimal to 1\n        n -= 1\n        # write two digits in binary\n        while n > 0:\n            # get next digit\n            digit = n % 2\n            # add digit to binary\n            binary_number += str(digit)\n            # subtract n from the number\n            n = n // 2\n        # convert the last digit to 0\n        binary_number += str(0)\n        # add leading zeros if it is present\n        # add trailing zeros if it is present\n        if len(binary_number) >= 4:\n            binary_number = binary_number[-4:]\n        return binary_number\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    num_list = list(str(n))\n    for i in range(len(num_list)):\n        result = result + num_list[i]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    string = ''\n    while n!= 0:\n        remainder = n % 2\n        string += str(remainder)\n        n //= 2\n    return string[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # TODO: Write your code here\n    if n == 0: \n        return '0'\n    else: \n        return '1' + decimal_to_binary(n // 2) + '0' * (n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # get the digits that the number of digits of the decimal number is\n    digits = len(str(n))\n    # initialize the result string\n    result = \"\"\n    # if the number of digits of the decimals is 1, then just return it.\n    if digits == 1: \n        return n\n    # else, iterate over each digit and the number of digits of the original decimal number. \n    while digits > 0:\n        # get the digit corresponding to the decimals\n        digit = n // pow(2, digits - 1)\n        # iterate over the digits\n        for i in range(digits - 1):\n            # if the digit is a power of 2, then add the digit to the result\n            if digit == pow(2, i):\n                result += str(digit)\n        # increment the digits by one\n        digits -= 1\n        # if the decimals is 0, we simply return the result\n        if digits == 0: \n            break\n        # if the digits is 1, we simply return the digit.\n        elif digits == 1: \n            result += str(digit)\n    # return the result\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if n <= 0: return ''\n    else: \n        return str(bin(n)[2:]) \n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome_dict = {}\n    for i in range(1, int(num**0.5)+1):\n        palindrome_dict[i] = 0\n    #print(palindrome_dict)\n    for i in range(2, int(num**0.5)+1):\n        palindrome_dict[i] = i\n    for i in range(int(num**0.5)+1, num+1):\n        palindrome_dict[i] = i\n    #print(palindrome_dict)\n    for key in palindrome_dict.keys():\n        if palindrome_dict[key]!= 0:\n            for j in range(1, key+1):\n                if key % j == 0:\n                    break\n            else:\n                #print('key = ', key)\n                palindrome_dict[key] = next_smallest_palindrome(key)\n                return palindrome_dict[key]\n    return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num<10:\n        return num\n    if num==10:\n        return 2\n    return int((num-10)**(1/2))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    start, stop = 0, len(str(num)) - 1 # indicies\n    smallest_palindrome = int(str(num)[stop]) # last digit of the number is the smallest\n    while start < stop:\n        mid = (start + stop) // 2\n        if num < smallest_palindrome * (mid + 1): # if number is less than palindrome * (mid + 1)\n            smallest_palindrome = mid + 1 # then add the next smallest palindrome\n        elif num > smallest_palindrome * mid: # if number is greater than palindrome * mid\n            smallest_palindrome = mid # then add the next smallest palindrome\n        else: # if number is equal to palindrome * mid, then the number is a palindrome\n            if mid < start: # if first digit is less than the start of the number\n                start = mid + 1 # then add the next smallest palindrome\n            else: # if first digit is greater than the start of the number\n                stop = mid - 1 # then add the next smallest palindrome\n    return smallest_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    next_smallest = num\n    while num % 10 == 0:\n        num = num / 10\n    while num % 11 == 0:\n        num = num / 11\n    while num % 2 == 0:\n        num = num / 2\n    while num % 3 == 0:\n        num = num / 3\n    while num % 4 == 0:\n        num = num / 4\n    while num % 5 == 0:\n        num = num / 5\n    while num % 6 == 0:\n        num = num / 6\n    while num % 7 == 0:\n        num = num / 7\n    while num % 8 == 0:\n        num = num / 8\n    while num % 9 == 0:\n        num = num / 9\n    next_smallest = next_smallest + 1\n    return next_smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import math\n    smallest_palindrome = math.inf\n    for i in range(num):\n        if palindrome_is_palindrome(i):\n            if palindrome_is_palindrome(i+1):\n                if i+2 <= num:\n                    if palindrome_is_palindrome(i+2):\n                        if palindrome_is_palindrome(i+3):\n                            return i+1\n                else:\n                    return i+1\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    \n    max_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num > max_num:\n            max_num = num\n    if max_num < 0:\n        return 0\n    \n    min_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num < min_num:\n            min_num = num\n    if min_num > max_num:\n        min_num = max_num\n    \n    return min_num\n    \ndef next_greatest_palindrome(num):\n    '''\n    Write a function to find the next greatest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    \n    max_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num > max_num:\n            max_num = num\n    if max_num < 0:\n        return 0\n    \n    min_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num < min_num:\n            min_num = num\n    if min_num > max_num:\n        min_num = max_num\n    \n    return min_num\n    \ndef next_largest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    \n    max_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num > max_num:\n            max_num = num\n    if max_num < 0:\n        return 0\n    \n    min_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num < min_num:\n            min_num = num\n    if min_num > max_num:\n        min_num = max_num\n    \n    return min_num\n    \ndef next_smallest_palindrome_rec(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    \n    max_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num > max_num:\n            max_num = num\n    if max_num < 0:\n        return 0\n    \n    min_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num < min_num:\n            min_num = num\n    if min_num > max_num:\n        min_num = max_num\n    \n    return min_num\n    \ndef next_greatest_palindrome_rec(num):\n    '''\n    Write a function to find the next greatest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    \n    max_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num > max_num:\n            max_num = num\n    if max_num < 0:\n        return 0\n    \n    min_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num < min_num:\n            min_num = num\n    if min_num > max_num:\n        min_num = max_num\n    \n    return min_num\n    \ndef next_largest_palindrome_rec(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    \n    max_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num > max_num:\n            max_num = num\n    if max_num < 0:\n        return 0\n    \n    min_num = num\n    for num_str in str(num):\n        num = int(num_str)\n        if num < min_num:\n            min_num = num\n    if min_num > max_num:\n        min_num = max_num\n    \n    return min_num\n    \ndef palindrome(num):\n    '''\n    Write a function that returns the next palindrome that fits a given integer.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 3\n    else:\n        return num - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #use O(n) time complexity\n    pass\n    \n    #in case of negative numbers\n    if num<0:\n        return 0\n    \n    #in case of string of length greater than 2\n    if num=='0' or num=='1':\n        return num\n    \n    #in case of all negatives and 1 is not palindrome\n    for i in range(2, int(num)+1):\n        if num%i==0:\n            return i\n    \n    #when this happens, return the negative number\n    return -int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    start = 0\n    end = len(num) - 1\n    smallest = -1\n    while start < end:\n        middle = (start + end) // 2\n        if num[middle] == num[middle + 1]:\n            smallest = middle\n            break\n        elif num[middle] > num[middle + 1]:\n            smallest = middle + 1\n            start = middle + 1\n        else:\n            smallest = middle - 1\n            end = middle - 1\n    if smallest == -1:\n        smallest = len(num)\n    return smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Base case:\n    if num == 0:\n        return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # To find next smallest palindrome\n    if (num > 1):\n        m = 0\n        n = num - 1\n        while (n > 0):\n            if (num % 10 == n % 10):\n                m = n\n                n = m // 10\n            else:\n                n -= 1\n        return m\n    else:\n        return 0\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Method 1: using math\n    return arr[(k-1)%len(arr)]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # print(arr)\n    i = 0\n    while i < len(arr):\n        if arr[i] == k:\n            return i\n        i+=1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    \n    arr_len = len(arr)\n    if arr_len == 0:\n        raise IndexError(\"Array is empty\")\n    \n    if arr_len == 1:\n        return arr[0]\n    \n    if arr_len == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    \n    for i in range(1, arr_len):\n        if arr[i] == arr[i-1] + 1:\n            return arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k-1)//2]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Sieve of Eratosthenes algorithm\n    # Time complexity is O(n^2)\n    # Space Complexity is O(n)\n    # We are using k as the current step\n    # Our result is a kth element\n    arr[0] = 0\n    arr[1] = 1\n    arr[2] = 2\n    for i in range(3, n):\n        arr[i] = arr[i - 1] + arr[i - 2]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # code here\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    k = k - 1\n    \n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # initialize the new string with the first word\n    # capitalize the first letter\n    new_str = word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    lowercase_word = word.lower()\n    words = lowercase_word.split('_')\n    word = ''\n    for i in range(len(words)):\n        word += words[i] + '-'\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Create variable to store the result\n    result = \"\"\n    # Loop through the alphabet\n    for c in word:\n        # Check if c is a lower case letter\n        if c.isalpha():\n            # Get the letter from the dictionary\n            letter = word[word.index(c) + 1]\n            # Check if the letter is in a dictionary\n            if letter in alphabet_dictionary:\n                # Update the result\n                result += alphabet_dictionary[letter] + \" \"\n            else:\n                # If it's not in the dictionary, then add it\n                result += letter + \" \"\n        else:\n            # If it's not a letter, add it to the result\n            result += c + \" \"\n    # Return the result\n    return result[:-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.endswith('y'):\n        return word[:-1] + 'Y'\n    return word[0] + word[1:] + '_'\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #replace the '-' with _\n    s1 = re.sub(r'[^A-Za-z0-9\\-]', '_', word)\n    #replace the '-' with _\n    return s1.lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split(\"_\")\n    camel_words = \"\"\n    for word in words:\n        camel_word = word[0].lower() + word[1:]\n        camel_words += camel_word\n    return camel_words\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    words[0] = words[0].title()\n    words[1] = words[1].lower()\n    return ''.join(words)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_cap = word.title()\n    second_cap = \"\"\n    for i in first_cap:\n        if i.isupper():\n            second_cap += i.lower()\n        else:\n            second_cap += i\n    return second_cap\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for c in word:\n        if c.isupper():\n            result += c.lower()\n        else:\n            result += c.capitalize()\n    return result\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n<0 or m<0:\n        raise ValueError(\"Negative or zero node numbers are not allowed\")\n    if n==m:\n        return 1\n    if n==1:\n        return 2\n    if m==2:\n        return 3\n    if n%2==0:\n        n2=n//2\n        return (eulerian_num(n2,m) + eulerian_num(n2-1,m))%(10**9+7)\n    if n%2==1:\n        n2=n//2\n        return (eulerian_num(n2,m) + eulerian_num(n-1,m))%(10**9+7)\n        \ndef in_subtree(node, n):\n    '''\n    Takes in a node and it's subtree\n    and returns True if the subtree is the\n    in-subtree of node.\n    '''\n    if node is None:\n        return False\n    return in_subtree(node.left, n) or in_subtree(node.right, n)\n    \ndef in_subtrees(n):\n    '''\n    A recursive function that searches\n    all the subtrees of the node n.\n    '''\n    if n is None:\n        return []\n    if n.left == None and n.right == None:\n        return [n]\n    return in_subtrees(n.left) + in_subtrees(n.right)\n        \ndef is_eulerian(n):\n    '''\n    A recursive function that returns True if n is\n    Eulerian.\n    '''\n    if n is None:\n        return True\n    if n.left is None and n.right is None:\n        return is_eulerian(n.left) and is_eulerian(n.right)\n    if n.left is None and n.right is not None:\n        return False\n    if n.left is not None and n.right is None:\n        return is_eulerian(n.left)\n    if n.left is not None and n.right is not None:\n        return is_eulerian(n.left) and is_eulerian(n.right)\n    return False\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_eulerian_number(x): \n        if n == 0 or m == 0: \n            return True\n        if x[n - 1]!= x[m - 1]: \n            return False\n        return is_eulerian_number(x[:n - 1]) and is_eulerian_number(x[n:m + 1])\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return 1\n    if n < 0 or m < 0 or n > m: \n        return 0\n    if m == 1: \n        return n \n    elif n == 1: \n        return n\n    else: \n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m) \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    elif n < m:\n        return eulerian_num(n, m+1)\n    else:\n        return eulerian_num(n-1, m) + m\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_eulerian(num):\n        \"\"\"\n        Check if the given number is a sum of a(n, m) or a(n-1, m-1)\n        \"\"\"\n        if num == m: return True\n        elif num == m-1: return False\n        else: return True if (num - 1) % m == 0 else False\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    if n == 1 or n == 0: \n        a = 1\n    else: \n        for i in range(n): \n            for j in range(m): \n                if a == 1: \n                    a += 1\n                    break\n            if a == 1: \n                break\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Step 1: Compute the transitive closure of the graph.\n    # (If this is not possible, there is a contradiction.\n    # Check this with the transitive closure of a(n - 1, m - 1).\n    graph = [[False for i in range(m+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if graph[i][j] == True:\n                graph[i][j] = True\n                graph[i][j+1] = True\n                graph[i][j - 1] = True\n                graph[i-1][j] = True\n                graph[i-1][j+1] = True\n                graph[i-1][j - 1] = True\n                graph[i-1][j-1] = True\n    # Step 2: Find the transitive closure of the graph.\n    transitive_closure = []\n    for i in range(n+1):\n        for j in range(m+1):\n            if graph[i][j] == False:\n                transitive_closure.append(i)\n                transitive_closure.append(j)\n    # Step 3: Return the transitive closure.\n    return transitive_closure\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == n: \n        return 1\n    elif n == m: \n        return 1\n    else: \n        return 1+eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Store the position of the root node\n    root = [n, m]\n    # Store the Eulerian numbers\n    euler_nums = [1, 2, 3]\n    # Generate the Eulerian numbers\n    generate_euler_nums(root, euler_nums)\n    \n    # Construct the search tree\n    search_tree = build_search_tree(root, euler_nums, m, n)\n    # Create an empty list to store the roots\n    roots = []\n    \n    # Start the search\n    search(roots, search_tree, euler_nums)\n    \n    # Return the root of the eulerian number\n    return euler_nums[roots.pop()]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m: \n        print(\"Eulerian number can't be calculated\") \n        return -1\n    if n == m: \n        return 1\n    if n == 0: \n        return 0\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for i in range(len(input_list)):\n        sublists.append(input_list[i])\n    \n    sublists.sort()\n    output_list = []\n    for sublist in sublists:\n        for i in range(len(sublist)):\n            output_list.append(sublist[i])\n    \n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a new list with the string elements in alphabetical order.\n    temp_list = []\n    for i in range(len(input_list)):\n        temp_list.append(input_list[i][0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Write your code here\n    i = 0\n    while i < len(input_list):\n        input_list[i] = sorted(input_list[i])\n        i += 1\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_by_elements(elements):\n        '''\n        elements is a list of strings, that are the elements in the sublists of a given list.\n        '''\n        sort_by_elements_functions = {\n        \"alphabet\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n        \"alphabetical_sort\" : \"alphabetical_sort\",\n    "
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # WRITE YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Your code here\n    return\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Sorting in ascending order\n    def sort_ascending(input_list):\n        for x in range(len(input_list)):\n            for y in range(x, len(input_list)):\n                if input_list[x][y][0] == input_list[y][0][0]:\n                    input_list[x][y] = input_list[y][1]\n                    input_list[y][1] = input_list[x]\n                    input_list[x] = input_list[y]\n                    input_list[y] = input_list[x]\n        return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pas"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    def sort_sublist_string(input_list):\n        '''\n        Sort each string in a given list of lists into a list of words.\n        '''\n        \n        for i in range(len(input_list)):\n            for j in range(len(input_list[i])):\n                if input_list[i][j] == '':\n                    input_list[i][j] =''\n                    \n        for i in range(len(input_list)):\n            for j in range(len(input_list[i])):\n                if input_list[i][j] =='':\n                    input_list[i][j] =''\n                    \n        for i in range(len(input_list)):\n            for j in range(len(input_list[i])):\n                if input_list[i][j] =='':\n                    input_list[i][j] =''\n                    \n        return input_list\n    \n    \n    return sort_sublist_string(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list.sort(key = lambda list_item: list_item[0])\n    print(input_list)\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if(i == True):\n            count = count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if(i==True):\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    n = len(lst)\n    for i in range(n):\n        if(lst[i] == True):\n            lst[i] = True\n        else:\n            lst[i] = False\n    return n\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    print(\"This function counts the number of true values\")\n    print(len(lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res=0\n    for i in lst:\n        if i==True:\n            res+=1\n    return res\nlst=[1,0,1,1,1,1,0,0,0,0]\nprint(count(lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counts = 0\n    for val in lst:\n        if val == True:\n            counts += 1\n    print(counts)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # YOUR CODE HERE\n    if len(lst) == 0:\n        return 0\n    count = 0\n    for i in lst:\n        if i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(list(filter(lambda x: x == True, lst)))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for i in lst:\n        if(i==True):\n            count_true = count_true+1\n    return count_true"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #TODO\n    test_list.append(test_tup)\n    \n    return test_list\n    \ndef add_tuples(test_list, test_tup):\n    '''\n    Write a function to append the given tuple to the given list.\n    '''\n    #TODO\n    test_tup.append(test_list)\n    \n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for elem in test_tup:\n        test_list.append(elem)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list) == 0:\n        test_list.append(tuple())\n        test_list.append(tuple())\n        return None\n    if len(test_list) == 1:\n        test_list.append(tuple())\n        test_list.append(tuple())\n        return None\n    if len(test_list) == 2:\n        test_list.append(tuple())\n        test_list.append(tuple())\n        return None\n    if len(test_list) == 3:\n        test_list.append(tuple())\n        test_list.append(tuple())\n        return None\n    if len(test_list) == 4:\n        test_list.append(tuple())\n        test_list.append(tuple())\n        test_list.append(tuple())\n        return None\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_tup == None:\n        test_tup = (test_list,)\n    else:\n        test_tup = test_tup + (test_list,)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup.append(item)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_tup[0].append(test_list))\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"Test list:\", test_list)\n    print(\"Test tuples:\", test_tup)\n    # for i, j in zip(test_tup, test_list):\n    for i, j in enumerate(test_tup):\n        if test_tup[i] not in test_list:\n            test_list.append(test_tup[i])\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    \n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp=[]\n    i=0\n    while(i<len(num1)):\n        j=0\n        temp_item=[]\n        while(j<len(num2)):\n            if(num1[i]<num2[j]):\n                temp_item.append(num1[i])\n                i+=1\n            else:\n                temp_item.append(num2[j])\n                j+=1\n        if(len(temp_item)==0):\n            temp.append(num2[j])\n        else:\n            temp.append(temp_item)\n    while(len(temp)!=0):\n        if(num1[i]<num2[len(temp)]):\n            temp.append(num2[i])\n        else:\n            temp.append(num1[i])\n        i+=1\n    return temp\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    heap = []\n    merged.extend([num1,num2,num3])\n    heapq.heapify(merged)\n    while len(merged)>0:\n        x = heapq.heappop(merged)\n        y = heapq.heappop(merged)\n        z = heapq.heappop(merged)\n        heapq.heappush(merged,[x,y,z])\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    print(\"original\",num1,num2,num3)\n    for n1 in num1:\n        for n2 in num2:\n            heapq.heappush(sorted_list,[n1,n2])\n        if not n1 in num2:\n            break\n    for n2 in num2:\n        if not n2 in num1:\n            break\n    print(\"merged\",sorted_list)\n    return sorted_list\n    \ndef merge_two_sorted_lists(num1,num2):\n    '''\n    Write a function that merges two sorted lists into a single sorted list.\n    '''\n    sorted_list = []\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    print(\"original\",num1,num2)\n    for n1 in num1:\n        for n2 in num2:\n            if n1>n2:\n                heapq.heappush(sorted_list,[n1,n2])\n            elif n2>n1:\n                heapq.heappush(sorted_list,[n2,n1])\n            elif n1==n2:\n                sorted_list.append([n1,n2])\n    print(\"merged\",sorted_list)\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i=0\n    j=0\n    while(i<len(num1) and j<len(num2) and i<len(num1) and j<len(num2)):\n        if num1[i]<num2[j]:\n            merged_list.append(num1[i])\n            i+=1\n        else:\n            merged_list.append(num2[j])\n            j+=1\n    while(i<len(num1)):\n        merged_list.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        merged_list.append(num2[j])\n        j+=1\n    return merged_list\n    \ndef merge_two_sorted_lists(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i=0\n    j=0\n    while(i<len(num1) and j<len(num2) and i<len(num1) and j<len(num2)):\n        merged_list.append(max(num1[i],num2[j]))\n        i+=1\n        j+=1\n    while(i<len(num1)):\n        merged_list.append(max(num1[i],num2[j]))\n        i+=1\n        j+=1\n    while(j<len(num2)):\n        merged_list.append(max(num1[i],num2[j]))\n        j+=1\n    return merged_list\n    \ndef merge_three_sorted_lists(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i=0\n    j=0\n    k=0\n    while(i<len(num1) and j<len(num2) and k<len(num3) and i<len(num1) and j<len(num2) and k<len(num3)):\n        if num1[i]<num2[j] and num2[j]<num3[k]:\n            merged_list.append(num1[i])\n            i+=1\n        elif num1[i]>num2[j] and num2[j]>num3[k]:\n            merged_list.append(num2[j])\n            j+=1\n        elif num1[i]<num2[j] and num2[j]>num3[k]:\n            merged_list.append(num2[j])\n            j+=1\n        elif num1[i]>num2[j] and num2[j]>num3[k]:\n            merged_list.append(num3[k])\n            k+=1\n        else:\n            continue\n    while(i<len(num1)):\n        merged_list.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        merged_list.append(num2[j])\n        j+=1\n    while(k<len(num3)):\n        merged_list.append(num3[k])\n        k+=1\n    return merged_list\n    \ndef merge_sorted_lists(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i=0\n    j=0\n    k=0\n    while(i<len(num1) and j<len(num2) and k<len(num3) and i<len(num1) and j<len(num2) and k<len(num3)):\n        if num1[i]<num2[j] and num2[j]<num3[k]:\n            merged_list.append(num1[i])\n            i+=1\n        elif num1[i]>num2[j] and num2[j]>num3[k]:\n            merged_list.append(num2[j])\n            j+=1\n        elif num1[i]<num2[j] and num2[j]>num3[k]:\n            merged_list.append(num2[j])\n            j+=1\n        elif num1[i]>num2[j] and num2[j]>num3[k]:\n            merged_list.append(num3[k])\n            k+=1\n        else:\n            continue\n    while(i<len(num1)):\n        merged_list.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        merged_list.append(num2[j])\n        j+=1\n    while(k<len(num3)):\n        merged_list.append(num3[k])\n        k+=1\n    return merged_list\n    \ndef merge_two_sorted_lists_recursive(num1,num2,num3):\n    '''\n    Use a stack to build a merge stack.\n    '''\n    if num1[0]<num2[0] and num1[1]<num2[1] and num1[2]<num2[2]:\n        return num1[0]+num2[0],num1[1]+num2[1],num1[2]+num2[2]\n    elif num1[0]>num2[0] and num1[1]<num2[1] and num1[2]<num2[2]:\n        return num1[0]+num2[0],num1[1]+num2[1],num1[2]+num2[2]\n    elif num1[0]>num2[0] and num1[1]>num2[1] and num1[2]<num2[2]:\n        return num1[0]+num2[0],num1[1]+num2[1],num1[2]+num2[2]\n    elif num1[0]<num2[0] and num1[1]>num2[1] and num1[2]>num2[2]:\n        return num1[0]+num2[0],num1[1]+num2[1],num1[2]+num2[2]\n    else:\n        return num1[0]+num2[0],num1[1]+num2[1],num1[2]+num2[2]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted([num1, num2, num3], key=int)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    merged_list.append(num1)\n    merged_list.append(num2)\n    merged_list.append(num3)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list=[]\n    #merging is made according to the requirements\n    #1) if the length of the two lists are same\n    if len(num1) == len(num2) and len(num1)==len(num3):\n        merged_list.append(num1)\n        merged_list.append(num2)\n        merged_list.append(num3)\n        #2) if the list has more than one element\n        if len(merged_list)>1:\n            merged_list.sort()\n            if merged_list[0] == merged_list[1]:\n                print(\"List 1 and 2 have same elements\")\n                print(merged_list)\n            elif merged_list[0]!= merged_list[1]:\n                print(\"List 1 and 2 have different elements\")\n                print(merged_list)\n                #3) if the two lists are empty\n                if not num1:\n                    print(\"List 1 is empty\")\n                    print(merged_list)\n                elif not num2:\n                    print(\"List 2 is empty\")\n                    print(merged_list)\n                #4) if the two lists are empty\n                elif not num3:\n                    print(\"List 3 is empty\")\n                    print(merged_list)\n    #3) if the two lists are empty\n    else:\n        print(\"Not all of the elements in the list are either list or list/array\")\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    while p1<len(num1) and p2<len(num2) and p3<len(num3):\n        if num1[p1]<num2[p2] and num1[p1]<num3[p3]:\n            result.append(num1[p1])\n            p1+=1\n        elif num2[p2]<num1[p1] and num2[p2]<num3[p3]:\n            result.append(num2[p2])\n            p2+=1\n        else:\n            result.append(num3[p3])\n            p3+=1\n    result+=num1[p1:]\n    result+=num2[p2:]\n    result+=num3[p3:]\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    final_list = []\n    a,b,c = num1,num2,num3\n    #first merge the three lists\n    while a and b and c:\n        if a[0] > b[0] and a[0] > c[0]:\n            final_list.append(a[0])\n            a.pop(0)\n        elif b[0] > a[0] and b[0] > c[0]:\n            final_list.append(b[0])\n            b.pop(0)\n        else:\n            final_list.append(c[0])\n            c.pop(0)\n    #now append the remaining elements\n    while a:\n        final_list.append(a[0])\n        a.pop(0)\n    while b:\n        final_list.append(b[0])\n        b.pop(0)\n    while c:\n        final_list.append(c[0])\n        c.pop(0)\n    return final_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(num1) and j < len(num2):\n        if num1[i] <= num2[j]:\n            heapq.heappush(num3,num1[i])\n            i+=1\n        else:\n            heapq.heappush(num3,num2[j])\n            j+=1\n            \n    while i < len(num1):\n        heapq.heappush(num3,num1[i])\n        i+=1\n    \n    while j < len(num2):\n        heapq.heappush(num3,num2[j])\n        j+=1\n        \n    while i < len(num3):\n        heapq.heappush(num3,num3[i])\n        i+=1\n        \n    return num3\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    c = 0\n    if n <= 1:\n        return n\n    else:\n        for i in range(n):\n            if (s[i] == '1'):\n                c += 1\n                # print(c)\n                if (c % 2!= 0):\n                    s = s[:-1] + s[-1] + s[:-1] + '0'\n                    # print(s)\n                    c = 0\n        return odd_Equivalent(s,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0: \n        return 0\n    elif n%2 == 1: \n        return n+1\n    else: \n        return odd_Equivalent(s, n//2)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    temp=s[:len(s)//2]\n    odd=[]\n    for x in temp:\n        if x=='1':\n            odd.append(1)\n        else:\n            odd.append(0)\n    odd=sum(odd)\n    if odd==n:\n        print(odd)\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def get_modulus(s):\n        '''\n        Return the modulus of a string.\n        '''\n        modulus = 0\n        for char in s:\n            modulus = modulus*2 + int(char)\n        return modulus\n    modulus = get_modulus(s)\n    i=0\n    while i<n:\n        if (i%2!=0):\n            modulus = modulus*2 + int(s[i])\n        i=i+1\n    return modulus\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with even value when rotating a binary string the given number of times.\n    '''\n    def get_modulus(s):\n        '''\n        Return the modulus of a string.\n        '''\n        modulus = 0\n        for char in s:\n            modulus = modulus*2 + int(char)\n        return modulus\n    modulus = get_modulus(s)\n    i=0\n    while i<n:\n        if (i%2==0):\n            modulus = modulus*2 + int(s[i])\n        i=i+1\n    return modulus\ndef f(x):\n    '''\n    Write a python function that takes an integer number as input, and returns the number of trailing zeros at each base of 2 that are present in the binary string x.\n    '''\n    def check_base(s):\n        '''\n        Return a dictionary where key = base, value = count\n        '''\n        count = 0\n        i = 0\n        d = {}\n        for char in s:\n            if char=='0':\n                count+=1\n            elif char=='1':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='2':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='3':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='4':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='5':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='6':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='7':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='8':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='9':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n        return d\n    d=f(x)\n    s=[]\n    for i in range(len(s)):\n        if s[i]=='0':\n            s.append(0)\n        else:\n            s.append(1)\n    for i in range(len(s)):\n        if i==0:\n            s.append(0)\n        else:\n            s.append(1)\n    modulus = get_modulus(s)\n    r=0\n    for i in range(len(s)-1,-1,-1):\n        modulus = modulus*2 + int(s[i])\n        r = r+modulus\n    return r\ndef f(x):\n    '''\n    Write a python function that takes an integer number as input, and returns the number of trailing zeros at each base of 2 that are present in the binary string x.\n    '''\n    def check_base(s):\n        '''\n        Return a dictionary where key = base, value = count\n        '''\n        count = 0\n        i = 0\n        d = {}\n        for char in s:\n            if char=='0':\n                count+=1\n            elif char=='1':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='2':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='3':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='4':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='5':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='6':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='7':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='8':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='9':\n                i+=1\n                if i==1:\n                    count=count+1\n                    i=0\n                d[i] = count\n            elif char=='0':\n                s.append(0)\n                s.append(1)\n            else:\n                s.append(1)\n        modulus = get_modulus(s)\n        r=0\n        for i in range(len(s)-1,-1,-1):\n            modulus = modulus*2 + int(s[i])\n            r = r+modulus\n        return r\n    d=f(x)\n    s=[]\n    for i in range(len(s)):\n        if s[i]=='0':\n            s.append(0)\n        else:\n            s.append(1)\n    for i in range(len(s)):\n        if i==0:\n            s.append(0)\n        else:\n            s.append(1)\n    modulus = get_modulus(s)\n    r=0\n    for i in range(len(s)-1,-1,-1):\n        modulus = modulus*2 + int(s[i])\n        r = r+modulus\n    return r\ndef check_base(s):\n    '''\n    Return a dictionary where key = base, value = count\n    '''\n    count = 0\n    i = 0\n    d = {}\n    for char in s:\n        if char=='0':\n            count+=1\n        elif char=='1':\n            i+=1\n            if i==1:\n                count=count+1\n                i=0\n            d[i] = count\n        elif char=='2':\n            i+=1\n            if i==1:\n                count=count+1\n                i=0\n            d[i] = count\n        elif char=='3':\n            i+=1\n            if i==1:\n                count=count+1\n                i=0\n            d[i] = count\n        elif char=='4':\n            i+=1\n            if i==1:\n                count=count+1\n                i=0\n            d[i] = count\n        elif char=='5':\n            i+=1\n            if i==1:\n                count=count+1\n                i=0\n            d[i] = count\n        elif char=='6':\n            i+=1\n            if i==1:\n                count=count+1\n                i=0\n            d[i] = count\n        elif char=='7':\n            i+=1\n        "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    j=0\n    while(j<n):\n        if(s[j]=='1'):\n            s[j]=s[j+1]\n            s[j+1]= '0'\n            j+=1\n        j+=1\n    return s\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    j=0\n    while(j<n):\n        if(s[j]=='0'):\n            s[j]=s[j+1]\n            s[j+1]= '1'\n            j+=1\n        j+=1\n    return s\n    \ndef binary_rotation(s): \n    '''\n    Write a python function that returns the binary string obtained from rotating a given binary string by 1 and 2.\n    '''\n    k=0\n    for i in range(len(s)):\n        if(s[i]=='1'):\n            s[i],s[k] = s[k],s[i]\n            k+=1\n    return \"\".join(s)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (n == 0): \n        return 0\n    elif (n%2 == 0): \n        return odd_Equivalent(s,n//2) \n    else: \n        return odd_Equivalent(s,n-1) \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum([1 if int(i) & 1 else 0 for i in s])%n\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def odd_Rotating(n,s,c): \n        ''' \n        Use the previously defined functions to create a new string and the count of odd numbers \n        ''' \n        # define a new string \n        n_string = '' \n        # create a count of odd numbers \n        c_odd = 0\n        # loop to iterate over \n        for i in range(1,n+1): \n            # if odd then add 1 \n            if (i % 2) == 1: \n                # add the odd numbers to new string \n                n_string = n_string + s[i-1] \n            # add the even numbers to new string \n            else: \n                n_string = n_string + s[i-1] \n            # if odd then add count of odd numbers \n            if (i % 2) == 0: \n                c_odd = c_odd + 1\n        # return new string \n        return n_string,c_odd \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    x = 0\n    for i in range(n):\n        if (s[i]%2 == 1):\n            x += 1\n    return x\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lista_dic = {}\n    for element in nestedlist:\n        if element in lista_dic:\n            lista_dic[element] += 1\n        else:\n            lista_dic[element] = 1\n    return lista_dic\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1,len(nestedlist)):\n            if nestedlist[i][j] not in result:\n                result.append(nestedlist[i][j])\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist is None or len(nestedlist) == 0:\n        return None\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        return None\n    \ndef find_all_inter_lcs(a, b):\n    '''\n    Write a function that returns a list of all strings where the first and second characters are interlaced\n    '''\n    if len(a) < len(b):\n        return None\n    elif len(a) == len(b):\n        return []\n    else:\n        first = a[0]\n        second = b[0]\n        if len(first) > len(second):\n            return find_all_inter_lcs(a[1:], b[1:]) + [first + second]\n        elif len(second) > len(first):\n            return find_all_inter_lcs(a, b[1:]) + [second + first]\n        else:\n            return [first + second]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for nestedlist1 in nestedlist:\n        if nestedlist1 not in common:\n            common.update(nestedlist1)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    temp_list = []\n    for elem in nestedlist:\n        if elem not in temp_list:\n            temp_list.append(elem)\n        else:\n            common_list.append(elem)\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested_list in nestedlist:\n        if isinstance(nested_list, list):\n            common_elements.extend(nested_list)\n        elif nested_list!= None:\n            common_elements.append(nested_list)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # Create a list of all the elements in the given nested lists\n    list_of_nested_lists = []\n    for nested in nestedlist:\n        list_of_nested_lists.append(nested)\n    \n    # Sort the given nested lists\n    list_of_nested_lists.sort()\n    \n    # Store the first element in the list\n    first_element = list_of_nested_lists[0]\n    \n    # Create an empty list to store the common elements\n    common_elements = []\n    \n    # Iterate through each element in the given nested list\n    for element in list_of_nested_lists:\n        # If the element is the first element in the nested list\n        if element == first_element:\n            # Add the element to the common_elements list\n            common_elements.append(element)\n        \n        # If element is not the first element, it must have two elements\n        # Check if the element is at the end of the list\n        elif element!= first_element:\n            # If it does not have two elements, add the element to the common_elements list\n            common_elements.append(element)\n            \n    return common_element"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # print(\"Finding common elements in nested lists...\")\n    common_elements = []\n    for nestedlist_element in nestedlist:\n        for element in nestedlist_element:\n            if element not in common_elements:\n                common_elements.append(element)\n    # print(\"\\nCommon elements:\")\n    # for element in common_elements:\n    #     print(element)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Output : {'a': ['1', '2', '3'], 'b': ['2', '3']}\n    # Output : ['a', 'b']\n    \n    # list1 = [1, 2, 3, 4]\n    # list2 = [2, 3, 4, 5]\n    # Output : {'a': [1, 2, 3], 'b': [2, 3], 'c': [4, 5]}\n    # Output : [1, 2, 3]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nestedlist_one in nestedlist:\n        for nestedlist_two in nestedlist:\n            if nestedlist_one == nestedlist_two:\n                common_elements.append(nestedlist_one)\n    return common_elements\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if(text.isnumeric()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit() == False:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # your code here\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return list1 == []\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        for key, value in dict1.items():\n            if value == 0:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            for k in j:\n                for l in k:\n                    if l == {}:\n                        print(\"the dictionary is empty\")\n                        return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    if len(list1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            for k in range(len(list1[i][j])):\n                for l in range(len(list1[i][j][k])):\n                    for m in range(len(list1[i][j][k][l])):\n                        for n in range(len(list1[i][j][k][l][m])):\n                            for o in range(len(list1[i][j][k][l][m][n])):\n                                for p in range(len(list1[i][j][k][l][m][n][o])):\n                                    if list1[i][j][k][l][m][n][o][p] == 'None':\n                                        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # your code\n    if list1 == []:\n        return True\n    else:\n        return False\n    \ndef is_empty_dit(list1):\n    '''\n    Write a function to test whether a list is empty or not.\n    '''\n    # your code\n    if list1 == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for list in list1:\n        if list:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(num for num in nums if num!= 0)\n    \ndef create_program_run_list(filename):\n    '''\n    Read the txt file, create a list of commands, run each command, return the list\n    '''\n    with open(filename) as f:\n        program_run_list = []\n        for line in f:\n            program_run_list.append(line.strip())\n        return program_run_list\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    l = []\n    for i in nums:\n        l.append(i)\n    return sum(l)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # only need to worry about the index, the whole number is not negative\n    # since that's the index of the tuple in the original list.\n    \n    # use the slicing syntax to get the value of the tuple in the list\n    \n    # return the value in the original list\n    \n    # we could use a return statement to give the list an index number\n    \n    # but here we just need to make a copy of the list, not the original\n    # and we want to keep the original\n    \n    # so we have to have to iterate over the original list\n    # and each element is a tuple\n    \n    # we also need to change the tuple into an integer\n    \n    # if there is a negative value, just return the value\n    # if there is a positive value, return the number of positive\n    \n    # no need to loop, just return the original\n    \n    # return the tuple in the original list\n    \n    # the advantage is that the index is on a biterator instead of just a counter\n    \n    # we can just use the slice syntax to get a value of the tuple in the original list\n    \n    # this is just a indexing, so we have to loop over the entire list\n    # and make a copy of the list\n    \n    # in this case, we want to return a single integer\n    \n    # we just need to return the value in the original list\n    \n    # we also need to return the tuple in the original list\n    \n    # we also need to return the tuple in the original list\n    \n    # we want the tuple in the original list\n    \n    # so we need to have a slice, if we do a slice, we need to make a copy of the list\n    \n    # we use a for loop to iterate over the list\n    \n    # if we want to return a single value, return the original value\n    # if we want to return a tuple of positive values, return all positive values\n    \n    # we need to loop over the list, and need to keep a copy of the list\n    \n    # if the value of a tuple is negative, return the negative value\n    # if the value of a tuple is positive, return the positive value\n    \n    # we don't want to return the original list\n    \n    # we'll need to return the tuple in the original list\n    \n    # this is just a slice, so we have to loop over the entire list\n    \n    # we want to return a single integer\n    \n    # in this case, we want to return all positive values\n    \n    # we need to loop over the entire list and keep a copy of the list\n    # we can't have a for loop because we want to return the original list\n    \n    # we want to return the tuple in the original list\n    \n    # we also want to return the tuple in the original list\n    \n    # we want to return the tuple in the original list\n    \n    # so we need to have a slice, if we do a slice, we need to make a copy of the list\n    \n    # we want to return a single value\n    \n    # we want to return a tuple of positive values\n    \n    # so we need to loop over the list, and need to keep a copy of the list\n    \n    # if the value of a tuple is negative, return the negative value\n    # if the value of a tuple is positive, return the positive value\n    \n    # we don't want to return the original list\n    \n    # we'll need to return the tuple in the original list\n    \n    # this is just a slice, so we have to loop over the entire list\n    \n    # we want to return a single integer\n    \n    # in this case, we want to return all positive values\n    \n    # we need to loop over the entire list and keep a copy of the list\n    # we want to return a tuple of positive values\n    \n    # we want to return a tuple of positive values\n    \n    # so we need to loop over the entire list and keep a copy of the list\n    \n    # we want to return a tuple of positive values\n    \n    # we'll need to loop over the entire list and keep a copy of the list\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return the tuple in the original list\n    \n    # we want to return the tuple in the original list\n    \n    # this is just a slice, so we have to loop over the entire list\n    \n    # we want to return a single integer\n    \n    # in this case, we want to return all positive values\n    \n    # we want to loop over the entire list and keep a copy of the list\n    # we want to return a tuple of positive values\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to loop over the entire list and keep a copy of the list\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return the tuple in the original list\n    \n    # we want to return the tuple in the original list\n    \n    # this is just a slice, so we have to loop over the entire list\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return the tuple in the original list\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return the tuple in the original list\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # we want to return the tuple in the original list\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positive values\n    \n    # so we want to return a tuple of positiv"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(map(tuple_to_int, nums))\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(n for n in nums if n >= 0)"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) > 0:\n        return int(\"\".join(map(str, nums)))\n    else:\n        return 0"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(i * p for i, p in enumerate(nums))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for x in test_list:\n        if len(x) == 1:\n            result_list.append(x[0])\n        else:\n            result_list.append(tuple(x))\n    return result_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    if isinstance(test_list[0], list):\n        return list_to_float(test_list[0])\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        float_list.append(list(map(lambda x: float(x), i)))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list.sort()\n    test_list = list(map(list, test_list))\n    test_list.sort()\n    test_list = list(map(lambda x: [float(i) for i in x], test_list))\n    test_list = list(map(lambda x: [float(i) for i in x], test_list))\n    test_list = list(map(lambda x: [float(i) for i in x], test_list))\n    test_list = list(map(lambda x: [float(i) for i in x], test_list))\n    test_list = list(map(lambda x: [float(i) for i in x], test_list))\n    test_list = list(map(lambda x: [float(i) for i in x], test_list))\n    test_list = list(map(lambda x: [float(i) for i in x], test_list))\n    test_list = list(map(lambda x: [float(i) for i in x], test_list))\n    test_list = list(map(lambda x: [float(i) for i in x], test_list))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    # iterate through the list elements\n    for element in test_list:\n        # check if the element is convertible\n        if all([isinstance(i, (int, float)) for i in element]):\n            # if it is convert it to float\n            test_list.append([float(i) for i in element])\n        else:\n            # otherwise, print a message\n            print('Invalid list type: ', type(element))\n    \n    # convert the list to float\n    for i, element in enumerate(test_list):\n        test_list[i] = list(map(float, element))\n    \n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for test in test_list:\n        for element in test:\n            if len(element) == 0:\n                continue\n            try:\n                float(element[0])\n                if type(element[0])!= type(\"\"):\n                    element[0] = float(element[0])\n            except ValueError:\n                continue\n            else:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    print(test_list)\n    for element in test_list:\n        for elements in element:\n            for elements_list in elements:\n                try:\n                    float(elements_list)\n                except ValueError:\n                    elements_list = 0\n                    break\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in test_list:\n        for column in element:\n            if type(column) == list:\n                for element2 in column:\n                    for element3 in element2:\n                        if type(element3) == list:\n                            for element4 in element3:\n                                for element5 in element4:\n                                    if type(element5) == list:\n                                        for element6 in element5:\n                                            if type(element6) == float:\n                                                element6 = round(element6, 6)\n                                            elif type(element6) == int:\n                                                element6 = round(element6, 2)\n                                            elif type(element6) == str:\n                                                element6 = round(element6, 2)\n                                            else:\n                                                element6 = element6\n                                            element6 = round(element6, 6)\n                                            element6 = round(element6, 2)\n                                            if element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                                element6 = element6.replace('.', ',')\n                                            elif element6!= element:\n                                            "
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [list(element) for element in test_list]\n    for column in range(len(test_list)):\n        for row in range(len(test_list)):\n            test_list[row][column] = float(test_list[row][column])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = []\n    word = string.split()\n    for i in word:\n        list.append(i)\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [x for x in string.split(' ')]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_to_list = string.split()\n    return string_to_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \n    \n    \ndef test():\n    print(\"Testing functions for string_to_list\")\n    print('Example 1:')\n    print('Input : \"Hello World\"')\n    print('Expected : [\"Hello\", \"World\"]')\n    print('Output : [\"Hello\", \"World\"]')\n    print('Example 2:')\n    print('Input : \"a b c\"')\n    print('Expected : [\"a\", \"b\", \"c\"]')\n    print('Output : [\"a\", \"b\", \"c\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"a\", \"b\", \"c\"]')\n    print('Output:')\n    print('[\"a\", \"b\", \"c\"]')\n    print()\n    print('Example 3:')\n    print('Input : \"Hello world\"')\n    print('Expected : [\"Hello\", \"world\"]')\n    print('Output : [\"Hello\", \"world\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"Hello\", \"world\"]')\n    print('Output:')\n    print('[\"Hello\", \"world\"]')\n    print()\n    print('Example 4:')\n    print('Input : \"a b c d e f\"')\n    print('Expected : [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]')\n    print('Output : [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]')\n    print('Output:')\n    print('[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]')\n    print()\n    print('Example 5:')\n    print('Input : \"Test_string\"')\n    print('Expected : [\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"TEST\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print('Output : [\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print('Output:')\n    print('[\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print()\n    print('Example 6:')\n    print('Input : \"Test\"')\n    print('Expected : [\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print('Output : [\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print('Output:')\n    print('[\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print()\n    print('Example 7:')\n    print('Input : \"Test_String\"')\n    print('Expected : [\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print('Output : [\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print('Output:')\n    print('[\"T\", \"e\", \"s\", \"TEST\", \"TES\", \"T\", \"T\", \"T\", \"TEST\"]')\n    print()\n    print('Example 8:')\n    print('Input : \"Hi There\"')\n    print('Expected : [\"Hi\", \"There\"]')\n    print('Output : [\"Hi\", \"There\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"Hi\", \"There\"]')\n    print('Output:')\n    print('[\"Hi\", \"There\"]')\n    print()\n    print('Example 9:')\n    print('Input : \"OtThe\"')\n    print('Expected : [\"O\", \"T\", \"e\", \"h\", \"T\", \"h\", \"o\", \"T\"]')\n    print('Output : [\"O\", \"T\", \"e\", \"h\", \"T\", \"h\", \"o\", \"T\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"O\", \"T\", \"e\", \"h\", \"T\", \"h\", \"o\", \"T\"]')\n    print('Output:')\n    print('[\"O\", \"T\", \"e\", \"h\", \"T\", \"h\", \"o\", \"T\"]')\n    print()\n    print('Example 10:')\n    print('Input : \"Adieu\"')\n    print('Expected : [\"Adieu\", \"i\"]')\n    print('Output : [\"Adieu\", \"i\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"Adieu\", \"i\"]')\n    print('Output:')\n    print('[\"Adieu\", \"i\"]')\n    print()\n    print('Example 11:')\n    print('Input : \"Programmer\"')\n    print('Expected : [\"Programmer\", \"e\", \"s\", \"P\", \"r\", \"r\", \"g\", \"o\", \"e\", \"h\", \"t\", \"h\", \"o\", \"t\", \"e\", \"s\"]')\n    print('Output : [\"Programmer\", \"e\", \"s\", \"P\", \"r\", \"r\", \"g\", \"o\", \"e\", \"h\", \"t\", \"h\", \"o\", \"t\", \"e\", \"s\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"Programmer\", \"e\", \"s\", \"P\", \"r\", \"r\", \"g\", \"o\", \"e\", \"h\", \"t\", \"h\", \"o\", \"t\", \"e\", \"s\"]')\n    print('Output:')\n    print('[\"Programmer\", \"e\", \"s\", \"P\", \"r\", \"r\", \"g\", \"o\", \"e\", \"h\", \"t\", \"h\", \"o\", \"t\", \"e\", \"s\"]')\n    print()\n    print('Example 12:')\n    print('Input : \"a dog and a cat\"')\n    print('Expected : [\"a\", \"dog\", \"and\", \"cat\"]')\n    print('Output : [\"a\", \"dog\", \"and\", \"cat\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"a\", \"dog\", \"and\", \"cat\"]')\n    print('Output:')\n    print('[\"a\", \"dog\", \"and\", \"cat\"]')\n    print()\n    print('Example 13:')\n    print('Input : \"abcdefghijklmnopqrstuvwxyz\"')\n    print('Expected : [\"abcdefghijklmnopqrstuvwxyz\"]')\n    print('Output : [\"abcdefghijklmnopqrstuvwxyz\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"abcdefghijklmnopqrstuvwxyz\"]')\n    print('Output:')\n    print('[\"abcdefghijklmnopqrstuvwxyz\"]')\n    print()\n    print('Example 14:')\n    print('Input : \"Life is Life\"')\n    print('Expected : [\"L\", \"I\", \"L\", \"L\", \"L\", \"I\"]')\n    print('Output : [\"L\", \"I\", \"L\", \"L\", \"L\", \"I\"]')\n    print('Exception:')\n    print('Expected:')\n    print('[\"L\", \"I\", \"L\", \"L\", \"L\", \"I\"]')\n    print('Outpu"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = []\n    for i in range(0, len(string)):\n        if string[i] == \" \":\n            list_string.append(string[i:i+5])\n    return list_string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(\" \")) \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [i.strip() for i in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split()\n    return list_of_strings\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    curr = arr[0]\n    for i in range(1, len(arr)):\n        if curr == arr[i]:\n            return i\n        else:\n            curr = arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #if array is empty or sorted\n    if len(arr) == 0:\n        return None\n    #initialize counter\n    count = 0\n    #loop through array\n    for element in arr:\n        #if current element is not the last one\n        if element!= arr[count+1]:\n            #add to counter\n            count += 1\n    #if it is only one element\n    if count == len(arr)-1:\n        return None\n    #return the current element\n    return arr[count]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    for k, v in d.items():\n        if v == 1:\n            return k\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # write your code here\n    ptr=0\n    lst=[]\n    for i in range(len(arr)):\n        if arr[i] not in lst:\n            lst.append(arr[i])\n        else:\n            while arr[ptr]!=arr[i]:\n                ptr+=1\n                if ptr==len(arr):\n                    return -1\n        ptr+=1\n    return arr[i]\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # list of elements\n    elements = []\n    # O(n)\n    for i in arr:\n        if i not in elements:\n            elements.append(i)\n    \n    # list of elements in sorted order\n    elements_sorted = sorted(elements)\n    # O(n)\n    for i in elements_sorted:\n        if elements.count(i) > 1:\n            return i\n    \n    # O(n)\n    return elements[0"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    i=0\n    for j in range(0,n-1):\n        if arr[j]==arr[j+1]:\n            i=i+1\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Determine the size of the array\n    N = len(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)<=1:\n        return -1\n    left, right = 0, len(arr)-1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = len(arr)\n    vis = [0] * l\n    if l == 0:\n        return 0\n    else:\n        l = l - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Time complexity: O(nlogn)\n    # Space Complexity: O(1)\n    # Implement the logic.\n    counter = [0] * len(arr)\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            counter[i] = counter[i-1] + 1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    t1 = tuple(list1)\n    n1 = len(t1)\n    t2 = (t1[i][1] for i in range(n1))\n    n2 = len(t2)\n    t3 = (t2[i] for i in range(n2))\n    max_product = int(max(t1,t2,t3))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_value = list1[0] * list1[1]\n    max_pair = list1[0]\n    for i in range(2, len(list1)):\n        max_value = max(max_value, list1[i] * max_pair)\n        max_pair = max(max_pair, list1[i])\n    return max_value\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Code here\n    if len(list1) < 2:\n        return -1\n    else:\n        # for i in range(len(list1)):\n        #     if list1[i][0] > list1[i][1]:\n        #         list1[i][0], list1[i][1] = list1[i][1], list1[i][0]\n        #         print(list1[i])\n        #     else:\n        #         continue\n        #     print(list1)\n        #     for j in range(len(list1) - i - 1):\n        #         print(list1[j], list1[j + 1])\n        #         if list1[j][0] > list1[j + 1][1]:\n        #             list1[j][0], list1[j + 1][1] = list1[j + 1][1], list1[j][0]\n        #         else:\n        #             continue\n        #         print(list1)\n        #         break\n        #     break\n        # for i in range(len(list1)):\n        #     if list1[i][0] > list1[i][1]:\n        #         list1[i][0], list1[i][1] = list1[i][1], list1[i][0]\n        #         print(list1[i])\n        #     else:\n        #         continue\n        #     print(list1)\n        #     for j in range(len(list1) - i - 1):\n        #         if list1[j][0] > list1[j + 1][1]:\n        #             list1[j][0], list1[j + 1][1] = list1[j + 1][1], list1[j][0]\n        #         else:\n        #             continue\n        #         print(list1)\n        #         break\n        #     break\n        # return max(list1)\n        max1 = -1\n        for i in range(len(list1) - 1):\n            for j in range(i + 1, len(list1)):\n                print(list1[i], list1[j], list1[j][0], list1[j][1], list1[j][0] * list1[j][1])\n                if max1 < list1[j][0] * list1[j][1]:\n                    max1 = list1[j][0] * list1[j][1]\n        return max1\n        # for i in range(len(list1)):\n        #     for j in range(i, len(list1)):\n        #         if list1[j][0] > list1[j][1]:\n        #             list1[j][0], list1[j][1] = list1[j][1], list1[j][0]\n        #         else:\n        #             continue\n        #         print(list1[i], list1[j])\n        #         break\n        #     break\n        # return max(list1)\n        #     break\n        # for i in range(len(list1)):\n        #     if list1[i][0] > list1[i][1]:\n        #         list1[i][0], list1[i][1] = list1[i][1], list1[i][0]\n        #         print(list1[i])\n        #     else:\n        #         continue\n        #     print(list1)\n        #     for j in range(len(list1) - i - 1):\n        #         if list1[j][0] > list1[j + 1][1]:\n        #             list1[j][0], list1[j + 1][1] = list1[j + 1][1], list1[j][0]\n        #         else:\n        #             continue\n        #         print(list1)\n        #         break\n        #     break\n        # return max(list1)\n    # for i in range(len(list1)):\n    #     if list1[i][0] > list1[i][1]:\n    #         list1[i][0], list1[i][1] = list1[i][1], list1[i][0]\n    #         print(list1[i])\n    #     else:\n    #         continue\n    #     print(list1)\n    #     for j in range(len(list1) - i - 1):\n    #         if list1[j][0] > list1[j + 1][1]:\n    #             list1[j][0], list1[j + 1][1] = list1[j + 1][1], list1[j][0]\n    #         else:\n    #             continue\n    #         print(list1)\n    #         break\n    #     break\n    # return max(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #list1.sort()\n    #tuple_sum = 0\n    #for i in range(len(list1)):\n    #    for j in range(i+1,len(list1)):\n    #        tuple_sum = tuple_sum + list1[i][0]*list1[j][0]\n    #        #if tuple_sum > max_product:\n    #        #    max_product = tuple_sum\n    #        #else:\n    #        #    continue\n    #        if tuple_sum > max_product:\n    #            max_product = tuple_sum\n    #print(max_product)\n    #return max_product\n    \n    #find greatest possible number\n    \n    #def product_greatest_product(list1):\n    #    #list1.sort()\n    #    #max_product = 0\n    #    #for i in range(len(list1)):\n    #    #    for j in range(i+1,len(list1)):\n    #    #        if product_greatest_product(list1[i]) < product_greatest_product(list1[j]):\n    #    #            product_greatest_product(list1[i])\n    #            product_greatest_product(list1[j])\n    #            if product_greatest_product(list1[i]) > max_product:\n    #                max_product = product_greatest_product(list1[i])\n    #            if product_greatest_product(list1[j]) > max_product:\n    #                max_product = product_greatest_product(list1[j])\n    #    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Write your code here.\n    list1.sort()\n    n = len(list1)\n    s = 0\n    max_product = float(\"-inf\")\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            product = list1[i]*list1[j]\n            if product > max_product:\n                max_product = product\n                s = list1[i]*list1[j]\n    return max_product, s\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    max_product = 0\n    current_product = 0\n    for number in list1:\n        current_product += number\n        if current_product > max_product:\n            max_product = current_product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # list1.sort()\n    l = len(list1)\n    \n    # print(l)\n    if l == 1:\n        return (list1[0][0] * list1[0][1])\n    \n    # def max_product(tuple_1, tuple_2):\n    #     return(max(list(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))))\n        \n    max = list()\n    max_two_elements = list()\n    \n    for i in range(l):\n        for j in range(i + 1, l):\n            # print(i, j)\n            \n            # if max is empty,\n            # then max_two_elements is empty,\n            # then max is larger\n            if len(max) == 0:\n                max_two_elements.append(list(map(lambda x, y: abs(x[0] * y[1]), tuple_1[i], tuple_2[j])))\n                continue\n            # print(max_two_elements)\n            # print(max_two_elements[i])\n            # print(max_two_elements[j])\n            if max_two_elements[i][0] > max_two_elements[j][0]:\n                max_two_elements[i] = list(map(lambda x, y: abs(x[0] * y[1]), tuple_1[i], tuple_2[j]))\n            elif max_two_elements[i][0] == max_two_elements[j][0]:\n                if max_two_elements[i][1] > max_two_elements[j][1]:\n                    max_two_elements[i] = list(map(lambda x, y: abs(x[0] * y[1]), tuple_1[i], tuple_2[j]))\n                else:\n                    max_two_elements[i] = list(map(lambda x, y: abs(x[0] * y[1]), tuple_1[i], tuple_2[j]))\n            else:\n                if max_two_elements[j][1] > max_two_elements[i][1]:\n                    max_two_elements[j] = list(map(lambda x, y: abs(x[0] * y[1]), tuple_1[i], tuple_2[j]))\n                else:\n                    max_two_elements[j] = list(map(lambda x, y: abs(x[0] * y[1]), tuple_1[i], tuple_2[j]))\n        # print(max_two_elements)\n        max.append(max_two_elements[i][0])\n        max.append(max_two_elements[j][0])\n        # print(max)\n        \n    # print(max)\n    # print(list(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2)))\n    # print(list(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2)))\n    return max[0] * max[1]\n    \n    # return max_product(tuple_1, tuple_2)\n    \n    # print(max_two_elements)\n    # max_two_elements.sort()\n    # max_two_elements.sort(reverse=True)\n    # return max_two_elements[0] * max_two_elements[1]\n    \n    # return max(list(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2)))\n    \n    # return max_product(tuple_1, tuple_2)\n    \n    # return max(tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2)))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    # return tuple(map(lambda x, y: abs(x[0] * y[1]), tuple_1, tuple_2))\n    \n    "
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod=0\n    for i in list1:\n        for j in list1:\n            if i>j:\n                max_prod=max(max_prod,i*j)\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] < list1[j][0] and list1[i][1] < list1[j][1]:\n                max_product = max(list1[i][0]*list1[j][0], max_product)\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    is_amicable = True\n    for number in range(1, limit):\n        if is_amicable:\n            sum = sum + number\n            is_amicable = False\n        else:\n            is_amicable = True\n            for n in range(1, number):\n                if number % n == 0:\n                    sum = sum + n\n                    is_amicable = True\n                    break\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = 0\n    num = 1\n    while num <= limit:\n        if num % 2 == 0:\n            num += 1\n        else:\n            num = num * 3 + 1\n        if num % 2 == 0:\n            num = num * 3 + 1\n        else:\n            num = num * 5 + 1\n        if num % 2 == 0:\n            num = num * 3 + 1\n        else:\n            num = num * 5 + 1\n        amicable_numbers += num\n    return amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    num = 1\n    while num <= limit:\n        if num % 2 == 0:\n            sum += num\n        elif num % 2!= 0:\n            sum += num\n        else:\n            num += 1\n        num += 1\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(num):\n        amicable_numbers_list = []\n        for i in range(1, num+1):\n            for j in range(i+1, num+1):\n                if i * 2 + j == num:\n                    amicable_numbers_list.append(i)\n                    amicable_numbers_list.append(j)\n        return sum(amicable_numbers_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum=0\n    for i in range(1,limit):\n        n=i\n        while n<=i:\n            n+=n\n            if is_amicable(n) and n%2==0:\n                sum+=n\n                print(n,\"  = \",n)\n    print(\"\\nThe sum of all amicable numbers from 1 to\",limit,\"is\",sum)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Checks if a number is a micalable number.\n        '''\n        amicable = True\n        if (num <= 0):\n            return 0\n        while (num > 0):\n            if (num % 2 == 0):\n                if (num % num == 0):\n                    amicable = False\n                else:\n                    amicable = True\n            else:\n                if (num % num == 0):\n                    amicable = False\n                else:\n                    amicable = True\n            num /= num\n        return amicable\n    \n    amicable_numbers = []\n    for number in range(1,limit+1):\n        if (is_amicable(number) == True):\n            amicable_numbers.append(number)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    from itertools import combinations\n    def sum_amicable(n):\n        s = 0\n        for i in range(1, n):\n            if n % i == 0:\n                if i + n // i == n:\n                    return True\n                else:\n                    continue\n            else:\n                continue\n        return False\n    def sum_summ(n):\n        s = 0\n        for i in range(1, n + 1):\n            s += i\n        return s\n    comb = combinations(range(1, n), 2)\n    for i in comb:\n        if i[0]!= i[1]:\n            if sum_amicable(i[0]) and sum_amicable(i[1]):\n                s = sum_summ(i[0]) + sum_summ(i[1])\n                if s == n:\n                    return n\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    amicable_sum = 0\n    nums = list(range(1,limit+1))\n    nums_sorted = sorted(nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    amicable_sum = amicable_numbers_sum2(limit)\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = 0\n    for x in range(1,limit):\n        sum = 0\n        sum = sum + x\n        x = x + 2\n        if sum%2 == 0 and x>2:\n            sum = sum - sum\n        if sum == x:\n            amicable = amicable + 1\n    return amicable\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # a is the number\n    # b is the imaginary part of the complex number\n    a = cmath.polar(a)\n    b = cmath.polar(b)\n    # get the real part of the complex number\n    # a.real and a.imag are only real numbers\n    a = a.real \n    # get the imaginary part of the complex number\n    a = a.imag \n    # if the real part of the complex number is 0, return 0\n    if a == 0:\n        return 0\n    # get the second part of the complex number\n    # first we convert the real part to the complex number\n    # cmath.polar() is used to convert the complex to polar\n    # cmath.polar() returns the real part and imaginary part\n    # use abs() to get the magnitude\n    m = abs(a)\n    # convert the magnitude into real part\n    # now we have to get the imaginary part\n    # i.e. if we get a = 10 and b = -5, we get the real part\n    # of the complex number 10.5\n    # we then get the imaginary part of the complex number -5\n    # return the real part of the complex number 10.5\n    # return the imaginary part of the complex number 5\n    # return the real part of the complex number 5.5\n    # or\n    # return the real part of the complex number -5.5\n    return m.real\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    angle = cmath.phase(b*cmath.exp(-1j*a))\n    return angle\ndef angle_complex_finder(d):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = angle_complex(complex(d[0]),complex(d[1]))\n    return angle\ndef n_1(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(1j*a), b*cmath.exp(1j*a))\ndef n_2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(2j*a), b*cmath.exp(2j*a))\ndef n_3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(3j*a), b*cmath.exp(3j*a))\ndef n_4(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(4j*a), b*cmath.exp(4j*a))\ndef n_5(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(5j*a), b*cmath.exp(5j*a))\ndef n_6(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(6j*a), b*cmath.exp(6j*a))\ndef n_7(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(7j*a), b*cmath.exp(7j*a))\ndef n_8(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(8j*a), b*cmath.exp(8j*a))\ndef n_9(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(9j*a), b*cmath.exp(9j*a))\ndef n_10(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(10j*a), b*cmath.exp(10j*a))\ndef n_11(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(11j*a), b*cmath.exp(11j*a))\ndef n_12(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(12j*a), b*cmath.exp(12j*a))\ndef n_13(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(13j*a), b*cmath.exp(13j*a))\ndef n_14(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(14j*a), b*cmath.exp(14j*a))\ndef n_15(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(15j*a), b*cmath.exp(15j*a))\ndef n_16(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(16j*a), b*cmath.exp(16j*a))\ndef n_17(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(17j*a), b*cmath.exp(17j*a))\ndef n_18(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(18j*a), b*cmath.exp(18j*a))\ndef n_19(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(19j*a), b*cmath.exp(19j*a))\ndef n_20(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(20j*a), b*cmath.exp(20j*a))\ndef n_21(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(21j*a), b*cmath.exp(21j*a))\ndef n_22(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(22j*a), b*cmath.exp(22j*a))\ndef n_23(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(23j*a), b*cmath.exp(23j*a))\ndef n_24(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(24j*a), b*cmath.exp(24j*a))\ndef n_25(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return angle_complex(b*cmath.exp(25j*a), b*cmat"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    angle = angle.real - angle.imag\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if(a.real == 0 and b.real == 0):\n        return 0\n    else:\n        return acos(b.imag/abs(b.imag))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real_part=complex(a.real,b.real)\n    imag_part=complex(a.imag,b.imag)\n    angle=acos(real_part.conjugate()/complex(1,1))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c1 = cmath.rect(2,1)\n    c2 = cmath.rect(2,1)\n    c3 = cmath.rect(2,1)\n    c4 = cmath.rect(2,1)\n    c5 = cmath.rect(2,1)\n    c6 = cmath.rect(2,1)\n    c7 = cmath.rect(2,1)\n    c8 = cmath.rect(2,1)\n    c9 = cmath.rect(2,1)\n    c10 = cmath.rect(2,1)\n    c11 = cmath.rect(2,1)\n    c12 = cmath.rect(2,1)\n    c13 = cmath.rect(2,1)\n    c14 = cmath.rect(2,1)\n    c15 = cmath.rect(2,1)\n    c16 = cmath.rect(2,1)\n    c17 = cmath.rect(2,1)\n    c18 = cmath.rect(2,1)\n    c19 = cmath.rect(2,1)\n    c20 = cmath.rect(2,1)\n    c21 = cmath.rect(2,1)\n    c22 = cmath.rect(2,1)\n    c23 = cmath.rect(2,1)\n    c24 = cmath.rect(2,1)\n    c25 = cmath.rect(2,1)\n    c26 = cmath.rect(2,1)\n    c27 = cmath.rect(2,1)\n    c28 = cmath.rect(2,1)\n    c29 = cmath.rect(2,1)\n    c30 = cmath.rect(2,1)\n    c31 = cmath.rect(2,1)\n    c32 = cmath.rect(2,1)\n    c33 = cmath.rect(2,1)\n    c34 = cmath.rect(2,1)\n    c35 = cmath.rect(2,1)\n    c36 = cmath.rect(2,1)\n    c37 = cmath.rect(2,1)\n    c38 = cmath.rect(2,1)\n    c39 = cmath.rect(2,1)\n    c40 = cmath.rect(2,1)\n    c41 = cmath.rect(2,1)\n    c42 = cmath.rect(2,1)\n    c43 = cmath.rect(2,1)\n    c44 = cmath.rect(2,1)\n    c45 = cmath.rect(2,1)\n    c46 = cmath.rect(2,1)\n    c47 = cmath.rect(2,1)\n    c48 = cmath.rect(2,1)\n    c49 = cmath.rect(2,1)\n    c50 = cmath.rect(2,1)\n    c51 = cmath.rect(2,1)\n    c52 = cmath.rect(2,1)\n    c53 = cmath.rect(2,1)\n    c54 = cmath.rect(2,1)\n    c55 = cmath.rect(2,1)\n    c56 = cmath.rect(2,1)\n    c57 = cmath.rect(2,1)\n    c58 = cmath.rect(2,1)\n    c59 = cmath.rect(2,1)\n    c60 = cmath.rect(2,1)\n    c61 = cmath.rect(2,1)\n    c62 = cmath.rect(2,1)\n    c63 = cmath.rect(2,1)\n    c64 = cmath.rect(2,1)\n    c65 = cmath.rect(2,1)\n    c66 = cmath.rect(2,1)\n    c67 = cmath.rect(2,1)\n    c68 = cmath.rect(2,1)\n    c69 = cmath.rect(2,1)\n    c70 = cmath.rect(2,1)\n    c71 = cmath.rect(2,1)\n    c72 = cmath.rect(2,1)\n    c73 = cmath.rect(2,1)\n    c74 = cmath.rect(2,1)\n    c75 = cmath.rect(2,1)\n    c76 = cmath.rect(2,1)\n    c77 = cmath.rect(2,1)\n    c78 = cmath.rect(2,1)\n    c79 = cmath.rect(2,1)\n    c80 = cmath.rect(2,1)\n    c81 = cmath.rect(2,1)\n    c82 = cmath.rect(2,1)\n    c83 = cmath.rect(2,1)\n    c84 = cmath.rect(2,1)\n    c85 = cmath.rect(2,1)\n    c86 = cmath.rect(2,1)\n    c87 = cmath.rect(2,1)\n    c88 = cmath.rect(2,1)\n    c89 = cmath.rect(2,1)\n    c90 = cmath.rect(2,1)\n    c91 = cmath.rect(2,1)\n    c92 = cmath.rect(2,1)\n    c93 = cmath.rect(2,1)\n    c94 = cmath.rect(2,1)\n    c95 = cmath.rect(2,1)\n    c96 = cmath.rect(2,1)\n    c97 = cmath.rect(2,1)\n    c98 = cmath.rect(2,1)\n    c99 = cmath.rect(2,1)\n    c100 = cmath.rect(2,1)\n    c101 = cmath.rect(2,1)\n    c102 = cmath.rect(2,1)\n    c103 = cmath.rect(2,1)\n    c104 = cmath.rect(2,1)\n    c105 = cmath.rect(2,1)\n    c106 = cmath.rect(2,1)\n    c107 = cmath.rect(2,1)\n    c108 = cmath.rect(2,1)\n    c109 = cmath.rect(2,1)\n    c110 = cmath.rect(2,1)\n    c111 = cmath.rect(2,1)\n    c112 = cmath.rect(2,1)\n    c113 = cmath.rect(2,1)\n    c114 = cmath.rect(2,1)\n    c115 = cmath.rect(2,1)\n    c116 = cmath.rect(2,1)\n    c117 = cmath.rect(2,1)\n    c118 = cmath.rect(2,1)\n    c119 = cmath.rect(2,1)\n    c120 = cmath.rect(2,1)\n    c121 = cmath.rect(2,1)\n    c122 = cmath.rect(2,1)\n    c123 = cmath.rect(2,1)\n    c124 = cmath.rect(2,1)\n    c125 = cmath.rect(2,1)\n    c126 = cmath.rect(2,1)\n    c127 = cmath.rect(2,1)\n    c128 = cmath.rect(2,1)\n    c129 = cmath.rect(2,1)\n    c130 = cmath.rect(2,1)\n    c131 = cmath.rect(2,1)\n    c132 = cmath.rect(2,1)\n    c133 = cmath.rect(2,1)\n    c134 = cmath.rect(2,1)\n    c135 = cmath.rect(2,1)\n    c136 = cmath.rect(2,1)\n    c137 = cmath.rect(2,1)\n    c138 = cmath.rect(2,1)\n    c139 = cmath.rect(2,1)\n    c140 = cmath.rect(2,1)\n    c141 = cmath.rect(2,1)\n    c142 = cmath.rect(2,1)\n    c143 = cmath.rect(2,1)\n    c144 = cmath.rect("
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos((b*b - 1) * (a*a + 1))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = b*b-4*a*cmath.sqrt(1-b**2)\n    if x < 0:\n        return cmath.acos(-1*b/x)\n    elif x == 0:\n        return 0.0\n    else:\n        return cmath.acos(x/b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == b:\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string is None: return None\n    if string == \"\": return 0\n    count = 0\n    for c in string:\n        if c == \"0\": count += 1\n        if c == \"1\": count -= 1\n        if count < 0: return 0\n        if count > 0: count = 0\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    my_list = list(string) \n    result = 0 \n    for i in range(len(my_list)): \n        result = result + (int(my_list[i])) \n    return result \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = count1 = 0\n    max = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        elif string[i] == '1':\n            count1 += 1\n        if count0 == count1:\n            max = i-count0-1\n        count0 = 0\n        count1 = 0\n    return max\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0s = 0\n    count_1s = 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n    return count_0s - count_1s\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    substring = 0\n    for index, value in enumerate(string):\n        substring += (int(value) * 2)\n    return substring \ndef solution(s):\n    answer = 0\n    s = s.replace('0', '1').replace('1', '0')\n    start = 0\n    end = len(s)-1\n    while start < end:\n        mid = (start+end)//2\n        if find_length(s[start:mid]) == find_length(s[mid+1:end+1]):\n            answer = mid\n            start = mid + 1\n            end = mid - 1\n        else:\n            end = mid\n    return answer\nprint(solution(\"001011101\")"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #  Calculate max diff\n    #  remove leading zeros from string\n    #  append zeroes to str\n    #  return max_diff\n    #  for every char\n    #  return max_diff\n    n = len(string)\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    for i in range(n):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n    #  print(\"zero count: \", zero_count, \"one count: \", one_count)\n    #  print(\"zero count\", zero_count/n)\n    #  print(\"one count\", one_count/n)\n    max_diff = max(zero_count, one_count)\n    #  print(\"max diff\", max_diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    mylist = list(string)\n    mylist.remove('0')\n    mylist.remove('1')\n    x = 0\n    for i in mylist:\n        x += int(i)\n    return x"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    MAX = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return len(string[string.find('0')+1:string.find('1')])\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            diff = 0\n        else:\n            diff = 1\n        max_diff = max(max_diff, abs(diff - string.count('1') - string.count('0')))\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<0 and b<0:\n        return \"please enter positive numbers\"\n    elif a<0:\n        a = abs(a)\n        b = abs(b)\n        if a%b==0:\n            print(\"given numbers are not proitive divisors of both\")\n            return -1\n        else:\n            return a/b\n    elif b<0:\n        a = abs(a)\n        b = abs(b)\n        if a%b==0:\n            return \"given numbers are not proitive divisors of both\"\n        else:\n            return a/b\n    else:\n        return a+b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    for i in range(1,min(a,b)+1): \n        if (a%i==0) and (b%i==0): \n            s+=i \n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = abs(a)\n    b = abs(b)\n    if a % 2 == 0 and b % 2 == 0: \n        return a + b\n    else: \n        if a % 2 == 0: \n            return (a // 2) + b \n        else: \n            return (a // 2) + (b // 2) \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # defining a variable to store the result\n    result = 0\n    # checking for b number if it is a integer\n    if type(b) is int:\n        if b==0:\n            return 0\n    # checking for a number if it is a integer\n    if type(a) is int:\n        if a==0:\n            return 0\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            result+=i\n            # returning the result if it is the common divisor of a and b\n            return result\n    return 0\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    s = 0\n    a = abs(a)\n    b = abs(b)\n    \n    if a == b: \n        return a\n    \n    while (a % b!= 0): \n        s += 1\n        a = a // b\n    return s\n    \n    \ndef reverse(lst): \n    '''\n    Write a python function that takes a list and reverses it. \n    '''\n    \n    t = []\n    for i in range(len(lst)):\n        t.append(lst[i])\n    return t\n        \n    \ndef isPair(A, B): \n    '''\n    Write a python function to check if the two given lists are two pairs. \n    '''\n    \n    c = 0\n    l = 0\n    r = 0\n    lst = []\n    for i in range(len(A)):\n        lst.append(A[i])\n    for i in range(len(B)):\n        lst.append(B[i])\n    for i in range(len(lst)):\n        c += lst[i] == '('\n        l += lst[i] == ')'\n        r += lst[i] == ')'\n    \n    if c == 0 or r == 0 or l == 0: \n        return False\n    \n    if c == l and r == l:\n        return True\n    else:\n        return False\n    \n    \n    \ndef triple(lst): \n    '''\n    Write a python function that takes a list and returns a list containing the first 3 elements and last 3 elements. \n    '''\n    \n    t = []\n    l = []\n    for i in range(len(lst)):\n        l.append(lst[i])\n        l.append(lst[i+1])\n        l.append(lst[i+2])\n    return l\n        \ndef left2right(lst): \n    '''\n    Write a python function that takes a list and returns a list with the last 2 elements and the first 2 elements. \n    '''\n    \n    return lst[-2:] + lst[:-2]\n    \ndef checkIfInBetween(lst, element, first, last): \n    '''\n    Write a python function that takes a list and a number and returns True if it contains the number given. \n    '''\n    \n    #iterate through the list. \n    for i in range(len(lst)):\n        if lst[i] == element:\n            if i == 0: \n                return True\n            if i == first-1: \n                return True\n            if i == last-1: \n                return True\n    return False\n    \n    \ndef flatten(lst): \n    '''\n    Write a python function that returns the list without duplicates. \n    '''\n    \n    #iterate through the list. \n    for i in range(len(lst)):\n        for j in range(len(lst[i])): \n            lst[i][j] = lst[i][j] \n            lst[i][j] = str(lst[i][j]) \n    return lst\n    \ndef findDuplicates(lst): \n    '''\n    Write a python function that takes a list and returns a list of all the numbers in the list that appears more than once. \n    '''\n    \n    #iterate through the list. \n    result = []\n    \n    for i in range(len(lst)):\n        if lst[i] in result:\n            result.append(lst[i])\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n            result.append(lst[i])\n    return result\n    \n    \ndef main(): \n    print('Welcome to Hacker Rank') \n    \n    #input data for problem\n    inp = input('Input your expression: ').split()\n    \n    #get length of input list\n    length = len(inp)\n    \n    #check if input is list of numbers\n    if not isinstance(inp, list):\n        print('Invalid input. Input must be a list of numbers.')\n        return\n    \n    #initialise empty string to store answer\n    answer = ''\n    \n    #iterate through input\n    for i in range(length): \n        #if input is '('\n        if inp[i] == '(': \n            #add 1 to the answer\n            answer += '1'\n        #if input is ')'\n        elif inp[i] == ')':\n            #add 1 to the answer\n            answer += '1'\n            \n    #check if answer is string\n    if not isinstance(answer, str):\n        print('Invalid input. Answer must be a string.')\n        return\n    \n    #call functions\n    print(sum(map(int, flatten(inp))))\n    print(reverse(inp))\n    print(isPair(inp, ')('))\n    print(isPair(inp, ')'))\n    print(isPair(inp, '('))\n    print(isPair(inp, ')'))\n    print(checkIfInBetween(inp, ')', 0, 1))\n    print(isPair(inp, '('))\n    print(isPair(inp, ')'))\n    print(findDuplicates(inp))\n    \n    \nif __name__ == '__main__': \n    main() \n    \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def get_common_divisors(num):\n        # base case: check if the num is divisible by any of the numbers we're trying to find\n        if num == 0:\n            return 1\n        elif num % 2 == 0:\n            return 2\n        else:\n            num_of_divs = 3 # 3 is the base case and it is one so it's good\n            while num % num_of_divs == 0:\n                num_of_divs += 2 # so we're doing 2 more times\n            return 1 + get_common_divisors(num / num_of_divs)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # print(a,b)\n    if b%2==0:\n        return a+b+1\n    else:\n        return a+b\n    \ndef mul(a,b):\n    '''\n    Write a python function to find the product of two given numbers.\n    '''\n    # print(a,b)\n    return a*b\n    \ndef div(a,b):\n    '''\n    Write a python function to find the quotient of two given numbers.\n    '''\n    # print(a,b)\n    return a/b\n    \ndef sqrt(a,b):\n    '''\n    Write a python function to find the square root of two given numbers.\n    '''\n    # print(a,b)\n    return a**2+b**2\n    \ndef fact(a,b):\n    '''\n    Write a python function to find the factorial of two given numbers.\n    '''\n    # print(a,b)\n    return a*b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=a\n    d=b\n    while c%d!=0:\n        c+=d\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #Hint:  https://www.w3schools.com/python/python_functions_modular_calculations.asp\n    #Hint:  https://www.geeksforgeeks.org/sum-of-all-divisors-of-given-number-python/\n    def is_prime(num):\n        '''\n        num: the number to check\n        '''\n        if num == 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        for i in range(5,int(math.sqrt(num))+1,2):\n            if num%i == 0 or num%(i+2) == 0:\n                return False\n        return True\n    #Hint:  https://www.programiz.com/python-programming/examples/sum\n    #Hint:  https://www.geeksforgeeks.org/python-sum-of-numbers-divisible-by-2-or-3/\n    #Hint:  https://www.geeksforgeeks.org/sum-of-numbers-divisible-by-2-or-3/\n    def sum_of_divisors(n): \n        '''\n        n: the number to find the sum of divisors of\n        '''\n        if n == 1 or n == 2: \n            return 1\n        if n % 2 == 0 or n % 3 == 0:\n            return 0\n        for i in range(5, int(math.sqrt(n))+1, 2):\n            if n%i == 0 or n%(i+2) == 0:\n                return 0\n        return n\n    return sum_of_divisors(sum(a,b))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Write your code here.\n    # pass\n    return x*y\n    # raise NotImplementedError\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    #write your code here\n    print(x, y)\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return x\n    if y < 0:\n        return (multiply_int(x, abs(y)))\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    assert(type(x) is int and type(y) is int), \"x and y must be of type int\"\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    \n    x = int(x)\n    y = int(y)\n    \n    result = x * y\n    \n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [' '.join(w for w in word.split() if len(w) > n) for word in str.split()]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = set()\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if len(str[i:j]) > n:\n                words.add(str[i:j])\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = [word.strip(' ').strip('\\n') for word in str.split(',')]\n    if len(words) < n:\n        print('There are not enough words to be long enough')\n        return 0\n    return sorted(words, key=len, reverse=True)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if str == '':\n            return 0\n        else:\n            word_list = str.split(' ')\n            count = 0\n            for i in word_list:\n                if len(i) > n:\n                    count += 1\n            return count\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    dict1 = {}\n    str = str.lower()\n    word_list = list(str)\n    for word in word_list:\n        if word in dict1:\n            dict1[word] += 1\n        else:\n            dict1[word] = 1\n    return dict1\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    dict = {}\n    for word in str.split():\n        dict[word] = dict.get(word, 0) + 1\n    return max(dict, key=dict.get)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    \n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    \n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    num = [len(word) for word in str.split()]\n    if min(num) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # An array of words\n    words = [word for word in str.split() if len(word) >= n]\n    print(words)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return (my_matrix[0][0] == my_matrix[1][1] == my_matrix[2][2] == my_matrix[3][3])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix = my_matrix.copy()\n    matrix[1,1] = 0\n    matrix[2,2] = 0\n    matrix[3,3] = 0\n    if ((matrix[0,0] == matrix[1,1] and matrix[0,1] == matrix[2,2]) or\n        (matrix[0,0] == matrix[2,2] and matrix[0,1] == matrix[1,2]) or\n        (matrix[1,0] == matrix[2,2] and matrix[1,1] == matrix[2,3]) or\n        (matrix[1,0] == matrix[2,1] and matrix[1,2] == matrix[2,3]) or\n        (matrix[0,0] == matrix[2,3] and matrix[0,1] == matrix[1,2]) or\n        (matrix[0,0] == matrix[1,2] and matrix[0,2] == matrix[1,3])):\n        return True\n    else:\n        return False\n        \ndef print_matrix(my_matrix):\n    '''\n    Write a function to print the matrix.\n    '''\n    print(\"[\", end=\"\")\n    for i in range(len(my_matrix)):\n        print(str(my_matrix[i][0]) + \",\", end=\"\")\n        for j in range(len(my_matrix[0])):\n            print(str(my_matrix[i][j]) + \",\", end=\"\")\n        print(\"]\", end=\"\")\n    print(\"\")\n    \ndef print_matrix_inv(my_matrix):\n    '''\n    Write a function to print the matrix in the inverse.\n    '''\n    print(\"[\", end=\"\")\n    for i in range(len(my_matrix)):\n        print(str(my_matrix[i][0]) + \",\", end=\"\")\n        for j in range(len(my_matrix[0])):\n            print(str(my_matrix[i][j]) + \",\", end=\"\")\n        print(\"]\", end=\"\")\n    print(\"\")\n    \ndef print_matrix_trans(my_matrix):\n    '''\n    Write a function to print the matrix transpose.\n    '''\n    print(\"[\", end=\"\")\n    for i in range(len(my_matrix)):\n        print(str(my_matrix[i][i]) + \",\", end=\"\")\n        for j in range(len(my_matrix[0])):\n            print(str(my_matrix[i][j]) + \",\", end=\"\")\n        print(\"]\", end=\"\")\n    print(\"\")\n    \ndef print_matrix_inv_trans(my_matrix):\n    '''\n    Write a function to print the matrix in the inverse transpose.\n    '''\n    print(\"[\", end=\"\")\n    for i in range(len(my_matrix)):\n        print(str(my_matrix[i][0]) + \",\", end=\"\")\n        for j in range(len(my_matrix[0])):\n            print(str(my_matrix[i][j]) + \",\", end=\"\")\n        print(\"]\", end=\"\")\n    print(\"\")\n    \ndef print_matrix_trans_inverse(my_matrix):\n    '''\n    Write a function to print the matrix transpose in inverse.\n    '''\n    print(\"[\", end=\"\")\n    for i in range(len(my_matrix)):\n        print(str(my_matrix[i][i]) + \",\", end=\"\")\n        for j in range(len(my_matrix[0])):\n            print(str(my_matrix[i][j]) + \",\", end=\"\")\n        print(\"]\", end=\"\")\n    print(\"\")\n    \ndef print_matrix_inverse(my_matrix):\n    '''\n    Write a function to print the matrix in inverse.\n    '''\n    print(\"[\", end=\"\")\n    for i in range(len(my_matrix)):\n        print(str(my_matrix[i][i]) + \",\", end=\"\")\n        for j in range(len(my_matrix[0])):\n            print(str(my_matrix[i][j]) + \",\", end=\"\")\n        print(\"]\", end=\"\")\n    print(\"\")\n    \ndef main():\n    '''\n    Define a matrix and find if it's a magic square.\n    '''\n    while True:\n        my_matrix = [[int(x) for x in input().split()] for i in range(3)]\n        print(\"Is the matrix a magic square?\\n 1 - yes\\n 0 - no\")\n        user_input = input()\n        if user_input == \"1\":\n            if magic_square_test(my_matrix):\n                print(\"The matrix is a magic square.\")\n                print_matrix(my_matrix)\n            else:\n                print(\"The matrix is not a magic square.\")\n                print_matrix(my_matrix)\n        elif user_input == \"0\":\n            break\n        else:\n            print(\"Invalid input. Please try again.\")\n        print(\"\")\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    else:\n        for x in range(0, len(my_matrix)):\n            for y in range(0, len(my_matrix[x])):\n                if my_matrix[x][y]!= 0:\n                    return False\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        for row in my_matrix:\n            for value in row:\n                if value % 2 == 0:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n    else:\n        print(\"Invalid Matrix!\")\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    #if the matrix is not a square then it should return false\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    #iterate over the matrix to check if it is a square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            #if it is a square then it should return false\n            if my_matrix[i][j]!= 0:\n                return False\n    #if the matrix is a square then it should return true\n    return True\n    "
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    s_matrix = [[0, 0, 0],\n               [0, 0, 0],\n               [0, 0, 0]]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a 2D array\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    # Check if all the elements are integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n    # Check if the squares are equal\n    for row in range(3):\n        for column in range(3):\n            square_one = my_matrix[row][column]\n            square_two = my_matrix[row+1][column]\n            square_three = my_matrix[row+2][column]\n            if square_one!= square_two and square_one!= square_three and square_two!= square_three:\n                return False\n    return True\n    \ndef is_valid(my_matrix):\n    '''\n    Write a function to check whether a matrix is valid or not.\n    '''\n    for row in range(3):\n        for column in range(3):\n            square_one = my_matrix[row][column]\n            square_two = my_matrix[row+1][column]\n            square_three = my_matrix[row+2][column]\n            if square_one!= square_two and square_one!= square_three and square_two!= square_three:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # Loop through matrix\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[0])):\n            # Check whether value is in square\n            if my_matrix[row][col]!= 0:\n                # Square is not a valid matrix\n                return False\n    # The matrix is a valid matrix\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sum = 0\n    for row in my_matrix:\n        row_sum += sum(row)\n    if row_sum == 45:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # The idea is to use an array to store frequency of each item\n    # and count the frequency of each item in array.\n    # The idea is to use bisect to find the next item in list\n    # which is having the highest frequency.\n    # If the highest frequency is more than the current frequency\n    # then we assign the item with that highest frequency to the current item.\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Time O(n)\n    # Space O(1)\n    n = len(nums)\n    freq = defaultdict(int)\n    freq_item = 0\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return -1\n    q = defaultdict(int)\n    for num in nums:\n        q[num] += 1\n    max_count = max(q.values())\n    for num, count in q.items():\n        if count == max_count:\n            return num\n    return -1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_occurrences_dict = dict()\n    for num, freq in freq_dict.items():\n        if freq == max(freq_dict.values()):\n            max_occurrences_dict[num] = freq\n    \n    return max_occurrences_dict\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    def check(x):\n        count = defaultdict(int)\n        for i in x:\n            count[i] += 1\n        return max(count.values())\n    return check(nums)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n        else:\n            max_freq = max(num,max_freq)\n            count += 1\n    return count, max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # O(N)\n    max_freq = 0\n    max_count = 0\n    current_max_freq = 0\n    for num in nums:\n        if num > max_freq:\n            max_freq = num\n            current_max_freq = max_count\n        max_count = max_count + 1 if num > max_freq else max_count\n    return current_max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    # initialize the dictionary\n    freq_d = defaultdict(list)\n    for i in range(len(nums)):\n        freq_d[nums[i]].append(i)\n    \n    # loop through the dictionary\n    for k in freq_d:\n        freq_d[k].sort()\n        count = len(freq_d[k])\n        \n        # if it has more than 1 item in it, return the highest frequency\n        if count > 1:\n            return k\n    \n    # if it has only one item in it, return the first item\n    return freq_d[nums[0]][0]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_frequency = defaultdict(int)\n    for num in nums:\n        max_frequency[num] += 1\n    for num in max_frequency:\n        if max_frequency[num] == 1:\n            return num\n    return None\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # your code goes here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    string = list(str1)\n    final_string = []\n    for letter in string:\n        if letter in vowels:\n            final_string.append(letter)\n        else:\n            final_string.append(\"_\")\n    return ''.join(final_string)"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels_reversed = []\n    for i in str1:\n        if i.lower() not in vowels_reversed:\n            vowels_reversed.append(i)\n    return ''.join(vowels_reversed)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    a = list(str1)\n    for i in a:\n        if i in \"aeiou\":\n            i = i.lower()\n            a.remove(i)\n            a.insert(0, i)\n    return ''.join(a)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = 'aeiouAEIOU'\n    rev_str = ''\n    \n    for letter in str1:\n        if letter in vowels:\n            rev_str += letter\n            \n    return rev_str\n    \nif __name__ == '__main__':\n    str1 = \"ahjjjjjjjj\"\n    rev_str = reverse_vowels(str1)\n    print(rev_str)"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    final_result = \"\"\n    for i in str1:\n        if i not in \"aeiouAEIOU\":\n            final_result += i\n    return final_result[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # var a = 0, b = 0, c = 0\n    # current char, previous char\n    a = 0\n    b = 0\n    c = 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # TODO: Write your code here\n    str_temp = str1[::-1]\n    return str_temp\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    str1 = str1.replace('y', '')\n    print(str1)\n    print(vowels)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # remove the vowels from the original string\n    vowels = set(\"AEIOU\")\n    str2 = str1.lower()\n    vowels_in_str = str2.count(\"a\") + str2.count(\"e\") + str2.count(\"i\") + str2.count(\"o\") + str2.count(\"u\")\n    # change the vowels to a set\n    reversed_vowels = list(vowels - vowels_in_str)\n    # add the vowels back into the original string\n    str2 = str1.replace(\"a\", \"aeiou\")\n    str2 = str2.replace(\"e\", \"eiou\")\n    str2 = str2.replace(\"i\", \"ieou\")\n    str2 = str2.replace(\"o\", \"oyou\")\n    str2 = str2.replace(\"u\", \"youu\")\n    # add the reversed vowels to the original string\n    str2 = str2.replace(\"aeiou\", reversed_vowels)\n    # return the result\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    s = str1\n    #define a function that will reverse each vowel in a string\n    def reverse_vowel(s,i):\n        while i < len(s):\n            if s[i] in \"aeiouAEIOU\":\n                if s[i] in \"aeiouAEIOU\":\n                    if s[i] not in \"aeiouAEIOU\":\n                        i = i - 1\n                else:\n                    i = i + 1\n            else:\n                i = i + 1\n    #iterate through the string\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] in \"aeiouAEIOU\":\n            #if the i is the last index in the string, reverse the vowel\n            if i == len(s) - 1:\n                reverse_vowel(s,i)\n            #if it is not the last index, add a space after the vowel\n            else:\n                reverse_vowel(s,i + 1)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = ''\n    for el in tup1:\n        str += str(el) + ', '\n    return str[:-2]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = str()\n    for e in tup1:\n        s = s +'' + str(e)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # tup1 = (1, 2, 3, 4, 5, 6, 7, 8)\n    # output = '(' + str(tup1[0]) + ','+ str(tup1[1]) + ','+ str(tup1[2]) + ')'\n    output = ', '.join(str(tup1[i]) for i in range(len(tup1)))\n    return output\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(str(elem) for elem in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return(str(tup1))\n    \ndef tup_int_list(tup1):\n    '''\n    Convert a list to a tuple.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list2(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list3(tup1):\n    '''\n    Convert a list to a tuple.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list4(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list5(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list6(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list7(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list8(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list9(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list10(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list11(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list12(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list13(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list14(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list15(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list16(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list17(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list18(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list19(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list20(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list21(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list22(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list23(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list24(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list25(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list26(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list27(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list28(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list29(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list30(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list31(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list32(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list33(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list34(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list35(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list36(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list37(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list38(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list39(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list40(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list41(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list42(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list43(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef tup_int_list44(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(list(tup1))\n    \ndef tup_int_list45(tup1):\n    '''\n    Convert a tuple to a list.\n    '''\n    return(tuple(tup1))\n    \ndef "
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return f\"({', '.join([str(i) for i in tup1])})\"\n    \ndef city_function(city_name):\n    '''\n    Write a function that converts a city name to a ZIP code.\n    '''\n    return f'{city_name.upper()[0:2]} {city_name[2:]}'\n    \n    \ndef format_data(data):\n    '''\n    Write a function that takes a list of dictionaries and\n    returns a string.\n    '''\n    return f\"{', '.join(['{} : {}'.format(key, value) for key, value in data])}\"\n    \n    \ndef format_data2(data):\n    '''\n    Write a function that takes a list of dictionaries and\n    returns a string.\n    '''\n    return f'{\", \".join(['{} : {}'.format(key, value) for key, value in data])}'\n    \n    \ndef weather_function(city):\n    '''\n    Write a function that takes a city name and returns weather\n    information for that city.\n    '''\n    url = 'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&appid=f4433dce3e54c1c2fbf3524d9b1e68c2'.format(city)\n    data = requests.get(url).json()\n    data = {\n        'city': city,\n        'temperature': data['main']['temp'],\n        'description': data['weather'][0]['description'],\n        'icon': data['weather'][0]['icon'],\n        'humidity': data['main']['humidity'],\n        'pressure': data['main']['pressure'],\n        'visibility': data['visibility']\n    }\n    return format_data(data)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = ''.join([str(i) for i in tup1])\n    return tup2\n    \ndef main():\n    '''\n    Write a function to find out whether a given sequence is a palindrome.\n    '''\n    # Convert the given sequence to a tuple\n    s = list(tuple(map(int, input(\"Enter a sequence of numbers, separated by commas: \").strip().split(\",\"))))\n    print(\"The sequence is a palindrome: \" + str(s == s[::-1]))\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for index in range(len(tup1)):\n        str_tup = str_tup + str(tup1[index])\n    return str_tup\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1=''\n    for i in range(len(tup1)):\n        str1=str1+str(tup1[i])\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i)\n    return str1\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num > 0:\n            sum_negative = sum_negative + num\n    return sum_negative\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = []\n    for num in nums:\n        if num < 0:\n            neg_nums.append(num)\n    print(sum(neg_nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # import math\n    # nums = [ -1, 2, 3, 4 ]\n    # print(nums)\n    # print(sum(nums))\n    # print(math.inf)\n    negative_num = 0\n    for num in nums:\n        if num < 0:\n            negative_num += num\n        else:\n            pass\n    print(negative_num)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # E.g. list = [2, -3, 5, -5, -2, -3, -5, -2] \n    # 0 => 0 => 1 => -1 => -2 => -3 => -4 => -5 => -6 => -7 => -8\n    # E.g. for [-2, -3, 5, -5, -2, -3, -5, -2] => -4 => 2 => 1 => 0 => -3 => -4 => -5 => -6 => -7 => -8 => -9\n    # if(len(nums) == 0):\n    #     return 0\n    # nums = [1, -2, -3, -4, -5, -6, -7, -8]\n    # return sum_negativenum(nums)\n    total = 0\n    for n in nums:\n        if n < 0:\n            total += -n\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # The function accepts a list of numbers as an argument.\n    # The function should return the sum of the negative numbers as a list.\n    neg = list(filter(lambda x: x < 0, nums))\n    sum = 0\n    for i in range(len(neg)):\n        sum = sum + neg[i]\n    return sum\n    # Remove this line and replace with your code\n    # This one is a bit tricky, and i can't find it without using a third variable.\n    # def sum_negativenum(nums):\n    #     return sum(nums[i] for i in range(len(nums)) if i < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total=0\n    for num in nums:\n        if num<0:\n            total+=num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 0\n    while i < n:\n        j = 0\n        while j < n:\n            if j == i or j == n-i-1:\n                continue\n            if i % 6 == 0 and j % 6 == 0:\n                return n - j - i\n            elif j % 6 == 0 and i % 6 == 0:\n                continue\n            j += 1\n        i += 1\n    return None\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    assert type(n) == int and n > 0, 'Input must be a positive integer.'\n    assert n > 0, 'The input n must be greater than 0.'\n    assert n % 4 == 0, 'The input n must be a multiple of 4.'\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n%2 == 0: \n        return hexagonal_num(n - 1) + hexagonal_num(n - 1 - 1) + hexagonal_num(n + 1)\n    else:\n        return hexagonal_num(n - 2) + hexagonal_num(n - 2 - 1) + hexagonal_num(n + 2)\n    \nprint(hexagonal_num(5))"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 1\n    if (n == 0): \n        return 0\n    while (n!= 0):\n        a = (n-a)\n        b = (n-b)\n        n = (n-b)\n    return a+b\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return((n**2 + n)//2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 0\n    while (i <= n):\n        j = i\n        while (j < n):\n            if (j == n):\n                return i\n            j = j + 2\n        i = i + 2\n    return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    for n in range(1,n+1):\n        n+=n+n\n        \n    return n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 2:\n        return n\n    \n    return hexagonal_num(n//2) + hexagonal_num(n//2 - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        raise ValueError\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(n+1))//"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    '''\n    Given:\n    - a 1D array of integers\n    - Output:\n    - a string indicating which of the integers does not have a zero.\n    '''\n    # TODO: Implement the function\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    # Example:\n    # input:\n    # [1,2,3,4,0,0,0]\n    # output:\n    # '5'\n    # count = {1:0, 2:0, 3:0, 4:0, 0:0}\n    if len(nums) == 0:\n        return '0'\n    else:\n        zero_count = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                zero_count += 1\n        return str(zero_count/len(nums))\n    \ndef test_zero_count():\n    assert zero_count([0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0]) == '5'\n    assert zero_count([1,2,3,4,0,0,0]) == '0'\n    assert zero_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '5'\n    assert zero_count([0,1,2,3,0,0,0]) == '0'\n    assert zero_count([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '5'\n    assert zero_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([0,1,2,3,0,0,0]) == '0'\n    assert zero_count([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '5'\n    assert zero_count([1,1,2,3,4,0,0]) == '0'\n    assert zero_count([1,1,2,3,0,0,0]) == '5'\n    assert zero_count([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([0,1,2,3,0,0,0]) == '0'\n    assert zero_count([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([1,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0]) == '5'\n    assert zero_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '5'\n    assert zero_count([0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '5'\n    assert zero_count([0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '5'\n    assert zero_count([0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([1,1,2,3,0,0,0]) == '5'\n    assert zero_count([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == '0'\n    assert zero_count([1,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n        else:\n            count += 0\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_counts = 0\n    for i in nums:\n        if i == 0:\n            zero_counts += 1\n    return (zero_counts/len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = array('i', [0])\n    for i in nums:\n        if i!= 0:\n            num_zero.append(i)\n    num_zero.append(0)\n    count = 0\n    for i in num_zero:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    i = 0\n    j = 1\n    arr = [0,0]\n    while i < len(nums):\n        if nums[i] == 0:\n            arr[0] += 1\n        if nums[j] == 0:\n            arr[1] += 1\n        i += 1\n        j += 1\n    return arr\ndef make_array(nums):\n    '''\n    Given an array of integers, create an array that is filled with zeroes.\n    '''\n    arr = array('i',nums)\n    while arr[0] == 0:\n        arr[1] = arr[1] + 1\n    while arr[1] == 0:\n        arr[0] = arr[0] + 1\n    return arr\ndef zero_array(nums):\n    '''\n    Given an array of integers, return the array with all 0s\n    '''\n    arr = make_array(nums)\n    j = 0\n    i = 0\n    while i < len(nums):\n        if nums[i] == 0:\n            arr[0] += 1\n            arr[1] = arr[1] + 1\n        else:\n            arr[0] = arr[0] + 1\n        i += 1\n        j = j + 1\n    return arr\ndef count_zero(nums):\n    '''\n    Given an array of integers, return the number of 0s.\n    '''\n    arr = zero_array(nums)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count += 1\n    return count\ndef make_triangle(nums):\n    '''\n    Given an array of integers, return a triangle with \n    all the values that are 0 in the middle.\n    '''\n    arr = array('i',nums)\n    while arr[0] == 0:\n        arr[1] = arr[1] + 1\n    while arr[1] == 0:\n        arr[0] = arr[0] + 1\n    while arr[2] == 0:\n        arr[3] = arr[3] + 1\n    return arr\ndef triangle(nums):\n    '''\n    Given an array of integers, return the number of triangles\n    '''\n    arr = make_triangle(nums)\n    count = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] == 0:\n            count += 1\n        else:\n            count += 1\n            i = i + 1\n        i = i + 1\n    return count\ndef count_triangles(nums):\n    '''\n    Given an array of integers, return the number of triangles\n    '''\n    arr = make_triangle(nums)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count += 1\n    return count\ndef nonzero_count(nums):\n    '''\n    Given an array of integers, return the number of non-zero\n    '''\n    arr = array('i',nums)\n    j = 0\n    i = 0\n    while i < len(nums):\n        if arr[i]!= 0:\n            j = j + 1\n        i += 1\n    return j\ndef triangle_count(nums):\n    '''\n    Given an array of integers, return the number of triangles\n    '''\n    arr = make_triangle(nums)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            count += 1\n    return count\ndef nonzero_triangles(nums):\n    '''\n    Given an array of integers, return the number of triangles\n    '''\n    arr = make_triangle(nums)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\ndef main():\n    nums = array(int, input().split())\n    n = len(nums)\n    print(zero_count(nums))\nmain()\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return (zero_count / len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    l = len(nums)\n    if l == 0:\n        return 0\n    \n    non_zero = 0\n    zero_count = 0\n    zeroes = [0] * l\n    zeroes_non_zero = [0] * l\n    \n    for i in range(l):\n        if nums[i] == 0:\n            non_zero += 1\n        elif nums[i] == 1:\n            zero_count += 1\n        else:\n            zeroes_non_zero[i] = non_zero\n            zero_count = 0\n    \n    if zero_count == 0:\n        return 0\n    else:\n        return round((zero_count / non_zero), 3)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x == 0:\n            count = count + 1\n    return count / len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n == 0):\n        return True\n    if(n == 1):\n        return False\n    if(n < 0):\n        return False\n    \n    if(n in {1,2,4,8,16}):\n        return True\n    \n    for i in range(2, n+1):\n        if(n % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n==3:\n        return True\n    else:\n        result = is_Sum_Of_Powers_Of_Two(n//2)\n        if result is True:\n            return result\n        else:\n            return result + is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #First we want to create a list of two power_nums that has n elements.\n    power_nums = list(range(1,n+1))\n    #Now we will check if the given number is sum of two power_nums, we will return true if it is not, else we will return false.\n    def check_nums(x):\n        #create a set to hold the powers of two\n        set_two = set(range(1,x+1))\n        #Check for all the powers in the power_nums set.\n        for power in set_two:\n            if power_nums[power-1]**2 == x:\n                return False\n        #return true if the given number is sum of powers in the set\n        return True\n    #Now we will return the true or false value as returned by check_nums.\n    return check_nums(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Your code here\n    sum_of_powers=0\n    for i in range(1,n+1):\n        sum_of_powers+=i\n        if(sum_of_powers>=2):\n            break\n    if(sum_of_powers==n):\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n <= 0: \n        return False\n    for i in range(2, n+1):\n        if n%i == 0:\n            return False\n    return True\n    "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        k = n-1\n        while k > 0:\n            if (n%k == 0):\n                return 1\n            else:\n                k -= 1\n    return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_2 = 2\n    for i in range(2, n):\n        if(i**power_of_2)%1==0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n%2 == 0:\n        return False\n    while n > 0:\n        if n%2 == 0:\n            if n in [2, 4, 8]:\n                return False\n            else:\n                return True\n        n = n//2\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = n\n    for n in range(1, n+1):\n        if n == 2:\n            return True\n        if (n*2) == i:\n            return True\n        if i % n!= 0:\n            return False\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # TODO: define the function\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r ** 2\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Your code here\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print('Circumference:', circumference)\n    \n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # YOUR CODE HERE\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for num in test_list:\n        if isinstance(num, list):\n            for i in range(0, len(num)):\n                num[i] = extract_singly(num[i])\n            num.append(num[-1])\n        else:\n            num = extract_singly(num)\n    return num\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # use a copy of the list to eliminate the duplicates\n    # create a new list with a copy of the original list\n    # put that new list in the variable, original_list\n    # run this function again\n    # return the result\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result = []\n    for entry in test_list:\n        for item in entry:\n            result.append(item)\n    return result\n    \ndef main():\n    '''\n    Write a function to flatten the lists into a single set of numbers.\n    '''\n    \n    #Test cases\n    test_list = [[1, 2, 3], [4, 5], [6, 7, 8], [9]]\n    test_result = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    out_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            for sub_item in item:\n                out_list.append(sub_item)\n        else:\n            out_list.append(item)\n    return out_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [int(num) for sublist in test_list for num in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Your code here\n    # make a function that recursively flattens the given list of lists into a single set of numbers\n    def flatten(lst):\n        '''\n        Returns a list of numbers from the list.\n        '''\n        lst = [0 for i in range(len(lst))]\n        if len(lst) == 1:\n            return lst\n        for i in range(len(lst)):\n            if type(lst[i]) == type([]):\n                for item in lst[i]:\n                    lst[i] = flatten(item)\n            else:\n                lst[i] = flatten(lst[i])\n        return lst\n    return flatten(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    lst = []\n    for el in test_list:\n        if type(el) == list:\n            lst += el\n        else:\n            lst.append(el)\n    return lst\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for i in test_list:\n        for j in i:\n            output.append(j)\n    return output\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.extend(i)\n    return new_list\n    "
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_sort_nums = nums\n    while len(pancake_sort_nums) > 1:\n        for i in range(len(pancake_sort_nums)-1):\n            if pancake_sort_nums[i] > pancake_sort_nums[i+1]:\n                pancake_sort_nums[i], pancake_sort_nums[i+1] = pancake_sort_nums[i+1], pancake_sort_nums[i]\n        print(pancake_sort_nums)\n    return pancake_sort_nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    first = len(nums)\n    second = len(nums) - 1\n    while first > second:\n        if nums[first] > nums[second]:\n            nums[first], nums[second] = nums[second], nums[first]\n        first -= 1\n        second -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    index = len(nums) - 1\n    while index > 0:\n        for i in range(index):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        index -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Do a quick sort\n    quick_sort(nums, 0, len(nums)-1)\n    \n    #Sort the numbers in reverse order\n    for i in range(len(nums)):\n        if i < len(nums)-1:\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                quick_sort(nums, 0, len(nums)-1)\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # find the length of the array\n    length = len(nums)\n    # now sort the array\n    # notice: the array has length = len(nums)\n    # reverse the array to swap the first element with the last element\n    for i in range(length//2, -1, -1):\n        nums[i], nums[length-i] = nums[length-i], nums[i]\n        \n    # now re-sort the array\n    # reversing the array in place is not enough\n    # just remove the last element and place it at the end\n    # and swap the first element with the last\n    for j in range(length-1, -1, -1):\n        nums[j], nums[0] = nums[0], nums[j]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        pancake_index = len(nums)-i-1\n        # find the first element in the sorted list\n        while nums[pancake_index] < nums[i]:\n            pancake_index -= 1\n        # insert the element at the sorted position\n        # you can insert any element into the list\n        # add the element to the end of the sorted list\n        # if you don't want to insert at any index, just delete the element\n        # you can add multiple elements to the end of the list\n        nums[pancake_index+1], nums[i] = nums[i], nums[pancake_index+1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    m = len(nums)\n    if m == 0:\n        return []\n    # print(nums)\n    p = m - 1\n    while p >= 0:\n        # print(p)\n        # print(p+1)\n        if nums[p] > nums[p+1]:\n            nums[p], nums[p+1] = nums[p+1], nums[p]\n            # print(nums)\n        else:\n            while nums[p] >= nums[p+1]:\n                p -= 1\n            nums[p+1], nums[p] = nums[p], nums[p+1]\n        # print(nums)\n        p -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    start = 0\n    end = len(nums) - 1\n    while (start < end):\n        if nums[start] > nums[end]:\n            nums[start], nums[end] = nums[end], nums[start]\n            end -= 1\n            start += 1\n        elif nums[start] <= nums[end]:\n            start += 1\n        else:\n            nums[start], nums[end] = nums[end], nums[start]\n            end -= 1\n            start += 1\n    print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # we want to start from the end of the list and search the next index\n    # starting from that index, so that we can be sure of the index we are on,\n    # and we can move from it to the next index\n    # e.g. [1, 2, 4, 3, 5] becomes [1, 2, 3, 4, 5], and [1, 2, 5, 3, 4] becomes [1, 2, 3, 5, 4]\n    # if we were to search from the end of the list, all the elements were on the right side,\n    # so we can only make a recursive call to sort the list from the right side.\n    # therefore, we need to go from the end of the list, to the start, so we can search for the next index.\n    # if we didn't find a number that starts at the end of the list, we found the end, so return [end]\n    # otherwise, we need to go from the start, to the end, so we can search for the next number.\n    # i.e. [1, 2, 4, 3, 5] becomes [1, 2, 3, 4, 5], and [1, 2, 5, 3, 4] becomes [1, 2, 3, 5, 4]\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    for item in list3:\n        if item in list1:\n            result += 1\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1=list1.copy()\n    list2=list2.copy()\n    list3=list3.copy()\n    list1=list1[0::2]\n    list2=list2[0::2]\n    list3=list3[0::2]\n    dic1={}\n    dic2={}\n    for i in range(len(list1)):\n        dic1[list1[i]]=i\n    for i in range(len(list2)):\n        dic2[list2[i]]=i\n    for i in range(len(list3)):\n        dic3[list3[i]]=i\n    print(dic1)\n    print(dic2)\n    print(dic3)\n    a=[]\n    for i in range(len(list1)):\n        if list1[i] in dic1:\n            a.append(dic1[list1[i]])\n        if list2[i] in dic2:\n            a.append(dic2[list2[i]])\n        if list3[i] in dic3:\n            a.append(dic3[list3[i]])\n    a.sort()\n    return len(a)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for item in list1:\n        if item in list2:\n            count += 1\n    for item in list3:\n        if item in list2:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    s1=set(list1)\n    s2=set(list2)\n    s3=set(list3)\n    if len(s1.intersection(s2))==0:\n        return \"No Duplicates\"\n    if len(s1.intersection(s3))==0:\n        return \"No Duplicates\"\n    else:\n        return len(s1.intersection(s2).intersection(s3))\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if len(list1)==len(list2):\n        for i in range(len(list1)):\n            if list1[i]==list2[i]:\n                count+=1\n        return count\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_count = 0\n    list1_list3 = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list1_list3.append(i)\n    list_count += len(list1_list3)\n    list_count += len(list2)\n    list_count += len(list3)\n    return list_count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return -1\n    dic = {}\n    for i in range(len(list1)):\n        dic[list1[i]] = dic.get(list1[i],0) + 1\n    for j in range(len(list2)):\n        if list1[j] not in dic or dic[list1[j]]!= 1:\n            return -1\n        dic[list2[j]] = dic.get(list2[j],0) + 1\n    for k in range(len(list3)):\n        if list2[k] not in dic or dic[list2[k]]!= 1:\n            return -1\n        dic[list3[k]] = dic.get(list3[k],0) + 1\n    for l in range(len(list1)):\n        if list2[l] not in dic or dic[list2[l]]!= 1:\n            return -1\n        dic[list1[l]] = dic.get(list1[l],0) + 1\n    for m in range(len(list3)):\n        if list3[m] not in dic or dic[list3[m]]!= 1:\n            return -1\n        dic[list2[m]] = dic.get(list2[m],0) + 1\n    return len(dic)\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # check for the same pairs\n    for i in range(3):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            continue\n        elif list1[i]==list2[i] and list2[i]==list3[i]:\n            return True\n        elif list1[i]==list3[i] and list2[i]==list3[i]:\n            return True\n    return False\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = 0 \n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j] == \"C\":\n                n += 1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in range(len(Input)):\n        if Input[i] == \"[\" or Input[i] == \"]\":\n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Input = (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    return len(Input"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_of_lists = 0\n    for i in range(len(Input)): \n        for j in range(len(Input[i])):\n            if Input[i][j] == '{':\n                num_of_lists += 1\n            else: \n                num_of_lists -= 1\n                break\n    return num_of_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # For example, if I want to find all odd numbers, I have to go through each number and check whether that number is odd\n    # or even\n    # If the number is even, it's a list and can't be a number\n    # If the number is odd, it's a list and can't be a number\n    # I have to check whether the number is even or odd\n    # I have to return a list of all odd numbers and even numbers\n    # Here I have to do this by going through each number, and checking if the number is even or odd\n    # If the number is even, it's a list and can't be a number\n    # If the number is odd, it's a list and can't be a number\n    # If the number is even, it's a list and can't be a number\n    # I have to return a list of all odd numbers and even numbers\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # I have to return a list of all odd numbers and even numbers\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple\n    # Here I have to do this by using the same variables, and using the same function, I can find all the even numbers in the tuple\n    # and I can find all the odd numbers in the tuple"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code goes here\n    # check if list exists in tuple\n    if Input[0] in L:\n        # add index to tuples\n        Tup1 = (Input[0], Input[1])\n        # add length of list\n        Tup1_len = len(Tup1)\n        # check if length is one more than length of list\n        # if so, replace the index index with length index\n        # if not, add length to length of list\n        if Tup1_len == 1:\n            Tup2 = (Input[0], Input[1])\n        else:\n            Tup2_len = len(Tup2)\n            if Tup2_len == 1:\n                Tup3 = (Input[0], Input[1])\n            else:\n                Tup3_len = len(Tup3)\n                if Tup3_len == 1:\n                    Tup4 = (Input[0], Input[1])\n                else:\n                    Tup4_len = len(Tup4)\n                    if Tup4_len == 1:\n                        Tup5 = (Input[0], Input[1])\n                    else:\n                        Tup5_len = len(Tup5)\n                        if Tup5_len == 1:\n                            Tup6 = (Input[0], Input[1])\n                        else:\n                            Tup6_len = len(Tup6)\n                            if Tup6_len == 1:\n                                Tup7 = (Input[0], Input[1])\n                            else:\n                                Tup7_len = len(Tup7)\n                                if Tup7_len == 1:\n                                    Tup8 = (Input[0], Input[1])\n                                else:\n                                    Tup8_len = len(Tup8)\n                                    if Tup8_len == 1:\n                                        Tup9 = (Input[0], Input[1])\n                                    else:\n                                        Tup9_len = len(Tup9)\n                                        if Tup9_len == 1:\n                                            Tup10 = (Input[0], Input[1])\n                                        else:\n                                            Tup10_len = len(Tup10)\n                                            if Tup10_len == 1:\n                                                Tup11 = (Input[0], Input[1])\n                                            else:\n                                                Tup11_len = len(Tup11)\n                                                if Tup11_len == 1:\n                                                    Tup12 = (Input[0], Input[1])\n                                                else:\n                                                    Tup12_len = len(Tup12)\n                                                    if Tup12_len == 1:\n                                                        Tup13 = (Input[0], Input[1])\n                                                    else:\n                                                        Tup13_len = len(Tup13)\n                                                        if Tup13_len == 1:\n                                                            Tup14 = (Input[0], Input[1])\n                                                        else:\n                                                            Tup14_len = len(Tup14)\n                                                            if Tup14_len == 1:\n                                                                Tup15 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup15_len = len(Tup15)\n                                                                if Tup15_len == 1:\n                                                                    Tup16 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup16_len = len(Tup16)\n                                                                if Tup16_len == 1:\n                                                                    Tup17 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup17_len = len(Tup17)\n                                                                if Tup17_len == 1:\n                                                                    Tup18 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup18_len = len(Tup18)\n                                                                if Tup18_len == 1:\n                                                                    Tup19 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup19_len = len(Tup19)\n                                                                if Tup19_len == 1:\n                                                                    Tup20 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup20_len = len(Tup20)\n                                                                if Tup20_len == 1:\n                                                                    Tup21 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup21_len = len(Tup21)\n                                                                if Tup21_len == 1:\n                                                                    Tup22 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup22_len = len(Tup22)\n                                                                if Tup22_len == 1:\n                                                                    Tup23 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup23_len = len(Tup23)\n                                                                if Tup23_len == 1:\n                                                                    Tup24 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup24_len = len(Tup24)\n                                                                if Tup24_len == 1:\n                                                                    Tup25 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup25_len = len(Tup25)\n                                                                if Tup25_len == 1:\n                                                                    Tup26 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup26_len = len(Tup26)\n                                                                if Tup26_len == 1:\n                                                                    Tup27 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup27_len = len(Tup27)\n                                                                if Tup27_len == 1:\n                                                                    Tup28 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup28_len = len(Tup28)\n                                                                if Tup28_len == 1:\n                                                                    Tup29 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup29_len = len(Tup29)\n                                                                if Tup29_len == 1:\n                                                                    Tup30 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup30_len = len(Tup30)\n                                                                if Tup30_len == 1:\n                                                                    Tup31 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup31_len = len(Tup31)\n                                                                if Tup31_len == 1:\n                                                                    Tup32 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup32_len = len(Tup32)\n                                                                if Tup32_len == 1:\n                                                                    Tup33 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup33_len = len(Tup33)\n                                                                if Tup33_len == 1:\n                                                                    Tup34 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup34_len = len(Tup34)\n                                                                if Tup34_len == 1:\n                                                                    Tup35 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup35_len = len(Tup35)\n                                                                if Tup35_len == 1:\n                                                                    Tup36 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup36_len = len(Tup36)\n                                                                if Tup36_len == 1:\n                                                                    Tup37 = (Input[0], Input[1])\n                                                            else:\n                                                                Tup37_len = len(Tup37)\n                                                                if Tup37_len == 1"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L=0\n    for i in Input:\n        if type(i) == type(1):\n            L += 1\n    return L\ndef find_item(List, Item):\n    '''\n    Write a function to return a tuple of all the occurrences of the given item in the given list.\n    '''\n    if type(List) == type([]):\n        L=[]\n        for i in List:\n            if type(i) == type(Item):\n                if i in List:\n                    L.append(i)\n        return L\n    else:\n        return 'List does not exist'\ndef print_list(L, S=''):\n    '''\n    Write a function that prints the tuple given in input.\n    '''\n    if type(L) == type([]):\n        for i in L:\n            print(i, S)\n    else:\n        print(L, S)\ndef main():\n    '''\n    Write a function that receives a tuple as an input and prints the number of tuples present in the tuple.\n    '''\n    T = input().split()\n    print('Number of tuples: ', find_lists(T))\n    print('Number of items: ', find_item(T, 'hi'))\n    print_list(find_item(T, 'hi'))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n_list = 0\n    for i in Input:\n        if type(i) == list:\n            n_list += 1\n    return n_list\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # create a dictinary to store list name and its value\n    list_dict = {}\n    for el in Input:\n        if el not in list_dict.keys():\n            list_dict[el] = 0\n        list_dict[el] += 1\n    \n    # create a list to store the num of lists\n    list_of_lists = []\n    for k, v in list_dict.items():\n        list_of_lists.append(v)\n    return(list_of_lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #If there are more than one numbers in the tuple, return 0\n    if len(Input) > 1:\n        return 0\n    #If there is only 1 number in the tuple, return 1\n    if len(Input) == 1:\n        return 1\n    #If there are no numbers in the tuple, return 0\n    else:\n        return 0\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    abs_diff = 0\n    for i in range(len(arr)):\n        abs_diff = abs(arr[i] - arr[i+1])\n        if abs_diff > abs_diff:\n            abs_diff = abs_diff\n    return abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = 0\n    # iterating through the elements \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            # checking if the difference is greater than the current largest \n            if abs(arr[i] - arr[j]) > maxDiff: \n                maxDiff = abs(arr[i] - arr[j]) \n    return maxDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    l = len(arr)\n    for i in range(l-1):\n        for j in range(i+1, l):\n            if abs(arr[i] - arr[j]) > abs(arr[i] + arr[j]):\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        max_abs_diff = max(max_abs_diff, arr[i] - arr[i - 2])\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    A = arr[0]\n    B = arr[1]\n    for i in range(2, len(arr)):\n        if A > B:\n            A = B\n            B = arr[i]\n    return A - B\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Your code here\n    max_diff = 0\n    # read elements from array\n    arr1 = []\n    arr2 = []\n    for i in range(len(arr)):\n        arr1.append(arr[i][0])\n        arr2.append(arr[i][1])\n    # find max difference\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr1[i]!= arr2[j]:\n                max_diff = arr1[i] - arr2[j]\n                break\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    result = 0\n    length = len(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sum_array = 0\n    max_abs_diff = 0\n    for num in arr:\n        sum_array += num\n    for num in arr:\n        diff = abs(num - sum_array)\n        if diff > max_abs_diff:\n            max_abs_diff = diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    res = arr[0]\n    for i in range(1, len(arr)): \n        res = max(res - arr[i], arr[i])\n    return res\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == n:\n        return a, b\n    elif a == 0:\n        return None\n    else:\n        a = find_solution(a, b // a, n)\n        b = b % a\n        return find_solution(a, b, n)\n    "
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return (a, b)\n    if n < a or n < b:\n        return None\n    # Find the answer with a recursive call\n    if n == a:\n        return (a, n)\n    if n == b:\n        return (n, a)\n    # Find the answer with a recursion call\n    else:\n        # If a is smaller than the current answer, find the solution of a smaller one\n        if a < n:\n            # Return the result of the previous call to the recursion\n            return find_solution(n, b, a)\n        # If a is larger than the current answer, find the solution of a larger one\n        else:\n            # Return the result of the previous call to the recursion\n            return find_solution(a, n, b)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # A valid solution is a tuple of two numbers, both in the range [0, b)\n    if a <= 0 and b <= 0:\n        return None\n    # If there are two solutions\n    if a <= 0 or b <= 0:\n        return (None, None)\n    \n    # The greatest common divisor of a and b is the number of multiples of that number\n    gcd = int(math.gcd(a, b))\n    \n    # Calculate the lowest common multiple of a and b as x and y\n    low = 1\n    while b % low!= 0:\n        low += 1\n    x = a // gcd\n    y = b // gcd\n    \n    # Calculate the number of multiples of x and y that satisfy the constraints\n    xm = 0\n    ym = 0\n    while xm < x:\n        xm += 1\n        yield (x - xm)\n        while ym < y:\n            ym += 1\n            yield (y - ym)\n        \n    # If no solution exists, return None\n    if x == y:\n        return (None, None)\n    \n    # Return the lowest common multiple as x and y\n    return (low, x * y)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    def summation(a, b, n):\n        \"\"\"\n        Computes the sum of all integers x and all integers y between 1 and n.\n        \"\"\"\n        res = []\n        \n        while len(res) < n:\n            x = a + b\n            y = n - x\n            \n            if x < n:\n                res += [x]\n            elif x == n:\n                res += [y]\n                \n            b = x\n        \n        return res\n    \n    def is_equal(a, b, n):\n        \"\"\"\n        Computes whether there exists a solution in the given range a to b in the given sum.\n        \"\"\"\n        for x in summation(a, b, n):\n            if x!= n:\n                return False\n        \n        return True\n    \n    def num_triplets(n):\n        \"\"\"\n        Computes the number of triplets in the given sum.\n        \"\"\"\n        if n < 0:\n            return 0\n        \n        if is_equal(1, n, 3):\n            return 1\n        \n        if is_equal(2, n, 3):\n            return 1\n        \n        return len(summation(1, 2, 3) // 3)\n    \n    # Get the function that should be used\n    if n < 0:\n        return None\n    elif n == 0:\n        return (None, None)\n    elif n == 1:\n        return (1, 0)\n    elif n == 2:\n        return (1, 1)\n    elif n % 3 == 0:\n        return (num_triplets(n // 3), num_triplets(n // 3) + num_triplets(n // 3))\n    else:\n        return None\n    \ndef main():\n    \"\"\"\n    Execute the given function with the given input and check the output.\n    \"\"\"\n    \n    a = 3\n    b = 5\n    n = 5\n    \n    print(find_solution(a, b, n))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return (b/a, b)\n    if a == 1:\n        return (b, b/a)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = 0\n    if a >= 0 and b >= 0 and n > 0:\n        x = -1\n    elif a < 0 and b < 0 and n > 0:\n        x = -2\n    elif a > 0 and b > 0 and n > 0:\n        x = -3\n    elif a < 0 and b < 0 and n < 0:\n        x = -4\n    elif a < 0 and b > 0 and n < 0:\n        x = -5\n    elif a > 0 and b < 0 and n < 0:\n        x = -6\n    elif a < 0 and b > 0 and n < 0:\n        x = -7\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # === YOUR CODE HERE ===\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    n = n - 1\n    if n == 0:\n        return None\n    elif a * b == n:\n        return (a, b)\n    else:\n        numerator = a * b\n        numerator_n = n\n        x = None\n        y = None\n        while numerator_n > 0:\n            if numerator_n % 2 == 0:\n                x = numerator // b\n                y = n // b\n                numerator_n = numerator_n // b\n            else:\n                x = numerator // a\n                y = n // a\n                numerator_n = numerator_n // a\n        if x!= None and y!= None:\n            return (x, y)\n        else:\n            return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return (0, 0)\n    x, y = None, None\n    a = find_solution(a, n % a, a)\n    b = find_solution(b, n % b, b)\n    if a!= None and b!= None:\n        x = (a[0] + b[0]) // a[1]\n        y = (a[1] + b[1]) // a[0]\n    return x, y\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == len(list2):\n        for i in list1:\n            list1.remove(i)\n    else:\n        raise Exception(f\"Not a perfect square\")\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in list1:\n        list2.remove(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list3.append(list2[j])\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    \n    list1.pop()\n    list2.pop()\n    \n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        try:\n            list1.pop(list1.index(i))\n        except:\n            pass\n    for j in range(len(list2)):\n        try:\n            list2.pop(list2.index(j))\n        except:\n            pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # if len(list2) < len(list1):\n    #     return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3=[]\n    for i in range(len(list1)):\n        list3.append(list1[i])\n    for j in range(len(list2)):\n        list3.remove(list2[j])\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in range(0, len(list1)):\n        for y in range(0, len(list2)):\n            if list1[x] == list2[y]:\n                list1.remove(list1[x])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_to_remove = list(set(list1) - set(list2))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return sum_series(n//2) + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    return n * (n - 2) + (n - 4"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return n + (n-2) + (n-4)\n    return (n + sum_series(n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    num = 0\n    for i in range(n-1, -1, -1):\n        num = num + (i + 1) * (n//i)\n    return num\n    \n    \ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a given number (n).\n    '''\n    return 1 if n == 0 else n * factorial(n-1)\n    \n    \ndef factorial_iter(n):\n    '''\n    Given a number, calculate the factorial of it (n).\n    '''\n    if n <= 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n * factorial_iter(n-1)\n    \n    \ndef factorial_n(n):\n    '''\n    Return the factorial of a given number of iterations.\n    '''\n    return factorial(n) // factorial_iter(n)\n    \n    \ndef primes_from_2_to_10(n):\n    '''\n    Given a number, return a list of the prime numbers from 2 to 10.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        primes = [2]\n        i = 3\n        while i <= n:\n            if i not in primes:\n                primes.append(i)\n                for j in range(i*i, n+1, i):\n                    primes.append(j)\n                i += 1\n            else:\n                pass\n                \n    return primes\n    \n    \ndef primes_from_1_to_10(n):\n    '''\n    Given a number, return a list of the prime numbers from 1 to 10.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        primes = [2]\n        i = 3\n        while i <= n:\n            if i not in primes:\n                primes.append(i)\n                for j in range(i*i, n+1, i):\n                    primes.append(j)\n                i += 1\n            else:\n                pass\n                \n    return primes\n    \n    \ndef prime_number_iter(n):\n    '''\n    Given a number, return an iterator which yields prime numbers up to it.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        prime = [2]\n        i = 3\n        while i <= n:\n            if i not in prime:\n                prime.append(i)\n                for j in range(i*i, n+1, i):\n                    prime.append(j)\n                i += 1\n            else:\n                pass\n                \n    return prime\n    \n    \ndef prime_number(n):\n    '''\n    Given a number, return a list of prime numbers up to it.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        prime = [2]\n        i = 3\n        while i <= n:\n            if i not in prime:\n                prime.append(i)\n                for j in range(i*i, n+1, i):\n                    prime.append(j)\n                i += 1\n            else:\n                pass\n    return prime\n        \n    \ndef divisors_iter(n):\n    '''\n    Given a number, return an iterator which yields all divisors up to it.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        divisors = [2]\n        i = 3\n        while i <= n:\n            if i not in divisors:\n                divisors.append(i)\n                for j in range(i*i, n+1, i):\n                    divisors.append(j)\n                i += 1\n            else:\n                pass\n    return divisors\n    \n    \ndef divisors(n):\n    '''\n    Given a number, return an iterator which yields all divisors up to it.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        divisors = [2]\n        i = 3\n        while i <= n:\n            if i not in divisors:\n                divisors.append(i)\n                for j in range(i*i, n+1, i):\n                    divisors.append(j)\n                i += 1\n            else:\n                pass\n    return divisors\n    \n    \ndef prime_numbers_from_1_to_n(n):\n    '''\n    Given a number, return a list of all prime numbers from 1 to the number.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        prime = [2]\n        i = 3\n        while i <= n:\n            if i not in prime:\n                prime.append(i)\n                for j in range(i*i, n+1, i):\n                    prime.append(j)\n                i += 1\n            else:\n                pass\n        return prime\n        \n    \ndef prime_number_from_1_to_n(n):\n    '''\n    Given a number, return a list of all prime numbers from 1 to the number.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        prime = [2]\n        i = 3\n        while i <= n:\n            if i not in prime:\n                prime.append(i)\n                for j in range(i*i, n+1, i):\n                    prime.append(j)\n                i += 1\n            else:\n                pass\n        return prime\n        \n    \ndef prime_numbers_from_1_to_n(n):\n    '''\n    Given a number, return a list of all prime numbers from 1 to the number.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        prime = [2]\n        i = 3\n        while i <= n:\n            if i not in prime:\n                prime.append(i)\n                for j in range(i*i, n+1, i):\n                    prime.append(j)\n                i += 1\n            else:\n                pass\n        return prime\n        \n    \ndef prime_numbers_from_1_to_n(n):\n    '''\n    Given a number, return a list of all prime numbers from 1 to the number.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        prime = [2]\n        i = 3\n        while i <= n:\n            if i not in prime:\n                prime.append(i)\n                for j in range(i*i, n+1, i):\n                    prime.append(j)\n                i += 1\n            else:\n                pass\n        return prime\n        \n    \ndef divisors_from_1_to_n(n):\n    '''\n    Given a number, return an iterator which yields all divisors up to it.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        divisors = [2]\n        i = 3\n        while i <= n:\n            if i not in divisors:\n                divisors.append(i)\n                for j in range(i*i, n+1, i):\n                    divisors.append(j)\n                i += 1\n            else:\n                pass\n    return divisors\n    \n    \ndef divisors_from_1_to_n(n):\n    '''\n    Given a number, return an iterator which yields all divisors up to it.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    x = n\n    while x > 0:\n        result = result + (x % 10)\n        x //= 10\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0: return 0\n    return n + sum_series(n - 2 * i) + sum_series(n - 4 * i)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    return n-2*sum_series(n-1)\n    \n    \ndef sum_series_no_overflow(n):\n    '''\n    Given a number, return the sum of the series from 0 to n // 2.\n    '''\n    if n == 1:\n        return 0\n    return (n-2)*sum_series_no_overflow(n-1)\n    \n    \ndef sum_divisible(n):\n    '''\n    Given an integer, return the sum of its digits.\n    '''\n    \n    if n <= 2:\n        return n\n    return sum_divisible(n-1) + n\n    \n    \ndef sum_divisible_no_overflow(n):\n    '''\n    Given an integer, return the sum of its digits.\n    '''\n    \n    if n <= 2:\n        return n\n    return sum_divisible_no_overflow(n-1) + n\n    \n    \ndef fibonacci(n):\n    '''\n    Given an integer, return the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef fibonacci_no_overflow(n):\n    '''\n    Given an integer, return the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci_no_overflow(n-1) + fibonacci_no_overflow(n-2)\n    \n    \ndef memoize(f):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = f(n)\n        return cache[n]\n        \n    return rec\n    \n    \ndef memoize_no_overflow(f):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + rec(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef memoize_dynamic(f):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + f(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef memoize_dynamic_no_overflow(f):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + f(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef fibonacci_dynamic(n):\n    '''\n    Given an integer, return the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci_dynamic(n-1) + fibonacci_dynamic(n-2)\n    \n    \ndef fibonacci_dynamic_no_overflow(n):\n    '''\n    Given an integer, return the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci_dynamic_no_overflow(n-1) + fibonacci_dynamic_no_overflow(n-2)\n    \n    \ndef fibonacci_memoize(n):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + rec(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef fibonacci_memoize_no_overflow(n):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + rec(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef fibonacci_memoize_dynamic(n):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + rec(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef fibonacci_memoize_dynamic_no_overflow(n):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + rec(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef fibonacci_dynamic_memoize(n):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + rec(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef fibonacci_dynamic_memoize_no_overflow(n):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + rec(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef fibonacci_dynamic_memoize_dynamic(n):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache = {}\n    def rec(n):\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        cache[n] = rec(n-1) + rec(n-2)\n        return cache[n]\n        \n    return rec\n    \n    \ndef fibonacci_dynamic_memoize_dynamic_no_overflow(n):\n    '''\n    A memoization approach for memoizing the results of a function.\n    '''\n    cache "
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #if n<2: return 0\n    #return n\n    result = 0\n    for i in range(n,0,-2):\n        result += i\n    return result\n    \nprint(sum_series(8))"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(0, n, 2):\n        total = total + i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2, -1, -1):\n        result += i + (n // 2 - i)\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l = float(l)\n    area = 0\n    for i in range(0, s):\n        area += l*tan(pi/s)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += tan(i * pi / l)\n    return area * s\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # the normal length of the line\n    l_x = s / 2\n    # the outer part of the line\n    x = 0.5 * (s + l_x)\n    # the inside part of the line\n    l_y = l_x\n    # the second part of the line\n    y = 0.5 * (l_y + l_x)\n    # return the area of the line\n    return (x*y)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area = area + (s / 2.0) * tan(pi / l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # your code goes here\n    area = s * l\n    return area\ndef area_rectangle(r):\n    '''\n    Write a function to calculate the area of a rectangle given its height and width.\n    '''\n    # your code goes here\n    area = r.height * r.width\n    return area\ndef area_circle(c):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    # your code goes here\n    area = pi * c**2\n    return area\ndef area_parallelogram(p):\n    '''\n    Write a function to calculate the area of a parallelogram given its base and height.\n    '''\n    # your code goes here\n    area = 2 * pi * p.base * p.height\n    return area\ndef area_triangle(t):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    # your code goes here\n    area = 0.5 * tan(t.base/2) * t.height\n    return area\ndef area_rectangle_triangle(r, t):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    # your code goes here\n    area = r.height * r.base * t.height\n    return area\ndef area_circle_triangle(c, t):\n    '''\n    Write a function to calculate the area of a circle given its radius and its base and height.\n    '''\n    # your code goes here\n    area = c * t.height\n    return area\ndef area_parallelogram_triangle(p, t):\n    '''\n    Write a function to calculate the area of a parallelogram given its base and height.\n    '''\n    # your code goes here\n    area = 2 * pi * p.base * p.height * t.height\n    return area\ndef area_triangle_parallelogram(p, t):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    # your code goes here\n    area = 0.5 * tan(p.base/2) * t.height * p.height\n    return area\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its side length.\n    '''\n    # your code goes here\n    area = s ** 2\n    return area\ndef perimeter_square(s):\n    '''\n    Write a function to calculate the perimeter of a square given its side length.\n    '''\n    # your code goes here\n    area = 2 * s\n    return area\ndef perimeter_rectangle(r):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its width and height.\n    '''\n    # your code goes here\n    area = r.width * r.height\n    return area\ndef perimeter_circle(c):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius.\n    '''\n    # your code goes here\n    area = 2 * pi * c\n    return area\ndef perimeter_parallelogram(p):\n    '''\n    Write a function to calculate the perimeter of a parallelogram given its base and height.\n    '''\n    # your code goes here\n    area = p.base * p.height\n    return area\ndef perimeter_triangle(t):\n    '''\n    Write a function to calculate the perimeter of a triangle given its base and height.\n    '''\n    # your code goes here\n    area = t.height * t.base\n    return area\ndef perimeter_rectangle_triangle(r, t):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its base and height.\n    '''\n    # your code goes here\n    area = r.height * r.base * t.height\n    return area\ndef perimeter_circle_triangle(c, t):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius and its base and height.\n    '''\n    # your code goes here\n    area = c * t.height\n    return area\ndef perimeter_parallelogram_triangle(p, t):\n    '''\n    Write a function to calculate the perimeter of a parallelogram given its base and height.\n    '''\n    # your code goes here\n    area = p.base * p.height * t.height\n    return area\ndef perimeter_triangle_parallelogram(p, t):\n    '''\n    Write a function to calculate the perimeter of a triangle given its base and height.\n    '''\n    # your code goes here\n    area = 2 * pi * p.base * p.height * t.height\n    return area\ndef perimeter_square_parallelogram(s, t):\n    '''\n    Write a function to calculate the perimeter of a square given its side length and its height.\n    '''\n    # your code goes here\n    area = 0.5 * tan(s / 2) * t.height * s\n    return area\ndef perimeter_rectangle_parallelogram(r, t):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its base and height.\n    '''\n    # your code goes here\n    area = r.width * r.base * t.height\n    return area\ndef perimeter_circle_parallelogram(c, t):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius and its base and height.\n    '''\n    # your code goes here\n    area = c * t.height\n    return area\ndef perimeter_parallelogram_parallelogram(p, t):\n    '''\n    Write a function to calculate the perimeter of a parallelogram given its base and height.\n    '''\n    # your code goes here\n    area = p.base * p.height * t.height\n    return area\ndef perimeter_triangle_parallelogram(p, t):\n    '''\n    Write a function to calculate the perimeter of a triangle given its base and height.\n    '''\n    # your code goes here\n    area = 2 * pi * p.base * p.height * t.height\n    return area\ndef perimeter_rectangle_parallelogram_parallelogram(r, t):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its base and height.\n    '''\n    # your code goes here\n    area = r.height * r.base * t.height * p.height\n    return area\ndef perimeter_circle_parallelogram_parallelogram(c, t):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius and its base and height.\n    '''\n    # your code goes here\n    area = c * t.height\n    return area\ndef area_intersection(s, t):\n    '''\n    Write a function to calculate the area of an intersection of two polygon given its vertices.\n    '''\n    # your code goes here\n    area = 0.5 * tan(s.base/2) * t.width * s.height\n    return area\ndef area_intersection_rectangle(r, t):\n    '''\n    Write a function to calculate the area of an intersection of two rectangle given its base and height.\n    '''\n    # your code goes here\n    area = r.height * r.base * t.width\n    return area\ndef area_intersection_circle(c, t):\n    '''\n    Write a function to calculate the area of an intersection of two circle given its radius and its base and height.\n    '''\n    # your code goes here\n    area = c * t.width * c.height\n    return area\ndef area_intersection_parallelogram(p, t):\n    '''\n    Write a function to calculate the area of an intersection of two parallelogram given its base and height.\n    '''\n    # your code goes here\n    area = p.base * p.height * t.width * t.height\n    return area\ndef area_intersection_triangle(p, t):\n    '''\n    Write a function to calculate the area of an intersection of two triangle given its base and height.\n    '''\n    # your code goes here\n    area = p.base * p.height * t.height * t.width\n    return area\ndef area_intersection_rectangle_triangle(r, t):\n    '''"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print('A. area of a regular polygon is', s*l)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l = int(l)\n    r = s\n    area = 0\n    for i in range(l):\n        area = (s ** 2) - r ** 2\n        r = r - s\n        r = r + 2 * s\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return sum(l) / 3.0\n    \ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a regular triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_triangle_new(a, b, c):\n    '''\n    Use a functio to calculate the area of a regular triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\n    \ndef area_circle_new(r):\n    '''\n    Use a functio to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\n    \ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its side length.\n    '''\n    return sqrt(s * s)\n    \ndef area_square_new(s):\n    '''\n    Use a functio to calculate the area of a square given its side length.\n    '''\n    return sqrt(s * s)\n    \ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height of the rectangle.\n    '''\n    return h * b\n    \ndef area_rectangle_new(b, h):\n    '''\n    Use a functio to calculate the area of a rectangle given its base and height of the rectangle.\n    '''\n    return h * b\n    \ndef area_square_new_new(s):\n    '''\n    Use a functio to calculate the area of a square given its side length.\n    '''\n    return s * s\n    \ndef area_square_new_new_new(s):\n    '''\n    Use a functiom to calculate the area of a square given its side length.\n    '''\n    return s * s\n    \ndef area_rectangle_new_new_new(b, h):\n    '''\n    Use a functiom to calculate the area of a rectangle given its base and height of the rectangle.\n    '''\n    return b * h\n    \ndef area_circle_new_new_new_new(r):\n    '''\n    Use a functio to calculate the area of a circle given its radius.\n    '''\n    return r * r * 3.14\n    \ndef area_circle_new_new_new_new_new(r):\n    '''\n    Use a functiom to calculate the area of a circle given its radius.\n    '''\n    return r * r * 3.14\n    \ndef area_triangle_new_new_new_new_new(a, b, c):\n    '''\n    Use a functiom to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_triangle_new_new_new_new_new(a, b, c):\n    '''\n    Use a functiom to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_rectangle_new_new_new_new_new(b, h):\n    '''\n    Use a functio to calculate the area of a rectangle given its base and height of the rectangle.\n    '''\n    return b * h\n    \ndef area_rectangle_new_new_new_new_new(b, h):\n    '''\n    Use a functiom to calculate the area of a rectangle given its base and height of the rectangle.\n    '''\n    return b * h\n    \ndef area_circle_new_new_new_new_new_new(r):\n    '''\n    Use a functio to calculate the area of a circle given its radius.\n    '''\n    return r * r * 3.14\n    \ndef area_circle_new_new_new_new_new(r):\n    '''\n    Use a functiom to calculate the area of a circle given its radius.\n    '''\n    return r * r * 3.14\n    \ndef area_triangle_new_new_new_new_new(a, b, c):\n    '''\n    Use a functiom to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_triangle_new_new_new_new_new(a, b, c):\n    '''\n    Use a functiom to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_rectangle_new_new_new_new_new_new(b, h):\n    '''\n    Use a functiom to calculate the area of a rectangle given its base and height of the rectangle.\n    '''\n    return b * h\n    \ndef area_rectangle_new_new_new_new_new(b, h):\n    '''\n    Use a functiom to calculate the area of a rectangle given its base and height of the rectangle.\n    '''\n    return b * h\n    \ndef area_circle_new_new_new_new_new_new_new(r):\n    '''\n    Use a functiom to calculate the area of a circle given its radius.\n    '''\n    return r * r * 3.14\n    \ndef area_circle_new_new_new_new_new_new(r):\n    '''\n    Use a functiom to calculate the area of a circle given its radius.\n    '''\n    return r * r * 3.14\n    \ndef area_triangle_new_new_new_new_new_new_new(a, b, c):\n    '''\n    Use a functiom to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_triangle_new_new_new_new_new_new(a, b, c):\n    '''\n    Use a functiom to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_rectangle_new_new_new_new_new_new_new_new_new(b, h):\n    '''\n    Use a functiom to calculate the area of a rectangle given its base and height of the rectangle.\n    '''\n    return b * h\n    \ndef area_circle_new_new_new_new_new_new_new_new_new(r):\n    '''\n    Use a functiom to calculate the area of a circle given its radius.\n    '''\n    return r * r * 3.14\n    \ndef area_circle_new_new_new_new_new_new_new(r):\n    '''\n    Use a functiom to calculate the area of a circle given its radius.\n    '''\n    return r * r * 3.14\n    \ndef area_triangle_new_new_new_new_new_new_new_new(a, b, c):\n    '''\n    Use a functiom to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_triangle_new_new_new_new_new_new_new(a, b, c):\n    '''\n    Use a functiom to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return 0.5 * a * b * c\n    \ndef area_rectangle_new_new_new_new_new_new_new_new_new(b, h):\n    '''\n    Use a functiom to calculate the area of a rectangle given its base and height of the rectangle.\n    '''\n    return b * h\n    \ndef area_rectangle_new_new_new_new_new_new_new(b, h):\n    '''\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    try:\n        l = float(l)\n    except:\n        print(\"Please enter a valid number.\")\n    try:\n        l = float(l)\n    except:\n        print(\"Please enter a valid number.\")\n    s = int(s)\n    return 2 * pi * (s/2) * l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Check if s is the number of sides or the number of sides is a positive number\n    if(isinstance(s,int)):\n        # Check if s is the number of sides or the number of sides is a positive number\n        if(isinstance(s,float)):\n            # Check if s is a float number\n            if(s > 0):\n                # If s is a positive number, then return the area of the square\n                return int(s*(s-1)*4/3)\n            # If s is a negative number, then return the area of the square\n            return int(s*(s-1)*3/2)\n        # If s is not a float, then raise an exception\n        raise TypeError('The side must be a positive number.')\n    # Check if s is the number of sides or the number of sides is a float\n    if(isinstance(s,float)):\n        # Check if s is a float number\n        if(s > 0):\n            # If s is a positive number, then return the area of the square\n            return int(s*(s-1)*4/3)\n        # If s is a negative number, then return the area of the square\n        return int(s*(s-1)*3/2)\n    # If s is not a float, then raise an exception\n    raise TypeError('The side must be a positive number.')\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2!= 0:\n        return div_sum(n - 1)\n    else:\n        return div_sum(n / 2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 1\n    y = 0\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    while n!= 0: \n        x = n % 10\n        n = n // 10\n        y = y + x\n    if y == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Check if the divisors sum is equal to the n\n    #If the sum is equal to the number n then the function returns True, otherwise False.\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum += i\n            if sum == n:\n                return True\n    return False\n    \n    #Check if n is a divisor of the sum of the divisors\n    #If the sum is divisible by n then the function returns True, otherwise False.\n    def div_check(n):\n        if n == 0:\n            return False\n        if n % sum == 0:\n            return True\n    #Write a function to determine if the sum of the divisors of two integers is the same.\n    #If the sum is divisible by the number n then the function returns True, otherwise False.\n    def div_check_rec(n):\n        if n == 0:\n            return False\n        if n % sum == 0:\n            return True\n        for i in range(1, int(math.sqrt(n))+1):\n            if n%i == 0:\n                if div_check_rec(n/i):\n                    return True\n        return False\n    #If n is divisible by the number n then the function returns True, otherwise False.\n    def div_check_rec(n):\n        return div_check_rec(n) and n%sum == 0\n    #If both numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_rec_two(n):\n        if n == 0:\n            return False\n        if n % sum == 0:\n            return True\n        return div_check_rec_two(n/sum) and n%sum == 0\n    #If both numbers are not divisible by the same number n then the function returns True, otherwise False.\n    def div_check_rec_two(n):\n        return div_check_rec_two(n) and n%sum == 0\n    #If both numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_rec_two(n):\n        if n == 0:\n            return False\n        if n % sum == 0:\n            return True\n        return div_check_rec_two(n/sum) and n%sum == 0\n    #If the number n is divisible by both numbers n and sum n then the function returns True, otherwise False.\n    def div_check_rec_two(n):\n        if n == 0:\n            return False\n        if n % sum == 0:\n            return True\n        return div_check_rec_two(n/sum) and n%sum == 0\n    #If the number n is divisible by both numbers n and sum n then the function returns True, otherwise False.\n    def div_check_rec_two(n):\n        if n == 0:\n            return False\n        if n % sum == 0:\n            return True\n        return div_check_rec_two(n/sum) and n%sum == 0\n    \n    #If the numbers are the same, then the function returns True, otherwise False.\n    def div_check_two(n):\n        if n == 0:\n            return False\n        return div_check_rec_two(n/n) and n == n\n    #If the numbers are the same, then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    #If the numbers are the same, then the function returns True, otherwise False.\n    def div_check_two(n):\n        if n == 0:\n            return False\n        return div_check_rec_two(n/n) and n == n\n    #If all the numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        if n == 0:\n            return False\n        return div_check_rec_two(n/n) and n == n\n    #If all the numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        if n == 0:\n            return False\n        return div_check_rec_two(n/n) and n == n\n    #If all the numbers are divisible by both numbers n then the function returns True, otherwise False.\n    def div_check_two(n):\n        if n == 0:\n            return False\n        return div_check_rec_two(n/n) and n == n\n    \n    #If n is divisible by both numbers n and sum n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_two(n/n) and n == n\n    \n    #If n is divisible by both numbers n and sum n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_two(n/n) and n == n\n    #If all the numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    \n    #If n is divisible by both numbers n and sum n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    \n    #If n is divisible by both numbers n and sum n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    #If both numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    \n    #If n is divisible by both numbers n and sum n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    \n    #If n is not divisible by any number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    #If n is not divisible by any number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    \n    #If n is not divisible by any number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    #If all the numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_two(n/n) and n == n\n    #If all the numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    #If all the numbers are divisible by both numbers n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    #If all the numbers are divisible by both numbers n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    #If all the numbers are divisible by both numbers n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    #If both numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n) and n == n\n    #If both numbers are divisible by the same number n then the function returns True, otherwise False.\n    def div_check_two(n):\n        return div_check_rec_two(n/n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_s = 0\n    div_s2 = 0\n    i = 1\n    while(n/i):\n        i = i*10\n    while(n%i):\n        div_s += (n%i)\n        div_s2 += i\n        n = n//i\n    if (div_s==div_s2):\n        return True\n    else:\n        return False\n        \ndef add_divs(a, b):\n    '''\n    a and b are lists\n    a = [[1,2,3,4,5], [2,2,2,2,2]]\n    b = [2,2,2,2,2]\n    return:\n    [2,3,5,5,6]\n    '''\n    c = []\n    for x in range(len(a)):\n        c.append([])\n        for y in range(len(a[x])):\n            c[x].append(a[x][y] + b[y])\n    return c\n    \n    \ndef divisors(n): \n    '''\n    Find the divisors of a positive integer.\n    '''\n    if n == 0:\n        return [1]\n    if n < 0:\n        return []\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    return divisors\n    \ndef mult(a, b):\n    '''\n    Find the product of a, b, assuming a = b\n    '''\n    return a * b\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n): \n        if n % i == 0: \n            return False \n    else: \n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    \n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return False\n    elif n < 0: \n        return False\n    else: \n        x = n \n        s = 0\n        while x > 1: \n            if x % 2 == 1: \n                s += x \n            x //= 2\n        return s == n\ndef check(i, j, k, l):\n    '''\n    Write a function to check the validity of an arithmetic expression.\n    '''\n    # Determine if the given expression is valid or not\n    # i.e., single digit arithmetic\n    if k == 2 and n <= 10:\n        if n >= 10**k and n <= 10**(k+1):\n            return True\n        else:\n            return False\n    # i.e., 10*i\n    if k == 2 and n >= 10:\n        if n > 10:\n            return True\n        else:\n            return False\n    # i.e., 10-i\n    if k == 2 and n < 10:\n        if n <= 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i\n    if k == 2 and n > 10:\n        if n > 10:\n            return True\n        else:\n            return False\n    # i.e., 10-i-j\n    if k == 2 and n > 10:\n        if n > 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k\n    if k == 2 and n > 10:\n        if n > 10:\n            return True\n        else:\n            return False\n    # i.e., 10-i-j-k\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k\n    if k == 2 and n > 10:\n        if n > 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10-i-j-k-l\n    if k == 2 and n > 10:\n        if n > 10:\n            return True\n        else:\n            return False\n    # i.e., 10-i-j-k-l-m\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m\n    if k == 2 and n > 10:\n        if n > 10:\n            return True\n        else:\n            return False\n    # i.e., 10-i-j-k-l-m-n\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n\n    if k == 2 and n > 10:\n        if n > 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p\n    if k == 2 and n > 10:\n        if n > 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-i\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-i-j\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-i-j-k\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-i-j-k-l\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-i-j-k-l-m\n    if k == 2 and n < 10:\n        if n < 10:\n            return True\n        else:\n            return False\n    # i.e., 10+i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-i-j-k"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n+1): \n        if n%i == 0:\n            sum_of_divisors += i\n    \n    if sum_of_divisors == n: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    x = div_sum(n//2)\n    y = x + n//x\n    return y\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0 \n    for i in range(1,n): \n        if n % i == 0: \n            sum += i \n    return sum == n \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    #Your code here\n    count = 0\n    \n    for i in str1:\n        if str1.find(i)!= -1:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    characters = []\n    \n    for i in range(len(str1)):\n        characters.append(str1[i])\n    \n    return characters.count(characters[0])\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_char = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].upper():\n            count_char += 1\n        if str1[i] == str1[i].lower():\n            count_char += 1\n    return count_char\n    \ndef count_dic_key(str1):\n    '''\n    Write a function to count the number of keys in a dictionary. \n    '''\n    count_key = 0\n    for key in str1:\n        if key in str1:\n            count_key += 1\n    return count_key\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # declaring a counter variable\n    counter = 0 \n    \n    # iterate over the given string\n    for i in range(len(str1)): \n        # if the given character is in the alphabet, increment the counter\n        if str1[i].isalpha():\n            counter += 1\n    \n    # return the counter\n    return counter \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if i in alphabet:\n            if str1.find(i) == alphabet.find(i):\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return 0\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Asks for the string\n    str1 = str(input(\"Enter the string:\\n\"))\n    \n    # Opens the file for reading\n    with open(\"english.txt\", \"r\") as f:\n        # Reads the file and creates a list of all the lines in it\n        lines = f.readlines()\n        # Checks each line of the file for a letter\n        for line in lines:\n            for char in line:\n                if char.isalpha():\n                    # Checks if the letter is present in the line\n                    if char == str1:\n                        # If it is present, adds the number of occurences to the total number\n                        pos = lines.index(line)\n                        lines.remove(line)\n                        lines.insert(pos, str1 + str(len(line)))\n                        break\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    position_map = {}\n    for letter in str1:\n        position_map[letter] = position_map.get(letter, 0) + 1\n    count_map = {}\n    for key in position_map.keys():\n        count_map[key] = len([x for x in str1 if position_map[x] == key])\n    return count_map\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].upper():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #count = 0\n    #for char in str1:\n        #if char == str1[0]:\n            #count += 1\n        #else:\n            #continue\n    #return count\n    count = 0\n    for idx, char in enumerate(str1):\n        if char == str1[idx]:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    if n<= 1:\n        return 0\n    elif n==2:\n        return 2\n    else:\n        for i in range(1,n):\n            if (A[i]&1)!= (A[i-1]&1):\n                return 2\n    return n\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    L=len(A)\n    if L==0:\n        return 0\n    if L==1:\n        return 1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    \n    for i in range(len(A)):\n        if A[i] ^ (A[i] >> 1) == 0:\n            counter += 1\n        \n    return counter\n    \ndef count_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    counter = 0\n    \n    for i in range(len(A)):\n        if A[i] ^ (A[i] >> 1) == 1:\n            counter += 1\n        \n    return counter\n    \ndef list_to_str(A):\n    '''\n    Write a function that converts a list of numbers into a string.\n    '''\n    return \"\".join(str(A[i]) for i in range(len(A)))\n    \ndef find_sorted(A):\n    '''\n    Write a function that checks if a given list is sorted in ascending order.\n    '''\n    return True if A[0] > A[1] else False\n    \ndef get_rank_of_k(A, k):\n    '''\n    Write a function that returns the rank of k elements of a given list.\n    '''\n    total = k\n    if len(A) < k:\n        k = len(A)\n    \n    for i in range(len(A) - k):\n        total += 1\n        \n    return total\n    \ndef add_two_lists(A, B):\n    '''\n    Write a function that adds two lists.\n    '''\n    return A + B\n    \ndef add_n_to_l(A, N):\n    '''\n    Write a function that adds N elements of a list to A.\n    '''\n    return A + [A[i] + N[i] for i in range(len(A))]\n    \ndef remove_n_from_l(A, N):\n    '''\n    Write a function that removes N elements of a list from A.\n    '''\n    return A[:-N]\n    \ndef merge_two_lists(A, B):\n    '''\n    Write a function that merges two lists.\n    '''\n    return A + B\n    \ndef swap_n_elements(A, N):\n    '''\n    Write a function that swaps the elements of a list N times.\n    '''\n    return A * N\n    \ndef swap_two_lists(A, B):\n    '''\n    Write a function that swaps the elements of two lists.\n    '''\n    return [A[i] + B[i] for i in range(len(A))]\n    \ndef duplicate_2_lists(A):\n    '''\n    Write a function that replaces the given list with the same list, but with every element repeated twice.\n    '''\n    return [A[i] * 2 for i in range(len(A))]\n    \ndef duplicate_3_lists(A):\n    '''\n    Write a function that replaces the given list with the same list, but with every element repeated twice.\n    '''\n    return [A[i] * 3 for i in range(len(A))]\n    \ndef reverse_list(A):\n    '''\n    Write a function that reverses a list.\n    '''\n    return [A[i] for i in range(len(A) - 1, -1, -1)]\n    \ndef get_size(A):\n    '''\n    Write a function that returns the size of a list.\n    '''\n    return len(A)\n    \ndef get_subset(A, subset):\n    '''\n    Write a function that returns the subset of A that are present in subset.\n    '''\n    return [A[i] for i in subset if A[i] in subset]\n    \ndef get_subset_exclusion(A, subset):\n    '''\n    Write a function that returns the subset of A that are not present in subset.\n    '''\n    return [A[i] for i in range(len(A)) if A[i] not in subset]\n    \ndef get_set_exclusion(A, subset):\n    '''\n    Write a function that returns the subset of A that are not present in subset.\n    '''\n    return [A[i] for i in range(len(A)) if A[i] in subset]\n    \ndef get_add_exclusion(A, subset):\n    '''\n    Write a function that returns the subset of A that are not present in subset.\n    '''\n    return [A[i] for i in range(len(A)) if A[i] not in subset]\n    \ndef get_delete_exclusion(A, subset):\n    '''\n    Write a function that returns the subset of A that are not present in subset.\n    '''\n    return [A[i] for i in range(len(A)) if A[i] in subset]\n    \ndef sort_and_return_lists(A, reverse):\n    '''\n    Write a function that sorts a list in ascending order and then returns the sorted list.\n    '''\n    if reverse:\n        return [A[i] for i in range(len(A))]\n    else:\n        return [A[i] for i in range(len(A))] + [A[len(A) - 1]]\n    \ndef sort_and_return_lists_1(A):\n    '''\n    Write a function that sorts a list in ascending order and then returns the sorted list.\n    '''\n    return [A[i] for i in range(len(A))] + [A[len(A) - 1]]\n    \ndef get_hash(A):\n    '''\n    Write a function that returns the hash of a given list.\n    '''\n    return int(hash(str(A)))\n    \ndef get_hash_exclusion(A):\n    '''\n    Write a function that returns the hash of a given list.\n    '''\n    return int(hash(str(A[0])))\n    \ndef list_to_string(A):\n    '''\n    Write a function that converts a given list to string.\n    '''\n    return \"\".join(str(A[i]) for i in range(len(A)))\n    \ndef string_to_list(A):\n    '''\n    Write a function that converts a given string to a list.\n    '''\n    return [int(i) for i in A]\n    \ndef list_to_string_exclusion(A):\n    '''\n    Write a function that converts a given list to string.\n    '''\n    return \"\".join(str(A[i]) for i in range(len(A)) if A[i] in A)\n    \ndef string_to_list_exclusion(A):\n    '''\n    Write a function that converts a given string to a list.\n    '''\n    return [int(A[i]) for i in range(len(A)) if A[i] in A]\n    \ndef list_to_string_hash(A):\n    '''\n    Write a function that converts a given list to string.\n    '''\n    return \"\".join(str(A[i]) for i in range(len(A)))\n    \ndef string_to_list_hash(A):\n    '''\n    Write a function that converts a given string to a list.\n    '''\n    return [int(A[i]) for i in range(len(A)) if A[i] in A]\n    \ndef get_first_element(A):\n    '''\n    Write a function that returns the first element of a given list.\n    '''\n    return A[0]\n    \ndef get_first_element_exclusion(A):\n    '''\n    Write a function that returns the first element of a given list.\n    '''\n    return A[0]\n    \ndef get_last_element(A):\n    '''\n    Write a function that returns the last element of a given list.\n    '''\n    return A[-1]\n    \ndef get_last_element_exclusion(A):\n    '''\n    Write a function that returns the last element of a given list.\n    '''\n    return A[-1]\n    \ndef get_middle_element(A):\n    '''\n    Write a function that returns the middle element of a given list.\n    '''\n    return int((le"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    n = len(A)\n    pairs = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (A[i] & A[j]) == 0:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    # default num_pairs to 0\n    num_pairs = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    odd = 0\n    for i in A:\n        if (i % 2) == 0:\n            result += 1\n        else:\n            if result % 2 == 0:\n                result -= 1\n            odd += 1\n    return result, odd\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_counter = 0\n    for i in range(len(A)):\n        if A[i]%2 == 0:\n            pair_counter += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for n in A: \n        if n % 2 == 0: \n            even += 1\n    return even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(len(A)-1):\n            if A[i]!= A[i+1]:\n                count += 1\n        return count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    for i in range(1, n+1):\n        if n%2 == 0:\n            print(i)\n            return\n        else:\n            i = i + 2\n            return\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # your code here\n    power_of_2 = 0\n    while n>0:\n        n = n//2\n        power_of_2 += 1\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    for i in range(2, n+1):\n        if n % i == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i <= n: \n        if i == n: \n            return i \n        if i % 2 == 0: \n            return n \n        i += 1\n    return None\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n >= 2:\n        if n & 1 == 1:\n            return n+1\n        n = n >> 1\n    return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    power = 1\n    while (i*power <= n):\n        power += 1\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    \n    if n == 0:\n        return 0\n    if n < 0:\n        return None\n    \n    new_n = n\n    while n % 2!= 0:\n        new_n = new_n / 2\n    if new_n == 1:\n        return None\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n % 3 == 0:\n        return 3\n    \n    if n % 5 == 0:\n        return 5\n    \n    if n % 7 == 0:\n        return 7\n    \n    if n % 9 == 0:\n        return 9\n    \n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return next_power_of_2(n-1) + 1 \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return n + next_power_of_2(n//2)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # define a list of numbers smaller than n, and larger than 1\n    # if this is greater than or equal to n, then return a number\n    # if this is less than or equal to n, then return None\n    # else return the smallest number\n    l = list(str(n))\n    for i in range(len(l)):\n        if (int(l[i]) >= n):\n            return int(l[i])\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # count = 0\n    # for i in a:\n    #     if i == x:\n    #         count += 1\n    # return count\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len(a)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # TODO: your code here\n    return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n = len(a)\n    l = list(set(a))\n    c = 0\n    for i in range(n):\n        if a[i] in l:\n            c += 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return x.count(a)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\nprint(frequency([1,5,2,3,2,2,5,5,5],5))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            freq += 1\n    return freq\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    dict_a = {}\n    for el in a:\n        if el in dict_a:\n            dict_a[el] += 1\n        else:\n            dict_a[el] = 1\n    dict_b = dict()\n    for k,v in dict_a.items():\n        dict_b[v] = k\n    for el in dict_b:\n        if el in dict_b:\n            dict_b[el] = dict_b[el] - 1\n    print(dict_b)\n    return(dict_b)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    lst_set = set(a) \n    c = a.count(x) \n    return c \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n + 1):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    s = 0\n    for i in range(m, n):\n        s += list1[i]\n        \n    return s"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n + 1):\n        s += list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum=0\n    for i in range(m-1,-1,-1):\n        sum+=list1[i]\n    for j in range(m-1,-1,-1):\n        sum-=list1[j]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    try:                                                                                                                                                                                        \n        total = 0\n        for i in range(m - 1, n):                                                                                                                                                                \n            total += list1[i]                                                                                                                                                                                        \n        return total                                                                                                                                                                                        \n    except IndexError:                                                                                                                                                                                        \n        print('List Index out of range')                                                                                                                                                    \n    except TypeError:                                                                                                                                                                                        \n        print('Type Error')                                                                                                                                                    \n    except:                                                                                                                                                                                        \n        print('Some other error')                                                                                                                                                    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m,n):\n        total += list1[i]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #return sum([item for item in list1[m:n+1] if item<m and item>n])\n    return sum([item for item in list1[m:n+1] if item < m and item >= n])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    output = 0\n    for i in range(m, n):\n        output += list1[i]\n    print(output)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (math.sqrt(5)*a)/3\ndef main():\n    a=float(input('Enter the length of the first side of the pentagon: '))\n    print('The perimeter of the pentagon is', perimeter_pentagon(a))\n    \nif __name__=='__main__':\n    main()"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    square_side = math.pow(a,0.25)\n    sqrt_side = math.pow(square_side,0.5)\n    return (2*(square_side + sqrt_side))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a +1)*4*4\ndef perimeter_pentagon_2(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*4 + (2*a + 1)*3*3\ndef perimeter_pentagon_3(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*3 + (2*a + 1)*2*2\ndef perimeter_pentagon_4(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*2 + (2*a + 1)*1\ndef perimeter_pentagon_5(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*2 + (2*a + 1)*1 + (2*a +1)*2\ndef perimeter_pentagon_6(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*3 + (2*a + 1)*2 + (2*a +1)*1\ndef perimeter_pentagon_7(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*3 + (2*a + 1)*1\ndef perimeter_pentagon_8(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*2 + (2*a + 1)*1 + (2*a +1)*2\ndef perimeter_pentagon_9(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*2 + (2*a + 1)*1 + (2*a +1)*2\ndef perimeter_pentagon_10(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*3 + (2*a + 1)*1 + (2*a +1)*2\ndef perimeter_pentagon_11(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*4 + (2*a + 1)*3 + (2*a +1)*2\ndef perimeter_pentagon_12(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*4 + (2*a + 1)*3 + (2*a +1)*2 + (2*a +1)*1\ndef perimeter_pentagon_13(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*4\ndef perimeter_pentagon_14(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*3\ndef perimeter_pentagon_15(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*2\ndef perimeter_pentagon_16(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*1\ndef perimeter_pentagon_17(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*1 + (2*a +1)*3\ndef perimeter_pentagon_18(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*1 + (2*a +1)*3 + (2*a +1)*2\ndef perimeter_pentagon_19(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*2 + (2*a +1)*3 + (2*a +1)*2\ndef perimeter_pentagon_20(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*2 + (2*a +1)*3 + (2*a +1)*2 + (2*a +1)*1\ndef perimeter_pentagon_21(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*3 + (2*a +1)*2 + (2*a +1)*1\ndef perimeter_pentagon_22(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*3 + (2*a +1)*2 + (2*a +1)*1 + (2*a +1)*0\ndef perimeter_pentagon_23(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*2 + (2*a +1)*1 + (2*a +1)*0 + (2*a +1)*1\ndef perimeter_pentagon_24(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*2 + (2*a +1)*1 + (2*a +1)*0 + (2*a +1)*1 + (2*a +1)*2\ndef perimeter_pentagon_25(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*5 + (2*a + 1)*4*3 + (2*a +1)*2 + (2*"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # from math import factorial\n    # fact = factorial(a)\n    # for i in range(a):\n    #     fact -= factorial(a-i)\n    # return fact\n    return 3.14 * (a * 3)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2*a*math.sqrt(2)/3 + a*math.sqrt(3)/2\ndef area_pentagon(a):\n    '''\n    Write a function to calculate the area of a regular pentagon from its side lengths.\n    '''\n    return math.pow(a,2)/3 + a**2/6\ndef area_hexagon(a):\n    '''\n    Write a function to calculate the area of a regular hexagon from its length of its sides.\n    '''\n    return math.pow(a,3)/6 + a**3/6\ndef area_heptagon(a):\n    '''\n    Write a function to calculate the area of a regular heptagon from its side lengths.\n    '''\n    return math.pow(a,4)/6 + a**4/6\ndef area_octagon(a):\n    '''\n    Write a function to calculate the area of a regular octagon from its length of its sides.\n    '''\n    return math.pow(a,5)/6 + a**5/6\ndef area_decagon(a):\n    '''\n    Write a function to calculate the area of a regular decagon from its side lengths.\n    '''\n    return math.pow(a,6)/6 + a**6/6\ndef area_dodecahedron(a):\n    '''\n    Write a function to calculate the area of a regular dodecahedron from its side lengths.\n    '''\n    return a**(1/3)*math.sqrt(2)*(math.sqrt(3)/2) + a**(1/3)*(math.sqrt(3)/2)\ndef area_heptagon_dodecahedron(a):\n    '''\n    Write a function to calculate the area of a regular heptagon and its dodecahedron from its side lengths.\n    '''\n    return a**(3/2)*math.sqrt(3)/2 + a**(1/2)*(math.sqrt(3)/2)\ndef area_square_heptagon_dodecahedron(a):\n    '''\n    Write a function to calculate the area of a regular square and its dodecahedron from its side lengths.\n    '''\n    return a**(4/3)*math.sqrt(3)*(math.sqrt(3)/2) + a**(4/3)*(math.sqrt(3)/2)\ndef area_pentagon_heptagon_dodecahedron(a):\n    '''\n    Write a function to calculate the area of a regular pentagon and its dodecahedron from its side lengths.\n    '''\n    return a**(5/6)*math.sqrt(3)/2 + a**(1/2)*(math.sqrt(3)/2)\ndef area_hexagon_heptagon_dodecahedron(a):\n    '''\n    Write a function to calculate the area of a regular hexagon and its dodecahedron from its side lengths.\n    '''\n    return a**(6/3)*math.sqrt(3)/2 + a**(1/3)*(math.sqrt(3)/2)\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to calculate the perimeter of a dodecahedron from its side lengths.\n    '''\n    return 2*(math.sqrt(2)*a)/3 + 2*(math.sqrt(2)/3)*a**(1/3) + 2*(math.sqrt(2)/3)*a**(2/3)\ndef area_dodecahedron(a):\n    '''\n    Write a function to calculate the area of a dodecahedron from its side lengths.\n    '''\n    return a**(3/4)*(math.sqrt(3)/2)**(1/2) + a**(2/4)*(math.sqrt(3)/2)**(1/2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to calculate the perimeter of a hexagon from its side lengths.\n    '''\n    return 2*a*math.sqrt(2)/3 + 2*a*math.sqrt(3)/2\ndef area_heptagon(a):\n    '''\n    Write a function to calculate the area of a heptagon from its side lengths.\n    '''\n    return math.pow(a,2)/3 + a**2/6\ndef area_octagon(a):\n    '''\n    Write a function to calculate the area of a octagon from its side lengths.\n    '''\n    return math.pow(a,3)/6 + a**3/6\ndef area_decagon(a):\n    '''\n    Write a function to calculate the area of a decagon from its side lengths.\n    '''\n    return math.pow(a,4)/6 + a**4/6\ndef area_pentagon(a):\n    '''\n    Write a function to calculate the area of a pentagon from its side lengths.\n    '''\n    return math.pow(a,5)/6 + a**5/6\ndef perimeter_pentagon(a):\n    '''\n    Write a function to calculate the perimeter of a pentagon from its side lengths.\n    '''\n    return 2*a*math.sqrt(2)/3 + a*math.sqrt(3)/2\ndef area_square_pentagon(a):\n    '''\n    Write a function to calculate the area of a square and its pentagon from its side lengths.\n    '''\n    return a**(4/3)*math.sqrt(3)*(math.sqrt(3)/2) + a**(3/3)*(math.sqrt(3)/2)\ndef area_pentagon_square_pentagon(a):\n    '''\n    Write a function to calculate the area of a pentagon and its square and its pentagon from its side lengths.\n    '''\n    return a**(5/6)*math.sqrt(3)/2 + a**(1/2)*(math.sqrt(3)/2) + a**(1/3)*(math.sqrt(3)/2)\ndef area_heptagon_pentagon(a):\n    '''\n    Write a function to calculate the area of a heptagon and its pentagon from its side lengths.\n    '''\n    return a**(6/3)*math.sqrt(3)/2 + a**(1/3)*(math.sqrt(3)/2) + a**(1/2)*(math.sqrt(3)/2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to calculate the perimeter of a heptagon from its side lengths.\n    '''\n    return 2*a*math.sqrt(2)/3 + 2*a*math.sqrt(3)/2\ndef area_heptagon_pentagon(a):\n    '''\n    Write a function to calculate the area of a heptagon and its pentagon from its side lengths.\n    '''\n    return a**(3/4)*(math.sqrt(3)/2)**(1/2) + a**(2/4)*(math.sqrt(3)/2)**(1/2)\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to calculate the perimeter of a dodecahedron from its side lengths.\n    '''\n    return a**(3/4)*(math.sqrt(3)/2)**(1/2) + a**(2/4)*(math.sqrt(3)/2)**(1/2)\ndef area_dodecahedron_dodecahedron(a):\n    '''\n    Write a function to calculate the area of a dodecahedron and its dodecahedron from its side lengths.\n    '''\n    return a**(5/6)*math.sqrt(3)/2 + a**(1/2)*(math.sqrt(3)/2)**(1/2)\ndef perimeter_hexagon_dodecahedron(a):\n    '''\n    Write a function to calculate the perimeter of a hexagon and its dodecahedron from its side lengths.\n    '''\n    return a**(6/3)*math.sqrt(3)/2 + a**(1/3)*(math.sqrt(3)/2)**(1/2) + a**(1/3)*(math.sqrt"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    b = 0\n    if a == 0:\n        return b\n    if a > 0:\n        for i in range(4):\n            b += (a/3)**i\n        return b\n    else:\n        return -1\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 1:\n        return 1\n    elif a == 2:\n        return 5\n    elif a == 3:\n        return 7\n    elif a == 4:\n        return 10\n    elif a == 5:\n        return 13\n    elif a == 6:\n        return 17\n    elif a == 7:\n        return 20\n    elif a == 8:\n        return 25\n    elif a == 9:\n        return 30\n    elif a == 10:\n        return 35\n    elif a == 11:\n        return 40\n    elif a == 12:\n        return 45\n    elif a == 13:\n        return 50\n    elif a == 14:\n        return 55\n    elif a == 15:\n        return 60\n    elif a == 16:\n        return 65\n    elif a == 17:\n        return 70\n    elif a == 18:\n        return 75\n    elif a == 19:\n        return 80\n    elif a == 20:\n        return 85\n    elif a == 21:\n        return 90\n    elif a == 22:\n        return 95\n    elif a == 23:\n        return 100\n    elif a == 24:\n        return 105\n    elif a == 25:\n        return 110\n    elif a == 26:\n        return 115\n    elif a == 27:\n        return 120\n    elif a == 28:\n        return 125\n    elif a == 29:\n        return 130\n    elif a == 30:\n        return 135\n    elif a == 31:\n        return 140\n    elif a == 32:\n        return 145\n    elif a == 33:\n        return 150\n    elif a == 34:\n        return 155\n    elif a == 35:\n        return 160\n    elif a == 36:\n        return 165\n    elif a == 37:\n        return 170\n    elif a == 38:\n        return 175\n    elif a == 39:\n        return 180\n    elif a == 40:\n        return 185\n    elif a == 41:\n        return 190\n    elif a == 42:\n        return 195\n    elif a == 43:\n        return 200\n    elif a == 44:\n        return 205\n    elif a == 45:\n        return 210\n    elif a == 46:\n        return 215\n    elif a == 47:\n        return 220\n    elif a == 48:\n        return 225\n    elif a == 49:\n        return 230\n    elif a == 50:\n        return 235\n    elif a == 51:\n        return 240\n    elif a == 52:\n        return 245\n    elif a == 53:\n        return 250\n    elif a == 54:\n        return 255\n    elif a == 55:\n        return 260\n    elif a == 56:\n        return 265\n    elif a == 57:\n        return 270\n    elif a == 58:\n        return 275\n    elif a == 59:\n        return 280\n    elif a == 60:\n        return 285\n    elif a == 61:\n        return 290\n    elif a == 62:\n        return 295\n    elif a == 63:\n        return 300\n    elif a == 64:\n        return 305\n    elif a == 65:\n        return 310\n    elif a == 66:\n        return 315\n    elif a == 67:\n        return 320\n    elif a == 68:\n        return 325\n    elif a == 69:\n        return 330\n    elif a == 70:\n        return 335\n    elif a == 71:\n        return 340\n    elif a == 72:\n        return 345\n    elif a == 73:\n        return 350\n    elif a == 74:\n        return 355\n    elif a == 75:\n        return 360\n    elif a == 76:\n        return 365\n    elif a == 77:\n        return 370\n    elif a == 78:\n        return 375\n    elif a == 79:\n        return 380\n    elif a == 80:\n        return 385\n    elif a == 81:\n        return 390\n    elif a == 82:\n        return 395\n    elif a == 83:\n        return 400\n    elif a == 84:\n        return 405\n    elif a == 85:\n        return 410\n    elif a == 86:\n        return 415\n    elif a == 87:\n        return 420\n    elif a == 88:\n        return 425\n    elif a == 89:\n        return 430\n    elif a == 90:\n        return 435\n    elif a == 91:\n        return 440\n    elif a == 92:\n        return 445\n    elif a == 93:\n        return 450\n    elif a == 94:\n        return 455\n    elif a == 95:\n        return 460\n    elif a == 96:\n        return 465\n    elif a == 97:\n        return 470\n    elif a == 98:\n        return 475\n    elif a == 99:\n        return 480\n    elif a == 100:\n        return 525\n    elif a == 101:\n        return 530\n    elif a == 102:\n        return 535\n    elif a == 103:\n        return 540\n    elif a == 104:\n        return 555\n    elif a == 105:\n        return 570\n    elif a == 106:\n        return 575\n    elif a == 107:\n        return 580\n    elif a == 108:\n        return 585\n    elif a == 109:\n        return 600\n    elif a == 110:\n        return 625\n    elif a == 111:\n        return 630\n    elif a == 112:\n        return 655\n    elif a == 113:\n        return 660\n    elif a == 114:\n        return 665\n    elif a == 115:\n        return 670\n    elif a == 116:\n        return 675\n    elif a == 117:\n        return 680\n    elif a == 118:\n        return 685\n    elif a == 119:\n        return 690\n    elif a == 120:\n        return 700\n    elif a == 121:\n        return 705\n    elif a == 122:\n        return 710\n    elif a == 123:\n        return 715\n    elif a == 124:\n        return 720\n    elif a == 125:\n        return 725\n    elif a == 126:\n        return 730\n    elif a == 127:\n        return 735\n    elif a == 128:\n        return 740\n    elif a == 129:\n        return 745\n    elif a == 130:\n        return 750\n    elif a == 131:\n        return 755\n    elif a == 132:\n        return 760\n    elif a == 133:\n        return 765\n    elif a == 134:\n        return 770\n    elif a == 135:\n        return 775\n    elif a == 136:\n        return 780\n    elif a == 137:\n        return 785\n    elif a == 138:\n        return 790\n    elif a == 139:\n        return 795\n    elif a == 140:\n        return 800\n    elif a == 141:\n        return 805\n    elif a == 142:\n        return 810\n    elif a == 143:\n        return 815\n    elif a == 144:\n        return 820\n    elif a == 145:\n        return 825\n    elif a == 146:\n        return 830\n    elif a == 147:\n        return 835\n    elif a == 148:\n        return 840\n    elif a == 149:\n        return 845\n    elif a == 150:\n        return 850\n    elif a == 151:\n        return 855\n    elif a == 152:\n        return 860\n    elif a == 153:\n        return 865\n    elif a == 154:\n        return 870\n    elif a == 155:\n        return 875\n    elif a == 156:\n        return 880\n    elif a == 157:\n        return 885\n    elif a == 158:\n        return 890\n    elif a == 159:\n        return 915\n    elif a == 160:\n        return 920\n    elif a == 161:\n        return 925\n    elif a == 162:\n        return 930\n    elif a == 163:\n        return 935\n    elif a == 164:\n        return 94"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    b = len(a)\n    c = (a[0] + a[b-1])\n    d = math.sqrt((b*b) - (4*a[0]*a[1]))\n    e = math.sqrt((b*b) - (4*a[1]*a[2]))\n    f = math.sqrt((b*b) - (4*a[2]*a[3]))\n    g = math.sqrt((b*b) - (4*a[3]*a[4]))\n    return c,d,e,f,g\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = (2 * a) + (a + 1) / 2\n    return l * 6\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate length of sides\n    # print(a)\n    side1 = a / 2\n    side2 = (2 * a) / 3\n    side3 = 3 * a / 4\n    side4 = 4 * a / 5\n    side5 = a / 6\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = {}\n    for char in s:\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n    return counter\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return {s[i] : s.count(s[i]) for i in range(len(s)) if s[i] in s}\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # Write your code here\n    count=0\n    l=len(s)\n    for i in range(l):\n        if s[i]=='w':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.replace(\" \",\"\")\n    s = s.replace(\"  \",\" \")\n    s = s.replace(\"  \",\" \")\n    s = s.lower()\n    if s.count('std') == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    res = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            res += 1\n    return res\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i]=='w':\n            count+=1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(s)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    result = {}\n    for char in s:\n        if char =='std':\n            result[char] = result.get(char, 0) + 1\n    \n    return result\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #count the number of occurence\n    return len(s.count(s))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first = test_tuple[0]\n    second = test_tuple[1]\n    if type(first)!= type(second):\n        return False\n    elif type(first) == str and type(second) == int:\n        return True\n    elif type(first) == str and type(second) == float:\n        return True\n    elif type(first) == float and type(second) == int:\n        return True\n    elif type(first) == float and type(second) == str:\n        return True\n    elif type(first) == list:\n        return all(map(check_type, first))\n    elif type(second) == list:\n        return all(map(check_type, second))\n    elif type(first) == set and type(second) == set:\n        return all(map(check_type, first))\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(test_tuple)\n    for i in range(len(test_tuple)):\n        print(test_tuple[i])\n        if type(test_tuple[i]) == int or type(test_tuple[i]) == float:\n            print('Valid')\n        else:\n            print('Invalid')\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type = type(test_tuple[0])\n    if isinstance(test_tuple[0], list):\n        return all([check_type(elem) for elem in test_tuple[0]])\n    if isinstance(test_tuple[0], dict):\n        return all([check_type(elem) for elem in test_tuple[0].values()])\n    else:\n        return not isinstance(test_tuple[0], str) or test_tuple[0] in (\"None\", \"False\", \"True\")\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0])==str and len(test_tuple[0])==len(test_tuple[1])==len(test_tuple[2])==len(test_tuple[3]):\n        return'same'\n    elif type(test_tuple[0])==float and type(test_tuple[1])==float and type(test_tuple[2])==float and type(test_tuple[3])==float:\n        return'same'\n    else:\n        return 'not same'\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_list = test_tuple\n    for i in tuple_list:\n        if not isinstance(i, int) or not isinstance(i, float) or not isinstance(i, complex):\n            return f'Error - {i} is not a number.'\n    return tuple_list"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Your code here\n    result=True\n    for value in test_tuple:\n        if type(value) is not int or type(value) is not float:\n            result=False\n            break\n    return result\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    i = 0\n    for element in test_tuple:\n        if element.dtype!= np.object_:\n            i += 1\n    if i == len(test_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        list1 = test_tuple[0]\n        list2 = test_tuple[1]\n        for i in range(len(list1)):\n            if type(list1[i])!= type(list2[i]):\n                return False\n    except IndexError:\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # return (tuple, isinstance(tuple, tuple))\n    # Check if data type is string or float or int\n    # if isinstance(tuple, tuple):\n    #     for i in range(len(tuple)):\n    #         if isinstance(tuple[i], str):\n    #             return False\n    #         if isinstance(tuple[i], float):\n    #             return False\n    #         if isinstance(tuple[i], int):\n    #             return False\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    lst = []\n    for i in test_tuple:\n        if type(i) == int or type(i) == float:\n            lst.append(i)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0 or n == 1:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    majority = arr[0]\n    for i in range(1, n):\n        if arr[i] > majority:\n            majority = arr[i]\n    return majority == x\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c += 1\n        else:\n            c = 0\n        if c == n/2:\n            return True\n    return False\n    \n    \n    \ndef majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c += 1\n        else:\n            c = 0\n        if c == n/2:\n            return True\n    return False\n    \n    \n    \ndef max_freq(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the maximum frequency element in the given sorted array. (The maximum frequency element is the element that occurs the most times.)\n    '''\n    # Your code here\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c += 1\n        else:\n            c = 0\n        if c == n/2:\n            return arr[i]\n    return False\n    \n    \n    \ndef sum_of_all_nums(arr):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the sum of all the elements in the given array. (The sum of all the elements is the product of the elements in the array.)\n    '''\n    # Your code here\n    res = 0\n    for i in range(n):\n        res += arr[i]\n    return res\n    \n    \n    \ndef sum_of_all_nums(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the sum of all the elements in the given array. (The sum of all the elements is the product of the elements in the array.)\n    '''\n    # Your code here\n    res = 0\n    for i in range(n):\n        res += arr[i]\n    return res\n    \n    \n    \ndef find_missing_nums(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the missing numbers in the given array.\n    '''\n    # Your code here\n    res = []\n    for i in range(n):\n        if arr[i] not in res:\n            res.append(arr[i])\n    return res\n    \n    \n    \ndef count_elements(arr, x):\n    '''\n    Write a function that takes in a sorted array and an element and returns the number of occurrences of the element in the array.\n    '''\n    # Your code here\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c += 1\n    return c\n    \n    \n    \ndef find_duplicates(arr, x):\n    '''\n    Write a function that takes in a sorted array and an element and returns the indices of the occurrences of the element in the array.\n    '''\n    # Your code here\n    res = []\n    for i in range(n):\n        if arr[i] == x:\n            res.append(i)\n    return res\n    \n    \n    \ndef main():\n    # For testing\n    test = [5, 6, 7, 8, 10, 11, 12, 9, 13, 0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104]\n    n = len(test)\n    print(n)\n    arr = test\n    print(arr)\n    print(is_majority(arr, n, 0))\n    print(is_majority(arr, n, 2))\n    print(is_majority(arr, n, 3))\n    print(is_majority(arr, n, 4))\n    print(is_majority(arr, n, 5))\n    print(is_majority(arr, n, 6))\n    print(is_majority(arr, n, 7))\n    print(is_majority(arr, n, 8))\n    print(is_majority(arr, n, 9))\n    print(is_majority(arr, n, 10))\n    print(is_majority(arr, n, 11))\n    print(is_majority(arr, n, 12))\n    print(is_majority(arr, n, 13))\n    print(is_majority(arr, n, 14))\n    print(is_majority(arr, n, 15))\n    print(is_majority(arr, n, 16))\n    print(is_majority(arr, n, 17))\n    print(is_majority(arr, n, 18))\n    print(is_majority(arr, n, 19))\n    print(is_majority(arr, n, 20))\n    print(is_majority(arr, n, 21))\n    print(is_majority(arr, n, 22))\n    print(is_majority(arr, n, 23))\n    print(is_majority(arr, n, 24))\n    print(is_majority(arr, n, 25))\n    print(is_majority(arr, n, 26))\n    print(is_majority(arr, n, 27))\n    print(is_majority(arr, n, 28))\n    print(is_majority(arr, n, 29))\n    print(is_majority(arr, n, 30))\n    print(is_majority(arr, n, 31))\n    print(is_majority(arr, n, 32))\n    print(is_majority(arr, n, 33))\n    print(is_majority(arr, n, 34))\n    print(is_majority(arr, n, 35))\n    print(is_majority(arr, n, 36))\n    print(is_majority(arr, n, 37))\n    print(is_majority(arr, n, 38))\n    print(is_majority(arr, n, 39))\n    print(is_majority(arr, n, 40))\n    print(is_majority(arr, n, 41))\n    print(is_majority(arr, n, 42))\n    print(is_majority(arr, n, 43))\n    print(is_majority(arr, n, 44))\n    print(is_majority(arr, n, 45))\n    print(is_majority(arr, n, 46))\n    print(is_majority(arr, n, 47))\n    print(is_majority(arr, n, 48))\n    print(is_majority(arr, n, 49))\n    print(is_majority(arr, n, 50))\n    print(is_majority(arr, n, 51))\n    print(is_majority(arr, n, 52))\n    print(is_majority(arr, n, 53))\n    print(is_majority(arr, n, 54))\n    print(is_majority(arr, n, 55))\n    print(is_majority(arr, n, 56))\n    print(is_majority(arr, n, 57))\n    print(is_majority(arr, n, 58))\n    print(is_majority(arr, n, 59))\n    print(is_majority(arr, n, 60))\n    print(is_majority(arr, n, 61))\n    print(is_majority(arr, n, 62))\n    print(is_majority(arr, n, 63))\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if the length of the array is zero or one, return true\n    if len(arr) == 1 or n == 0:\n        return True\n    # if the array is of length 2 or more, return the majority element\n    elif len(arr) >= 2:\n        if arr[0] == arr[1]:\n            return True\n        else:\n            return is_majority(arr[1:], n, arr[0])\n    # if the array is of length 3 or more, return the majority element\n    else:\n        if arr[0] == arr[1] or arr[0] == arr[2]:\n            return True\n        else:\n            return is_majority(arr[1:], n, arr[0])\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    res = 0\n    for i in range(n):\n        res = arr[i]\n        for j in range(i, n):\n            if arr[j] == res:\n                res = arr[j]\n    return res == x\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Check that array is sorted\n    # TODO: Check that the given array is sorted\n    # TODO: Check that the given array is monotone increasing\n    # TODO: Check that the given array is non-empty\n    # TODO: Check that the given array has at least one element\n    # TODO: Check that the given array has at most two elements\n    # TODO: Check that the given array is at least two elements long\n    # TODO: Check that the given array has at least two elements\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1 or arr[0] == x:\n        return True\n    if n < 2:\n        return False\n    if arr[0] == x:\n        return is_majority(arr[1:], n-1, x)\n    if arr[0] < x:\n        return is_majority(arr[1:], n-1, x)\n    if arr[0] > x:\n        return is_majority(arr[1:], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # return True if sum(arr[:n]) == sum(arr[n:]) else False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n <= 2:\n        return arr == arr[0]\n    mid = n // 2\n    if is_majority(arr, mid, x):\n        return True\n    if is_majority(arr, mid, x):\n        return is_majority(arr[:mid], n, x)\n    return is_majority(arr[mid:], n, x)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count = count + 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    result = 0\n    for i in str(n):\n        result += int(i)\n    return result\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #Your code here\n    count = 0\n    for i in range(n):\n        if n%2 == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while n!= 0: \n        n &= 255\n        set_bits += 1\n    return set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits_count = 0\n    for i in range(n): \n        if n % 2 == 0: \n            if n & 1 == 1: \n                bits_count += 1\n    return bits_count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    for i in bin(n):\n        if i == \"1\":\n            set_bits += 1\n    return set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits = 0\n    for i in range(1, n + 1):\n        if (n % 2 == 1):\n            bits = bits + 1\n        else:\n            bits = bits + 0\n    return bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n            \n    return count\n    \ndef count_Sum(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    sum = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            sum += 1\n            \n    return sum\n    \ndef count_Add_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n    \n    return count\n    \ndef add_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n            \n    return count\n    \ndef Add_Sum(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    sum = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            sum += 1\n            \n    return sum\n    \ndef Add_Add_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n    \n    return count\n    \ndef bin_count(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n            \n    return count\n    \ndef bin_Add_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n    \n    return count\n    \ndef bin_Add_Sum(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    sum = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            sum += 1\n            \n    return sum\n    \ndef bin_Sum(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    sum = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            sum += 1\n    \n    return sum\n    \ndef bin_Add_Add_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n    \n    return count\n    \ndef bin_Sum_Add_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    sum = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            sum += 1\n    \n    return sum\n    \ndef sum_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n            \n    return count\n    \ndef Sum_Sum(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    sum = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            sum += 1\n            \n    return sum\n    \ndef Sum_Add_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n    \n    return count\n    \ndef Sum_Add_Sum(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    sum = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            sum += 1\n    \n    return sum\n    \ndef Sum_Sum_Add_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    sum = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            sum += 1\n    \n    return sum\n    \ndef Sum_Sum_Sum_Add_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n \n    \n    s = bin(num)[2:]\n    sum = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            sum += 1\n    \n    return sum\n    \ndef get_n(num): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = num \n    \n    s = bin(num)[2:]\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            count += 1\n    \n    return count\n    \ndef get_b(num): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    nu"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Use the 2**32 variable for the count\n    count = 0\n    \n    # Loop through the number (n)\n    while n: \n        # Check if the number is even\n        if n & 0x1:\n            # Increment the count\n            count += 1\n            # Set the bit to 0\n            n = n >> 1\n        # Check if the number is odd\n        else:\n            # Increment the count\n            count += 1\n            # Set the bit to 1\n            n = n << 1\n            # Set the bit to 0\n            n = n >> 1\n    # Return the number of set bits\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_value(str):\n        '''\n        Find the odd values in the string\n        '''\n        odd_value = []\n        for i in str:\n            if i%2!= 0:\n                odd_value.append(i)\n        return odd_value\n    return odd_value(str)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # code here\n    # divide and conquer\n    # check each character is odd\n    # if yes, delete it\n    # if not, add it back\n    \n    odd = 0\n    first = 0\n    last = 0\n    n = len(str)\n    for i in range(n):\n        if i % 2 == 1:\n            odd += 1\n        elif odd == 0:\n            str[first] = str[last]\n            str[last] = str[first]\n            first += 1\n            last += 1\n        elif odd == 1:\n            str[first] = str[last]\n            str[last] = str[first]\n            first += 1\n            last += 1\n        elif odd == 2:\n            str[first] = str[last]\n            str[last] = str[first]\n            first += 1\n            last += 1\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result=''\n    \n    if str.isnumeric():\n        return str\n    for index in range(len(str)):\n        if index % 2 == 1:\n            result+=str[index]\n    return result\n    \nstr1='lgnkclgf'\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    even_values = []\n    odd_values = []\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_list = []\n    for num in str:\n        if (num % 2)!= 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    index = 0\n    for x in str:\n        if index % 2 == 0:\n            str.replace(x, '')\n            index += 1\n        else:\n            index += 1\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for x in range(len(str)):\n        if x % 2!= 0:\n            result = result + str[x]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index.append(str[i])\n    return ''.join(odd_index)\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) % 2 == 0:\n        odd_index_val = str[0]\n        str = str[1:]\n        str = str.replace(odd_index_val, str[0])\n        return str\n    else:\n        odd_index_val = str[0]\n        str = str[1:]\n        str = str.replace(odd_index_val, str[1])\n        return str\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        print(a)\n    elif b>a and b>c:\n        print(b)\n    else:\n        print(c)\n        \nmin_of_three(a=3,b=5,c=9)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\nprint(min_of_three(4,5,6))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and b > c:\n        return b\n    elif a > c and c > b:\n        return c\n    elif b > c and c > a:\n        return c\n    else:\n        return a\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # convert to integers\n    if a > b and b > c:\n        a,b,c = b,c,a\n    if a > c and a > b:\n        a,b,c = c,b,a\n    return a \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    # convert to integers\n    if a > b and b > c:\n        a,b,c = b,c,a\n    if a > c and a > b:\n        a,b,c = c,b,a\n    return a \ndef average(a,b,c): \n    '''\n    Write a function to find average of three numbers.\n    '''\n    # convert to integers\n    if a > b and b > c:\n        a,b,c = b,c,a\n    if a > c and a > b:\n        a,b,c = c,b,a\n    return a \ndef product(a,b,c): \n    '''\n    Write a function to find product of three numbers.\n    '''\n    # convert to integers\n    if a > b and b > c:\n        a,b,c = b,c,a\n    if a > c and a > b:\n        a,b,c = c,b,a\n    return a*b*c\ndef main():\n    # Test 1\n    print(f'{min_of_three(2,4,6)}')\n    print(f'{min_of_three(5,2,3)}')\n    print(f'{min_of_three(8,4,6)}')\n    print(f'{min_of_three(7,7,7)}')\n    print(f'{min_of_three(0,0,0)}')\n    print(f'{min_of_three(0,0,0.1)}')\n    print(f'{min_of_three(0.1,0,0)}')\n    print(f'{min_of_three(0.1,0.1,0)}')\n    print(f'{min_of_three(0.1,0.1,0.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1)}')\n    print(f'{min_of_three(0.1,0.1,0.1.1.1"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a==b==c):\n        return a\n    if (a>b):\n        if (b>c):\n            return a\n        else:\n            return b\n    if (a>c):\n        if (b<c):\n            return c\n        else:\n            return b\n    if (a<b):\n        if (c>b):\n            return c\n        else:\n            return b\n    else:\n        if (a==b and a==c):\n            return a\n    \nprint(min_of_three(2,3,3))\nprint(min_of_three(5,6,4))\nprint(min_of_three(4,7,1))\nprint(min_of_three(7,8,9)"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = min(a,b,c)\n    if minimum == a:\n        return a\n    elif minimum == b:\n        return b\n    elif minimum == c:\n        return c\n    else:\n        return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \nprint(min_of_three(1, 2, 3)"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > c and b > a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return a\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>r:\n        return(False)\n    else:\n        for i in range(l,r+1):\n            if (i & n) == n:\n                return(True)\n    return(False)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Check whether the number is greater than the range\n    if (l>n):\n        return False\n    #Check whether the number is greater than the range\n    if (n>r):\n        return False\n    #Check whether the number is less than the range\n    if (l<0):\n        return False\n    if (r<0):\n        return False\n    #Check whether the number is less than the range\n    if (n<l):\n        return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>=0 and l<=r and r<=n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 1:\n        return False\n    elif n % 2 == 0:\n        return all_Bits_Set_In_The_Given_Range(n//2,l,r)\n    else:\n        return all_Bits_Set_In_The_Given_Range(n//2-1,l,r) or all_Bits_Set_In_The_Given_Range(n//2,l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & (n - 1)) == 0 and n <= (2**(l-r)))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>=0 and l<=n and r>=0 and r<=n:\n        for i in range(l,r+1):\n            if (bin(i).count('1')==n):\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    assert n>=l and r>=l,'ERROR: n<l<r'\n    assert type(n) == int, 'ERROR: n must be int'\n    assert type(l) == int, 'ERROR: l must be int'\n    assert type(r) == int, 'ERROR: r must be int'\n    \n    for i in range(l,r+1):\n        assert i&(n>>i)==0, 'ERROR: n is not bitwise mask'\n        # print(i,':',i&(n>>i))\n    return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count=0\n    for i in range(l,r+1):\n        count+=int(bin(i)[2:])\n    if count == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not arr:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr[::-1] #reverses the array to the original order\n    output = []\n    for i in range(n):\n        if arr[i] < 0: #finds the first negative element\n            output.append(arr[i])\n        else:\n            output.append(arr[n-1-i])\n    return output\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in arr:\n        if i > 0:\n            new_arr.append(i)\n        else:\n            new_arr.append(0)\n    if len(new_arr) % n!= 0:\n        new_arr.append(0)\n    if len(new_arr) % n == 0:\n        new_arr.extend([0]*(n-len(new_arr)))\n    if len(new_arr) == 0:\n        new_arr.append(0)\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    return arr[-n:] + arr[:n]\n    \ndef re_arrange_array_reversed(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    return arr[::-1][-n:] + arr[::-1][:n]\n    "
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = sorted(arr)\n    pos_neg_arr = []\n    for i in arr:\n        if i >= 0:\n            pos_neg_arr.append(i)\n        else:\n            neg = i - n\n            pos_neg_arr.append(neg)\n    return pos_neg_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = [0] + arr\n    arr[1:len(arr)-1] = arr[1:len(arr)-1] + [-x for x in arr[2:len(arr)-1]]\n    return arr\n    \ndef main():\n    '''Run the main function.  Only output if this file is run as a script.'''\n    if len(sys.argv) < 2:\n        print(\"Usage: python3 re_arrange_array.py <input.txt> <output.txt>\")\n        sys.exit(1)\n    input_file = sys.argv[1]\n    output_file = sys.argv[2]\n    with open(input_file, 'r') as f:\n        data = f.read()\n        data = data.split()\n        data = data[:-1]\n        arr = data[1:]\n        arr = re_arrange_array(arr, len(arr)-1)\n        with open(output_file, 'w') as f:\n            f.write(' '.join(arr))\n    return\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_ = arr.copy()\n    arr_ = arr_[arr_ < 0]\n    arr_ = arr_.sort()\n    arr = []\n    for i in range(n):\n        if arr_[i] > 0:\n            arr.append(arr_[i])\n        else:\n            arr.append(0)\n    arr = np.array(arr)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort(reverse = True)\n    pos_arr = []\n    neg_arr = []\n    for i in arr:\n        if i > 0:\n            pos_arr.append(i)\n        else:\n            neg_arr.append(i)\n    if len(pos_arr)!= n:\n        pos_arr = []\n    if len(neg_arr)!= n:\n        neg_arr = []\n    arr = pos_arr + neg_arr\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0, len(arr), 1):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    s = 0\n    for i in range(0,len(arr)-n):\n        for j in range(0,len(arr)):\n            if arr[j] < 0:\n                arr[j] *= -1\n                s = s+1\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\",arr)\n    print(\"Array after re-arranging:\""
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace(char,'')\n    return str1\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char =='':\n        return str1\n    else:\n        return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s' %char)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1.replace(str1[i],\"\",1)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    l=len(str1)\n    if char =='':\n        return str1.replace(' ',char)\n    else:\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ').replace(' ','')\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # your code goes here\n    list2=[]\n    for i in list1:\n        if list1.count(i)>n:\n            list2.append(i)\n    return list2\n    \ndef isprime(num):\n    '''\n    Write a function that takes in a number and returns whether it is prime or not.\n    '''\n    # your code goes here\n    return True\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    heapq.heapify(list1)\n    heapq.heapreplace(list1,0)\n    while(len(list1)>n):\n        heapq.heappop(list1)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    '''\n    1. Sort the list using the function.sort()\n    2. Return the list.\n    '''\n    list1.sort()\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sortedlist = []\n    for i in list1:\n        heapq.heapify(sortedlist)\n        if(i not in sortedlist):\n            sortedlist.append(i)\n    return sortedlist[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    arr = []\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n        if len(arr)<n:\n            arr.append(heapq.heappop(heap))\n    return arr\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for element in list1:\n        heapq.heappush(heap,element)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    res = []\n    for i in range(n):\n        res.append(heapq.heappop(list1))\n    return res\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sortedlist = sorted(list1,reverse = True)\n    return sortedlist[0:n]\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x,y,z = r,0,h/2\n    a = ((-1*h**2*x**2) + (h**2*(x**2)) + (2*h*(x**2)))\n    b = -(h**2*(y**2))\n    c = 2*h*(y**2)\n    return a,b,c\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Write your code here\n    r=r\n    h=h\n    return r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    def circular(x,y):\n        return (math.pi*(r**2)*h)*((y**2)+(x**2))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r,h = (float(r),float(h))\n    f = h/2*np.tan(0.5*np.pi*r)\n    return f*r\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    import math\n    import numpy as np\n    \n    y = np.array([r, h, -h, -r])\n    A = np.array([[-2, 1, -1, 0], [3, 1, -1, 0], [1, -1, 1, 0], [0, 0, 0, 1]])\n    x = np.array([1, -2, -3])\n    p = np.linalg.solve(A, x)\n    Y = np.array([p[0] * y[0] + p[1] * y[1], p[0] * y[2] + p[1] * y[3]])\n    area = (4 * math.pi) * (r * (h / 2)) * np.linalg.det(A)\n    \n    return Y, area\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Some help:\n    # https://docs.python.org/3/library/math.html#math.isinf\n    # https://docs.python.org/3/library/functions.html#abs\n    # https://docs.python.org/3/library/stdtypes.html#int.__abs__\n    # https://en.wikipedia.org/wiki/Manhattan_distance#Comparison\n    # https://en.wikipedia.org/wiki/Manhattan_distance#In_the_future_the_furthest_common_subset_of_x_is_the_same_as_y\n    # https://www.geeksforgeeks.org/python-find-the-maximum-distance-between-two-points-given-x-y-coordinates-python/\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    h = h/2\n    r = r/2\n    L = (2*pi*r**2)*(h**2)\n    return L\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 4*(r**2)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    c = l ** 3\n    return c\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = float(l)\n    return l * l * l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    cube=2*l**3\n    return cube\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    # your code here\n    volume = 0\n    if l <= 0:\n        volume = 0\n    elif l == 1:\n        volume = 1\n    elif l == 2:\n        volume = 4\n    elif l == 3:\n        volume = 9\n    elif l == 4:\n        volume = 16\n    elif l == 5:\n        volume = 25\n    elif l == 6:\n        volume = 36\n    elif l == 7:\n        volume = 49\n    elif l == 8:\n        volume = 64\n    elif l == 9:\n        volume = 81\n    elif l == 10:\n        volume = 100\n    elif l == 11:\n        volume = 125\n    elif l == 12:\n        volume = 150\n    elif l == 13:\n        volume = 175\n    elif l == 14:\n        volume = 200\n    elif l == 15:\n        volume = 225\n    elif l == 16:\n        volume = 250\n    elif l == 17:\n        volume = 275\n    elif l == 18:\n        volume = 300\n    elif l == 19:\n        volume = 325\n    elif l == 20:\n        volume = 350\n    elif l == 21:\n        volume = 375\n    elif l == 22:\n        volume = 400\n    elif l == 23:\n        volume = 425\n    elif l == 24:\n        volume = 450\n    elif l == 25:\n        volume = 475\n    elif l == 26:\n        volume = 500\n    elif l == 27:\n        volume = 525\n    elif l == 28:\n        volume = 550\n    elif l == 29:\n        volume = 575\n    elif l == 30:\n        volume = 600\n    elif l == 31:\n        volume = 625\n    elif l == 32:\n        volume = 650\n    elif l == 33:\n        volume = 675\n    elif l == 34:\n        volume = 700\n    elif l == 35:\n        volume = 725\n    elif l == 36:\n        volume = 750\n    elif l == 37:\n        volume = 775\n    elif l == 38:\n        volume = 800\n    elif l == 39:\n        volume = 825\n    elif l == 40:\n        volume = 850\n    elif l == 41:\n        volume = 900\n    elif l == 42:\n        volume = 925\n    elif l == 43:\n        volume = 950\n    elif l == 44:\n        volume = 975\n    elif l == 45:\n        volume = 1000\n    elif l == 46:\n        volume = 1025\n    elif l == 47:\n        volume = 1050\n    elif l == 48:\n        volume = 1075\n    elif l == 49:\n        volume = 1100\n    elif l == 50:\n        volume = 1155\n    return volume\n    \n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l*l*l*l\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                volume += l[i][j][k]**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = 3.14159*(l**3)\n    return vol\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 0x1:\n            n = n >> 1\n        else:\n            n = n << 1\n        count += 1\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0: \n        if n & 0x01 == 0x01: \n            print(\"1\", end = '') \n        elif n & 0x02 == 0x02: \n            print(\"2\", end = '') \n        elif n & 0x04 == 0x04: \n            print(\"4\", end = '') \n        elif n & 0x08 == 0x08: \n            print(\"8\", end = '') \n        elif n & 0x0C == 0x0C: \n            print(\"16\", end = '') \n        n = n >> 2 \n    print('\\n')\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n & 1 == 0:\n            n = n - 2\n        else:\n            n = n + 2\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if (n & 0xFF) == 0:\n        n = n & 0xFF\n    else:\n        n = n ^ (n >> 8)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    new_n = 0\n    for i in range(0, n + 1, 2): \n        new_n = new_n ^ (i + 1)\n    print(\"The output of this function is \", new_n)\n    return new_n \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # wrap in list\n    n_list = list(str(n))\n    # replace the odd bits in list\n    n_list[0] = '0'\n    n_list[1] = '1'\n    # convert back to string\n    n_list = \"\".join(n_list)\n    # return string\n    return n_list\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    number = n\n    b = bin(number).replace('0b','')\n    new_string = b[2:]\n    odd_num = []\n    for i in new_string:\n        if int(i) % 2 == 0:\n            odd_num.append(i)\n    print(odd_num)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(n):\n        if i % 2 == 0:\n            int_num = n\n            bit_num = n\n            break\n    int_num = n-1\n    bit_num = n\n    while bit_num > 0:\n        if int_num % 2 == 0:\n            int_num = int_num - 1\n        else:\n            bit_num = bit_num - 1\n    return int_num\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    sum = 0\n    while n: \n        if n & 0x1: \n            sum += 1\n        n >>= 1 \n    return sum \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # traverse the bits of the number.\n    i = 0\n    while n > 0:\n        if n & 0x1 == 0:\n            n = n >> 1\n            i += 1\n        else:\n            n = n >> 1\n            i += 1\n    # return n as result\n    return i\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # 1. create a dictionary with all unique tuples\n    my_dict = dict()\n    for i in test_list:\n        my_dict[i[0]] = my_dict.get(i[0], 0) + 1\n    # print(my_dict)\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = {}\n    for i in test_list:\n        key = i[0]\n        counter[key] = counter.get(key,0) + 1\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_dict = {}\n    for element in test_list:\n        if element[0] in unique_dict:\n            unique_dict[element[0]] += 1\n        else:\n            unique_dict[element[0]] = 1\n    return unique_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for i in test_list:\n        if i in test_dict:\n            test_dict[i] += 1\n        else:\n            test_dict[i] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        if tuple[0] in result:\n            result[tuple[0]] += 1\n        else:\n            result[tuple[0]] = 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for el in test_list:\n        if el[0] not in result:\n            result[el[0]] = el[1]\n        else:\n            result[el[0]] = result[el[0]] + el[1]\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = Counter(test_list)\n    test_dict = {k:test_dict[k] for k in test_dict if test_dict[k] > 1}\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occ_dict = {}\n    for item in test_list:\n        occ_dict[tuple(item)] = occ_dict.get(tuple(item), 0) + 1\n    return occ_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tup in test_list:\n        if tup[0] in result:\n            result[tup[0]]+=1\n        else:\n            result[tup[0]]=1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    from collections import Counter\n    count = 0\n    \n    substr_set = set()\n    for i in range(len(str)):\n        if str[i] in substr_set:\n            count += 1\n        else:\n            substr_set.add(str[i])\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    s = str\n    counter = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i:j] == str[i:j][::-1]:\n                counter = counter + 1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if str[i:j]!=\"\":\n                count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    if len(str) == 0: \n        return count\n    if str[0] == str[0]: \n        for i in range(len(str)-1): \n            if str[i] == str[i+1]: \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            n += 1\n    return n\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    max_val = 0\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count += 1\n        if count > max_val:\n            max_val = count\n        count = 0\n    return max_val\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    # loop through the string\n    for i in range(0,len(str)-1):\n        # loop through each character in string\n        for j in range(0,len(str)-i-1):\n            # if current character is a dash or a space, check\n            if str[j:j+2] in str:\n                count = count + 1\n    return count\n    \ndef main():\n    print('number of substrings')\n    print(number_of_substrings(\"abcdef\"))\n    print('number of substrings')\n    print(number_of_substrings(\"abacd\"))\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # count the number of non-empty substrings in a given string\n    return len(set(str.count(sub)))-1\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= str[i:j+1].replace(' ', ''):\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    list = []\n    list2 = []\n    for i in range(len(str)):\n        list2 = list2 + str[i]\n    list = list2.split(\" \")\n    count = 0\n    for i in list:\n        if i == i:\n            count = count + 1\n    return count\nprint(number_of_substrings('aabb')"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq = []\n    for i in range(m,n+1):\n        seq.append(i)\n    seq_len = 0\n    for j in seq:\n        seq_len += 1\n        if seq_len % 2 == 1:\n            seq_len += 1\n            while j > seq[seq_len-1]:\n                seq_len += 1\n    return seq_le"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def count(m,n): \n        count = 0\n        for x in range(1,m+1): \n            if x % n!= 0: \n                count += 1\n        return count\n    \n    return count(m,n) \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    s = 2\n    n = n - 1\n    numbers_of_solutions = []\n    total_solutions = 0\n    while s < n:\n        solutions = m - 1\n        while solutions > 0:\n            solution = (s - 1) ** 2\n            solutions -= 1\n            if solution > 0:\n                numbers_of_solutions.append(solution)\n                solutions += 1\n        s += 1\n    total_solutions = sum(numbers_of_solutions)\n    print(total_solutions)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    elif m <= 0 or n <= 0:\n        return -1\n    else:\n        return int(m/(2*n))\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_sequence(m,n,current_sum):\n        if current_sum == n:\n            return 1\n        elif current_sum > n:\n            return 0\n        elif current_sum > 0:\n            return 0\n        else:\n            #using recursion\n            if m==0:\n                return get_sequence(m,n-1,current_sum+1)\n            else:\n                return get_sequence(m-1,n,current_sum+2)\n    \n    return get_sequence(m,n,0)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num_sequences = 0\n    for i in range(m, n+1):\n        for j in range(i, n+1):\n            if j-i > 2:\n                num_sequences += 1\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # YOUR CODE HERE\n    return m,n\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 2*n-1 + m*(n-m)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    tot=0\n    seq=[]\n    def p(m,n):\n        if n==0:\n            return 0\n        elif n>m:\n            return 0\n        elif m<0:\n            return 0\n        elif m==0:\n            return 1\n        else:\n            return p(m-1,n-1)+p(m,n-1)\n    for i in range(m,n):\n        seq.append(i)\n        seq.append(p(i-1,n-1))\n    tot=seq[n-1]\n    return tot\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    try:\n        list1.remove(list2[-1])\n    except IndexError:\n        print(\"List size less than 2\")\n    finally:\n        list1.append(list2[-1])\n    \n    return list1\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    l1 = len(list1)\n    l2 = len(list2)\n    list1[l2-1] = list2[l1-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n    return l\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list2.remove(list2[-1])\n    list2.insert(0,list2[-1])\n    return list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list2=list2[:-1]\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.append(list2.pop())\n    list1.insert(len(list1),list2.pop())\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for index,element in enumerate(list1):\n        if index == len(list1) - 1:\n            list1[index] = list2[index]\n        else:\n            list1[index] = list2[index]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for ch in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #Loop through the string\n    count = 0\n    for char in str1:\n        #If char is a vowel, add one\n        if char in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count(str1[0]) + count_charac(str1[1:])\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(str1.count('a'))\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if str1 == '':\n        return 0\n    else:\n        count = 0\n        for i in range(len(str1)):\n            if str1[i] == str1[i][0]:\n                count = count + 1\n        return count\n    \n    \ndef main():\n    \"\"\"\n    Main function to be run when the program is run\n    \"\"\"\n    # Get the input from the user\n    str1 = input(\"Enter a string: \")\n    \n    # Call the function count_charac() to get the total number of\n    # characters in the string\n    print(\"The number of characters in the string is\",\n        count_charac(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    print(\"Counting characters...\")\n    c = 0\n    for ch in str1:\n        c += 1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac_count = 0\n    for i in str1:\n        charac_count += 1\n    return charac_count\n    "
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N < 0):\n        return 0\n    else:\n        if (N == 1):\n            return 1\n        else:\n            if(N % 2 == 0):\n                return int(N**0.5) + 1\n            else:\n                return int(math.sqrt(N)) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s = 0\n    p = N \n    while N > p:\n        p = (p-1)//2\n        s = s + p\n    return s\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(2, N):\n        if (N % i) == 0:\n            return (N//i)**2\n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > math.sqrt(N):\n        return 1\n    if N == 1:\n        return N\n    return next_Perfect_Square(N-1) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square_N=N*N\n    #check if square N is even\n    if square_N%2==0:\n        return square_N+1\n    else:\n        if square_N%2==1:\n            square_N=square_N+1\n        #check if square N is odd\n        while square_N<=N:\n            square_N=square_N*N+N\n        return square_N\ndef perfect_square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #check if square N is even\n    if N%2==0:\n        return N+1\n    else:\n        if N%2==1:\n            N=N+1\n        #check if square N is odd\n        while N<=N:\n            N=N*N+N\n        return N\ndef check_perfect_square(N):\n    '''\n    Check if a given number is a perfect square.\n    '''\n    square_N=perfect_square(N)\n    if square_N<N:\n        print(\"Not perfect square\")\n    else:\n        print(\"Perfect square\")\ndef perfect_square_gen(N):\n    '''\n    N is an integer to be tested\n    '''\n    if N%2==0:\n        N=N+1\n    #check if square N is even\n    if N%2==1:\n        N=N+1\n    square_N=perfect_square(N)\n    if square_N==N:\n        print(\"Perfect square\")\n    else:\n        print(\"Not perfect square\")\ndef perfect_square_gen_v2(N):\n    '''\n    N is an integer to be tested\n    '''\n    N=int(input(\"Enter a number: \"))\n    if N<=0:\n        N=perfect_square_gen(N)\n    else:\n        while N>N:\n            N=perfect_square_gen(N)\n    if N==N:\n        print(\"Perfect square\")\n    else:\n        print(\"Not perfect square\")\ndef perfect_square_gen_v2_comp(N):\n    '''\n    N is an integer to be tested\n    '''\n    N=int(input(\"Enter a number: \"))\n    if N<=0:\n        N=perfect_square_gen(N)\n    else:\n        if N%2==0:\n            N=N+1\n        else:\n            N=perfect_square_gen(N)\n    if N==N:\n        print(\"Perfect square\")\n    else:\n        print(\"Not perfect square\")"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    for i in range(1,N):\n        if (N+i)%2==0:\n            a=N/i\n        else:\n            a=N+i\n        if (a*a)%i==1:\n            return i\n    \n    return N\n    \n    \ndef my_square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    for i in range(1,N+1):\n        if (N+i)%2==0:\n            a=N/i\n        else:\n            a=N+i\n        if (a*a)%i==1:\n            return i\n    \n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    if N<1:\n        return \"This input does not satisfy the condition\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return 2 * N - 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1,N+1):\n        if i**2>=N:\n            return i\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1: \n        return 1\n    elif N == 2: \n        return 1\n    else:\n        return math.ceil(math.sqrt(N))\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return find_max_sum(arr, len(arr) - 1, 0, 0)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    current_sum = 0\n    previous_sum = 0\n    for index in range(len(arr)-1):\n        if arr[index] > arr[index+1]:\n            current_sum += arr[index+1]\n        else:\n            current_sum += arr[index]\n    return current_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0: \n        return 0 \n    max_sum = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > max_sum: \n            max_sum = arr[i] \n        elif arr[i] < max_sum: \n            max_sum = arr[i] \n            \n    return max_sum \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    arr.append(0)\n    #print(arr)\n    def first_increasing(arr, idx, sum):\n        if idx >= len(arr):\n            #print(sum, arr[idx])\n            return sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)-1): \n        if arr[i] > arr[i+1] and arr[i] > 0:\n            max_sum += arr[i]\n    return max_sum \n    "
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: return arr[0]\n    max_sum_arr = arr[1:]\n    res = arr[0]\n    for i in range(1,len(arr)):\n        res = max(res,arr[i]+arr[i-1])\n        max_sum_arr = max(max_sum_arr,res)\n    return max_sum_arr\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    i = 0\n    j = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        first_bit = arr[0]\n        second_bit = arr[1]\n        for i in range(2, len(arr)):\n            if arr[i] > first_bit:\n                first_bit = arr[i]\n                continue\n            elif arr[i] < first_bit and arr[i] > second_bit:\n                second_bit = arr[i]\n        return first_bit + max(second_bit, arr[len(arr)-1] - first_bit)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # code here\n    i = 0\n    j = 0\n    n = len(arr)\n    m = len(arr)\n    if(m == 0):\n        return 0\n    if(m == 1):\n        return arr[0]\n    while(i < m):\n        while(j < n):\n            if(arr[i] > arr[j]):\n                arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n        j = 0\n    return max(arr"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0: \n        return 0\n    max_so_far = arr[0] \n    max_ending_here = max_so_far \n    for i in range(1, len(arr)): \n        current_max = arr[i] + max_ending_here \n        if current_max < max_so_far: \n            max_ending_here = max(current_max, max_ending_here) \n            max_so_far = current_max \n    return max_ending_here \n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    num = 0\n    while abs(num)!= number:\n        num = (num*10) + ((-1)**(int(math.log10(abs(num)))-1))\n    return num\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    babylonian = 0.0\n    if number == 0:\n        return 0.0\n    else:\n        while fabs(number) > 0.0000001:\n            if fabs(number) >= fabs(babylonian):\n                babylonian = fabs(number)\n            number = fabs(number) / fabs(number)\n    return number\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def square(x):\n        if x > 0:\n            x_squared = x * x\n            if x_squared > 0:\n                x_squared = (x ** 2) * (x ** 2)\n                return x_squared\n            else:\n                return None\n        else:\n            return None\n    return square(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if(number < 0):\n        return babylonian_squareroot(abs(number))\n    elif(number > 0):\n        return number**0.5\n    "
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return (number ** 0.5) ** 0.5\n    \n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root_sqrt = 0\n    sqrt = 0\n    if number < 0:\n        number = -number\n    while number > 0:\n        remainder = number % 10\n        if remainder == 0:\n            root_sqrt = root_sqrt + 1\n            sqrt = sqrt + 1\n        else:\n            sqrt = sqrt + 1\n        number = int(number / 10)\n    return root_sqrt\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 1\n    while squareroot < number:\n        squareroot = squareroot + (squareroot * 1.0)\n    return squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Step 1: compute square root using Babylonian method\n    babylonian_sqrt = 0.0\n    sqrt_n = 0.0\n    babylonian_sqrt = (1.0/(4.0*number)) * (number**2.0)\n    sqrt_n = 0.0\n    while (abs(babylonian_sqrt-sqrt_n) > 1e-6):\n        babylonian_sqrt = babylonian_sqrt + (1.0/(4.0*number)) * (number**2.0)\n        sqrt_n = 0.0\n        while (abs(babylonian_sqrt-sqrt_n) > 1e-6):\n            babylonian_sqrt = babylonian_sqrt + (1.0/(4.0*number)) * (number**2.0)\n            sqrt_n = sqrt_n + 0.0\n    return babylonian_sqrt\n    \n    \ndef test_babylonian_squareroot():\n    '''\n    Test functions for babylonian_squareroot().\n    '''\n    assert babylonian_squareroot(1.0) == 0.0\n    assert babylonian_squareroot(2.0) == 0.0\n    assert babylonian_squareroot(3.0) == 0.0\n    assert babylonian_squareroot(4.0) == 0.0\n    assert babylonian_squareroot(5.0) == 0.0\n    assert babylonian_squareroot(10.0) == 0.0\n    assert babylonian_squareroot(100.0) == 0.0\n    assert babylonian_squareroot(1000.0) == 0.0\n    assert babylonian_squareroot(10000.0) == 0.0\n    assert babylonian_squareroot(100000.0) == 0.0\n    assert babylonian_squareroot(100000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(100000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squareroot(1000000.0) == 0.0\n    assert babylonian_squar"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 1\n    if number > 2:\n        return babylonian_squareroot(number-2) + 1\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sqrt = sqrt + i\n    return sqrt\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1: return 0\n    p = str[0]\n    dp = 1\n    for c in str[1:]:\n        if p == c:\n            dp += 1\n        else:\n            if dp > p:\n                dp = 1\n            p = c\n    return dp\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #dp[i][j] = max(dp[i-1][j-1],dp[i-1][j]) + 1\n    if not str:\n        return 0\n    dp = [[0 for _ in range(len(str)+1)] for _ in range(len(str)+1)]\n    dp[0][0] = 1\n    for i in range(1,len(dp)):\n        for j in range(1,len(dp[0])):\n            if str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1])\n    return dp[len(str)][len(str)]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str: return 0\n    # initialize a result variable\n    result = 0\n    # traverse the string\n    for i in range(len(str)):\n        # check if the first and the last digits match\n        if str[i] == str[-i-1]:\n            # increment the result by one\n            result += 1\n        else:\n            # check if the previous digits are the same as the current digit\n            if not str[i].isalpha():\n                # if not, then store the result as 0\n                result = 0\n            else:\n                # increment the result by 1\n                result += 1\n    return result\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == None or str == \"\":\n        return 0\n    max = 0\n    n = len(str)\n    \n    for i in range(n):\n        if (i > 0 and str[i] == str[i - 1]) or (i > 0 and str[i]!= str[i - 1]):\n            dp[i] = dp[i - 1] + 1\n        if dp[i] > max:\n            max = dp[i]\n    return max\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == \"\": \n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0: \n        return 0\n    dp = [[-1]*n for i in range(n)]\n    lps(str, 0, 0, dp)\n    return max(dp[n-1])"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    if len(str) == 0: return 0\n    if str[0] == str[-1]: return 1\n    lps = 0\n    for i in range(1, len(str)):\n        lps = max(lps, lps+1)\n        if str[i] == str[i-1] and i-2 >= 0: lps = max(lps, len(str)-i+1)\n    return lps"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if len(str) == 0:\n        return 0\n    \n    max_len = 1\n    \n    i = 0\n    \n    # Check if the first character is a palindrome\n    while i < len(str):\n        \n        left = str[i]\n        right = str[i+1]\n        \n        if str[i] == str[i+1]:\n            i += 2\n            continue\n        \n        # Check the new palindrome\n        new_palindrome = str[i:i+2]\n        new_palindrome = new_palindrome[::-1]\n        \n        if new_palindrome == str[i:i+2]:\n            \n            # Check the index of the new palindrome\n            index = i\n            \n            # We are in the middle of the substring\n            while index < len(str) and str[index] == str[index+1]:\n                \n                # Decrement the index\n                index -= 1\n                \n            # If we are at the start of the subsequence, and there is a palindrome in the middle\n            # increment the length of the longest palindrome to the current subsequence\n            # and reset the start point of the subsequence to the current index\n            if str[i] == str[i+1]:\n                max_len = max(max_len, len(new_palindrome))\n            \n            # If the new palindrome is not a palindrome, then increment the length of the longest palindrome\n            else:\n                max_len = max(max_len, len(new_palindrome))\n                \n        else:\n            # If the new palindrome is not a palindrome, then increment the length of the longest palindrome to the current subsequence\n            # and reset the start point of the subsequence to the current index\n            if str[i] == str[i+1]:\n                max_len = max(max_len, len(new_palindrome))\n            \n            # If the new palindrome is a palindrome, then we are at the start of the subsequence\n            # we have not a palindrome, so we decrement the start point of the subsequence\n            else:\n                max_len = max(max_len, len(new_palindrome))\n                \n            # Move the index to the start of the subsequence\n            i += 1\n            \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    else:\n        return 1 + lps(str[1:])\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    a = 1\n    while n > 1:\n        a = a * n\n        n = n - 1\n    return a\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum_recursive(n):\n        if n == 0:\n            return 0\n        else:\n            return n + harmonic_sum_recursive(n-1)\n    return harmonic_sum_recursive(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h_sum = 0\n    for i in range(1, n+1):\n        h_sum += (1/i)\n    return h_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    n = int(n)\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    a = 1\n    for x in range(0, n):\n        a = a + 1/x\n    return a\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum += i / (i+1)\n    return(sum)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    answer = 0.0\n    for i in range(1, n+1):\n        answer += 1/(i*(i+1))\n    return answer\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection=[]\n    i=0\n    j=0\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i]==array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i]<array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    \n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] < array_nums2[j]:\n            i = i + 1\n        elif array_nums1[i] > array_nums2[j]:\n            j = j + 1\n        else:\n            result.append(array_nums1[i])\n            i = i + 1\n            j = j + 1\n    \n    return result\n    \n    \narray_nums1 = [2,7,15,20,26]\narray_nums2 = [1,5,6,8]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a = {}\n    for i in range(0,len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            a[array_nums1[i]] = array_nums2.count(array_nums1[i])\n        else:\n            a[array_nums1[i]] = 0\n    return a"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr1=set(array_nums1)\n    arr2=set(array_nums2)\n    intersection=arr1 & arr2\n    print('intersection: ', intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    array_nums = []\n    \n    for i in array_nums1:\n        array_nums.append(i)\n        \n    for j in array_nums2:\n        if j in array_nums:\n            array_nums.remove(j)\n    \n    return array_nums\n    \n    \n    # OUTPUT\n    \n    # [2, 7, 8, 9, 10, 12, 11]\n    \n    # [2, 7]\n    \n    # [2, 10]\n    \n    # [3, 8]\n    \n    # [2, 10]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # To find the intersection of the two arrays\n    intersection = []\n    \n    for i in range(0,len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n    \n    return intersection\n    \n    \n    \ndef numbers_to_strings(numbers):\n    '''\n    Convert numbers to strings.\n    '''\n    string_numbers = []\n    \n    for i in range(0,len(numbers)):\n        string_numbers.append(str(numbers[i]))\n    \n    return string_numbers\n    \n    \ndef main():\n    '''\n    To test the above functions, uncomment the commented lines of code below.\n    '''\n    print(intersection_array([1,2,3,4], [3,4,5,6]))\n    print(intersection_array([1,2,3,4], [2,3,4,5]))\n    print(intersection_array([3,3,3,4,5,6], [3,4,5,6,7,8]))\n    print(intersection_array([1,2,3,4], [2,3,4,5]))\n    \n    print(numbers_to_strings([1,2,3,4]))\n    print(numbers_to_strings([3,3,3,4,5,6]))\n    print(numbers_to_strings([1,2,3,4,5,6]))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i1, i2 = 0, 0\n    intersections = []\n    while i1 < len(array_nums1) and i2 < len(array_nums2):\n        if array_nums1[i1] == array_nums2[i2]:\n            intersections.append(array_nums1[i1])\n            i1 += 1\n            i2 += 1\n        else:\n            i1 += 1\n    return intersections\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_counter = {}\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                intersection_counter[num1] = intersection_counter.get(num1,0) + 1\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection_counter[num] = intersection_counter.get(num,0) + 1\n    intersection_max = 0\n    for num in intersection_counter:\n        if intersection_counter[num] > intersection_max:\n            intersection_max = intersection_counter[num]\n            intersection_target = num\n    return intersection_target\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                intersection_nums.append(num1)\n    return intersection_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res=[]\n    for i in array_nums2:\n        if i in array_nums1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if (x not in tup):\n        return 0\n    else:\n        return len(tup[x])\n    \ndef count_Y(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if (x not in tup):\n        return 0\n    else:\n        return len(tup[x])\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if(i == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef count_X_2(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(tup.count(x))\n    \ndef count_unique_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for item in tup:\n        if x == item:\n            counter += 1\n    return counter\n    \ndef count_unique_X_2(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for item in tup:\n        if x == item:\n            counter += 1\n    return counter\n    \ndef count_unique_Y(tup, y):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for item in tup:\n        if y == item:\n            counter += 1\n    return counter\n    \ndef count_unique_Y_2(tup, y):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for item in tup:\n        if y == item:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if x == i: \n            count += 1 \n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    l = list(tup)\n    for i in l:\n        if i == x:\n            l.remove(i)\n            count = count + 1\n    return(count)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    print(tup, x)\n    #First, check if the tuple is empty\n    if len(tup) == 0:\n        return 0\n    #If it isn't, get the count of the element in the tuple\n    else:\n        return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    return_list = []\n    for i in list:\n        return_list.insert(0,i)\n    return return_list\n        \ndef create_list(element):\n    '''\n    Write a function that takes in a list and a number, and returns a list with that number of elements equal to the number.\n    '''\n    \n    return_list = []\n    for i in range(0,element):\n        return_list.append(element)\n    return return_list\n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list, and sorts it in ascending order.\n    '''\n    return sorted(list)\n    \ndef get_smallest_list(list):\n    '''\n    Write a function that takes in a list, and returns the smallest number in the list.\n    '''\n    \n    return min(list)\n    \ndef get_smallest_list(list):\n    '''\n    Write a function that takes in a list, and returns the smallest number in the list.\n    '''\n    \n    return sorted(list)[0]\n    \ndef bubble_sort_asc(list):\n    '''\n    Write a function that takes in a list, and sorts it in ascending order.\n    '''\n    for i in range(len(list)-1):\n        for j in range(len(list)-1):\n            if list[j] > list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n    \ndef bubble_sort_desc(list):\n    '''\n    Write a function that takes in a list, and sorts it in descending order.\n    '''\n    for i in range(len(list)-1):\n        for j in range(len(list)-1):\n            if list[j] < list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n    \ndef partition(list,start,end):\n    '''\n    Write a function that takes in a list and a number, and returns a new list that contains the first number in the list, the first number in the list, and the last number in the list.\n    '''\n    \n    low = list[start]\n    low_idx = start\n    \n    for i in range(start+1,end):\n        if list[i] < low:\n            low_idx = i\n            \n    list[low_idx],list[end] = list[end],list[low_idx]\n    return list\n    \ndef quicksort(list):\n    '''\n    Write a function that takes in a list and sorts it in ascending order.\n    '''\n    \n    if len(list) > 1:\n        pivot = list[len(list)-1]\n        left = list[0:len(list)-1]\n        right = list[len(list)-1:]\n        \n        less = []\n        great = []\n        \n        for i in left:\n            if i < pivot:\n                less.append(i)\n        for i in right:\n            if i > pivot:\n                great.append(i)\n        \n        return quicksort(less) + [pivot] + quicksort(great)\n    \n    else:\n        return list\n    \ndef heapsort(list):\n    '''\n    Write a function that takes in a list and sorts it in ascending order.\n    '''\n    \n    if len(list) > 1:\n        \n        def fix_heap(heap):\n            \n            for i in range(len(heap)-1,-1,-1):\n                heap[i] = heap[i+1]\n                del heap[i+1]\n        \n        def swap(a,b):\n            \n            a,b = b,a\n            \n        def insert(heap,n,l):\n            \n            if n == 0:\n                return heap[0]\n            elif n == 1:\n                return heap[n]\n            \n            p = heap[n//2]\n            \n            if n%2 == 0:\n                \n                if heap[n] < heap[n//2]:\n                    swap(heap,n)\n                    insert(heap,n//2,l)\n                    \n                else:\n                    swap(heap,n//2)\n                    insert(heap,n//2,l)\n                    \n            elif n%2 == 1:\n                \n                if heap[n] < heap[n//2]:\n                    swap(heap,n//2)\n                    insert(heap,n//2,l)\n                    \n                else:\n                    swap(heap,n//2)\n                    insert(heap,n//2,l)\n                \n                \n                \n        fix_heap(heap)\n        \n        def heapify(heap,i):\n            \n            n = i\n            \n            while n!= 0:\n                \n                fix_heap(heap)\n                \n                n = n//2\n        \n        def build_heap(heap):\n            \n            for i in range(len(heap)-1,-1,-1):\n                insert(heap,i,0)\n        \n        heap = list\n        \n        build_heap(heap)\n        \n        for i in range(len(heap)-1,-1,-1):\n            \n            heap[0] = heap[i]\n            heap[i] = heap[len(heap)-1]\n            del heap[len(heap)-1]\n            \n            fix_heap(heap)\n        \n        return heap\n        \n    \ndef build_heap(heap):\n    \n    def heapify(heap,i):\n        \n        if len(heap) <= i:\n            return\n        \n        for j in range(len(heap)):\n            if heap[j] < heap[i]:\n                swap(heap,j,i)\n                heapify(heap,j)\n    \n    def swap(heap,i,j):\n        \n        heap[i],heap[j] = heap[j],heap[i]\n        \n    \n    def insert(heap,n,l):\n        \n        if len(heap) > 1:\n            \n            if l == 0:\n                \n                for i in range(n):\n                    heap[i] = heap[i+1]\n                    del heap[i+1]\n                \n                swap(heap,n,0)\n                insert(heap,n//2,l)\n                \n            else:\n                for i in range(l-1):\n                    heap[i],heap[i+1] = heap[i+1],heap[i]\n                    del heap[i+1]\n                    \n        else:\n            \n            heap[0] = heap[l-1]\n            heap[l-1] = heap[l-1]\n            del heap[l-1]\n            \n            for i in range(l-1):\n                heap[i] = heap[i+1]\n                del heap[i+1]\n            \n            heapify(heap,0)\n            \n    \n    heap = list\n    \n    build_heap(heap)\n    \n    \ndef time_fun(nums,func):\n    '''\n    Write a function that takes in a list and performs the same function over that list.\n    '''\n    \n    time_list = []\n    \n    if len(nums) > len(func):\n        \n        for i in range(len(nums)):\n            \n            time_list.append(func(nums[i]))\n            \n    else:\n        \n        for i in range(len(func)):\n            \n            time_list.append(func(nums[i]))\n    \n    return time_list\n    \ndef time_quicksort(nums):\n    '''\n    Write a function that takes in a list and sorts it in ascending order.\n    '''\n    \n    def partition(nums,start,end):\n        \n        if start >= end:\n            return\n        \n        pivot = nums[start]\n        \n        left = start\n        \n        right = end\n        \n        while left <= right:\n            \n            while lef"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    position = 0\n    while position < len(list):\n        list[position] = element\n        position = position + 1\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i] + element)\n    list = new_list\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    temp = []\n    for i in list:\n        temp.append(i)\n        temp.append(element)\n        temp.insert(0,element)\n    return temp\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # YOUR CODE HERE\n    \n    new_list = []\n    for element in list:\n        new_list.append(element)\n    \n    return new_list\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    output = []\n    for element in list:\n        output.append(element)\n        output.append(element)\n    return output\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return list\n    else:\n        list.insert(0,element)\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # insert_element_list = []\n    # for element in list:\n    #     insert_element_list.append(element)\n    #     insert_element_list.append(element)\n    # return insert_element_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # TODO: Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    # HINT: \n    # - You are allowed to mutate the input list/element.\n    # - You are not allowed to mutate any other values in the list.\n    # - Don't worry about the order of the elements in the list!\n    # - Don't worry about the indexing, indexing starts at 0.\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = cmath.sqrt(numbers[0])\n    theta = cmath.acos(numbers[1])\n    phi = cmath.asin(numbers[2])\n    return [r, theta, phi]\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers[0]\n    b = numbers[1]\n    c = numbers[2]\n    if a > 0:\n        if b == 0:\n            return(0,0)\n        else:\n            phi_1 = cmath.phase(b)\n            phi_2 = cmath.phase(c)\n            phi_3 = cmath.phase(a)\n            x = cmath.polar(phi_1 - phi_2)\n            y = cmath.polar(phi_2 + phi_3)\n            return(x,y)\n    else:\n        if b == 0:\n            return(0,0)\n        else:\n            phi_1 = cmath.phase(b)\n            phi_2 = cmath.phase(c)\n            phi_3 = cmath.phase(a)\n            x = cmath.polar(phi_1 + phi_2)\n            y = cmath.polar(phi_2 - phi_3)\n            return(x,y)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers.real\n    b = numbers.imag\n    return (a,b)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers[0]\n    b = numbers[1]\n    c = numbers[2]\n    d = numbers[3]\n    x = cmath.polar(c, b)\n    y = cmath.polar(a, c)\n    z = cmath.polar(d, c)\n    return(x,y,z)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #taking input as a string\n    input = numbers.split()\n    #converting the input to integer\n    convert = map(float, input)\n    #making an array of complex numbers\n    polar = []\n    #looping over the complex numbers\n    for i in convert:\n        #checking the sign of the numbers\n        if i > 0:\n            #adding to array\n            polar.append(cmath.polar(i))\n        else:\n            #if the number is a negative, it would be flipped\n            polar.append(cmath.polar(-i))\n    #returning the array\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Create an empty list\n    listOfComplexNums = []\n    # Loop through the given numbers\n    for n in numbers:\n        # Create the list item\n        listOfComplexNums.append(n.real + 1j*n.imag)\n    # Convert the list\n    complexNumbers = listOfComplexNums\n    # Convert the list to a complex\n    return cmath.polar(complexNumbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import math\n    # Defining function to convert complex numbers\n    def complex_convert(c):\n        '''\n        Converts input complex numbers to polar coordinates\n        '''\n        r = c.real\n        i = c.imag\n        return r + math.pi * i/2\n    # Converting input numbers into a list\n    numbers = numbers.split(',')\n    # Converting the input list to a complex number\n    converted_list = []\n    for element in numbers:\n        converted_list.append(complex_convert(element))\n    # Returning list as list\n    return converted_list\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #Define an empty list to store the complex numbers\n    l = []\n    #Define a for loop to store the complex numbers\n    for number in numbers:\n        #check if the complex number is a complex number\n        if isinstance(number, complex):\n            #convert the complex number to an angle and add to the list\n            angle = cmath.phase(number)\n            l.append(angle)\n    #Return the list\n    return l\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    newNumbers = []\n    for num in numbers:\n        # convert a complex number into a radian value\n        num = cmath.polar(num)\n        # use cmath.polar to convert the value from 2*pi radian to radians\n        num = cmath.polar(num[0])\n        newNumbers.append(num)\n    return newNumbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # first 2 coeffiient is 0\n    # third coeffient is pi/2\n    # fourth coeffient is -pi/2\n    # then result is returned as a complex number\n    def angle(c,a):\n        return cmath.phase(a*c)\n    \n    # first 2 coeffiient is 0\n    # third coeffient is pi/2\n    # fourth coeffient is -pi/2\n    def convert_complex(c, a):\n        return cmath.rect(c, a)\n    \n    # first 2 coeffiient is 0\n    # third coeffient is pi/2\n    # fourth coeffient is -pi/2\n    def convert_dec(c, a):\n        return cmath.rect(c, a)\n    \n    # first 2 coeffiient is 0\n    # third coeffient is pi/2\n    # fourth coeffient is -pi/2\n    def convert_rad(c, a):\n        return cmath.rect(c, a)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            count += 1\n    print(f'The number of integers in the list are {count}')\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    l = list1\n    return len(l)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    s = 0\n    for i in list1:\n        if type(i) == int:\n            s += 1\n    return s\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) is int:\n            count = count + 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # %todo Calculate the number of integer elements in the given list\n    # %todo Append the value of this function to the list\n    # %todo Return the number of integer elements in the list\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for item in list1:\n        if type(item) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # YOUR CODE HERE\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_list = []\n    for x in list1:\n        if type(x) == int:\n            num_list.append(1)\n        elif type(x) == float:\n            num_list.append(0)\n        else:\n            num_list.append(0)\n    return sum(num_list)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    l = list(l)\n    return list(combinations(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    possible_combinations = combinations_with_replacement(l, n)\n    color_combinations = []\n    for combination in possible_combinations:\n        color_combinations.append(tuple(combination))\n    return color_combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(l):\n        combinations.append(tuple(l))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return list(combinations_with_replacement(l, n))\n    else:\n        temp_list = list(combinations_with_replacement(l, n))\n        for x in temp_list:\n            y = list(x)\n            for yy in combinations_colors(y, n-1):\n                yield tuple(y)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combo_list = []\n    \n    for comb in combinations_with_replacement(l, n):\n        combo_list.append(comb)\n        \n    return combo_list\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return None\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return [l]\n    else:\n        l_copy = l[:]\n        combinations = []\n        combinations = combinations_colors(l, n-1)\n        for i in combinations:\n            combinations.append((tuple(l_copy), i))\n            l_copy.remove(l_copy[i[0]])\n        return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_of_elements = []\n    for i in range(l):\n        for j in range(n):\n            list_of_elements.append(l)\n    return list_of_elements\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    p = combinations_with_replacement(l, n)\n    return [ tuple(x) for x in p ]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(1,n+1):\n        colors.append(l[i])\n    return tuple(colors)\ndef combinations_addition(l,n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    addition = []\n    for i in range(1,n+1):\n        addition.append(l[i])\n    return tuple(addition)\ndef combinations_hash(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    hash = []\n    for i in range(1,n+1):\n        hash.append(l[i])\n    return tuple(hash)\ndef product_all(l,n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    prod = []\n    for i in range(1,n+1):\n        prod.append(l[i])\n    return tuple(prod)\ndef product_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(1,n+1):\n        colors.append(l[i])\n    return tuple(colors)\ndef product_addition(l,n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    addition = []\n    for i in range(1,n+1):\n        addition.append(l[i])\n    return tuple(addition)\ndef product_hash(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    hash = []\n    for i in range(1,n+1):\n        hash.append(l[i])\n    return tuple(hash)\ndef product_colors_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(1,n+1):\n        colors.append(l[i])\n        colors.append(l[i])\n        colors.append(l[i])\n        colors.append(l[i])\n    return tuple(colors)\ndef product_addition_colors(l,n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    addition = []\n    for i in range(1,n+1):\n        addition.append(l[i])\n        addition.append(l[i])\n        addition.append(l[i])\n        addition.append(l[i])\n    return tuple(addition)\ndef product_hash_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    hash = []\n    for i in range(1,n+1):\n        hash.append(l[i])\n        hash.append(l[i])\n        hash.append(l[i])\n        hash.append(l[i])\n        hash.append(l[i])\n    return tuple(hash)\ndef product_colors_colors_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(1,n+1):\n        colors.append(l[i])\n        colors.append(l[i])\n        colors.append(l[i])\n        colors.append(l[i])\n        colors.append(l[i])\n        colors.append(l[i])\n    return tuple(colors)\ndef complete(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    product = []\n    for i in range(1,n+1):\n        product.append(l[i])\n    return tuple(product)\ndef complete_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(1,n+1):\n        colors.append(l[i])\n    return tuple(colors)\ndef complete_addition(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    addition = []\n    for i in range(1,n+1):\n        addition.append(l[i])\n    return tuple(addition)\ndef complete_hash(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    hash = []\n    for i in range(1,n+1):\n        hash.append(l[i])\n    return tuple(hash)\ndef complete_colors_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(1,n+1):\n        colors.append(l[i])\n        colors.append(l[i])\n        colors.append(l[i])\n        colors.append(l[i])\n        colors.append(l[i])\n    return tuple(colors)\ndef complete_addition_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    addition = []\n    for i in range(1,n+1):\n        addition.append(l[i])\n        addition.append(l[i])\n        addition.append(l[i])\n        addition.append(l[i])\n    return tuple(addition)\ndef complete_hash_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    hash = []\n    for i in range(1,n+1):\n        hash.append(l[i])\n    return tuple(hash)\ndef complete_colors_colors_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    fo"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_list = [True for i in range(n+1)]\n    count = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # This code chunk is done by using a dictionary\n    d = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0}\n    for i in range(2, n + 1):\n        if i in d:\n            d[i] += 1\n    return sum(d.values())\n    \n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # num = int(input(\"Enter number: \"))\n    num = int(n)\n    count = 0\n    for i in range(2, num):\n        if num % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Create a python list of primes below n\n    primes = [2]\n    #Create a count variable to keep track of the number of prime numbers\n    count = 0\n    #While the number of primes is less than or equal to the given number\n    while len(primes) < n:\n        #If the number of primes is less than or equal to n\n        if len(primes) < n:\n            #Break out of the loop, once it exceeds the number of primes\n            break\n        #If the number of primes is more than or equal to the given number\n        else:\n            #Add all of the primes to the list primes\n            for p in primes:\n                #If the primes list is longer than the given number, stop\n                if len(primes) == n:\n                    break\n                #If the primes list is shorter than the given number, continue\n                elif len(primes) > n:\n                    continue\n                #If the primes list is not empty, go through the remaining primes list\n                else:\n                    #If the primes list has at least one element, keep the count variable for each element\n                    if len(primes) >= 1:\n                        count += 1\n                        #Break out of the for loop\n                        break\n                    #If the primes list has no elements, remove the current primes list from the list\n                    else:\n                        primes.pop(0)\n    #Return the number of prime numbers\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        for i in range(3,n):\n            if n%i==0:\n                return 0\n        return 1+count_Primes_nums(n//2)\n        \n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = []\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #write your code here\n    if n < 1:\n        return 0\n    count = 0\n    for i in range(n):\n        for j in range(i+1):\n            if i < j:\n                if (i+j) % 2 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    total = 0\n    for i in range(2, n+1):\n        # Checking whether a number is prime or not\n        if all(isPrime(i) for i in range(2, n)):\n            total += 1\n    return total\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return len(list(filter(lambda n: n > 0, range(2, n + 1))))\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n    # raise NotImplementedError()\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if len(a) > len(b):\n        return tuple(b)\n    else:\n        return tuple(a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a_int = int(a)\n    b_int = int(b)\n    list_num = list(str(a_int)+str(b_int))\n    return (b_int,a_int)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max = test_tup1[0]\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max:\n            max = test_tup1[i]\n    max_index = test_tup1.index(max)\n    test_tup1[max_index], test_tup1[len(test_tup1)-1] = test_tup1[len(test_tup1)-1], test_tup1[max_index]\n    return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if (test_tup1[0][0] < test_tup2[0][0]):\n        return test_tup1\n    elif (test_tup1[0][0] > test_tup2[0][0]):\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #Initialize variables\n    e1 = test_tup1[0]\n    e2 = test_tup2[0]\n    e3 = test_tup1[1]\n    e4 = test_tup2[1]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    test_tup1.sort(reverse=True)\n    test_tup2.sort(reverse=True)\n    return (test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # You can assume that tuples will always be sorted!\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here\n    return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # TODO: Write your code here\n    if test_tup1 == test_tup2:\n        return test_tup1\n    elif test_tup2[0] > test_tup1[0]:\n        return test_tup2\n    elif test_tup2[0] < test_tup1[0]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple((max(test_tup1), max(test_tup2)))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = test_tup1\n    while test_tup2!= test_tup1:\n        if test_tup1[0] >= test_tup2[0]:\n            result = test_tup2\n            test_tup2 = test_tup1\n            test_tup1 = (test_tup1[1],)\n        elif test_tup1[0] < test_tup2[0]:\n            test_tup1 = test_tup2\n            test_tup2 = test_tup1\n            test_tup1 = (test_tup2[1],)\n    return result\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1 or n == 2 or n == 3:\n        return n\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    prime = []\n    for i in range(2, n):\n        if (n % i) == 0:\n            break\n        else:\n            prime.append(i)\n    return prime[n//2]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = n+1\n    n_factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            n_factors.append(i)\n    return n_factors[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # write your code here\n    prime = []\n    for i in range(2, n + 1):\n        for j in range(i+1, n+1):\n            if i % j == 0:\n                break\n        else:\n            prime.append(i)\n    return prime[n-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math\n    # get the maximum prime number that can be obtained by using all primes up to n\n    max_prime = math.sqrt(n) + 1\n    # get all primes up to and including the maximum prime number.\n    primes = []\n    for i in range(2,max_prime):\n        if isprime(i):\n            primes.append(i)\n    # get the position of the prime that is exactly n.\n    p = (2*(3*max_prime))/2\n    # get the prime number that will be returned.\n    return primes[math.ceil((p**2-1)/p)]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 3 == 0:\n        return n\n    if n % 2 == 0:\n        return n + n % 2\n    for i in range(3, n, 3):\n        if n % i == 0:\n            return i\n    return None\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if i!= 1 and i%2 == 0:\n            s += i\n        if i%2 == 1:\n            if s > n:\n                s = n\n    return s\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            prime = False\n            break\n    if prime == True:\n        return (i)\n    else:\n        return 'No newman\u2013shanks\u2013williams prime number.'"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    '''\n    This function should return the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = []\n    prime_list.append(2)\n    prime_list.append(3)\n    prime_list.append(5)\n    prime_list.append(7)\n    prime_list.append(11)\n    prime_list.append(13)\n    prime_list.append(17)\n    prime_list.append(19)\n    prime_list.append(23)\n    prime_list.append(29)\n    prime_list.append(31)\n    prime_list.append(37)\n    prime_list.append(41)\n    prime_list.append(43)\n    prime_list.append(47)\n    prime_list.append(53)\n    prime_list.append(59)\n    prime_list.append(61)\n    prime_list.append(67)\n    prime_list.append(71)\n    prime_list.append(73)\n    prime_list.append(79)\n    prime_list.append(83)\n    prime_list.append(89)\n    prime_list.append(97)\n    prime_list.append(101)\n    prime_list.append(103)\n    prime_list.append(107)\n    prime_list.append(109)\n    prime_list.append(113)\n    prime_list.append(127)\n    prime_list.append(131)\n    prime_list.append(133)\n    prime_list.append(137)\n    prime_list.append(139)\n    prime_list.append(149)\n    prime_list.append(151)\n    prime_list.append(163)\n    prime_list.append(167)\n    prime_list.append(171)\n    prime_list.append(173)\n    prime_list.append(177)\n    prime_list.append(191)\n    prime_list.append(193)\n    prime_list.append(197)\n    prime_list.append(211)\n    prime_list.append(223)\n    prime_list.append(227)\n    prime_list.append(239)\n    prime_list.append(271)\n    prime_list.append(293)\n    prime_list.append(307)\n    prime_list.append(331)\n    prime_list.append(353)\n    prime_list.append(367)\n    prime_list.append(373)\n    prime_list.append(387)\n    prime_list.append(411)\n    prime_list.append(419)\n    prime_list.append(421)\n    prime_list.append(431)\n    prime_list.append(439)\n    prime_list.append(443)\n    prime_list.append(449)\n    prime_list.append(453)\n    prime_list.append(467)\n    prime_list.append(471)\n    prime_list.append(499)\n    prime_list.append(511)\n    prime_list.append(521)\n    prime_list.append(523)\n    prime_list.append(537)\n    prime_list.append(541)\n    prime_list.append(549)\n    prime_list.append(553)\n    prime_list.append(561)\n    prime_list.append(567)\n    prime_list.append(573)\n    prime_list.append(579)\n    prime_list.append(581)\n    prime_list.append(587)\n    prime_list.append(593)\n    prime_list.append(601)\n    prime_list.append(613)\n    prime_list.append(619)\n    prime_list.append(631)\n    prime_list.append(637)\n    prime_list.append(639)\n    prime_list.append(641)\n    prime_list.append(643)\n    prime_list.append(649)\n    prime_list.append(651)\n    prime_list.append(653)\n    prime_list.append(659)\n    prime_list.append(663)\n    prime_list.append(667)\n    prime_list.append(673)\n    prime_list.append(669)\n    prime_list.append(671)\n    prime_list.append(673)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list.append(671)\n    prime_list"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    f = lambda x: (x**2 + x + 1)\n    primenum = [f(i) for i in range(n + 1)]\n    prime = [i for i in range(n + 1) if f(i)!= 1]\n    return prime[n]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for x in test_tup1:\n        try:\n            test_tup2[1] = test_tup2[1] / test_tup2[0]\n        except ZeroDivisionError:\n            print('There is no division between the given tuples. Please ensure that all the tuples are of the same length.')\n            raise\n    return test_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) > 1 and len(test_tup2) > 1:\n        test_tup1 = test_tup1[0]\n        test_tup2 = test_tup2[0]\n    \n    divisor = test_tup1[0]\n    \n    def check_divisor(element):\n        try:\n            assert element % divisor == 0\n        except AssertionError:\n            print(\"Not Equal, but % is not equal to %\" % (element, divisor))\n            print(\"Elements:\")\n            print(test_tup1)\n            print(test_tup2)\n            raise AssertionError\n    \n    check_divisor(test_tup1[0])\n    check_divisor(test_tup2[0])\n    return 0\n    \n    \ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(n//i)\n    return divisors\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # write your code here\n    return test_tup1/test_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if not isinstance(test_tup1, (tuple, list)):\n        print('The given elements must be tuples.')\n        return\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    for x in range(len(test_tup1)):\n        result += test_tup1[x] / test_tup2[x]\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #get the length of the tuples\n    len_test_tup1 = len(test_tup1)\n    len_test_tup2 = len(test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TODO: Create a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of each tuple.\n    \n    # TODO: Write a function that takes in two tuples and returns a tuple of the respective elements of eac"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i],)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #Write your code here\n    if len(test_tup1)!= len(test_tup2):\n        print(\"test tuples must be the same length\")\n        return None\n    result = 0\n    for i in range(len(test_tup1)):\n        result += test_tup1[i]/test_tup2[i]\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # add tuples to a list\n    test_tup1 = test_tup1 + tuple(test_tup2)\n    # write the code for the first operation\n    test_tup2 = tuple(test_tup1)\n    # write the code for the second operation\n    test_tup1 = tuple(test_tup1)\n    # return the result\n    return test_tup1, test_tup2\n    "
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i:i+L])\n    return new_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    for i in range(0, len(list1)):\n        list1[i] = list1[i][:L]\n        list1[i] = list1[i][L:]\n    return list1\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part, second_part = list1[:L], list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    sub1 = [x for x in list1 if x!= 0]\n    sub2 = [x for x in list1 if x == 0]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    length = len(list1)\n    if length % L == 0:\n        return list1, length//L\n    else:\n        return list1[L-1::L], list1[:L//L]\n    \n    \ndef time_conversion(seconds):\n    \"\"\"\n    Function that takes a string representing seconds as a parameter and returns a string representing hours, minutes and seconds, separated by commas.\n    \"\"\"\n    \n    hours = 0\n    minutes = 0\n    seconds = str(seconds)\n    \n    if seconds[-1] == '0':\n        seconds = seconds[:-1]\n    \n    if seconds[-2:] == '00':\n        seconds = seconds[:-2]\n    \n    for i in range(0, len(seconds)-2, 2):\n        if int(seconds[i]) < 10:\n            hours = hours + int(seconds[i])\n        elif int(seconds[i]) < 36:\n            minutes = minutes + int(seconds[i])\n        else:\n            seconds = seconds[:i] + seconds[i+1:]\n            hours = hours + int(seconds[i])\n            minutes = minutes + int(seconds[i])\n            seconds = seconds[:i]\n    \n    if len(seconds) == 0:\n        return f\"00:{minutes}:{seconds}00\"\n    else:\n        return f\"{minutes}:{seconds}:{hours}:{minutes}:{seconds}\"\n    \n    \n    \n    \ndef sum_two_numbers(a, b):\n    \"\"\"\n    Function that takes in a number a and a number b and returns the sum of the two numbers.\n    \"\"\"\n    \n    return a+b\n    \n    \ndef are_two_numbers_equal(a, b):\n    \"\"\"\n    Function that takes in two numbers a and b and returns True if the two numbers are equal, False otherwise.\n    \"\"\"\n    \n    return a == b\n    \n    \ndef is_n_digit_positive(n):\n    \"\"\"\n    Function that takes in an integer and returns True if n is a positive integer, False otherwise.\n    \"\"\"\n    \n    return int(n) >= 0\n    \n    \ndef is_n_digit_positive_iterative(n):\n    \"\"\"\n    Function that takes in an integer and returns True if n is a positive integer, False otherwise.\n    \"\"\"\n    \n    if n == 0 or n == 1:\n        return True\n    elif n == 2:\n        return True if n == 3 else False\n    \n    return is_n_digit_positive_iterative(n-1)\n    \n    \ndef is_n_digit_negative_positive(n):\n    \"\"\"\n    Function that takes in an integer and returns True if n is a negative integer, False otherwise.\n    \"\"\"\n    \n    return int(n) < 0\n    \n    \ndef is_n_digit_negative_positive_iterative(n):\n    \"\"\"\n    Function that takes in an integer and returns True if n is a negative integer, False otherwise.\n    \"\"\"\n    \n    if n < 0 or n == 1:\n        return True\n    elif n == 3 or n == 4:\n        return True if n == 2 or n == 3 else False\n    \n    if n % 2 == 0:\n        return False\n    \n    return is_n_digit_negative_positive_iterative(n-1)\n    \n    \ndef is_n_digit_positive_negative(n):\n    \"\"\"\n    Function that takes in an integer and returns True if n is a positive integer, False otherwise.\n    \"\"\"\n    \n    if n < 0 or n == 1:\n        return False\n    elif n == 3 or n == 4:\n        return False if n == 2 or n == 3 else True\n    \n    if n % 2 == 0:\n        return False\n    \n    return is_n_digit_positive_negative_iterative(n-1)\n    \n    \ndef is_valid_phone_number(number):\n    \"\"\"\n    Function that takes in an integer and returns True if number is a valid phone number, False otherwise.\n    \"\"\"\n    \n    if len(number)!= 10 or not number.isnumeric():\n        return False\n    \n    for i in range(0, len(number), 2):\n        if not number[i].isdigit():\n            return False\n        if not number[i+1].isdigit():\n            return False\n    \n    if number[0] in ['0','1','2','3','4','5','6','7','8','9']:\n        return True\n    else:\n        return False\n    \n    \ndef is_valid_phone_number_iterative(number):\n    \"\"\"\n    Function that takes in an integer and returns True if number is a valid phone number, False otherwise.\n    \"\"\"\n    \n    if len(number)!= 10 or not number.isnumeric():\n        return False\n    \n    for i in range(0, len(number), 2):\n        if not number[i].isdigit():\n            return False\n        if not number[i+1].isdigit():\n            return False\n    \n    if number[0] in ['0','1','2','3','4','5','6','7','8','9']:\n        return True\n    else:\n        return False\n    \n    \ndef is_valid_age_number(number):\n    \"\"\"\n    Function that takes in a string and returns True if the string is a valid age number, False otherwise.\n    \"\"\"\n    \n    if len(number)!= 7 or not number.isnumeric():\n        return False\n    \n    for i in range(0, len(number), 2):\n        if not number[i].isdigit():\n            return False\n        if not number[i+1].isdigit():\n            return False\n    \n    if number[0] in ['0','1','2','3','4','5','6','7','8','9']:\n        return True\n    else:\n        return False\n    \n    \ndef is_valid_age_number_iterative(number):\n    \"\"\"\n    Function that takes in a string and returns True if the string is a valid age number, False otherwise.\n    \"\"\"\n    \n    if len(number)!= 7 or not number.isnumeric():\n        return False\n    \n    for i in range(0, len(number), 2):\n        if not number[i].isdigit():\n            return False\n        if not number[i+1].isdigit():\n            return False\n    \n    if number[0] in ['0','1','2','3','4','5','6','7','8','9']:\n        return True\n    else:\n        return False\n    \n    \ndef is_valid_mobile_number(number):\n    \"\"\"\n    Function that takes in a string and returns True if the string is a valid mobile number, False otherwise.\n    \"\"\"\n    \n    if len(number)!= 10 or not number.isnumeric():\n        return False\n    \n    for i in range(0, len(number), 3):\n        if not number[i].isdigit():\n            return False\n        if not number[i+1].isdigit():\n            return False\n        if not number[i+2].isdigit():\n            return False\n        \n    if number[0] in ['0','1','2','3','4','5','6','7','8','9']:\n        return True\n    else:\n        return False\n    \n    \ndef is_valid_mobile_number_iterative(number):\n    \"\"\"\n    Function that takes in a string and returns True if the string is a valid mobile number, False otherwise.\n    \"\"\"\n    \n    if len(number)!= 10 or not number.isnumeric():\n        return False\n    \n    for i in range(0, len(number), 3):\n        if not number[i].isdigit():\n            return False\n        if not number[i+1].isdigit():\n            return False\n        if not number[i+2].isdigit():\n            return False\n    \n    if number[0] in ['0','1','2','3','4','5','6','7','8','9']:\n        return True\n    else:\n        return False\n    \n    \ndef is_valid_date_year(date):\n    \"\"\"\n    Function that takes in a string and returns True if the string is a valid date, False otherwise."
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return []\n    else:\n        if len(list1) < L:\n            return split_two_parts(list1[:L], L-len(list1))\n        else:\n            return split_two_parts(list1[:L], len(list1))\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > 2:\n        return 'Error: The length of the list must be less than two.'\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = []\n    b = []\n    for i in range(len(list1)):\n        a.append(list1[i][:L])\n        b.append(list1[i][L:])\n    return (a, b)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Replace None with the correct age\n    if h_age == None:\n        return 'Invalid dog age'\n    elif h_age <= 2:\n        return 'The dog is {} years old'.format(h_age)\n    elif h_age <= 14:\n        return 'The dog is {} years old'.format(h_age - 2)\n    else:\n        return 'The dog is {} years old'.format(h_age - 14)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        return \"Please enter a correct age\"\n    if h_age < 3:\n        return f\"{h_age} years is less than 3\"\n    if 3 < h_age < 4:\n        return f\"{h_age} years is less than 4\"\n    if h_age >= 4:\n        return f\"{h_age} years is greater than 4\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (h_age) * 365\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import math\n    def dog_age(h_age):\n        return math.floor(h_age * 365)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    # TODO: Convert the integer h_age to a float.\n    # Return the dogs' age in dog's years.\n    return (h_age*365) + 1.0\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365 * 24 * 60 * 60\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * (365.2425)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"ERROR: age < 0, program will now exit.\")\n        quit()\n    elif h_age >= 18:\n        return \"Y\"\n    elif h_age <= 12:\n        return \"M\"\n    else:\n        return \"W\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 18:\n        return \"you are old enough to vote\"\n    elif h_age >= 12:\n        return \"you are too young to vote\"\n    else:\n        return \"you are too old to vote\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #Add code here\n    years_elapsed=h_age*365\n    return years_elapsed\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError(\"A step must be greater than zero\")\n    if step > S.size:\n        raise ValueError(\"Cannot divide the list into an odd length\")\n    if step % 2!= 0:\n        raise ValueError(\"A step must be even, but your number is odd\")\n    if step == 1:\n        return [S]\n    \n    nums = []\n    if S[step//2] < 3:\n        nums = [S[step//2]]\n    else:\n        for i in range(step//2):\n            nums.append(S[i])\n    \n    nums.append(S[(step//2)+1])\n    \n    return list_split(nums, step//2) + [nums[::-1]]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: complete this function\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [list(S[i:(i + step)]) for i in range(0, len(S), step)]\n    \ndef list_append(L, item):\n    '''\n    Write a function that takes in a list L and an item and appends the item to the end of L.\n    '''\n    L.append(item)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # raise NotImplementedError\n    return [S[i:i+step] for i in range(0,len(S),step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_of_lists = []\n    for i in range(0, len(S), step):\n        if i < len(S):\n            list_of_lists.append(S[i:i+step])\n    return list_of_lists\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    output = []\n    for i in range(0, len(S), step):\n        output.append(S[i:i+step])\n    return output\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    x = l\n    y = l\n    z = l\n    return x * y * z\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(\"Write a function to find the lateral surface area of a cube given its side length.\")\n    # Let user know the type of calculation required\n    print(\"Type 'b' for boolean calculation or's' for signed calculation (The sign of the side length matters).\\n\")\n    # Select the operation\n    operation = input(\"Enter a name of the operation: \")\n    # Verify that operation is either 'b' or's'\n    if operation.upper() == \"S\":\n        operation ='s'\n    # Verify that operation is either 'b' or's'\n    elif operation.upper() == \"B\":\n        operation = 'b'\n    # Verify that operation is either's' or 'b'\n    else:\n        print(\"Please enter either's' or 'b'\")\n        exit()\n    # Check the side length\n    sideLength = input(\"Enter the length of the side: \")\n    # Verify that sideLength is either 'b' or's'\n    if sideLength.upper() == \"S\":\n        sideLength ='s'\n    else:\n        sideLength = 'b'\n    # Check the user's input\n    if operation.upper() == \"S\":\n        if sideLength == \"b\":\n            lateralSurfaceArea = int(input(\"Enter the area of a side of the cube: \"))\n        else:\n            lateralSurfaceArea = int(input(\"Enter the area of a side of the cube: \"))\n    else:\n        if sideLength == \"s\":\n            lateralSurfaceArea = int(input(\"Enter the area of a side of the cube: \"))\n        else:\n            lateralSurfaceArea = int(input(\"Enter the area of a side of the cube: \"))\n    # Return the lateralSurfaceArea\n    return lateralSurfaceArea\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l * 3 * 1.2827\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt, pi\n    l = float(l)\n    return (pi * l)**2\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    import cmath as cm\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n    from matplotlib.path import Path\n    from matplotlib.collections import PatchCollection\n    from matplotlib import colors\n    from scipy.stats import gaussian_kde\n    from numpy.linalg import inv\n    from skimage.draw import circle_perimeter\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    def lateral_surface(x,y,z,side):\n        f= math.factorial\n        s= f(side, 2, 4, 3, 3, 4, 6, 3, 3, 5, 7)\n        return f(x) * ( f(z + y) / (f(z + 2 * x) * f(y) * f(z + x) * f(2 * y) * f(x)) ) * s\n    l= int(l)\n    return lateral_surface(l,0,0,l)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #Lateral surfaces are calculated for three cases:\n    #(a) Inside a cube\n    #(b) Outside of a cube\n    #(c) Outside a side of a cube\n    #The cube is represented by the three values:\n    #a = (1,2,3)\n    #b = (0,2,3)\n    #c = (0,0,0)\n    #which means that the cube is the axis in the x,y,z plane that\n    #is the same as the specified side length.\n    #\n    #Create a function called surfaceAreaToCorners that takes an argument of the format\n    #of an axis and returns the side length of the side of the cube.\n    #\n    #For example, surfaceAreaToCorners(c) would return the length of the\n    #current cube's cubie's length side.\n    #\n    #For a cube with length side c, the length is a function of a:\n    #c = 1\n    #\n    #For a cube with side length side c, the length is a function of a:\n    #c = 0\n    #\n    #This function should return the result of c*a*b*c.\n    #\n    #Examples\n    #cube = (3,4,5)\n    #surfaceAreaToCorners(cube)\n    #=> 7\n    #\n    #cube = (0,2,3)\n    #surfaceAreaToCorners(cube)\n    #=> 2\n    #\n    #cubie = (1,2,3)\n    #surfaceAreaToCorners(cubie)\n    #=> 1\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,1)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (1,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,1,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,1)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCorners(cubie)\n    #=> 0\n    #\n    #cubie = (0,0,0)\n    #surfaceAreaToCor"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surf = lambda l : (((1.0 + l**2.0)**0.5) * (3.0 * (l + 1)**2.0 - 1.0))\n    return surf(l)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = 0\n    # For each number in the range from 1 to sqrt(n)\n    for x in range(1, (n+1)//2+1):\n        # If the number is odd\n        if (n % x == 0):\n            # If the number is divisible by 4\n            if (n % x == 0):\n                # Add it to the squares of all the odd numbers\n                squares = squares + x\n    # Return the sum of the squares of the even numbers\n    return squares\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * n\n    \ndef find_factors(n):  \n    '''\n    Given a number, return a list of the prime factors of it.\n    '''\n    # prime_factors = [1 for i in range(2, n+1)]\n    prime_factors = []\n    \n    # for i in range(2, n+1):\n    #     if n%i == 0:\n    #         prime_factors.append(i)\n    \n    for i in range(2, n):\n        if n%i == 0:\n            prime_factors.append(i)\n    \n    return prime_factors\n    \ndef is_prime(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n%i == 0:\n            return False\n    \n    return True\n    \ndef is_prime_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    \n    return True\n    \ndef is_prime_loop(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    for i in range(3, n):\n        if n%i == 0:\n            return False\n    \n    return True\n    \ndef is_prime_4_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    for i in range(4, int(math.sqrt(n))+1, 2):\n        if n%i == 0:\n            return False\n    \n    return True\n    \ndef is_prime_5_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    if n%5 == 0:\n        return False\n    \n    return True\n    \ndef is_prime_6_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    if n%5 == 0:\n        return False\n    \n    if n%7 == 0:\n        return False\n    \n    if n%10 == 0:\n        return False\n    \n    return True\n    \ndef is_prime_7_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    if n%5 == 0:\n        return False\n    \n    if n%7 == 0:\n        return False\n    \n    if n%10 == 0:\n        return False\n    \n    return True\n    \ndef is_prime_8_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    if n%5 == 0:\n        return False\n    \n    if n%7 == 0:\n        return False\n    \n    if n%10 == 0:\n        return False\n    \n    if n%15 == 0:\n        return False\n    \n    return True\n    \ndef is_prime_9_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    if n%5 == 0:\n        return False\n    \n    if n%7 == 0:\n        return False\n    \n    if n%10 == 0:\n        return False\n    \n    if n%15 == 0:\n        return False\n    \n    return True\n    \ndef is_prime_10_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    if n%5 == 0:\n        return False\n    \n    if n%7 == 0:\n        return False\n    \n    if n%10 == 0:\n        return False\n    \n    if n%15 == 0:\n        return False\n    \n    return True\n    \ndef is_prime_11_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    if n%5 == 0:\n        return False\n    \n    if n%7 == 0:\n        return False\n    \n    if n%10 == 0:\n        return False\n    \n    if n%15 == 0:\n        return False\n    \n    return True\n    \ndef is_prime_12_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    if n%5 == 0:\n        return False\n    \n    if n%7 == 0:\n        return False\n    \n    if n%10 == 0:\n        return False\n    \n    if n%15 == 0:\n        return False\n    \n    return True\n    \ndef is_prime_13_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n    \n    if n%3 == 0:\n        return False\n    \n    if n%5 == 0:\n        return False\n    \n    if n%7 == 0:\n        return False\n    \n    if n%10 == 0:\n        return False\n    \n    if n%15 == 0:\n        return False\n    \n    return True\n    \ndef is_prime_14_sum(n):\n    '''\n    A function to test if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return False\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    square = 0\n    for i in range(1, n + 1):\n        square = square + i**2\n    return square\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += x\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += i ** 2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n):\n        if (i % 2 == 0):\n            s = s + i\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i**2\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i ** 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3) + find_star_num(n-4)\n    \n    \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 5\n    if n == 4: \n        return 10\n    if n == 5: \n        return 50\n    if n == 6: \n        return 100\n    if n == 7: \n        return 500\n    if n == 8: \n        return 1000\n    if n == 9: \n        return 5000\n    if n == 10: \n        return 10000\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n+1)//2\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # create a star array \n    starr = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24] \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n): \n        if n%i == 0: \n            return i \n    return n \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for n in range(0, n):\n        if (n * n) % 2 == 1:\n            return n\n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return n\n    else:\n        return find_star_num(n-1)+n*(n+1)/2\n    \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n    \n    \n    \nprint(find_star_num(4)) # 2\nprint(find_star_num(5)) # 1\nprint(find_star_num(6)) # 4\nprint(find_star_num(7)) # 5\nprint(find_star_num(8)) # 6\nprint(find_star_num(9)) # 7\nprint(find_star_num(10)) # 8\nprint(find_star_num(11)) # 9\nprint(find_star_num(12)) # 10\nprint(find_star_num(13)) # 11\nprint(find_star_num(14)) # 12\nprint(find_star_num(15)) # 13\nprint(find_star_num(16)) # 14\nprint(find_star_num(17)) # 15\nprint(find_star_num(18)) # 16\nprint(find_star_num(19)) # 17\nprint(find_star_num(20)) # 18\nprint(find_star_num(21)) # 19\nprint(find_star_num(22)) # 20\nprint(find_star_num(23)) # 21\nprint(find_star_num(24)) # 22\nprint(find_star_num(25)) # 23\nprint(find_star_num(26)) # 24\nprint(find_star_num(27)) # 25\nprint(find_star_num(28)) # 26\nprint(find_star_num(29)) # 27\nprint(find_star_num(30)) # 28\nprint(find_star_num(31)) # 29\nprint(find_star_num(32)) # 30\nprint(find_star_num(33)) # 31\nprint(find_star_num(34)) # 32\nprint(find_star_num(35)) # 33\nprint(find_star_num(36)) # 34\nprint(find_star_num(37)) # 35\nprint(find_star_num(38)) # 36\nprint(find_star_num(39)) # 37\nprint(find_star_num(40)) # 38\nprint(find_star_num(41)) # 39\nprint(find_star_num(42)) # 40\nprint(find_star_num(43)) # 41\nprint(find_star_num(44)) # 42\nprint(find_star_num(45)) # 43\nprint(find_star_num(46)) # 44\nprint(find_star_num(47)) # 45\nprint(find_star_num(48)) # 46\nprint(find_star_num(49)) # 47\nprint(find_star_num(50)) # 48\nprint(find_star_num(51)) # 49\nprint(find_star_num(52)) # 50\nprint(find_star_num(53)) # 51\nprint(find_star_num(54)) # 52\nprint(find_star_num(55)) # 53\nprint(find_star_num(56)) # 54\nprint(find_star_num(57)) # 55\nprint(find_star_num(58)) # 56\nprint(find_star_num(59)) # 57\nprint(find_star_num(60)) # 58\nprint(find_star_num(61)) # 59\nprint(find_star_num(62)) # 60\nprint(find_star_num(63)) # 61\nprint(find_star_num(64)) # 62\nprint(find_star_num(65)) # 63\nprint(find_star_num(66)) # 64\nprint(find_star_num(67)) # 65\nprint(find_star_num(68)) # 66\nprint(find_star_num(69)) # 67\nprint(find_star_num(70)) # 68\nprint(find_star_num(71)) # 69\nprint(find_star_num(72)) # 70\nprint(find_star_num(73)) # 71\nprint(find_star_num(74)) # 72\nprint(find_star_num(75)) # 73\nprint(find_star_num(76)) # 74\nprint(find_star_num(77)) # 75\nprint(find_star_num(78)) # 76\nprint(find_star_num(79)) # 77\nprint(find_star_num(80)) # 78\nprint(find_star_num(81)) # 79\nprint(find_star_num(82)) # 80\nprint(find_star_num(83)) # 81\nprint(find_star_num(84)) # 82\nprint(find_star_num(85)) # 83\nprint(find_star_num(86)) # 84\nprint(find_star_num(87)) # 85\nprint(find_star_num(88)) # 86\nprint(find_star_num(89)) # 87\nprint(find_star_num(90)) # 88\nprint(find_star_num(91)) # 89\nprint(find_star_num(92)) # 90\nprint(find_star_num(93)) # 91\nprint(find_star_num(94)) # 92\nprint(find_star_num(95)) # 93\nprint(find_star_num(96)) # 94\nprint(find_star_num(97)) # 95\nprint(find_star_num(98)) # 96\nprint(find_star_num(99)) # 97\nprint(find_star_num(100)) # 98\nprint(find_star_num(101)) # 99\nprint(find_star_num(102)) # 100\nprint(find_star_num(103)) # 101\nprint(find_star_num(104)) # 102\nprint(find_star_num(105)) # 103\nprint(find_star_num(106)) # 104\nprint(find_star_num(107)) # 105\nprint(find_star_num(108)) # 106\nprint(find_star_num(109)) # 107\nprint(find_star_num(110)) # 108\nprint(find_star_num(111)) # 109\nprint(find_star_num(112)) # 110\nprint(find_star_num(113)) # 111\nprint(find_star_num(114)) # 112\nprint(find_star_num(115)) # 113\nprint(find_star_num(116)) # 114\nprint(find_star_num(117)) # 115\nprint(find_star_num(118)) # 116\nprint(find_star_num(119)) # 117\nprint(find_star_num(120)) # 118\nprint(find_star_num(121)) # 119\nprint(find_star_num(122)) # 120\nprint(find_star_num(123)) # 121\nprint(find_star_num(124)) # 122\nprint(find_star_num(125)) # 123\nprint(find_star_num(126)) # 124\nprint(find_star_num(127)) # 125\nprint(find_star_num(128)) # 126\nprint(find_star_num(129)) # 127\nprint(find_star_num(130)) # 128\nprint(find_star_num(131)) # 129\nprint(find_star_num(132)) # 130\nprint(find_star_num(133)) # 131\nprint(find_star_num(134)) # 132\nprint(find_star_num(135)) # 133\nprint(find_star_num(136)) # 134\nprint(find_star_num(137)) # 135\nprint(find_star_num(138)) # 136\nprint(find_star_num(139)) # 137\nprint(find_star_num(140)) # 138\nprint(find_star_num(141)) # 139\nprint(find_star_num(142)) # 140\nprint(find_star_num(143)) # 141\nprint(find_star_num(144)) # 142\nprint(find_star_num(145)) # 143\nprint(find_star_num(146)) # 144\nprint(find_star_num(147)) # 145\nprint(find_star_num(148)) # 146\nprint(find_star_num(149)) # 147\nprint(find_star_num(150)) # 148\nprint(find_star_num(151)) # 149\nprint(find_star_num(15"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return(ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    v = \"\"\n    i = ord(k)\n    v = hex(i)[2:]\n    return v\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k) - ord('a') + 10)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    i = ord(k)\n    i = i - ord('a')\n    return i\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k) - 32)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    chars = string.ascii_lowercase\n    if k >= len(chars):\n        raise ValueError(f\"'{k}' is out of bounds for string with length {len(chars)}\")\n    return chars[k]\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        return chr(int(k, 16))\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # define the alphabet dictionary\n    alphabet = {\n        \" \": \" \",\n        \"A\": 65,\n        \"B\": 66,\n        \"C\": 67,\n        \"D\": 68,\n        \"E\": 69,\n        \"F\": 70,\n        \"G\": 71,\n        \"H\": 72,\n        \"I\": 73,\n        \"J\": 74,\n        \"K\": 75,\n        \"L\": 76,\n        \"M\": 77,\n        \"N\": 78,\n        \"O\": 79,\n        \"P\": 80,\n        \"Q\": 81,\n        \"R\": 82,\n        \"S\": 83,\n        \"T\": 84,\n        \"U\": 85,\n        \"V\": 86,\n        \"W\": 87,\n        \"X\": 88,\n        \"Y\": 89,\n        \"Z\": 90,\n    }\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # BASE DE CATEGORIE\n    if type(k) is not str:\n        return k\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    sum = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n    return even_sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # O(n) time | O(1) space\n    # I didn't think about making a list of even numbers as a 0 index would have to be the only thing i need to think about.\n    # This would take O(n) to compute sum of evens at index 0 which would be at least 2\n    even_index = []\n    odd_index = []\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for index in range(len(arr)):\n        if(arr[index % 2] % 2 == 0):\n            even_sum += arr[index % 2]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0):\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index\n    # return sum(arr"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_pos = []\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_pos.append(i)\n    even_sum = sum(even_pos)\n    return even_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    num_power = 0\n    while (n > 0):\n        num_power = num_power + n\n        n = n - num_power\n    return num_power\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * (even_Power_Sum(n - 1))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * even_Power_Sum(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i ** 5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1): \n        sum += i**3 \n    print(sum) \n    \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for x in range(1, n + 1):\n        sum += (x**5)\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    a = 1\n    for i in range(1,n):\n        a = a**2\n    return a\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # YOUR CODE HERE\n    lst = []\n    for i in range(1, n+1):\n        power = i * 10\n        lst.append(power)\n    lst.sort()\n    sum = 0\n    for i in lst:\n        sum = sum + pow(i, 5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n = int(n)\n    n_powers = 0\n    n_sum = 0\n    while n!= 0:\n        # print(n)\n        # print(n//10)\n        # print(n%10)\n        n_sum += n//10*n%10\n        n = n//10\n        # print(n)\n    return n_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<0:\n        return None\n    elif n==0:\n        return 1\n    else:\n        if n%2==0:\n            return even_Power_Sum(n-1)\n        else:\n            return (even_Power_Sum(n-1)+even_Power_Sum(n//2))\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for tup in test_list:\n        rear.append(tup[0])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    l_rear = []\n    for x in test_list:\n        l_rear.append(x[2])\n    return l_rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for test in test_list:\n        output.append(test[1])\n    return output\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list = sorted(test_list, key=lambda x: (x[1], x[0]))\n    return list(map(lambda x: x[1], test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for list_item in test_list:\n        rear.append(list_item[-1])\n    return rear\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    count = 0\n    for tup in range(len(test_tup1)):\n        if tup == len(test_tup2)-1:\n            count = count + test_tup1[tup]\n        elif test_tup1[tup]!= test_tup2[tup+1]:\n            count = count + test_tup1[tup]\n    return count\n    \ntest_tup1 = (1, 2, 3)\ntest_tup2 = (5, 6, 7)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    return tuple(map(lambda x,y: x - y,test_tup1,test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    lst1 = test_tup1[0]\n    lst2 = test_tup2[0]\n    lst1_s = [x for x in lst1]\n    lst2_s = [x for x in lst2]\n    lst1_s.reverse()\n    lst2_s.reverse()\n    sub1 = lst1_s.pop()\n    sub2 = lst2_s.pop()\n    lst1_s.reverse()\n    lst2_s.reverse()\n    return (sub1, sub2, lst1, lst2)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_list = []\n    test_list_len = len(test_tup1)\n    for index in range(test_list_len):\n        test_list.append(test_tup1[index][0] - test_tup2[index][0])\n    return test_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Create a 2-tuple that will be subtracted into the first tuple\n    subtracted_tuple = test_tup1 + test_tup2\n    # Create a 2-tuple that will be returned\n    returned_tuple = (subtracted_tuple[0], subtracted_tuple[1])\n    # Check if the subtraction is valid\n    if is_subtraction_valid(returned_tuple, test_tup1, test_tup2):\n        # Print out the subtraction to the user\n        print(\"Subtraction is valid!\")\n        # Print out the subtracted_tuple\n        print(subtracted_tuple)\n    else:\n        print(\"Subtraction is not valid!\")\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    try:\n        test_tup1[0]\n    except IndexError:\n        raise IndexError('Tuple index out of range.')\n    except TypeError:\n        raise TypeError('Tuples should only contain numbers.')\n    else:\n        test_tup2[0]\n    return \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #this is a tuple to be returned\n    ret = ()\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Remove the first tuple from the test_tup1 list\n    test_tup1.pop(0)\n    # Remove the second tuple from the test_tup2 list\n    test_tup2.pop(0)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # create a new tuple\n    new_tup = test_tup1\n    # iterate through each item in the tuple\n    for item in new_tup:\n        new_tup = new_tup.remove(item)\n    return new_tup\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    n=int(n)\n    i=1\n    sum=0\n    while i<n+1:\n        sum+=math.factorial(i)/(math.factorial(i-2))\n        i+=1\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    S = 0 \n    x = 1\n    y = 1\n    while(n!= 0):\n        x = y\n        y = x - y*n \n        n = n - 1\n        S = S + x\n    return S\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([int(math.factorial(i) / (2**(n - i))) for i in range(n + 1)])"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    SUM = 0\n    while n > 0: \n        SUM = SUM + (n % 2) * (even_binomial_Coeff_Sum(n // 2)) \n        n = n // 2 \n    return SUM \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    while n!= 0: \n        sum += n * (n + 1) // 2\n        n -= 1\n    return sum\ndef binomialCoeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients.\n    '''\n    sum = n * (n + 1) // 2\n    if n == 0: \n        return sum\n    elif n == 1: \n        return sum\n    else: \n        return binomialCoeff_Sum(n - 1) + binomialCoeff_Sum(n - 2)\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    while n!= 0: \n        sum += n * (n + 1) // 2\n        n -= 1\n    return sum\ndef binomialCoeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients.\n    '''\n    sum = n * (n + 1) // 2\n    if n == 0: \n        return sum\n    elif n == 1: \n        return sum\n    else: \n        return binomialCoeff_Sum(n - 1) + binomialCoeff_Sum(n - 2)\ndef fibonacci(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the Fibonacci numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef fibonacci_c(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the Fibonacci numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    else:\n        return fibonacci_c(n - 1) + fibonacci_c(n - 2)\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = n * (n + 1) // 2\n    if n == 0: \n        return sum\n    elif n == 1: \n        return sum\n    else: \n        return binomialCoeff_Sum(n - 1) + binomialCoeff_Sum(n - 2)\ndef even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = n * (n + 1) // 2\n    if n == 0: \n        return sum\n    elif n == 1: \n        return sum\n    else: \n        return binomialCoeff_Sum(n - 1) + binomialCoeff_Sum(n - 2)\ndef even_binomial_Coeff_Sum_fast( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = n * (n + 1) // 2\n    if n == 0: \n        return sum\n    elif n == 1: \n        return sum\n    else: \n        return binomialCoeff_Sum(n - 1) + binomialCoeff_Sum(n - 2)\ndef sum_of_even_binomial_Coeff( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = n * (n + 1) // 2\n    if n == 0: \n        return sum\n    elif n == 1: \n        return sum\n    else: \n        return binomialCoeff_Sum(n - 1) + binomialCoeff_Sum(n - 2)\ndef even_binomial_Coeff_Sum_fast( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = n * (n + 1) // 2\n    if n == 0: \n        return sum\n    elif n == 1: \n        return sum\n    else: \n        return binomialCoeff_Sum(n - 1) + binomialCoeff_Sum(n - 2)\ndef odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = n * (n + 1) // 2\n    if n == 0: \n        return sum\n    elif n == 1: \n        return sum\n    else: \n        return binomialCoeff_Sum(n - 1) + binomialCoeff_Sum(n - 2)\ndef odd_binomial_Coeff_Sum_fast( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = n * (n + 1) // 2\n    if n == 0: \n        return sum\n    elif n == 1: \n        return sum\n    else: \n        return binomialCoeff_Sum(n - 1) + binomialCoeff_Sum(n - 2)\ndef factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return n * factorial(n - 1)\ndef factorial_fast(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return n * factorial_fast(n - 1)\ndef factorial_fast_fast(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return n * factorial_fast_fast(n - 1)\ndef factorial_c(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return n * factorial_c(n - 1)\ndef factorial_c_fast(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return n * factorial_c_fast(n - 1)\ndef factorial_c_fast_fast(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return n * factorial_c_fast_fast(n - 1)\ndef factorial_sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the factorials of that number.\n    '''\n    if n == 0: \n        return 1"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeff = 0\n    even_binomial_coeff_sum = 0\n    for i in range(0, n): \n        if (i % 2) == 0: \n            even_binomial_coeff += 2 * (math.factorial(i) * math.factorial(i + 1))\n            even_binomial_coeff_sum += (2 * (math.factorial(i) * math.factorial(i + 1)))\n    return even_binomial_coeff_sum / math.factorial(n)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n    \n    \ndef prime_factorization( n):\n    '''\n    Function that takes in a number and returns a list of prime factors (two numbers) which add up to n. \n    E.g. if n = 10, then the prime factors of 10 are [2, 2, 3, 3, 5, 5]. \n    '''\n    prime_factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                prime_factors.append(i)\n            else:\n                prime_factors.append(i)\n                prime_factors.append(n // i)\n                \n    return prime_factors\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        if(i % 2 == 0):\n            sum += even_binomial_Coeff_Sum(i + 1)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeff_list = []\n    even_binomial_coeff_list_sum = 0\n    for i in range(1, n+1, 2):\n        even_binomial_coeff_list_sum += math.factorial(i)/((math.factorial(2*i))*(math.factorial(i-2)))\n    for i in range(1, n+1, 2):\n        even_binomial_coeff_list.append(even_binomial_coeff_list_sum/(math.factorial(2*i)*math.factorial(i-2)))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = r**3 * h\n    return volume\n    \ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    volume = r**3 * h\n    return volume\n    "
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 4*r*h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3*np.pi*r**3\n    print(volume)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*r**2)*(h**3)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    a = (math.pi*r**2)*h\n    return a\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # The radius of the cylinder\n    r = r\n    # The height of the cylinder\n    h = h\n    # The volume of the cylinder\n    v = 4/3 * np.pi * (r**3)\n    print(v)\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=4/3*pi*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.141592*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3 * 3.14 * (r ** 3) * h\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict(filter(lambda x: x[n] >= n, dict.items()))\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n    \ndef dict_sort(dict):\n    '''\n    Write a function that sorts a dictionary by value, and by key.\n    '''\n    sort_dict = {}\n    for key, value in dict.items():\n        sort_dict[value] = key\n    sorted_dict = sorted(sort_dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n    \ndef dict_to_xml(dict):\n    '''\n    Write a function that converts a dictionary to an XML element.\n    '''\n    sorted_dict = dict_sort(dict)\n    xml_dict = {\"dict\": []}\n    for key, value in sorted_dict:\n        xml_dict['dict'].append(value)\n    return xml_dict\n    \ndef xml_to_dict(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        dict_output[value] = key\n    return dict_output\n    \ndef dict_to_xml_with_values(dict, value_to_be_inserted):\n    '''\n    Write a function that converts a dictionary to an XML element with the given value.\n    '''\n    sorted_dict = dict_sort(dict)\n    xml_dict = {\"dict\": []}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            xml_dict['dict'].append(value)\n    return xml_dict\n    \ndef xml_to_dict_with_values(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            dict_output[value] = key\n    return dict_output\n    \ndef dict_to_xml_with_values_and_return_dict(dict, value_to_be_inserted):\n    '''\n    Write a function that converts a dictionary to an XML element with the given value and a list of values.\n    '''\n    sorted_dict = dict_sort(dict)\n    xml_dict = {\"dict\": []}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            xml_dict['dict'].append(value)\n    return xml_dict\n    \ndef xml_to_dict_with_values_and_return_dict(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            dict_output[value] = key\n    return dict_output\n    \ndef xml_to_dict_with_values_and_return_dict_with_list(dict, value_to_be_inserted):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(dict)\n    xml_dict = {\"dict\": []}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            xml_dict['dict'].append(value)\n    return xml_dict\n    \ndef xml_to_dict_with_values_and_return_dict_with_list_and_return_dict(dict, value_to_be_inserted):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(dict)\n    xml_dict = {\"dict\": []}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            xml_dict['dict'].append(value)\n    return xml_dict\n    \ndef xml_to_dict_with_values_and_return_dict_with_list_and_return_dict(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            dict_output[value] = key\n    return dict_output\n    \ndef xml_to_dict_with_values_and_return_dict_with_list_and_return_dict(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            dict_output[value] = key\n    return dict_output\n    \ndef xml_to_dict_with_values_and_return_dict_with_list_and_return_dict(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            dict_output[value] = key\n    return dict_output\n    \ndef xml_to_dict_with_values_and_return_dict_with_list_and_return_dict(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            dict_output[value] = key\n    return dict_output\n    \ndef xml_to_dict_with_values_and_return_dict_with_list_and_return_dict(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            dict_output[value] = key\n    return dict_output\n    \ndef xml_to_dict_with_values_and_return_dict_with_list_and_return_dict(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            dict_output[value] = key\n    return dict_output\n    \ndef xml_to_dict_with_values_and_return_dict_with_list_and_return_dict(xml_dict):\n    '''\n    Write a function that converts an XML element to a dictionary with the given values and a list of values.\n    '''\n    sorted_dict = dict_sort(xml_dict)\n    dict_output = {}\n    for key, value in sorted_dict:\n        if value_to_be_inserted in value:\n            dict_output[value] = key\n    return dict_output\n    \ndef xml_to_dict_with_values_and_return_dict_with_list_and_return_dict(xml_dict):\n    '''\n    Write a function that converts an XM"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # assume that we have a dictionary of the following structure:\n    # {\n    #     'a': {\n    #         'firstname': 'Rolf',\n    #         'lastname': 'Smith',\n    #         'age': 50,\n    #         'salary': 150000\n    #     },\n    #     'b': {\n    #         'firstname': 'Bob',\n    #         'lastname': 'Jones',\n    #         'age': 20,\n    #         'salary': 40000\n    #     }\n    # }\n    # assume that 'a' and 'b' are keys in the dictionary, and that their values are dictionaries.\n    # Use the function to return a dictionary with only values of the form {'firstname': 'Rolf', 'lastname': 'Smith', 'age': 50,'salary': 150000}\n    \n    # the function will first start by creating a list containing only the values of the dictionary passed in as an argument\n    n_list = []\n    for key,value in dict.items():\n        if type(value) == dict:\n            n_list.append(value)\n        else:\n            n_list.append(value[n])\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            filtered[key] = dict[key]\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.values()\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output_dict = dict()\n    for key, value in dict.items():\n        if value >= n:\n            output_dict[key] = value\n    return output_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    # TODO: Write your function here\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element = test_tup[0]\n    count = 0\n    for i in test_tup:\n        if i == first_element:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # your code goes here\n    first_index = test_tup.index(test_tup[0])\n    return first_index\n        \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    \n    # your code goes here\n    last_index = test_tup.index(test_tup[-1])\n    return last_index\n    \ndef check_if_odd_elements(test_tup):\n    '''\n    Write a function that tests if the given tuple contains any odd elements.\n    '''\n    \n    # your code goes here\n    for i in test_tup:\n        if i%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i >= test_tup[count][0]:\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for elem in test_tup:\n        if elem < test_tup[0]:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_elements = 0\n    for i in test_tup:\n        count_elements += 1\n    return count_elements\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n    \ndef count_second_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    return len(test_tup) - test_tup.count(test_tup[1])\n    \ndef count_elements_between_tuples(test_tup):\n    '''\n    Write a function to count the number of elements in the tuple given by the user.\n    '''\n    if len(test_tup) > 1:\n        return count_first_elements(test_tup) + count_second_elements(test_tup)\n    else:\n        return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    numbers=0\n    for i in range(len(test_tup)):\n        if i==0:\n            numbers=numbers+test_tup[i]\n        else:\n            if test_tup[i] < test_tup[i-1]:\n                numbers=numbers+1\n    return numbers\n    \ndef max_values(test_tup):\n    '''\n    Write a function that finds the maximum value in the given tuple.\n    '''\n    if test_tup == ():\n        return \"no value\"\n    if len(test_tup) == 1:\n        return test_tup[0]\n    if len(test_tup) > 1:\n        return max(test_tup[0:len(test_tup)])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Your code goes here\n    x=test_tup\n    count=0\n    for i in range(len(x)):\n        if x[i]<x[0]:\n            count+=1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    if type(test_tup)!= tuple:\n        raise TypeError(\"Only tuple can be used\")\n    for i in test_tup:\n        if type(i)!= tuple:\n            raise TypeError(\"Each element of the tuple should be a tuple\")\n        elif i[0]!= i[-1]:\n            raise ValueError(\"The tuple can only contain one tuple of all the same value\")\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0:\n        return True\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n >= 0:\n        if n <= 3:\n            return n\n        else:\n            num_d = n % 3\n            if num_d == 0:\n                if n % 2 == 1:\n                    return n//3\n                else:\n                    return n//3 + 1\n            else:\n                if num_d == 1:\n                    return n//3\n                else:\n                    return n//3 - 1\n    else:\n        return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<0: return -1\n    if n==1: return 1\n    return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = n % 9\n    if result == 0:\n        return n\n    else:\n        return n * 9 + is_num_decagonal(n // 9)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    print('n=', n)\n    if n<=0:\n        return False\n    if n==1:\n        return True\n    \n    if n%3==0:\n        return is_num_decagonal(n//3)\n    else:\n        return is_num_decagonal(n//3)+is_num_decagonal(n%3)\n    \ndef is_sum_of_digits(n):\n    '''\n    Write a function to find the sum of all the digits of n.\n    '''\n    print('n=', n)\n    if n==0:\n        return 0\n    elif n<0:\n        return -1\n    else:\n        sum=0\n        while n>0:\n            sum=sum+n%10\n            n=n//10\n        return sum\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0 or n >= 7:\n        raise ValueError(\"Invalid argument\")\n    return (n//4) + (n%4) - 1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #raise NotImplementedError\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #raise NotImplementedError\n    return (n+1) % 8 == 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # define the base case \n    if n == 0: \n        return 0\n    # if n = 1, then there is only 1 possible decagonal number \n    if n == 1: \n        return 1\n    # if n is even then it is a diagonal \n    if n % 2 == 0: \n        return n // 2 * n // 2 \n    # if n is odd then it is a triangle \n    else: \n        return 3 * (n-1) * (n-1) // 2\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            pos = i\n    return pos\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return index, index\n    return -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # return tuple(item in dlist[i:i+1] for i in range(len(dlist)-1))\n    return tuple(item in dlist[i:i+len(dlist)//2] for i in range(len(dlist)-1))\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, e in enumerate(dlist):\n        if e == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for index, element in enumerate(dlist):\n        if element == item:\n            position = index\n            break\n    return position, index\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i,dlist.index(item)\n    return False\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # TODO: Write your code here.\n    i = 0\n    for x in dlist:\n        if x == item:\n            return i, x\n        i += 1\n    return -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            idx = i\n    return idx, idx+1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n        else:\n            continue\n    return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for item in test_list:\n        if item in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # your code here\n    if len(set(test_list)) == len(test_list):\n        print('All elements are unique')\n    else:\n        print('The list is not unique')\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)>0:\n        set_list = set(test_list)\n        return len(set_list)==len(test_list)\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #Initialize a list to store the unique elements\n    uniq_list = []\n    #Iterate through each element in the list\n    for element in test_list:\n        #Check if the element has already been encountered\n        if element in uniq_list:\n            return False\n        #Add the element to the uniq_list\n        uniq_list.append(element)\n    #Return the number of unique elements\n    return len(uniq_list)\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    for i in test_list:\n        if i in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    test_list.sort()\n    if(len(test_list)<2):\n        return True\n    else:\n        for x in test_list:\n            if(x in test_list):\n                test_list.remove(x)\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list = []\n    for i in test_list:\n        if i not in temp_list:\n            temp_list.append(i)\n    return len(temp_list) == len(set(temp_list))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n for n in nums1 if n not in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i, x in enumerate(nums1):\n        result.append(nums2[i]-x)\n    return result\n    \ndef multiply(nums1,nums2):\n    '''\n    Write a function that takes two lists,\n    and returns their product.\n    '''\n    result = []\n    for i, x in enumerate(nums1):\n        result.append(nums1[i]*nums2[i])\n    return result\n    \n    \ndef add_strings(str1,str2):\n    '''\n    Write a function that takes two strings and returns their concatenation.\n    '''\n    result = []\n    for i in range(len(str1)):\n        result.append(str1[i]+str2[i])\n    return result\n    \ndef equal(nums1,nums2):\n    '''\n    Write a function that takes two lists and returns whether or not the lists have the same elements.\n    '''\n    if len(nums1)!=len(nums2):\n        return False\n    for i in range(len(nums1)):\n        if nums1[i]!=nums2[i]:\n            return False\n    return True\n        \ndef reverse_string(str):\n    '''\n    Write a function that takes a string and reverses the order of characters.\n    '''\n    return str[::-1]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_lst = []\n    for num1 in nums1:\n        for num2 in nums2:\n            sub_lst.append(num1 - num2)\n    return sub_lst\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # your code goes here\n    return nums1 - nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums = nums1 + nums2\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1 - n2 for n1,n2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums = []\n    for x in nums2:\n        nums.append(x)\n    for x in range(len(nums1)):\n        nums[x] -= nums1[x]\n    return nums\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    subtracted = []\n    for elem in nums1:\n        subtracted.append(elem - nums2[nums2.index(elem)])\n    return subtracted\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Find index of nums1\n    pos1=nums1.index(1)\n    # Find index of nums2\n    pos2=nums2.index(1)\n    # Subtract first list element from second list element\n    nums1[pos1-1]=nums2[pos2-1]\n    # Return first list element\n    return nums1[:pos1+1]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0 or n%2!= 0: \n        return 0 \n    elif n <= 0: \n        return 0 \n    else:\n        count = 0\n        while n!= 0: \n            if n%10 == 0: \n                count = count + 1 \n            n = n//10 \n        if count >= n: \n            return 0 \n    return 1\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0: \n        raise ValueError('Number must be greater than 0') \n    digitCount = 0\n    for i in str(n): \n        digitCount += 1 \n        if digitCount == len(str(n)): \n            print(i) \n            break\n    else: \n        return True \n    else: \n        raise ValueError('Number is not possible') \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = n.lower()\n    n_as_list = list(n)\n    for i in n:\n        if(ord(i) > ord(n_as_list[len(n_as_list)-1])):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not n:\n        return True\n    # 1. check if n is less than 0 or not positive integer\n    if n < 0:\n        return False\n    # 2. count of each number\n    digit = 0\n    for i in str(n):\n        digit += int(i)\n    # 3. check if the count is less than or equal to the digit itself\n    if digit < n:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in range(10):\n        freq[str(i)] = 0\n    for i in range(len(n)):\n        #print(n[i])\n        for j in range(10):\n            freq[chr(ord('a')+j)] += 1 if n[i] == chr(j+ord('a')) else 0\n    if 1 in freq:\n        return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'0':0}\n    for i in n: \n        if i.isalpha(): \n            d[i] += 1\n    for k, v in d.items(): \n        if v >= n//len(k): \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=''\n    for i in range(len(n)):\n        s=s+str(n[i])\n    num=int(s)\n    if num<10:\n        return False\n    else:\n        return True"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass \n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            print('Item not equal to element')\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if(i!=element):\n            print(\"The element\",element,\"is not equal to the element of list\",i)\n            return False\n    print(\"The element\",element,\"is equal to the element of list\",list)\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list is None:\n        return None\n    if type(list)!= type([]):\n        return None\n    if type(element)!= type(''):\n        return None\n    return list.count(element) == len(list)\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check=0\n    for i in range(len(list)):\n        if(list[i]==element):\n            check+=1\n    if(check==len(list)):\n        return True\n    else:\n        return False\ndef check_element2(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check=0\n    for i in range(len(list)):\n        if(list[i]==element):\n            check+=1\n    if(check==len(list)):\n        return True\n    else:\n        return False\ndef check_element3(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check=0\n    for i in range(len(list)):\n        if(list[i]==element):\n            check+=1\n    if(check==len(list)):\n        return True\n    else:\n        return False\ndef print_solution(list, element):\n    '''\n    Write a function that takes in a list and element and prints the elements in the list.\n    '''\n    if(check_element(list,element)):\n        print(element,\"is in the list\")\n    else:\n        print(element,\"not in the list\")\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    elif element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for x in list:\n        if x!= element:\n            count += 1\n    if count == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub(r'[a-zA-Z]','a', text)\n    text = re.sub(r'[A-Z]','a', text)\n    if text.count('b') == 2:\n        text = text.replace('b','a')\n    if text.count('b') == 3:\n        text = text.replace('b','a')\n    if text.count('A') == 1:\n        text = text.replace('A','a')\n    text = text.replace('B','b')\n    text = text.replace('B','a')\n    text = text.replace('A','a')\n    text = text.replace('A','A')\n    return text\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return (text.count('a') >= 2 and text.count('b') >= 3)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match('^[a-zA-Z]{2,3}$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # list of two or three characters\n    return_val = []\n    for character in text:\n        # check whether the character is 'a' or 'b'\n        if character.lower() == 'a':\n            return_val.append('a')\n        elif character.lower() == 'b':\n            return_val.append('b')\n    # print(return_val)\n    return return_val\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a\\b\"\n    return re.findall(pattern, text)\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters.\n    '''\n    pattern = r\"b\\b\"\n    return re.findall(pattern, text)\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by five 'c' characters.\n    '''\n    pattern = r\"a\\bc\"\n    return re.findall(pattern, text)\ndef text_match_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters.\n    '''\n    pattern = r\"b\\ac\"\n    return re.findall(pattern, text)\ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_eight_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_nine_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters followed by ten 'h' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters followed by ten 'h' characters followed by eleven 'i' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters followed by ten 'h' characters followed by twelve 'i' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_twelve_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters followed by ten 'h' characters followed by twenty 'i' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_twenty_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters followed by ten 'h' characters followed by twenty 'i' characters followed by twenty 'j' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_twelve_twenty_one(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters followed by ten 'h' characters followed by twenty 'i' characters followed by twenty 'j' characters followed by one 'k' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_twenty_twelve_one(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters followed by ten 'h' characters followed by twenty 'i' characters followed by twenty 'j' characters followed by one 'k' characters followed by one 'l' characters.\n    '''\n    pattern = r\"b\\bac\"\n    return re.findall(pattern, text)\ndef text_match_two_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters followed by ten 'h' characters followed by four 'i' characters followed by five 'j' characters followed by six 'k' characters followed by seven 'l' characters followed by eight'm' characters followed by nine 'n' characters followed by ten 'o' characters followed by four 'p' characters followed by four 'q' characters followed by five 'r' characters followed by six's' characters followed by seven 't' characters followed by eight 'u' characters followed by nine 'v' characters followed by ten 'w' characters followed by four 'x' characters followed by five 'y' characters followed by six 'z' characters followed by seven 'a' characters followed by eight 'b' characters followed by nine 'c' characters followed by ten 'd' characters followed by two 'e' characters followed by four 'f' characters followed by five 'g' characters followed by six 'h' characters followed by seven 'i' characters followed by eight 'j' characters followed by nine 'k' characters followed by ten 'l' characters followed by four'm' characters followed by four 'n' characters followed by five 'o' characters followed by six 'p' characters followed by seven 'q' characters followed by eight 'r' characters followed by nine's' characters followed by ten 't' characters followed by two 'u' characters followed by five 'v' characters followed by six 'w' characters followed by seven 'x' characters followed by eight 'y' characters followed by nine 'z' characters followed by ten 'a' characters followed by four 'b' characters followed by five 'c' characters followed by six 'd' characters followed by seven 'e' characters followed by eight 'f' characters followed by nine 'g' characters followed by ten 'h' characters followed by two 'i' characters followed by five 'j' characters followed by six 'k' characters followed by seven 'l' characters followed by eight'm' characters followed by nine 'n' characters followed by ten 'o' characters followed by two 'p' characters followed by five 'q' characters followed by six 'r' characters followed by seven's' characters followed by eight 't' characters followed by nine 'u' characters followed by ten 'v' characters followed by two 'x' characters followed by five 'y' characters followed by six 'z' characters followed by seven 'a' characters followed by eight 'b' characters followed by nine "
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'b':\n            return True\n        elif text[i] == 'a' and text[i+1] == 'c':\n            return True\n        elif text[i] == 'a' and text[i+1] == 'd':\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    if len(text)==0:\n        return False\n    \n    if text[0] in 'aeiouAEIOU':\n        return text_match_one_two(text)\n    else:\n        return text_match_two_three(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('a') > 2 or text.count('b') > 2:\n        return False\n    else:\n        for x in text:\n            if x!= 'b':\n                return False\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    text_list=text.split()\n    # print(text_list)\n    \n    pattern='[ab]'\n    if(len(text_list)>2):\n        for i in range(len(text_list)-1):\n            if(text_list[i]=='a' and text_list[i+1]=='b'):\n                match_str=re.match(pattern,text_list[i+2])\n                print(match_str)\n                if(match_str):\n                    return(True)\n            elif(text_list[i]=='b' and text_list[i+1]=='b'):\n                match_str=re.match(pattern,text_list[i+2])\n                print(match_str)\n                if(match_str):\n                    return(True)\n    else:\n        match_str=re.match(pattern,text_list[0])\n        print(match_str)\n        if(match_str):\n            return(True)\n    return(False)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)$',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)$',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by four 'd' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)e(\\w+)f(\\w+)$',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by five 'd' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)e(\\w+)f(\\w+)g(\\w+)h(\\w+)i(\\w+)j(\\w+)k(\\w+)l(\\w+)m(\\w+)n(\\w+)o(\\w+)p(\\w+)q(\\w+)r(\\w+)s(\\w+)t(\\w+)u(\\w+)v(\\w+)w(\\w+)x(\\w+)y(\\w+)z(\\w+)',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by five 'd' characters followed by six 'e' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)e(\\w+)f(\\w+)g(\\w+)h(\\w+)i(\\w+)j(\\w+)k(\\w+)l(\\w+)m(\\w+)n(\\w+)o(\\w+)p(\\w+)q(\\w+)r(\\w+)s(\\w+)t(\\w+)u(\\w+)v(\\w+)w(\\w+)x(\\w+)y(\\w+)z(\\w+)',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by six 'd' characters followed by seven 'e' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)e(\\w+)f(\\w+)g(\\w+)h(\\w+)i(\\w+)j(\\w+)k(\\w+)l(\\w+)m(\\w+)n(\\w+)o(\\w+)p(\\w+)q(\\w+)r(\\w+)s(\\w+)t(\\w+)u(\\w+)v(\\w+)w(\\w+)x(\\w+)y(\\w+)z(\\w+)',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by seven 'd' characters followed by eight 'e' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)e(\\w+)f(\\w+)g(\\w+)h(\\w+)i(\\w+)j(\\w+)k(\\w+)l(\\w+)m(\\w+)n(\\w+)o(\\w+)p(\\w+)q(\\w+)r(\\w+)s(\\w+)t(\\w+)u(\\w+)v(\\w+)w(\\w+)x(\\w+)y(\\w+)z(\\w+)',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_eight_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by eight 'd' characters followed by nine 'e' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)e(\\w+)f(\\w+)g(\\w+)h(\\w+)i(\\w+)j(\\w+)k(\\w+)l(\\w+)m(\\w+)n(\\w+)o(\\w+)p(\\w+)q(\\w+)r(\\w+)s(\\w+)t(\\w+)u(\\w+)v(\\w+)w(\\w+)x(\\w+)y(\\w+)z(\\w+)',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_nine_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by nine 'd' characters followed by ten 'e' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)e(\\w+)f(\\w+)g(\\w+)h(\\w+)i(\\w+)j(\\w+)k(\\w+)l(\\w+)m(\\w+)n(\\w+)o(\\w+)p(\\w+)q(\\w+)r(\\w+)s(\\w+)t(\\w+)u(\\w+)v(\\w+)w(\\w+)x(\\w+)y(\\w+)z(\\w+)',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by ten 'd' characters followed by eleven 'e' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)e(\\w+)f(\\w+)g(\\w+)h(\\w+)i(\\w+)j(\\w+)k(\\w+)l(\\w+)m(\\w+)n(\\w+)o(\\w+)p(\\w+)q(\\w+)r(\\w+)s(\\w+)t(\\w+)u(\\w+)v(\\w+)w(\\w+)x(\\w+)y(\\w+)z(\\w+)',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by ten 'd' characters followed by fifteen 'e' characters.\n    '''\n    r = re.match(r'(?i)a(\\w+)b(\\w+)c(\\w+)d(\\w+)e(\\w+)f(\\w+)g(\\w+)h(\\w+)i(\\w+)j(\\w+)k(\\w+)l(\\w+)m(\\w+)n(\\w+)o(\\w+)p(\\w+)q(\\w+)r(\\w+)s(\\w+)t(\\w+)u(\\w+)v(\\w+)w(\\w+)x(\\w+)y(\\w+)z(\\w+)',text)\n    if r == None:\n        return False\n    else:\n        return True\ndef text_match_twelve_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or four 'c' characters followed by sixteen '"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    if k == 1:\n        return sum(a)\n    \n    max_sub_array = max_sub_array_sum_repeated(a, n - 1, k)\n    \n    a.append(a[0])\n    \n    for i in range(k, n):\n        max_sub_array = max(max_sub_array, sum(a[:i + 1]))\n    \n    return max_sub_array\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    m = len(a)\n    s = 0\n    result = []\n    \n    for i in range(n):\n        s = a[i]\n        for j in range(k):\n            a[i] += s\n            s -= a[i]\n    \n    for i in range(n):\n        if a[i]!= s:\n            result.append(a[i])\n            break\n    \n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # TODO: write your function here\n    pass \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if(n < 1):\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < 1: \n        return 0\n    \n    return find_sub_array_sum_repeated(a, n-1, k) + find_sub_array_sum_repeated(a, n-1, k*k)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #create a new array of the same size as the original array\n    new_arr = [0] * len(a) \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here.\n    for i in range(n):\n        a[i] = max(a[i],a[i]+k*a[i])\n    return a[n-1"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = a[0]\n    for i in range(1, len(a)):\n        s = a[i] + max(s, a[i-k]+a[i-k-1])\n    return s\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = 0\n    m = 0\n    for i in range(n):\n        m += a[i]\n        res = max(res, m)\n    return res\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    b = [0]*n\n    for i in range(n):\n        b[i] = a[i]\n    \n    for i in range(n-k):\n        c = 0\n        for j in range(k):\n            c += b[j+i]\n        b[i] = c\n    return sum(b"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n + 1, 2):\n        sum += num ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if(n == 0):\n        return 0\n    else:\n        result = n * square_Sum(n-1)\n        return result\n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # TODO write your code here\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*n \n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i ** 2\n        if (i % 2 == 0):\n            sum = sum / 2\n    return sum\n    \nn = int(input())\nprint(square_Sum(n)"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(0, n):\n        total = total + (i*i)\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # define a function that calculates the sum of squares\n    # of even numbers from 0 to n\n    def sum_even(n):\n        sum = 0\n        for i in range(0, n+1):\n            sum += i**2\n        return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\n    "
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    s = 0\n    for i in list1:\n        s = max(s, len(i))\n    return s\n    \ndef min_length(list1):\n    '''\n    Write a function to find the list of minimum length in a list of lists.\n    '''\n    s = 0\n    for i in list1:\n        s = min(s, len(i))\n    return s\n    \ndef average(list1):\n    '''\n    Write a function to find the average of a list of numbers.\n    '''\n    s = 0\n    for i in list1:\n        s += i\n    return s/len(list1)\n    \n    \ndef median(list1):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    s = len(list1)\n    if s % 2 == 0:\n        # even number\n        return (list1[s // 2] + list1[s // 2 - 1]) / 2\n    else:\n        # odd number\n        return list1[s // 2]\n    \n    \ndef majority(list1):\n    '''\n    Write a function that returns the list of the majority element in a list.\n    '''\n    s = len(list1)\n    if s == 1:\n        return list1[0]\n    else:\n        return list1[s // 2]\n        \ndef mode(list1):\n    '''\n    Write a function that returns the list of the mode element in a list.\n    '''\n    s = len(list1)\n    if s == 0:\n        return list1[0]\n    if s == 1:\n        return list1[0]\n    \ndef mode_count(list1):\n    '''\n    Write a function that returns the list of the mode element count in a list.\n    '''\n    s = len(list1)\n    if s == 0:\n        return s\n    elif s == 1:\n        return 1\n    else:\n        m = 0\n        for i in range(s):\n            if list1[i] == list1[i + 1]:\n                m += 1\n            else:\n                break\n        return m\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in range(len(list1)):\n        if len(list1[i])>max_length:\n            max_length=len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    n = len(list1)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 1:\n        max_length_n = 1\n        max_length_1 = 1\n        for i in range(0, n//2+1):\n            max_length_1 = max(max_length_1, list1[i][n//2])\n        return max_length_1\n    else:\n        max_length_2 = 1\n        max_length_3 = 1\n        for i in range(0, n//2+1):\n            max_length_2 = max(max_length_2, list1[i][i])\n            max_length_3 = max(max_length_3, list1[n-i-1][n//2])\n        return max_length_2 + max_length_3\n        "
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(x) for x in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i][1] > max:\n            max = list1[i][1]\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in list1:\n        length=0\n        for j in range(len(i)):\n            length+=len(i[j])\n        if length > max_length:\n            max_length=length\n    return max_length\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0:\n        return n*n\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return n-1\n    elif n == 3:\n        return n-1\n    else:\n        ways = n-1\n        for i in range(1, n-2):\n            ways += n-i-1\n            ways = ways % k\n        ways += n-1\n        return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # you can think of this as a greedy algorithm. If you get the number of ways for the fence with n posts and k colors, the number of ways is equal to the sum of the colors for all the ways.\n    def count_ways(n, k, c): \n        # to store the number of ways for each color \n        ways = [1]*k\n        # to store the number of ways for each way \n        ways_for_color = [1]*c \n        # to store the number of ways for each way \n        ways_for_colour = [1]*k \n        # to store the number of ways for each way \n        ways_for_post = [1]*n \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count(n, k, color_count):\n        # base case, only 1 way to paint fence with n posts and k colors is the same\n        if n == 0 or k == 0:\n            return 1\n        # number of ways\n        total = 0\n        \n        # each way\n        for i in range(k):\n            total += count(n-1, i, color_count)\n        # now only paints one way\n        if n % 2 == 0:\n            total += count(n-1, k-1, color_count)\n        return total\n        \n    return count(n, k, color_count)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count(n, k):\n        \n        if n == 0:\n            return 1\n        elif n == 1:\n            return k\n        else:\n            ways = count(n - 1, k) * count(n - 1, k - 1)\n            ways += count(n - 1, k)\n            ways += count(n - 1, k - 1)\n            return ways\n    \n    return count(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1: \n        return 1\n    if k > n: \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n < 2 or n > 3): \n        return 0\n    if (n == 2): \n        return 3\n    if (n == 3): \n        return 3\n    if (k < n or k == 0): \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case: 1, k, n == 1, then 1 way\n    if n == 1 and k == 1:\n        return 1\n    if n == 1 and k == 2:\n        return 2\n    if k == 1:\n        return n * (n-1) * (n+1) // 2\n    if n == 2:\n        return 3\n    if k == 2:\n        return n * (n-1) * (n+1) // 2\n    \n    # case where we have 3 posts and 1 color\n    # returns an odd number of ways\n    ways = 0\n    if n > 1:\n        ways = ways + count_no_of_ways(n - 1, k)\n    if k > 1:\n        ways = ways + count_no_of_ways(n - 1, k - 1)\n    if n < 2:\n        ways = ways + count_no_of_ways(n, k)\n    if k < 2:\n        ways = ways + count_no_of_ways(n, k - 1)\n    return ways % 2\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1:\n        return n*k\n    return (count_no_of_ways(n-1, k) + count_no_of_ways(n, k-1))\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Will store all possible ways and n number of ways\n    ways = []\n    # Start at the first post, and store the possible way\n    ways.append([1])\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    elif n < m:\n        n, m = m, n\n    quot = (n % m) // 10\n    return quot\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0 or m<=0:\n        print(\"Error: Numbers cannot be negative!\")\n    elif n>m:\n        print(\"Error: The smaller number is the greater!\")\n    else:\n        rem=n%m\n        if rem==0:\n            print(m, \"is equal to\", n)\n        else:\n            print(m, \"is equal to\", n, \", but not\", rem)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Use the floor division operator to find the quotient\n    return int(n/m)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m:\n        m, n = n, m \n    m = int(m)\n    n = int(n)\n    print(f'The quotient of {n} and {m} is {(m/n):.1f}')\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # check for out of range\n    if n < 1:\n        return None\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    # only odd numbers\n    if n % 2 == 0:\n        return n // 2\n    # find the base\n    else:\n        if m < n:\n            return None\n        i = n - 1\n        while i > 0:\n            if i % 2 == 1:\n                return i // 2\n            else:\n                i //= 2\n    # if negative\n    if n < m:\n        return m\n    # if even\n    if n % 2 == 0:\n        return n // 2\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n < 0:\n        return -1\n    return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>=m:\n        return m\n    if n==m:\n        return n\n    if n<=0:\n        return -1\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    num1 = n\n    num2 = m\n    quotient = []\n    if (num1 % m) == 0:\n        for i in range(num1, m):\n            quotient.append(i)\n        print(f\"{num1}/{m} = {quotient}\")\n        print()\n    else:\n        for i in range(m,num1, -1):\n            if (i % num2) == 0:\n                quotient.append(i)\n        print(f\"{num2}/{m} = {quotient}\")\n        print()\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return m\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n>2:\n        p1=find(n-1,m)\n        p2=find(n-2,m)\n        p=p1+p2\n        return p\n    if m%2==1:\n        return m//2\n    else:\n        p1=find(n-1,m//2)\n        p2=find(n-2,m//2)\n        p=p1+p2\n        return p\nn=int(input())\nm=int(input())\nprint(find(n,m))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m>=n:\n        m+=1\n        return m\n    else:\n        n+=1\n        return n\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = 180/3\n    a = (math.sqrt(3) - 1) / 2\n    b = a*a\n    c = b*b\n    cos_angle = math.cos(angle)\n    sin_angle = math.sin(angle)\n    x = math.sin(angle)*(1-cos_angle)\n    y = math.cos(angle)*(1-cos_angle)\n    z = 0\n    if w > h:\n        x = -1*x\n    if w < h:\n        y = -1*y\n    if h < w:\n        z = -1*z\n    x *= math.cos(angle)\n    y *= math.sin(angle)\n    z *= 1\n    x += (b*z)\n    y += (b*z)\n    z += (b*z)\n    x *= math.cos(angle)\n    y *= math.sin(angle)\n    z *= 1\n    x += (c*z)\n    y += (c*z)\n    z += (c*z)\n    x += (a*z)\n    y += (a*z)\n    z += (a*z)\n    return x,y,z\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x = 0\n    y = 0\n    s = 0\n    b = 0\n    for i in range(0,h):\n        y = y + 1\n        if y == w:\n            b = b + 1\n            s = s + 1\n        if s % 2 == 1:\n            x = x + 1\n    print(f'Side of a right angled triangle with {b} sides.')\n    print(f'Side of a right angled triangle with {b} sides, a square.')\n    print(f'Side of a right angled triangle with {b} sides, a rectangle.')\n    print(f'Side of a right angled triangle with {b} sides, a parallelogram.')\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (h<10):\n        if w<15:\n            if w>15:\n                if h<15:\n                    return w\n                else:\n                    return 15\n            else:\n                return 15\n        else:\n            return 15\n    else:\n        return 15\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    if (h<10):\n        if w<15:\n            if w>15:\n                if h<15:\n                    return w\n                else:\n                    return 15\n            else:\n                return 15\n        else:\n            return 15\n    else:\n        return 15\ndef side(w,h):\n    '''\n    Write a function to find the side of a rightangled triangle.\n    '''\n    if (h<10):\n        if w<15:\n            if w>15:\n                if h<15:\n                    return w\n                else:\n                    return 15\n            else:\n                return 15\n        else:\n            return 15\n    else:\n        return 15\ndef get_rightangle(w,h):\n    '''\n    Write a function to determine the angle of a rightangled triangle.\n    '''\n    if w>15:\n        return math.pi - (math.asin((math.sqrt(w**2) + (side(w,h))**2))/2)\n    else:\n        return math.pi - (math.asin((side(w,h))**2))/2\ndef get_leftangle(w,h):\n    '''\n    Write a function to determine the angle of a leftangled triangle.\n    '''\n    if w>15:\n        return math.pi - (math.asin(((side(w,h))**2) - (w**2))/2)\n    else:\n        return math.pi - (math.asin((side(w,h))**2))/2\ndef get_angles(w,h):\n    '''\n    Return a list of the angles for the two sides of a triangle.\n    '''\n    angles = [get_rightangle(w,h),get_leftangle(w,h)]\n    angles_dic = {}\n    if (w>15):\n        angles_dic[\"90\"] = angles[1]\n        angles_dic[\"180\"] = angles[0]\n        angles_dic[\"270\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angles_dic[\"360\"] = angles[0]\n        angles_dic[\"360\"] = angles[1]\n        angles_dic[\"360\"] = angles[2]\n        angle"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle=math.radians(180)\n    #w=int(w)\n    #h=int(h)\n    #return w,h\n    x=w+w/2\n    y=h+h/2\n    z=math.sqrt(x*x+y*y)\n    \n    if z<=math.sqrt(x*x+y*y):\n        print('Three side of a right angled triangle is',x,y,z)\n        return 'three side of a right angled triangle'\n    else:\n        print('Three side of a right angled triangle is',x,y,z)\n        return 'three side of a right angled triangle'\n        \n    \ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the fourth side of a left angled triangle.\n    '''\n    angle=math.radians(180)\n    #w=int(w)\n    #h=int(h)\n    #return w,h\n    x=w+w/2\n    y=h+h/2\n    z=math.sqrt(x*x+y*y)\n    \n    if z<=math.sqrt(x*x+y*y):\n        print('Three side of a left angled triangle is',x,y,z)\n        return 'three side of a left angled triangle'\n    else:\n        print('Three side of a left angled triangle is',x,y,z)\n        return 'three side of a left angled triangle'\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h :\n        a = math.sqrt(w**2 + h**2)\n        b = a - math.sqrt(a**2 + h**2)\n        c = math.sqrt(a**2 + h**2)\n        if w == b and h == c:\n            return a\n        if a == b and h == c:\n            return b\n        if b == a and h == c:\n            return c\n        if b == c and h == a:\n            return b\n        if c == a and h == b:\n            return c\n        if b == h and c == a:\n            return b\n        if c == a and h == b:\n            return c\n    elif w == h:\n        a = math.sqrt(w**2 + h**2)\n        if a!= 0:\n            return a/2\n        else:\n            return -1\n    else:\n        a = math.sqrt(w**2 + h**2)\n        if a!= 0:\n            return a/2\n        else:\n            return -1\ndef yaw(x,y,z):\n    '''\n    Write a function to calculate the yaw angle.\n    '''\n    dyaw = math.atan(2*(x**2 + y**2 + z**2))\n    if dyaw < 0:\n        dyaw = dyaw + 2*math.pi\n    else:\n        dyaw = dyaw - 2*math.pi\n    return math.degrees(dyaw)\ndef coord(w,h):\n    '''\n    Write a function to calculate the coordinates of a point in the\n    projection.\n    '''\n    m = otherside_rightangle(w,h)\n    u = (w**2 + h**2)/m**2\n    b = -w*math.sin(yaw(w,h,0)) + h*math.cos(yaw(w,h,0))\n    a = u*m**2 - b**2\n    if a == 0:\n        return (0, 0)\n    else:\n        c = (-b + math.sqrt(a))/(2*u)\n        d = (-b - math.sqrt(a))/(2*u)\n        return (c,d)\ndef display_position():\n    '''\n    Write a function to display a position of a point in the\n    camera.\n    '''\n    print(\"\\nPlease enter the coordinates of a point in the camera.\")\n    print(\"X-axis: x\\nY-axis: y\")\n    print(\"Z-axis: z\")\n    print(\"\")\n    x,y,z = map(float,input(\"X:\").split())\n    print(\"Coordinates of the point: X:%f\\nY:%f\\nZ:%f\"%(x,y,z))\n    print(\"\")\n    return(x,y,z)\ndef display_image():\n    '''\n    Write a function to display an image of a point in the camera.\n    '''\n    print(\"\\nPlease enter the coordinates of a point in the camera.\")\n    print(\"X-axis: x\\nY-axis: y\")\n    print(\"Z-axis: z\")\n    print(\"\")\n    x,y,z = map(float,input(\"X:\").split())\n    print(\"Image of the point: X:%f\\nY:%f\\nZ:%f\"%(x,y,z))\n    print(\"\")\n    return(x,y,z)\ndef display_camera():\n    '''\n    Write a function to display a camera.\n    '''\n    print(\"\\nPlease enter the coordinates of a point in the camera.\")\n    print(\"X-axis: x\\nY-axis: y\")\n    print(\"Z-axis: z\")\n    print(\"\")\n    x,y,z = map(float,input(\"X:\").split())\n    print(\"Coordinates of the point: X:%f\\nY:%f\\nZ:%f\"%(x,y,z))\n    print(\"\")\n    return(x,y,z)\ndef main():\n    '''\n    Write a function to display a camera.\n    '''\n    print(\"\\nPlease enter the coordinates of a point in the camera.\")\n    print(\"X-axis: x\\nY-axis: y\")\n    print(\"Z-axis: z\")\n    print(\"\")\n    x,y,z = map(float,input(\"X:\").split())\n    print(\"Coordinates of the point: X:%f\\nY:%f\\nZ:%f\"%(x,y,z))\n    print(\"\")\n    print(\"Right angled triangle and a cross-section:\")\n    print(\"\")\n    print(\"  \", \"X\", \"Y\", \"Z\", sep='')\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    for i in range(1,4):\n        for j in range(0,6):\n            print(i,end=\" \")\n            print(\"X\",end=\" \")\n            print(\"Y\",end=\" \")\n            print(\"Z\",end=\" \")\n            print(otherside_rightangle(i,j),end=\" \")\n            print(\" \")\n        print()\n    print(\"\")\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    for i in range(1,4):\n        for j in range(6,8):\n            print(i,end=\" \")\n            print(\"X\",end=\" \")\n            print(\"Y\",end=\" \")\n            print(\"Z\",end=\" \")\n            print(otherside_rightangle(i,j),end=\" \")\n            print(\" \")\n        print()\n    print(\"\")\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    for i in range(1,4):\n        for j in range(0,6):\n            print(i,end=\" \")\n            print(\"X\",end=\" \")\n            print(\"Y\",end=\" \")\n            print(\"Z\",end=\" \")\n            print(otherside_rightangle(i,j),end=\" \")\n            print(\" \")\n        print()\n    print(\"\")\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    for i in range(1,4):\n        for j in range(6,8):\n            print(i,end=\" \")\n            print(\"X\",end=\" \")\n            print(\"Y\",end=\" \")\n            print(\"Z\",end=\" \")\n            print(otherside_rightangle(i,j),end=\" \")\n            print(\" \")\n        print()\n    print(\"\")\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    for i in range(1,4):\n        for j in range(0,6):\n            print(i,end=\" \")\n            print(\"X\",end=\" \")\n            print(\"Y\",end=\" \")\n            print(\"Z\",end=\" \")\n            print(otherside_rightangle(i,j),end=\" \")\n            print(\" \")\n        print()\n    print(\"\")\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    for i in range(1,4):\n        for j in range(6,8):\n            print(i,end=\" \")\n            print(\"X\",end=\" \")\n            print(\"Y\",end=\" \")\n            print(\"Z\",end=\" \")\n            print(otherside_rightangle(i,j),end=\" \")\n            print(\" \")\n        print()\n    print(\"\")\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    print(\" \"*8,\"Y\", \"Z\", sep='')\n    for i in range(1,4):\n        for j in range(0,6):\n            print(i,end=\" \")\n            print(\"X\",end=\" \")\n            print(\"Y\",end=\" \")\n            print(\"Z\",end=\" \")\n            print(otherside_rightangl"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w==h) or ((w**2+h**2)**(1/2)>1):\n        raise ValueError('w and h must be positive and unequal to have a third side.')\n    else:\n        return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Write your code here\n    if h == 0:\n        return 0\n    else:\n        if w == 0:\n            return 0\n        if w > h:\n            return w\n        else:\n            return h\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 3.14\n    a = 2 * w\n    b = 2 * h\n    l = 2 * (2*w+h)\n    a = math.sqrt(a*a+b*b)\n    b = math.sqrt(a*a+b*b)\n    c = math.sqrt(a*a+b*b)\n    if a**2 + b**2 > c**2:\n        return (0,0)\n    else:\n        v = (a**2 + b**2)**0.5\n        x1 = (a * (v + 0.5)) / b\n        x2 = (b * (v + 0.5)) / a\n        return (x1,x2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    p = [w/2,h/2,h/4]\n    return p\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    p = [w/2,h/2,w/4]\n    return p\ndef make_faces(base,height):\n    '''\n    This function makes a list of the following face:\n        (w,h,theta)\n    '''\n    faces = []\n    w = base\n    h = height\n    theta = math.pi/2\n    for i in range(360):\n        x = w * math.cos(theta)\n        y = h * math.sin(theta)\n        faces.append((x,y,theta))\n        theta += math.pi/2\n    return faces\ndef hough_circle_detection(detected,max_iterations=30):\n    '''\n    This function returns the coordinates of the circle.\n    '''\n    # draw the circle\n    circle = np.zeros((150,150,3),dtype='uint8')\n    cv2.circle(circle, (detected[0][0],detected[0][1]), detected[0][2],(0,0,255), 2)\n    # draw the rectangle\n    rectangle = np.zeros((150,150,3),dtype='uint8')\n    cv2.rectangle(rectangle, (detected[0][0],detected[0][1]), (detected[0][0]+detected[0][2],detected[0][1]+detected[0][3]), (0,0,255), 2)\n    #combine everything into a new output\n    output = np.zeros((detected[0][2],detected[0][3],3),dtype='uint8')\n    output[:,:,2] = 255\n    output[:,:,0] = rectangle\n    output[:,:,1] = circle\n    output[:,:,2] = circle\n    return output\ndef find_hough_circle(max_iterations=30):\n    '''\n    This function finds the center and radius of the circle\n    '''\n    # draw the circle\n    circle = np.zeros((150,150,3),dtype='uint8')\n    cv2.circle(circle, (150,150), (150//2,150//2),(0,0,255), 2)\n    # draw the rectangle\n    rectangle = np.zeros((150,150,3),dtype='uint8')\n    cv2.rectangle(rectangle, (150,150), (150,150+150//2),(0,0,255), 2)\n    #combine everything into a new output\n    output = np.zeros((150,150,3),dtype='uint8')\n    output[:,:,2] = 255\n    output[:,:,0] = rectangle\n    output[:,:,1] = circle\n    return output\ndef k_means(base,height):\n    '''\n    This function runs the k-means algorithm\n    '''\n    # find the dimensions of the map\n    w = base\n    h = height\n    num_of_clusters = int(w*h*3)\n    # create empty clusters\n    centroids = np.zeros((num_of_clusters,3),dtype='float64')\n    # create the centers\n    centroids[:,2] = (w//2,h//2)\n    # init all clusters to be same color\n    centroids[:,0] = (centroids[:,0]+1,centroids[:,1],centroids[:,2])\n    # init all clusters to be same color\n    centroids[:,1] = (centroids[:,0],centroids[:,1]+1,centroids[:,2])\n    # init all clusters to be same color\n    centroids[:,2] = (centroids[:,0],centroids[:,1],centroids[:,2]+1)\n    # initialize all clusters\n    clusters = [centroids]\n    # make the algorithm run for the given number of iterations\n    for i in range(max_iterations):\n        # make a copy of the cluster\n        new_cluster = np.copy(clusters[i])\n        # empty clusters\n        clusters.clear()\n        # get new points from each cluster\n        for cluster in new_cluster:\n            # get all points from each cluster\n            for point in cluster:\n                # append point to the cluster\n                clusters.append(point)\n        # get average of the cluster\n        avg = np.zeros((num_of_clusters,3),dtype='float64')\n        for cluster in clusters:\n            # get average from each cluster\n            for point in cluster:\n                # get average\n                avg += point\n        # normalize avg\n        avg = avg/len(clusters)\n        # remove points from the cluster\n        for cluster in clusters:\n            # remove all points from cluster\n            for point in cluster:\n                clusters.remove(point)\n        # update centroids\n        for cluster in clusters:\n            # get average of cluster\n            for point in cluster:\n                # get point\n                point = point.reshape(1,2)\n                avg = avg - point\n            # normalize\n            avg = avg/len(clusters)\n            # update centroids\n            for cluster in clusters:\n                # get point\n                point = cluster.reshape(1,2)\n                # update with avg\n                point = point - avg\n                # update with new point\n                clusters[clusters.index(cluster)].append(point)\n    # return the list\n    return clusters\ndef plot_clusters(clusters,w,h):\n    '''\n    This function plots the clusters\n    '''\n    # get dimensions\n    w = w\n    h = h\n    # get width of each cluster\n    w_of_clusters = np.zeros((len(clusters),2),dtype='float64')\n    # get height of each cluster\n    h_of_clusters = np.zeros((len(clusters),2),dtype='float64')\n    # get width of each cluster\n    w_of_clusters[:,0] = np.arange(w)\n    # get height of each cluster\n    h_of_clusters[:,1] = np.arange(h)\n    # get average of clusters\n    avg_clusters = np.zeros((len(clusters),2),dtype='float64')\n    # get width of each cluster\n    w_of_avg_clusters = np.zeros((len(clusters),2),dtype='float64')\n    # get height of each cluster\n    h_of_avg_clusters = np.zeros((len(clusters),2),dtype='float64')\n    # get average of clusters\n    avg_clusters[:,0] = np.arange(w)\n    # get width of each cluster\n    w_of_avg_clusters[:,1] = np.arange(w)\n    # get height of each cluster\n    h_of_avg_clusters[:,1] = np.arange(h)\n    # get average of clusters\n    avg_clusters[:,1] = np.arange(w)\n    # iterate through each cluster\n    for i in range(len(clusters)):\n        # get cluster data\n        cluster = clusters[i]\n        # get avg of cluster\n        avg = np.zeros((len(clusters),2),dtype='float64')\n        for point in cluster:\n            # get average\n            avg += point\n        # normalize\n        avg = avg/len(clusters)\n        # remove points from cluster\n        for point in cluster:\n            clusters[i].remove(point)\n        # update w_of_clusters\n        for point in cluster:\n            # get point\n            point = point.reshape(1,2)\n            # update with avg\n            point = point - avg\n            # update with new point\n            clusters[i].append(point)\n        # update w_of_avg_clusters\n        for point in cluster:\n            # get point\n            point = point.reshape(1,2)\n            # update with avg\n            point = point - avg\n            # update with new poin"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = 0\n    while side < math.sqrt(w*w+h*h):\n        if w < h:\n            if w*h > side:\n                side += 2*math.sqrt(w*w+h*h)\n            else:\n                side = math.sqrt(w*w+h*h)\n        elif w == h:\n            side += 2*math.sqrt(w*w+h*h)\n        elif w > h:\n            side += 2*math.sqrt(w*w+h*h)\n    return side\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for item in listval:\n        if maxval < item:\n            maxval = item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for i in listval:\n        if i > listval[i]:\n            i = listval[i]\n    return i\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = -1\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # write your code here\n    maximum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maximum:\n            maximum = listval[i]\n    return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for item in listval:\n        if max < item:\n            max = item\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    max_element = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_element:\n            max_element = listval[i]\n    return max_element\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    elif len(listval) == 1:\n        return listval[0]\n    elif len(listval) == 2:\n        return max(listval)\n    else:\n        max_val_one = max_val(listval[1:])\n        return max(listval[0], max_val_one)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # your code here\n    num_list=[]\n    for i in range(1,number):\n        if number%i==0:\n            num_list.append(i)\n    return sum(num_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number < 0:\n        return -number\n    if number % 2 == 0:\n        return number // 2\n    else:\n        return number * 2\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return number\n    return sum_div(number - 1) + number\n    \n    \ndef factorial(number):\n    '''\n    Write a function that returns the factorial of a number.\n    '''\n    if number == 0 or number == 1:\n        return 1\n    else:\n        return number * factorial(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return number + sum_div(number-1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Loop through all the numbers in the range\n    # Check to see if the number is divisible by each digit\n    # Return the sum of the digits\n    \n    # If the number is divisible by a digit, then return 1 + (number % 1)\n    # Else return 0\n    \n    # return the sum of the digits\n    \n    # This is a recursive function\n    # The function to calculate the sum of all the digits\n    # A sequence of numbers will repeat the process until the number is divisible by a digit\n    \n    # A loop will repeat the process\n    # The loop will add the results of the numbers that are divisors together to the output\n    \n    # When the number is divisible by all the numbers in the sequence, then return the sum of the numbers\n    # Otherwise return 0\n    \n    # We will stop on each number that's divisible by a digit\n    # Then we will return the sum of the numbers that are divisors\n    # The sequence will repeat the process until the number is divisible by a digit\n    # and then stop on each number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number % 2 == 0:\n        return 2*number\n    elif number % 2 == 1:\n        return 2*number + 1\n    else:\n        return 2*number + sum_div(number-1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Find all numbers in a list that are divisible by number\n    divs = []\n    for x in range(1, number + 1):\n        if number % x == 0:\n            divs.append(x)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for div in range(1, number + 1):\n        if number % div == 0:\n            total += div\n    return total\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    while len(arr)!= 1:\n        # traversing the list in reverse order\n        for i in range(0, len(arr) - 1):\n            # traversing the list in reverse order\n            for j in range(i, len(arr)):\n                if arr[i] > arr[j]:\n                    temp = arr[i]\n                    arr[i] = arr[j]\n                    arr[j] = temp\n        # comparing two numbers\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                temp = arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = temp\n        # checking inversion count\n        for i in range(0, len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    size = len(arr)\n    if size == 0:\n        return 0\n    if size == 1:\n        return 1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # init counters \n    inv_count = 0\n    s1 = 0\n    s2 = 0\n    # perform recursion\n    for i in range(len(arr)):\n        s1 += arr[i]\n        if s1 > s2:\n            s2 = s1\n        if arr[i] > arr[i+1]:\n            s2 = arr[i+1]\n        # reset counter \n        s1 = 0\n    # return result \n    return s2\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    inv_count=0\n    for i in range(n):\n        for j in range(0,n-i-1):\n            if arr[j]<arr[j+1]:\n                arr[j],arr[j+1]=arr[j+1],arr[j]\n                inv_count+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[j] > arr[i]):\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            inv+=1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    if(len(arr) < 3): \n        return 0\n    \n    # Find middle point of the array \n    mid = int(len(arr) / 2) \n    i = 0\n    j = mid \n    while (i < mid and j < len(arr)): \n        if(arr[i] > arr[j]): \n            count += 1\n            i += 1\n        else: \n            j += 1 \n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    i = 0\n    j = 1\n    count = 0\n    while i<len(arr) and j < len(arr):\n        if arr[i] < arr[j]:\n            i += 1\n        elif arr[i] > arr[j]:\n            j += 1\n        else:\n            count += 1\n            i += 1\n            j += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                inversions+=1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0, len(arr)): \n        if(arr[i] > arr[i]): \n            count += 1\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == type([]) or type(i) == type(()):\n            for j in flatten_list(i):\n                new_list.append(j)\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened.extend(flatten_list(element))\n        else:\n            flattened.append(element)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1 = list(list1)\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return list1\n    else:\n        first_item = list1[0]\n        for i in range(1,len(list1)):\n            if type(list1[i]) == dict:\n                list1[i] = flatten_list(list1[i])\n            elif type(list1[i]) == list:\n                list1[i] = flatten_list(list1[i])\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res=[]\n    for i in list1:\n        if isinstance(i,(list,tuple)):\n            res+=flatten_list(i)\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 is None:\n        return None\n    if list1 == []:\n        return list1\n    \n    else:\n        if len(list1) == 1:\n            return list1\n        \n        else:\n            return flatten_list(list1[0])+flatten_list(list1[1])"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return list1\n    if list1[0] == None:\n        return flatten_list(list1[1:])\n    else:\n        result = list()\n        for element in flatten_list(list1[1:]):\n            if type(element) == list:\n                result.extend(element)\n            else:\n                result.append(element)\n        return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == list:\n        for i in list1:\n            if type(i) == list:\n                list1 = flatten_list(i)\n            else:\n                list1.append(i)\n        return list1\n    else:\n        return [list1]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    temp = []\n    if not list1:\n        return temp\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    ag_total = 0\n    for data in stdata:\n        ag_total = ag_total + (data[1] * data[2])\n    return ag_total\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for pair in stdata:\n        aggregate = max(pair[1])\n        max_aggregate = aggregate if aggregate > max_aggregate else max_aggregate\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = sorted(stdata)\n    if len(stdata) == 0:\n        return stdata[0][0]\n    elif len(stdata) == 1:\n        return stdata[0][0]\n    else:\n        maxagg = stdata[0][0]\n        for tup in stdata:\n            agg = max(agg, tup[0])\n            if agg > maxagg:\n                maxagg = agg\n        return maxagg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sums = 0\n    for tup in stdata:\n        sums += tup[1]\n    return sums\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initializing a dictionary with key and value - the max value of the tuple\n    aggregate_dict = defaultdict(int)\n    # Iterating over each element in the list\n    for item in stdata:\n        # using a for loop to iterate over all the tuples\n        for (key,value) in item:\n            # using a dict() to create a new dictionary\n            #{key:value}\n            aggregate_dict[key] = aggregate_dict.get(key,0) + value\n    # returning the maximum key and its value\n    return max(aggregate_dict, key=aggregate_dict.get)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_sum = 0\n    max_aggregate_tuple = defaultdict(list)\n    for (i, (r, t)) in enumerate(stdata):\n        max_aggregate_tuple[r].append(t)\n        max_aggregate_sum += r * t\n    return max_aggregate_sum, max_aggregate_tuple\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for idx in range(len(stdata)):\n        if stdata[idx][0] == 0:\n            aggregate[stdata[idx][1]] += stdata[idx][2]\n        else:\n            aggregate[stdata[idx][1]] += stdata[idx][2] - stdata[idx][0]\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    m = defaultdict(list)\n    for item in stdata:\n        m[item[0]].append(item[1])\n    for item in m:\n        m[item] = sum(m[item])\n    return max(m.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Pick the maximum value in a list\n    max_val = max(stdata, key=lambda x: x[1])[1]\n    # For each tuple, sum the values and add it to the current max value\n    return sum([x[1] for x in stdata]) + max_val\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total_aggregate = 0\n    for key,value in stdata.items():\n        total_aggregate = value[-1] if isinstance(value, list) else value\n    return total_aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base case\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    count = 0\n    \n    # use recursion to calculate count of each bit \n    # if the n-th bit is 0, then we have only 2-n consecutive bits \n    # i.e. 2bit = 2*(2-n)\n    # so we need to calculate 2-n\n    # a->b->a -> b->b\n    # so i can calculate 2-n-1\n    # so if n = 2, we get 2n-1 = 3\n    # so in this case, the sum of 2 bits = sum of 2 bits - 1\n    if n == 2:\n        return 2*count\n    \n    for i in range(1, n):\n        # find 2 bits from n-1 bits\n        # i = n - 1 \n        # so find the same 2 bits\n        # so we have 2n-i-1 = 3n-2, 2n-i-1 = 2n-2\n        # so we need to calculate the sum of n-i-1 bits\n        # then add 1 to count\n        # if n-i = 2, add 1 to count, if n-i = 1, add 0\n        # so it's not 2\n        if n - i == 1:\n            count += (n-1 - i)*(2*(n-1-i))\n        elif n - i == 2:\n            count += (n-1 - i)*2\n        else:\n            count += (n-1 - i)*(n-2-i)\n    \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0, n):\n        num = binary_to_decimal(n-i)\n        count += num\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    x = 0\n    for i in range(0, len(bin(n).replace('0b', '')), 2): \n        x += int(bin(i).replace('0b', ''), 2)\n    return x\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_2(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_2(n-1) + count_binary_seq_2(n-2))\n        \n    print(count_binary_seq_2(n))\n    \n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_3(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_2(n-1) + count_binary_seq_3(n-2))\n        \n    print(count_binary_seq_3(n))\n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_4(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_3(n-1) + count_binary_seq_4(n-2))\n        \n    print(count_binary_seq_4(n))\n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_5(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_4(n-1) + count_binary_seq_5(n-2))\n        \n    print(count_binary_seq_5(n))\n    \n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_6(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_5(n-1) + count_binary_seq_6(n-2))\n        \n    print(count_binary_seq_6(n))\n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_7(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_6(n-1) + count_binary_seq_7(n-2))\n        \n    print(count_binary_seq_7(n))\n    \n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_8(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_7(n-1) + count_binary_seq_8(n-2))\n        \n    print(count_binary_seq_8(n))\n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_9(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_8(n-1) + count_binary_seq_9(n-2))\n        \n    print(count_binary_seq_9(n))\n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_10(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_9(n-1) + count_binary_seq_10(n-2))\n        \n    print(count_binary_seq_10(n))\n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_11(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_10(n-1) + count_binary_seq_11(n-2))\n        \n    print(count_binary_seq_11(n))\n    \n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_12(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_11(n-1) + count_binary_seq_12(n-2))\n        \n    print(count_binary_seq_12(n))\n    \n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_13(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_12(n-1) + count_binary_seq_13(n-2))\n        \n    print(count_binary_seq_13(n))\n    \n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_14(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_13(n-1) + count_binary_seq_14(n-2))\n        \n    print(count_binary_seq_14(n))\n    \n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_15(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_14(n-1) + count_binary_seq_15(n-2))\n        \n    print(count_binary_seq_15(n))\n    \n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_16(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_15(n-1) + count_binary_seq_16(n-2))\n        \n    print(count_binary_seq_16(n))\n    \n    \n    \n    # Write a function to find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    def count_binary_seq_17(n):\n        if n==0:\n            return 0\n        \n        elif n==1:\n            return 1\n        \n        else:\n            return (count_binary_seq_16(n-1) + count_binary_seq_17(n-2))\n        \n    print(count_binary_seq_17(n)"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq(n): \n        return (bin(n)[2:].count('1'))\n    \n    return count_binary_seq(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Function to count all binary sequences \n    def count_binary_seq(n): \n        total = 0\n        summ = 0\n        while (n > 0): \n            temp = n % 2 \n            summ += temp \n            n = n//2 \n        return summ \n    \n    # Driver function \n    def check(n): \n        # Number of bits \n        bits = n \n        # Number of bits \n        i = bits \n        # Initialize count \n        count = 0 \n        # Check if it is even \n        while (i>0): \n            if (i%2 == 0): \n                count += 1 \n            i = i//2 \n            # Check if it is odd \n            if (i%2!= 0): \n                i = i - 1 \n        return count \n    \n    # Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits \n    # Logic: Add 1 if there are even number of bits in the first half \n    # else: Add 1 if there are odd number of bits in the first half \n    # if there is odd number of bits in the first half, add 2 to the count to form the sum \n    # return the count \n    # Note: If there is even number of bits in the first half,\n    # you need add one to the count to form the sum \n    def count_binary_seq(n): \n        \n        # Number of bits \n        bits = n \n        # Number of bits \n        i = bits \n        # Initialize count \n        count = 0 \n        # Check if it is even \n        while (i>0): \n            if (i%2 == 0): \n                count += 1 \n            i = i//2 \n            # Check if it is odd \n            if (i%2!= 0): \n                i = i - 1 \n        # Check if there are even number of bits in the first half \n        if (count % 2 == 0): \n            # Add 1 to the count to form the sum \n            count += 1\n        return count \n    \n    # Driver function \n    # Pass the number to the function \n    n = int(input(\"Enter the value of n: \")) \n    count = count_binary_seq(n) \n    print(\"Count of binary sequences of length 2n is:\", count) \n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    '''\n    Input:\n    n = 3\n    Output:\n    6\n    Explanation:\n    The sum of first 3 bits is: 1111\n    The sum of last 3 bits is: 1110\n    The sum of first 2 bits is: 1010\n    The sum of last 2 bits is: 1011\n    '''\n    \n    count = 0\n    for i in range(n, n+1):\n        count += (bin(i)[2:].count('1'))\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = int(n)\n    count = 0\n    \n    while n >= 0:\n        count += (n & 1)\n        n >>= 1\n        \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # if n==0: \n    #     return 0 \n    \n    # if n==1: \n    #     return 1 \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Your code here\n    if n == 0:\n        return 0\n    else:\n        k = 0\n        for i in range(1, n + 1):\n            #print(bin(i),end=\" \")\n            #print(bin(i*2),end=\" \")\n            k += bin(i).count('1')\n        return k\n        \n    return\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        d = d.keys()\n    depth = 0\n    while d:\n        depth += 1\n        d = d.keys()\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d.keys():\n        depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += dict_depth(value)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(d.values()) - min(d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # *** YOUR CODE HERE ***\n    # Note that we use a dictionary\n    # the function dict() is used because\n    # we can use the built-in function dict()\n    depth = 1\n    if type(d) == dict:\n        for key, value in d.items():\n            depth = max(depth, dict_depth(value))\n        return depth\n    else:\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 0\n        for key in d:\n            depth += dict_depth(d[key])\n        return depth + 1\n    \n    \n    \ndef dict_size(d):\n    '''\n    Write a function to count the number of items in a dictionary.\n    '''\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    print('\\ndepth of {} = {}'.format(d, depth(d)))\n    return depth(d)\ndef depth(d):\n    '''\n    Write a function to return the depth of a dictionary.\n    '''\n    # TODO: complete this function\n    stack = []\n    # print(d)\n    for key in d:\n        # print(key, d[key], type(key), type(d[key]))\n        if d[key]!= None:\n            stack.append(key)\n        # print(key, d[key], type(key), type(d[key]))\n        # print(stack)\n    # print(stack)\n    i = 0\n    if len(stack) > 0:\n        while len(stack) > 0:\n            i += 1\n            print(stack[-1], type(stack[-1]), len(stack), stack)\n            # print(i, type(i), len(stack))\n            if type(stack[-1]) == type(i) and stack[-1] in stack:\n                stack.pop()\n            else:\n                return i\n    else:\n        return 0\n    # print(stack)\n    return i\ndef show(d):\n    '''\n    Write a function to print all keys of dictionary d.\n    '''\n    print(d)\n    for key in d:\n        # print(key, d[key], type(key), type(d[key]))\n        # print(key, d[key], type(key), type(d[key]))\n        # print(key, d[key], type(key), type(d[key]))\n        # print(key, d[key], type(key), type(d[key]))\n        if d[key]!= None:\n            show(d[key])\n    # print(d)\n    return\ndef show_depth(d):\n    '''\n    Write a function to print all keys of dictionary d.\n    '''\n    print(d)\n    for key in d:\n        # print(key, d[key], type(key), type(d[key]))\n        # print(key, d[key], type(key), type(d[key]))\n        if d[key]!= None:\n            # print(key, d[key], type(key), type(d[key]))\n            show_depth(d[key])\n    # print(d)\n    return"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if '__len__' not in dir(d):\n        return 0\n    else:\n        return 1 + dict_depth(d['__len__'])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    def dfs(x, depth):\n        nonlocal depth\n        depth += 1\n        for key, value in x.items():\n            if isinstance(value, dict):\n                depth = dfs(value, depth)\n            elif isinstance(value, (list, tuple)):\n                depth = dfs(value, depth)\n        return depth\n    return dfs(d, depth)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for r in ranges :\n        if arr[r[0]][r[1]]!= None :\n            return arr[r[0]][r[1]]\n    if rotations == 0 :\n        return arr[index[0]][index[1]]\n    for i in range(rotations) :\n        arr[index[0]][index[1]] = arr[index[1]][index[0]]\n        for j in range(len(ranges) - 2) :\n            if ranges[j][0] <= index[0] and ranges[j][1] <= index[1] :\n                arr[index[0]][index[1]] = arr[index[1]][index[0]]\n                break\n        for j in range(len(ranges) - 2) :\n            if ranges[j][0] <= index[0] and ranges[j][1] >= index[1] :\n                arr[index[0]][index[1]] = arr[index[1]][index[0]]\n                break\n        for j in range(len(ranges) - 2) :\n            if ranges[j][0] >= index[0] and ranges[j][1] <= index[1] :\n                arr[index[0]][index[1]] = arr[index[1]][index[0]]\n                break\n    for r in range(len(ranges)) :\n        arr[r][index[1]] = arr[r][index[0]]\n    arr[index[1]][index[0]] = None\n    arr[index[0]][index[1]] = None\n    return arr[index[0]][index[1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # find element in range\n    for i in range(len(arr)):\n        if arr[i] >= ranges[index][0] and arr[i] < ranges[index][1]:\n            break\n    \n    # Find the index of the element\n    l = i\n    r = i + 1\n    while r <= len(arr):\n        if arr[l] < ranges[index][1] and arr[r] > ranges[index][0]:\n            break\n        if arr[l] >= ranges[index][0] and arr[r] < ranges[index][1]:\n            l += 1\n            r += 1\n        if r > len(arr):\n            break\n    \n    # Now find the right most element in the array\n    if arr[l] < ranges[index][0] and arr[r] > ranges[index][1]:\n        return l\n    else:\n        return r\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    new_arr = []\n    for i in range(len(arr)-1):\n        if index == i :\n            new_arr.append(arr[i])\n        if i%2 == 1 :\n            new_arr.append(arr[i])\n        if i%2 == 0 :\n            new_arr.append(arr[i+1])\n    return new_arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(ranges) :\n        return False\n    #print(\"indices = \",ranges,rotations,index)\n    #print(\"ranges = \",ranges[index],rotations,index)\n    if ranges[index] == -1 : # if ranges is empty\n        return False\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    x,y,z = ranges\n    if (rotations!= 0) :\n        x,y,z = x - rotations, y - rotations, z - rotations\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = 0\n    for i in range(len(ranges)):\n        if ranges[i] <= index <= ranges[i+1]:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Verification : must be more than 1.\n    if rotations == 0 :\n        if arr[index] >= ranges[0] :\n            return arr[index]\n        elif arr[index] < ranges[1] :\n            return arr[index] + ranges[1]\n        else :\n            return arr[index] - ranges[0]\n    \n    # Verification : must be more than 1.\n    elif rotations > 0 :\n        if arr[index] >= ranges[0] :\n            return arr[index]\n        elif arr[index] < ranges[1] :\n            return arr[index] - ranges[0]\n        else :\n            return arr[index] + ranges[1]\n    \n    # Verification : must be less than 0.\n    else :\n        return arr[index] - ranges[1]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(rotations == 0) : \n        if(ranges[index][1] == 0) : \n            return arr[ranges[index][0]]\n        else : \n            return arr[ranges[index][0]][ranges[index][1]] \n    \n    x = ranges[index][0]\n    y = ranges[index][1]\n    \n    z = x\n    for i in range(rotations - 1) : \n        if(z < arr.shape[0] - 1) : \n            if(y == 0) : \n                z = z + 1\n            else : \n                z = z + arr[z][arr[z + 1][y]]\n        elif(z == arr.shape[0] - 1) : \n            z = z + 1\n            y = 0\n        else : \n            z = arr[z + 1][y]\n            y = 0\n    \n    if(z == arr.shape[0] - 1) : \n        if(y == 0) : \n            z = z - 1\n        else : \n            z = z - arr[z][arr[z - 1][y]]\n    else : \n        z = arr[z][y]\n    \n    if(x == 0) : \n        x = arr.shape[0] - 1\n    else : \n        x = arr[x][y]\n    \n    return arr[x][z]\n    \ndef find_Rotation(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find rotations from a given index after number of rotations.\n    '''\n    if(rotations == 0) : \n        if(ranges[index][1] == 0) : \n            return arr[ranges[index][0]]\n        else : \n            return arr[ranges[index][0]][ranges[index][1]] \n    \n    x = ranges[index][0]\n    y = ranges[index][1]\n    z = x\n    for i in range(rotations - 1) : \n        if(z < arr.shape[0] - 1) : \n            if(y == 0) : \n                z = z + 1\n            else : \n                z = z + arr[z][arr[z + 1][y]]\n        elif(z == arr.shape[0] - 1) : \n            z = z + 1\n            y = 0\n        else : \n            z = arr[z + 1][y]\n            y = 0\n    if(z == arr.shape[0] - 1) : \n        if(y == 0) : \n            z = z - 1\n        else : \n            z = z - arr[z][arr[z - 1][y]]\n    else : \n        z = arr[z][y]\n    \n    if(x == 0) : \n        x = arr.shape[0] - 1\n    else : \n        x = arr[x][y]\n    \n    return arr[x][z]\n    \ndef find_Rotations(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find rotations from a given index after number of rotations.\n    '''\n    if(rotations == 0) : \n        if(ranges[index][1] == 0) : \n            return arr[ranges[index][0]]\n        else : \n            return arr[ranges[index][0]][ranges[index][1]] \n    \n    x = ranges[index][0]\n    y = ranges[index][1]\n    z = x\n    for i in range(rotations - 1) : \n        if(z < arr.shape[0] - 1) : \n            if(y == 0) : \n                z = z + 1\n            else : \n                z = z + arr[z][arr[z + 1][y]]\n        elif(z == arr.shape[0] - 1) : \n            z = z + 1\n            y = 0\n        else : \n            z = arr[z + 1][y]\n            y = 0\n    if(z == arr.shape[0] - 1) : \n        if(y == 0) : \n            z = z - 1\n        else : \n            z = z - arr[z][arr[z - 1][y]]\n    else : \n        z = arr[z][y]\n    \n    if(x == 0) : \n        x = arr.shape[0] - 1\n    else : \n        x = arr[x][y]\n    \n    return arr[x][z]\n    \ndef split_list(array) : \n    '''\n    Write a python function to split a list into segments of given size.\n    '''\n    return array[0:int(len(array)/2)]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (len(arr) <= 2) : \n        if (rotations < 0) : \n            rotations = -rotations \n            index += 1\n        else :\n            return arr[index]\n    else : \n        # Check for 1st element and find last element\n        index += 1\n        for i in range(len(arr)-1) : \n            if (arr[i] == arr[i+1]) : \n                index += 1\n                arr[i+1] = arr[i] \n                arr[i] = arr[i+1] \n        # Check if rotated element is available \n        if (rotations > 0) : \n            rotations = -rotations \n            index += rotations \n        else : \n            # Return the element \n            return arr[index]\n        # Check if rotated element is available \n        if (rotations > 0) : \n            # Check for 2nd element and find last element\n            index += rotations\n            for i in range(len(arr)-1) : \n                if (arr[i] == arr[i+1]) : \n                    index += 1\n                    arr[i+1] = arr[i] \n                    arr[i] = arr[i+1] \n            return arr[index]\n        # Check if rotated element is available \n        if (rotations < 0) : \n            return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for r in ranges :\n        # Find a range\n        if r[0] <= index and index < r[1] :\n            # If the range is inside the array, we know it is in the array\n            if arr[index] >= r[0] and arr[index] <= r[1] :\n                # If it is in the array, return the index and element \n                if arr[index] == r[0] : return index,arr[index]\n            # Else, we need to rotate the range\n            else :\n                rot = (r[1] - r[0]) // (r[1] - r[0])\n                # Apply the rotated range\n                for i in range(rot) :\n                    # If the range is inside the array\n                    if arr[index] >= r[0] and arr[index] <= r[1] :\n                        # If the range is inside the array, we know it is in the array\n                        if arr[index] == r[0] : return index,arr[index]\n                        # Else, we need to rotate the range\n                        else :\n                            rot = (r[1] - r[0]) // (r[1] - r[0])\n                            # Apply the rotated range\n                            for j in range(rot) :\n                                # If the range is inside the array\n                                if arr[index] >= r[0] and arr[index] <= r[1] :\n                                    # If the range is inside the array, we know it is in the array\n                                    if arr[index] == r[0] : return index,arr[index]\n                                    # Else, we need to rotate the range\n                                    else :\n                                        # Return the index and element\n                                        return index,arr[index]\n                                # Else, we need to rotate the range\n                                else :\n                                    # Return the index and element\n                                    return index,arr[index]\n    # If the element is not found, we return -1\n    return -1\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0] + \"p\" + \" \".join(words[1:])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    output = []\n    for word in words:\n        if word[0] == 'p':\n            output.append(word[1:])\n    return output\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, 'p'\n    return 'No p found', 'no'\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.endswith('p'):\n            return word, 'p'\n    return 'No p found', 'no'\ndef remove_p(words):\n    '''\n    Write a function to return a list of words with only letters that start with 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\ndef start_with_is(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'is'.\n    '''\n    for word in words:\n        if word.startswith('is'):\n            return word, 'is'\n    return 'No is found', 'no'\ndef end_with_is(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'is'.\n    '''\n    for word in words:\n        if word.endswith('is'):\n            return word, 'is'\n    return 'No is found', 'no'\ndef remove_is(words):\n    '''\n    Write a function to return a list of words with only letters that start with 'is'.\n    '''\n    return [word for word in words if word.endswith('is')]\ndef end_with_no(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'no'.\n    '''\n    for word in words:\n        if word.endswith('no'):\n            return word, 'no'\n    return 'No no found', 'no'\ndef remove_no(words):\n    '''\n    Write a function to return a list of words with only letters that start with 'no'.\n    '''\n    return [word for word in words if word.endswith('no')]\ndef end_with_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.endswith('p'):\n            return word, 'p'\n    return 'No p found', 'no'\ndef remove_p(words):\n    '''\n    Write a function to return a list of words with only letters that start with 'p'.\n    '''\n    return [word for word in words if word.endswith('p')]\ndef remove_isp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'isp'.\n    '''\n    for word in words:\n        if word.endswith('isp'):\n            return word, 'isp'\n    return 'No isp found', 'no'\ndef remove_isp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'isp'.\n    '''\n    for word in words:\n        if word.endswith('isp'):\n            return word, 'isp'\n    return 'No isp found', 'no'\ndef remove_ispp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'isppp'.\n    '''\n    for word in words:\n        if word.endswith('isppp'):\n            return word, 'isppp'\n    return 'No isppp found', 'no'\ndef remove_isppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'isppp'.\n    '''\n    for word in words:\n        if word.endswith('isppp'):\n            return word, 'isppp'\n    return 'No isppp found', 'no'\ndef remove_pisp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'pisp'.\n    '''\n    for word in words:\n        if word.endswith('pisp'):\n            return word, 'pisp'\n    return 'No pisp found', 'no'\ndef remove_pisp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'pisp'.\n    '''\n    for word in words:\n        if word.endswith('pisp'):\n            return word, 'pisp'\n    return 'No pisp found', 'no'\ndef remove_isppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'ispppp'.\n    '''\n    for word in words:\n        if word.endswith('ispppp'):\n            return word, 'ispppp'\n    return 'No ispppp found', 'no'\ndef remove_isppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'ispppp'.\n    '''\n    for word in words:\n        if word.endswith('ispppp'):\n            return word, 'ispppp'\n    return 'No ispppp found', 'no'\ndef remove_pispp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'pisppp'.\n    '''\n    for word in words:\n        if word.endswith('pisppp'):\n            return word, 'pisppp'\n    return 'No pisppp found', 'no'\ndef remove_pispp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'pisppp'.\n    '''\n    for word in words:\n        if word.endswith('pisppp'):\n            return word, 'pisppp'\n    return 'No pisppp found', 'no'\ndef remove_pisppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'pisppp'.\n    '''\n    for word in words:\n        if word.endswith('pisppp'):\n            return word, 'pisppp'\n    return 'No pisppp found', 'no'\ndef remove_pisppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'pisppp'.\n    '''\n    for word in words:\n        if word.endswith('pisppp'):\n            return word, 'pisppp'\n    return 'No pisppp found', 'no'\ndef remove_isppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'isppp'.\n    '''\n    for word in words:\n        if word.endswith('isppp'):\n            return word, 'isppp'\n    return 'No ispppp found', 'no'\ndef remove_isppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'isppp'.\n    '''\n    for word in words:\n        if word.endswith('isppp'):\n            return word, 'isppp'\n    return 'No ispppp found', 'no'\ndef remove_ispppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'isppp'.\n    '''\n    for word in words:\n        if word.endswith('isppp'):\n            return word, 'isppp'\n    return 'No ispppp found', 'no'\ndef remove_isppppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'isppp'.\n    '''\n    for word in words:\n        if word.endswith('isppp'):\n            return word, 'isppp'\n    return 'No ispppp found', 'no'\ndef remove_pisppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'pisppp'.\n    '''\n    for word in words:\n        if word.endswith('pisppp'):\n            return word, 'pisppp'\n    return 'N"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef end_withp(words):\n    '''\n    Write a function that returns a list of words with the following rules:\n    A word is a palindrome if it has the form 'p' followed by 'a'.\n    A word is a palindrome if it has the form 'p' followed by 'r' followed by 'a'.\n    '''\n    pass\ndef is_palindrome(words):\n    '''\n    Write a function that returns True if and only if the given string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #WRITE CODE HERE\n    p = words[0]\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    t1 = re.findall(r'^p[0-9]+',words)\n    t2 = re.findall(r'[0-9]+$',words)\n    if t1 == t2:\n        return [t1[0]] + t2\n    return t1\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_index = words.index(\"p\")\n    return words[p_index + 1], words[p_index]\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    q_index = words.index(\"q\")\n    return words[q_index - 1], words[q_index]\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p_index = words.index(\"p\")\n    return words[p_index + 1], words[p_index]\ndef end_withq(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'q'.\n    '''\n    q_index = words.index(\"q\")\n    return words[q_index + 1], words[q_index]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0][0:3]\ndef get_possible_palindrome(word):\n    '''\n    Write a function to find the possible palindrome of a given word.\n    '''\n    return word[1:]\ndef get_possible_palindromes(words):\n    '''\n    Write a function to find all the possible palindromes of a given list of words.\n    '''\n    all_possible = []\n    for word in words:\n        all_possible.append(get_possible_palindrome(word))\n    return all_possible\ndef check_word(word, possible_words):\n    '''\n    Write a function to check if a given word is a palindrome.\n    '''\n    for i in range(len(word)):\n        if word[i]!= possible_words[i][0]:\n            return False\n    return True\ndef search_palindromes(words, possible_words):\n    '''\n    Write a function to check if a given word is a palindrome.\n    '''\n    for word in possible_words:\n        if check_word(word, words):\n            print(f'{word} is a palindrome!')\n            return word\n    print(f'{word} is not a palindrome!')\n    return word\ndef search_palindromes_by_prefix(words, possible_words):\n    '''\n    Write a function to check if a given word is a palindrome.\n    '''\n    prefix = []\n    for word in possible_words:\n        prefix.append(word[0:len(word)])\n    for word in words:\n        if check_word(word, possible_words):\n            print(f'{prefix} is a palindrome!')\n            return word\n    print(f'{prefix} is not a palindrome!')\n    return word\ndef search_palindromes_by_suffix(words, possible_words):\n    '''\n    Write a function to check if a given word is a palindrome.\n    '''\n    suffix = []\n    for word in possible_words:\n        suffix.append(word[len(word)::])\n    for word in words:\n        if check_word(word, possible_words):\n            print(f'{suffix} is a palindrome!')\n            return word\n    print(f'{suffix} is not a palindrome!')\n    return word\ndef read_word(words, possible_words):\n    '''\n    Write a function that reads a word from a given list of words.\n    '''\n    word = words[0]\n    possible_word = []\n    for word in possible_words:\n        possible_word.append(word[0:len(word)])\n    if word == \"\":\n        print(f'{word} is empty!')\n        return word\n    else:\n        if word in possible_word:\n            print(f'{word} is a palindrome!')\n            return word\n        else:\n            print(f'{word} is not a palindrome!')\n            return word\ndef word_checker_by_prefix(words, possible_words):\n    '''\n    Write a function that reads a word from a given list of words.\n    '''\n    word = words[0]\n    if word == \"\":\n        print(f'{word} is empty!')\n        return word\n    prefix = []\n    for word in possible_words:\n        prefix.append(word[0:len(word)])\n    if word in prefix:\n        print(f'{prefix} is a palindrome!')\n        return word\n    else:\n        print(f'{prefix} is not a palindrome!')\n        return word\ndef word_checker_by_suffix(words, possible_words):\n    '''\n    Write a function that reads a word from a given list of words.\n    '''\n    word = words[0]\n    if word == \"\":\n        print(f'{word} is empty!')\n        return word\n    suffix = []\n    for word in possible_words:\n        suffix.append(word[len(word)::])\n    if word in suffix:\n        print(f'{suffix} is a palindrome!')\n        return word\n    else:\n        print(f'{suffix} is not a palindrome!')\n        return word\ndef find_all_possible_palindromes(words):\n    '''\n    Write a function to find all the possible palindromes of a given list of words.\n    '''\n    all_possible = []\n    for word in words:\n        all_possible.append(word[1:])\n    return all_possible\ndef find_all_possible_palindromes_by_prefix(words, possible_words):\n    '''\n    Write a function to find all the possible palindromes of a given list of words.\n    '''\n    all_possible = []\n    for word in possible_words:\n        all_possible.append(word[0:len(word)])\n    return all_possible\ndef find_all_possible_palindromes_by_suffix(words, possible_words):\n    '''\n    Write a function to find all the possible palindromes of a given list of words.\n    '''\n    all_possible = []\n    for word in possible_words:\n        all_possible.append(word[len(word)::])\n    return all_possible\ndef find_all_possible_palindromes_by_prefix_suffix(words, possible_words):\n    '''\n    Write a function to find all the possible palindromes of a given list of words.\n    '''\n    all_possible = []\n    for word in possible_words:\n        all_possible.append(word[0:len(word)])\n    return all_possible\ndef palindrome_checker(words):\n    '''\n    Write a function to check if a given word is a palindrome.\n    '''\n    for word in words:\n        if word == word[::-1]:\n            print(f'{word} is a palindrome!')\n            return word\n    print(f'{word} is not a palindrome!')\n    return word\ndef palindrome_checker_by_prefix(words, possible_words):\n    '''\n    Write a function to check if a given word is a palindrome.\n    '''\n    for word in possible_words:\n        if word[0:len(word)][::-1] == word[::-1]:\n            print(f'{word} is a palindrome!')\n            return word\n    print(f'{word} is not a palindrome!')\n    return word\ndef palindrome_checker_by_suffix(words, possible_words):\n    '''\n    Write a function to check if a given word is a palindrome.\n    '''\n    for word in possible_words:\n        if word[len(word)::][::-1] == word[::-1]:\n            print(f'{word} is a palindrome!')\n            return word\n    print(f'{word} is not a palindrome!')\n    return word\ndef palindrome_checker_by_prefix_suffix(words, possible_words):\n    '''\n    Write a function to check if a given word is a palindrome.\n    '''\n    for word in possible_words:\n        if word[0:len(word)][::-1] == word[::-1]:\n            print(f'{word} is a palindrome!')\n            return word\n    print(f'{word} is not a palindrome!')\n    return word\ndef get_words_with_possible_palindromes(words):\n    '''\n    Write a function to return all words in a given list of words\n    that have only 2 possible palindromes of the same length.\n    '''\n    all_words = []\n    for word in words:\n        possible_words = words[:len(word)]\n        all_words.append(possible_words)\n    return all_words\ndef get_words_with_possible_palindromes_by_prefix(words, possible_words):"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    lst = list(words)\n    start = \"\"\n    for i in lst:\n        if i == \"p\":\n            start = i\n    return start\n    \n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == n:\n        return a[index]\n    \n    max_sum_increasing_subseq = a[index]\n    k = max(k, index + 1)\n    \n    for i in range(index + 1, n, 1):\n        max_sum_increasing_subseq = max(max_sum_increasing_subseq + a[i], a[i])\n        \n        if k >= i:\n            k = k - i\n            max_sum_increasing_subseq = max(max_sum_increasing_subseq, max_sum_increasing_subseq + a[i])\n            \n    return max_sum_increasing_subseq\n    \n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    left = 0\n    right = index\n    \n    # checks if we have reached the end of the array\n    while left < right:\n        # find the current minimum element\n        mid = (left+right)//2\n        \n        # update the maximum\n        if a[mid] == 0:\n            left = mid+1\n            continue\n        \n        # if the current element is smaller than the element at mid, we move to right\n        if a[mid] < a[left]:\n            left = mid+1\n            continue\n            \n        # if the current element is greater than the element at mid, we move to left\n        if a[mid] > a[right]:\n            right = mid\n            continue\n        \n        # add the minimum element to the left subsequence\n        if mid < n-1:\n            left = mid+1\n            a[mid] = a[left]\n            \n        # add the minimum element to the right subsequence\n        if mid < n-1:\n            right = mid-1\n            a[mid] = a[right]\n            \n    # we have found the end of the array\n    # return the maximum value\n    return a[n-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return max(a[:k], default = 0)\n    if k == n - index:\n        return max(a[:k], default = 0) + a[k]\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    \ndef max_sum_increasing_subseq_alt(a, n, k):\n    '''\n    This function is the same as above but can be used to find the maximum sum of decreasing subsequence until the last index.\n    '''\n    if k == n - index:\n        return a[index]\n    if k > n - index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max_sum_increasing_subseq_alt(a, n, k + 1)\n        \ndef max_sum_decreasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of decreasing subsequence till the given index and also including a given kth element which is after index and also including a given kth element which is before it.\n    '''\n    if index == n:\n        return a[index]\n    if k == index - index:\n        return a[index] + a[k]\n    return max_sum_decreasing_subseq(a, n, index + 1, k + 1)\n    \ndef max_sum_decreasing_subseq_alt(a, n, index, k):\n    '''\n    This function is the same as above but can be used to find the maximum sum of decreasing subsequence till the given index.\n    '''\n    if k == index - index:\n        return a[index]\n    if k > index - index:\n        return max_sum_decreasing_subseq_alt(a, n, index + 1, k)\n    return max_sum_decreasing_subseq_alt(a, n, index + 1, k + 1"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum = 0\n    prev = 0\n    current = 0\n    k = k % n\n    if index <= 0 or index == n or k == 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    print('a:', a)\n    print('n:', n)\n    print('index:', index)\n    print('k:', k)\n    print()\n    if(n == 0 or index == 0):\n        return 0\n    if(a[index] <= a[index + 1]):\n        # if a[index] > a[index + 1]:\n        #     return max_sum_increasing_subseq(a, n - 1, index + 1, k)\n        return max_sum_increasing_subseq(a, n - 1, index + 1, k)\n    else:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = 0\n    i = 0\n    while i <= n:\n        if i == n and index == k:\n            return s + a[index]\n        \n        if i == 0:\n            s += a[i]\n        \n        else:\n            s += a[i] + max_sum_increasing_subseq(a, i+1, index, k)\n        \n        i += 1\n        \n    return s\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Initialize the maximum sum\n    res = 0\n    i = index\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    subseq = []\n    current_sum = 0\n    for i in range(0, index + 1):\n        if a[i] > current_sum:\n            current_sum = a[i]\n        if i > index:\n            current_sum = a[i]\n        subseq.append(a[i])\n    \n    if k > index:\n        return max(subseq[k:], key = lambda x : x + current_sum)\n    else:\n        return max(subseq[0:k], key = lambda x : x + current_sum)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return None\n    # print(tuplex[m-1:n])\n    if tuplex[m-1]=='$':\n        return None\n    else:\n        tuplex=tuplex[:m-1]+'$'+tuplex[m-1:]\n        # print(tuplex)\n        return colon_tuplex(tuplex,m,n)\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return None\n    # print(tuplex[m-1:n])\n    if tuplex[m-1]=='$':\n        return None\n    else:\n        tuplex=tuplex[:m-1]+'$'+tuplex[m-1:]\n        # print(tuplex)\n        return colon_tuple(tuplex,m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(tuplex[i][n:])\n    return tuple(l)\ndef colon_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef vino(m,n,p):\n    '''\n    Write a function to get a vino of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef vino_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a vino of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef vect(m,n,p):\n    '''\n    Write a function to get a vino of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef vect_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a vino of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_col(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_column(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_column_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_column_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_column_col(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_col_column(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_column_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_column_col(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_column_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_column_col(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_col_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_col_col(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_col_col_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_column_column(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_column_column_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_column_column(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    return tuple(l)\ndef massa_column_column_tuplex(col_tuplex,m,n):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(col_tuplex[i][n:])\n    return tuple(l)\ndef massa_column_column_col(m,n,p):\n    '''\n    Write a function to get a massa of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        l.append(p[i][n:])\n    retur"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    def recur_col(col):\n        if col == m:\n            return n\n        return col + recur_col(m)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m-1,-1,-1):\n        result.append(tuplex[i][n])\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    i = 0\n    j = 0\n    m = m[:]\n    n = n[:]\n    while i < m:\n        while j < n:\n            m[i] = tuplex[i][j]\n            j += 1\n        i += 1\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)==0:\n        return(0,0)\n    else:\n        #Initialize the first value of the colon\n        colon_value = m[0]\n        i = 1\n        #Go through the tuple\n        #Create a list for the values\n        tuple_value = []\n        for value in tuplex[0]:\n            #Add the value to the list\n            tuple_value.append(value)\n        \n        #Create a new list\n        new_list = []\n        #Go through each of the values\n        for value in tuple_value:\n            #If the list is not empty\n            if value!= m[i]:\n                #Add the tuple to the new list\n                new_list.append(value)\n            #Increment the index\n            i += 1\n        #Add the new list to the colon\n        colon_value = colon_tuplex(tuplex=new_list,m=tuple_value,n=n)\n        return colon_value\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # You can assume the first value is the smaller value\n    # and the second value is the larger.\n    return [tuplex[0][n],tuplex[1][n]]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if not tuplex[m-1] == n:\n        return tuplex\n    return colon_tuplex(tuplex[0:m-1]+tuplex[m:n],m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)!= 2 or m > n:\n        raise ValueError(\"Invalid size of tuple: {0}\".format(len(tuplex)))\n    return tuplex[0:m] + (tuplex[m:n] + [0])[::-1]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m=list(m)\n    n=list(n)\n    for i in range(len(m)):\n        m[i]=int(m[i])\n    for i in range(len(n)):\n        n[i]=int(n[i])\n    return '.'.join([str(x) for x in m])+'.'+'.'.join([str(x) for x in n])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    m = N\n    nums = []\n    i = 0\n    j = 0\n    val = 0\n    while i < len(nums1):\n        num = nums1[i]\n        j = j + 1\n        while j < len(nums2):\n            val += (num * nums2[j])\n            j = j + 1\n        nums.append(val)\n        val = 0\n        i = i + 1\n    sorted_nums = sorted(nums, reverse=True)\n    m = N\n    tot = 0\n    m = N\n    for num in nums:\n        if tot <= m:\n            tot = tot + num\n            m = m - 1\n    print(tot)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    temp = [[0, 0] for i in range(N)]\n    \n    # sorting the two lists\n    nums1.sort()\n    nums2.sort()\n    \n    # checking if the list are same size\n    if len(nums1)!= len(nums2):\n        return 'numbers are not the same size'\n    \n    # Initializing two variables\n    index = 0\n    index2 = 0\n    \n    # Initializing the product to zero\n    product = 0\n    \n    # Initializing the maximum of the product in the two lists\n    maximum = -1\n    \n    # for loop to select the first two elements\n    while index < N:\n        product = nums1[index] * nums2[index2]\n        temp[index][0] = product\n        \n        if product > maximum:\n            maximum = product\n        \n        if product > N:\n            return 'None'\n        \n        index += 1\n        index2 += 1\n        \n    return str(maximum)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # select the maximum product of nums1 and nums2\n    max_product = -1\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if (max_product == -1 or nums1[i]*nums2[j] > max_product):\n                max_product = nums1[i]*nums2[j]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from math import gcd\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        result.append(list(map(lambda x: x * nums2[i], nums1)))\n    for i in range(N-1, -1, -1):\n        result[i] = list(map(lambda x: x * nums1[i], result[i]))\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Base Case\n    if len(nums1) < 1:\n        return []\n    if len(nums2) < 1:\n        return []\n    \n    # Sort lists\n    nums1.sort()\n    nums2.sort()\n    \n    # Initialize product\n    product = []\n    \n    # Loop through all numbers and multiply their product together\n    # (loop invariant)\n    for i in range(N):\n        product.append(nums1[i]*nums2[i])\n        \n    # Sort product and return the index of the first largest product\n    product.sort()\n    return product\n    "
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for num1 in nums1:\n        for num2 in nums2:\n            curr = num1 * num2\n            if curr == N:\n                res.append([num1, num2])\n                continue\n            if curr < N:\n                continue\n            if curr > N:\n                continue\n            if num1 == num2:\n                continue\n            if curr < num2:\n                continue\n            if curr > num1:\n                continue\n            res.append([num1, num2])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    count = 0\n    nums = nums1 + nums2\n    nums.sort(reverse = True)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    i=0\n    j=0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i]>nums2[j]:\n                nums1[i], nums2[j] = nums2[j], nums1[i]\n    while N>=0:\n        if N==0:\n            return 0\n        if N==1:\n            return 1\n        elif N==2:\n            return 2\n        elif N>2:\n            k=2\n            while k<=N:\n                if nums1[k]*nums2[i]>=k:\n                    break\n                k+=1\n        N-=1\n    if nums1[i]>nums2[j]:\n        nums1[i], nums2[j] = nums2[j], nums1[i]\n    i+=1\n    j+=1\n    return i,j\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = 0\n    if a>b:\n        max = a\n    elif b>a:\n        max = b\n    else:\n        max = a\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(f'Maximum of {a} is {b}')\n    else:\n        print(f'Maximum of {b} is {a}')\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(b == 0):\n        return a\n    return maximum(a,b-1)\n    \ndef minimum(a,b): \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(b == 0):\n        return a\n    return minimum(a,b-1)\n    \ndef power(a,b):\n    '''\n    Write a python function to calculate a**b.\n    '''\n    if(b == 0):\n        return 1\n    return power(a,b-1)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # write your code here\n    if a>b:\n        return a\n    return b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    c = max(a,b)\n    return c\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    c=a+b\n    if(c>a and c>b):\n        return c\n    elif(c==a or c==b):\n        return c\n    else:\n        return a\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    c=a+b\n    if(c<a and c<b):\n        return c\n    elif(c==a or c==b):\n        return c\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n    \n    \n    \ndef sum(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\n    \n    \n    \ndef product(a,b):   \n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a*b\n    \n    \ndef factorial(n):   \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==1:\n        return 1\n    return n*factorial(n-1)\n    \n    \n    \ndef modulo(a,b):   \n    '''\n    Write a python function to find the modulo of two numbers.\n    '''\n    return a%b\n    \n    \n    \ndef pow(a,b):   \n    '''\n    Write a python function to find the power of two number.\n    '''\n    return a**b\n    \n    \ndef cal(a,b):   \n    '''\n    Write a python function to calculate the absolute value of two numbers.\n    '''\n    return abs(a-b)\n    \n    \n    \ndef floor(a,b):   \n    '''\n    Write a python function to calculate the floor value of two numbers.\n    '''\n    return a//b\n    \n    \ndef ceil(a,b):   \n    '''\n    Write a python function to calculate the ceil value of two numbers.\n    '''\n    return a//b\n    \n    \n    \ndef sqrt(a):   \n    '''\n    Write a python function to calculate the square root of a number.\n    '''\n    return pow(a,0.5)\n    \n    \n    \ndef mod(a,b):   \n    '''\n    Write a python function to calculate the modulo of two numbers.\n    '''\n    return a%b\n    \n    \n    \ndef remainder(a,b):   \n    '''\n    Write a python function to calculate the remainder of two numbers.\n    '''\n    return a%b\n    \n    \n    \ndef floordiv(a,b):   \n    '''\n    Write a python function to calculate the floor division of two numbers.\n    '''\n    return a//b\n    \n    \n    \ndef ceildiv(a,b):   \n    '''\n    Write a python function to calculate the ceil division of two numbers.\n    '''\n    return a//b\n    \n    \n    \n    \ndef greater(a,b):   \n    '''\n    Write a python function to calculate the greater of two numbers.\n    '''\n    return b>a\n    \n    \n    \ndef less(a,b):   \n    '''\n    Write a python function to calculate the less of two numbers.\n    '''\n    return b<a\n    \n    \n    \ndef greater_equal(a,b):   \n    '''\n    Write a python function to calculate the greater equal of two numbers.\n    '''\n    return b>a\n    \n    \n    \ndef less_equal(a,b):   \n    '''\n    Write a python function to calculate the less equal of two numbers.\n    '''\n    return b<a\n    \n    \n    \ndef equal(a,b):   \n    '''\n    Write a python function to calculate the equal of two numbers.\n    '''\n    return a==b\n    \n    \n    \ndef print_function(a,b):   \n    '''\n    Write a python function to print the values of two numbers.\n    '''\n    print(a)\n    print(b)\n    \n    \n    \n    \ndef n_times(a,b):   \n    '''\n    Write a python function to find the number of times a given number is repeated.\n    '''\n    return a*b\n    \n    \n    \ndef add(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\n    \n    \n    \ndef minus(a,b):   \n    '''\n    Write a python function to find the difference of two numbers.\n    '''\n    return a-b\n    \n    \n    \ndef mult(a,b):   \n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a*b\n    \n    \n    \ndef mod_n(a,b):   \n    '''\n    Write a python function to find the modulo of two numbers.\n    '''\n    return a%b\n    \n    \n    \ndef modulo_n(a,b):   \n    '''\n    Write a python function to find the modulo of two numbers.\n    '''\n    return a%b\n    \n    \n    \ndef exp(a,b):   \n    '''\n    Write a python function to find the exponential of two numbers.\n    '''\n    return a**b\n    \n    \n    \ndef mod_exp(a,b):   \n    '''\n    Write a python function to find the modulo of two numbers.\n    '''\n    return a%b\n    \n    \n    \ndef pow_exp(a,b):   \n    '''\n    Write a python function to find the power of two of two numbers.\n    '''\n    return a**b\n    \n    \n    \ndef mod_pow_exp(a,b):   \n    '''\n    Write a python function to find the modulo of two numbers.\n    '''\n    return a%b\n    \n    \n    \ndef idiv(a,b):   \n    '''\n    Write a python function to calculate the integer division of two numbers.\n    '''\n    return a//b\n    \n    \n    \ndef pow_idiv(a,b):   \n    '''\n    Write a python function to calculate the power of two integer division of two numbers.\n    '''\n    return a**b\n    \n    \n    \ndef mod_pow_idiv(a,b):   \n    '''\n    Write a python function to calculate the modulo of two numbers.\n    '''\n    return a%b\n    \n    \n    \ndef s_to_u(a,b):   \n    '''\n    Write a python function to convert from base 10 to base 2.\n    '''\n    return a+b\n    \n    \n    \ndef u_to_s(a,b):   \n    '''\n    Write a python function to convert from base 2 to base 10.\n    '''\n    return a-b\n    \n    \n    \ndef m_to_u(a,b):   \n    '''\n    Write a python function to convert from base 10 to base 2.\n    '''\n    return a*b\n    \n    \n    \ndef u_to_m(a,b):   \n    '''\n    Write a python function to convert from base 2 to base 10.\n    '''\n    return a//b\n    \n    \n    \ndef n_to_u(a,b):   \n    '''\n    Write a python function to convert from base 10 to base 2.\n    '''\n    return a%b\n    \n    \n    \ndef u_to_n(a,b):   \n    '''\n    Write a python function to convert from base 2 to base 10.\n    '''\n    return a//b\n    \n    \n    \ndef print_list(a):   \n    '''\n    Write a python function to print all the elements of a list.\n    '''\n    for i in a:\n        print(i)\n    \n    \n    \n    \ndef flatten(a):   \n    '''\n    Write a python function to flatten a list.\n    '''\n    out = []\n    for i in a:\n        if isinstance(i,list):\n            out.extend(flatten(i))\n        else:\n            out.append(i)\n    return out\n    \n    \n    \ndef flatten_2(a):   \n    '''\n    Write a python function to flatten a list.\n    '''\n    out = []\n    for i in a:\n        if isinstance(i"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_list = list(str1)\n    new_tuple = tuple(str_list)\n    return new_tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = ()\n    for i in range(len(str1)):\n        tup = tup + (chr(ord('a')+i))\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower() # lower case\n    tuple1 = tuple(str1) # convert string to tuple of letters\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # loop through the string\n    tuple = ()\n    for char in str1:\n        # check if character is a letter\n        if char.isalpha():\n            # add to tuple\n            tuple += (char,)\n        else:\n            # add a space\n            tuple += (char,)\n    return tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple = tuple(str1)\n    return tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if str1 is None:\n        return None\n    if type(str1) is not str:\n        return None\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & 0xFF\n    return n | 0x80\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n > 0:\n        b = n & -n\n        if b:\n            print('Left most unset bit is'+ str(n))\n            return\n        n = n >> 1"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    binary = format(n, 'b').zfill(8) # convert to binary\n    \n    if binary == '1':\n        return '0' # return 0 if bit is set\n    elif binary == '0':\n        return '1' # return 1 if bit is set\n    else:\n        raise Exception('Invalid binary format, bit must be 0 or 1.')\n    \n    \n    \n    \ndef find_unset_bit(n): \n    '''\n    Write a python function to find the unset bit.\n    '''\n    \n    binary = format(n, 'b').zfill(8) # convert to binary\n    \n    if binary == '1':\n        return '0' # return 0 if bit is set\n    elif binary == '0':\n        return '1' # return 1 if bit is set\n    else:\n        raise Exception('Invalid binary format, bit must be 0 or 1.')\n    \n    \n    \ndef get_left_most_unset_bit(n): \n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    \n    binary = format(n, 'b').zfill(8) # convert to binary\n    \n    if binary == '1':\n        return '1' # return 1 if bit is set\n    elif binary == '0':\n        return '0' # return 0 if bit is set\n    else:\n        raise Exception('Invalid binary format, bit must be 1 or 0.')\n    \n    \n    \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = n & 0b11111111\n    n &= 0b11111111\n    if bit == 0b110010000:\n        n |= 0b10011\n    if bit == 0b11111110:\n        n |= 0b10111\n    if bit == 0b11111101:\n        n |= 0b10001\n    if bit == 0b11110000:\n        n |= 0b10100\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Your code here\n    return (1 << n) - 1\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # YOUR CODE HERE\n    if (n & 0x80)!= 0:\n        n = n | 0x80\n    if (n & 0x40)!= 0:\n        n = n | 0x40\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 0\n    "
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (1 << (n.bit_length() - 1)) \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Your code here\n    lst = []\n    for i in range(1,n+1):\n        if (i & 1) == 0:\n            lst.append(i)\n        else:\n            lst.append(0)\n    lst.reverse()\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            lst[i] = 1\n    return lst\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (n - 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n - 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the bit for an integer.\n    '''\n    n = n | (1 << i)\n    print(n)\n    return n\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n = n | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bits(n):\n    '''\n    Write a python function to set the bits for an integer.\n    '''\n    n = (n >> 1) | (n << 1)\n    print(n)\n    return n\n    \n    \ndef set_bit(n, i):\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = h*r*math.pi*2\n    return volume\n    \ndef area_of_square(side):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return side*side\n    \ndef surface_area_of_triangle(base,height):\n    '''\n    Write a function that calculates the surface area of a triangle.\n    '''\n    area = base*height/2\n    return area\n    \ndef volume_of_cube(side):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    volume = side*side*math.pi\n    return volume\n    \ndef area_of_cube(side):\n    '''\n    Write a function that calculates the area of a cube.\n    '''\n    area = side*side\n    return area\n    \ndef area_of_rhombus(side1,side2):\n    '''\n    Write a function that calculates the area of a rhombus.\n    '''\n    return side1*side2*math.pi\n    \ndef volume_of_rhombus(side1,side2):\n    '''\n    Write a function that calculates the volume of a rhombus.\n    '''\n    volume = side1*side2*math.pi\n    return volume\n    \ndef main():\n    print('What is the radius of a cone?')\n    r = input()\n    print('What is the height of the cone?')\n    h = input()\n    \n    print('What is the volume of a cone?')\n    print('Enter \"volume\" if you want to calculate the volume of a cone.')\n    print('Enter \"area\" if you want to calculate the area of a cone.')\n    print('Enter \"surface_area\" if you want to calculate the surface area of a cone.')\n    print('Enter \"volume_cone\" if you want to calculate the volume of a cone.')\n    print('Enter \"area_of_square\" if you want to calculate the area of a square.')\n    print('Enter \"volume_of_cube\" if you want to calculate the volume of a cube.')\n    print('Enter \"area_of_rhombus\" if you want to calculate the area of a rhombus.')\n    print('Enter \"volume_of_rhombus\" if you want to calculate the volume of a rhombus.')\n    print('What is the length?')\n    length = input()\n    \n    print('What is the width?')\n    width = input()\n    \n    print('What is the height?')\n    height = input()\n    \n    print('What is the area?')\n    print('Enter \"volume\" if you want to calculate the volume of a cone.')\n    print('Enter \"area\" if you want to calculate the area of a cone.')\n    print('Enter \"surface_area\" if you want to calculate the surface area of a cone.')\n    print('Enter \"volume_cone\" if you want to calculate the volume of a cone.')\n    print('Enter \"area_of_square\" if you want to calculate the area of a square.')\n    print('Enter \"volume_of_cube\" if you want to calculate the volume of a cube.')\n    print('Enter \"area_of_rhombus\" if you want to calculate the area of a rhombus.')\n    print('Enter \"volume_of_rhombus\" if you want to calculate the volume of a rhombus.')\n    \n    \n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n    print('Enter \"triangle\" if you want to calculate the type of a triangle.')\n    print('Enter \"rhombus\" if you want to calculate the type of a rhombus.')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    print('What is the type of cone?')\n    print('Enter \"cone\" if you want to calculate the type of a cone.')\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return h*math.pi*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r**2)) * (math.tan(math.radians(h)))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 4/3 * (math.pi)**3 * (r**3) * (h/2)**2\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r ** 2) * (math.tan(math.radians(h/2)))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 0\n    t = 2*math.pi*r\n    if h < t:\n        print \"Volume cannot be calculated because height is less than the radius of the cone\"\n        return v\n    else:\n        for x in range(h,t,h):\n            v = v + (x**4)\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**3 * math.tan(math.pi/3 * h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Define area\n    area = 4*math.pi*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*h*math.pi*(math.pow(math.pow(r,2)-r,2)+math.pow(h,2))*math.pow(math.pow(h,2)-math.pow(r,2),2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    c = 2 * math.pi * r**2\n    h = h**2\n    v = c / h\n    return v\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power=0\n    for i in range(1, n+1):\n        if i<=n:\n            power+=1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    for i in range(2, n + 1): \n        if n % i == 0: \n            count += 1 \n    if count == 2: \n        return n\n    else: \n        return 'No such prime number'\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 2\n    while n!= power:\n        if n & power:\n            break\n        power += 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # your code here\n    \n    # the nth largest power of 2 is 1^(n - 1)\n    \n    # convert to string \n    result = str(pow(n,2))\n    # print(result)\n    \n    # convert to int\n    result = int(result)\n    # print(result)\n    \n    # you need to return the result. \n    # this is an example of a loop\n    \n    # loop through each number\n    for i in range(1,result+1):\n        # check if i is 2 or 4\n        if i % 2 == 0 or i % 4 == 0:\n            # if i is even, keep adding\n            # until it's not even\n            # and return its result\n            \n            # note that the first and last numbers are the same, so return the largest value\n            # for example:\n            # if n is 2 then the largest is 2\n            # if n is 4 then the largest is 4\n            return i\n    \n    # if n is not a power of two, return 0\n    return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2: \n        return n \n    else: \n        return highest_Power_of_2(n//2) \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n >= 2:\n        if n%2 == 0:\n            return n\n        n = n//2\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n, 1, -1):\n            if i < n:\n                return i * i\n    return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    k = n\n    while k:\n        k = k // 2\n        if k > n:\n            return k\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return -1\n    else:\n        if n <= 2:\n            return 1\n        else:\n            return n*highest_Power_of_2(n//2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return highest_Power_of_2(n-1) + 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==1 or n==2:\n        return n\n    if n==3:\n        return 3\n    return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    \n    if n == 1: \n        return 0\n    \n    elif n == 2: \n        return 1\n    \n    elif n % 2 == 0: \n        return n - 1\n    \n    else: \n        return n - 2\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 5\n    if n == 4: \n        return 11\n    if n == 5: \n        return 34\n    if n == 6: \n        return 65\n    if n == 7: \n        return 129\n    if n == 8: \n        return 214\n    if n == 9: \n        return 3729\n    if n == 10: \n        return 71321\n    if n == 11: \n        return 1204345\n    if n == 12: \n        return 9825807\n    if n == 13: \n        return 99411349\n    if n == 14: \n        return 57162867\n    if n == 15: \n        return 914742347\n    if n == 16: \n        return 327353535\n    if n == 17: \n        return 2586756546\n    if n == 18: \n        return 82314823\n    if n == 19: \n        return 8074583\n    if n == 20: \n        return 4134795\n    if n == 21: \n        return 294577095\n    if n == 22: \n        return 801206989\n    if n == 23: \n        return 6958247\n    if n == 24: \n        return 488694747\n    if n == 25: \n        return 611586047\n    if n == 26: \n        return 149548587\n    if n == 27: \n        return 828621645\n    if n == 28: \n        return 959182925\n    if n == 29: \n        return 17270911\n    if n == 30: \n        return 1428485327\n    if n == 31: \n        return 7063425283\n    if n == 32: \n        return 9474872399\n    if n == 33: \n        return 34595713\n    if n == 34: \n        return 577737910\n    if n == 35: \n        return 140738871\n    if n == 36: \n        return 59924358\n    if n == 37: \n        return 13228069\n    if n == 38: \n        return 809531243\n    if n == 39: \n        return 64765088\n    if n == 40: \n        return 487054699\n    if n == 41: \n        return 481828291\n    if n == 42: \n        return 685231594\n    if n == 43: \n        return 23431186\n    if n == 44: \n        return 7761958\n    if n == 45: \n        return 826017417\n    if n == 46: \n        return 5781235\n    if n == 47: \n        return 826732746\n    if n == 48: \n        return 44990988\n    if n == 49: \n        return 57189635\n    if n == 50: \n        return 922281555\n    if n == 51: \n        return 8649980\n    if n == 52: \n        return 1078437\n    if n == 53: \n        return 54765475\n    if n == 54: \n        return 34349545\n    if n == 55: \n        return 12162987\n    if n == 56: \n        return 99836071\n    if n == 57: \n        return 564986096\n    if n == 58: \n        return 6529258\n    if n == 59: \n        return 715785975\n    if n == 60: \n        return 4546717\n    if n == 61: \n        return 5534035\n    if n == 62: \n        return 5122314\n    if n == 63: \n        return 5122710\n    if n == 64: \n        return 89848357\n    if n == 65: \n        return 2924765\n    if n == 66: \n        return 6830780\n    if n == 67: \n        return 5164914\n    if n == 68: \n        return 14843969\n    if n == 69: \n        return 66852874\n    if n == 70: \n        return 7295092\n    if n == 71: \n        return 140878987\n    if n == 72: \n        return 889090909\n    if n == 73: \n        return 9596537\n    if n == 74: \n        return 67534375\n    if n == 75: \n        return 231308\n    if n == 76: \n        return 73216834\n    if n == 77: \n        return 9331278\n    if n == 78: \n        return 17103045\n    if n == 79: \n        return 74351715\n    if n == 80: \n        return 1418085\n    if n == 81: \n        return 76006465\n    if n == 82: \n        return 8502047\n    if n == 83: \n        return 1829948\n    if n == 84: \n        return 89821\n    if n == 85: \n        return 4676006\n    if n == 86: \n        return 5622459\n    if n == 87: \n        return 7462435\n    if n == 88: \n        return 36299\n    if n == 89: \n        return 4\n    if n == 90: \n        return 6\n    if n == 91: \n        return 5\n    if n == 92: \n        return 402623\n    if n == 93: \n        return 513125\n    if n == 94: \n        return 147873341\n    if n == 95: \n        return 68640\n    if n == 96: \n        return 22739\n    if n == 97: \n        return 3\n    if n == 98: \n        return 7\n    if n == 99: \n        return 16\n    if n == 100: \n        return 6\n    if n == 101: \n        return 7\n    if n == 102: \n        return 18\n    if n == 103: \n        return 5\n    if n == 104: \n        return 4\n    if n == 105: \n        return 10\n    if n == 106: \n        return 13\n    if n == 107: \n        return 17\n    if n == 108: \n        return 12\n    if n == 109: \n        return 8\n    if n == 110: \n        return 13\n    if n == 111: \n        return 9\n    if n == 112: \n        return 7\n    if n == 113: \n        return 10\n    if n == 114: \n        return 9\n    if n == 115: \n        return 11\n    if n == 116: \n        return 16\n    if n == 117: \n        return 9\n    if n == 118: \n        return 19\n    if n == 119: \n        return 15\n    if n == 120: \n        return 11\n    if n == 121: \n        return 13\n    if n == 122: \n        return 12\n    if n == 123: \n        return 14\n    if n == 124: \n        return 11\n    if n == 125: \n        return 12\n    if n == 126: \n        return 7\n    if n == 127: \n        return 12\n    if n == 128: \n        return 9\n    if n == 129: \n        return 7\n    if n == 130: \n        return 11\n    if n == 131: \n        return 9\n    if n == 132: \n        return 12\n    if n == 133: \n        return 14\n    if n == 134: \n        return 10\n    if n == 135: \n        return 13\n    if n == 136: \n        return 9\n    if n == 137: \n        return 5\n    if n == 138: \n        return 12\n    if n == 139: \n        return 10\n    if n == 140: \n        return 13\n    if n == 141: \n        return 11\n    if n == 142: \n        return 14\n    if n == 143: \n        return 9\n    if n == 144: \n        return 11\n    if n == 145: \n        return 12\n    if n == 146: \n        return 10\n    if n == 147: \n        return 13\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_arr = [1, 2, 3, 5, 8, 13]\n    for i in range(4, n+1):\n        lucas_arr[i] = lucas_arr[i - 1] + lucas_arr[i - 2] + lucas_arr[i - 3]\n    return lucas_arr[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_num = {\n        1: 1,\n        2: 1,\n        3: 2,\n        4: 4,\n        5: 8,\n        6: 12,\n        7: 21,\n        8: 32,\n        9: 48,\n        10: 64,\n        11: 81,\n        12: 96,\n        13: 120,\n        14: 144,\n        15: 169,\n        16: 200,\n        17: 224,\n        18: 240,\n        19: 256,\n        20: 272,\n        21: 288,\n        22: 324,\n        23: 360,\n        24: 400,\n        25: 464,\n        26: 480,\n        27: 512,\n        28: 528,\n        29: 616,\n        30: 630,\n        31: 648,\n        32: 660,\n        33: 720,\n        34: 784,\n        35: 816,\n        36: 832,\n        37: 848,\n        38: 864,\n        39: 900,\n        40: 1024,\n        41: 1280,\n        42: 1436,\n        43: 1632,\n        44: 1728,\n        45: 2048,\n        46: 2216,\n        47: 2240,\n        48: 2352,\n        49: 2384,\n        50: 2480,\n        51: 2560,\n        52: 2624,\n        53: 2640,\n        54: 2736,\n        55: 2792,\n        56: 3056,\n        57: 3072,\n        58: 3136,\n        59: 3232,\n        60: 3436,\n        61: 3456,\n        62: 3632,\n        63: 3728,\n        64: 3744,\n        65: 3800,\n        66: 3864,\n        67: 3920,\n        68: 3968,\n        69: 4160,\n        70: 4264,\n        71: 4336,\n        72: 4312,\n        73: 4448,\n        74: 4608,\n        75: 4624,\n        76: 4640,\n        77: 4664,\n        78: 4792,\n        79: 4864,\n        80: 4896,\n        81: 4912,\n        82: 4976,\n        83: 5020,\n        84: 5040,\n        85: 5080,\n        86: 5120,\n        87: 5200,\n        88: 5456,\n        89: 5512,\n        90: 5568,\n        91: 5584,\n        92: 5808,\n        93: 5992,\n        94: 6144,\n        95: 6272,\n        96: 6336,\n        97: 6432,\n        98: 6480,\n        99: 6496,\n        100: 6512,\n        101: 6548,\n        102: 6572,\n        103: 6600,\n        104: 6664,\n        105: 6720,\n        106: 6736,\n        107: 6792,\n        108: 6864,\n        109: 6880,\n        110: 6912,\n        111: 6928,\n        112: 6944,\n        113: 6952,\n        114: 7024,\n        115: 7040,\n        116: 7058,\n        117: 7104,\n        118: 7168,\n        119: 7184,\n        120: 7208,\n        121: 7232,\n        122: 7240,\n        123: 7256,\n        124: 7288,\n        125: 7364,\n        126: 7400,\n        127: 7464,\n        128: 7496,\n        129: 7520,\n        130: 7536,\n        131: 7572,\n        132: 7608,\n        133: 7624,\n        134: 7648,\n        135: 7672,\n        136: 7712,\n        137: 7728,\n        138: 7744,\n        139: 7952,\n        140: 7824,\n        141: 7840,\n        142: 7856,\n        143: 7884,\n        144: 7888,\n        145: 7904,\n        146: 7936,\n        147: 7944,\n        148: 7960,\n        149: 7996,\n        150: 8016,\n        151: 8032,\n        152: 8048,\n        153: 8072,\n        154: 8128,\n        155: 8144,\n        156: 8160,\n        157: 8176,\n        158: 8192,\n        159: 8208,\n        160: 8216,\n        161: 8224,\n        162: 8240,\n        163: 8256,\n        164: 8272,\n        165: 8288,\n        166: 8304,\n        167: 8320,\n        168: 8352,\n        169: 8384,\n        170: 8400,\n        171: 8464,\n        172: 8480,\n        173: 8496,\n        174: 8512,\n        175: 8528,\n        176: 8544,\n        177: 8552,\n        178: 8608,\n        179: 8624,\n        180: 8640,\n        181: 8656,\n        182: 8672,\n        183: 8720,\n        184: 8736,\n        185: 8744,\n        186: 8792,\n        187: 8808,\n        188: 8824,\n        189: 8840,\n        190: 8856,\n        191: 8896,\n        192: 8912,\n        193: 8928,\n        194: 8944,\n        195: 8992,\n        196: 9032,\n        197: 9048,\n        198: 9072,\n        199: 9078,\n        200: 9114,\n        201: 9120,\n        202: 9136,\n        203: 9152,\n        204: 9168,\n        205: 9184,\n        206: 9200,\n        207: 9216,\n        208: 9224,\n        209: 9232,\n        210: 9248,\n        211: 9264,\n        212: 9300,\n        213: 9328,\n        214: 9336,\n        215: 9352,\n        216: 9384,\n        217: 9400,\n        218: 9456,\n        219: 9472,\n        220: 9488,\n        221: 9512,\n        222: 9528,\n        223: 9556,\n        224: 9564,\n        225: 9600,\n        226: 9616,\n        227: 9632,\n        228: 9648,\n        229: 9672,\n        230: 9680,\n        231: 9688,\n        232: 9704,\n        233: 9720,\n        234: 9728,\n        235: 9744,\n        236: 9760,\n        237: 9776,\n        238: 9792,\n        239: 9824,\n        240: 9840,\n        241: 9856,\n        242: 9872,\n        243: 9878,\n        244: 9904,\n        245: 9916,\n        246: 9932,\n        247: 9948,\n        248: 9972,\n        249: 9992,\n        250: 9998,\n        251: 10016,\n        252: 10032,\n        253: 10048,\n        254: 10064,\n        255: 10080,\n        256: 10096,\n        257: 10152,\n        258: 10176,\n        259: 10192,\n        260: 10208,\n        261: 10224,\n        262: 10240,\n        263: 10256,\n        264: 10272,\n        265: 10288,\n        266: 10304,\n        267: 10320,\n        268: 10336,\n        269: 10344,\n        270: 10352,\n        271: 10380,\n        272: 10368,\n        273: 10384,\n        274: 10400,\n        275: 10416,\n        276: 10432,\n        277: 10448,\n        278: 10464,\n        279: 10600,\n        280: 10648,\n        281: 10624,\n        282: 10640,\n        283: 10680,\n        284: 10688,\n        285: 10704,\n        286: 10720,\n        287: 10736,\n        288: 10752,\n        289: 10800,\n        290: 10816,\n        291: 10"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = -2 * n\n    if x == 0:\n        x = 1\n    if x == 1:\n        x = -1\n    if x == 2:\n        x = 2\n    return "
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 0\n    if n == 0:\n        return lucas\n    for i in range(2,n+1):\n        if (n-i)%2:\n            lucas = (lucas + 1)\n        else:\n            if i%2 == 0:\n                lucas = lucas - 1\n            else:\n                lucas = lucas - 1\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    for i in range(2, n + 1):\n        lucas = lucas * i\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: return n\n    if n <= 3: \n        return 1\n    return find_lucas(n-1) + find_lucas(n-2) + find_lucas(n-3) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 2 or n == 3: \n        return n \n    if n == 4: \n        return 3 \n    if n == 5: \n        return 4 \n    if n == 6: \n        return 5 \n    if n == 7: \n        return 6 \n    if n == 8: \n        return 7 \n    if n == 9: \n        return 8 \n    if n == 10: \n        return 9 \n    if n == 11: \n        return 10 \n    if n == 12: \n        return 11 \n    if n == 13: \n        return 12 \n    if n == 14: \n        return 13 \n    if n == 15: \n        return 14 \n    if n == 16: \n        return 15 \n    if n == 17: \n        return 16 \n    if n == 18: \n        return 17 \n    if n == 19: \n        return 18 \n    if n == 20: \n        return 19 \n    if n == 21: \n        return 20 \n    if n == 22: \n        return 21 \n    if n == 23: \n        return 22 \n    if n == 24: \n        return 23 \n    if n == 25: \n        return 24 \n    if n == 26: \n        return 25 \n    if n == 27: \n        return 26 \n    if n == 28: \n        return 27 \n    if n == 29: \n        return 28 \n    if n == 30: \n        return 29 \n    if n == 31: \n        return 30 \n    if n == 32: \n        return 31 \n    if n == 33: \n        return 32 \n    if n == 34: \n        return 33 \n    if n == 35: \n        return 34 \n    if n == 36: \n        return 35 \n    if n == 37: \n        return 36 \n    if n == 38: \n        return 37 \n    if n == 39: \n        return 38 \n    if n == 40: \n        return 39 \n    if n == 41: \n        return 40 \n    if n == 42: \n        return 41 \n    if n == 43: \n        return 42 \n    if n == 44: \n        return 43 \n    if n == 45: \n        return 44 \n    if n == 46: \n        return 45 \n    if n == 47: \n        return 46 \n    if n == 48: \n        return 47 \n    if n == 49: \n        return 48 \n    if n == 50: \n        return 49 \n    if n == 51: \n        return 50 \n    if n == 52: \n        return 51 \n    if n == 53: \n        return 52 \n    if n == 54: \n        return 53 \n    if n == 55: \n        return 54 \n    if n == 56: \n        return 55 \n    if n == 57: \n        return 56 \n    if n == 58: \n        return 57 \n    if n == 59: \n        return 58 \n    if n == 60: \n        return 59 \n    if n == 61: \n        return 60 \n    if n == 62: \n        return 61 \n    if n == 63: \n        return 62 \n    if n == 64: \n        return 63 \n    if n == 65: \n        return 64 \n    if n == 66: \n        return 65 \n    if n == 67: \n        return 66 \n    if n == 68: \n        return 67 \n    if n == 69: \n        return 68 \n    if n == 70: \n        return 69 \n    if n == 71: \n        return 70 \n    if n == 72: \n        return 71 \n    if n == 73: \n        return 72 \n    if n == 74: \n        return 73 \n    if n == 75: \n        return 74 \n    if n == 76: \n        return 75 \n    if n == 77: \n        return 76 \n    if n == 78: \n        return 77 \n    if n == 79: \n        return 78 \n    if n == 80: \n        return 79 \n    if n == 81: \n        return 80 \n    if n == 82: \n        return 81 \n    if n == 83: \n        return 82 \n    if n == 84: \n        return 83 \n    if n == 85: \n        return 84 \n    if n == 86: \n        return 85 \n    if n == 87: \n        return 86 \n    if n == 88: \n        return 87 \n    if n == 89: \n        return 88 \n    if n == 90: \n        return 89 \n    if n == 91: \n        return 90 \n    if n == 92: \n        return 91 \n    if n == 93: \n        return 92 \n    if n == 94: \n        return 93 \n    if n == 95: \n        return 94 \n    if n == 96: \n        return 95 \n    if n == 97: \n        return 96 \n    if n == 98: \n        return 97 \n    if n == 99: \n        return 98 \n    if n == 100: \n        return 99 \n    if n == 101: \n        return 100 \n    if n == 102: \n        return 101 \n    if n == 103: \n        return 102 \n    if n == 104: \n        return 103 \n    if n == 105: \n        return 104 \n    if n == 106: \n        return 105 \n    if n == 107: \n        return 106 \n    if n == 108: \n        return 107 \n    if n == 109: \n        return 108 \n    if n == 110: \n        return 109 \n    if n == 111: \n        return 110 \n    if n == 112: \n        return 111 \n    if n == 113: \n        return 112 \n    if n == 114: \n        return 113 \n    if n == 115: \n        return 114 \n    if n == 116: \n        return 115 \n    if n == 117: \n        return 116 \n    if n == 118: \n        return 117 \n    if n == 119: \n        return 118 \n    if n == 120: \n        return 119 \n    if n == 121: \n        return 120 \n    if n == 122: \n        return 121 \n    if n == 123: \n        return 122 \n    if n == 124: \n        return 123 \n    if n == 125: \n        return 124 \n    if n == 126: \n        return 125 \n    if n == 127: \n        return 126 \n    if n == 128: \n        return 127 \n    if n == 129: \n        return 128 \n    if n == 130: \n        return 129 \n    if n == 131: \n        return 130 \n    if n == 132: \n        return 131 \n    if n == 133: \n        return 132 \n    if n == 134: \n        return 133 \n    if n == 135: \n        return 134 \n    if n == 136: \n        return 135 \n    if n == 137: \n        return 136 \n    if n == 138: \n        return 137 \n    if n == 139: \n        return 138 \n    if n == 140: \n        return 139 \n    if n == 141: \n        return 140 \n    if n == 142: \n        return 141 \n    if n == 143: \n        return 142 \n    if n == 144: \n        return 143 \n    if n == 145: \n        return 144 \n    if n == 146: \n        return 145 \n    if n == 147: \n        return 146 \n    if n == 148: \n        return 147 \n    if n == 149: \n        return 148 \n    if n == 150: \n        return 149 \n    if n == 151: \n        return 150 \n    if n == 152: \n        return 151 \n    if n == 153: \n        return 152 \n    if n == 154: \n        return 153 \n    if n == 155: \n        return 154 \n    if n == 156: \n        return 155 \n    if n == 157: "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_2 = []\n    if string.count('{')!= 0:\n        list_2 = list_\n        list_ = []\n        list_ = list(str(list_))\n        list_ = list_[:-len(string.count('{'))]\n    else:\n        list_2 = list_\n        list_ = []\n        list_ = list_2\n        list_ = list_[:list_.index(string)+1]\n    for i in list_:\n        list_2.append(i)\n    return list_2\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    try:\n        list_ = list(map(str, string.split()))\n        return list_\n    except:\n        return list_\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        print(f\"{element}\", end='')\n        if string!= '{':\n            print(' ', end='')\n    print()\n    \ndef add_string_recursive(list_, string):\n    '''\n    Write a function that applies the format string to all of the elements in a list recursively.\n    '''\n    if string == '{':\n        list_[0] = f\"{list_[0]} \"\n    if string!= '{':\n        for i in range(len(list_)):\n            if list_[i] == '{':\n                add_string_recursive(list_[:i], string)\n                list_[i] = f\"{list_[i]} \"\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string is None:\n        return\n    #if the string is not a string, make it a list\n    if type(string)!= str:\n        string = str(string)\n    #if string is a string\n    if string.find('{')!= -1 or string.find('}')!= -1:\n        #split string into two strings\n        string_1 = string.split('{')\n        string_2 = string.split('}')\n        #print(string_1)\n        #print(string_2)\n        #check if they're equal\n        if string_1 == string_2:\n            #check if they're equal\n            list_.extend(string_1)\n        #if they're not equal\n        else:\n            #add to list\n            list_.extend(string_1)\n            #add to list\n            list_.extend(string_2)\n    #if string is not a list\n    else:\n        string = string.split(';')\n        for string_element in string:\n            #check if the element is a list\n            if type(string_element) == str:\n                #make the element a list\n                string_element = string_element.split('{')\n                #print(string_element)\n                #print(string_element[0])\n                #check if they're equal\n                if string_element == string_element[0]:\n                    #add to list\n                    list_.extend(string_element)\n                #if they're not equal\n                else:\n                    #add to list\n                    list_.extend(string_element)\n                    #add to list\n                    #add to list\n                    #print(string_element)\n                    #print(string_element[0])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        list_[index] = list_[index].format(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == \"\":\n        return\n    \n    for i in range(len(string)):\n        list_.append(string[i].upper())\n        list_.append(string[i].lower())\n        list_.append(string[i].capitalize())\n    \n    return\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        item = string.format(item)\n        list_.append(item)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(0, len(list_)):\n        list_[index] = list_[index].format(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index, item in enumerate(list_):\n        list_[index] = item.format(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # TO DO\n    return\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {}\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            dict[l2[l1[i]]] = l3[i]\n    return dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    converted_dict = {}\n    for element in l1:\n        converted_dict[element] = {}\n        for i in l2:\n            converted_dict[element][i] = l3[i]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for el in l1:\n        if el not in res:\n            res[el] = {}\n        if not el in res[el]:\n            res[el][el] = l2[l2.index(el)]\n        else:\n            res[el][el] = l3[l3.index(el)]\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for i, l in enumerate(l1):\n        res[i] = {}\n        for k, v in enumerate(l2):\n            res[i][k] = v\n    for i, l in enumerate(l3):\n        res[i] = {}\n        for k, v in enumerate(l2):\n            res[i][k] = v\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in l1:\n        result[i] = {}\n        for j in l2:\n            result[i][j] = {}\n            for k in l3:\n                result[i][j][k] = l1[i][j][k]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for item in l1:\n        d[item] = []\n        for subitem in l2:\n            d[item].append(subitem)\n    for item in l3:\n        d[item] = l3[item]\n    return d\n    \ndef read_yaml_file():\n    '''\n    Read a yaml file.\n    '''\n    file_name = 'data.yaml'\n    try:\n        with open(file_name) as f:\n            data = yaml.load(f, Loader=yaml.FullLoader)\n    except FileNotFoundError:\n        data = {}\n    except yaml.YAMLError as exc:\n        print(exc)\n    return data\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dict = {}\n    l2_dict = {}\n    l3_dict = {}\n    for i in l1:\n        if i in l1_dict:\n            l1_dict[i] += 1\n        else:\n            l1_dict[i] = 1\n    for i in l2:\n        if i in l2_dict:\n            l2_dict[i] += 1\n        else:\n            l2_dict[i] = 1\n    for i in l3:\n        if i in l3_dict:\n            l3_dict[i] += 1\n        else:\n            l3_dict[i] = 1\n    return l1_dict, l2_dict, l3_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #pass\n    def convert_list_to_dict(l1, l2, l3):\n        #the dictionary to store the values\n        output = {}\n        for index in range(len(l1)):\n            output[l1[index]] = l2[index]\n        return output\n    return convert_list_to_dict(l1, l2, l3)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)==1 and len(l2)==1 and len(l3)==1:\n        return l3\n    elif len(l1)==len(l2) and len(l2)==1 and len(l3)==1:\n        return {'%s%s'%(l1[0],l3[0]):l3[1],'%s%s'%(l1[0],l3[0]):l3[1]}\n    elif len(l1)==len(l2) and len(l2)==1 and len(l3)==1:\n        if l1[0]==l3[0]:\n            return {'%s%s'%(l1[0],l3[0]):l3[1],'%s%s'%(l1[0],l3[0]):l3[1]}\n        else:\n            return {'%s%s'%(l1[0],l3[0]):l3[0]}\n    elif len(l2)==1 and len(l1)==len(l3):\n        if l1[0]==l3[0]:\n            return {'%s%s'%(l1[0],l3[0]):l3[1],'%s%s'%(l1[0],l3[0]):l3[1]}\n        else:\n            return {'%s%s'%(l1[0],l3[0]):l3[0]}\n    else:\n        return None\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Validate inputs\n    if not isinstance(l1, list):\n        raise TypeError('Input 1 must be a list')\n    if not isinstance(l2, list):\n        raise TypeError('Input 2 must be a list')\n    if not isinstance(l3, list):\n        raise TypeError('Input 3 must be a list')\n    \n    d1 = {'s':[l1[0]],'t':[l1[1]]}\n    for i in range(2, len(l2)+1):\n        if i%2==0:\n            d1['s'].append(l2[i-1])\n        else:\n            d1['t'].append(l2[i-1])\n    return d1"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = max(n)\n    for i in range(2,n+1):\n        f = max(f,n-i+i**2)\n    return f\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #Your code here\n    f = lambda n: max( (f(n/2), f(n/3), f(n/4), f(n/5)), n)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n\n    elif n == 3:\n        return n\n    elif n == 4:\n        return n\n    elif n == 5:\n        return n\n    elif n == 6:\n        return n\n    elif n == 7:\n        return n\n    elif n == 8:\n        return n\n    elif n == 9:\n        return n\n    elif n == 10:\n        return n\n    elif n == 11:\n        return n\n    elif n == 12:\n        return n\n    elif n == 13:\n        return n\n    elif n == 14:\n        return n\n    elif n == 15:\n        return n\n    else:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    k = 1\n    for i in range (2,n+1):\n        max_sum += f(i)\n        k += 1\n        if k > 5:\n            break\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Step #1: \n    # As we are only interested in numbers 1, 2, 3, 4, 5, this array will be created\n    # and the maximum possible sum will be stored in the variable max_sum\n    max_sum = n\n    \n    # Step #2:\n    # For each index i, find the maximum sum of f(i) = max(f(i / 2), f(i / 3), f(i / 4),..., f(i / 5)). \n    # Then we'll use the formula f(i) = (f(i / 2) + f(i / 3) + f(i / 4) +... + f(i / 5)) to calculate the maximum sum\n    for i in range(1, n):\n        # We'll assign the maximum sum to the variable max_sum\n        max_sum = max(max_sum, (f(i/2) + f(i/3) + f(i/4) +... + f(i/5)))\n    \n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = max(n//2, n//3, n//4, n//5)\n    return a*n + max(n//2, n//3, n//4, n//5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    numbers = []\n    for i in range (1,101):\n        numbers.append(i)\n    max = 0\n    for i in numbers:\n        max = max + i\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    l=max(input_list)\n    return l\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for value in input_list:\n        if len(value) > max_length:\n            max_length = len(value)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        print('Error: Invalid test tuple')\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check = True\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i]:\n            check = False\n    return check\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Compare tuple values\n    if len(set(test_tup)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0]!= test_tup[1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #print(test_tup)\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not any(tuple(sorted(test_tup)) == tuple(sorted(test_tup)) for test_tup in test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if type(test_tup)!= tuple:\n        return False\n    else:\n        return tuple(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # remove duplicates\n    test_tup = tuple(test_tup)\n    test_tup = tuple(set(test_tup))\n    if len(test_tup) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Traverse through all elements in tuple\n    for elem in test_tup:\n        # Check if any element appears again\n        if elem in test_tup:\n            # Return false if a duplicate is found\n            return False\n    # Return true if no duplicate occurs\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return list(str1.replace(str1.replace(\" \",\"\").replace(\"\\n\",\"\"),\"\").replace(\" \",\"\")).index(\"\")\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = dict()\n    for i in str1:\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n    for i in str1:\n        if i in count:\n            count[i] -= 1\n    if len(count) == 1:\n        return count.keys()[0]\n    else:\n        return '?'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str2 = \"\"\n    # your code here\n    for i in str1:\n        if not i in str2:\n            str2 += i\n    return str2\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == \"\":\n        return \"\"\n    elif len(str1) == 1:\n        return str1[0]\n    else:\n        for i in range(len(str1)):\n            if str1[i] == str1[i-1]:\n                return str1[i]\n        return \"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return list(str1.replace(' ','')).index(str1[0])+1\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # empty string\n    if(str1==\"\"):\n        return \"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1=str1.lower()\n    l=list(str1)\n    l.sort()\n    c=1\n    for i in l:\n        if l.count(i)>1:\n            break\n    else:\n        return c\n    if l.count(i)>1:\n        return l[l.index(i)+1]\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1_list = list(str1)\n    for i in range(len(str1_list)):\n        if str1_list[i] not in str1_list[i+1:]:\n            return str1_list[i]\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None \n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (len(string) == 0):\n        return False\n    \n    # For 2 char check\n    if len(string) == 2 and string[0] == string[1]:\n        return True\n    \n    return False\ndef validate(user, password):\n    '''\n    Write a function that will validate the input.\n    '''\n    if not re.search(regex, password):\n        return False\n    else:\n        return True\ndef count_valid(username, password):\n    '''\n    Write a function that will count the valid passwords.\n    '''\n    count = 0\n    for i in range(len(password)):\n        if(check_char(password[i]) and validate(username[i], password[i])):\n            count += 1\n    return count\ndef main():\n    '''\n    Write a function to get the user's input and return the user's input.\n    '''\n    print('Hello! Welcome to the Python Password Manager!\\n\\nEnter your username and password: ')\n    username = input()\n    password = input()\n    print('\\nYou entered', username, 'and', password)\n    if(count_valid(username, password) > 0):\n        print('The password is valid.')\n    else:\n        print('The password is invalid.')\n    while(True):\n        print('\\n\\nEnter 1 to add a new user.')\n        print('Enter 2 to search a user.')\n        print('Enter 3 to update an existing user.')\n        print('Enter 4 to delete an existing user.')\n        print('Enter 5 to exit.')\n        choice = input()\n        if choice == '1':\n            new_user = input('Enter the new user\\'s username: ')\n            new_pass = input('Enter the new user\\'s password: ')\n            file = open(username, 'a')\n            file.write(new_user + '\\n')\n            file.write(new_pass + '\\n')\n            file.close()\n            print('New user added!')\n        elif choice == '2':\n            file = open(username, 'r')\n            for line in file.readlines():\n                print(line)\n        elif choice == '3':\n            user_to_be_updated = input('Enter the user\\'s username: ')\n            user_to_be_updated_pass = input('Enter the user\\'s new password: ')\n            file = open(username, 'r')\n            for line in file.readlines():\n                if line == user_to_be_updated:\n                    file_to_be_updated = open(username, 'w')\n                    file_to_be_updated.write(user_to_be_updated_pass)\n                    print('Password updated!')\n                    break\n                else:\n                    print('Invalid username or password!')\n        elif choice == '4':\n            print('Delete existing user.')\n            user_to_be_deleted = input('Enter the user\\'s username: ')\n            file = open(username, 'r')\n            for line in file.readlines():\n                if line == user_to_be_deleted:\n                    file_to_be_deleted = open(username, 'r')\n                    file_to_be_deleted.close()\n                    print('User deleted!')\n                    break\n                else:\n                    print('Invalid username or password!')\n        elif choice == '5':\n            break\n        else:\n            print('Please enter a valid option.')\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0:1] == string[-1:-1]:\n        return True\n    else:\n        return False\ndef check_email(email):\n    '''\n    Write a function that checks whether the given email is correct or not.\n    '''\n    if (re.search(r'^[a-zA-Z0-9_\\-\\.]+@[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z0-9]{2,}$', email)):\n        return True\n    else:\n        return False\ndef check_url(url):\n    '''\n    Write a function that checks whether the given url is valid or not.\n    '''\n    if re.match(regex, url):\n        return True\n    else:\n        return False\ndef check_url_number(url):\n    '''\n    Write a function that checks whether the given url number is valid or not.\n    '''\n    if re.match(r'^[0-9]+$', url):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[-1] == string[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is None:\n        return False\n    else:\n        return True\n    \ndef check_sentence(sentence):\n    '''\n    Write a function to check whether the given sentence starts and ends with the same sentence or not.\n    '''\n    if re.match(r'^[a-zA-Z]+$', sentence) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #Write your code here\n    pass\n    #pass\n    #print(\"aaaa\")\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.find(string[0]) >= 0:\n        return True\n    else:\n        return False\ndef regex_string(string):\n    '''\n    Write a function to remove white spaces, convert the string to lower case and find the occurrence of same character.\n    '''\n    string = string.lower()\n    # if a string starts with white space,\n    # it is not a string and is not a aa or Aa\n    if string.find(string[0]) >= 0:\n        return False\n    else:\n        # if the string contains an upper case letter\n        # it should be not a string and is not an aa or Aa\n        if string.find(string[1].upper()) >= 0:\n            return False\n        else:\n            # if the string contains a lower case letter\n            # it should be not a string and is not an aa or Aa\n            if string.find(string[1].lower()) >= 0:\n                return False\n            else:\n                return True\ndef is_word_punctuation(string):\n    '''\n    Write a function that takes in a string and returns True if it contains the following words: punctuation and numbers: xxx\n    '''\n    punctuation = [\"'\", \".\", \",\", \"?\", \"!\", \":\", \";\", \":\", \"(\", \")\"]\n    # punctuation is a set of characters\n    if any(ch in string for ch in punctuation):\n        return True\n    else:\n        return False\ndef is_word_number(string):\n    '''\n    Write a function that takes in a string and returns True if it contains the following words: numbers and letters: xxx\n    '''\n    numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    # numbers is a set of characters\n    if any(ch in string for ch in numbers):\n        return True\n    else:\n        return False\ndef is_word_special(string):\n    '''\n    Write a function that takes in a string and returns True if it contains the following words: special and numbers: xxx\n    '''\n    special = ['!', '@', '#', '$', '%', '&', '\\'', '\"', '*', '(', ')', '-', '_', '+', '=', '{', '}', '.', ',', ':']\n    numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    # special is a set of characters\n    if any(ch in string for ch in special):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median1 = float(a) + float(b) + float(c)\n    median2 = float(a) - float(b)\n    median3 = float(a) - float(c)\n    \n    if len(a) == 3:\n        median1 = float(a) / 2\n        median2 = float(a) / 2\n        median3 = float(a) / 2\n    \n    if len(a) == 2:\n        median1 = float(a) / 2\n        median2 = float(a) / 2\n        median3 = float(a) / 2\n    \n    if len(a) == 1:\n        median1 = float(a)\n        median2 = float(a)\n        median3 = float(a)\n    \n    if len(a) == 0:\n        median1 = 0\n        median2 = 0\n        median3 = 0\n        \n    if len(a) % 2 == 0:\n        median1 = (a[int(len(a)/2)] + a[int(len(a)/2)-1]) / 2\n        median2 = (a[int(len(a)/2)] - a[int(len(a)/2)-1]) / 2\n        median3 = (a[int(len(a)/2)] + a[int(len(a)/2)-1]) / 2\n    else:\n        median1 = a[int(len(a)/2)]\n        median2 = a[int(len(a)/2)-1]\n        median3 = a[int(len(a)/2)]\n    \n    return [median1, median2, median3]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x=a+b+c\n    x=x//3\n    if x==0:\n        median=a\n    elif x==1:\n        median=b\n    elif x==2:\n        median=c\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) < 3:\n        return None\n    sorted_a = sorted(a)\n    sorted_b = sorted(b)\n    sorted_c = sorted(c)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # find the middle of three numbers\n    m = len(a)//2\n    # find the mean of three numbers\n    m_a = (a[m] + a[m-1])/2\n    m_b = (b[m] + b[m-1])/2\n    m_c = (c[m] + c[m-1])/2\n    # find the median of three numbers\n    return (m_a+m_b+m_c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # your code here\n    if len(a)==0:\n        a.append(0)\n    if len(b)==0:\n        b.append(0)\n    if len(c)==0:\n        c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    if len(a)<3:\n        a.append(a[0])\n    if len(b)<3:\n        b.append(b[0])\n    if len(c)<3:\n        c.append(c[0])\n    return (a[len(a)//2]+b[len(b)//2]+c[len(c)//2])/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if c==1:\n        if len(a)==2 and len(b)==2 and len(c)==2:\n            return (a[0]+b[0]+c[0])/3\n        else:\n            return None\n    if c==2:\n        if len(a)==3 and len(b)==3 and len(c)==3:\n            return (a[0]+b[0]+c[0])/3\n        else:\n            return None\n    if c==3:\n        if len(a)==4 and len(b)==4 and len(c)==4:\n            return (a[0]+b[0]+c[0]+c[1])/4\n        else:\n            return None\n    return None\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import math\n    m = (a+b+c)/2\n    if m > a:\n        if m > b:\n            if m > c:\n                return m\n            else:\n                return c\n        else:\n            return m\n    elif m < b:\n        if m < c:\n            return m\n        else:\n            return c\n    else:\n        return m\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    assert len(a) == 3\n    assert len(b) == 3\n    assert len(c) == 3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = (a+b+c)//3\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_median = ((a+b+c)/3)\n    return a_median\n    # median = (a+b+c)/2\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    total = 0\n    for num in nums:\n        total += num\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def convert_to_str(n):\n        string = \"\"\n        while n!= 0:\n            string = string + str(n % 10)\n            n //= 10\n        return string\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize a variable for sum\n    sum = 0\n    # iterate through each number in nums\n    for num in nums:\n        # add the number to the sum\n        sum += num\n    # return sum\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for n in nums:\n        sum_digits += int(n)\n    return sum_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # DO NOT MODIFY THE EXECUTABLE\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_res = []\n    for i in test_tup1:\n        bitwise_xor_res.append(i ^ test_tup2[i])\n    return bitwise_xor_res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check to see if the inputs are equal\n    if (test_tup1 is None) or (test_tup2 is None):\n        return None\n    # Check if the length of the tuples are equal\n    if (len(test_tup1)!= len(test_tup2)) or (len(test_tup1)!= 1) or (len(test_tup2)!= 1):\n        print(f\"Error: Length of inputs should be equal to 1\")\n        return None\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a1 = len(test_tup1)\n    a2 = len(test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    output = bitwise_xor_over_tuples(test_tup1, test_tup2)\n    \n    return output\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = bitwise_xor_arr(test_tup1[i], test_tup2[i])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Input tuples must be of equal length.')\n        return\n    for i in range(len(test_tup1)):\n        test_tup1[i] = int(test_tup1[i])\n        test_tup2[i] = int(test_tup2[i])\n    return test_tup1, test_tup2\n    "
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_value = 0\n    for index in range(0, len(test_tup1)):\n        bitwise_xor_value += test_tup1[index] * test_tup2[index]\n    return bitwise_xor_value\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (test_tup1[0] ^ test_tup1[1])\n    test_tup2 = (test_tup2[0] ^ test_tup2[1])\n    test_tup3 = (test_tup1[0] ^ test_tup2[1])\n    test_tup4 = (test_tup1[0] ^ test_tup2[0])\n    test_tup5 = (test_tup1[0] ^ test_tup2[1])\n    test_tup6 = (test_tup1[0] ^ test_tup2[0])\n    test_tup7 = (test_tup1[0] ^ test_tup2[0])\n    test_tup8 = (test_tup1[0] ^ test_tup2[0])\n    test_tup9 = (test_tup1[0] ^ test_tup2[1])\n    test_tup10 = (test_tup1[0] ^ test_tup2[0])\n    test_tup11 = (test_tup1[0] ^ test_tup2[1])\n    test_tup12 = (test_tup1[0] ^ test_tup2[0])\n    test_tup13 = (test_tup1[0] ^ test_tup2[1])\n    test_tup14 = (test_tup1[0] ^ test_tup2[0])\n    test_tup15 = (test_tup1[0] ^ test_tup2[0])\n    test_tup16 = (test_tup1[0] ^ test_tup2[0])\n    test_tup17 = (test_tup1[0] ^ test_tup2[1])\n    test_tup18 = (test_tup1[0] ^ test_tup2[0])\n    test_tup19 = (test_tup1[0] ^ test_tup2[1])\n    test_tup20 = (test_tup1[0] ^ test_tup2[0])\n    test_tup21 = (test_tup1[0] ^ test_tup2[1])\n    test_tup22 = (test_tup1[0] ^ test_tup2[0])\n    test_tup23 = (test_tup1[0] ^ test_tup2[1])\n    test_tup24 = (test_tup1[0] ^ test_tup2[0])\n    test_tup25 = (test_tup1[0] ^ test_tup2[0])\n    test_tup26 = (test_tup1[0] ^ test_tup2[1])\n    test_tup27 = (test_tup1[0] ^ test_tup2[0])\n    test_tup28 = (test_tup1[0] ^ test_tup2[1])\n    test_tup29 = (test_tup1[0] ^ test_tup2[0])\n    test_tup30 = (test_tup1[0] ^ test_tup2[0])\n    test_tup31 = (test_tup1[0] ^ test_tup2[1])\n    test_tup32 = (test_tup1[0] ^ test_tup2[0])\n    test_tup33 = (test_tup1[0] ^ test_tup2[1])\n    test_tup34 = (test_tup1[0] ^ test_tup2[0])\n    test_tup35 = (test_tup1[0] ^ test_tup2[1])\n    test_tup36 = (test_tup1[0] ^ test_tup2[0])\n    test_tup37 = (test_tup1[0] ^ test_tup2[1])\n    test_tup38 = (test_tup1[0] ^ test_tup2[0])\n    test_tup39 = (test_tup1[0] ^ test_tup2[0])\n    test_tup40 = (test_tup1[0] ^ test_tup2[1])\n    test_tup41 = (test_tup1[0] ^ test_tup2[0])\n    test_tup42 = (test_tup1[0] ^ test_tup2[1])\n    test_tup43 = (test_tup1[0] ^ test_tup2[0])\n    test_tup44 = (test_tup1[0] ^ test_tup2[1])\n    test_tup45 = (test_tup1[0] ^ test_tup2[0])\n    test_tup46 = (test_tup1[0] ^ test_tup2[1])\n    test_tup47 = (test_tup1[0] ^ test_tup2[0])\n    test_tup48 = (test_tup1[0] ^ test_tup2[0])\n    test_tup49 = (test_tup1[0] ^ test_tup2[1])\n    test_tup50 = (test_tup1[0] ^ test_tup2[0])\n    test_tup51 = (test_tup1[0] ^ test_tup2[1])\n    test_tup52 = (test_tup1[0] ^ test_tup2[0])\n    test_tup53 = (test_tup1[0] ^ test_tup2[1])\n    test_tup54 = (test_tup1[0] ^ test_tup2[0])\n    test_tup55 = (test_tup1[0] ^ test_tup2[1])\n    test_tup56 = (test_tup1[0] ^ test_tup2[0])\n    test_tup57 = (test_tup1[0] ^ test_tup2[1])\n    test_tup58 = (test_tup1[0] ^ test_tup2[0])\n    test_tup59 = (test_tup1[0] ^ test_tup2[1])\n    test_tup60 = (test_tup1[0] ^ test_tup2[0])\n    test_tup61 = (test_tup1[0] ^ test_tup2[1])\n    test_tup62 = (test_tup1[0] ^ test_tup2[0])\n    test_tup63 = (test_tup1[0] ^ test_tup2[1])\n    test_tup64 = (test_tup1[0] ^ test_tup2[0])\n    test_tup65 = (test_tup1[0] ^ test_tup2[1])\n    test_tup66 = (test_tup1[0] ^ test_tup2[0])\n    test_tup67 = (test_tup1[0] ^ test_tup2[1])\n    test_tup68 = (test_tup1[0] ^ test_tup2[0])\n    test_tup69 = (test_tup1[0] ^ test_tup2[1])\n    test_tup70 = (test_tup1[0] ^ test_tup2[0])\n    test_tup71 = (test_tup1[0] ^ test_tup2[1])\n    test_tup72 = (test_tup1[0] ^ test_tup2[0])\n    test_tup73 = (test_tup1[0] ^ test_tup2[1])\n    test_tup74 = (test_tup1[0] ^ test_tup2[0])\n    test_tup75 = (test_tup1[0] ^ test_tup2[1])\n    test_tup76 = (test_tup1[0] ^ test_tup2[0])\n    test_tup77 = (test_tup1[0] ^ test_tup2["
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # We only need to check if the tuples are of equal length\n    # Compare the length of the lists\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # We use a dictionary to store all the bits as key and their corresponding values as value\n    result = dict()\n    # For every bit we check if the corresponding bit of the tuple is 0 or 1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            result[test_tup1[i]] = test_tup2[i]\n        else:\n            result[test_tup1[i]] = test_tup2[i]\n    # We return the result\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    def bitwise_xor_calculation(test_tup1, test_tup2):\n        '''\n        Write a function to perform the mathematical bitwise xor operation across the given tuples.\n        '''\n        # Convert test_tup1 and test_tup2 to a 2d array\n        test_tup1_list = list(test_tup1)\n        test_tup2_list = list(test_tup2)\n        test_tup1_list[0] = int(test_tup1_list[0])\n        test_tup1_list[1] = int(test_tup1_list[1])\n        test_tup2_list[0] = int(test_tup2_list[0])\n        test_tup2_list[1] = int(test_tup2_list[1])\n        # Build the result\n        result = ''\n        for index in range(2):\n            if test_tup1_list[index]!= test_tup2_list[index]:\n                result = result + '1'\n            else:\n                result = result + '0'\n        return result\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in test_list:\n        unique_list.append(i)\n    unique_list = list(set(unique_list))\n    unique_list.sort()\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def count_unique(test_list):\n        '''\n        Count the number of unique tuples in the given list.\n        '''\n        return len(set(test_list))\n    \n    if test_list == []:\n        return 0\n    else:\n        return count_unique(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = {}\n    for i in test_list:\n        if i not in unique_list:\n            unique_list[i] = 1\n        else:\n            unique_list[i] += 1\n    return len(unique_list.values())\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        count += len(i)\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for i in test_list:\n        for j in i:\n            freq+=1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Loop through all the test files\n    for filename in test_list:\n        # Open the file\n        with open(filename, 'r') as file:\n            # For each file, read the lines\n            for line in file:\n                # Remove the leading and trailing whitespace\n                line = line.strip()\n                # Convert line to lower case\n                line = line.lower()\n                # Search for any words that contain numbers\n                for word in line.split():\n                    if word.isdigit():\n                        # Count the number of each word\n                        test_list.append(word)\n    # Return the number of unique tuples\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    total = 0\n    for item in test_list:\n        if type(item) is tuple:\n            total += 1\n    return total\n    \ndef main():\n    '''\n    Program that uses extract_freq function and display the number of tuples in the given list\n    '''\n    filename ='some_dataset.csv'\n    data = []\n    with open(filename) as file:\n        data = file.readlines()\n    print(extract_freq(data))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print(\"Checking list contents: \", test_list)\n    freq_dict = {}\n    for el in test_list:\n        if el in freq_dict:\n            freq_dict[el] += 1\n        else:\n            freq_dict[el] = 1\n    print(\"Frequency dictionary: \", freq_dict)\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Extract the number of tuples.\n    print(\"number of tuples in the test list: \", len(test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # TODO: modify to accept a tuple of tuples as input and perform an index wise addition of the tuples.\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Handle the trivial case\n    if len(test_tup1) == 1:\n        return test_tup1[0]\n    else:\n        return test_tup1[0] + add_nested_tuples(test_tup1[1], test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    return tup1 + tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l = []\n    for i in range(len(test_tup1)):\n        l.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        l.append(test_tup2[i])\n    print(l)\n    #print(test_tup1 + test_tup2)\n    sum = 0\n    for i in range(len(test_tup1)):\n        sum += test_tup1[i]\n    for i in range(len(test_tup2)):\n        sum += test_tup2[i]\n    print(sum)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1_index = test_tup1[0]\n    test_tup2_index = test_tup2[0]\n    print('----------------------------------------------------------------------------------------')\n    print('test_tup1_index: ', test_tup1_index)\n    print('test_tup2_index: ', test_tup2_index)\n    \n    if (test_tup1_index < test_tup2_index):\n        index = test_tup1_index\n        while(index < test_tup2_index):\n            test_tup1[index+1] += test_tup1[index]\n            index += 1\n    else:\n        index = test_tup2_index\n        while(index < test_tup1_index):\n            test_tup2[index+1] += test_tup2[index]\n            index += 1\n    \n    return (test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples(test_tup1, test_tup2):\n        '''\n        Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        def add_nested_tuples(test_tup1, test_tup2):\n            '''\n            Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n            '''\n            index = 0\n            if isinstance(test_tup1, tuple):\n                for i in range(len(test_tup1)):\n                    if isinstance(test_tup1[i], tuple):\n                        add_nested_tuples(test_tup1[i], test_tup2[i])\n                    elif isinstance(test_tup1[i], list):\n                        for j in range(len(test_tup1[i])):\n                            if isinstance(test_tup1[i][j], tuple):\n                                add_nested_tuples(test_tup1[i][j], test_tup2[i][j])\n                            elif isinstance(test_tup1[i][j], list):\n                                for k in range(len(test_tup1[i][j])):\n                                    if isinstance(test_tup1[i][j][k], tuple):\n                                        add_nested_tuples(test_tup1[i][j][k], test_tup2[i][j][k])\n                                    elif isinstance(test_tup1[i][j][k], list):\n                                        for l in range(len(test_tup1[i][j][k])):\n                                            if isinstance(test_tup1[i][j][k][l], tuple):\n                                                add_nested_tuples(test_tup1[i][j][k][l], test_tup2[i][j][k][l])\n                                            elif isinstance(test_tup1[i][j][k][l], list):\n                                                for m in range(len(test_tup1[i][j][k][l])):\n                                                    if isinstance(test_tup1[i][j][k][l][m], tuple):\n                                                        add_nested_tuples(test_tup1[i][j][k][l][m], test_tup2[i][j][k][l][m])\n                                                    elif isinstance(test_tup1[i][j][k][l][m], list):\n                                                        for n in range(len(test_tup1[i][j][k][l][m])):\n                                                            if isinstance(test_tup1[i][j][k][l][m][n], tuple):\n                                                                        add_nested_tuples(test_tup1[i][j][k][l][m][n], test_tup2[i][j][k][l][m][n])\n                                                            elif isinstance(test_tup1[i][j][k][l][m][n], list):\n                                                                        for o in range(len(test_tup1[i][j][k][l][m][n])):\n                                                                            if isinstance(test_tup1[i][j][k][l][m][n][o], tuple):\n                                                                                add_nested_tuples(test_tup1[i][j][k][l][m][n][o], test_tup2[i][j][k][l][m][n][o])\n                                                                            elif isinstance(test_tup1[i][j][k][l][m][n][o], list):\n                                                                                for p in range(len(test_tup1[i][j][k][l][m][n][o])):\n                                                                                    if isinstance(test_tup1[i][j][k][l][m][n][o][p], tuple):\n                                                                                        add_nested_tuples(test_tup1[i][j][k][l][m][n][o][p], test_tup2[i][j][k][l][m][n][o][p])\n                                                                                    elif isinstance(test_tup1[i][j][k][l][m][n][o][p], list):\n                                                                                        for q in range(len(test_tup1[i][j][k][l][m][n][o][p])):\n                                                                                            if isinstance(test_tup1[i][j][k][l][m][n][o][p][q], tuple):\n                                                                                                add_nested_tuples(test_tup1[i][j][k][l][m][n][o][p][q], test_tup2[i][j][k][l][m][n][o][p][q])\n                                                                                            elif isinstance(test_tup1[i][j][k][l][m][n][o][p][q], list):\n                                                                                                for k in range(len(test_tup1[i][j][k][l][m][n][o][p][q])):\n                                                                                            if isinstance(test_tup1[i][j][k][l][m][n][o][p][q][k], tuple):\n                                                                                                    add_nested_tuples(test_tup1[i][j][k][l][m][n][o][p][q][k], test_tup2[i][j][k][l][m][n][o][p][q][k])\n                                                                                            elif isinstance(test_tup1[i][j][k][l][m][n][o][p][q][k], list):\n                                                                                                for l in range(len(test_tup1[i][j][k][l][m][n][o][p][q][k])):\n                                                                                            if isinstance(test_tup1[i][j][k][l][m][n][o][p][q][k][l], tuple):\n                                                                                                    add_nested_tuples(test_tup1[i][j][k][l][m][n][o][p][q][k][l], test_tup2[i][j][k][l][m][n][o][p][q][k][l])\n                                                                                            elif isinstance(test_tup1[i][j][k][l][m][n][o][p][q][k], list):\n                                                                                                for m in range(len(test_tup1[i][j][k][l][m][n][o][p][q][k])):\n                                                                                            if isinstance(test_tup1[i][j][k][l][m][n][o][p][q][k][m], tuple):\n                                                                                                    add_nested_tuples(test_tup1[i][j][k][l][m][n][o][p][q][k][m], test_tup2[i][j][k][l][m][n][o][p][q][k][m])\n                                                                                            elif isinstance(test_tup1[i][j][k][l][m][n][o][p][q][k], list):\n                                                                                                for o in range(len(test_tup1[i][j][k][l][m][n][o][p][q][k])):\n                                                                                            if isinstance(test_tup1[i][j][k][l][m][n][o][p][q][k][o], tuple):\n                                                                                                    add_nested_tuples(test_tup1[i][j][k][l][m][n][o][p][q][k][o], test_tup2[i][j][k][l][m][n][o][p][q][k][o])\n                                                                                            elif isinstance(test_tup1[i][j][k][l][m][n][o][p][q][k], list):\n                                                                                                for p in range(len(test_tup1[i][j][k][l][m][n][o][p][q][k])):\n                                                                                            if isinstance(test_tup1["
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup = test_tup1 + test_tup2\n    return test_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup3 = (test_tup1[i][0], test_tup1[i][1]+test_tup2[i][1])\n        test_tup3.append(test_tup2[i][0])\n        test_tup3.append(test_tup2[i][1])\n        test_tup3.insert(1, test_tup2[i][2])\n        test_tup3.insert(2, test_tup2[i][3])\n        test_tup3.insert(3, test_tup2[i][4])\n        test_tup3.insert(4, test_tup2[i][5])\n        test_tup3.insert(5, test_tup2[i][6])\n        test_tup3.insert(6, test_tup2[i][7])\n        test_tup3.insert(7, test_tup2[i][8])\n        test_tup3.insert(8, test_tup2[i][9])\n        test_tup3.insert(9, test_tup2[i][10])\n        test_tup3.insert(10, test_tup2[i][11])\n        test_tup3.insert(11, test_tup2[i][12])\n        test_tup3.insert(12, test_tup2[i][13])\n        test_tup3.insert(13, test_tup2[i][14])\n        test_tup3.insert(14, test_tup2[i][15])\n        test_tup3.insert(15, test_tup2[i][16])\n        test_tup3.insert(16, test_tup2[i][17])\n        test_tup3.insert(17, test_tup2[i][18])\n        test_tup3.insert(18, test_tup2[i][19])\n        test_tup3.insert(19, test_tup2[i][20])\n        test_tup3.insert(20, test_tup2[i][21])\n        test_tup3.insert(21, test_tup2[i][22])\n        test_tup3.insert(22, test_tup2[i][23])\n        test_tup3.insert(23, test_tup2[i][24])\n        test_tup3.insert(24, test_tup2[i][25])\n        test_tup3.insert(25, test_tup2[i][26])\n        test_tup3.insert(26, test_tup2[i][27])\n        test_tup3.insert(27, test_tup2[i][28])\n        test_tup3.insert(28, test_tup2[i][29])\n        test_tup3.insert(29, test_tup2[i][30])\n        test_tup3.insert(30, test_tup2[i][31])\n        test_tup3.insert(31, test_tup2[i][32])\n        test_tup3.insert(32, test_tup2[i][33])\n        test_tup3.insert(33, test_tup2[i][34])\n        test_tup3.insert(34, test_tup2[i][35])\n        test_tup3.insert(35, test_tup2[i][36])\n        test_tup3.insert(36, test_tup2[i][37])\n        test_tup3.insert(37, test_tup2[i][38])\n        test_tup3.insert(38, test_tup2[i][39])\n        test_tup3.insert(39, test_tup2[i][40])\n        test_tup3.insert(40, test_tup2[i][41])\n        test_tup3.insert(41, test_tup2[i][42])\n        test_tup3.insert(42, test_tup2[i][43])\n        test_tup3.insert(43, test_tup2[i][44])\n        test_tup3.insert(44, test_tup2[i][45])\n        test_tup3.insert(45, test_tup2[i][46])\n        test_tup3.insert(46, test_tup2[i][47])\n        test_tup3.insert(47, test_tup2[i][48])\n        test_tup3.insert(48, test_tup2[i][49])\n        test_tup3.insert(49, test_tup2[i][50])\n        test_tup3.insert(50, test_tup2[i][51])\n        test_tup3.insert(51, test_tup2[i][52])\n        test_tup3.insert(52, test_tup2[i][53])\n        test_tup3.insert(53, test_tup2[i][54])\n        test_tup3.insert(54, test_tup2[i][55])\n        test_tup3.insert(55, test_tup2[i][56])\n        test_tup3.insert(56, test_tup2[i][57])\n        test_tup3.insert(57, test_tup2[i][58])\n        test_tup3.insert(58, test_tup2[i][59])\n        test_tup3.insert(59, test_tup2[i][60])\n        test_tup3.insert(60, test_tup2[i][61])\n        test_tup3.insert(61, test_tup2[i][62])\n        test_tup3.insert(62, test_tup2[i][63])\n        test_tup3.insert(63, test_tup2[i][64])\n        test_tup3.insert(64, test_tup2[i][65])\n        test_tup3.insert(65, test_tup2[i][66])\n        test_tup3.insert(66, test_tup2[i][67])\n        test_tup3.insert(67, test_tup2[i][68])\n        test_tup3.insert(68, test_tup2[i][69])\n        test_tup3.insert(69, test_tup2[i][70])\n        test_tup3.insert(70, test_tup2[i][71])\n        test_tup3.insert(71, test_tup2[i][72])\n        test_tup3.insert(72, test_tup2[i][73])\n        test_tup3.insert(73, test_tup2[i][74])\n        test_tup3.insert(74, test_tup2[i][75])\n        test_tup3.insert(75, test_tup2[i][76])\n        test_tup3.insert(76, test_tup2[i][77])\n        test_tup3.insert(77, test_tup2[i][78])\n        test_tup3.insert(78, test_tup2[i][79])\n        test_tup3.insert(79, test_tup2[i][80])\n        test_tup3.insert(80, test_tup2[i][81])\n        test_tup3.insert(81, test_tup2[i][82])\n        test_tup3.insert(82, test_tup2[i][83])\n        test_tup3.insert(83, test_tup2[i][84])\n        test_tup3.insert(84, test_tup2[i][85])\n        test_tup3.insert(85, test_tup2[i][86])\n        test_tup3.insert(86, test_tup2[i][87])\n        test_tup3.insert(8"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create a dictionary of list by index and tuple\n    test_dict1 = dict(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        a,b = b,a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return a+b\ndef main():\n    print(minimum(0,0))\n    print(minimum(0,1))\n    print(minimum(3,4))\nmain()\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        minimum = a\n        minimum_1 = a\n    else:\n        minimum = b\n        minimum_1 = b\n    while a<b:\n        if a < minimum:\n            minimum = a\n        elif a > minimum:\n            minimum = a\n        elif b < minimum:\n            minimum = b\n        elif b > minimum:\n            minimum = b\n    return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    if(a < b):\n        return b\n    else:\n        return a\n    \nprint(minimum(7,5))"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef sum(a,b):\n    '''\n    Write a python function to calculate the sum of two numbers.\n    '''\n    if a!=0 and b!=0:\n        return a+b\n    else:\n        return 0\n    \ndef divide(a,b):\n    '''\n    Write a python function to calculate the division of two numbers.\n    '''\n    if a!=0 and b!=0:\n        return a/b\n    else:\n        return 0\n    \ndef subtract(a,b):\n    '''\n    Write a python function to calculate the subtraction of two numbers.\n    '''\n    if a!=0 and b!=0:\n        return a-b\n    else:\n        return 0\n    \ndef multiply(a,b):\n    '''\n    Write a python function to calculate the multiplication of two numbers.\n    '''\n    if a!=0 and b!=0:\n        return a*b\n    else:\n        return 0\n    \ndef division(a,b):\n    '''\n    Write a python function to calculate the division of two numbers.\n    '''\n    if a!=0 and b!=0:\n        return a/b\n    else:\n        return 0\n    \ndef reverse(a):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if a!=0:\n        return a[::-1]\n    else:\n        return \"\"\n        \ndef palindrome(a):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if len(a)>1:\n        return True if a==a[::-1] else False\n    else:\n        return False\n    \ndef oddEven(a):\n    '''\n    Write a python function to check whether a string is an odd or even string.\n    '''\n    if len(a)==1:\n        return True if a==\"a\" else False\n    else:\n        return True if a==a[::-1] else False\n    \ndef findCommonCharacter(a,b):\n    '''\n    Write a python function to find the common character between two strings.\n    '''\n    if len(a)==len(b):\n        return a[0]\n    elif len(a)<len(b):\n        return b[0]\n    else:\n        return a[0]\n    \ndef reverseList(a):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return a[::-1]\n    \ndef split(a):\n    '''\n    Write a python function to split a string into a list.\n    '''\n    return a.split(' ')\n    \ndef convert_to_num(a):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    return int(a)\n    \ndef isPalindrome(a):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return a==a[::-1]\n    \ndef isNumeric(a):\n    '''\n    Write a python function to check whether a string is an integer or not.\n    '''\n    return a.isdigit()\n    \ndef isChar(a):\n    '''\n    Write a python function to check whether a string is a string or not.\n    '''\n    return a.isalpha()\n    \ndef isGroup(a):\n    '''\n    Write a python function to check whether a string is a group or not.\n    '''\n    return a.isupper()\n    \ndef isMin(a):\n    '''\n    Write a python function to check whether a string is a minimum or not.\n    '''\n    return len(a)==len(a[0])\n    \ndef isMax(a):\n    '''\n    Write a python function to check whether a string is a maximum or not.\n    '''\n    return len(a)==len(a[0])\n    \ndef main():\n    '''\n    Write a python function to sort a list.\n    '''\n    l=[2,4,6,7,5,1,8]\n    print(sorted(l))\n    \n    \n    \nmain()\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    if a < b:\n        return b\n    else:\n        return a\n    \ndef addition(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a + b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return sum(a) / len(a)\n    \ndef standardDeviation(a,b):   \n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    return standardDeviation(a,b) / sqrt(len(a))\n    \ndef power(a,b):   \n    '''\n    Write a python function to raise a value to a power of two.\n    '''\n    return pow(a,b)\n    \ndef sum(a,b):   \n    '''\n    Write a python function to return the sum of a and b.\n    '''\n    return a + b\n    \ndef squaring(a):   \n    '''\n    Write a python function to raise a value to the power of two.\n    '''\n    return pow(a,2)\n    \ndef rectangleArea(a,b):   \n    '''\n    Write a python function to calculate the area of a rectangle.\n    '''\n    return a*b\n    \ndef factorial(a):   \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    return 1\n    \ndef powerFactorial(a):   \n    '''\n    Write a python function to raise a value to the power of one.\n    '''\n    return a**2\n    \ndef makeBinary(number):   \n    '''\n    Write a python function to convert a given number to binary.\n    '''\n    return bin(number)\n    \ndef multiplyBinary(a,b):   \n    '''\n    Write a python function to multiply two binary numbers.\n    '''\n    return (a * b)\n    \ndef divideBinary(a,b):   \n    '''\n    Write a python function to divide two binary numbers.\n    '''\n    return (a / b)\n    \ndef checkInversion(a,b):   \n    '''\n    Write a python function to check if two numbers are inversion.\n    '''\n    return (a < b)!= (a > b)\n    \ndef isprime(num):   \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if num % 2 == 0:\n        return False\n    for i in range(3,int(num**0.5)+1,2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef fibonacci(num):   \n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return (fibonacci(num - 1) + fibonacci(num - 2))\n    \ndef flipMatrix(matrix):   \n    '''\n    Write a python function to flip a matrix.\n    '''\n    newMatrix = []\n    for i in range(len(matrix)):\n        newRow = []\n        for j in range(len(matrix[0])):\n            newRow.append(matrix[i][j])\n        newMatrix.append(newRow)\n    return newMatrix\n    \ndef findMedian(arr):   \n    '''\n    Write a python function to find the median of a list of numbers.\n    '''\n    return sorted(arr)[len(arr) // 2]\n    \ndef twoListSum(lst,target):   \n    '''\n    Write a python function to find the pair of numbers whose sum is equal to the given sum.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i] + lst[j] == target:\n                return [i,j]\n    return \"No number found\"\n    \ndef isValid(lst):   \n    '''\n    Write a python function to check if a list is valid or not.\n    '''\n    if len(lst) % 2 == 0:\n        return False\n    else:\n        for i in range(len(lst)):\n            if lst[i] > lst[i+1]:\n                return False\n        return True\n    \ndef makeList(lst):   \n    '''\n    Write a python function to make a list from a list of numbers.\n    '''\n    newList = []\n    for i in lst:\n        newList.append(i)\n    return newList\n    \ndef main():   \n    '''\n    Write a python function to print all combinations of 2 numbers from a given array.\n    '''\n    print(\"\\n\\n\")\n    print(\"Here is the given array:\")\n    print(array)\n    print(\"\\n\\n\")\n    print(\"Here is the given array converted to a list:\")\n    print(listToArray(array))\n    print(\"\\n\\n\")\n    print(\"Here is the given list converted to a list:\")\n    print(listToArray(lst))\n    print(\"\\n\\n\")\n    print(\"Here is the given list converted to a list of lists:\")\n    print(listToArray(lstToArray(array)))\n    print(\"\\n\\n\")\n    print(\"Here is the given array converted to a list of lists:\")\n    print(listToArray(arrayToList(array)))\n    print(\"\\n\\n\")\n    print(\"Here is the given list converted to a list:\")\n    print(listToArray(lstToArray(lst)))\n    print(\"\\n\\n\")\n    print(\"Here is the given list converted to a list of lists:\")\n    print(listToArray(lstToArray(lstToArray(array))))\n    print(\"\\n\\n\")\n    print(\"Here is the given list converted to a list of lists:\")\n    print(listToArray(lstToArray(lstToArray(lst))))\n    print(\"\\n\\n\")\n    print(\"Here is the given list converted to a list:\")\n    print(lstToArray(lstToArray(arrayToList(array))))\n    print(\"\\n\\n\")\n    print(\"Here is the given list converted to a list of lists:\")\n    print(lstToArray(lstToArray(lstToArray(lst))))\n    print(\"\\n\\n\")\n    print(\"Here is the given list converted to a list of lists:\")\n    print(lstToArray(lstToArray(lstToArray(lstToArray(arrayToList(array))))))\n    print(\"\\n\\n\")\n    print(\"Here is the given list converted to a list of lists:\")\n    print(lstToArray(lstToArray(lstToArray(lstToArray(lstToArray(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arrayToList(arra"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        smaller=a\n    else:\n        smaller=b\n    i=0\n    while smaller>=a and smaller>=b:\n        if a>=b:\n            break\n        elif a<b:\n            a=a+a*a\n        elif a<b:\n            b=b+b*b\n        i=i+1\n    return i\n    \ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if a>b:\n        smaller=a\n    else:\n        smaller=b\n    if a>a:\n        a=a-smaller\n    else:\n        b=b-smaller\n    if (a+b)%2==0:\n        return (a+b)/2\n    else:\n        return a+b\n        \ndef mode(a,b):\n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a>b:\n        smaller=a\n    else:\n        smaller=b\n    if a>a:\n        a=a-smaller\n    else:\n        b=b-smaller\n    if a>=b:\n        mode=a\n    else:\n        mode=b\n    return mode\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b<a:\n        min = a\n    else:\n        min = b\n    return min\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # return any number of elements are not the same\n    return not(tuplex[0]==tuple1[0] and tuplex[1]==tuple1[1])\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)!= tuple:\n        tuplex = (tuplex,)\n    return tuplex.count(tuple1) == 1\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (tuplex[0] in tuple1) or (tuplex[1] in tuple1)\n    "
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuple(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element not in tuple1: \n            return False\n    return True \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0]==tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == 0:\n        return False\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check to see if it's in the tuple\n    if tuple1 in tuplex:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check if tuple\n    if len(tuplex)>1:\n        for i in range(0,len(tuplex)):\n            # if element exists\n            if tuplex[i] == tuple1:\n                # return true\n                return True\n        return False\n    else:\n        return False\n    "
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0: \n        return 0\n    else:\n        return 1 if (x % 2 == 0) else 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")\nfind_Parity(3)\nfind_Parity(5)\nfind_Parity(12)\nfind_Parity(6)\nfind_Parity(4"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x==1:\n        return \"Even\"\n    else:\n        if x%2==0:\n            return \"Even\"\n        else:\n            return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, 'is even')\n    else:\n        print(x, 'is odd')\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n    \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2)!= 0:\n        return 'Your number is odd'\n    else:\n        return 'Your number is even'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return \"The number is odd\"\n    else:\n        return \"The number is even\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    from math import sqrt\n    def next_bigger(num):\n        res = []\n        for i in range(len(num)):\n            if num[i] > num[i+1]:\n                res.append(num[i])\n            else:\n                res.append(num[i+1])\n        return \"\".join(res)\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while n > 0:\n        r = n % 10\n        n //= 10\n        if r!= 0:\n            n = n * 10 + r\n    print(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    new_num = num[::-1]\n    num_string = \"\".join(new_num)\n    return int(num_string)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n        return n\n    if n < 10:\n        return n\n    digits = [int(i) for i in str(n)]\n    new_digits = []\n    for i in range(len(digits)):\n        if i % 2 == 0:\n            new_digits.append(digits[i] * 10)\n        else:\n            new_digits.append(digits[i] * 2)\n    digits = new_digits\n    return digits[0]\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    for i in range(1, n+1):\n        bigger = pow(i, 10)\n        rearranged = str(bigger)\n        if len(rearranged) == 10:\n            return int(rearranged)\n    return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    numbers = list(str(n))\n    for i in range(len(numbers)):\n        if numbers[i].isdigit():\n            if numbers[i] == '0':\n                numbers[i] = '1'\n            elif numbers[i] == '1':\n                numbers[i] = '2'\n            elif numbers[i] == '2':\n                numbers[i] = '3'\n            elif numbers[i] == '3':\n                numbers[i] = '4'\n            elif numbers[i] == '4':\n                numbers[i] = '5'\n            elif numbers[i] == '5':\n                numbers[i] = '6'\n            elif numbers[i] == '6':\n                numbers[i] = '7'\n            elif numbers[i] == '7':\n                numbers[i] = '8'\n            elif numbers[i] == '8':\n                numbers[i] = '9'\n    numbers = ''.join(numbers)\n    return int(numbers)"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_num = int(''.join(str(x) for x in str(n)))\n    digits_list = [int(d) for d in str(n)]\n    for d in range(len(digits_list)):\n        if digits_list[d] > new_num:\n            new_num = digits_list[d]\n    return int(str(n)[:new_num])\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n%(10**9+7)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Write your code here\n    digits = list(str(n))\n    digits.sort()\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n    digits.sort()\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if (n==1):\n        return \"1\"\n    else:\n        n=str(n)\n        i=0\n        n=n[i:]+n[0:len(n)-i]\n        return n\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort both arrays\n    nums1.sort()\n    nums2.sort()\n    #count number of k number of pairs\n    n = len(nums1)\n    #current index for sorting\n    i = 0\n    #initialize first index and last index\n    j = 0\n    #set current index to i\n    k_min = -1\n    #set k_min equal to number of k\n    k_num = 0\n    #loop through both arrays\n    while i < n and j < n:\n        #if current element is greater than last element\n        #set current index to i+1\n        if nums1[i] > nums2[j]:\n            i += 1\n        #set current index to j\n        else:\n            j += 1\n        #if current index is less than the k number of\n        #we need to set the k_min to current element\n        if j == n:\n            k_min = nums1[i]\n            j = 0\n        #if current index is greater than the last element\n        #we need to set the k_min to last element\n        elif i == n:\n            k_min = nums2[j]\n            i = 0\n        #set current element equal to k_min\n        k_num += 1\n    #if k number of pairs is less than number of elements in both arrays\n    #then return -1\n    if k_num < k:\n        return -1\n    #if k number of pairs is greater than number of elements in both arrays\n    #then return -1\n    else:\n        return k_min\nnums1 = [1, 5, 8, 3, 6, 7, 10]\nnums2 = [2, 4, 8, 6, 7]\nk = 2\nprint(k_smallest_pairs(nums1, nums2, k))"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the array\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        return 0\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def sort_nums(nums):\n        if len(nums) > 1:\n            if nums[0] < nums[1]:\n                nums[0], nums[1] = nums[1], nums[0]\n            sort_nums(nums[1:])\n            sort_nums(nums[:1])\n    \n    sort_nums(nums1)\n    sort_nums(nums2)\n    \n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    \n    count = 0\n    for i in range(k):\n        if nums1[0] <= nums2[0]:\n            heapq.heappop(nums1)\n            heapq.heappop(nums2)\n            heapq.heappush(nums1, nums2[0])\n            heapq.heappush(nums2, nums1[0])\n            count += 1\n        else:\n            heapq.heappop(nums2)\n            heapq.heappop(nums1)\n            heapq.heappush(nums2, nums1[0])\n            heapq.heappush(nums1, nums2[0])\n            count += 1\n    return count\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # For this question, we need to find the smallest number of pairs in one array and then for each pair, we want to check if the pair has a smaller number than the smallest number of the two arrays.\n    # If so, we have to remove the smallest number from the pair.\n    # So, we have to check if we can remove the smallest number from both the array.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the pair.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in the array.\n    # So, we check if we can remove the smallest number from the pair.\n    # If so, we can put the smallest number back in th"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_pair = []\n    smallest_pair_index = 0\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    \n    for i in range(k):\n        if heapq.heappop(heap)[0] == 0:\n            smallest_pair.append(heapq.heappop(heap)[1])\n            smallest_pair_index = i + 1\n    \n    return smallest_pair, smallest_pair_index\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest = []\n    heapq.heapify(smallest)\n    for i in range(len(nums1)):\n        heapq.heappush(smallest, (nums1[i], i))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return 0\n    if k == 1:\n        return 1\n    \n    if len(nums1) == 0:\n        return 0\n    if len(nums2) == 0:\n        return 0\n        \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                return 1\n    return 0\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for index in range(len(nums1)):\n        heapq.heappush(heap, (nums1[index], index))\n    for index in range(len(nums2)):\n        heapq.heappush(heap, (nums2[index], index))\n    i, j = 0, 0\n    ans = 0\n    while i < len(heap) and j < len(heap):\n        x, y = heapq.heappop(heap)\n        if i == j:\n            ans += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the elements of the first array\n    nums1.sort()\n    # Sort the elements of the second array\n    nums2.sort()\n    if len(nums1) < len(nums2):\n        # Sort the elements of the array according to their values\n        nums1, nums2 = nums2, nums1\n    # Keep track of indexes to check whether we have an answer\n    index = 0\n    for i in range(len(nums1) - 1):\n        if nums1[i] < nums1[i + 1]:\n            # Pair is found\n            index = i\n            break\n    for i in range(len(nums2) - 1):\n        if nums2[i] < nums2[i + 1]:\n            # Pair is found\n            index = i\n            break\n    return index\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    pairs = None\n    for i in range(len(list1)-1):\n        if min_product == None:\n            min_product = list1[i]\n        elif min_product < list1[i]:\n            min_product = list1[i]\n    if min_product == None:\n        min_product = list1[len(list1)-1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    if n < 2:\n        return 0\n    p = min(list1)\n    d = {}\n    for i in range(n):\n        if list1[i] in d:\n            d[list1[i]] += 1\n        else:\n            d[list1[i]] = 1\n    for i in range(n):\n        if d[list1[i]] == 1:\n            if list1[i] in d:\n                d[list1[i]] -= 1\n                if d[list1[i]] == 0:\n                    p = list1[i]\n                    break\n            else:\n                p = list1[i]\n                break\n    return p\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)-1):\n            sum += list1[j][0] * list1[j][1]\n        sum += list1[j][0]\n    return sum\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = list1[0]\n    minimum_index = 0\n    for i in range(len(list1) - 1):\n        if list1[i] < minimum:\n            minimum = list1[i]\n            minimum_index = i\n    return list1[minimum_index]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    min_index = 0\n    for i in range(1, len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i][0] > list1[j][0] and list1[i][1] < list1[j][1]:\n                min_index = i\n                min_product = list1[i][1]\n    return min_product, min_index\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            curr_product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if curr_product < min_product:\n                min_product = curr_product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = 0\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if list1:\n        if len(list1) == 1:\n            return list1[0][0] * list1[0][1]\n        elif len(list1) == 2:\n            return min(list1[0][0] * list1[1][1], list1[1][0] * list1[0][1])\n        else:\n            x = list(range(len(list1)))\n            y = list(range(len(list1)))\n            l = len(list1)\n            for i in range(l):\n                for j in range(l):\n                    if i == j:\n                        continue\n                    x[i], y[j] = y[j], x[i]\n            m = min([min_product_tuple(x), min_product_tuple(y)])\n            for i in range(l):\n                x[i], y[i] = y[i], x[i]\n            return m\n    else:\n        return None\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Write your code here.\n    return min(list1, key=lambda x:x[1])\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = min_tuple = None\n    if len(list1) > 1:\n        min_tuple = list1[0]\n        for i in range(1, len(list1)):\n            min_tuple = tuple(sorted(list1[i]))\n            min_prod = min(min_prod, min_tuple)\n    return min_prod\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # for loop to find the min value in the list\n    for i in range(len(listval)):\n        for j in range(len(listval)-i-1):\n            if listval[j] < listval[j+1]:\n                listval[j], listval[j+1] = listval[j+1], listval[j]\n    return listval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for i in listval:\n        if min_val == None:\n            min_val = i\n        else:\n            if i < min_val:\n                min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for item in listval:\n        if item < minimum:\n            minimum = item\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    for i in range(len(listval)-1, 0, -1):\n        if listval[i] < listval[i-1]:\n            return listval[i]\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Create a min function to minimize the element\n    # Write a code to get the minimum and put it in a variable\n    min = None\n    min_index = 0\n    for i in range(len(listval)):\n        if listval[i] < listval[min_index]:\n            min = listval[i]\n            min_index = i\n    # Find the minimum element in the list\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    \n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=listval[0]\n    for val in listval:\n        if val<min_val:\n            min_val=val\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # this is a regex to convert the snake case to camel case\n    pattern = re.compile('(((?<=[A-Z])[a-z])|((?<=[A-Z])[A-Z])|((?<=[0-9])[0-9])|(?<=[0-9])[A-Z])')\n    # if the word is not a snake case or camel case string\n    if not pattern.match(word):\n        return word\n    else:\n        new_word = \"\"\n        # remove the space in front of the word\n        word = word[1:]\n        # convert the word into snake case\n        # it will be converted to camel case, it will be doubled by 2 and inserted into the new_word string\n        for char in range(len(word)):\n            if word[char]!= \" \":\n                new_word += word[char].upper()\n            else:\n                new_word += word[char].lower()\n        return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # first split the string in words to separate the words\n    words = word.split(\"_\")\n    \n    # set default case to lower\n    case = \" lower\"\n    # set default space to upper\n    space = \" upper\"\n    # set default uppercase\n    upper = \" upper\"\n    \n    # loop through the words\n    for i in range(len(words)):\n        # add the case of the word to the end of the string\n        if case == \" upper\":\n            words[i] = words[i].upper()\n        elif case == \" lower\":\n            words[i] = words[i].lower()\n        # add the space of the word to the end of the string\n        elif space == \" upper\":\n            words[i] = words[i].upper()\n        elif space == \" lower\":\n            words[i] = words[i].lower()\n        # add the uppercase of the word to the end of the string\n        elif upper == \" upper\":\n            words[i] = words[i].upper()\n        elif upper == \" lower\":\n            words[i] = words[i].lower()\n        \n    # return the result\n    return \"\".join(words)\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # first split the string in words to separate the words\n    words = word.split(\"_\")\n    \n    # set default case to lower\n    case = \" lower\"\n    # set default space to upper\n    space = \" upper\"\n    # set default uppercase\n    upper = \" upper\"\n    \n    # loop through the words\n    for i in range(len(words)):\n        # add the case of the word to the end of the string\n        if case == \" upper\":\n            words[i] = words[i].upper()\n        elif case == \" lower\":\n            words[i] = words[i].lower()\n        # add the space of the word to the end of the string\n        elif space == \" upper\":\n            words[i] = words[i].upper()\n        elif space == \" lower\":\n            words[i] = words[i].lower()\n        # add the uppercase of the word to the end of the string\n        elif upper == \" upper\":\n            words[i] = words[i].upper()\n        elif upper == \" lower\":\n            words[i] = words[i].lower()\n        \n    # return the result\n    return \"\".join(words)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word.lower())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return result.lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #Python regex pattern to find the first letter of a word\n    pattern = r'[a-z]'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','').replace('-','').replace(' ', '').replace('_','').replace('-','').title()\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([c.capitalize() for c in word.split('_')])\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list_copy = l.copy()\n    list_copy.sort()\n    if len(list_copy)%2==0:\n        return [list_copy[int(len(list_copy)/2)],list_copy[int((len(list_copy)/2)+1)]]\n    else:\n        return [list_copy[int(len(list_copy)/2)],list_copy[len(list_copy)/2]]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for item in l:\n        if item % 2 == 1:\n            odds.append(item)\n    l.clear()\n    l.extend(odds)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = sorted(l)\n    print(l)\n    x = 0\n    y = len(l)\n    if x < y:\n        while x < y:\n            if l[x] % 2!= 0:\n                del l[x]\n                y -= 1\n                print(l)\n            x += 1\n    else:\n        while x < y:\n            if l[x] % 2 == 0:\n                del l[x]\n                x += 1\n                print(l)\n            x += 1\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for i in l:\n        if i%2 == 1:\n            l1.append(i)\n    print(l1)\nremove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    even = []\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            l[i] = l[i]//2\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    my_list = []\n    for item in l:\n        if item % 2 == 1:\n            my_list.append(item)\n    return my_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if not l:\n        return []\n    else:\n        l1 = []\n        for i in l:\n            if i % 2!= 0:\n                l1.append(i)\n        return l1\n    \n    \n    \n    \n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for n in l:\n        if n % 2 == 1:\n            odds.append(n)\n    return odds\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    i = 0\n    index_to_be_returned = -1\n    for i, element in enumerate(list1):\n        if element[1] == n:\n            index_to_be_returned = i\n            break\n    if index_to_be_returned == -1:\n        print(\"The nth element not found in the given list\")\n    else:\n        print(\"the nth element is: \" + str(list1[index_to_be_returned]))\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    lst = list1[0:n]\n    for i in lst:\n        print(i)\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    count = 0\n    \n    for item in list1:\n        if count == n:\n            return item\n        count += 1\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    first_elem = list1[n][0]\n    return first_elem\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    assert n >= 0\n    if n > len(list1):\n        raise IndexError\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[i][n] for i in range(len(list1)))\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if list1 is None or n is None:\n        return None\n    if n == 0:\n        return list1[0]\n    if len(list1) > n + 1:\n        return list1[n]\n    return list1[-1]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    def _overlapping(list1,list2):\n        return any(x in list2 for x in list1)\n    return _overlapping(list1,list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    def overlaps(list1,list2):  \n        '''\n        Write a python function to check whether any value in a sequence exists in a sequence or not.\n        '''\n        lst_dic = { 'A':1, 'B':2, 'C':3, 'D':4, 'E':5, 'F':6, 'G':7, 'H':8, 'I':9, 'J':10, 'K':11, 'L':12, 'M':13, 'N':14, 'O':15, 'P':16, 'Q':17, 'R':18, 'S':19, 'T':20, 'U':21, 'V':22, 'W':23, 'X':24, 'Y':25, 'Z':26 }\n        for a,b in zip(list1,list2):\n            if a in lst_dic.keys() and b in lst_dic.keys():\n                if lst_dic[a] == lst_dic[b]:\n                    return True\n        return False\n    if overlaps(list1,list2):\n        return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if list2.count(i)>0:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 is not None and list2 is not None:\n        for i in list1:\n            if i in list2:\n                return True\n    return False\n    \n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)<len(list2):\n        if list2[0] in list1:\n            print('True')\n        else:\n            print('False')\n    else:\n        if list1[0] in list2:\n            print('True')\n        else:\n            print('False')\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print(\"The function is working...\")\n    print(\"Checking if any element in the list1 is in list2...\")\n    if list1==list2:\n        print(\"List1 and list2 are equal.\")\n    else:\n        print(\"List1 does not contain element in list2.\")\n    print(\"Checking if any element in the list2 is in list1...\")\n    if list2==list1:\n        print(\"List2 and List1 are equal.\")\n    else:\n        print(\"List2 does not contain element in List1.\")\n    print(\"Checking if any element in the list1 and list2 is in the same sequence...\")\n    if list1==list2:\n        print(\"List1 and List2 are the same sequence.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the first element...\")\n    if list1[0]==list2[0]:\n        print(\"List1 and List2 are the same sequence as first element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the last element...\")\n    if list1[-1]==list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list1[-1]==list2[0]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as middle element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the last element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[0]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[0]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the last element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the same sequence as last element.\")\n    else:\n        print(\"List1 does not contain element in List2.\")\n    print(\"Checking if any element in the list1 or list2 is in the same sequence as the middle element...\")\n    if list1[0]+list2[-1]==list1[-1]+list2[-1]:\n        print(\"List1 and List2 are the sam"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    count=0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                count+=1\n    if count>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlap = False\n    for i in list1:\n        for j in list2:\n            if i == j:\n                overlap = True\n                break\n    return overlap\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # check if there are only one value in the list\n    if len(list1)==len(list2):\n        for i in range(len(list1)):\n            if list1[i] not in list2:\n                return False\n    # check if the list are of the same size\n    elif len(list1)==len(list2):\n        if len(list2)==1:\n            if list1[0] in list2:\n                return True\n        elif len(list2)==1:\n            if list1[0] in list2:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Your code here\n    # Use a for loop, while loop\n    # Find the number of overlapping elements\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return 0\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #code \n    import numpy as np\n    \n    arr = np.array(arr)\n    \n    maxi = arr[0]\n    \n    for i in range(0, len(arr)):\n        if arr[i] > maxi:\n            maxi = arr[i]\n        \n    return maxi\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr_dict = {}\n    max_product = -1\n    for x in arr:\n        if x in arr_dict:\n            arr_dict[x]+=1\n        else:\n            arr_dict[x]=1\n    max_product = max(arr_dict.values())\n    index_of_max_product = 0\n    for key, value in arr_dict.items():\n        if value == max_product:\n            index_of_max_product = arr_dict[key]\n            break\n    print('{} with maximum product {}'.format(key, index_of_max_product))\n    return index_of_max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    low = 0\n    high = len(arr)-1\n    max = 0\n    while low <= high:\n        p = arr[low]*arr[high]\n        if p > max:\n            max = p\n        if p < max:\n            low+=1\n        else:\n            high-=1\n    return max\n    \ndef min_Product(arr): \n    '''\n    Write a python function to find the lowest product from a given array of integers.\n    '''\n    low = 0\n    high = len(arr)-1\n    min = arr[low]*arr[high]\n    while low <= high:\n        p = arr[low]*arr[high]\n        if p < min:\n            min = p\n        if p > min:\n            low+=1\n        else:\n            high-=1\n    return min\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]\n    i = 0\n    j = len(arr) - 1\n    # Iterate through array\n    while i < j:\n        # If largest element in this loop\n        #   is greater than previous element, \n        #   then update largest element\n        #   in this loop\n        if arr[i] > arr[j]:\n            # Update largest element in this loop\n            # using above conditional\n            max = arr[i]\n            # Update position in array \n            i+=1\n        else:\n            # Update previous element\n            # using below conditional\n            max = arr[j]\n            j-=1\n    # Return the index of the maximum element\n    # in this loop\n    return max\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val = 0\n    max_idx = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            val = arr[i] * arr[j]\n            if val > max_val:\n                max_val = val\n                max_idx = i\n    return max_idx\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    size = len(arr)\n    if size == 1: \n        return None\n    if size == 2: \n        return (arr[0]*arr[1]) \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n            j = i\n    for i in range(j-1, -1, -1):\n        if arr[i] > max:\n            max = arr[i]\n            i = i\n    return (i+1, max)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    max_product_x = -1\n    max_product_y = -1\n    product_x = -1\n    product_y = -1\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] < arr[j] and product_x < max_product:\n                product_x = arr[i]\n                max_product_x = arr[j]\n                max_product = arr[i] * arr[j]\n            elif arr[i] < arr[j] and product_y < max_product:\n                product_y = arr[i]\n                max_product_y = arr[j]\n                max_product = arr[i] * arr[j]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = -float('inf')\n    max_num_index = -1\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = [-1]*len(arr)\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            result[i] = max(result[i], arr[j]*arr[i])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Empty list to store elements\n    newlist = []\n    \n    #For loop to iterate over list\n    for x in Input:\n        #print(x)\n        newlist.append(x[0])\n    \n    #For loop to iterate over the list\n    for i in range(len(newlist)):\n        if newlist[i] in newlist:\n            continue\n        else:\n            newlist.append(newlist[i])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = Input.copy()\n    a.sort(key= lambda x: x[0])\n    print(a[0])\n    print(a[1])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if not Input[i]:\n            continue\n        for j in range(i+1, len(Input)):\n            if Input[i] == Input[j] and not j==i:\n                Output.append(Input[j])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty list to store elements\n    list_of_elements = []\n    # Iterate through the given list and append each tuple to the list\n    for index in range(len(Input)):\n        list_of_elements.append(Input[index])\n    # The function returns the second element of the list\n    list_of_elements.remove(list_of_elements[0])\n    # The function returns the first element of the list\n    return list_of_elements[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if Input == []:\n        raise TypeError('list is empty')\n    else:\n        print(tuple(sorted(list(set(Input)))))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(dict.fromkeys(Input))\n    \n    \ndef kth_last(Input, K):\n    '''\n    Write a function to find the Kth last element in given list of tuple.\n    '''\n    return Input[-K:]\n    \ndef reverse_join(Input):\n    '''\n    Write a function to join elements of a list into string.\n    '''\n    return '-'.join(Input)\n    \n    \ndef last_element(Input):\n    '''\n    Write a function to return last element of a list.\n    '''\n    return Input[-1]\n    \n    \ndef is_palindrome(Input):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    return Input == Input[::-1]\n    \n    \ndef fib(n):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n<=2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    if n==3:\n        return True\n    if n%2==1:\n        return False\n    for i in range(3,n,2):\n        if n%i==0:\n            return False\n    return True\n    \n    \ndef euclid(a, b):\n    '''\n    Write a function to find the gcd and lcm of two numbers.\n    '''\n    if a == 0:\n        return b,0\n    if b == 0:\n        return a,0\n    if a == b:\n        return a,b\n    if a%b==0:\n        return b,b-a\n    if a%b==0:\n        return a,b-a\n    \n    else:\n        d,k=euclid(b,a%b)\n        return d,k\n    \n    \ndef merge(a, b):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        return [a[0]] + merge(a[1:],b)\n    else:\n        return [b[0]] + merge(a,b[1:])\n    \n    \ndef partition(a,p):\n    '''\n    Write a function to sort a list in a way that is a partition of a list.\n    '''\n    a[p],a[0]=a[0],a[p]\n    return a\n    \ndef quick_sort(a,start,end):\n    '''\n    Write a function to sort a list in a way that is a partition of a list.\n    '''\n    if start >= end:\n        return a\n    p=start\n    l=start+1\n    r=end\n    while l<r:\n        while l<=r and a[l]<=a[p]:\n            l+=1\n        while l<=r and a[r]>=a[p]:\n            r-=1\n        if l<r:\n            a[l],a[r]=a[r],a[l]\n            l+=1\n            r-=1\n    a[l],a[r]=a[r],a[l]\n    return quick_sort(a,start,r-1)\n    \n    \ndef selection_sort(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    for i in range(len(a)):\n        min_index=i\n        for j in range(i+1,len(a)):\n            if a[min_index]>a[j]:\n                min_index=j\n        a[i],a[min_index]=a[min_index],a[i]\n    return a\n    \n    \ndef selection_sort_2(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    for i in range(len(a)-1):\n        min_index=i\n        for j in range(i+1,len(a)):\n            if a[min_index]<a[j]:\n                min_index=j\n        a[i],a[min_index]=a[min_index],a[i]\n    return a\n    \n    \ndef insertion_sort(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    for i in range(1,len(a)):\n        val=a[i]\n        j=i-1\n        while j>=0 and val<a[j]:\n            a[j+1]=a[j]\n            j-=1\n        a[j+1]=val\n    return a\n    \n    \ndef shell_sort(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    h=1\n    while h<=len(a):\n        for i in range(h,len(a)):\n            j=i-h\n            while j>=0 and a[j]>a[i]:\n                a[j+h],a[j] = a[j],a[j+h]\n                j-=h\n        h*=3\n    return a\n    \n    \ndef heap_sort(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    for i in range(len(a)-1,0,-1):\n        for j in range(0,len(a)-i-1):\n            if a[j]>a[j+1]:\n                a[j],a[j+1]=a[j+1],a[j]\n    return a\n    \n    \ndef shell_sort_2(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    h=1\n    while h<=len(a):\n        for i in range(h,len(a)):\n            j=i-h\n            while j>=0 and a[j]>a[i]:\n                a[j+h],a[j] = a[j],a[j+h]\n                j-=h\n        h*=3\n    return a\n    \n    \ndef merge_sort(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    h=1\n    while h<=len(a)-1:\n        for i in range(len(a)-1-h):\n            if a[i]>a[i+h]:\n                a[i],a[i+h]=a[i+h],a[i]\n        h*=2\n    return a\n    \n    \ndef merge_sort_2(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    h=1\n    while h<=len(a)-1:\n        for i in range(len(a)-1-h):\n            if a[i]>a[i+h]:\n                a[i],a[i+h]=a[i+h],a[i]\n        h*=2\n    return a\n    \n    \ndef quick_sort(a,start,end):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if start >= end:\n        return a\n    p=start\n    l=start+1\n    r=end\n    while l<=r:\n        while l<=r and a[l]<=a[p]:\n            l+=1\n        while l<=r and a[r]>=a[p]:\n            r-=1\n        if l<r:\n            a[l],a[r]=a[r],a[l]\n            l+=1\n            r-=1\n    a[l],a[r]=a[r],a[l]\n    return quick_sort(a,start,r-1)\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return set(tuple(Input) for tuple in itertools.groupby(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        lst.append(Input[i][0])\n    lst.sort()\n    if len(lst)%2==0:\n        return lst[len(lst)/2]\n    else:\n        return lst[len(lst)/2]\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your code goes here...\n    # The list of tuples is in the input\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = list(Input)\n    list1 = list(set(List))\n    if len(list1) > 1:\n        print(\"The list has more than one element.\")\n        return\n    else:\n        print(\"The list has only one element.\")\n        return list1[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max_Len = lst[0]\n    for i in range(len(lst)):\n        if Max_Len < lst[i]:\n            Max_Len = lst[i]\n    return Max_Len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_index = 0 \n    for i in range(len(lst)): \n        if (len(lst[i]) > max_index): \n            max_index = len(lst[i]) \n    return max_index "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) < 1:\n        return lst\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return Find_Max(lst[1:])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        if lst[0]==lst[-1]:\n            return lst[0]\n        else:\n            return Find_Max(lst[1:])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return\n    \n    for i in range(len(lst)):\n        if lst[i] > lst[0]:\n            j = 0\n            while j < i and lst[j] > lst[i]:\n                j += 1\n            lst[i],lst[j] = lst[j],lst[i]\n    return lst[0]\n    \nlst = [6, 4, 8, 2, 1, 5, 4, 9, 1]\nlst.sort()\nprint(\"Sorted List: \",lst)\nprint(\"Length of Sorted List: \", len(lst))\nprint(\"The element has been changed to the maximum value is: \", Find_Max(lst))"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    index = 0 \n    for i in range(len(lst)):\n        if len(lst[index]) < len(lst[i]):\n            index = i \n    return lst[index] \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    try: \n        return max(lst) \n    except ValueError: \n        return 'No element'\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in range(len(lst)):\n        if len(lst[i]) > len(max(lst)):\n            max(lst)\n    return lst[0]\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    n = len(lst)\n    for i in range(0, n): \n        for j in range(0, n - i): \n            if (lst[j] > lst[j + 1]): \n                lst[j], lst[j + 1] = lst[j + 1], lst[j] \n    return lst\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    for number in list1:\n        result += number\n    return result\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #Write your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    print(sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #raise NotImplementedError\n    return sum([i for i in list1 if i%2==0])\n    #raise NotImplementedError\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list_s = []\n    for num in list1:\n        list_s.append(round(num, 0))\n    return sum(list_s) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_the_list = 0\n    number_of_list = len(list1)\n    for element in list1:\n        sum_of_the_list = sum_of_the_list + element\n    print(sum_of_the_list)\n    return sum_of_the_list\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        result += list1[i]\n    print(result)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        return sum([round(i) for i in list1])"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Initialize the sum\n    sum = 0\n    \n    # For each item in the list\n    for item in list1:\n        sum += item\n    \n    # Round the sum to 2 decimal places\n    round_sum = round(sum, 2)\n    \n    # Print the result\n    print(round_sum)\n    "
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = len(list1)\n    for num in list1:\n        total += num\n    return total/length\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    length = len(list1)\n    for i in range(length):\n        sum += list1[i]\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0: \n        return 0\n    return n*(n*n+1)*2\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    num = 1\n    total = 0\n    while num <= n:\n        total += num\n        num += 2\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i*i*i\n    return sum\n    \ndef cube_Sum_2(n):\n    '''\n    Write a python function to find the cube sum of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i*i*i\n    return sum\n    \ndef main():\n    n = int(input())\n    print(cube_Sum(n))\n    print(cube_Sum_2(n))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 1:\n        return 'Error: n is not in [1,4,8,12,16,32]'\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    else:\n        return n*(n+1)*(3*n+2)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    return cube_Sum(n-1) + 2*cube_Sum(n-2)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 1: \n        return n \n    sum = 0\n    for i in range(1, n): \n        sum += i * i \n    return sum \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1, 2):\n        result += i ** 3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 1\n    cube_sum = 0\n    while(i <= n):\n        cube_sum += i * i * i\n        i += 1\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    lst = []\n    for i in range(1, n+1):\n        lst.append(i**3)\n    return sum(lst)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = test_tup[0]\n    for i in range(1, len(test_tup)):\n        tup = tup + test_tup[i]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    a = test_tup[0]\n    for i in range(1, len(test_tup)):\n        b = test_tup[i]\n        a = a + b\n    return a\n    \ndef merge_tuples(test_tup):\n    '''\n    Write a function that takes a tuple and returns a new tuple of its elements\n    concatenated together.\n    '''\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if type(test_tup) is tuple:\n        pass\n    elif type(test_tup) is str:\n        pass\n    else:\n        raise TypeError(\"Type not supported\")\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = test_tup\n    for el in test_tup:\n        new_tup = new_tup + (el, )\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out = \"\"\n    for x in test_tup:\n        out = out + str(x)\n    return out\n    \n    "
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # your code goes here\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    lst = []\n    for i in test_tup:\n        lst.append(i)\n    return tuple(lst)\n    \ndef test_concatenate_tuple():\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup1 = ('one', 'two', 'three')\n    tup2 = ('four', 'five','six')\n    assert concatenate_tuple(tup1) == tup1\n    assert concatenate_tuple(tup2) == tup2\n    assert concatenate_tuple((1,2,3)) == (1,2,3)\n    assert concatenate_tuple((1,2,3,4)) == (1,2,3,4)\n    assert concatenate_tuple((1,2,3,4,5)) == (1,2,3,4,5)\n    assert concatenate_tuple((1,2,3,4,5,6)) == (1,2,3,4,5,6)\n    \n    \ndef is_even(x):\n    '''\n    Write a function to determine if x is even or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = \"\".join(test_tup)\n    return test_str\n    \n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_1 = 1\n    for i in range(n):\n        cube_1 = cube_1 * (1 + cube_1)\n    return cube_1 / 3\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum = total_sum + i\n    average = total_sum / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    '''\n    For example:\n    5\n    8\n    15\n    None\n    6\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0 \n    for i in range(1, n + 1):\n        total += i ** 3 \n    return total / (n ** 3) \n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    total=0\n    for i in range(1, n+1):\n        total = total + i\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # store the numbers in a list\n    numbers = []\n    for x in range(n):\n        number = int(input(\"Enter number for cube of {}: \".format(x+1)))\n        numbers.append(number)\n    # find the sum of cubes\n    cubes = 0\n    for x in range(n):\n        cubes += numbers[x] ** 3\n    # print sum of cubes\n    print(\"The sum of cubes of the first {} natural numbers is {}\".format(n, cubes))\n    return cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*find_Average_Of_Cube(n-1)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    from math import factorial\n    def main():\n        print(find_Average_Of_Cube(n))\n    main()\nfind_Average_Of_Cube(n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    number_of_cubes = n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/number_of_cubes\n    print(average)\nfind_Average_Of_Cube(5)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # your code here\n    if n < 1:\n        print(\"Please enter a natural number greater than 0.\")\n        return\n    if n == 1:\n        print(\"The average of the cube of 1 is\", n)\n    else:\n        for i in range(1, n+1):\n            cube = i **3\n            print(i, \"cube is\", cube)\n        avg = n ** 3 / 2\n        print(\"The average is\", avg)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[0][0])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1].split('-')\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for index, element in enumerate(test_tuple):\n        if index == len(test_tuple) - 1:\n            break\n        if element[-1] == 'L':\n            test_tuple[index] = element[:-1]\n        elif element[-1] == 'R':\n            test_tuple[index] = element[:-1] + 'L'\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for k, v in test_tuple:\n        result.append(k)\n    return result\n    "
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = []\n    for i in test_tuple:\n        for j in i:\n            test_list.append(j)\n    return test_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indexes = []\n    for i in range(len(test_tuple[0])):\n        rear_indexes.append(test_tuple[0][i])\n    return rear_indexes\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Create a loop to traverse through the given tuple.\n    for index, item in enumerate(test_tuple):\n        # Check if the index of the item is greater than the length of the given tuple.\n        if index == len(test_tuple) - 1:\n            break\n        # Get the string that is located at the index of the item.\n        string = test_tuple[index + 1]\n        # Set a flag to be used as a flag to indicate whether the string is found or not.\n        found = False\n        # Iterate through the string and check to see if the item is a space or not.\n        for i in string:\n            if i =='':\n                found = True\n        # If the string is found, set the found flag to be true.\n        if found:\n            test_tuple[index] = string\n    # Return the modified tuple.\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #initialize\n    rear_index = 0\n    \n    #loop through each string\n    for value in test_tuple:\n        #check for end of string and skip if true\n        if value.endswith('\\n'):\n            break\n        else:\n            #if true, increment rear index\n            rear_index += 1\n    \n    #make string\n    rear_string = ''\n    for i in range(rear_index, len(test_tuple)):\n        #append rear string to list\n        rear_string += test_tuple[i]\n    \n    #return string\n    return rear_string\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for index in test_tuple:\n        if index[-1]=='R':\n            break\n        else:\n            print(index[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_index, rear_index = test_tuple\n    #extract the front index element\n    return front_index[rear_index]\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count_occurrence = 0\n    if not (len(list1)):\n        return count_occurrence\n    for i in range(len(list1)):\n        for element in list1[i]:\n            if x == element:\n                count_occurrence+=1\n    return count_occurrence\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in list1:\n        if x in i:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i][x] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Your code here\n    i = 0\n    j = 0\n    count = 0\n    while i < len(list1):\n        while j < len(list1):\n            if list1[i] == x:\n                count += 1\n            j += 1\n        i += 1\n        j = 0\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    if x not in list1:\n        return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    temp = 0\n    for i in range(len(list1)): \n        if list1[i][0] == x: \n            temp = temp + 1\n    return temp\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            n = n + 1\n    return n\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0 \n    for i in range(0, len(list1)): \n        if list1[i] == x: \n            result += 1\n    return result \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    return 1+count_element_in_list(list1[0:len(list1)], x)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if len(nums)<=1:\n        return nums\n    else:\n        for i in range(len(nums)):\n            if nums[i]%2==1:\n                nums[i]=nums[i]\n        return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_list = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_list.append(num)\n    return filtered_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    res = []\n    for num in nums:\n        if num%2 == 1:\n            res.append(num)\n    return res\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # TODO: write your code here\n    new_nums=[]\n    for i in nums:\n        if i%2==0:\n            new_nums.append(i)\n    return new_nums\n    \n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd = []\n    for x in nums:\n        if x % 2!= 0:\n            odd.append(x)\n    return odd\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda num: num % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_odd_numbers.append(num)\n    return filtered_odd_numbers\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove '-'\n    dt = dt.replace('-', '')\n    # convert to datetime\n    date = dt.split('-')\n    # convert to date\n    date = date[2]+'/'+date[1]+'/'+date[0]\n    # convert to datetime\n    dt = date+' 00:00:00'\n    # return dt\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    date = [int(d) for d in date]\n    d = date[0]\n    m = date[1]\n    y = date[2]\n    d = d+m/12+y/100\n    y = int(y)\n    m = int(m)\n    date = [d, m, y]\n    dt = '-'.join(str(d) for d in date)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.search('^\\d{4}-\\d{2}-\\d{2}$', dt):\n        return dt\n    elif re.search('^\\d{4}-\\d{2}-\\d{2}(.\\d{4})$', dt):\n        return dt.replace('-', '-').replace('.', '-').replace(' ', '-')\n    else:\n        raise Exception(\"Invalid date format\")\ndef check_date(dt, allow_dates_only=False):\n    '''\n    Return True if date has a valid format. Return False if the date is not a valid date.\n    Allow dates_only is a boolean parameter to filter out dates that don't have a valid format.\n    '''\n    if allow_dates_only:\n        return re.search('^\\d{4}-\\d{2}-\\d{2}$', dt)!= None\n    else:\n        return re.search('^\\d{4}-\\d{2}-\\d{2}(.\\d{4})$', dt)!= None\ndef check_time(dt, allow_times_only=False):\n    '''\n    Return True if time has a valid format. Return False if the time is not a valid time.\n    Allow times_only is a boolean parameter to filter out times that don't have a valid format.\n    '''\n    if allow_times_only:\n        return re.search('^\\d{4}-\\d{2}-\\d{2}(.\\d{2})$', dt)!= None\n    else:\n        return re.search('^\\d{4}-\\d{2}-\\d{2}(.\\d{2})$', dt)!= None\ndef check_email(email, allow_emails_only=False):\n    '''\n    Return True if email has a valid format. Return False if the email is not a valid email.\n    Allow emails_only is a boolean parameter to filter out emails that don't have a valid format.\n    '''\n    if allow_emails_only:\n        return re.search('^(\\w+\\.)?[A-Za-z0-9._%+-]+\\.[a-zA-Z0-9.-]+$', email)!= None\n    else:\n        return re.search('^(\\w+\\.)?[A-Za-z0-9._%+-]+\\.[a-zA-Z0-9.-]+$', email)!= None\ndef check_password(password, allow_passwords_only=False):\n    '''\n    Return True if password has a valid format. Return False if the password is not a valid password.\n    Allow passwords_only is a boolean parameter to filter out passwords that don't have a valid format.\n    '''\n    if allow_passwords_only:\n        return re.search('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$!%*#?&])[A-Za-z\\d$!#%*#?&]{8,}$', password)!= None\n    else:\n        return re.search('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$!%*#?&])[A-Za-z\\d$!#%*#?&]{8,}$', password)!= None\ndef check_phone(phone, allow_phone_numbers_only=False):\n    '''\n    Return True if phone has a valid format. Return False if the phone is not a valid phone number.\n    Allow phone_numbers_only is a boolean parameter to filter out phone numbers that don't have a valid format.\n    '''\n    if allow_phone_numbers_only:\n        return re.search('^(\\d{3}[-\\s]\\d{4}|\\(?\\d{3}[-\\s]\\d{4}\\)?)$', phone)!= None\n    else:\n        return re.search('^(\\d{3}[-\\s]\\d{4}|\\(?\\d{3}[-\\s]\\d{4}\\)?)$', phone)!= None\ndef check_location(location, allow_locations_only=False):\n    '''\n    Return True if location has a valid format. Return False if the location is not a valid location.\n    Allow locations_only is a boolean parameter to filter out locations that don't have a valid format.\n    '''\n    if allow_locations_only:\n        return re.search('^([A-Za-z0-9]+\\s[A-Za-z0-9_\\-]+\\s[A-Za-z0-9_\\-]+)$', location)!= None\n    else:\n        return re.search('^([A-Za-z0-9]+\\s[A-Za-z0-9_\\-]+\\s[A-Za-z0-9_\\-]+)$', location)!= None\ndef check_email_pattern(email_pattern, allow_emails_only=False):\n    '''\n    Return True if email_pattern has a valid format. Return False if the email is not a valid email.\n    Allow emails_only is a boolean parameter to filter out emails that don't have a valid format.\n    '''\n    if allow_emails_only:\n        return re.search('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$!%*#?&])[A-Za-z\\d$!#%*#?&]{8,}$', email_pattern)!= None\n    else:\n        return re.search('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$!%*#?&])[A-Za-z\\d$!#%*#?&]{8,}$', email_pattern)!= None\ndef check_phone_pattern(phone_pattern, allow_phone_numbers_only=False):\n    '''\n    Return True if phone_pattern has a valid format. Return False if the phone is not a valid phone number.\n    Allow phone_numbers_only is a boolean parameter to filter out phone numbers that don't have a valid format.\n    '''\n    if allow_phone_numbers_only:\n        return re.search('^\\(?\\d{3}[-\\s]\\d{4}\\)$', phone_pattern)!= None\n    else:\n        return re.search('^\\(?\\d{3}[-\\s]\\d{4}\\)$', phone_pattern)!= None\ndef check_date_pattern(date_pattern, allow_dates_only=False):\n    '''\n    Return True if date_pattern has a valid format. Return False if the date is not a valid date.\n    Allow dates_only is a boolean parameter to filter out dates that don't have a valid format.\n    '''\n    if allow_dates_only:\n        return re.search('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$!%*#?&])[A-Za-z\\d$!#%*#?&]{8,}$', date_pattern)!= None\n    else:\n        return re.search('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$!%*#?&])[A-Za-z\\d$!#%*#?&]{8,}$', date_pattern)!= None\ndef check_time_pattern(time_pattern, allow_times_only=False):\n    '''\n    Return True if time_pattern has a valid format. Return False if the time is not a valid time.\n    Allow times_only is a boolean parameter to filter out times that don't have a valid format.\n    '''\n    if allow_times_only:\n        return re.search('^([A-Za-z0-9]+\\s[A-Za-z0-9_\\-]+\\s[A-Za-z0-9_\\-]+)$', time_pattern"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    '''\n    EXAMPLE\n    date = '2020-02-28'\n    res = change_date_format(date)\n    print(res)\n    '''\n    return dt.split('-')[2] + '-' + dt.split('-')[1] + '-' + dt.split('-')[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # get the date format\n    date_format = dt.split('-')\n    if len(date_format)!= 3:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove all special chars\n    dt = re.sub('[^a-zA-Z0-9_]+',' ',dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace('-','') #replace the - sign with nothing\n    if dt[-1] =='':\n        dt = dt[:-1]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    '''\n    Example 1:\n    Input: dt = \"2019-02-14\"\n    Output: \"2019-02-14\"\n    '''\n    dt = dt.replace('-','')\n    if dt[-1] == '0':\n        dt = dt[:-1]\n    date = re.split(r'[0-9]', dt)\n    if len(date) < 2:\n        return dt\n    date[1] = str(int(date[1]) + 1)\n    return ''.join(date)\ndef convert_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    '''\n    Example 1:\n    Input: dt = \"2019-02-14\"\n    Output: \"2019-02-14\"\n    '''\n    date = re.split(r'[0-9]', dt)\n    if len(date) < 2:\n        return dt\n    date[1] = str(int(date[1]) + 1)\n    return ''.join(date)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = '%d-%m-%Y'\n    return dt.strftime(date_format)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_helper(array, begin, end):\n        while begin < end:\n            mid = (begin + end) // 2\n            for i in range(begin, mid):\n                if array[i] < array[mid]:\n                    temp = array[i]\n                    array[i] = array[mid]\n                    array[mid] = temp\n            array[mid] = array[begin]\n            array[begin] = array[mid]\n            if mid < begin + 1:\n                begin = mid + 1\n    def shell_sort(array):\n        n = len(array)\n        print(array)\n        for i in range(n):\n            shell_sort_helper(array, i, n-1)\n            print(array)\n        return array\n    shell_sort(my_list)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size // 2\n    while gap > 0:\n        for i in range(gap, size):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = len(my_list)\n    \n    # Sort the given array in ascending order\n    for i in range(h):\n        for j in range(h - i - 1):\n            if my_list[j] > my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n    \n    # Sort the given array in descending order\n    for i in range(h - h // 2):\n        for j in range(h - i - 1):\n            if my_list[j] > my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1 \n    while h < n//2:\n        h = h*2 + 1\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #start with our initial list\n    for i in range(len(my_list)):\n        #for every element in the array\n        for j in range(len(my_list) - i - 1):\n            #if the element found is bigger, swap them\n            if my_list[j] > my_list[j + 1]:\n                #swap the found values and swap their position\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = int(n / 2)\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap / 2)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(0,len(my_list)):\n        for j in range(0,len(my_list)-i-1):\n            if my_list[j] > my_list[j+1]:\n                temp = my_list[j]\n                my_list[j] = my_list[j+1]\n                my_list[j+1] = temp\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    array = my_list\n    n = len(array)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The tuples must be of the same length.')\n    else:\n        return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) > 0 and len(test_tup2) > 0:\n        return True\n    return False\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i][0] and test_tup2[i][0])\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    list1 = []\n    list2 = []\n    for element in test_tup1:\n        list1.append(element)\n    for element in test_tup2:\n        list2.append(element)\n    return list1, list2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = ()\n    for i in test_tup1:\n        if i in test_tup2:\n            new_tup = new_tup + (i,)\n    return new_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for x in test_tup1:\n        for y in test_tup2:\n            if x == y:\n                return x, y\n    else:\n        return None\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Your code here\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a > 0:\n        return round(c**(1/2)*a**2,3)\n    if b > 0:\n        return round(c**(1/2)*b**2,3)\n    if c > 0:\n        return round(c**(1/2)*b**2,3)\n    if c == 0:\n        return 0\n    return round(c**(1/2)*b**2,3)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b**2 - 4*a*c) / (2*b)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((a**2) + (b**2))**(-1) * (-c) + a\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    try:\n        return a*a*b*b - 4*a*b*c - (a*b - c*a)*c - (c*b - a*c)*a\n    except TypeError:\n        return 'You have entered incorrect data.'\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a = a;\n    b = b;\n    c = c;\n    \n    if (a == 0):\n        return 0;\n    elif (a == 1):\n        return (b ** 2);\n    elif (a == 2):\n        return (b ** 2 - c ** 2);\n    elif (a == 3):\n        return (b ** 2 + c ** 2);\n    else:\n        return None;\n    \ndef quadratic_formula(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return ((-b) / (2 * a));\n    elif (c == 1):\n        return (b);\n    elif (c == 2):\n        return ((-b) / (2 * a - 1));\n    else:\n        return None;\n        \ndef quadratic_formula2(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2);\n    elif (c == 1):\n        return (b);\n    elif (c == 2):\n        return (b ** 2 - a ** 2);\n    else:\n        return None;\n    \n    \ndef quadratic_formula3(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (b);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula4(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula5(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula6(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula7(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula8(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula9(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula10(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula11(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula12(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula13(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula14(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula15(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula16(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadratic_formula17(a, b, c):\n    '''\n    Write a function to calculate the quadratic formula for the given equations.\n    '''\n    if (c == 0):\n        return (b ** 2 - a ** 2 - 1);\n    elif (c == 1):\n        return (a);\n    elif (c == 2):\n        return (b ** 2 - a ** 2 - 1);\n    else:\n        return None;\n    \ndef quadrati"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 = [],[],[],[],[],[],[]\n    x_1.append(a)\n    y_1.append(b)\n    x_2.append(c)\n    y_2.append(a*a - c*c + b*b)\n    x_3.append(a*a + c*c)\n    y_3.append(a*a + b*b + c*c + d)\n    x_4.append(a*a + b*b + c*c + d)\n    y_4.append(a*a + b*b + c*c + d)\n    return x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(\"Input:\")\n    print(\"a =\", a)\n    print(\"b =\", b)\n    print(\"c =\", c)\n    print(\"Output:\")\n    print(\"d =\", (b**2) - (4*a*c))\n    if (b**2) - (4*a*c) < 0:\n        print(\"The input is not a parabola\")\n    else:\n        print(\"The directrix of a parabola is:\")\n        print(\"d =\", (b**2) - (4*a*c))\n    return\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a <= 0 or b <= 0 or c <= 0:\n        print(\"Enter correct values.\")\n    else:\n        print(\"The directrix is \" + str(round(((a ** 2) + (b ** 2) - (c ** 2)) ** 0.5, 2)) + \".\")\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x0 = a\n    x1 = b\n    x2 = c\n    x = x0 * x1 + x1 * x2 + x2 * x0\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    P = ((-b)**2 + (a)**2)**(1/2)\n    return P\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if len(set(i)) == len(i):\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element = True\n    \n    if len(list1) > len(list2):\n        list1 = list2\n    \n    if len(list2) == len(list1):\n        for elem in list1:\n            if elem in list2:\n                common_element = True\n        \n    return common_element\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    x=0\n    for i in list1:\n        for j in list2:\n            if(x==len(list1)):\n                return False\n            if(i==list2[x]):\n                x+=1\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) > 0 and len(list2) > 0 and list1[0] == list2[0]\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list3 = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list3.append(i)\n    if len(list3) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for x in list1:\n        if x not in list2:\n            return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list3.append(list1[i])\n    if len(list3) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1%2 == 1 and base2%2 == 1:\n        if height == 1:\n            return base1/2\n        elif height == 2:\n            return (base1 + base2)/2\n        elif height == 3:\n            return (base1 + base2 + base2)/3\n    elif base1%2 == 0 and base2%2 == 0:\n        return (base1 + base2)/2\n    elif base1%2 == 1 and base2%2 == 0:\n        return (base1 + base2)/2\n    elif base1%2 == 0 and base2%2 == 1:\n        return (base1 + base2)/2\n    elif base1%2 == 0 and base2%2 == 2:\n        return (base1 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 0:\n        return (base1 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 1:\n        return (base1 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 2:\n        return (base1 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/4\n    elif base1%2 == 0 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 0 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 3 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 3 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 3 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 3 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 3 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 3 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 3 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 2:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 1:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 1 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1%2 == 2 and base2%2 == 3:\n        return (base1 + base2 + base2 + base2)/3\n    elif base1"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    len1 = abs(base1-base2)\n    len2 = abs(base1+height)\n    len3 = abs(base2-base1)\n    len4 = abs(base2+height)\n    if (len1 < len2):\n        return base1\n    elif (len2 < len3):\n        return base2\n    elif (len1 < len4):\n        return base1 + (base2 - base1) / 2\n    else:\n        return base2 + (base1 - base2) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    if height==1:\n        return base1\n    if height==2:\n        return base1+base2\n    if height==3:\n        return base1+base2+base2\n    if height==4:\n        return base1+base2+base2+base2\n    if height==5:\n        return base1+base2+base2+base2+base2\n    if height==6:\n        return base1+base2+base2+base2+base2+base2\n    if height==7:\n        return base1+base2+base2+base2+base2+base2+base2\n    if height==8:\n        return base1+base2+base2+base2+base2+base2+base2+base2\n    if height==9:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==10:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==11:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==12:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==13:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==14:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==15:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==16:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==17:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==18:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==19:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==20:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==21:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==22:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==23:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==24:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==25:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==26:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==27:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==28:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==29:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==30:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==31:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==32:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==33:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==34:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==35:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==36:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==37:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==38:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==39:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==40:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==41:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==42:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==43:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==44:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==45:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==46:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==47:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==48:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==49:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==50:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==51:\n        return base1+base2+base2+base2+base2+base2+base2+base2+base2+base2+base2\n    if height==52:\n        return base1+base2+base2+base2+base"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Your code here\n    result = (base1+base2)/2\n    return result\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length = 0\n    for a in range(0,base1):\n        for b in range(0,base2):\n            length = length + height/4\n    return length\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if not base1 or not base2 or not height:\n        raise Exception(\"Invalid parameters\")\n    \n    return sum(base1) + sum(base2) / 2 + height / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # base1,base2 = (a,b)\n    l1 = height[0]\n    l2 = height[1]\n    if (l1<l2):\n        i = 0\n        j = 0\n        k = 0\n        n = 0\n        while i < len(height)-1:\n            l1 = height[i+1]\n            l2 = height[i]\n            if (l1<l2):\n                i = i+1\n                if (i == len(height)-2):\n                    n = n + 1\n            else:\n                j = i+1\n                k = i\n                if (i == len(height)-1):\n                    n = n + 1\n        if(l1 == l2):\n            n = n+1\n    else:\n        i = 0\n        j = 0\n        k = 0\n        n = 0\n        while i < len(height)-1:\n            l2 = height[i]\n            l1 = height[i+1]\n            if (l1<l2):\n                i = i+1\n                if (i == len(height)-2):\n                    n = n + 1\n            else:\n                j = i+1\n                k = i\n                if (i == len(height)-1):\n                    n = n + 1\n        if(l1 == l2):\n            n = n+1\n        \n    if n>=1:\n        m = (l1+l2)/2\n    else:\n        m = n+1\n    return m\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    b1=base1\n    b2=base2\n    #calculate the slope\n    slope= ((b2-b1)/(height-b1))\n    #calculate the intercept\n    intercept= (height*slope)\n    return intercept\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s1 = base1 * (height/2)\n    s2 = base2 * (height/2)\n    return (s1+s2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    total_area = 0\n    for h in height:\n        total_area += h\n    average_area = total_area / len(height)\n    \n    half_base_height = [average_area * (i + 1) for i in range(len(height) - 1)]\n    trapezium_area = [h * base for h in half_base_height]\n    \n    return sum(trapezium_area) / len(trapezium_area)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr.count(number) == 0:\n        return False\n    elif arr.count(number) > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        if arr[0] > number:\n            return True\n        else:\n            return False\n    elif len(arr) == 2:\n        if arr[1] > number:\n            return True\n        else:\n            return False\n    else:\n        if arr[0] > arr[1]:\n            return True\n        elif arr[1] > arr[2]:\n            return True\n        elif arr[2] > arr[0]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > len(arr):\n        print('The number is greater than the given array')\n        return\n    if number > arr[0]:\n        print('The number is greater than the first element')\n    elif number > arr[-1]:\n        print('The number is greater than the last element')\n    else:\n        for i in range(1,len(arr)):\n            if arr[i] > number:\n                print(f'The number is greater than the {i}th element')\n                break\n        else:\n            print(f'The number is greater than the last element')\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print(f\"{number} is greater than the number in the given array\")\n    if number in arr:\n        return number\n    else:\n        return arr\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr)==0:\n        return False\n    if number < arr[0]:\n        return False\n    if number > arr[-1]:\n        return False\n    if arr[0]>number and arr[-1]>number:\n        return True\n    else:\n        for i in range(0,len(arr)-1):\n            if arr[i]>number:\n                return False\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        print(\"Array is not sorted\")\n        return False\n    else:\n        for i in range(len(arr)):\n            if arr[i] < number:\n                return False\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        return 'Element is greater than the first element'\n    elif arr[-1] > number:\n        return 'Element is greater than the last element'\n    else:\n        return 'Number is equal to the element'\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Write your code here.\n    \n    # print(text)\n    # print('\\n')\n    return text.find('a')>-1\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_one = \"a|b|c|d|e|f\"\n    match_two = \"a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z\"\n    text_list = text.split()\n    for i in range(0, len(text_list)):\n        if text_list[i] == match_one:\n            if i + 1 < len(text_list):\n                if text_list[i+1] == match_two:\n                    return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return (re.search(r'a(?:b)?', text)!= None)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #split the input text into a list of all the words\n    words = re.findall(r'\\w+', text)\n    #find the first b that starts with a\n    b_pattern = re.compile(r'^(?:(?=\\b\\w+\\b))')\n    #find all the words that start with b and are not in the list\n    non_b_words = [w for w in words if not b_pattern.search(w)]\n    #return the list of words that start with a\n    return non_b_words\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('[a-zA-Z]+[a-zA-Z]+')\n    match = pattern.match(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\n    return\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_one_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_two_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_three_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_four_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_five_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_six_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_seven_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_eight_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_nine_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_ten_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_eleven_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_twelve_v(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_one_x(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_two_x(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_three_x(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_four_x(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_five_x(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_six_x(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_seven_x(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_eight_x(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_nine_x(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'a\\b', text)\n    return s\ndef text_match_ten_x(text):\n    '''\n    Write "
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    b_lst = ['b', '.', 'p', 'P']\n    print('1. Text Matching(f)')\n    match_index = 0\n    for match in re.finditer('(a)?(b)?b(c)', text):\n        if(match.group() in b_lst):\n            match_index += 1\n    if(match_index > 0):\n        print('Match found.')\n    else:\n        print('Match not found.')\n    print(f'Number of matches found: {match_index}.')\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #Step 1\n    s=re.search(r'(\\a\\b)', text)\n    #Step 2\n    if s is None:\n        print('no match')\n        return\n    #Step 3\n    print('match at index: '+str(s.start()))\n    print('word: '+str(s.group()))\n    return s.start()\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Break the string up into lines\n    # Use regex to find all words in the string\n    # Split up by spaces\n    # Check if the word starts with a letter\n    # Check for a word ending with b's\n    # Return the lines\n    \n    pattern = r'[a-zA-Z0-9]*[\\[\\]\\d]*'\n    matches = re.findall(pattern, text)\n    \n    # Set the matched pattern to an empty string\n    # If the match is not a match, raise a TypeError\n    # Remove the match from the text\n    # Return the text\n    \n    for match in matches:\n        text = text.replace(match, '', 1)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    def text_match_two(text):\n        '''\n        Write a function that matches a string that has an a followed by one or more b's.\n        '''\n        def text_match_three(text):\n            '''\n            Write a function that matches a string that has an a followed by one or more b's.\n            '''\n            def text_match_four(text):\n                '''\n                Write a function that matches a string that has an a followed by one or more b's.\n                '''\n                def text_match_five(text):\n                    '''\n                    Write a function that matches a string that has an a followed by one or more b's.\n                    '''\n                    def text_match_six(text):\n                        '''\n                        Write a function that matches a string that has an a followed by one or more b's.\n                        '''\n                        def text_match_seven(text):\n                            '''\n                            Write a function that matches a string that has an a followed by one or more b's.\n                            '''\n                            def text_match_eight(text):\n                                '''\n                                Write a function that matches a string that has an a followed by one or more b's.\n                                '''\n                                def text_match_nine(text):\n                                    '''\n                                    Write a function that matches a string that has an a followed by one or more b's.\n                                    '''\n                                    def text_match_ten(text):\n                                        '''\n                                        Write a function that matches a string that has an a followed by one or more b's.\n                                        '''\n                                        def text_match_eleven(text):\n                                            '''\n                                            Write a function that matches a string that has an a followed by one or more b's.\n                                            '''\n                                            def text_match_twelve(text):\n                                                '''\n                                                Write a function that matches a string that has an a followed by one or more b's.\n                                                '''\n                                                def text_match_thirteen(text):\n                                                    '''\n                                                    Write a function that matches a string that has an a followed by one or more b's.\n                                                    '''\n                                                    def text_match_fourteen(text):\n                                                        '''\n                                                        Write a function that matches a string that has an a followed by one or more b's.\n                                                        '''\n                                                        def text_match_fifteen(text):\n                                                            '''\n                                                            Write a function that matches a string that has an a followed by one or more b's.\n                                                            '''\n                                                            def text_match_sixteen(text):\n                                                                '''\n                                                                Write a function that matches a string that has an a followed by one or more b's.\n                                                                '''\n                                                                def text_match_seventeen(text):\n                                                                    '''\n                                                                    Write a function that matches a string that has an a followed by one or more b's.\n                                                                    '''\n                                                                    def text_match_eighteen(text):\n                                                                        '''\n                                                                        Write a function that matches a string that has an a followed by one or more b's.\n                                                                        '''\n                                                                        def text_match_nineteen(text):\n                                                                            '''\n                                                                            Write a function that matches a string that has an a followed by one or more b's.\n                                                                            '''\n                                                                            def text_match_twenty(text):\n                                                                                '''\n                                                                                Write a function that matches a string that has an a followed by one or more b's.\n                                                                                '''\n                                                                                def text_match_twentyone(text):\n                                                                        print('Text Match twenty one')\n                                                                        def text_match_twentytwo(text):\n                                                                            print('Text Match twenty two')\n                                                                            def text_match_twentythree(text):\n                                                                                print('Text Match twenty three')\n                                                                                def text_match_twentyfour(text):\n                                                                                    print('Text Match twenty four')\n                                                                                    def text_match_twentyfive(text):\n                                                                                        print('Text Match twenty five')\n                                                                                        def text_match_twentysix(text):\n                                                                                            print('Text Match twenty six')\n                                                                                            def text_match_twentysixone(text):\n                                                                                                print('Text Match twenty six one')\n                                                                                                def text_match_twentyseven(text):\n                                                                                                    print('Text Match twenty seven')\n                                                                                                    def text_match_twentyeight(text):\n                                                                                                        print('Text Match twenty eight')\n                                                                                                    def text_match_twentynine(text):\n                                                                                                            print('Text Match twenty nine')\n                                                                                                        def text_match_twentyten(text):\n                                                                                                                print('Text Match twenty ten')\n                                                                                                        def text_match_twentyeleven(text):\n                                                                                                                    print('Text Match twenty eleven')\n                                                                                                                def text_match_twentylarge(text):\n                                                                                                                        print('Text Match twenty large')\n                                                                                                                    def text_match_twentyfiveone(text):\n                                                                                                                                            print('Text Match twenty five one')\n                                                                                                                                                def text_match_twentysixone(text):\n                                                                                                                                                                        print('Text Match twenty six one')\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \nn
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    digits = 0\n    while n > 0 :\n        n, remainder = divmod(n, 10)\n        digits = digits + remainder\n    if digits == 0 :\n        return '0'\n    else :\n        return str(digits)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    dig = n % 10\n    n = n // 10\n    return dig\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    i = len(str(n))\n    while i >= 1 :\n        n = n // 10\n        i -= 1\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 : return n\n    else : return last_Digit(n//10) + last_Digit(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #print(n)\n    num = str(n)\n    #print(num)\n    last_digit = len(num)-1\n    return num[last_digit]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 : return 0\n    if n < 0 : return -1\n    if n == 1 : return 1\n    if n % 10 == 0 :\n        return last_Digit(n//10)\n    if n % 10 == 9 :\n        return last_Digit(n//10) + 1\n    else : return n//10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg = []\n    for i in list1:\n        if i < 0:\n            list_neg.append(-i)\n        else:\n            pass\n    return list_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1.reverse()\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    temp_list = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            temp_list.append(-1*list1[i])\n        else:\n            temp_list.append(list1[i])\n    return temp_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1.sort()\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    def neg_nos_one(list1):\n        '''\n        Write a python function to return the negative numbers in a list.\n        '''\n        return -list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(-i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    numbers = []\n    for i in list1:\n        numbers.append(-i)\n    return numbers\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg=[]\n    for num in list1:\n        if num < 0:\n            neg.append(-1*num)\n        else:\n            neg.append(num)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = [x for x in list1 if x < 0]\n    return l1\n    \nl1 = [1,-4,6,0,-5,7,-8,0,0,0,5,6,0,0,5]\nprint(neg_nos(l1)"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Write your code here\n    string = str1\n    odd_char = ['O','O','O','O']\n    \n    for i in range(len(string)):\n        if string[i] not in odd_char:\n            string = string[:i] + string[i+1:]\n    \n    return string\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(remove_odd(str1))\n    \ndef remove_odd_with_split(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(remove_odd_with_split(str1))\n    \ndef remove_duplicates(str1):\n    '''\n    Write a function that removes duplicate characters from a string.\n    '''\n    print(remove_duplicates(str1))\n    \ndef remove_duplicates_with_split(str1):\n    '''\n    Write a function that removes duplicate characters from a string.\n    '''\n    print(remove_duplicates_with_split(str1))\n    \ndef remove_word(str1, word):\n    '''\n    Write a function that removes words from a string.\n    '''\n    print(remove_word(str1, word))\n    \ndef remove_digits(str1):\n    '''\n    Write a function that removes digits from a string.\n    '''\n    print(remove_digits(str1))\n    \ndef remove_digits_with_split(str1):\n    '''\n    Write a function that removes digits from a string.\n    '''\n    print(remove_digits_with_split(str1))\n    \ndef remove_numbers(str1):\n    '''\n    Write a function that removes numbers from a string.\n    '''\n    print(remove_numbers(str1))\n    \ndef remove_numbers_with_split(str1):\n    '''\n    Write a function that removes numbers from a string.\n    '''\n    print(remove_numbers_with_split(str1))\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function that removes punctuation from a string.\n    '''\n    print(remove_punctuation(str1))\n    \ndef remove_punctuation_with_split(str1):\n    '''\n    Write a function that removes punctuation from a string.\n    '''\n    print(remove_punctuation_with_split(str1))\n    \ndef remove_special_chars(str1):\n    '''\n    Write a function that removes special chars from a string.\n    '''\n    print(remove_special_chars(str1))\n    \ndef remove_special_chars_with_split(str1):\n    '''\n    Write a function that removes special chars from a string.\n    '''\n    print(remove_special_chars_with_split(str1))\n    \ndef remove_digits_and_numbers(str1):\n    '''\n    Write a function that removes digits and numbers from a string.\n    '''\n    print(remove_digits_and_numbers(str1))\n    \ndef remove_digits_and_numbers_with_split(str1):\n    '''\n    Write a function that removes digits and numbers from a string.\n    '''\n    print(remove_digits_and_numbers_with_split(str1))\n    \ndef remove_extra_spaces(str1):\n    '''\n    Write a function that removes extra spaces from a string.\n    '''\n    print(remove_extra_spaces(str1))\n    \ndef remove_extra_spaces_with_split(str1):\n    '''\n    Write a function that removes extra spaces from a string.\n    '''\n    print(remove_extra_spaces_with_split(str1))\n    \ndef remove_special_chars_and_numbers(str1):\n    '''\n    Write a function that removes special chars and numbers from a string.\n    '''\n    print(remove_special_chars_and_numbers(str1))\n    \ndef remove_special_chars_and_numbers_with_split(str1):\n    '''\n    Write a function that removes special chars and numbers from a string.\n    '''\n    print(remove_special_chars_and_numbers_with_split(str1))\n    \ndef remove_space_with_punctuation(str1):\n    '''\n    Write a function that removes spaces with punctuation from a string.\n    '''\n    print(remove_space_with_punctuation(str1))\n    \ndef remove_space_with_punctuation_with_split(str1):\n    '''\n    Write a function that removes spaces with punctuation from a string.\n    '''\n    print(remove_space_with_punctuation_with_split(str1))\n    \ndef remove_special_chars_and_digits(str1):\n    '''\n    Write a function that removes special chars and digits from a string.\n    '''\n    print(remove_special_chars_and_digits(str1))\n    \ndef remove_special_chars_and_digits_with_split(str1):\n    '''\n    Write a function that removes special chars and digits from a string.\n    '''\n    print(remove_special_chars_and_digits_with_split(str1))\n    \ndef remove_digits_and_special_chars(str1):\n    '''\n    Write a function that removes digits and special characters from a string.\n    '''\n    print(remove_digits_and_special_chars(str1))\n    \ndef remove_digits_and_special_chars_with_split(str1):\n    '''\n    Write a function that removes digits and special characters from a string.\n    '''\n    print(remove_digits_and_special_chars_with_split(str1))\n    \ndef remove_all_digits(str1):\n    '''\n    Write a function that removes all digits from a string.\n    '''\n    print(remove_all_digits(str1))\n    \ndef remove_all_digits_with_split(str1):\n    '''\n    Write a function that removes all digits from a string.\n    '''\n    print(remove_all_digits_with_split(str1))\n    \ndef remove_all_numbers(str1):\n    '''\n    Write a function that removes all numbers from a string.\n    '''\n    print(remove_all_numbers(str1))\n    \ndef remove_all_numbers_with_split(str1):\n    '''\n    Write a function that removes all numbers from a string.\n    '''\n    print(remove_all_numbers_with_split(str1))\n    \ndef remove_all_special_chars(str1):\n    '''\n    Write a function that removes all special chars from a string.\n    '''\n    print(remove_all_special_chars(str1))\n    \ndef remove_all_special_chars_with_split(str1):\n    '''\n    Write a function that removes all special chars from a string.\n    '''\n    print(remove_all_special_chars_with_split(str1))\n    \ndef remove_all_digits_and_special_chars(str1):\n    '''\n    Write a function that removes all digits and special characters from a string.\n    '''\n    print(remove_all_digits_and_special_chars(str1))\n    \ndef remove_all_digits_and_special_chars_with_split(str1):\n    '''\n    Write a function that removes all digits and special characters from a string.\n    '''\n    print(remove_all_digits_and_special_chars_with_split(str1))\n    \ndef remove_digits_and_special_chars_and_digits(str1):\n    '''\n    Write a function that removes digits and special characters and digits from a string.\n    '''\n    print(remove_digits_and_special_chars_and_digits(str1))\n    \ndef remove_digits_and_special_chars_and_digits_with_split(str1):\n    '''\n    Write a function that removes digits and special characters and digits from a string.\n    '''\n    print(remove_digits_and_special_chars_and_digits_with_split(str1))\n    \ndef remove_digits_and_special_chars_and_digits_and_special_chars(str1):\n    '''\n    Write a function that removes digits and special characters and digits an"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if i%2!=0:\n            new_str.append(str1[i])\n        else:\n            continue\n    return ''.join(new_str)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    l = []\n    for i in str1:\n        if i % 2!= 0:\n            l.append(i)\n    return ''.join(l)\n    \ndef string_compare(s1, s2):\n    '''\n    Write a function to check if two strings are equal.\n    '''\n    return s1 == s2\n    \ndef swap_values(arr, val1, val2):\n    '''\n    Write a function to swap values of an array element.\n    '''\n    arr[val1], arr[val2] = arr[val2], arr[val1]\n    \ndef merge_sort(arr, left, right):\n    '''\n    Write a function to sort an array of numbers.\n    '''\n    if left == right:\n        return arr\n    mid = (left + right) // 2\n    left_arr = merge_sort(arr, left, mid)\n    right_arr = merge_sort(arr, mid + 1, right)\n    return merge(left_arr, right_arr)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1=[]\n    for char in str1:\n        if char%2==0:\n            list1.append(char)\n    return ''.join(list1)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # your code goes here\n    l1=[]\n    for i in str1:\n        if i%2==1:\n            l1.append(i)\n    return ''.join(l1)\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    str2=''\n    for char in str1:\n        if char % 2 == 0:\n            str2+=char\n        else:\n            str2=str2+char\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = ''\n    for char in str1:\n        if(char%2!=0):\n            res = res + char\n    return res\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    even_letters = []\n    odd_letters = []\n    count = 0\n    for i in range(len(str1)):\n        if (str1[i] % 2 == 0):\n            even_letters.append(str1[i])\n        else:\n            odd_letters.append(str1[i])\n        count += 1\n        if (count == 2):\n            break\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_bidirectional = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count_bidirectional += 1\n    return count_bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    count = 0\n    \n    for element in test_list:\n        if element[1] == element[0]:\n            count += 1\n        else:\n            count += 1\n    \n    return count\n    \ndef count_alphabetical(test_list):\n    '''\n    Write a function to count alphabetical tuples.\n    '''\n    \n    count = 0\n    \n    for element in test_list:\n        if element[0] == element[1]:\n            count += 1\n        else:\n            count += 1\n    \n    return count\n    \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_list = []\n    count_dict = {}\n    count = 0\n    for x in test_list:\n        if x[0] not in count_dict.keys():\n            count_dict[x[0]] = 1\n        else:\n            count_dict[x[0]] += 1\n    for i in count_dict.items():\n        count_list.append(i[1])\n    count_list.sort()\n    for i in count_list:\n        count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    \n    for elem in test_list:\n        if len(elem) > 2:\n            total += 1\n    return total\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_set = set(test_list)\n    test_list = list(test_set)\n    bidirectional_dict = {}\n    for item in test_list:\n        if item not in bidirectional_dict:\n            bidirectional_dict[item] = 0\n        bidirectional_dict[item] += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n-1):\n        if test_list[i][1] > test_list[i+1][0] and test_list[i][0] > test_list[i+1][1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    count = 0\n    \n    for i in test_list:\n        if i[0][1] == 'B' and i[1][1] == 'B':\n            count += 1\n        elif i[0][1] == 'B' and i[1][1] == 'L':\n            count += 1\n        elif i[0][1] == 'B' and i[1][1] == 'R':\n            count += 1\n        elif i[0][1] == 'R' and i[1][1] == 'R':\n            count += 1\n        elif i[0][1] == 'L' and i[1][1] == 'L':\n            count += 1\n        elif i[0][1] == 'L' and i[1][1] == 'B':\n            count += 1\n        elif i[0][1] == 'R' and i[1][1] == 'B':\n            count += 1\n        elif i[0][1] == 'R' and i[1][1] == 'L':\n            count += 1\n    \n    return count\n    \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = dict()\n    for i in test_list:\n        if i[0] in counter:\n            counter[i[0]] += 1\n        else:\n            counter[i[0]] = 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bi_dict = {}\n    bi_dict_s = {}\n    \n    for tup in test_list:\n        if tup[0] not in bi_dict:\n            bi_dict[tup[0]] = []\n        if tup[1] not in bi_dict:\n            bi_dict[tup[1]] = []\n        bi_dict[tup[0]].append(tup[1])\n        bi_dict[tup[1]].append(tup[0])\n        \n    return bi_dict\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # NOTE:  This function takes a list of integers and joins them into a single integer.\n    # NOTE:  If the list is empty, return 0\n    # NOTE:  If the list is of length 1, return 1\n    # NOTE:  If the list is of length > 1, return 0\n    # NOTE:  If the list is already a single integer, return the original list.\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = \"\".join(map(str, L))\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return int(\"\".join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if type(L) is not list:\n        return None\n    if L == []:\n        return []\n    if len(L) == 0:\n        return 0\n    if type(L[0]) is not int:\n        return None\n    return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    temp = []\n    for e in L:\n        temp.append(int(e))\n    return int(''.join(str(e) for e in temp))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = \"\"\n    for i in L:\n        s += str(i) + \" \"\n    return int(s[:-1])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    l = []\n    for i in range(len(L)):\n        l.append(L[i])\n    return int(''.join(l))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join_multiple(arr):\n        temp = 0\n        for i in range(len(arr)):\n            temp += arr[i]*(2**i)\n        return temp\n    return join_multiple(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([L[i] for i in range(len(L))])"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'adverb':\n            if(text[x+1].lower() =='s'):\n                x = x + 2\n            else:\n                x = x + 1\n        else:\n            x = x + 1\n    return x\ndef find_adverb(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'adverb':\n            if(text[x+1].lower() =='s'):\n                x = x + 2\n            else:\n                x = x + 1\n        else:\n            x = x + 1\n    return x\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() =='verb':\n            if(text[x+1].lower() =='s'):\n                x = x + 2\n            else:\n                x = x + 1\n        else:\n            x = x + 1\n    return x\ndef find_verb(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() =='verb':\n            if(text[x+1].lower() =='s'):\n                x = x + 2\n            else:\n                x = x + 1\n        else:\n            x = x + 1\n    return x\ndef find_final_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'final':\n            if(text[x+1].lower() =='s'):\n                x = x + 2\n            else:\n                x = x + 1\n        else:\n            x = x + 1\n    return x\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'adjective':\n            if(text[x+1].lower() =='s'):\n                x = x + 2\n            else:\n                x = x + 1\n        else:\n            x = x + 1\n    return x\ndef find_adjective(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'adjective':\n            if(text[x+1].lower() =='s'):\n                x = x + 2\n            else:\n                x = x + 1\n        else:\n            x = x + 1\n    return x\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'noun':\n            if(text[x+1].lower() =='s'):\n                x = x + 2\n            else:\n                x = x + 1\n        else:\n            x = x + 1\n    return x\ndef find_noun(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'noun':\n            if(text[x+1].lower() =='s'):\n                x = x + 2\n            else:\n                x = x + 1\n        else:\n            x = x + 1\n    return x\ndef find_in_final_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'final' and text[x+1].lower() =='s':\n            x = x + 2\n        else:\n            x = x + 1\n    return x\ndef find_in_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'adjective' and text[x+1].lower() =='s':\n            x = x + 2\n        else:\n            x = x + 1\n    return x\ndef find_in_adverb_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'adverb' and text[x+1].lower() =='s':\n            x = x + 2\n        else:\n            x = x + 1\n    return x\ndef find_in_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'noun' and text[x+1].lower() =='s':\n            x = x + 2\n        else:\n            x = x + 1\n    return x\ndef find_in_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() =='verb' and text[x+1].lower() =='s':\n            x = x + 2\n        else:\n            x = x + 1\n    return x\ndef find_in_adverb(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'adjective' and text[x+1].lower() =='s':\n            x = x + 2\n        else:\n            x = x + 1\n    return x\ndef find_in_verb(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() =='verb' and text[x+1].lower() =='s':\n            x = x + 2\n        else:\n            x = x + 1\n    return x\ndef find_final_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'final' and text[x+1].lower() =='s':\n            x = x + 2\n        else:\n            x = x + 1\n    return x\ndef find_in_adjective_final(text):\n    '''\n    Write a function to find the first adjective and their final positions in a given sentence.\n    '''\n    x = 0\n    while(x+1 < len(text)):\n        if text[x].lower() == 'adjective' and text[x+1].lower() == 'final':\n            x = x + 2\n        else:\n            x = x + 1\n    return x\ndef find_in_adverb_final(text):\n    '''\n    Write a function to find the first adjective and their final positions in a given sentence."
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all adverbs in sentence\n    # remove adverbs that have no previous words\n    # format\n    # in the middle of the sentence, the next word starts with an \"adverb\"\n    # if there are no previous words, a single word (\"adverb\") is added to the sentence\n    # if there are previous words, a single word (\"adverb\") is added to the sentence\n    # if there is only one previous word, a single word is added to the sentence\n    # if there are multiple previous words, a single word is added to the sentence\n    # if there is only one previous word, a single word is added to the sentence\n    # if there are multiple previous words, a single word is added to the sentence\n    adverbs = re.findall(r\"^\\w+[\\w\\!]+?$\", text)\n    words = re.findall(r\"\\w+\", text)\n    word_count = len(words)\n    adverb_positions = [0] * word_count\n    i = 0\n    while i < word_count:\n        next_word = words[i]\n        if next_word in adverbs:\n            adverb_positions[i] = 1\n            i = i + 1\n        else:\n            i = i + 1\n    adverb_positions = [adverb_positions[i] for i in range(word_count) if adverb_positions[i] > 0]\n    adverb_positions.sort()\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return find_adverb(text, position=0)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    adverb_positions = []\n    position = 0\n    # find all the adverbs\n    for i, word in enumerate(text):\n        if word in ['a','e','i','o','u']:\n            adverb_positions.append(position)\n            position += 1\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def find_adverb(text):\n        '''\n        Read the text and find the first adverb\n        '''\n        adverb_list = ['a', 'e', 'i', 'o', 'u']\n        adverb_position = []\n        for i in adverb_list:\n            if re.search(i, text):\n                adverb_position.append(text.find(i))\n        return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #find all adverb positions\n    result = re.findall(r'\\w*[aeiou]\\w*', text)\n    #add adverb to a list\n    list_adverbs = []\n    for word in result:\n        list_adverbs.append(word[:2])\n    #sort list\n    list_adverbs.sort()\n    #get the first adverb\n    adverb = list_adverbs[0]\n    #get all possible positions of the adverb\n    result = re.findall(r'\\w*\\w*\\w*', text)\n    possible_positions = []\n    for word in result:\n        possible_positions.append(word[:word.find('_')])\n    #check if the adverb is in the possible positions\n    if adverb in possible_positions:\n        return [adverb, possible_positions.index(adverb)]\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    adverb_positions = [re.findall(pattern, text)]\n    adverb_positions.sort()\n    adverb_positions.reverse()\n    \n    if len(adverb_positions) == 0:\n        return None, None\n    else:\n        #adverb_positions.sort(key = lambda pos: len(pos))\n        adverb_positions.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return adverb_positions[0], adverb_positions[-1]\n    \n    \ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    noun_positions = [re.findall(pattern, text)]\n    noun_positions.sort()\n    noun_positions.reverse()\n    \n    if len(noun_positions) == 0:\n        return None, None\n    else:\n        #noun_positions.sort(key = lambda pos: len(pos))\n        noun_positions.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return noun_positions[0], noun_positions[-1]\n    \n    \ndef find_nouns(text):\n    '''\n    Write a function to find the first nouns and their positions in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    noun_positions = [re.findall(pattern, text)]\n    noun_positions.sort()\n    noun_positions.reverse()\n    \n    if len(noun_positions) == 0:\n        return None, None\n    else:\n        #noun_positions.sort(key = lambda pos: len(pos))\n        noun_positions.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return noun_positions[0], noun_positions[-1]\n    \n    \ndef find_verbs(text):\n    '''\n    Write a function to find the first verbs and their positions in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    verb_positions = [re.findall(pattern, text)]\n    verb_positions.sort()\n    verb_positions.reverse()\n    \n    if len(verb_positions) == 0:\n        return None, None\n    else:\n        #verb_positions.sort(key = lambda pos: len(pos))\n        verb_positions.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return verb_positions[0], verb_positions[-1]\n    \n    \ndef find_prepositions(text):\n    '''\n    Write a function to find the first prepositions and their positions in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    preposition_positions = [re.findall(pattern, text)]\n    preposition_positions.sort()\n    preposition_positions.reverse()\n    \n    if len(preposition_positions) == 0:\n        return None, None\n    else:\n        #preposition_positions.sort(key = lambda pos: len(pos))\n        preposition_positions.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return preposition_positions[0], preposition_positions[-1]\n    \n    \ndef find_noun_verb(text):\n    '''\n    Write a function to find the first noun and a verb in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    noun_verb_positions = [re.findall(pattern, text)]\n    noun_verb_positions.sort()\n    noun_verb_positions.reverse()\n    \n    if len(noun_verb_positions) == 0:\n        return None, None\n    else:\n        #noun_verb_positions.sort(key = lambda pos: len(pos))\n        noun_verb_positions.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return noun_verb_positions[0], noun_verb_positions[-1]\n    \n    \ndef find_non_abusive_nouns(text):\n    '''\n    Write a function to find the first non-abusive nouns and their positions in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    non_abusive_nouns = [re.findall(pattern, text)]\n    non_abusive_nouns.sort()\n    non_abusive_nouns.reverse()\n    \n    if len(non_abusive_nouns) == 0:\n        return None, None\n    else:\n        #non_abusive_nouns.sort(key = lambda pos: len(pos))\n        non_abusive_nouns.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return non_abusive_nouns[0], non_abusive_nouns[-1]\n    \n    \ndef find_prepositions_nouns(text):\n    '''\n    Write a function to find the first prepositions and nouns in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    preposition_nouns = [re.findall(pattern, text)]\n    preposition_nouns.sort()\n    preposition_nouns.reverse()\n    \n    if len(preposition_nouns) == 0:\n        return None, None\n    else:\n        #preposition_nouns.sort(key = lambda pos: len(pos))\n        preposition_nouns.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return preposition_nouns[0], preposition_nouns[-1]\n    \n    \ndef find_adj_verbs(text):\n    '''\n    Write a function to find the first adjectives and verbs in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    adj_verbs = [re.findall(pattern, text)]\n    adj_verbs.sort()\n    adj_verbs.reverse()\n    \n    if len(adj_verbs) == 0:\n        return None, None\n    else:\n        #adj_verbs.sort(key = lambda pos: len(pos))\n        adj_verbs.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return adj_verbs[0], adj_verbs[-1]\n    \n    \ndef find_verb_positions(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    #Your code goes here.\n    pattern = r'(^|(?=\\w))(\\w+)+?'\n    verb_positions = [re.findall(pattern, text)]\n    verb_positions.sort()\n    verb_positions.reverse()\n    \n    if len(verb_positions) == 0:\n        return None, None\n    else:\n        #verb_positions.sort(key = lambda pos: len(pos))\n        verb_positions.sort(key = lambda pos: len(re.findall(pattern, pos)))\n        return verb_positions[0], verb_positions[-1]\n    \n    \ndef find_prepositions_verbs(text):\n    '''\n    Write a function to find the first prepositions and verbs in a given sentenc"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b')\n    res = re.search(pattern, text)\n    pos_list = []\n    if res is None:\n        return pos_list\n    pos_list.append(res.start())\n    i = res.start()\n    while i < len(text):\n        if text[i].isdigit():\n            pos_list.append(i)\n        i += 1\n    return pos_list\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\w*\\s+[a-z]+\\s+','', text)\n    text = re.sub(r'\\w+\\s+','', text)\n    adverbs = re.findall(r'\\w+', text)\n    if len(adverbs) > 1:\n        i = 0\n        while i < len(adverbs) - 1:\n            if adverbs[i] == 'adverb':\n                i += 1\n                if i == len(adverbs) - 1:\n                    return (i, len(adverbs) - 1)\n                elif adverbs[i + 1] == 'adverb':\n                    i += 1\n                    return (i, i + 1)\n            else:\n                i += 1\n    return (0, len(adverbs) - 1)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # break text into a list of all words\n    word_list = re.split(\"\\W+\", text)\n    # split text into a list of words\n    words = re.split(\"\\W+\", text)\n    # begin the loop and find the adverbs\n    adverbs = []\n    for word in words:\n        if word.lower() == 'a':\n            adverbs.append(word)\n        if word.lower() == 'e':\n            adverbs.append(word)\n        if word.lower() == 'i':\n            adverbs.append(word)\n        if word.lower() == 'o':\n            adverbs.append(word)\n        if word.lower() == 'u':\n            adverbs.append(word)\n        if word.lower() == 'y':\n            adverbs.append(word)\n        if word.lower() == 'r':\n            adverbs.append(word)\n        if word.lower() =='s':\n            adverbs.append(word)\n        if word.lower() == 't':\n            adverbs.append(word)\n    # return adverbs and their positions\n    return adverbs, word_list\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**3)*np.pi*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    A = 0.5 * l * (l + 1)\n    return A\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                s += (3.14159*l**3)*(i**2)*(j**2)*(k**2)\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l*l*l*l\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l[0][0]*l[1][1]*l[2][2]\n    b = l[0][0]*l[1][2]*l[2][1]\n    c = l[0][1]*l[1][2]*l[2][2]\n    d = l[0][2]*l[1][1]*l[2][0]\n    e = l[1][0]*l[2][1]*l[2][2]\n    f = l[2][0]*l[2][2]*l[0][1]\n    return a+b+c+d+e+f\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                area += abs(x-y-z)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface = 0\n    for row in range(l):\n        for col in range(l):\n            surface += l * l\n    return surface\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfaceArea = 0\n    for i in range(0,l):\n        surfaceArea = surfaceArea + (1/3) * (l ** 3)\n    return surfaceArea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 0.5*(l*l)*3.14*l**3\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count=0\n    for i in nums:\n        if i>0:\n            positive_count+=1\n    return positive_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count / len(nums)\n    \ndef average(nums):\n    '''\n    Write a function to calculate the average of an array of numbers.\n    '''\n    count = 0\n    sum = 0\n    for num in nums:\n        sum += num\n        count += 1\n    return sum / count\n    \ndef max_min(nums):\n    '''\n    Write a function to find the max of an array of numbers.\n    '''\n    smallest = nums[0]\n    biggest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > biggest:\n            biggest = num\n    return smallest, biggest\n    \ndef max_product(nums):\n    '''\n    Write a function to find the max product of an array of numbers.\n    '''\n    biggest_product = 1\n    for num in nums:\n        if num > biggest_product:\n            biggest_product = num\n    return biggest_product\n    \ndef min_product(nums):\n    '''\n    Write a function to find the min product of an array of numbers.\n    '''\n    smallest_product = 1\n    for num in nums:\n        if num < smallest_product:\n            smallest_product = num\n    return smallest_product\n    \ndef midpoint(nums):\n    '''\n    Write a function to find the midpoint of an array of numbers.\n    '''\n    first_value = 0\n    last_value = len(nums) - 1\n    while first_value <= last_value:\n        midpoint = (first_value + last_value) / 2\n        value = nums[midpoint]\n        if value < midpoint:\n            first_value = midpoint + 1\n        elif value > midpoint:\n            last_value = midpoint - 1\n        else:\n            return midpoint\n    return None\n    \ndef frequency(nums):\n    '''\n    Write a function to find the frequency of each unique value in an array of numbers.\n    '''\n    frequency_dict = {}\n    for num in nums:\n        if num not in frequency_dict:\n            frequency_dict[num] = 1\n        else:\n            frequency_dict[num] += 1\n    return frequency_dict\n    \ndef find_prob(nums, threshold):\n    '''\n    Write a function to find the probability of the number given as argument.\n    '''\n    probability_dict = frequency(nums)\n    if threshold in probability_dict:\n        return probability_dict[threshold]\n    else:\n        return None\n    \ndef longest_consec(nums):\n    '''\n    Write a function to find the longest consecutive element in an array of integers.\n    '''\n    start = 0\n    last_prob = 0\n    if positive_count(nums) > 0:\n        last_prob = find_prob(nums, 0)\n    for start in range(len(nums)):\n        prob = find_prob(nums, start)\n        if prob > last_prob:\n            last_prob = prob\n        else:\n            pass\n    return last_prob\n    \ndef smallest_consec(nums):\n    '''\n    Write a function to find the smallest consecutive element in an array of integers.\n    '''\n    start = 0\n    last_prob = 0\n    if negative_count(nums) > 0:\n        last_prob = find_prob(nums, 0)\n    for start in range(len(nums)):\n        prob = find_prob(nums, start)\n        if prob > last_prob:\n            last_prob = prob\n        else:\n            pass\n    return last_prob\n    \ndef middle_consec(nums):\n    '''\n    Write a function to find the middle consecutive element in an array of integers.\n    '''\n    start = 0\n    if positive_count(nums) > 0:\n        last_prob = find_prob(nums, 0)\n    else:\n        last_prob = None\n    for start in range(len(nums)):\n        prob = find_prob(nums, start)\n        if prob > last_prob:\n            last_prob = prob\n        else:\n            pass\n    return (start + len(nums) // 2) / 2\n    \ndef last_consec(nums):\n    '''\n    Write a function to find the last consecutive element in an array of integers.\n    '''\n    start = 0\n    last_prob = 0\n    if negative_count(nums) > 0:\n        last_prob = find_prob(nums, 0)\n    for start in range(len(nums)):\n        prob = find_prob(nums, start)\n        if prob > last_prob:\n            last_prob = prob\n        else:\n            pass\n    return last_prob\n    \ndef max_sum(nums):\n    '''\n    Write a function to find the maximum sum of an array of numbers.\n    '''\n    current_max = 0\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum > current_max:\n            current_max = current_sum\n    return current_max\n    \ndef mean(nums):\n    '''\n    Write a function to find the mean of an array of numbers.\n    '''\n    return average(nums)\n    \ndef median(nums):\n    '''\n    Write a function to find the median of an array of numbers.\n    '''\n    if positive_count(nums) > 0:\n        count = positive_count(nums)\n        if len(nums) % 2 == 0:\n            mid = len(nums) // 2\n            if nums[mid] <= nums[mid - 1]:\n                return nums[mid]\n            else:\n                return nums[mid]\n        else:\n            mid = len(nums) // 2\n            if nums[mid] <= nums[mid + 1]:\n                return nums[mid]\n            else:\n                return nums[mid]\n    else:\n        count = negative_count(nums)\n        if len(nums) % 2 == 0:\n            mid = len(nums) // 2\n            if nums[mid] <= nums[mid - 1]:\n                return nums[mid]\n            else:\n                return nums[mid]\n        else:\n            mid = len(nums) // 2\n            if nums[mid] <= nums[mid + 1]:\n                return nums[mid]\n            else:\n                return nums[mid]\n    \ndef mode(nums):\n    '''\n    Write a function to find the mode of an array of integers.\n    '''\n    count = positive_count(nums)\n    if count == 0:\n        return None\n    elif count == 1:\n        return nums[0]\n    else:\n        mode_count = 0\n        for i in nums:\n            if i % count == 0:\n                mode_count += 1\n        return mode_count // len(nums)\n    \ndef stdev(nums):\n    '''\n    Write a function to find the standard deviation of an array of integers.\n    '''\n    mean = mean(nums)\n    deviations = []\n    if positive_count(nums) > 0:\n        for i in range(len(nums)):\n            deviations.append(nums[i] - mean)\n    else:\n        for i in range(len(nums)):\n            deviations.append(nums[i] - mean)\n    return (sum(deviations) / len(nums)) ** 0.5\n    \ndef mode_count(nums):\n    '''\n    Write a function to find the mode of an array of integers"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for i in nums:\n        if i > 0:\n            positive += 1\n    return positive/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return max(nums) - min(nums)\n    else:\n        pos_num = nums[0]\n        neg_num = nums[-1]\n        if neg_num == 0:\n            return 1\n        elif pos_num == 0:\n            return neg_num\n        else:\n            ratio = 1\n            for i in range(1, len(nums)):\n                ratio = ratio * (neg_num / (i-1))\n            return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    s = 0\n    for i in nums:\n        if i > 0:\n            s += i\n    return s/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in range(0,len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total_num_pos = 0\n    for i in nums:\n        if i > 0:\n            total_num_pos += 1\n    return total_num_pos/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    ratio=nums.count(0)\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Write your code here.\n    count=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    # Write your code here.\n    count=0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count\ndef main():\n    nums=array('i',[2,4,-3,1,-5,6])\n    print(positive_count(nums))\n    print(negative_count(nums))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(len(list1)): \n        if list1[i] < 0: \n            if list1[i] > max_neg: \n                max_neg = list1[i] \n    return max_neg \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negative = 0 \n    for item in list1:\n        if -item > negative:\n            negative = item\n    return negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    if list1[-1] < 0:\n        return list1[-1]\n    else:\n        return list1[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in list1:\n        if i < 0:\n            max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    sorted_list = sorted(list1, reverse=True)\n    return sorted_list[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maximum_negative = 0\n    for num in list1:\n        if num < 0:\n            negative = num\n            if negative > maximum_negative:\n                maximum_negative = negative\n    return maximum_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    if list1==[]:\n        return -1\n    \n    if len(list1)==1:\n        return -1\n    \n    if list1[0]<list1[-1]:\n        return -list1[0]\n    else:\n        return -list1[-1]\n    \ndef smallest_pos(list1): \n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    \n    if list1==[]:\n        return -1\n    \n    if len(list1)==1:\n        return list1[0]\n    \n    if list1[0]>list1[-1]:\n        return list1[0]\n    else:\n        return list1[-1]\n    \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    \n    if list1==[]:\n        return -1\n    \n    if len(list1)==1:\n        return -1\n    \n    if list1[0]<list1[-1]:\n        return list1[0]\n    else:\n        return list1[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_val = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[j] < list1[i]:\n                max_val = list1[j]\n                break\n    print(max_val)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0 \n    for i in list1:\n        if i < 0:\n            if i > max:\n                max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    if len(list1) == 0: \n        return 0\n    else: \n        max_num = 0\n        for num in list1:\n            if num < 0:\n                max_num = num\n        return max_num\n        \n    \nlist1 = [-20, -15, -10, -5, -2, -3, 0, 3, 1, 8, 4, 2, -4, 9, 5, -6, 6]\nprint(largest_neg(list1))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            new_list.append(test_list[i][0:K])\n        else:\n            new_list.append(test_list[i])\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        res.append(test_list[i][:K])\n    return res\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        temp_list = list(i)\n        for j in range(0, len(temp_list) - K):\n            temp_list.pop(len(temp_list) - K - 1)\n        result.append(tuple(temp_list))\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    final_tuple = ()\n    \n    for i in range(0, len(test_list)):\n        if(i<K):\n            final_tuple = final_tuple + (test_list[i])\n        else:\n            break\n    \n    return final_tuple\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if i % K == 0:\n            test_list.pop(i)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            test_list[i], test_list[j] = test_list[j], test_list[i]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(0, len(test_list)):\n        if i < len(test_list) - K:\n            new_list.append(test_list[i])\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your code here\n    result = []\n    for i in range(len(test_list)):\n        t = test_list[i]\n        for j in range(K):\n            result.append(t[j])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    \n    if (len(test_tup1)!= len(test_tup2)):\n        print('TUPLE ERROR!')\n    else:\n        print(test_tup1[0] * test_tup2[0])\n        \ndef remove_duplicates(my_list):\n    '''\n    Takes a list of integers and returns a new list of the unique elements.\n    '''\n    my_list = list(set(my_list))\n    print(my_list)\n    \n    #return sorted_list\n    return my_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #loop to count elements in the two tuples and print the result.\n    #Takes the index value as an argument.\n    #Takes the index value as an argument.\n    #Compares the elements and returns the result.\n    for i in range(len(test_tup1)):\n        print(test_tup1[i]*test_tup2[i])\n    return test_tup1*test_tup2\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # write your code here\n    return test_tup1[0]*test_tup2[0],test_tup1[1]*test_tup2[1],test_tup1[2]*test_tup2[2]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result += test_tup1[i] * test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup_a=tuple(test_tup1)\n    tup_b=tuple(test_tup2)\n    print(\"tup_a=\",tup_a)\n    print(\"tup_b=\",tup_b)\n    print(\"Index of a-1: \",tup_a.index(1))\n    print(\"Index of b-1: \",tup_b.index(1))\n    sum=0\n    for i in range(len(tup_a)):\n        sum+=tup_a[i]*tup_b[i]\n    return sum\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup3=tuple()\n    for i in range(0,len(test_tup1)):\n        for j in range(0,len(test_tup2)):\n            tup3.append(test_tup1[i]*test_tup2[j])\n    return tup3\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    def multi(tup1, tup2):\n        # Create empty lists for indexed tuples\n        mul1 = []\n        mul2 = []\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    output = 0\n    for i in range(len(test_tup1)):\n        output += test_tup1[i] * test_tup2[i]\n    return output\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #Your code goes here\n    l1 = 0\n    l2 = 0\n    for i in test_tup1:\n        l1 = l1 + i\n    for i in test_tup2:\n        l2 = l2 + i\n    return(l1, l2)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    t1 = test_tup1[0]\n    t2 = test_tup2[0]\n    answer = t1 * t2\n    return answer\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    list_counter = Counter(lst)\n    list_counter = list_counter.most_common()\n    return list_counter\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = {}\n    for i in tup: \n        if i in res: \n            res[i] += 1\n        else: \n            res[i] = 1\n    return res \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i in lst:\n            count += 1\n    return count\n    \ndef frequency_table(tup, lst): \n    '''\n    Write a python function to calculate the frequency of each word in a tuple.\n    '''\n    table = Counter(tup) \n    for i in lst: \n        table[i] = table[i] + 1\n    return table \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence = Counter(lst)\n    occurrence.subtract(tup) \n    print(occurrence.most_common(10))\n    \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    occ = Counter(lst)\n    occ_count = occ.values()\n    occ_dict = dict(zip(occ_count,occ.keys()))\n    return occ_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if type(tup) is not tuple: \n        return TypeError('Unsupported input') \n    if type(lst) is not list: \n        return TypeError('Unsupported input') \n    if len(tup)!= len(lst): \n        return ValueError('The length of the tuple and the list are not matched') \n    for i in range(0,len(lst)): \n        lst[i] = tup[i] \n    return Counter(lst).most_common() \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = Counter(lst)\n    occurence_dict = dict(occurence)\n    \n    #print(occurence_dict)\n    \n    if tup in occurence_dict:\n        occurence_dict[tup] += 1\n    else:\n        occurence_dict[tup] = 1\n    #print(occurence_dict)\n    \n    return occurence_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if len(lst)==0:\n        return 0\n    \n    elif len(lst)==1:\n        if tup[0]==lst[0]:\n            return 1\n        else:\n            return 0\n    \n    else:\n        return sum([count_Occurrence(x,lst) for x in tup])\n    \n    \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_of_tuple = list(tup)\n    c = 0\n    for i in range(len(lst_of_tuple)):\n        if lst_of_tuple[i] in lst:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for element in nums:\n        cube_nums.append(element * element * element)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube_nums(nums[i:i+3]) for i in range(0,len(nums),3)]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    n = len(nums)\n    out = []\n    cubes = []\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num*num)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    if len(nums) == 0:\n        return\n    for num in nums:\n        cubes.append(num * num * num)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if type(nums) is not list:\n        raise TypeError('The parameter nums should be a list.')\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    lst = []\n    for num in nums:\n        lst.append(num*num*num)\n    return lst\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if not nums:\n        return [[]]\n    res = []\n    for i in range(len(nums)):\n        res.append([nums[i], nums[i] * nums[i] * nums[i]])\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    for num in range(1, n+1):\n        res += num\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n): \n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return 0\n    return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for num in range(1,n+1):\n        sum += num\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        return -1\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return ''\n    s = ''\n    i = 0\n    for j in l:\n        s = s + str(j)[i:i+l[i].__len__()]\n        i = i + l[i].__len__()\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    while i < len(str):\n        if (str[i] ==''):\n            j += 1\n        elif (str[i] == '\\n'):\n            j += 1\n            i += 1\n            j += 1\n        elif (str[i] == '\\t'):\n            i += 1\n            j += 1\n        else:\n            if (str[i] == '\\''):\n                k += 1\n            i += 1\n    return str[0:k]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # initializing the result array\n    result = []\n    \n    # looping through the string\n    for i in range(len(l)):\n        # checking for the closing bracket\n        if l[i] == ']':\n            # close bracket\n            break\n        # checking for the opening bracket\n        if l[i] == '[':\n            # opening bracket\n            # append the index of the opening bracket to result array\n            result.append(i)\n        # checking for string\n        if l[i] == '\"':\n            # close bracket\n            break\n    \n    # remove the opening bracket\n    result.pop()\n    \n    # check for the closing bracket\n    if result:\n        # close bracket\n        return []\n    \n    # remove the closing bracket\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    pos = 0\n    flag = 0\n    count = 0\n    \n    while True:\n        try:\n            if pos == len(str):\n                break\n            if not flag:\n                pos += l\n                flag = 1\n            else:\n                pos += l\n            count += 1\n        except IndexError:\n            break\n    return count, pos\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not l:\n        return \"\"\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return str[str.index(l[0])+1:str.index(l[1])+1]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i, s in enumerate(str):\n        l[i] = s\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = \"\"\n    for word in l:\n        result += word.split('\\n')[0]\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    out = []\n    for x in str:\n        out.append(str[str.index(x) + 1:str.index(x) + l - 1])\n    return out\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[str.find(l, 0, str.size()):str.find(l, 0, str.size())]\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #use a regex to remove whitespace\n    stripped = re.sub(r'\\s+', '', text1)\n    return stripped\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    text2 = re.sub(r'\\s+','', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'[\\s]+','', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1_without_whitespaces = re.sub(' +','', text1)\n    return text1_without_whitespaces\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_str = re.sub(' +','', text1)\n    return new_str\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #Regex 1\n    pattern = re.compile('[\\n\\r\\t\\f\\v]')\n    text1 = re.sub(pattern, '', text1)\n    #Regex 2\n    pattern = re.compile('\\n')\n    text1 = re.sub(pattern, '', text1)\n    pattern = re.compile('\\r')\n    text1 = re.sub(pattern, '', text1)\n    pattern = re.compile('\\t')\n    text1 = re.sub(pattern, '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1) # This is to remove all whitespaces at the end of a string.\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('^\\s+', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    text2 = ''\n    for word in text1.split():\n        text2 += word.strip() +''\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # YOUR CODE HERE\n    return text1.strip()\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost == 0: \n        return 0\n    else: \n        return sale_amount/actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount * actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # if the actual cost is less than sale amount then loss amount is 0.\n    # if the actual cost is greater than sale amount then loss amount is 0.\n    if actual_cost < sale_amount:\n        return 0\n    # if sale amount is greater than actual cost then loss amount is 0\n    elif sale_amount > actual_cost:\n        return 0\n    # if sale amount is equal to actual cost then loss amount is 0\n    elif sale_amount == actual_cost:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return 0\n    else:\n        return sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<=0:\n        return 0\n    elif actual_cost>=sale_amount:\n        return sale_amount/actual_cost*100\n    else:\n        return sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0.0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount==0:\n        return actual_cost\n    else:\n        return actual_cost*0.1+(actual_cost-sale_amount*0.1)*0.2\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost - sale_amount\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_cost = int(actual_cost)\n    sale_amount = int(sale_amount)\n    if actual_cost >= sale_amount:\n        return 0.0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            sum = sum + i \n            if (sum % 2 == 0) : \n                return sum \n    return sum \ndef listOfFactors(n) : \n    '''\n    Write a python function to find the list of factors of a number.\n    '''\n    factors = [] \n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            factors.append(i) \n    return factors \ndef listofDigits(n) : \n    '''\n    Write a python function to find the list of digits of a number.\n    '''\n    digitlist = [] \n    while (n!= 0) : \n        if (n % 10 == 0) : \n            digitlist.append(10) \n            n = int(n / 10) \n        else : \n            digitlist.append(n % 10) \n            n = int(n / 10) \n    return digitlist \ndef main() : \n    '''\n    1. Write a Python program to find the list of digits of a number.\n    2. Write a Python program to find the list of factors of a number.\n    3. Write a Python program to find the list of digits of a number.\n    '''\n    print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return n\n    else:\n        return sumofFactors(n-1) + sumofFactors(n-2)\n    \ndef multiplyFactors(n): \n    '''\n    Write a python function to multiply all the factors of a number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n * multiplyFactors(n-1)\n    \ndef floorFactors(n): \n    '''\n    Write a python function to calculate the largest n such that n is divisible by 2 and greater than or equal to 1.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return floorFactors(n//2) + 1\n    else:\n        return floorFactors(n-1) + 1\n    \ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check if a number n is a perfect square.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n%2 == 0:\n        return False\n    else:\n        return (((n**2) + 1)**0.5) == (n**2) + 1\n    \ndef main(): \n    '''\n    Write a python function to print the following pattern for given n:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total=0\n    for i in range(1,n+1): \n        if (n%i==0): \n            total+=i\n    return total\nprint(\"sum of even factors of a number :\", sumofFactors(100))\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # YOUR CODE HERE\n    if n == 0:\n        return 0\n    \n    \n    sum = 0\n    while(n % 2 == 0):\n        sum += n / 2\n        n = n / 2\n    \n    if (n > 1):\n        sum += n\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n%2 == 0 : \n        return n + sumofFactors(n//2)\n    else : \n        return n+sumofFactors(n//2)\nprint(sumofFactors(4))\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # n=int(n)\n    count=0\n    for i in range(1,int(n)+1):\n        if (n%i==0):\n            count+=1\n        if (count==2):\n            return i\n    return -1\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    if(n == 0) :\n        return 0\n    elif(n == 1) :\n        return 1\n    else :\n        for i in range(2, n + 1) :\n            if(n % i == 0) :\n                factors.append(i)\n        if(len(factors) > 0):\n            for i in range(len(factors)):\n                if(factors[i] == 2):\n                    factors.pop(i)\n        return sum(factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum = sum + i\n    return sum\n    \n    \ndef sumofPrimes(n) : \n    '''\n    Write a python function to find the sum of all primes up to and including n.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if isPrime(i):\n            sum = sum + i\n    return sum\n    \n    \ndef isPrime(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i = i + 6\n    return True\n    \ndef sumOfDegrees(n) :\n    '''\n    Write a python function to find the sum of degrees of all primes up to and including n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if isPrime(i):\n            sum = sum + i*i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0 : \n        return -1\n    if n == 0 : \n        return 1\n    factor = 1\n    while n % 2 == 0 : \n        n = n / 2\n        factor = factor * 2\n    if n!= 1 : \n        factor = factor * n\n    return factor\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # code here\n    return sum([x for x in range(1, n) if n%x == 0])\ndef expon(n) : \n    '''\n    Write a python function to calculate the square root of a number.\n    '''\n    # code here\n    return round(math.sqrt(n), n)\ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    # code here\n    return math.factorial(n)\ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    # code here\n    return math.factorial(n)\ndef log(x, n) : \n    '''\n    Write a python function to calculate the natural logarithm of a number.\n    '''\n    # code here\n    return math.log(x, n)\ndef log(x, n) : \n    '''\n    Write a python function to calculate the natural logarithm of a number.\n    '''\n    # code here\n    return math.log(x, n)\ndef log(x, n) : \n    '''\n    Write a python function to calculate the natural logarithm of a number.\n    '''\n    # code here\n    return math.log(x, n)\ndef sqrt(n) : \n    '''\n    Write a python function to calculate the square root of a number.\n    '''\n    # code here\n    return round(math.sqrt(n), n)\ndef pi(n) : \n    '''\n    Write a python function to calculate the golden ratio.\n    '''\n    # code here\n    return round(math.pi, n)\ndef gamma(n) : \n    '''\n    Write a python function to calculate the gamma function.\n    '''\n    # code here\n    return round(math.sqrt(n), n)\ndef ellip(n) : \n    '''\n    Write a python function to calculate the elliptic integral of a function.\n    '''\n    # code here\n    return round(0.5*(math.sqrt(1.0+math.pi*((2*n)**0.25))*math.pow(math.e,-(n+0.25))), n)\ndef square(n) : \n    '''\n    Write a python function to calculate the square of a number.\n    '''\n    # code here\n    return round(math.pow(n, 2.0), n)\ndef log_2(n) : \n    '''\n    Write a python function to calculate the logarithm of a number.\n    '''\n    # code here\n    return round(math.log(n, 2.0), n)\ndef sqrt_2(n) : \n    '''\n    Write a python function to calculate the square root of a number.\n    '''\n    # code here\n    return round(math.sqrt(n), n)\ndef sqrt_3(n) : \n    '''\n    Write a python function to calculate the square root of a number.\n    '''\n    # code here\n    return round(math.sqrt(n), n)\ndef cosine(n) : \n    '''\n    Write a python function to calculate the cosine of a number.\n    '''\n    # code here\n    return round(math.acos(n), n)\ndef sin(n) : \n    '''\n    Write a python function to calculate the sine of a number.\n    '''\n    # code here\n    return round(math.sin(n), n)\ndef log_10(n) : \n    '''\n    Write a python function to calculate the natural logarithm of a number.\n    '''\n    # code here\n    return round(math.log10(n), n)\ndef asin(x) : \n    '''\n    Write a python function to calculate the arc sine of a number.\n    '''\n    # code here\n    return round(math.asin(x), n)\ndef atan(x) : \n    '''\n    Write a python function to calculate the arc tangent of a number.\n    '''\n    # code here\n    return round(math.atan(x), n)\ndef hypot(x, y) : \n    '''\n    Write a python function to calculate the hypotenuse of a triangle.\n    '''\n    # code here\n    return round(math.sqrt((x**2)+(y**2)), n)\ndef abs_sq(n) : \n    '''\n    Write a python function to calculate the absolute square of a number.\n    '''\n    # code here\n    return round(math.sqrt(n), n)\ndef floor(x) : \n    '''\n    Write a python function to calculate the floor of a number.\n    '''\n    # code here\n    return math.floor(x)\ndef ceil(x) : \n    '''\n    Write a python function to calculate the ceiling of a number.\n    '''\n    # code here\n    return math.ceil(x)\ndef round(x, n) : \n    '''\n    Write a python function to round a number to a given number of decimal places.\n    '''\n    # code here\n    return round(x, n)\ndef lcm(x, y) : \n    '''\n    Write a python function to calculate the least common multiple of three integers.\n    '''\n    # code here\n    return round(math.lcm(x, y), n)\ndef hypot(x, y) : \n    '''\n    Write a python function to calculate the hypotenuse of a triangle.\n    '''\n    # code here\n    return round(math.hypot(x, y), n)\ndef log_2_pow(n) : \n    '''\n    Write a python function to calculate the logarithm of a number.\n    '''\n    # code here\n    return math.log2(n)\ndef exp(n) : \n    '''\n    Write a python function to calculate the exponential of a number.\n    '''\n    # code here\n    return round(math.exp(n), n)\ndef log10(n) : \n    '''\n    Write a python function to calculate the natural logarithm of a number.\n    '''\n    # code here\n    return math.log10(n)\ndef log(n) : \n    '''\n    Write a python function to calculate the natural logarithm of a number.\n    '''\n    # code here\n    return math.log(n)\ndef log_2(n) : \n    '''\n    Write a python function to calculate the logarithm of a number.\n    '''\n    # code here\n    return math.log2(n)\ndef log_2_sq(n) : \n    '''\n    Write a python function to calculate the logarithm of a number.\n    '''\n    # code here\n    return math.log2(n)\ndef cos(n) : \n    '''\n    Write a python function to calculate the cosine of a number.\n    '''\n    # code here\n    return round(math.cos(n), n)\ndef sin(n) : \n    '''\n    Write a python function to calculate the sine of a number.\n    '''\n    # code here\n    return round(math.sin(n), n)\ndef tan(n) : \n    '''\n    Write a python function to calculate the tangent of a number.\n    '''\n    # code here\n    return round(math.tan(n), n)\ndef sqrt(n) : \n    '''\n    Write a python function to calculate the square root of a number.\n    '''\n    # code here\n    return round(math.sqrt(n), n)\ndef exp_pi(n) : \n    '''\n    Write a python function to calculate the exponential of a number.\n    '''\n    # code here\n    return round(math.exp(n), n)\ndef abs_pi(n) : \n    '''\n    Write a python function to calculate the absolute value of a number.\n    '''\n    # code here\n    return round(math.pi, n)\ndef log_2_pi(n) : \n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    text = re.sub(pattern, r'\\1\\2', text)\n    return text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.split('\\W+', text.lower())\n    for word in words:\n        if 'z' in word:\n            return word\n    return None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'[a-z]{2,}z',text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text = text.replace('z','')\n    word = re.findall('[a-zA-Z]', text)\n    if len(word) >= 1:\n        return len(word)\n    else:\n        return 0\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #print 'Text: '+text\n    wordz = 'z'\n    text = text.replace(wordz,'')\n    #print 'Text after removing z: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef text_match_space(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef text_match_number(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef text_match_all(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_word(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    #word =''\n    #text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_wordz(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_wordz(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_word(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    #word =''\n    #text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_wordz(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_word(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_wordz(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_word(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_wordz(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_word(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_wordz(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_word(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_wordz(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_word(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_wordz(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_word(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''\n    text = text.replace(word,' ')\n    #print 'Text after removing spaces: '+text\n    return re.search(r'[^a-zA-z0-9_]', text)\ndef search_wordz(text):\n    '''\n    Write a function that matches a word containing''\n    '''\n    #print 'Text: '+text\n    word =''"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[0-9]\\b', 'z', text)\n    text = re.sub(r'\\b[A-Z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b[a-z]\\b', 'z', text)\n    text = re.sub(r'\\b["
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # replace every word of the text with 'z' in the text\n    text = re.sub(\"\\w+\\w+\", \"z\", text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_re = '^z[A-Z]*$'\n    z_match = re.search(z_re, text)\n    if z_match is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for word in text:\n        if 'z' in word.lower():\n            return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'z$'\n    # loop through the string\n    for letter in text:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add the letter to result array\n            result.append(letter)\n    # return result\n    return result\ndef replace_word(string):\n    '''\n    Replace each word with its corresponding replacement.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in string:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # replace word with its replacement\n            result.append(letter.replace('z', 'a'))\n    # return result\n    return result\ndef match_one_word(text):\n    '''\n    Write a function that matches one word.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+$'\n    # loop through the string\n    for letter in text:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add the word to result array\n            result.append(letter)\n    # return result\n    return result\ndef match_two_word(text):\n    '''\n    Write a function that matches two words.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+\\s+\\w+$'\n    # loop through the string\n    for letter in text:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef match_two_word_ending(text):\n    '''\n    Write a function that matches two words ending with a special character.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+\\s+\\w+\\s+\\w+$'\n    # loop through the string\n    for letter in text:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef find_word(string):\n    '''\n    Find word.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in string:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef index_of_word(string):\n    '''\n    Find index of word.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in string:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef compare_words(word1, word2):\n    '''\n    Compare two words.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in word1:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # loop through the string\n    for letter in word2:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef sentence_search(sentence):\n    '''\n    Match sentence to a set of words.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in sentence:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef reverse_search(sentence):\n    '''\n    Match sentence to a set of words.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in sentence:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef count_word(string):\n    '''\n    Count number of words in string.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+$'\n    # loop through the string\n    for letter in string:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef replace_word_one(string):\n    '''\n    Replace first word with its corresponding replacement.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in string:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # replace word with its replacement\n            result.append(letter.replace('z', 'a'))\n    # return result\n    return result\ndef replace_word_two(string):\n    '''\n    Replace second word with its corresponding replacement.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in string:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # replace word with its replacement\n            result.append(letter.replace('z', 'a'))\n    # return result\n    return result\ndef find_word_one(string):\n    '''\n    Find word one from string.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+$'\n    # loop through the string\n    for letter in string:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef find_word_two(string):\n    '''\n    Find word two from string.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in string:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef reverse_search_one(sentence):\n    '''\n    Match sentence to a set of words.\n    '''\n    # initialize result array\n    result = []\n    # define the regular expression\n    regex = r'\\w+'\n    # loop through the string\n    for letter in sentence:\n        # check if the letter is in the regular expression\n        if re.search(regex, letter):\n            # add word to result array\n            result.append(letter)\n    # return result\n    return result\ndef reverse_search_two(sentence):\n    '''\n    Match sentence to a set of words.\n    '''"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # 1. Create a variable named monthnumb_number and set it to the month number \n    # entered by the user.\n    monthnumb_number = monthnum2\n    # 2. Print the value of monthnumb_number and check whether the entered month number is \n    # not less than or equal to 31.\n    print(\"The month number you entered is not less than 31.\\n\")\n    if monthnumb_number > 31:\n        print(f\"The given month number is greater than 31.\\n\")\n        monthnumb_number = monthnumb_number - 31\n    else:\n        print(f\"The given month number is less than 31.\\n\")\n        \n    # 3. Print the value of monthnumb_number and check whether the entered month number is \n    # not less than or equal to 31.\n    print(f\"The month number you entered is less than 31.\\n\")\n    if monthnumb_number > 31:\n        print(f\"The given month number is greater than 31.\\n\")\n        monthnumb_number = monthnumb_number - 31\n    else:\n        print(f\"The given month number is less than 31.\\n\")\n    # 4. Return the value of monthnumb_number and return.\n    return monthnumb_number\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum=0\n    if monthnum2<1 or monthnum2>12:\n        print(\"Wrong month number entered.\")\n        return\n    \n    if monthnum2==1:\n        if monthnum<1 or monthnum>31:\n            print(\"Wrong month number entered.\")\n            return\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [1, 3, 5, 7, 8, 10, 12]\n    #check whether month number is valid\n    if monthnum2 > 12 or monthnum2 < 1:\n        return f\"Invalid month number\"\n    else:\n        if monthnum2 in months:\n            return f\"{monthnum2} is a Valid month number\"\n        else:\n            return f\"{monthnum2} is not a valid month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not isinstance(monthnum2, int):\n        raise TypeError('Month number must be an integer.')\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_length = [31,28,31,30,31,30,31,31,30,31,30,31]\n    if(monthnum2 > 31):\n        print(\"Error : the month number should not be greater than 31.\")\n    for i in range(1, monthnum2 + 1):\n        if(i > 1 and i % 7!= 0):\n            if(month_length[i - 1]!= 31):\n                print(\"Error : the month number should not contain 31 days.\")\n            else:\n                pass\n        elif(i > 1 and i % 7 == 0):\n            pass\n        else:\n            print(str(i) + \" : the month number should not contain 31 days.\")\n    if(monthnum2 > 31 and monthnum2 < 13):\n        print(\"Error : the month number should not be greater than 1 and less than 13.\")\n    if(monthnum2 < 13):\n        print(\"Error : the month number should not be less than 1 and greater than 13.\")\n    if(monthnum2 == 13):\n        print(\"Error : the month number should not be 13.\")\n    if(monthnum2 == 0):\n        print(\"Error : the month number should not be 0.\")\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 < 0):\n        print(\"Error: Month number must be a positive integer.\")\n        return\n    elif(monthnum2 == 0):\n        print(\"Error: Month number must be a positive integer.\")\n        return\n    elif(monthnum2 == 31):\n        print(\"Error: Month number must not contain 31 days.\")\n        return\n    else:\n        print(\"Error: Month number must contain 31 days.\")\n        return\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_numb = monthnum2 % 12\n    if (month_numb == 1):\n        return True\n    elif (month_numb == 2):\n        return True\n    elif (month_numb == 3):\n        return True\n    elif (month_numb == 4):\n        return True\n    elif (month_numb == 5):\n        return True\n    elif (month_numb == 6):\n        return True\n    elif (month_numb == 7):\n        return True\n    elif (month_numb == 8):\n        return True\n    elif (month_numb == 9):\n        return True\n    elif (month_numb == 10):\n        return True\n    elif (month_numb == 11):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 12 or monthnum2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%10 == 1:\n        return True\n    elif monthnum2%10 == 2:\n        return monthnum2 == 29\n    elif monthnum2%10 == 3:\n        return monthnum2 == 31\n    elif monthnum2%10 == 4:\n        return monthnum2 == 30\n    elif monthnum2%10 == 5:\n        return monthnum2 == 31\n    elif monthnum2%10 == 6:\n        return monthnum2 == 30\n    elif monthnum2%10 == 7:\n        return monthnum2 == 31\n    elif monthnum2%10 == 8:\n        return monthnum2 == 31\n    elif monthnum2%10 == 9:\n        return monthnum2 == 30\n    elif monthnum2%10 == 10:\n        return monthnum2 == 31\n    elif monthnum2%10 == 11:\n        return monthnum2 == 30\n    elif monthnum2%10 == 12:\n        return monthnum2 == 31\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(stringlist)):\n        new_list.append(stringlist[i])\n    \n    new_list.reverse()\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    start = 0\n    end = len(stringlist) - 1\n    \n    while start < end:\n        stringlist[start], stringlist[end] = stringlist[end], stringlist[start]\n        start = start + 1\n        end = end - 1\n    \n    return stringlist\n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Your code here\n    for i in range(len(stringlist) - 1, -1, -1):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # First, remove the empty spaces from the beginning of each string\n    stringlist = stringlist.replace(\" \", \"\")\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    length = len(stringlist)\n    for index in range(length//2):\n        stringlist[index], stringlist[length-index-1] = stringlist[length-index-1], stringlist[index]\n    return stringlist\n    \n    \n    "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Write your code here.\n    stringlist_2d = []\n    for i in range(len(stringlist)):\n        temp_list = []\n        for j in range(len(stringlist[i])):\n            temp_list.append(stringlist[i][j])\n        stringlist_2d.append(temp_list)\n    print(stringlist_2d)\n    return stringlist_2d\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    list = []\n    for i in stringlist:\n        list.append(i)\n    list.reverse()\n    return list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if type(stringlist)!= list:\n        raise TypeError\n    else:\n        return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #Your code goes here\n    pass"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    output = \"\"\n    for i in range(len(stringlist)):\n        output += stringlist[i]\n    return output\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0] \n    index_min = 0\n    for i in range(1,len(lst)): \n        if lst[i] < min: \n            min = lst[i] \n            index_min = i \n    return index_min \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0: \n        return 0\n    \n    if lst[0] == 0: \n        return 1\n    \n    if lst[0] == 1: \n        if len(lst) == 1: \n            return 2\n        elif lst[1] < lst[0]: \n            return Find_Min(lst[1:]) + 1\n        else: \n            return Find_Min(lst[1:]) \n    elif lst[0] == 2: \n        if len(lst) == 1: \n            return 3\n        elif lst[1] < lst[0]: \n            return Find_Min(lst[1:]) + 1\n        else: \n            return Find_Min(lst[1:]) \n    elif lst[0] == 3: \n        if len(lst) == 1: \n            return 4\n        elif lst[1] < lst[0]: \n            return Find_Min(lst[1:]) + 1\n        else: \n            return Find_Min(lst[1:]) \n    elif lst[0] == 4: \n        if len(lst) == 1: \n            return 5\n        elif lst[1] < lst[0]: \n            return Find_Min(lst[1:]) + 1\n        else: \n            return Find_Min(lst[1:]) \n    elif lst[0] == 5: \n        if len(lst) == 1: \n            return 6\n        elif lst[1] < lst[0]: \n            return Find_Min(lst[1:]) + 1\n        else: \n            return Find_Min(lst[1:]) \n    else: \n        return Find_Min(lst[1:]) \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst)==0:\n        return \"No element in list\"\n    elif len(lst)==1:\n        return lst[0]\n    else:\n        min_lst=lst[0]\n        for i in range(1,len(lst)):\n            if min_lst<lst[i]:\n                min_lst=lst[i]\n        return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] > lst[j]:\n                tmp = lst[j]\n                lst[j] = lst[i]\n                lst[i] = tmp\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    a = 0\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            a = i\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i:j])<min_len:\n                min_len=len(lst[i:j])\n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst)\n    return lst[len(lst) // 2]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n=len(lst)\n    for i in range(n):\n        if lst[i]==min(lst[i+1:]):\n            return i+1\n    return n\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key = lambda x : len(x)) \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    min_val=lst[0] #initialize the minimum value as the first element\n    min_index=0 #initialize the index of the minimum value as the first element\n    for i in range(1,len(lst)): #iterate through the list\n        if lst[i]<=min_val: #if the current element is less than or equal to the minimum element\n            min_val=lst[i] #update the minimum element\n            min_index=i #update the index of the minimum element\n    return min_val,min_index #return the minimum and index of the minimum element and its index\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return a*b*c\n    \ndef cube_area(l,h,w):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    return l*h*w\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"\\nRectangle Area is {}\".format(l*b))\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area= l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(f\"The area of rectangle is {l * b}\")\n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    print(f\"The area of triangle is {a * b}\")\n    \ndef main():\n    rectangle_area(5,7)\n    triangle_area(3,5,7)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(f'Rectangle Area: {area}')\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.upper()\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    arr1 = []\n    temp = ''\n    for word in str1.split(' '):\n        if word[0].isupper():\n            arr1.append(word.replace('.','').replace('-').replace('_'))\n        else:\n            if word!= temp:\n                temp = word\n                arr1.append(temp)\n            else:\n                temp = word\n    return''.join(arr1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    lower_string = \"\"\n    for i in range(len(str1)):\n        if (str1[i].isupper()):\n            if(str1[i] == 'A'):\n                lower_string += 'b'\n            elif(str1[i] == 'B'):\n                lower_string += 'c'\n            elif(str1[i] == 'C'):\n                lower_string += 'd'\n            elif(str1[i] == 'D'):\n                lower_string += 'e'\n            elif(str1[i] == 'E'):\n                lower_string += 'f'\n            elif(str1[i] == 'F'):\n                lower_string += 'g'\n            elif(str1[i] == 'G'):\n                lower_string += 'h'\n            elif(str1[i] == 'H'):\n                lower_string += 'i'\n            elif(str1[i] == 'I'):\n                lower_string += 'j'\n            elif(str1[i] == 'J'):\n                lower_string += 'k'\n            elif(str1[i] == 'K'):\n                lower_string += 'l'\n            elif(str1[i] == 'L'):\n                lower_string +='m'\n            elif(str1[i] == 'M'):\n                lower_string += 'n'\n            elif(str1[i] == 'N'):\n                lower_string += 'o'\n            elif(str1[i] == 'O'):\n                lower_string += 'p'\n            elif(str1[i] == 'P'):\n                lower_string += 'q'\n            elif(str1[i] == 'Q'):\n                lower_string += 'r'\n            elif(str1[i] == 'R'):\n                lower_string +='s'\n            elif(str1[i] == 'S'):\n                lower_string += 't'\n            elif(str1[i] == 'T'):\n                lower_string += 'u'\n            elif(str1[i] == 'U'):\n                lower_string += 'v'\n            elif(str1[i] == 'V'):\n                lower_string += 'w'\n            elif(str1[i] == 'W'):\n                lower_string += 'x'\n            elif(str1[i] == 'X'):\n                lower_string += 'y'\n            elif(str1[i] == 'Y'):\n                lower_string += 'z'\n            elif(str1[i] == 'Z'):\n                lower_string += 'A'\n            else:\n                lower_string += str1[i]\n        else:\n            lower_string += str1[i]\n    return lower_string\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lower_string = \"\"\n    for i in range(len(str1)):\n        if str1[i].islower():\n            if(str1[i] == 'a'):\n                lower_string += 'b'\n            elif(str1[i] == 'b'):\n                lower_string += 'c'\n            elif(str1[i] == 'c'):\n                lower_string += 'd'\n            elif(str1[i] == 'd'):\n                lower_string += 'e'\n            elif(str1[i] == 'e'):\n                lower_string += 'f'\n            elif(str1[i] == 'f'):\n                lower_string += 'g'\n            elif(str1[i] == 'g'):\n                lower_string += 'h'\n            elif(str1[i] == 'h'):\n                lower_string += 'i'\n            elif(str1[i] == 'i'):\n                lower_string += 'j'\n            elif(str1[i] == 'j'):\n                lower_string += 'k'\n            elif(str1[i] == 'k'):\n                lower_string += 'l'\n            elif(str1[i] == 'l'):\n                lower_string +='m'\n            elif(str1[i] =='m'):\n                lower_string += 'n'\n            elif(str1[i] == 'n'):\n                lower_string += 'o'\n            elif(str1[i] == 'o'):\n                lower_string += 'p'\n            elif(str1[i] == 'p'):\n                lower_string += 'q'\n            elif(str1[i] == 'q'):\n                lower_string += 'r'\n            elif(str1[i] == 'r'):\n                lower_string +='s'\n            elif(str1[i] =='s'):\n                lower_string += 't'\n            elif(str1[i] == 't'):\n                lower_string += 'u'\n            elif(str1[i] == 'u'):\n                lower_string += 'v'\n            elif(str1[i] == 'v'):\n                lower_string += 'w'\n            elif(str1[i] == 'w'):\n                lower_string += 'x'\n            elif(str1[i] == 'x'):\n                lower_string += 'y'\n            elif(str1[i] == 'y'):\n                lower_string += 'z'\n            else:\n                lower_string += str1[i]\n        else:\n            lower_string += str1[i]\n    return lower_string\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    punct_list = [',', '.', ';', ':', '!', '?']\n    final_list = []\n    for i in range(len(str1)):\n        if str1[i] in punct_list:\n            final_list.append(str1[i])\n    return ''.join(final_list)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    stopwords = [\"the\", \"a\", \"an\", \"and\", \"as\", \"but\", \"for\", \"if\", \"in\", \"of\", \"on\", \"that\", \"the\", \"to\", \"with\", \"you\", \"was\", \"we\", \"they\", \"your\", \"he\", \"she\", \"it\", \"it's\", \"she's\", \"he's\", \"she's\", \"he's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", \"she's\", "
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    \n    # get string, string to be replaced\n    t = str1\n    \n    # get a list of a/p letter\n    a = re.findall(r'[A-Z]', t)\n    \n    # get list of a/p letters\n    b = re.findall(r'[a-z]', t)\n    \n    # iterate through each letter, if that letter is upper\n    # and if it's in a, replace with a\n    for i in range(len(a)):\n        \n        if t.count(a[i]) > 1:\n            # if there are multiple letters, start at the first letter,\n            # and iterate over letters from second letter onwards\n            # while we're on the first letter, add to the list of letters we're on\n            # as we go, since we are on a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\n            \n            # get the index of the letter, so we can add to the list of letters\n            x = i\n            while t.count(a[x]) > 1:\n                a[x] = a[x].lower()\n                t = t.replace(a[x], a[x].upper(), 1)\n                x = x - 1\n        else:\n            # if there are only letters, remove the letter\n            \n            # get the index of the letter, so we can add to the list of letters\n            x = i\n            while t.count(a[x]) > 1:\n                a[x] = a[x].lower()\n                t = t.replace(a[x], '', 1)\n                x = x - 1\n    \n    # get all of the letters, no space\n    c = re.findall(r'[a-zA-Z]', t)\n    \n    # iterate through each letter, if it's uppercase, add it to list\n    # of letters to be returned\n    for i in range(len(c)):\n        if t.count(c[i]) > 1:\n            c[i] = c[i].upper()\n            t = t.replace(c[i], c[i].upper(), 1)\n    \n    # create a new string where all the uppercase letters have been replaced\n    r = ''\n    for i in range(len(t)):\n        if t.count(t[i]) > 1:\n            r += t[i]\n        else:\n            r += c[i]\n            \n    # return new string\n    return r\n    \n    \ndef remove_digits(str1):\n    '''\n    Remove any digits from a given string.\n    '''\n    \n    # get a list of digits, string to be replaced\n    t = str1\n    \n    # iterate through each digit, if it's a digit, remove it\n    # from the string, and add to the list of digits we're on\n    for i in range(len(t)):\n        \n        # if there's only one digit, it's a digit\n        if t.count(t[i]) == 1:\n            if t[i].isdigit():\n                t = t.replace(t[i], '', 1)\n                t = t.replace(t[i].upper(), '', 1)\n                t = t.replace(t[i].upper(), '', 1)\n    \n    # return new string\n    return t\n    \n    \ndef remove_punctuation(str1):\n    '''\n    Remove any punctuation from a given string.\n    '''\n    \n    # get a list of punctuation, string to be replaced\n    t = str1\n    \n    # iterate through each punctuation, if it's a letter, remove it\n    # from the string, and add to the list of punctuation we're on\n    for i in range(len(t)):\n        \n        # if there's only one punctuation, it's a punctuation\n        if t.count(t[i]) == 1:\n            if t[i].isalpha():\n                t = t.replace(t[i], '', 1)\n                \n    # return new string\n    return t\n    \n    \ndef remove_symbols(str1):\n    '''\n    Remove any symbols from a given string.\n    '''\n    \n    # get a list of symbols, string to be replaced\n    t = str1\n    \n    # iterate through each symbol, if it's a symbol, remove it\n    # from the string, and add to the list of symbols we're on\n    for i in range(len(t)):\n        \n        # if there's only one symbol, it's a symbol\n        if t.count(t[i]) == 1:\n            if t[i].isalpha():\n                t = t.replace(t[i], '', 1)\n    \n    # return new string\n    return t\n    \n    \ndef remove_numbers(str1):\n    '''\n    Remove any numbers from a given string.\n    '''\n    \n    # get a list of numbers, string to be replaced\n    t = str1\n    \n    # iterate through each number, if it's a number, remove it\n    # from the string, and add to the list of numbers we're on\n    for i in range(len(t)):\n        \n        # if there's only one number, it's a number\n        if t.count(t[i]) == 1:\n            if t[i].isdigit():\n                t = t.replace(t[i], '', 1)\n    \n    # return new string\n    return t\n    \n    \ndef remove_letters(str1):\n    '''\n    Remove any letters from a given string.\n    '''\n    \n    # get a list of letters, string to be replaced\n    t = str1\n    \n    # iterate through each letter, if it's a letter, remove it\n    # from the string, and add to the list of letters we're on\n    for i in range(len(t)):\n        \n        # if there's only one letter, it's a letter\n        if t.count(t[i]) == 1:\n            if t[i].isalpha():\n                t = t.replace(t[i], '', 1)\n    \n    # return new string\n    return t\n    \n    \ndef remove_symbols(str1):\n    '''\n    Remove any symbols from a given string.\n    '''\n    \n    # get a list of symbols, string to be replaced\n    t = str1\n    \n    # iterate through each symbol, if it's a symbol, remove it\n    # from the string, and add to the list of symbols we're on\n    for i in range(len(t)):\n        \n        # if there's only one symbol, it's a symbol\n        if t.count(t[i]) == 1:\n            if t[i].isalpha():\n                t = t.replace(t[i], '', 1)\n    \n    # return new string\n    return t\n    \n    \ndef remove_punctuation_and_symbols(str1):\n    '''\n    Remove any punctuation and symbols from a given string.\n    '''\n    \n    # get a list of punctuation, string to be replaced\n    t = str1\n    \n    # iterate through each punctuation, if it's a symbol, remove it\n    # from the string, and add to the list of punctuation we're on\n    for i in range(len(t)):\n        \n        # if there's only one symbol, it's a symbol\n        if t.count(t[i]) == 1:\n            if t[i].isalpha():\n                t = t.replace(t[i], '', 1)\n    \n    # return new string\n    return t\n    \n    \ndef remove_special_characters(str1):\n    '''\n    Remove any special characters from a given string.\n    '''\n    \n    # get a list of special characters, string to be replaced\n    t = str1\n    \n    # iterate through each character, if it's a symbol, remove it\n    # from the string, and add to the list of special characters we're on\n    for i in range(len(t)):\n        \n        # if there's only one symbol, it's a symbol\n        if t.count(t[i]) == 1:\n            if t"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.upper().replace(' ','')\ndef count_ranges(ranges):\n    '''\n    Write a function that takes a list of ranges and returns the number of ranges in it.\n    ranges: list of tuples\n    '''\n    length=len(ranges)\n    sorted_ranges=sorted(ranges)\n    return length\n    \ndef remove_spaces(str1):\n    '''\n    Write a function that removes spaces from a given string.\n    '''\n    return re.sub(' +','', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    a = []\n    for i in str1.split():\n        if i[0].isupper():\n            a.append(i)\n    return \" \".join(a)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print('Hello world!')\n    if not str1:\n        return 'No string passed to remove_uppercase'\n    str2 = str1.lower()\n    str3 = str2.replace(' ','')\n    return str3\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    regex = re.compile('[^A-Za-z0-9]')\n    return regex.sub('', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    final=[]\n    for i in range(len(str1)):\n        if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            final.append(str1[i])\n        elif str1[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            final.append(str1[i])\n        else:\n            final.append(str1[i])\n    return ''.join(final)\ndef replace_dashes(str1):\n    '''\n    Write a function to replace dashes with underscores.\n    '''\n    final=[]\n    for i in range(len(str1)):\n        if str1[i] in '_-.':\n            final.append(str1[i])\n        elif str1[i] in '1234567890':\n            final.append(str1[i])\n        elif str1[i] in '$#@':\n            final.append(str1[i])\n        else:\n            final.append(str1[i])\n    return ''.join(final)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst[0]\n    if not isinstance(lst, list):\n        return lst\n    else:\n        return Extract(lst)\n    \ndef count_elem(lst):\n    '''\n    Write a python function to count the number of elements in a list.\n    '''\n    count = 0\n    if not isinstance(lst, list):\n        return lst\n    else:\n        for elem in lst:\n            if not isinstance(elem, list):\n                count += 1\n                continue\n            else:\n                count += count_elem(elem)\n    return count\n    \ndef mean(lst):\n    '''\n    Write a python function to get the mean of a list.\n    '''\n    if not isinstance(lst, list):\n        return lst\n    else:\n        return float(sum(lst))/float(len(lst))\n    \ndef median(lst):\n    '''\n    Write a python function to get the median of a list.\n    '''\n    if not isinstance(lst, list):\n        return lst\n    else:\n        return float(sorted(lst, reverse=True)[len(lst)//2])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    #for e in lst: \n        #print(e[0]) \n    \n    for i in range(len(lst)):\n        print(lst[i][0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    a=[]\n    for x in lst:\n        a.append(x[0])\n    return a \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    l = []\n    for i in range(len(lst)):\n        l.append(lst[i][0])\n    return l[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    #create a empty list to store the new elements\n    output = [] \n    #create an empty dictionary to store the elements \n    dictionary = {} \n    for i in lst: \n        #dictionary to store the elements \n        dictionary = {} \n        #dictionary to store the first element \n        dictionary.update({i[0]:i[1]}) \n        #append the dictionary to the list \n        output.append(dictionary) \n        #update the dictionary \n        dictionary = {} \n    return output \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    mylist = []\n    for item in lst:\n        mylist.append(item[0])\n    return mylist[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    x = lst[0]\n    for i in range(len(lst)):\n        x = lst[i]\n        break\n    return x\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = lst[0] \n    for i in range(1, len(lst)): \n        if lst[i] > first: \n            first = lst[i] \n    return first \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0] \n    \ndef Single(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0] \n    \ndef Return(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0] \n    \ndef printOut(lst): \n    '''\n    Write a python function to print each element of each sublist.\n    '''\n    for i in range(len(lst)): \n        print(lst[i]) \n    \n    \n    \n    \n    \nif __name__ == \"__main__\": \n    \n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n    print(\"Original list: \", lst) \n    print(\"Slicing with Slice and Return: \",Extract(lst)) \n    print(\"Single element: \",Single(lst)) \n    print(\"List after [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: \", Return(lst)) \n    printOut(lst)"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    char_count = 0\n    for i in str:\n        if i.isupper():\n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    a = 0\n    for i in str:\n        if i.isupper():\n            a += 1\n    return a\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # write your code here\n    upper_cnt = 0\n    for c in str:\n        if c.isupper():\n            upper_cnt += 1\n    return upper_cnt\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    c = 0\n    for i in str:\n        if i.isupper():\n            c += 1\n    return c\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    c = 0\n    for i in str:\n        if i.isupper():\n            c += 1\n    return c\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    total = 0\n    for i in range(0, len(str)):\n        if str[i].isupper():\n            total += 1\n    return total\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_c = str.upper()\n    num_upper_c = len(upper_c)\n    num_lower_c = len(upper_c.lower())\n    num_space_c = len(upper_c.strip())\n    num_upper_c_2 = len(upper_c.translate(str.maketrans('', '', string.punctuation)))\n    num_lower_c_2 = len(upper_c.translate(str.maketrans('', '', string.punctuation)).lower())\n    num_space_c_2 = len(upper_c.translate(str.maketrans('', '', string.punctuation)).strip())\n    num_lower_c_3 = len(upper_c.translate(str.maketrans('', '', string.punctuation)).translate(str.maketrans('', '', string.punctuation)).lower())\n    num_space_c_3 = len(upper_c.translate(str.maketrans('', '', string.punctuation)).translate(str.maketrans('', '', string.punctuation)).strip())\n    print('upper_ctr:'+ str(num_upper_c))\n    print('num_upper_c:'+ str(num_upper_c_2))\n    print('num_lower_c:'+ str(num_lower_c))\n    print('num_space_c:'+ str(num_space_c))\n    print('num_upper_c_2:'+ str(num_upper_c_2))\n    print('num_lower_c_2:'+ str(num_lower_c_2))\n    print('num_space_c_2:'+ str(num_space_c_2))\n    print('num_lower_c_3:'+ str(num_lower_c_3))\n    print('num_space_c_3:'+ str(num_space_c_3))\n    return num_upper_c, num_upper_c_2, num_lower_c, num_lower_c_2, num_space_c, num_space_c_2, num_lower_c_3, num_lower_c_3\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # create a counter\n    counter = 0\n    # iterate over the string\n    for char in str:\n        if char.isupper():\n            counter += 1\n    # return the result\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if len(list1) == 1:\n            list2.append(list1[0])\n        else:\n            for j in combinations_list(list1[0:len(list1)]):\n                list2.append(list1[0:len(list1)] + j)\n                \n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if type(list1)!= list:\n        raise TypeError('list must be a list of numbers')\n    if len(list1) < 1:\n        raise ValueError('list must contain at least one number')\n    return([list(nums) for nums in itertools.combinations(list1, 2)])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    return [list1[0:len(list1)//2] + list1[len(list1)//2:]] + combinations_list(list1[len(list1)//2:])\n    \ndef combine_lists(lst):\n    '''\n    Write a function to combine all the lists in the list.\n    '''\n    return combinations_list(lst)\n    \ndef find_subset(array, index):\n    '''\n    Write a function to find a subset of a given array where each element appears only once.\n    '''\n    if index >= len(array):\n        return []\n    return find_subset(array[:index+1], index+1) + [array[index]] + find_subset(array[index+1:], index+1)\n    \ndef combi_arr(arr):\n    '''\n    Write a function to find all possible combinations of elements in an array.\n    '''\n    if len(arr) == 0:\n        return [[]]\n    if len(arr) == 1:\n        return [[arr[0]]]\n    combos = combi_arr(arr[1:])\n    for i in range(len(combos)):\n        new = combos[i] + combos[i+1]\n        if len(new) == len(arr):\n            return [new] + combi_arr(arr[0:len(new)])\n    return []\n    \ndef combi_list(arr):\n    '''\n    Write a function to find all possible combinations of a given array.\n    '''\n    if len(arr) == 0:\n        return [[]]\n    if len(arr) == 1:\n        return [arr[0]]\n    combos = combi_list(arr[1:])\n    for i in range(len(combos)):\n        new = combos[i] + combos[i+1]\n        if len(new) == len(arr):\n            return [new] + combi_list(arr[0:len(new)])\n    return []\n    \ndef bin_search(arr, x):\n    '''\n    Write a function to search for the given value in an array.\n    '''\n    start = 0\n    end = len(arr)\n    while(start <= end):\n        mid = (start + end)//2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \ndef intersection_intervals(arr):\n    '''\n    Write a function to find the set of intervals that lie within the given array of intervals.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        if arr[0] <= arr[1]:\n            return [[arr[0], arr[1]]]\n        else:\n            return []\n    if arr[0] <= arr[1]:\n        return [[arr[0], arr[1]]] + intersection_intervals(arr[2:])\n    else:\n        return []\n    \ndef interval_intersection(arr):\n    '''\n    Write a function to find the intersection of a given array of intervals.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    if arr[0][0] <= arr[0][1]:\n        return arr\n    return arr[0][1] + interval_intersection(arr[1:])\n    \ndef find_intervals(arr):\n    '''\n    Write a function to find the set of intervals that lie in the given array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [[arr[0], arr[1]]]\n    if arr[0][0] <= arr[0][1]:\n        return [[arr[0][0], arr[0][1]]] + find_intervals(arr[1:])\n    else:\n        return []\n        \ndef find_double_intervals(arr):\n    '''\n    Write a function to find the set of intervals that contain two elements of a given array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        if arr[0][0] <= arr[0][1]:\n            return [[arr[0][0], arr[0][1]]]\n        else:\n            return []\n    if arr[0][0] <= arr[0][1]:\n        return [[arr[0][0], arr[0][1]]] + find_double_intervals(arr[1:])\n    else:\n        return []\n    \ndef find_sliding_intervals(arr):\n    '''\n    Write a function to find the set of intervals that contain at least two elements of a given array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        if arr[0][0] <= arr[0][1]:\n            return [[arr[0][0], arr[0][1]]]\n        else:\n            return []\n    if arr[0][0] <= arr[0][1]:\n        return [[arr[0][0], arr[0][1]]] + find_sliding_intervals(arr[1:])\n    else:\n        return []\n    \ndef all_intervals(arr):\n    '''\n    Write a function to find all the intervals in the given array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [[arr[0][0], arr[0][1]]]\n    if arr[0][0] <= arr[0][1]:\n        return [[arr[0][0], arr[0][1]]] + all_intervals(arr[1:])\n    else:\n        return []\n    \ndef to_set(arr):\n    '''\n    Write a function to convert a given array of intervals into a set.\n    '''\n    if len(arr) == 0:\n        return set()\n    if len(arr) == 1:\n        return set(arr[0])\n    return set(arr[0][1:])\n    \ndef from_set(set, arr):\n    '''\n    Write a function to convert a given set into a given array.\n    '''\n    if len(set) == 0:\n        return arr\n    if len(set) == 1:\n        return [[set[0], arr[0][1]]]\n    return [[set[0], arr[0][1]]] + from_set(set[1:], arr[1:])\n    \ndef maximum_sub_array(arr, k):\n    '''\n    Write a function to find the maximum sub array of a given array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        if arr[0][0] <= arr[0][1]:\n            return [arr[0][0], arr[0][1]]\n        else:\n            return []\n    return [arr[0][1], arr[0][1]] + [k] + maximum_sub_array(arr[1:], k)\n    \ndef minimum_interval(arr, k):\n    '''\n    Write a function to find the smallest interval which has a minimum value of n and the maximum value of m.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        if arr[0][0] <= arr[0][1]:\n            return [arr[0][0], arr[0][1]]\n        else:\n            return []\n    return [arr[0][0], arr[0][1]] + minimum_interval(arr[1:], k)\n    \ndef find_maximum_sub_intervals(arr):\n    '''\n    Write a function to find the maximum sub intervals of a given array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0][1]]\n    if arr[0][1] >= arr[1][0]:\n        return [arr[0][1]] + find_maximum_sub_intervals(arr[1:])\n    else"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_combs = []\n    for i in range(len(list1)):\n        list_combs.append(list1[i:i+len(list1)])\n    return list_combs\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # define the function to return all possible combinations of elements\n    def comb(list1):\n        '''\n        (list1) should be a list.\n        '''\n        if list1 == []:\n            return []\n        else:\n            if len(list1) == 1:\n                return [list1[0]]\n            else:\n                return [list1[0] + comb(list1[1:])]\n    return comb(list(list1))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combine(list1,r,n):\n        result=[]\n        if n==0:\n            return []\n        for i in range(r,len(list1)):\n            result.append(list1[i])\n            combine(list1,i+1,n-1)\n        return result\n    list1 = sorted(list1)\n    return combine(list1,0,len(list1))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        combs = []\n        for i in range(1, len(list1)):\n            for comb in combinations_list(list1[0:i]):\n                combs.append([comb])\n        return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return list1\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return list1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    output = -1\n    current_max = -1\n    subarray = [1]\n    \n    for i in range(1, len(arr)):\n        current_max = max(arr[i], current_max * arr[i])\n        if current_max * arr[i] > output:\n            output = current_max * arr[i]\n            subarray = [arr[i], arr[i]]\n    \n    return output, subarray\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    sub_arr = []\n    current_product = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_sub_product = 1\n    index = 0\n    current_product = 1\n    max_product = 1\n    while index < len(arr):\n        current_product = 1\n        for i in range(index,len(arr)):\n            current_product *= arr[i]\n        if max_product < current_product:\n            max_sub_product = max_product\n            index = i\n        else:\n            max_product *= current_product\n        current_product = 1\n    return max_sub_product, index\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    current_max = -1\n    current_min = -1\n    current_sum = 0\n    max_product = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if (current_sum > current_max):\n            current_max = current_sum\n            current_min = arr[i]\n        if (current_sum < current_max):\n            current_max = current_sum\n        if (current_sum == current_max):\n            current_sum = 0\n        if (current_max == current_sum):\n            max_product = current_max\n    return current_min, max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product_subarray = 1\n    start_idx = 0\n    end_idx = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    left = 0\n    right = 0\n    max_product = 0\n    cur_max = 0\n    for i in range(len(arr)):\n        left = max(left, arr[i])\n        right = max(arr[i], arr[i] + left)\n        cur_max = max(cur_max, arr[i])\n        max_product = max(cur_max, arr[i] + left + right)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_arr = [1 for i in range(len(arr))]\n    for i in range(1, len(arr)):\n        max_arr[i] = arr[i] * max(arr[i - 1], arr[i - 1])\n    return max(max_arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_val = max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_val = max(arr[i], arr[i-1]*max_val)\n        max_product = max(max_val, max_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    i = 0\n    j = 0\n    sub = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    for i in values:\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if len(dict)!= len(i):\n            print(\"All values in dict are different in the dictionary\")\n            return False\n    return True\n    \ndef write_json(dict, file):\n    '''\n    Write a dictionary to json file.\n    '''\n    try:\n        with open(file, 'w') as f:\n            json.dump(dict, f)\n    except Exception as e:\n        print(f\"Error occured while writing the json file\")\n        print(e)\n    else:\n        print(f\"Successfully written the json file in {file}\")\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    same = True\n    for i in dict.values():\n        if i!= n:\n            same = False\n    return same\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if type(dict[key])!= dict:\n            print('Error: This should only be dictionary.')\n            return False\n        if len(set(dict[key].keys())) > n:\n            print('Error: This dictionary is too long.')\n            return False\n        if len(dict[key])!= len(set(dict[key].values())):\n            print('Error: This dictionary is not consistent with the given values.')\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k,v in dict.items():\n        if dict[k]!= v:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if isinstance(n, int) and 0 < n < len(dict):\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if key!= n and value!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 0:\n        return True\n    else:\n        return all(dict[key] == dict[key+1] for key in range(n-1))\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    for i in range(len(dict)):\n        if dict[i]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #Your code goes here\n    #Extract a list of items from the dictionary\n    #Remove each item from the list\n    #Return the new dictionary with the list of items removed\n    #Create a new dictionary with the new list\n    #Replace the empty list with the original dictionary\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if len(dict1[i]) == 0:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if len(v) == 0:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == \"\":\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # TODO: Implement this function.\n    # Please Note that the elements in the dictionary are strings, not integers.\n    # For example, {\"p\": \"1\", \"q\": \"\", \"r\": \"\"} would return {\"p\": 1, \"q\": \"\", \"r\": \"\"}\n    # In the below function, the string is changed to int.\n    # For example, the key is \"p\", and the value is changed to 1.\n    # This function should return the dictionary without the empty values.\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.clear()\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in range(0, len(dict1)):\n        if len(dict1[i]) == 0:\n            del dict1[i]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr == []:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m=1\n    n=len(arr)\n    for i in range(n):\n        m*=arr[i]\n    maxp=m\n    for i in range(n-1):\n        m*=arr[i]\n        maxp=max(maxp,m)\n    return maxp\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    #create a dictionary with key: the number of subsequences, and value: the number of subsequences.\n    dict1 = dict()\n    \n    #use the below dict to generate a dictionary of the number of subsequences of each number:\n    for i in arr:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    \n    #find the maximum product in that dictionary:\n    max_value = -1\n    for i in dict1:\n        if dict1[i] > max_value:\n            max_value = dict1[i]\n    \n    #return the maximum product in that dictionary:\n    return max_value\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # f(i, j) = max(f(i-1, j-1), f(i-1, j) )\n    # f(i, j) = f(i-1, j-1) + f(i-1, j)\n    # f(i, j) = max(f(i-1, j), f(i, j-1))\n    # f(i, j) = f(i-1, j) * f(i-1, j-1)\n    \n    # x = f(n, m) = f(n-1, m-1) + f(n-1, m)\n    # y = f(m, n) = f(m-1, n-1) + f(m-1, n)\n    # z = f(n, m) = f(n-1, m) * f(n-1, m-1)\n    \n    # return x, y, z\n    \n    # naive solution\n    \n    if arr == []:\n        return 0\n    \n    i = 0\n    j = 1\n    res = 1\n    \n    while i < len(arr) and j < len(arr):\n        \n        if arr[i] < arr[j]:\n            res = res * arr[i]\n            i += 1\n        elif arr[i] > arr[j]:\n            res = res * arr[j]\n            j += 1\n        else:\n            res = res * arr[i] * arr[j]\n            i += 1\n            j += 1\n    \n    return res\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        max_product = max(max_product*arr[i], arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    if arr[0] == 0:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max = arr[0]\n    for i in range(1,len(arr)):\n        max = max*arr[i]\n    return max\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_sub = arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_sub:\n            max_sub = arr[i]\n            max_product = arr[i]\n        elif arr[i] > max_sub and arr[i] > max_product:\n            max_product = arr[i]\n            max_sub = arr[i]\n    \n    return max_sub\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_prod:\n            max_prod = arr[i]\n        if arr[i] < max_prod:\n            if arr[i] < arr[i-1] + max_prod:\n                max_prod = arr[i]\n    return max_prod\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (sum(test_tup[0]), sum(test_tup[1]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def pairwise_check(tup1, tup2):\n        '''\n        Check if the two tuples have a common pair of element\n        '''\n        assert len(tup1) == len(tup2), \"two tuples must have the same length\"\n        assert tup1[0]!= tup2[0], \"The tuples must have different elements\"\n        assert tup1[1]!= tup2[1], \"The tuples must have different elements\"\n        assert tup1[2]!= tup2[2], \"The tuples must have different elements\"\n        assert tup1[0]!= tup2[2], \"The tuples must have different elements\"\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) % 2 == 0:\n        result = [test_tup[0] + test_tup[1], test_tup[1] + test_tup[0]]\n    else:\n        result = [test_tup[0] + test_tup[1], test_tup[0] + test_tup[1]]\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(\"Please enter two tuples for the pairwise addition: \")\n    num_1 = int(input('Enter first number: '))\n    num_2 = int(input('Enter second number: '))\n    num_1_2 = (num_1, num_2)\n    return num_1_2\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # For each tuple, initialize the counter for elements we've already added\n    # If the element we're trying to add has already been added, it won't get added again\n    # otherwise, we have the counter for added elements\n    counter = 0\n    current_added_element = ()\n    # Iterate through the tuples\n    for i in range(len(test_tup)-1):\n        # If the tuple we're trying to add is the first element, and the tuple we're trying to add is the last element, we've already added them\n        if i == 0:\n            current_added_element = test_tup[i]\n        # If the tuple we're trying to add is the last element, we haven't added it yet, but the tuple we're trying to add is the first element\n        elif i == len(test_tup)-1:\n            current_added_element = test_tup[0]\n        # If the tuple we're trying to add is the first element, and the tuple we're trying to add is not the last element, we haven't added it yet, and the tuple we're trying to add is not the first element\n        else:\n            current_added_element = test_tup[i]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add_tup = (test_tup[0], test_tup[1], test_tup[2])\n    return add_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    if a < b:\n        a = b\n        b = a\n    else:\n        a = a\n        b = b\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_tup = ()\n    result_tup = tuple(map(sum, zip(test_tup, test_tup)))\n    return result_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # \n    if len(test_tup) == 0:\n        return 0,0\n    \n    test_tup1 = test_tup[:2]\n    test_tup2 = test_tup[2:]\n    \n    if test_tup2 == ():\n        test_tup2 = 0\n    if test_tup1[0] == test_tup2[0]:\n        test_tup1[1] += test_tup2[1]\n    elif test_tup1[1] == test_tup2[1]:\n        test_tup1[0] += test_tup2[0]\n    else:\n        test_tup1[1] += test_tup2[1]\n        test_tup1[0] += test_tup2[0]\n        \n    return test_tup1, test_tup2\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(n//2):\n        if (n % i == 0):\n            return arr[i] * arr[n - i - 1]\n    return -1\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import math\n    x = 0\n    for i in arr:\n        x = x * i\n    return math.prod(arr) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n - 1, -1, -1):\n        product *= arr[i]\n    return product\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        if n == 1:\n            return arr[0]\n        else:\n            i = 0\n            # Find the first n elements\n            while i < len(arr):\n                if arr[i] == 0:\n                    # Don't divide by 0, because it will lead to false division\n                    # (this function would only work if you specified -1 as dividend)\n                    return arr[i]\n                else:\n                    i = i + 1\n            # If we reach here, then n is not a prime number\n            return -1\n        \ndef generate_prime(n, all_possible_primes):\n    '''\n    Generates all primes from 2 to n inclusive\n    '''\n    p = 2\n    while p * p <= n:\n        # Generate all primes from 2 to n\n        for prime in all_possible_primes:\n            # Check if the given prime is not a factor of n\n            if prime % n!= 0:\n                # If so, it must be a non-primes\n                print(prime, 'is not a prime')\n                return False\n        # We put the next prime in the stack\n        all_possible_primes.append(p)\n        # Update p\n        p = p + 2\n    # We've generated all primes, and there's no more numbers we can get\n    return True\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    a = []\n    b = []\n    for i in range(n):\n        a.append(arr[i])\n    b.append(sum(a))\n    #print(b)\n    return b[-1] % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    i = 0\n    while(i < len(arr)):\n        x = arr[i]\n        while(x % n!= 0):\n            x = (x * n) % n\n        if x == 0:\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Find the sum of the elements in arr\n    sum = 0\n    for element in arr:\n        sum += element\n    # Divide by the product of the sum of the elements in arr\n    return sum % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    return arr[0]*arr[1]*arr[-1]%n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        sum = arr[0] * find_remainder(arr[1:], n)\n        return sum % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return(arr[n]*(1/arr[n]))\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c = 0\n    for i in range(len(l)): \n        if l[i] % 10!= 0: \n            c += 1\n    if c >= 2: \n        return False\n    else: \n        return True"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l: \n        if i % 10 == 0: \n            count += 1\n    if count == len(l): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l: return False\n    for i in range(1, len(l)):\n        if l[i-1]!= l[i] and l[i]!= l[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(map(int, l))\n    l_count = 0\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l:\n        if i==l[0] or i==l[-1]:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    s = str(l)\n    if len(s) < 1:\n        return False\n    count = 0\n    for i in range(1, len(s)):\n        if (s[i-1]!= s[i]):\n            if (s[i] == '0' and s[i-1] == '0') or (s[i] == '0' and s[i-1].isdigit()):\n                count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)!= len(set(l)):\n        return False\n    else:\n        consec = [x for x in l if x % 2 == 0]\n        if len(consec) == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    list1 = []\n    for i in l:\n        if i not in list1:\n            list1.append(i)\n    if len(list1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l[0] == l[-1]: \n        print(l[0],'is a consecutive number') \n    else: \n        print(l[0], 'is not consecutive number') \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0: \n        return False\n    elif l[0] == l[1]: \n        return True\n    elif l[0]!= l[-1]: \n        return True\n    else: \n        return check_Consecutive(l[1:]) \n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple([tup for tup in test_list1 if tup in test_list2])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # dictionary to convert list to dictionary\n    dictionary = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"H\": 8}\n    # make dictionary of tuple as a set\n    dictionary_tuple = set(dictionary.values())\n    # list of tuples as dictionary\n    dictionary_list = list(dictionary.values())\n    # set of elements in tuple\n    tuple_set = set(test_list1)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(sorted(set(test_list1) & set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0:\n        return []\n    \n    if len(test_list2) == 0:\n        return []\n    \n    #Identify the first element from both tuples\n    first_item = test_list1[0]\n    #Identify the second element from the second tuple\n    second_item = test_list2[0]\n    #Identify the intersection between the two\n    intersect_tuple = first_item, second_item\n    #Return the tuple\n    return intersect_tuple\n    \n    \ndef test_intersection():\n    '''\n    Testing the tuple_intersection function.\n    '''\n    test_tuple1 = (1, 2, 3, 4, 5)\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == (1, 2, 3, 4, 5)\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    assert tuple_intersection(test_tuple1, test_tuple2) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    \n    test_tuple1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    assert tuple_intersection(test_tuple1, test"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    test_list1 = list(test_list1)\n    test_list2 = list(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    for i in range(len(test_list1)):\n        for j in range(i+1, len(test_list2)):\n            if test_list1[i] in test_list2[j]:\n                intersection = intersection + (test_list1[i],)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if type(test_list1[0])!= tuple:\n        return \"Unable to find intersection\"\n    else:\n        if type(test_list2[0])!= tuple:\n            return \"Unable to find intersection\"\n        else:\n            return tuple(sorted(set(test_list1).intersection(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # define an empty list\n    list = []\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    for i in range(len(test_list1)):\n        for j in range(i+1, len(test_list1)):\n            if test_list1[i] is test_list1[j] and not test_list1[i] in test_list2:\n                intersection = test_list1[i]\n                break\n    return intersection\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    if ch in str1:\n        str2 = str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    temp_str = []\n    for c in str1:\n        if c == ch:\n            temp_str.append(newch)\n        else:\n            temp_str.append(c)\n    final_str = ''.join(temp_str)\n    return final_str"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(ch, newch)\n    return str1\n    \ndef replace_num(str1,num,newnum):\n    '''\n    Write a function to replace numbers in a string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(str(num),newnum)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #'list of symbols'\n    #ch = ['=','!','$']\n    #symbol = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9']\n    #newchar = ['!','$']\n    #str2 = str1.replace(ch,newchar)\n    #print(str2)\n    #for char in ch:\n        #str1 = str1.replace(char,newchar[ch.index(char)])\n    #print(str1)\n    new_str = ''\n    #for char in str1:\n        #new_str += char\n    #print(new_str)\n    for char in str1:\n        if char in newch:\n            new_str += char\n            #print(new_str)\n    #print(new_str)\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res = \"\"\n    for i in str1:\n        if i == ch:\n            res += newch\n        else:\n            res += i\n    return res\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,'{}'.format(newch))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str2+=newch\n        else:\n            str2+=str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,newch)\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #print(str1)\n    #print(ch)\n    #print(newch)\n    str1=str1.replace(ch,newch)\n    #print(str1)\n    #print(str1.encode(\"utf-8\"))\n    str1=str1.encode(\"utf-8\")\n    #print(str1)\n    #print(type(str1))\n    return str1\n    \n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # if len(dict1)==0:\n    #     print(\"Empty Dictionary\")\n    # else:\n    new_dict = {}\n    for key in dict1:\n        if dict1[key] not in new_dict:\n            new_dict[dict1[key]] = 1\n        else:\n            new_dict[dict1[key]] += 1\n    print(new_dict)\n    new_dict = sorted(new_dict.items(), key = lambda item : item[1], reverse=True)\n    print(new_dict)\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Your code here\n    \n    return (dict1)\n    \n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key = lambda x : x[1], reverse = True))\n    return sorted_dict\n    # for (k,v) in dict1.items():\n    #     dict1[k]=sort_counter(dict1[k])\n    # return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # Your code here\n    counter=Counter(dict1)\n    l=sorted(counter.items(),key=lambda x:x[1],reverse=True)\n    return l\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if dict1 == {}:\n        return dict1\n    if type(dict1) is not dict:\n        return None\n    for i in dict1.keys():\n        dict1[i] = sort_counter(dict1[i])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_sorted = {}\n    for key in dict1:\n        value = dict1[key]\n        if value not in dict_sorted:\n            dict_sorted[value] = [key]\n        else:\n            dict_sorted[value].append(key)\n    return dict_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Your code here\n    return sorted(dict1.values())\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys = dict1.keys()\n    new_dict = {}\n    for i in range(len(keys)):\n        new_dict[keys[i]] = dict1[keys[i]]\n    for i in range(len(keys)):\n        for j in range(len(keys)):\n            if keys[i] < keys[j]:\n                if new_dict[keys[i]] > new_dict[keys[j]]:\n                    new_dict[keys[i]],new_dict[keys[j]] = new_dict[keys[j]],new_dict[keys[i]]\n    return new_dict\ndef merge_two_dict(dict1,dict2):\n    '''\n    Merge two dictionary into one.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        d[i] = d[i].copy()\n        d[i].update(dict2[i])\n    return d\ndef merge_two_dict_get(dict1,dict2):\n    '''\n    Merge two dictionary into one.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            d[i][j] = d[i].pop(dict2[i])\n    return d\ndef merge_dict(dict1,dict2):\n    '''\n    Merge two dictionary into one.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == '?':\n                d[i][j] = dict2[i][j]\n    return d\ndef merge_dict_get(dict1,dict2):\n    '''\n    Merge two dictionary into one.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            d[i][j] = d[i][j].pop(dict2[i][j])\n    return d\ndef fix_json_files(file):\n    '''\n    Fix json files.\n    '''\n    json_file = open(file,'r')\n    json_data = json.load(json_file)\n    new_data = []\n    for i in range(len(json_data)):\n        if json_data[i]['question'][0] == '?':\n            new_data.append(json_data[i])\n    json_file.close()\n    return new_data\ndef fix_json_files_get(file):\n    '''\n    Fix json files.\n    '''\n    json_file = open(file,'r')\n    json_data = json.load(json_file)\n    new_data = []\n    for i in range(len(json_data)):\n        if json_data[i]['question'][0] == '?':\n            new_data.append(json_data[i])\n    json_file.close()\n    return new_data\ndef diff_two_dicts(dict1,dict2):\n    '''\n    Determine difference between two dictionary.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == '?':\n                d[i][j] = dict2[i][j]\n    return d\ndef diff_two_dicts_get(dict1,dict2):\n    '''\n    Determine difference between two dictionary.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == '?':\n                d[i][j] = dict2[i][j]\n    return d\ndef merge_dicts(dict1,dict2):\n    '''\n    Merge two dictionary into one.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == '?':\n                d[i][j] = dict2[i][j]\n    return d\ndef merge_dicts_get(dict1,dict2):\n    '''\n    Merge two dictionary into one.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == '?':\n                d[i][j] = dict2[i][j]\n    return d\ndef dict_set(dict1,dict2):\n    '''\n    Helper function for `merge_dicts` to create a new dictionary with no duplicates.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == '?':\n                d[i][j] = dict2[i][j]\n    return d\ndef dict_set_get(dict1,dict2):\n    '''\n    Helper function for `merge_dicts` to create a new dictionary with no duplicates.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == '?':\n                d[i][j] = dict2[i][j]\n    return d\ndef dict_diff(dict1,dict2):\n    '''\n    Determine difference between two dictionaries.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == '?':\n                d[i][j] = dict2[i][j]\n    return d\ndef dict_diff_get(dict1,dict2):\n    '''\n    Determine difference between two dictionaries.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == '?':\n                d[i][j] = dict2[i][j]\n    return d\ndef dict_get(dict1,key):\n    '''\n    Get value from dictionary.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == key:\n                return d[i][j]\ndef dict_get_get(dict1,key):\n    '''\n    Get value from dictionary.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == key:\n                return d[i][j]\ndef dict_get_get_get(dict1,key):\n    '''\n    Get value from dictionary.\n    '''\n    d = dict1.copy()\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i][j] == key:\n                return d[i][j]\ndef dict_print(d):\n    '''\n    Print dictionary.\n    '''\n    for i in range(len(d)):\n        print(d[i])\ndef dict_dicts_print(dicts1,dicts2):\n    '''\n    Print dictionary.\n    '''\n    for i in range(len(dicts1)):\n        print(dicts1[i],dicts2[i])\ndef dict_dicts_print_get(dicts1,dicts2):\n    '''\n    Print dictionary.\n    '''\n    for i in range(len(dicts1)):\n        print(dicts1[i],dicts2[i])\ndef dict_dicts_print_get_get(dicts1,dicts2):\n    '''\n    Print dictionary.\n    '''\n    for i in range(len(dicts1)):\n        print(dicts"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = 0\n    lst = []\n    lst1 = []\n    dict1 = dict(sorted(dict1.items(), key = lambda x: x[1], reverse = True))\n    for key, value in dict1.items():\n        lst.append([key, value])\n    for i in lst:\n        lst1.append(i[0])\n    return lst1\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    count = 0\n    for n in nums:\n        count = max(count,n)\n        count = min(count,n)\n    return count\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = max(nums)\n    min = min(nums)\n    nums.sort()\n    return max + min\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pas"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    new_nums = []\n    for i in nums:\n        new_nums.append(i)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    print(total)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_sum = 0\n    small_sum = 0\n    for i in range(len(nums)):\n        big_sum += nums[i]\n    for j in range(len(nums)):\n        small_sum += nums[j]\n    if big_sum == small_sum:\n        return (big_sum)\n    return -1\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # size of array\n    n = len(nums)\n    # checking the first number\n    if n < 1:\n        return None\n    # checking if the array is empty\n    if n == 1:\n        return nums[0]\n    # checking if the array is non-empty\n    elif n == 0:\n        return -1\n    # checking if the array is not valid\n    else:\n        return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return nums[0]\n    big = nums[0]\n    small = nums[0]\n    for i in nums[1:]:\n        if i > big:\n            big = i\n        if i < small:\n            small = i\n    return big + small\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return largest + smallest\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if isinstance(string, str) == True:\n        string = string.lower()\n    elif isinstance(string, str) == False:\n        print(\"Type not supported.\")\n        return False\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # your code goes here\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    n = 0\n    for x in str1:\n        if x.isalpha():\n            n += 1\n        else:\n            str1 = str1[n:]\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        if str1[i].islower():\n            res = res + str1[i]\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    str3 = str2.replace('-','')\n    str4 = str3.replace('.','')\n    str5 = str4.replace('!','')\n    str6 = str5.replace('?','')\n    str7 = str6.replace(' ','')\n    str7 = re.sub(r'[^a-zA-Z0-9]+',' ',str7)\n    return str7\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    str2 = str1.replace(' ','')\n    str3 = re.sub(r'[^\\w]','', str2)\n    str4 = re.sub(r'[^A-Za-z0-9]','', str3)\n    return str4\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    str2 = str1.replace(' ','')\n    str3 = re.sub(r'\\W+',' ',str2)\n    str4 = re.sub(r'\\w+',' ',str3)\n    str5 = re.sub(r'\\d+',' ',str4)\n    str6 = re.sub(r'[^a-zA-z0-9]+',' ',str5)\n    return str6\ndef remove_digit(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str2 = str1.replace(' ','')\n    str3 = re.sub(r'[^0-9]',' ',str2)\n    str4 = re.sub(r'\\d+',' ',str3)\n    return str4\ndef preprocessing(str1):\n    '''\n    Write a function to remove special characters and remove digits.\n    '''\n    str2 = str1.replace('!',' ')\n    str3 = str2.replace('?',' ')\n    str4 = str3.replace('.',' ')\n    str5 = str4.replace('!',' ')\n    str6 = str5.replace('?',' ')\n    str7 = str6.replace(' ','')\n    str8 = remove_lowercase(str7)\n    str9 = remove_punctuation(str8)\n    str10 = remove_stopwords(str9)\n    str11 = remove_digit(str10)\n    return str11\ndef remove_stopwords_and_digit(str1):\n    '''\n    Write a function to remove stopwords and digits from a given string.\n    '''\n    str2 = str1.replace(' ','')\n    str3 = re.sub(r'\\W+',' ',str2)\n    str4 = re.sub(r'\\d+',' ',str3)\n    str5 = re.sub(r'[^0-9]',' ',str4)\n    str6 = re.sub(r'\\W+',' ',str5)\n    str7 = re.sub(r'\\W+',' ',str6)\n    return str7\ndef print_dict(d):\n    '''\n    Write a function to print all the dictionary's keys and values.\n    '''\n    print('Dict Keys: ')\n    for key in d.keys():\n        print(key)\n    print()\n    print('Dict Values: ')\n    for value in d.values():\n        print(value)\n    print()\ndef replace_dict(str1):\n    '''\n    Write a function to replace dictionary's keys and values.\n    '''\n    d = dict()\n    for x in str1.split(' '):\n        if x not in d.keys():\n            d[x] = 1\n        else:\n            d[x] += 1\n    return d\ndef change_value_1(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    d[key] = value\n    return d\ndef change_value_2(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    d[key] = value\n    return d\ndef change_value_3(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    d[key] = value\n    return d\ndef remove_duplicates(str1):\n    '''\n    Write a function to remove duplicate keys and values from a given string.\n    '''\n    d = dict()\n    for x in str1.split(' '):\n        if x not in d.keys():\n            d[x] = 1\n        else:\n            d[x] += 1\n    return d\ndef remove_duplicates_1(str1):\n    '''\n    Write a function to remove duplicate keys and values from a given string.\n    '''\n    d = dict()\n    for x in str1.split(' '):\n        if x not in d.keys():\n            d[x] = 1\n        else:\n            if d[x] > 1:\n                d[x] = d[x] - 1\n            elif d[x] == 1:\n                del d[x]\n    return d\ndef change_value_1_1(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    if key not in d.keys():\n        d[key] = value\n    else:\n        if d[key] > 1:\n            d[key] = d[key] - 1\n        elif d[key] == 1:\n            del d[key]\n    return d\ndef change_value_1_2(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    if key not in d.keys():\n        d[key] = value\n    else:\n        if d[key] > 1:\n            d[key] = d[key] - 1\n        elif d[key] == 1:\n            del d[key]\n    return d\ndef change_value_1_3(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    if key not in d.keys():\n        d[key] = value\n    else:\n        if d[key] > 1:\n            d[key] = d[key] - 1\n        elif d[key] == 1:\n            del d[key]\n    return d\ndef change_value_2_1(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    if key not in d.keys():\n        d[key] = value\n    else:\n        if d[key] > 1:\n            d[key] = d[key] - 1\n        elif d[key] == 1:\n            del d[key]\n    return d\ndef change_value_2_2(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    if key not in d.keys():\n        d[key] = value\n    else:\n        if d[key] > 1:\n            d[key] = d[key] - 1\n        elif d[key] == 1:\n            del d[key]\n    return d\ndef change_value_2_3(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    if key not in d.keys():\n        d[key] = value\n    else:\n        if d[key] > 1:\n            d[key] = d[key] - 1\n        elif d[key] == 1:\n            del d[key]\n    return d\ndef change_value_3_1(d,key,value):\n    '''\n    Write a function to change dictionary's keys and values.\n    '''\n    if key not in d.keys():\n        d[key] = value\n    else:\n        if d[key] > 1:\n            d[key] = d[key] - 1\n        elif d[key] == 1:\n            del d[key]\n    return d\nde"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]{3}'\n    regex = re.compile(pattern)\n    res = regex.sub('', str1)\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = re.sub('[a-z]', '', str1).lower()\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1.replace(str1.lower(), \"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    def remove_lower(str1):\n        return re.sub('[a-z]', '', str1).lower()\n    return remove_lower(str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Step 1: create an empty list of lowercase substrings to return\n    lst = list()\n    \n    # Step 2: build a regex pattern to search for lowercase characters and replace them with\n    # spaces, using regular expressions to split each word of a string into a list of characters\n    pattern = r'[a-z]'\n    \n    # Step 3: use re.sub() to replace each word in the string with a space\n    for char in str1:\n        if char in pattern:\n            char = \" \"\n        lst.append(char)\n    \n    # Step 4: return the resultant list\n    return \"\".join(lst)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str(str1)\n    str1=str1.lower()\n    #print(str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=str1.lower()\n    for i in range(len(str2)):\n        if str2[i].islower():\n            str2=str2[:i] + str2[i+1:]\n    return str2\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all the punctuations from a given string.\n    '''\n    str2=str1.replace(\".\",\"\").replace(\",\",\"\").replace(\";\",\"\").replace(\"?\",\"\").replace(\"!\",\"\").replace(\"-\",\"\").replace(\"_\",\"\").replace(\"+\",\"\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"\\n\",\"\")\n    for i in range(len(str2)):\n        if str2[i].isdigit() or str2[i]==\"_\":\n            str2=str2[:i] + str2[i+1:]\n    return str2\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return int(str(n)[0])\n    else :\n        return int(str(n)[0:1])\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    elif n%10 == 0 :\n        return n//10\n    else :\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    elif n < 100 :\n        return 10\n    else :\n        return n%10\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    elif n < 100 :\n        return 10\n    else :\n        return n%10\n    \ndef sum_digits(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    if n < 10 :\n        return n\n    elif n < 100 :\n        return 10\n    else :\n        return n%10\n        \ndef product_digits(n) :  \n    '''\n    Write a python function to find the product of the digits of a given number.\n    '''\n    if n < 10 :\n        return n\n    elif n < 100 :\n        return 10\n    else :\n        return n%10\n    \ndef mod_digits(n) :  \n    '''\n    Write a python function to find the modulo of a given number.\n    '''\n    if n < 10 :\n        return n\n    elif n < 100 :\n        return 10\n    else :\n        return n%10\n        \ndef is_Prime(n) :  \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 2 :\n        return True\n    if n%2 == 0 :\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2) :\n        if n%i == 0 :\n            return False\n    return True\n    \ndef is_Perfect_Number(n) :  \n    '''\n    Write a python function to check if a given number is a perfect number or not.\n    '''\n    for i in range(2, (int(math.sqrt(n))+1)):\n        if n%i == 0:\n            return False\n    return True\n        \ndef is_Even(n) :  \n    '''\n    Write a python function to check if a given number is even or not.\n    '''\n    if n%2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2) :\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_Odd(n) :  \n    '''\n    Write a python function to check if a given number is odd or not.\n    '''\n    if n%2 == 1:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2) :\n        if n%i == 0:\n            return False\n    return True\n    \ndef add(n1, n2) :  \n    '''\n    Write a python function to add two numbers.\n    '''\n    return n1+n2\n    \ndef sub(n1, n2) :  \n    '''\n    Write a python function to add two numbers.\n    '''\n    return n1-n2\n    \ndef mul(n1, n2) :  \n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return n1*n2\n    \ndef div(n1, n2) :  \n    '''\n    Write a python function to divide two numbers.\n    '''\n    return n1/n2\n    \ndef square(n1) :  \n    '''\n    Write a python function to square a number.\n    '''\n    return n1**2\n    \ndef squareRoot(n1) :  \n    '''\n    Write a python function to find the square root of a number.\n    '''\n    if n1 == 0 :\n        return 0\n    else :\n        return n1**(1/2)\n    \ndef mod(n1) :  \n    '''\n    Write a python function to compute the modulus of a number.\n    '''\n    return math.fmod(n1, 10)\n    \ndef factorial(n) :  \n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n == 0 :\n        return 1\n    else :\n        return n*factorial(n-1)\n    \ndef gcd(a, b) :  \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a%b == 0 :\n        return b\n    else :\n        return gcd(b,a%b)\n    \ndef lcm(a, b) :  \n    '''\n    Write a python function to compute the least common multiple of two numbers.\n    '''\n    return a*b//gcd(a,b)\n    \ndef lcm_prime(n) :  \n    '''\n    Write a python function to compute the least common multiple of two numbers.\n    '''\n    if n == 2 :\n        return 2\n    if n == 1 :\n        return 1\n    else :\n        for i in range(2, int(math.sqrt(n))+1) :\n            if n%i == 0 :\n                return i\n    return i\n    \ndef greatestCommonDivisor(n1, n2) :  \n    '''\n    Write a python function to compute the greatest common divisor of two numbers.\n    '''\n    if n1%n2 == 0 :\n        return n2\n    else :\n        return greatestCommonDivisor(n1, n2//2)\n    \ndef min_key(d) :  \n    '''\n    Write a python function to find the key in a dictionary.\n    '''\n    if len(d) == 0 :\n        return None\n    else :\n        return min(d, key=d.get)\n    \ndef max_key(d) :  \n    '''\n    Write a python function to find the key in a dictionary.\n    '''\n    if len(d) == 0 :\n        return None\n    else :\n        return max(d, key=d.get)\n    \ndef product(n) :  \n    '''\n    Write a python function to compute the product of two numbers.\n    '''\n    if n == 0 :\n        return 1\n    else :\n        return n*product(n-1)\n    \ndef sum(n1, n2) :  \n    '''\n    Write a python function to compute the sum of two numbers.\n    '''\n    if n1 == 0 :\n        return n2\n    if n2 == 0 :\n        return n1\n    return n1+n2\n    \ndef factorial_n(n) :  \n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n == 0 :\n        return 1\n    if n == 1 :\n        return 1\n    else :\n        return n*factorial_n(n-1)\n    \ndef factorial_p(n) :  \n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n == 0 :\n        return 1\n    if n == 1 :\n        return 1\n    else :\n        return n*factorial_p(n-1)\n    \ndef is_prime(n) :  \n    '''\n    Write a python function to check if a given number is a prime number or not.\n    '''\n    if n%2 == 0 :\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2) :\n        if n%i == 0 :\n            return False\n    return True\n    \ndef is_Perfect_Number(n) :  \n    '''\n    Write a python function to check if a given number is a perfect number or not.\n    '''\n    if n == 0 :\n        return True\n    if n == 1 :\n        return True\n    if n < 10 :\n        return False\n    for i in range(2, int(math.sqrt(n))+1, 2) :\n        if n%i == 0 :\n            return False\n    return True\n        \ndef is_Odd(n) :  \n    '''\n    Write a python function to check if a given number is odd or not.\n    '''\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    dig = 0\n    while n > 0 :\n        dig = n % 10\n        n = n // 10\n    return dig\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n    \ndef find_second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n/10)\n    \ndef find_third_Digit(n) :\n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return int((n//10)%10)\n    \ndef find_fourth_Digit(n) :\n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    return int(n%10)\n    \ndef Find_Decimals(n) :\n    '''\n    Write a python function to find the decimals from a given number.\n    '''\n    if n < 0 :\n        return -n\n    else :\n        return n%10\n    \n    \ndef find_power_of_two(n) :\n    '''\n    Write a python function to find the power of two of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return int(n**(1/2))\n    \ndef Find_Modulo_Numbers(n) :\n    '''\n    Write a python function to find the modulo numbers of a given number.\n    '''\n    while n!= 0 :\n        if n%2 == 0 :\n            return n\n        n = n//10\n    return -1\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in range(0, len(str(n))) : \n        if (str(n)[i] == '0' and len(str(n)) == i+1) : \n            return i \n    return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    import math\n    #given a number\n    if n<10 :\n        return n%10\n    else :\n        return math.floor(math.log10(n))%10\n        "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n < 10):\n        return n\n    else :\n        return n % 10 \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_num=[]\n    for i in list:\n        if i%2==1:\n            odd_num.append(i)\n    return odd_num\ndef main():\n    num=int(input(\"Enter the number you want to search : \"))\n    print(Split(num))\nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    output = []\n    for i in list:\n        if i % 2!= 0:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2 == 0: \n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_odd = []\n    for x in list:\n        if x % 2!= 0:\n            list_odd.append(x)\n    return list_odd\n    \n    \nlist_for_pow = []\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # write your code here\n    result = []\n    for x in list:\n        if x % 2!= 0:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    print(odd)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = [x for x in list if x % 2 == 1]\n    print(result)\nSplit()\nSplit([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            odd_list.append(list[i])\n    return odd_list\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = n\n    while(a > 0) :\n        print(a, \"cubes of numbers\")\n        print(\"first number : \", a)\n        a -= 3\n    return a\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n+1)*(3*n+2)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(n)\n    print(sum(map(lambda x: x**3, range(n))))\n    print(sum(map(lambda x: x**3, range(n, 0, -1))))\n    \ndef find_min(n) :  \n    '''\n    Write a python function to find the min of n natural numbers.\n    '''\n    print(min(range(n)))\n    print(min(map(lambda x: x**3, range(n))))\n    print(min(map(lambda x: x**3, range(n, 0, -1))))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    for i in range(1, n + 1) :\n        sum = 0\n        for j in range(1, i + 1) :\n            sum += (j ** 3)\n        print (sum)\n        \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        return n ** 3\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using recursion.\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    def sum_cubes(n) : \n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        if n == 0 :\n            return 1\n        elif n == 1 :\n            return 0\n        else :\n            return n ** 3 + sum_cubes(n - 1)\n    \n    return sum_cubes(n)\n    \n    # To find the sum of cubes of the first n natural numbers, we need to solve this problem using re"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes=[]\n    for i in range(0,n):\n        cubes.append(i*i*i)\n    sum=0\n    for i in cubes:\n        sum=sum+i\n    difference=sum-sum\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 1 :\n        return n\n    elif n == 2 :\n        return n ** 3\n    else :\n        return n ** 3 - n ** 2 + 1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n * (n + 1) / 6\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 1 :\n        return 0\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize output array\n    output = []\n    # Loop through array to calculate the difference between each natural number\n    for i in range(n):\n        # Find the cube of the natural number\n        cube = n * (n*n + 1)\n        # Output the cube if the difference is greater than or equal to 0\n        if cube > 0:\n            # Append the cube to the output array\n            output.append(cube)\n            # Increment the sum of the cubes\n            cube = cube - 1\n        # Else output 0\n        else:\n            output.append(0)\n    # Return the output array\n    return output\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    answer = 0\n    for i in range(1, n+1) :\n        answer += (i**3)\n    return answer\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    XOR = 0\n    for i in range(N) : \n        XOR = XOR ^ A[i] \n    if XOR & 1 : \n        return 2 \n    else : \n        return 0 \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Counter = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i]^A[j]==0:\n                if i!=j:\n                    Counter+=1\n    return Counter\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N-1) : \n        if (A[i] & 1)!= 0 : \n            count+=1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    \n    for i in range(N) : \n        if (A[i] & 1)!= (A[i] >> 1) : \n            count = count + 1\n        \n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        if A[i] ^ 1!= A[N-1-i] :\n            count += 1\n    return count\n    \ndef main() :\n    '''\n    The main function of the script\n    '''\n    N = int(input())\n    A = []\n    for i in range(0,N):\n        A.append(int(input()))\n    print(find_Odd_Pair(A,N))\n    \nif __name__ == '__main__' :\n    main()"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort()\n    odd_count = 0\n    for i in range(len(A) -1) : \n        if A[i] & 1!= 0 : \n            odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    even = 0\n    # Start with pairs of 0\n    if A[0] == 0:\n        return odd\n    else:\n        for x in A : \n            if x == 0:\n                even = even + 1\n            else:\n                odd = odd + 1\n        return odd * even\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if(N == 0) : return 0\n    if(N == 1) : return 1\n    if(N == 2) : return 1\n    if(N < 2) : return 0\n    # write your code here\n    if(A[0] == A[1]) :\n        odd_pair = 0\n        for i in range(2, N) :\n            if(A[i] == 1) :\n                odd_pair += 1\n        return odd_pair\n    elif(A[0] == 1) :\n        odd_pair = 0\n        for i in range(2, N) :\n            if(A[i] == 2) :\n                odd_pair += 1\n        return odd_pair\n    else :\n        odd_pair = 0\n        for i in range(2, N) :\n            if(A[i] == 0) :\n                odd_pair += 1\n        return odd_pair\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #To do : \n    #Create a loop to go through all pairs.\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    num = 0\n    for i in range(N) : \n        if (A[i]%2)!= 0 : num+=1\n    return num\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += '_'\n        elif char.islower():\n            new_string += '^'\n        elif char =='':\n            new_string +=''\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\": return string\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == None:\n        return string\n    else:\n        string = string.replace(' ', '')\n        string = string.replace('-', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('!', '')\n        string = string.replace('?', '')\n        string = string.replace('\"', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('{', '')\n        string = string.replace('}', '')\n        string = string.replace('~', '')\n        string = string.replace('!', '')\n        string = string.replace('?', '')\n        string = string.replace('\"', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('/', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('!', '')\n        string = string.replace('?', '')\n        string = string.replace('\"', '')\n        string = string.replace('@', '')\n        string = string.replace('!', '')\n        string = string.replace('?', '')\n        string = string.replace('\"', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('!', '')\n        string = string.replace('?', '')\n        string = string.replace('\"', '')\n        string = string.replace('@', '')\n        string = string.replace('!', '')\n        string = string.replace('?', '')\n        string = string.replace('\"', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('!', '')\n        string = string.replace('?', '')\n        string = string.replace('\"', '')\n        string = string.replace('@', '')\n        string = string.replace('!', '')\n        string = string.replace('?', '')\n        string = string.replace('\"', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '')\n        string = string.replace('<', '')\n        string = string.replace('>', '')\n        string = string.replace('%', '')\n        string = string.replace('+', '')\n        string = string.replace('(', '')\n        string = string.replace(')', '')\n        string = string.replace('.', '')\n        string = string.replace(',', '')\n        string = string.replace(';', '"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for char in string:\n        if char =='':\n            print(\"[SPACE]\", end=\"\")\n        elif char == '?':\n            print(\"[QUESTION MARK]\", end=\"\")\n        elif char == '!':\n            print(\"[EXCLAMATION MARK]\", end=\"\")\n        elif char == '.':\n            print(\"[CIRCUMFLEX MARK]\", end=\"\")\n        else:\n            print(char, end=\"\")\n    return None\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return string\n    else:\n        return string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    for char in string:\n        if char.isupper():\n            string = string.replace(char, 'z')\n        else:\n            string = string.replace(char, 'A')\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggle_char = string.lower()\n    return toggle_char.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    text = list(string)\n    for i in range(len(string)):\n        if string[i] =='':\n            text[i] = '!'\n        elif string[i] == '!':\n            text[i] = '?'\n        elif string[i] == '?':\n            text[i] = '!'\n        elif string[i] =='':\n            text[i] = '!'\n    return ''.join(text)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return string\n    if string[0]!='':\n        return string.swapcase()\n    else:\n        return string[1:] + string[0]\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > 9:\n        return -1\n    elif n1 == 0:\n        return n2\n    elif n2 == 0:\n        return n1\n    elif n1 < n2:\n        if n2 == 2:\n            return n1 + n2\n        elif n2 > 5:\n            return -1\n        else:\n            return n1 + n2 - (n1 % 10)\n    else:\n        return -1\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = 0\n    for x in range(n1):\n        d += abs(n1 - x)\n    for y in range(n2):\n        d -= abs(n2 - y)\n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    return sum([int(x) - int(y) for x, y in zip(n1, n2)])\n    # if not type(n1) == str or not type(n2) == str:\n    #     return None\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # add dummy values\n    n1 = n1 + n2\n    n2 = n2 + n1\n    # use a dictionary to find the numbers (it's a bit slower, but also faster to compute)\n    return n1 - n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0:\n        return n2\n    if n2 == 0:\n        return -1\n    if n1 < 10:\n        return n1 + digit_distance_nums(n1, n2 - 1)\n    else:\n        return n1 - n2 + digit_distance_nums(n1 - n2, n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # write your solution here\n    sum = 0\n    for i in range(len(n1)):\n        if n1[i]!= n2[i]:\n            sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # your code goes here\n    #this is the \"library for us\"\n    #this is library that has the functions\n    #this is how we have a function to find the sum of the per-digit difference between two numbers.\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    num = 0\n    sub_list = []\n    for i in range(size):\n        if a[i]!= -1:\n            num = num + a[i]\n            sub_list.append(a[i])\n        else:\n            sub_list.pop()\n    return num\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    output = 0\n    sub_arr = []\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    return max(sum([a[i] for i in range(0, size) if a[i] > 0]), max_sub_array_sum(a, size - 1))"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # write your code here\n    if size == 1:\n        return a[0]\n    max_left = max_right = 0\n    for i in range(len(a)):\n        if a[i] < a[max_left] and size <= i + 1:\n            max_left = i\n        if a[i] > a[max_right] and size <= i + 1:\n            max_right = i\n        if size > i + 1:\n            sum_left = sum(a[:i+1])\n            sum_right = sum(a[i+1:])\n            if sum_left > sum_right:\n                sum_left, sum_right = sum_right, sum_left\n            if sum_left > 0:\n                if sum_right > 0:\n                    return sum_left + sum_right\n                else:\n                    return sum_left\n    return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or a == []:\n        return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    l = 0\n    r = 0\n    current_sum = 0\n    maximum = 0\n    while (r < size):\n        if (a[l] < a[r]):\n            current_sum = a[l]\n            l += 1\n            r += 1\n            if (l == r):\n                break\n        else:\n            current_sum += a[r]\n            r += 1\n    if (l < size):\n        while (r < size):\n            current_sum += a[r]\n            r += 1\n        maximum = current_sum\n    return maximum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    l = 0\n    r = 0\n    \n    while r < size:\n        max_sum += a[r]\n        if r == 0 or a[r-1] < a[r]:\n            max_sum = max(max_sum, a[r])\n            l += 1\n        if r == size - 1 or a[r+1] < a[r]:\n            max_sum = max(max_sum, a[r+1])\n            r += 1\n        r += 1\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_array_sum = []\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    else:\n        for i in range(0, size):\n            for j in range(i+1, size):\n                sub_array_sum.append(a[i] + a[j])\n        sub_array_sum.sort()\n        return sub_array_sum[size-1]\n    \n    #write a solution for a faster solution using a heap\n    #check if the last element is equal to the sum\n    #increment the sum of the smallest subarray\n    #return the sum of the subarray\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    result = 0\n    n = len(a)\n    for i in range(n):\n        if i == 0:\n            result = a[i]\n        elif i == n-1:\n            result = a[i] + a[i-1]\n        else:\n            result = a[i] + max(a[i-1], a[i+1])\n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    max_sum = 0\n    left, right = 0, 1\n    while right < size:\n        if right < size - 1:\n            if a[right] + a[left] > a[right+1] - a[left] and a[right] + a[left] > max_sum:\n                max_sum = a[right+1] - a[left]\n                left += 1\n        right += 1\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #get length of tuples\n    l = len(test_tup1)\n    #get the number of elements of tuples\n    n = len(test_tup2)\n    #create an empty array\n    result = []\n    #create a tuple array of tuples\n    temp = []\n    #create the outer list\n    temp.extend(test_tup1)\n    #create the outer list\n    temp.extend(test_tup2)\n    #append the tuples into the outer list\n    temp.append(n)\n    #append the tuples into the outer list\n    for i in range(n):\n        temp.append(temp[i])\n    #create a tuple array\n    temp = tuple(temp)\n    #create a list of tuples\n    temp_tup = list(temp)\n    #create a list of tuples\n    temp_tup.extend(list(test_tup2))\n    #create the set of tuples\n    set_tup = set(temp_tup)\n    #create an array\n    array = []\n    #create an array of tuples\n    array.extend(temp)\n    #append the tuples in array\n    array.extend(temp_tup)\n    #sort the array\n    array.sort()\n    #create a tuple\n    result.append(tuple(array))\n    #check if the union of the tuples in array has elements in the same place\n    if(n in set_tup):\n        #loop through elements in array\n        for i in range(n):\n            #if the element is in the tuple\n            if(i in array):\n                #check if the elements in the tuple are also in the set_tup\n                if(array.index(i) in set_tup):\n                    #if yes add the index of the tuple in the list\n                    result.append(tuple([i]))\n                    #remove the tuple from the array\n                    array.remove(i)\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    print(test_tup1)\n    print(test_tup2)\n    result = test_tup1 + test_tup2\n    result.sort()\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize two variables\n    union_tuple = []\n    \n    # define all the elements of the first tuple\n    union_tuple.append(tuple(sorted(test_tup1)))\n    \n    # define all the elements of the second tuple\n    union_tuple.append(tuple(sorted(test_tup2)))\n    \n    # iterate through the two given tuples\n    for i in range(0, len(union_tuple)-1):\n        # get the element from the first tuple\n        first_elem = union_tuple[i][0]\n        # get the element from the second tuple\n        second_elem = union_tuple[i+1][0]\n        # if the element of the first tuple is smaller than the element of the second tuple\n        if first_elem < second_elem:\n            # create a new tuple\n            # new_tuple = second_elem, first_elem\n            new_tuple = second_elem, first_elem\n            # append the new tuple to the union\n            union_tuple.append(new_tuple)\n        else:\n            # create a new tuple\n            # new_tuple = first_elem, second_elem\n            new_tuple = first_elem, second_elem\n            # append the new tuple to the union\n            union_tuple.append(new_tuple)\n    # return the union of the two given tuples\n    return union_tuple"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    a = []\n    b = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            a.append(elem)\n        else:\n            b.append(elem)\n    if len(a) > len(b):\n        return union_elements(b, a)\n    elif len(a) < len(b):\n        return union_elements(a, b)\n    else:\n        return a + b\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if (test_tup1 == None) and (test_tup2 == None):\n        return None\n    elif test_tup1 == None:\n        return test_tup2\n    elif test_tup2 == None:\n        return test_tup1\n    return list(set(test_tup1).union(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # TODO: Write the code to find the union of the elements of two given tuples and output them in sorted order.\n    # TODO: Write the code to find the union of the elements of two given tuples and output them in sorted order.\n    temp1 = test_tup1[:]\n    temp2 = test_tup2[:]\n    s = []\n    i = 0\n    while(len(temp1) > 0 and len(temp2) > 0):\n        if temp1[i] > temp2[i]:\n            s.append(temp1[i])\n            del temp1[i]\n        else:\n            s.append(temp2[i])\n            del temp2[i]\n        i += 1\n    if len(temp1) > 0:\n        s += temp1\n    if len(temp2) > 0:\n        s += temp2\n    return s\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    if test_tup1[0] < test_tup2[0]:\n        return union_elements(test_tup2, test_tup1)\n    elif test_tup1[0] > test_tup2[0]:\n        return union_elements(test_tup1, test_tup2)\n    return test_tup1\n    \n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    if test_tup1[0] <= test_tup2[0]:\n        return intersection_elements(test_tup2, test_tup1)\n    elif test_tup1[0] >= test_tup2[0]:\n        return intersection_elements(test_tup1, test_tup2)\n    return test_tup1\n    \ndef count_elements(test_tup):\n    '''\n    Write a function that takes a tuple and counts the number of elements in it.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    if test_tup[0] < test_tup[0]:\n        return count_elements(test_tup[1:])\n    elif test_tup[0] > test_tup[0]:\n        return count_elements(test_tup[1:])\n    else:\n        return 1\n        \ndef are_ascending(test_tup):\n    '''\n    Write a function that takes a tuple and returns a boolean value indicating if it is ascending.\n    '''\n    if count_elements(test_tup) == 0:\n        return True\n    if test_tup[0] < test_tup[0]:\n        return are_ascending(test_tup[1:])\n    elif test_tup[0] > test_tup[0]:\n        return are_ascending(test_tup[1:])\n    else:\n        return True\n    \ndef main():\n    print(union_elements((1,2,3,4,5), (6,7,8,9,10)))\n    print(union_elements((1,2,3,4,5), (6,7,8,9,10)))\n    print(union_elements((1,2,3,4,5), (6,7,8,9,10)))\n    print(intersection_elements((1,2,3,4,5), (6,7,8,9,10)))\n    print(intersection_elements((1,2,3,4,5), (6,7,8,9,10)))\n    print(are_ascending((1,2,3,4,5)))\n    print(are_ascending((6,7,8,9,10)))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_tup1 = sorted(test_tup1)\n    sorted_tup2 = sorted(test_tup2)\n    if sorted_tup1 == sorted_tup2:\n        return sorted_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # YOUR CODE HERE\n    tup1=test_tup1\n    tup2=test_tup2\n    return sorted(tup1+tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # 1. Create a new tuple to store the new list\n    tuple_1 = []\n    \n    # 2. Get the first element from the first tuple and append it to the new tuple.\n    for i in range(len(test_tup1[0])):\n        tuple_1.append(test_tup1[0][i])\n    \n    # 3. Get the second element from the second tuple and append it to the new tuple.\n    for i in range(len(test_tup2[0])):\n        tuple_1.append(test_tup2[0][i])\n    \n    # 4. Create a new tuple to store the first and second element of the union.\n    new_tuple = tuple(tuple_1)\n    \n    # 5. Return the sorted tuple.\n    return sorted(new_tuple)\n    "
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) <= 1:\n        return 1\n    return Find_Max_Length(lst[1:len(lst)]) + 1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        j = 0\n        while j < len(i) and i[j]!= i[0]:\n            j = j + 1\n        if j == len(i):\n            continue\n        else:\n            if len(i[j:]) > max_length:\n                max_length = len(i[j:])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m = 1\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] == lst[j]:\n                m = max(m, lst[j] - lst[i])\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Longest_Sublist_Length = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                count[(i,j)] = len(lst[i])\n            else:\n                count[(i,j)] = len(lst[j])\n    \n    max_length = 0\n    max_key = None\n    for key, value in count.items():\n        if value > max_length:\n            max_length = value\n            max_key = key\n    return max_key\n    \n    \n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 0\n    for i in range(0,len(lst)):\n        for j in range(0,i):\n            if lst[j] > lst[i]:\n                return i+1\n    return len(lst)\n    \n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    if len(lst) == 2:\n        return 2\n    \n    if lst[0] == lst[1]:\n        return 2\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lengths = []\n    for i in lst:\n        lengths.append(len(i))\n    return max(lengths)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return len(max(lst, key=len))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:  \n        return 0  \n    count_max = 0  \n    max_len = 0  \n    if len(lst) == 1:  \n        return 1  \n    else:  \n        for i in range(len(lst)):  \n            if len(lst[i]) > count_max:  \n                count_max = len(lst[i])  \n                max_len = i + 1  \n    return max_len  \n  \n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #TODO: fill the function with a regex\n    pattern = r'(?<=\\w)([^\"\\']+?)\\s?'\n    values = re.findall(pattern, text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if '\"' not in text:\n        if text[0]=='\"':\n            text = text[1:len(text)]\n        return text\n    else:\n        splt = text.split(\"'\")\n        splt = [x.replace('\"', '') for x in splt]\n        splt = [x.replace('\\''', '') for x in splt]\n        return splt\n    \ndef preprocess_text(text):\n    '''\n    Clean the text of multiple lines.\n    '''\n    return re.sub(r'\\s+','', text).replace('\\n', '').replace('\\t','').replace('\\r','')\n    \ndef get_all_sentences(text):\n    '''\n    Tokenize the text.\n    '''\n    sentence_list = text.split('.')\n    return sentence_list\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    values_matcher = re.compile(r'\\((.*?)\\)')\n    match = values_matcher.findall(text)\n    for match in match:\n        values.append(match[0].strip('\"'))\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    idx = -1\n    for idx, char in enumerate(text):\n        if char == '\\\"':\n            idx += 1\n            if idx < len(text) - 1 and text[idx + 1] == '\\\"':\n                idx += 2\n            else:\n                values.append(text[idx:])\n                break\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # remove the quotes\n    text = re.sub(r\"\\\"\", \"\", text)\n    # remove the closing quotes\n    text = re.sub(r\"\\\"\", \"\", text)\n    # remove the backslash\n    text = re.sub(r\"\\\", \"\", text)\n    # remove the backslash\n    text = re.sub(r\"\\'\", \"\", text)\n    # remove the backslash\n    text = re.sub(r\"\\n\", \"\", text)\n    # remove the newline\n    text = re.sub(r\"\\n\", \"\", text)\n    # remove the double quotes\n    text = re.sub(r\"\\\"\", \"\", text)\n    # remove the double quotes\n    text = re.sub(r\"\\'\", \"\", text)\n    # remove the double quotes\n    text = re.sub(r\"\\n\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", \"\", text)\n    # remove the comma\n    text = re.sub(r\",\", "
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?:\\'\\'|\\\"\\')[^\\']*(?:\\'\\'|\\\"\\')\"\n    try:\n        return re.findall(pattern, text)[0]\n    except:\n        return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    new_text = re.sub(\"'\",'',text)\n    new_text = re.sub(\"\\\"\",'',new_text)\n    new_text = re.sub(r'\"([^\"]*)\"',r'\"\\1\"',new_text)\n    new_text = re.sub(r'[^A-Za-z0-9\\s]',r'',new_text)\n    new_text = new_text.split(\"'\")\n    return new_text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.split('\"')\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"|\"(.*?)(.)(.*)'\n    return re.search(pattern,text).group(2).replace(\" \",\"\")\ndef get_name(row):\n    name = extract_values(row[6])\n    return name.split()[-1].split(\".\")[0]\ndef get_email(row):\n    email = extract_values(row[6])\n    return email\ndef get_url(row):\n    url = extract_values(row[6])\n    return url.replace(\"www.\",\"\")\ndef get_phone(row):\n    phone = extract_values(row[6])\n    return phone.replace(\"(\",\"\").replace(\")\",\"\")\ndef get_company(row):\n    company = extract_values(row[7])\n    return company.split()[0].split(\".\")[0]\ndef get_position(row):\n    position = extract_values(row[7])\n    return position.split()[0].split(\".\")[0]\ndef get_salary(row):\n    salary = extract_values(row[7])\n    return salary.replace(\",\",\"\").replace(\" \",\"\")\ndef get_salary_1(row):\n    salary_1 = extract_values(row[7])\n    return salary_1.split()[0].split(\".\")[0]\ndef get_salary_2(row):\n    salary_2 = extract_values(row[7])\n    return salary_2.split()[0].split(\".\")[0]\ndef get_salary_3(row):\n    salary_3 = extract_values(row[7])\n    return salary_3.split()[0].split(\".\")[0]\ndef get_salary_4(row):\n    salary_4 = extract_values(row[7])\n    return salary_4.split()[0].split(\".\")[0]\ndef get_salary_5(row):\n    salary_5 = extract_values(row[7])\n    return salary_5.split()[0].split(\".\")[0]\ndef get_salary_6(row):\n    salary_6 = extract_values(row[7])\n    return salary_6.split()[0].split(\".\")[0]\ndef get_year(row):\n    year = extract_values(row[7])\n    return year.split()[0]\ndef get_category(row):\n    category = extract_values(row[7])\n    return category.split()[0]\ndef get_area(row):\n    area = extract_values(row[7])\n    return area.split()[0]\ndef get_address(row):\n    address = extract_values(row[7])\n    return address.split()[-1].split(\",\")\ndef get_full_name(row):\n    full_name = get_name(row)\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_2(row):\n    full_name = get_name(row[2])\n    full_name_1 = get_name(row[1])\n    return full_name + \" \" + full_name_1\ndef get_full_name_3(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_4(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_5(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_6(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_7(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_8(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_9(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_10(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_11(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_12(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_13(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_14(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_15(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_16(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_17(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_18(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_19(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_20(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_21(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_22(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_23(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    return full_name + \" \" + full_name_1\ndef get_full_name_24(row):\n    full_name = get_name(row[1])\n    full_name_1 = get_name(row[2])\n    retur"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\*|\\=|\\!|\\?|\\&|\\&|\\;|\\;|\\_)'\n    val_regex = '^.*[\\d,]+(\\s|,|\\.|\\)|\\(|\\)|\\.|\\)|\\[|\\]|\\[|\\]|\\{|\\}|\\+|\\-|\\"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if (arr[i]!=arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # create a dictionary where keys are all the numbers and values are the count of numbers that differ\n    dictionary = {}\n    for i in range(0,n): \n        dictionary[arr[i]] = dictionary.get(arr[i], 0) + 1\n    # print the dictionary with unordered pairs\n    for i in range(0, n): \n        print(dictionary[arr[i]],'',arr[i],dictionary[arr[i] - 1])\n        # if the key is not present then increase the value by 1\n        dictionary[arr[i]] = dictionary[arr[i]] + 1\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if (arr[i] == arr[j]):\n                if(arr[i] == arr[j] or (arr[j] == arr[i])):\n                    count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    p = 0\n    count = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]<arr[j] and arr[i]==arr[j]:\n                counter=counter+1\n    return counter\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 0\n    else:\n        pairs=0\n        for i in range(1,n):\n            for j in range(i,n):\n                if (arr[i]!=arr[j] and arr[i]!=arr[j+1]):\n                    pairs+=1\n        return pairs\n    \n    \n    "
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # make a new list of all the odd elements\n    odd = []\n    for i in arr:\n        if i%2==0:\n            odd.append(i)\n    print(odd)\n    # now add all the even elements to odd list\n    for i in arr:\n        if i%2==1:\n            odd.append(i)\n    print(odd)\n    # now remove all the even elements from odd list\n    for i in odd:\n        arr.remove(i)\n    print(arr)\n    # now add all the odd elements to arr\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in odd:\n        arr.remove(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to arr\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in odd:\n        arr.remove(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in odd:\n        arr.remove(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in odd:\n        arr.remove(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in odd:\n        arr.remove(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in odd:\n        arr.remove(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now remove all the odd elements from odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)\n    # now add all the odd elements to odd list\n    for i in arr:\n        arr.append(i)\n    print(arr)"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count_pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j] and arr[i] <= n and arr[j] <= n:\n                count_pairs += 1\n    return count_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    if (len(arr)<=1):\n        return 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j] and arr[i]!= 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    l = []\n    s = ''\n    for c in word:\n        if c.isalpha():\n            l.append(c)\n        else:\n            if c.isnumeric():\n                s += c\n            else:\n                s +=''\n    return s\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [i for i in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [x for x in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    l = len(word)\n    result = []\n    i = 0\n    while i<l:\n        result.append(word[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Sample String : 'holberton'\n    # Expected Output : ['hol', 'berton']\n    #\n    # str.split('a') -> ['hol', 'berton']\n    # str.split('i') -> ['hol', 'i', 'berton']\n    # str.split('i') -> ['hol', 'i', 'berton']\n    return word.split(\" \")\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ') \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if type(word)!= str:\n        raise TypeError\n    elif len(word) < 2:\n        raise ValueError\n    else:\n        return word[:len(word)//2]\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # write your code here\n    return n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    x = 0\n    while n:\n        x += n%10\n        n = n//10\n    return x\n    \ndef plus_one(digits):\n    '''\n    Write a function that adds one to the digits in a non-negative integer.\n    '''\n    x = 0\n    for i in range(len(digits)):\n        if digits[i] == '0':\n            x += 1\n        else:\n            x -= 1\n        if x < 0:\n            x = 0\n        digits[i] = str(x)\n    return digits\n    \ndef subtract(digits):\n    '''\n    Write a function that subtracts one from the digits in a non-negative integer.\n    '''\n    x = 0\n    for i in range(len(digits)):\n        if digits[i] == '0':\n            x += 1\n        else:\n            x -= 1\n        if x < 0:\n            x = 0\n        digits[i] = str(x)\n    return digits\n    \ndef main():\n    '''\n    Provide different inputs and call the functions\n    '''\n    # write your code here\n    n = input('Digits: ')\n    n = int(n)\n    # return n\n    digits = list(str(n))\n    \n    # print(digits)\n    n = plus_one(digits)\n    print(n)\n    n = subtract(digits)\n    print(n)\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n<=0:\n        return 0\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    import math\n    if n<=1:\n        return n\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        print(\"Negative numbers cannot be represented as integers\")\n    else:\n        return sum([int(i) for i in str(abs(n))])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(d) for d in str(n) if d!= '0'])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if (n <= 0):\n        return 0\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list_length = len(list1)\n    for index in range(list_length - 1):\n        if list1[index] > list1[index + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return False\n    elif len(list1)==1:\n        return True\n    else:\n        if list1[0]<list1[1]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # sort_list = sorted(list1)\n    # if sort_list == sorted(list1):\n    #     print(\"This is a sorted list.\")\n    # else:\n    #     print(\"This is not a sorted list.\")\n    for i in range(len(list1)):\n        if list1[i] > list1[i+1]:\n            print(\"Not a sorted list.\")\n            return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0,len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Write your code here\n    if len(list1) <= 1:\n        return True\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    # check if list is sorted\n    if list1:\n        if list1[0] > list1[1]:\n            return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    return sorted_list == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == []:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # list_sort = sorted(list1)\n    # if list_sort == list1:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i=0\n    while i<len(list1)-1:\n        if list1[i] > list1[i+1]:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    if length <= 0:\n        print(\"\\nInvalid input\")\n    else:\n        for i in range(length):\n            empty_list.append({})\n        return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    for i in range(length):\n        dictionaries.append({})\n    return dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_empty_dicts = []\n    for index in range(length):\n        list_of_empty_dicts.append({})\n    return list_of_empty_dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n    \ndef even(x):\n    '''\n    Write a function that returns the number of even numbers in a list.\n    '''\n    count = 0\n    for i in range(x):\n        if i % 2 == 0:\n            count += 1\n    return count\n    \ndef odd(x):\n    '''\n    Write a function that returns the number of odd numbers in a list.\n    '''\n    count = 0\n    for i in range(x):\n        if i % 2!= 0:\n            count += 1\n    return count\n    \ndef even_odd(x):\n    '''\n    Write a function that returns the number of even numbers and odd numbers in a list.\n    '''\n    count = 0\n    for i in range(x):\n        if i % 2 == 0:\n            if i % 2 == 1:\n                count += 1\n        else:\n            if i % 2 == 1:\n                count += 1\n    return count\n    \ndef list_of_squares(x):\n    '''\n    Write a function that returns a list of squares of the list x.\n    '''\n    squares = []\n    for i in range(x):\n        squares.append(i ** 2)\n    return squares\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dicts = []\n    for i in range(length):\n        dicts.append(dict())\n    return dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_dict = []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    return my_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    return lst\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1 = list1.copy()\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if type(list1[i][j])!= list:\n                list1[i][j] = list1[i][j].lower()\n            else:\n                list1[i][j] = list1[i][j][0].lower()\n    \n    return list1\n    \ndef sort_strs(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1 = list1.copy()\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if type(list1[i][j])!= list:\n                list1[i][j] = list1[i][j].lower()\n            else:\n                list1[i][j] = list1[i][j][0].lower()\n    \n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_func = lambda x: x[0]\n    list1.sort(key = sort_func)\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    def string_sort(list1):\n        \"\"\"\n        Here we are going to sort each of the elements of the given list\n        \"\"\"\n        for i in range(len(list1)):\n            list1[i].sort()\n        return list1\n    \n    return string_sort(list1)\n    "
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort(l1,l2):\n        '''\n        1st method: sort the sublists in the given lists and return their sorted\n        '''\n        return [sorted(x) for x in zip(*(itertools.zip_longest(*l1, fillvalue=' ')))][0]\n    return [sort(l1,l2) for l1,l2 in zip(*(list(list1),))]\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Since every array in the list is a list, we can use a counter in Python to count the length of the array.\n    # We can also do it in a dictionary.\n    # Create a dictionary to count the lengths of the array.\n    dictionary = {}\n    for element in list1:\n        dictionary[len(element)] = element\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Write your code here.\n    list2=[]\n    \n    for x in list1:\n        list2.append(x.split())\n    \n    list3=[]\n    for i in range(len(list2)):\n        for j in range(len(list2[i])):\n            list3.append(list2[i][j])\n    return list3\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if list1 == []:\n        return list1\n    if len(list1) == 1:\n        return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append([])\n        for j in range(len(list1[i])):\n            new_list[i].append(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j].isdigit():\n                new_list[i].append(int(list1[i][j]))\n            else:\n                new_list[i].append(list1[i][j])\n    for i in range(len(new_list)):\n        for j in range(len(new_list[i])):\n            if new_list[i][j].isdigit():\n                new_list[i][j] = int(new_list[i][j])\n            else:\n                new_list[i][j] = new_list[i][j].lower()\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            new_list.append(list1[i][j])\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    string = ''\n    for x in list1:\n        string += str(x) + ','\n    string = string.rstrip(',')\n    string = string.split(',')\n    string.sort()\n    return string\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # assume that the number of lists should be at least 2\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    count = {}\n    for i in range(len(nums)-1):\n        if nums[i] not in count:\n            count[nums[i]] = 1\n        else:\n            count[nums[i]] += 1\n    \n    for i in count:\n        if count[i] == 1:\n            nums.remove(i)\n    return len(nums)\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # get the unique numbers\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    # return the unique\n    return unique\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    nums_set = set(nums)\n    return nums_set\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # get unique element\n    def unique_nums(nums):\n        nums = set(nums)\n        return list(nums)\n    # return nums\n    # return unique_nums(nums)\n    return list(unique_nums(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # pass\n    # write your solution here\n    nums_list = list(set(nums))\n    return nums_list\n    \ndef find_index(list, item):\n    '''\n    Given a list of items and a target item, return the index of the element in the list\n    '''\n    # pass\n    # write your solution here\n    for index, i in enumerate(list):\n        if i == item:\n            return index\n    return -1\n    \ndef remove_duplicate_numbers(nums):\n    '''\n    Given a list of numbers, remove all the duplicate numbers in the list\n    '''\n    # pass\n    # write your solution here\n    nums_list = two_unique_nums(nums)\n    for i in range(len(nums_list)):\n        nums_list[i] = str(nums_list[i])\n        index_list = find_index(nums_list, nums_list[i])\n        if index_list!= -1:\n            nums_list[index_list] = \"0\"\n            nums_list[index_list + 1] = \"0\"\n        else:\n            pass\n    return nums_list\n    \ndef main():\n    # pass\n    # write your solution here\n    nums = [1,1,1,2,2,3]\n    print(remove_duplicate_numbers(nums))\n    \n    #pass\n    # write your solution here\n    nums = [2,1,2,2]\n    print(remove_duplicate_numbers(nums))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    nums_set = set(nums)\n    \n    print(nums_set)\n    \n    nums_tuple = tuple(nums_set)\n    \n    print(nums_tuple)\n    \n    return nums_tuple\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    my_list = []\n    for i in range(len(nums)):\n        my_list.append(nums[i])\n    return my_list\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dct = {}\n    nums = sorted(nums)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print(\"The product of the unique numbers is : \", end=\"\")\n    if len(list_data) == 0:\n        print(\"It is an empty list\")\n    else:\n        product_of_unique_numbers = 1\n        for element in list_data:\n            product_of_unique_numbers *= element\n        print(product_of_unique_numbers)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    return sum(unique_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dic_product = {}\n    for i in list_data:\n        if i in dic_product:\n            dic_product[i] += 1\n        else:\n            dic_product[i] = 1\n    return dic_product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_product={}\n    for i in range(1,len(list_data)):\n        product = list_data[i]**i\n        if product not in dict_product:\n            dict_product[product] = 1\n        else:\n            dict_product[product] += 1\n    return dict_product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return max(set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=1\n    for i in range(len(list_data)):\n        product *= list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_product={}\n    for product in list_data:\n        if product in dict_product:\n            dict_product[product]+=1\n        else:\n            dict_product[product]=1\n    return dict_product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_unique = []\n    for i in range(len(list_data)):\n        product_unique.append(list_data[i])\n    product_unique = list(dict.fromkeys(product_unique))\n    return product_unique\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    list_sum = 0\n    for i in list_data:\n        list_sum += i\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 4*pi*r**2\n    print(\"Surface Area of the Cylinder:\",s)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = r**2*h**2\n    return(S)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    import math\n    a = h**2/2\n    b = (2*h)**2\n    c = r**2\n    surfacearea = pi*(b/2)*((h**2)-(h*math.sqrt(a*(b/c))))\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=3.14*r*h\n    print(\"Surface area of the cylinder is: \"+str(surfacearea))\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*(r*h)\n    # SOLUTION 1\n    # return 2*(((r**2)*h) + (h**2))\n    # SOLUTION 2\n    # return 2*((r**2)*(h/2)) + (h**2/2)\n    # SOLUTION 3\n    # return 2*(r**2 * (h/2)) + (r**2 * h**2 / 2)\n    # SOLUTION 4\n    # return 2*((r**2)*(h/2)) + (h**2 / 2)\n    # SOLUTION 5\n    # return 2*(r**2 * h) + (h**2 / 2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4 * np.pi * h * r\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*np.pi*(r**2)*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    s = pi * r**2\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    c = 2*(r*h**2)\n    return c\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3 * r * h\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = list(A)\n    n = len(A)\n    if n == 0:\n        return False\n    elif n == 1:\n        return B[0] == A[0]\n    else:\n        i = 0\n        while i < n:\n            if A[i]!= B[i]:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    for i in range(0,len(A)):\n        if A[i]!=B[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A in B: return True \n    else: return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    x=0\n    i=0\n    while x<len(A):\n        if A[x] in B:\n            i=i+1\n            x=x+1\n        else:\n            x=x+1\n    if i==len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A=list(A)\n    B=list(B)\n    return(len(A)==len(B))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(a in B for a in A)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+len(B)]==B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A[:len(A)]\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(B)==0): return True\n    if(len(B)==1):\n        if(A[0]==B[0]): return True\n        return False\n    for i in range(len(B)):\n        if(A[i]!=B[i]):\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    k = 0\n    for i in range(0,n):\n        if A[i]!= B[i]:\n            k = k + 1\n            break\n    if k == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # your code goes here\n    if n < 10:\n        return n\n    else:\n        return n % 10 + last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factor=1\n    for i in range(2,n+1):\n        factor*=i\n    return factor\n    \ndef is_Digit_Multiple_of_X(x,n): \n    '''\n    Write a python function that takes an input x and a number n and returns True if n is a\n    Digit multiple of x.\n    '''\n    return last_Digit_Factorial(n)%x==0\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # your code goes here\n    return factorial(n)[-1]\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<=1:\n        return n\n    else:\n        return n%10+last_Digit_Factorial(n//10)"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    l=len(str(n))\n    s=n\n    c=1\n    while(l>0):\n        if(n%s==0):\n            s=n//s\n            c=c*s\n        l-=1\n    return c"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def dig_fact(n):\n        if (n==0):\n            return 1\n        else:\n            return (n % (10**dig_fact(n//10))) + dig_fact(n//10)\n    dig_fact(n)\n    return dig_fact(n)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    l = n-1\n    k = 0\n    while(l >= 0):\n        k = n%10\n        n = n//10\n        l = l - 1\n    print(k)\n    \n    \ndef Factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * Factorial(n-1)\n    \ndef main():\n    # l = factorial(int(input(\"Enter a number : \")))\n    # print(l)\n    # last_Digit_Factorial(int(input(\"Enter a number : \")))\n    \n    # print(Factorial(int(input(\"Enter a number : \"))))\n    \n    # print(last_Digit_Factorial(int(input(\"Enter a number : \"))))\n    \n    # print(Factorial(int(input(\"Enter a number : \"))))\n    \n    # print(Factorial(int(input(\"Enter a number : \"))))\n    \n    # print(Factorial(int(input(\"Enter a number : \"))))\n    \n    # print(Factorial(int(input(\"Enter a number : \"))))\n    \n    # print(Factorial(int(input(\"Enter a number : \"))))\n    \n    print(Factorial(5))\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return n \n    if n%2==0:\n        return last_Digit_Factorial(n//2) \n    else:\n        return n*last_Digit_Factorial(n//2)"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n % 10)*last_Digit_Factorial(n//10)\n        \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    solution = []\n    def interleave(list1, list2, list3):\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                solution.append(list1[i] + list2[j] + list3[i+j])\n        return solution\n    return interleave(list1,list2,list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1 = [x[0] for x in list1]\n    list2 = [x[1] for x in list2]\n    list3 = [x[2] for x in list3]\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Append the elements of the first list into the second list\n    result = []\n    for x in range(len(list1)):\n        result.append(list1[x])\n        result.append(list2[x])\n        result.append(list3[x])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    res = []\n    len1 = len(list1)\n    len2 = len(list2)\n    len3 = len(list3)\n    #print(\"len1: \",len1)\n    #print(\"len2: \",len2)\n    #print(\"len3: \",len3)\n    #print(\"res: \",res)\n    for i in range(len1):\n        for j in range(len2):\n            #print(i,j)\n            res.append(list1[i]+list2[j]+list3[j])\n    return res\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"Error: Interleaving lists must have same length.\")\n    \n    final_list = []\n    i = 0\n    while i < len(list1):\n        if i % 2 == 0:\n            final_list.append(list1[i])\n        else:\n            final_list.append(list2[i])\n        i += 1\n    if len(list3) % 2!= 0:\n        i = 0\n        while i < len(list3):\n            if i % 2 == 0:\n                final_list.append(list3[i])\n            else:\n                final_list.append(list3[i])\n            i += 1\n        \n    return final_list\n        \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i]+list2[i]+list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[0] + list2[0] + list3[0], list1[1] + list2[1] + list3[1], list1[2] + list2[2] + list3[2]]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1+list2, list3+list1, list3+list2+list1]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #returns a list with the interleaved elements from both lists\n    new_list = []\n    new_list.extend(list1)\n    new_list.extend(list2)\n    new_list.extend(list3)\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4=[]\n    index = 0\n    for i in list1:\n        list4.append(i)\n    for i in list2:\n        list4.append(i)\n    for i in list3:\n        list4.append(i)\n    return list4\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of pairs that are not the same element in both tuples\n    # Elements not in a pair are considered similar\n    # In the \"Match Set\" here, we use the order of the two tuples to match a common element\n    # Source: https://www.w3schools.com/python/python_sets.asp\n    \n    match_set = set(test_tup1)\n    dissimilar_set = set(test_tup2)\n    \n    # The number of different elements in both tuples\n    num_of_different_elements = len(match_set - dissimilar_set)\n    \n    # Return the number of elements in match_set and a tuple with two elements\n    # each element in match_set is matched to a tuple with two elements in dissimilar_set\n    # source: https://www.w3schools.com/python/python_sets.asp\n    return num_of_different_elements, (match_set, dissimilar_set)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    i=0\n    while i<len(test_tup1)-1:\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n            i+=1\n        else:\n            i+=1\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    from operator import itemgetter\n    import itertools\n    diss_list = []\n    for key, value in test_tup1.items():\n        for key1, value1 in test_tup2.items():\n            if key == key1:\n                diss_list.append(key)\n    return diss_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    # sort the lists\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    # cycle through both lists\n    for element in test_tup1:\n        # we need to check each element in both lists\n        if element in test_tup2:\n            dissimilar_elems.append(element)\n    # if we found all elements, return\n    if len(dissimilar_elems) == 0:\n        return []\n    return dissimilar_elems\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_list.append(element)\n    return dissimilar_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    return list(set(test_tup1).intersection(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = test_tup1\n    b = test_tup2\n    c = sorted(a)\n    d = sorted(b)\n    if len(a) == len(b):\n        return sorted(a)\n    else:\n        return sorted(d)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = list(set(test_tup1))\n    lst2 = list(set(test_tup2))\n    if len(lst1) == 0 or len(lst2) == 0:\n        return -1\n    lst = []\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if i == j:\n                continue\n            if lst1[i] == lst2[j] or (lst1[i] in lst2 and lst2.count(lst1[i]) > 1):\n                lst.append(lst1[i])\n    return lst\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a new tuple containing the elements from two tuples\n    dissimilar = []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    import collections\n    from itertools import combinations\n    \n    tup1, tup2 = test_tup1, test_tup2\n    \n    diss_tup1, diss_tup2 = list(zip(*sorted(zip(tup1, tup2))))\n    \n    lens = list(map(len, diss_tup1))\n    \n    rnd = np.random.permutation(range(len(lens)))\n    \n    rnd_s = diss_tup1[rnd]\n    \n    diss_tup1 = diss_tup1[:rnd[rnd_s]]\n    \n    rnd = np.random.permutation(range(len(lens)))\n    \n    rnd_s = diss_tup2[rnd]\n    \n    diss_tup2 = diss_tup2[:rnd[rnd_s]]\n    \n    return diss_tup1, diss_tup2\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if even_fnc == True:\n        start_val = test_tuple[0]\n        end_val = test_tuple[1]\n    else:\n        start_val = test_tuple[1]\n        end_val = test_tuple[0]\n    for i in range(2,len(test_tuple)):\n        if test_tuple[i] == start_val:\n            if i!= 2:\n                test_tuple = test_tuple[:i]\n                test_tuple = test_tuple + test_tuple[i+1:]\n            else:\n                test_tuple = test_tuple[:i]\n        if test_tuple[i] == end_val:\n            if i!= 2:\n                test_tuple = test_tuple[:i]\n                test_tuple = test_tuple + test_tuple[i+1:]\n            else:\n                test_tuple = test_tuple[:i]\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_set = set()\n    even_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            even_set.add(ele)\n        else:\n            odd_set.add(ele)\n    return odd_set, even_set\n    \n    \n    \ndef mixed_tuple(test_tuple, even_fnc, odd_fnc):\n    '''\n    Write a function to return mixed elements of the tuple. \n    '''\n    odd_ele, even_ele = even_ele(test_tuple, odd_fnc), even_ele(test_tuple, even_fnc)\n    return odd_ele + even_ele\n    \n    \ndef even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to return even elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            even_set.add(ele)\n    return even_set\n    \n    \ndef mixed_tuple(test_tuple, even_fnc, odd_fnc):\n    '''\n    Write a function to return mixed elements of the tuple.\n    '''\n    odd_set, even_set = odd_ele(test_tuple, odd_fnc), even_ele(test_tuple, even_fnc)\n    return odd_set + even_set\n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if odd_fnc(ele):\n            even_set.add(ele)\n    return even_set\n    \n    \ndef even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to return even elements of the tuple.\n    '''\n    odd_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            odd_set.add(ele)\n    return odd_set\n    \n    \ndef mixed_tuple(test_tuple, even_fnc, odd_fnc):\n    '''\n    Write a function to return mixed elements of the tuple.\n    '''\n    odd_set, even_set = odd_ele(test_tuple, odd_fnc), even_ele(test_tuple, even_fnc)\n    return odd_set + even_set\n    \n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if odd_fnc(ele):\n            even_set.add(ele)\n    return even_set\n    \n    \ndef even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to return even elements of the tuple.\n    '''\n    odd_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            odd_set.add(ele)\n    return odd_set\n    \n    \ndef mixed_tuple(test_tuple, even_fnc, odd_fnc):\n    '''\n    Write a function to return mixed elements of the tuple.\n    '''\n    odd_set, even_set = odd_ele(test_tuple, odd_fnc), even_ele(test_tuple, even_fnc)\n    return odd_set + even_set\n    \n    \n    \n    \ndef even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to return even elements of the tuple.\n    '''\n    odd_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            odd_set.add(ele)\n    return odd_set\n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if odd_fnc(ele):\n            even_set.add(ele)\n    return even_set\n    \n    \n    \ndef even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to return even elements of the tuple.\n    '''\n    odd_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            odd_set.add(ele)\n    return odd_set\n    \n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if odd_fnc(ele):\n            even_set.add(ele)\n    return even_set\n    \n    \n    \n    \ndef even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to return even elements of the tuple.\n    '''\n    odd_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            odd_set.add(ele)\n    return odd_set\n    \n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if odd_fnc(ele):\n            even_set.add(ele)\n    return even_set\n    \n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if odd_fnc(ele):\n            odd_set.add(ele)\n    return odd_set\n    \n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            even_set.add(ele)\n    return even_set\n    \n    \n    \ndef even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to return even elements of the tuple.\n    '''\n    odd_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            odd_set.add(ele)\n    return odd_set\n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if odd_fnc(ele):\n            even_set.add(ele)\n    return even_set\n    \n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            odd_set.add(ele)\n    return odd_set\n    \n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if odd_fnc(ele):\n            odd_set.add(ele)\n    return odd_set\n    \n    \n    \n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to return odd elements of the tuple.\n    '''\n    even_set = set()\n    for ele in test_tuple:\n        if od"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # init counters\n    even_cnt = 0\n    odd_cnt = 0\n    even_cnt_update = 0\n    odd_cnt_update = 0\n    even_cnt_list = list()\n    odd_cnt_list = list()\n    # iterate over tuple, init counters\n    for item in test_tuple:\n        if item % 2 == 0:\n            even_cnt += 1\n        else:\n            odd_cnt += 1\n    # for even, odd, in itertools.islice(test_tuple, even_cnt, odd_cnt):\n    for even, odd, in itertools.islice(test_tuple, even_cnt, odd_cnt):\n        # if even is even, add even to list\n        if even == even:\n            even_cnt_update += 1\n        # else, add odd to list\n        elif even!= even:\n            odd_cnt_update += 1\n        # add even to list\n        even_cnt_list.append(even)\n        # add odd to list\n        odd_cnt_list.append(odd)\n    # update counters, adding final counters to list\n    for even_cnt_list_item in even_cnt_list:\n        even_cnt += 1\n        even_cnt_list.append(even_cnt)\n    for odd_cnt_list_item in odd_cnt_list:\n        odd_cnt += 1\n        odd_cnt_list.append(odd_cnt)\n    # return results\n    if even_cnt_update == even_cnt:\n        return \"Even elements are already included\"\n    if odd_cnt_update == odd_cnt:\n        return \"Odd elements are already included\"\n    else:\n        return (f\"Even elements are {even_cnt_update}\") + (f\"Odd elements are {odd_cnt_update}\") + f\"\\nEven elements are {even_cnt}\") + (f\"Odd elements are {odd_cnt}\")\n    # returns \"Even elements are already included\"\n    # \"Odd elements are already included\"\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    lst = test_tuple[0]\n    even_list = []\n    odd_list = []\n    for element in lst:\n        if type(element)!= str:\n            even_list.append(element)\n        else:\n            odd_list.append(element)\n    even_fnc(even_list, even_list)\n    odd_fnc(odd_list, odd_list)\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    lst = test_tuple[0]\n    even_list = []\n    odd_list = []\n    for element in lst:\n        if type(element)!= str:\n            even_list.append(element)\n        else:\n            odd_list.append(element)\n    odd_fnc(odd_list, odd_list)\n    even_fnc(even_list, even_list)\n    \ndef mixed_tuple(test_tuple):\n    '''\n    Write a function that takes a tuple and returns the tuple without the\n    odd and even elements.\n    '''\n    even_list = []\n    odd_list = []\n    lst = test_tuple[0]\n    for element in lst:\n        if type(element)!= str:\n            even_list.append(element)\n        else:\n            odd_list.append(element)\n    return odd_list, even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple[0], test_tuple[1], test_tuple[2] = test_tuple[2], test_tuple[0], test_tuple[1] \n    return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_tuple = test_tuple[0]\n    for i in range(1,len(test_tuple)):\n        if even_fnc(odd_tuple[0], test_tuple[i][0]):\n            odd_tuple = odd_tuple[1:] + (test_tuple[i][0])\n        else:\n            odd_tuple = odd_tuple + (test_tuple[i][0])\n    return odd_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2 == 1: #even length\n        even_fnc(test_tuple, lambda tup:tup[::2])\n    else: #odd length\n        even_fnc(test_tuple, lambda tup:tup[1::2])\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple[0], test_tuple[1])\n    even_fnc(test_tuple[2], test_tuple[3])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n    print(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(list(test_tuple), list(map(lambda x: x[::-1], test_tuple)))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A=b*s\n    print(\"The surface area of the pyramid is\",A)\n    print(\"\\n\")\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return s*s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # TODO: Write your code here\n    return ((b**2) + (s**2)) ** 0.5\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # your code goes here\n    h = 1\n    A = 0\n    for i in range(1,int(s)):\n        h = h*(1/2)\n        A = A+h\n    return A\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your code here\n    return (b*s*s)/2\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    if s >= b:\n        while s >= b:\n            area += s**2\n            s -= b\n    else:\n        while s < b:\n            area += b**2\n            s += b\n    return area\n    \ndef is_square(s):\n    '''\n    Check if a string is a square string.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area_square = (b*(b-1)*s)//2\n    return area_square\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (4*b)*s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = int(s)\n    b = int(b)\n    A = a*a\n    A1 = a*b\n    A2 = b*b\n    A3 = b*a\n    A4 = a*a\n    A5 = a*b\n    return A1 + A2 + A3 + A4 + A5\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*(4*s+1)\n    \ndef volume_of_Pyramid(b,s): \n    '''\n    Write a python function to find the volume of a pyramid with a given base edge and height.\n    '''\n    return b*s\n    \ndef main():\n    print(\"Surface Area of Pyramid of 3-by-3 - Square Pyramid:\", surface_Area(3,3))\n    print(\"Volume of Pyramid of 3-by-3 - Square Pyramid:\", volume_of_Pyramid(3,3))\n    print()\n    print(\"Surface Area of Pyramid of 4-by-2 - Square Pyramid:\", surface_Area(4,2))\n    print(\"Volume of Pyramid of 4-by-2 - Square Pyramid:\", volume_of_Pyramid(4,2))\n    print()\n    print(\"Surface Area of Pyramid of 5-by-4 - Square Pyramid:\", surface_Area(5,4))\n    print(\"Volume of Pyramid of 5-by-4 - Square Pyramid:\", volume_of_Pyramid(5,4))\n    print()\n    print(\"Surface Area of Pyramid of 6-by-5 - Square Pyramid:\", surface_Area(6,5))\n    print(\"Volume of Pyramid of 6-by-5 - Square Pyramid:\", volume_of_Pyramid(6,5))\n    print()\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1.keys():\n        print(i, type(i))\n    if len(dict1) == 0:\n        print('The dictionary is empty')\n    return 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.keys() == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        print(\"Empty Dictionary\")\n    else:\n        print(\"Dictionary\")\n        for k,v in dict1.items():\n            print(k,v)\n    print(\"\\n\\n\")\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n    \ndef add_to_dict(dict1, value):\n    '''\n    Write a function to add a key/value pair to a dictionary\n    '''\n    dict1[value] = 1\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is None:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    i = 0\n    n = 1\n    while(i <= num):\n        n += (1 / (i + 1))\n        i += 1\n    return "
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = 1\n    for i in range(num):\n        c += 1/2*(2*i + 1)\n    return c\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num <= 1:\n        return num\n    \n    # calculate first nth catalan number\n    n = num - 1\n    c = 1\n    for i in range(n):\n        c = c * (n - i) + catalan_number(n - i)\n    return c\n    "
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert 0 < num < 2000000\n    # sample from https://www.w3resource.com/python-exercises/exercise-catalan/python/catalan\n    catalan_count = 1\n    for i in range(1,num):\n        catalan_count *= i\n    return catalan_count\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 6\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    elif num % 2 == 0:\n        return catalan_number(num//2) + catalan_number(num//2+1)\n    else:\n        return catalan_number(num//2) + catalan_number(num//2+1) + catalan_number(num//2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<=0:\n        return 0\n    if num<=9:\n        return 1\n    if num==10:\n        return 3\n    if num<=50:\n        return 5\n    if num==51:\n        return 7\n    if num<=100:\n        return 11\n    if num==101:\n        return 13\n    if num<=250:\n        return 15\n    if num==251:\n        return 17\n    if num<=1000:\n        return 19\n    if num==1001:\n        return 23\n    if num==1002:\n        return 25\n    if num<=10000:\n        return 31\n    if num==10001:\n        return 35\n    if num==10102:\n        return 37\n    if num==10103:\n        return 41\n    if num==10104:\n        return 45\n    if num==10105:\n        return 47\n    if num==10106:\n        return 49\n    if num==10107:\n        return 51\n    if num==10108:\n        return 55\n    if num==10109:\n        return 57\n    if num==10110:\n        return 59\n    if num==10111:\n        return 61\n    if num==10112:\n        return 65\n    if num==10113:\n        return 67\n    if num==10114:\n        return 69\n    if num==10115:\n        return 71\n    if num==10116:\n        return 75\n    if num==10117:\n        return 77\n    if num==10118:\n        return 79\n    if num==10119:\n        return 81\n    if num==10120:\n        return 85\n    if num==10121:\n        return 87\n    if num==10122:\n        return 89\n    if num==10123:\n        return 91\n    if num==10124:\n        return 95\n    if num==10125:\n        return 97\n    if num==10126:\n        return 99\n    if num==10127:\n        return 101\n    if num==10128:\n        return 105\n    if num==10129:\n        return 107\n    if num==10130:\n        return 109\n    if num==10131:\n        return 111\n    if num==10132:\n        return 115\n    if num==10133:\n        return 117\n    if num==10134:\n        return 119\n    if num==10135:\n        return 121\n    if num==10136:\n        return 125\n    if num==10137:\n        return 127\n    if num==10138:\n        return 129\n    if num==10139:\n        return 131\n    if num==10140:\n        return 135\n    if num==10141:\n        return 137\n    if num==10142:\n        return 139\n    if num==10143:\n        return 141\n    if num==10144:\n        return 145\n    if num==10145:\n        return 147\n    if num==10146:\n        return 149\n    if num==10147:\n        return 151\n    if num==10148:\n        return 155\n    if num==10149:\n        return 157\n    if num==10150:\n        return 159\n    if num==10151:\n        return 161\n    if num==10152:\n        return 165\n    if num==10153:\n        return 167\n    if num==10154:\n        return 169\n    if num==10155:\n        return 171\n    if num==10156:\n        return 175\n    if num==10157:\n        return 179\n    if num==10158:\n        return 181\n    if num==10159:\n        return 185\n    if num==10160:\n        return 187\n    if num==10161:\n        return 189\n    if num==10162:\n        return 191\n    if num==10163:\n        return 195\n    if num==10164:\n        return 197\n    if num==10165:\n        return 199\n    if num==10166:\n        return 211\n    if num==10167:\n        return 215\n    if num==10168:\n        return 217\n    if num==10169:\n        return 219\n    if num==10170:\n        return 221\n    if num==10171:\n        return 225\n    if num==10172:\n        return 227\n    if num==10173:\n        return 229\n    if num==10174:\n        return 231\n    if num==10175:\n        return 235\n    if num==10176:\n        return 237\n    if num==10177:\n        return 239\n    if num==10178:\n        return 241\n    if num==10179:\n        return 245\n    if num==10180:\n        return 247\n    if num==10181:\n        return 249\n    if num==10182:\n        return 251\n    if num==10183:\n        return 255\n    if num==10184:\n        return 257\n    if num==10185:\n        return 259\n    if num==10186:\n        return 261\n    if num==10187:\n        return 265\n    if num==10188:\n        return 267\n    if num==10189:\n        return 269\n    if num==10190:\n        return 271\n    if num==10191:\n        return 275\n    if num==10192:\n        return 277\n    if num==10193:\n        return 279\n    if num==10194:\n        return 281\n    if num==10195:\n        return 285\n    if num==10196:\n        return 287\n    if num==10197:\n        return 289\n    if num==10198:\n        return 291\n    if num==10199:\n        return 295\n    if num==10200:\n        return 297\n    if num==10201:\n        return 299\n    if num==10202:\n        return 301\n    if num==10203:\n        return 305\n    if num==10204:\n        return 307\n    if num==10205:\n        return 309\n    if num==10206:\n        return 311\n    if num==10207:\n        return 315\n    if num==10208:\n        return 317\n    if num==10209:\n        return 319\n    if num==10210:\n        return 321\n    if num==10211:\n        return 325\n    if num==10212:\n        return 327\n    if num==10213:\n        return 329\n    if num==10214:\n        return 331\n    if num==10215:\n        return 335\n    if num==10216:\n        return 337\n    if num==10217:\n        return 339\n    if num==10218:\n        return 341\n    if num==10219:\n        return 345\n    if num==10220:\n        return 347\n    if num==10221:\n        return 349\n    if num==10222:\n        return 351\n    if num==10223:\n        return 355\n    if num==10224:\n        return 357\n    if num==10225:\n        return 359\n    if num==10226:\n        return 363\n    if num==10227:\n        return 365\n    if num==10228:\n        return 367\n    if num==10229:\n        return 369\n    if num==10230:\n        return 371\n    if num==10231:\n        return 375\n    if num==10232:\n        return 377\n    if num==10233:\n        return 379\n    if num==10234:\n        return 381\n    if num==10235:\n        return 385\n    if num==10236:\n        return 387\n    if num==10237:\n        return 389\n    if num==10238:\n        return 391\n    if num==10239:\n        return 395\n    if num==10240:\n        return 398\n    if num==10241:\n        return 399\n    if num==10242:\n        return 401\n    if num==10243:\n        return 405\n    if num==10244:\n        return 407\n    if num==10245:\n        return 409\n    if num==10246:\n        return 411\n    if num==10247:\n        return 415\n    if num==10248:\n        return 417\n    if num==10249:\n        return 419\n    if num==10250:\n        return 421\n    if num==10251:\n        return 425\n    if num==10252:\n        return 427\n    if num==10253:\n        return 429\n    if num==10254:\n        return 431\n    if num==10255:\n        return 435\n    if num="
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return num + catalan_number(num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(n):\n        '''\n        Calculate factorial of a number.\n        '''\n        factorial_list = []\n        for i in range(1,n+1):\n            factorial_list.append(i*factorial(i-1))\n        return factorial_list\n    def cau_number(num):\n        '''\n        Calculate nth Cau number.\n        '''\n        def first_cau_number(num):\n            '''\n            Calculate the first cau number.\n            '''\n            cau_number_list = []\n            for i in range(1, num+1):\n                cau_number_list.append(int(i/2))\n            return cau_number_list\n        def cau_number(num):\n            '''\n            Calculate the nth Cau number.\n            '''\n            def cau_number_calculation(num):\n                '''\n                Calculate the cau number of a certain integer n.\n                '''\n                cau_number_list = []\n                for i in range(1, num+1):\n                    cau_number_list.append(int(i/2))\n                return cau_number_list\n            return cau_number_calculation(num)\n        def get_first_cau_number(num):\n            '''\n            Calculate the first cau number.\n            '''\n            def get_first_cau_number_calculation(num):\n                '''\n                Calculate the first cau number.\n                '''\n                cau_number_list = []\n                for i in range(1, num+1):\n                    cau_number_list.append(int(i/2))\n                return cau_number_list\n            return get_first_cau_number_calculation(num)\n        def get_cau_number(num):\n            '''\n            Calculate nth Cau number.\n            '''\n            def get_cau_number_calculation(num):\n                '''\n                Calculate the nth Cau number.\n                '''\n                cau_number_list = []\n                for i in range(1, num+1):\n                    cau_number_list.append(int(i/2))\n                return cau_number_list\n            return get_cau_number_calculation(num)\n        \n        if num <= 0:\n            return 0\n        else:\n            cau_number_list = get_cau_number(num)\n            cau_number_list_copy = cau_number_list.copy()\n            cau_number_list_copy.append(1)\n            factorial_list = factorial(num)\n            cau_number_list.extend(cau_number_list_copy)\n            for i in factorial_list:\n                cau_number_list.append(i*cau_number_list[-1])\n            return cau_number_list\n    \n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    elif num == 3:\n        return 2\n    elif num == 4:\n        return 2\n    elif num == 5:\n        return 3\n    elif num == 6:\n        return 3\n    elif num == 7:\n        return 3\n    elif num == 8:\n        return 4\n    elif num == 9:\n        return 4\n    elif num == 10:\n        return 5\n    elif num == 11:\n        return 6\n    elif num == 12:\n        return 7\n    elif num == 13:\n        return 8\n    elif num == 14:\n        return 9\n    elif num == 15:\n        return 10\n    elif num == 16:\n        return 11\n    elif num == 17:\n        return 12\n    elif num == 18:\n        return 13\n    elif num == 19:\n        return 14\n    elif num == 20:\n        return 15\n    elif num == 21:\n        return 16\n    elif num == 22:\n        return 17\n    elif num == 23:\n        return 18\n    elif num == 24:\n        return 19\n    elif num == 25:\n        return 20\n    elif num == 26:\n        return 21\n    elif num == 27:\n        return 22\n    elif num == 28:\n        return 23\n    elif num == 29:\n        return 24\n    elif num == 30:\n        return 25\n    elif num == 31:\n        return 26\n    elif num == 32:\n        return 27\n    elif num == 33:\n        return 28\n    elif num == 34:\n        return 29\n    elif num == 35:\n        return 30\n    elif num == 36:\n        return 31\n    elif num == 37:\n        return 32\n    elif num == 38:\n        return 33\n    elif num == 39:\n        return 34\n    elif num == 40:\n        return 35\n    elif num == 41:\n        return 36\n    elif num == 42:\n        return 37\n    elif num == 43:\n        return 38\n    elif num == 44:\n        return 39\n    elif num == 45:\n        return 40\n    elif num == 46:\n        return 41\n    elif num == 47:\n        return 42\n    elif num == 48:\n        return 43\n    elif num == 49:\n        return 44\n    elif num == 50:\n        return 45\n    elif num == 51:\n        return 46\n    elif num == 52:\n        return 47\n    elif num == 53:\n        return 48\n    elif num == 54:\n        return 49\n    elif num == 55:\n        return 50\n    elif num == 56:\n        return 51\n    elif num == 57:\n        return 52\n    elif num == 58:\n        return 53\n    elif num == 59:\n        return 54\n    elif num == 60:\n        return 55\n    elif num == 61:\n        return 56\n    elif num == 62:\n        return 57\n    elif num == 63:\n        return 58\n    elif num == 64:\n        return 59\n    elif num == 65:\n        return 60\n    elif num == 66:\n        return 61\n    elif num == 67:\n        return 62\n    elif num == 68:\n        return 63\n    elif num == 69:\n        return 64\n    elif num == 70:\n        return 65\n    elif num == 71:\n        return 66\n    elif num == 72:\n        return 67\n    elif num == 73:\n        return 68\n    elif num == 74:\n        return 69\n    elif num == 75:\n        return 70\n    elif num == 76:\n        return 71\n    elif num == 77:\n        return 72\n    elif num == 78:\n        return 73\n    elif num == 79:\n        return 74\n    elif num == 80:\n        return 75\n    elif num == 81:\n        return 76\n    elif num == 82:\n        return 77\n    elif num == 83:\n        return 78\n    elif num == 84:\n        return 79\n    elif num == 85:\n        return 80\n    elif num == 86:\n        return 81\n    elif num == 87:\n        return 82\n    elif num == 88:\n        return 83\n    elif num == 89:\n        return 84\n    elif num == 90:\n        return 85\n    elif num == 91:\n        return 86\n    elif num == 92:\n        return 87\n    elif num == 93:\n        return 88\n    elif num == 94:\n        return 89\n    elif num == 95:\n        return 90\n    elif num == 96:\n        return 91\n    elif num == 97:\n        return 92\n    elif num == 98:\n        return 93\n    elif num == 99:\n        return 94\n    elif num == 100:\n        return 95\n    elif num == 101:\n        return 96\n    elif num == 102:\n        return 97\n    elif num == 103:\n        return 98\n    elif num == 104:\n        return 99\n    elif num == 105:\n        return 100\n    elif num == 106:\n        return 101\n    elif num == 107:\n        return 102\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num > 1:\n        if num < 100:\n            return (num + 1) * catalan_number(num - 1)\n        elif num == 100:\n            return 1\n        else:\n            return (num + 1) * (catalan_number(num - 1) + 1)\n    else:\n        return nu"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    adverbs = {}\n    text = text.replace('l', 'ly')\n    adverbs = find_adverbs_dict(text)\n    \n    #output = []\n    #for t in adverbs:\n    #    if adverbs[t]!= None:\n    #        output.append(t)\n    #return output\n    return adverbs\n    \ndef find_adverbs_dict(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    adverbs = {}\n    text = text.replace('ly', 'li')\n    \n    \n    #output = []\n    #for t in text:\n    #    if t == 'ly' or t == 'li':\n    #        output.append(t)\n    #return output\n    \n    \n    for t in text:\n        if t == 'ly' or t == 'li':\n            adverbs[t] = None\n    return adverbs\n    \ndef get_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    adverbs = {}\n    text = text.replace('ly', 'li')\n    \n    \n    #output = []\n    #for t in text:\n    #    if t == 'ly' or t == 'li':\n    #        output.append(t)\n    #return output\n    \n    for t in text:\n        if t == 'ly' or t == 'li':\n            adverbs[t] = None\n    return adverbs\n    \ndef get_adverbs_dict(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    adverbs = {}\n    text = text.replace('ly', 'li')\n    \n    \n    #output = []\n    #for t in text:\n    #    if t == 'ly' or t == 'li':\n    #        output.append(t)\n    #return output\n    \n    \n    for t in text:\n        if t == 'ly' or t == 'li':\n            adverbs[t] = None\n    return adverbs\n    \ndef is_per(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'per' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_s(words):\n    '''\n    Write a function to check if the first word is a singular noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] =='s' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_r(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'r' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_im(words):\n    '''\n    Write a function to check if the first word is a singular noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'im' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_pl(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'pl' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_nf(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'nf' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_b(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'b' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_ns(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'ns' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_c(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'c' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_cf(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'cf' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_ic(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'ic' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_icf(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'icf' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_ii(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'ii' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_iu(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n        return words[0] == 'iu' or words[1] == 'ly' or words[2] == 'li'\n    else:\n        return False\n    \ndef is_pf(words):\n    '''\n    Write a function to check if the first word is a plural noun.\n    '''\n    \n    if len(words) >= 2:\n        #if len(words) >= 3:\n        #    return True\n    "
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'[^ly]*ly'\n    match = re.search(pattern, text)\n    if match:\n        return match.groups()\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            text = text[:search.start()]\n            pattern = r'ly'\n            search = re.search(pattern, text, flags=re.IGNORECASE)\n            if search is None:\n                return 0\n            else:\n                return search.start()\ndef find_adverbs_short(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverbs_short2(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_first(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_short(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_short2(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_last(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_last2(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_last3(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_last4(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_last5(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_last6(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_last7(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly'\n    search = re.search(pattern, text, flags=re.IGNORECASE)\n    if search is None:\n        return 0\n    else:\n        text = text[:search.start()]\n        pattern = r'ly$'\n        search = re.search(pattern, text, flags=re.IGNORECASE)\n        if search is None:\n            return 0\n        else:\n            return search.start()\ndef find_adverb_last8(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = "
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    adverbs_with_ly = []\n    for word in text.split():\n        if re.search(r'ly$', word, re.IGNORECASE):\n            adverbs_with_ly.append(word)\n    for word in adverbs_with_ly:\n        if word[-1] == 'ly':\n            adverbs.append(word[:-1])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['he','him','his','her','hers','herself','himself','him']\n    found = []\n    for i in range(len(text)-1):\n        if text[i]=='ly' and text[i+1] in adverbs:\n            found.append(i)\n    return found\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_list = []\n    adverb_list_rev = []\n    for i in range(len(text)):\n        if text[i] == \"ly\":\n            if text[i+1] == \"ly\":\n                adverb_list_rev.append(text[i:i+2])\n            else:\n                adverb_list_rev.append(text[i:i+1])\n    return adverb_list_rev\ndef find_adverbs_reverse(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_list = []\n    adverb_list_rev = []\n    for i in range(len(text)):\n        if text[i] == \"ly\":\n            if text[i-1] == \"ly\":\n                adverb_list_rev.append(text[i:i+2])\n            else:\n                adverb_list_rev.append(text[i:i+1])\n    return adverb_list_rev\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if text[i].endswith('ly'):\n            adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #create a string of all possible adverbs\n    possible_adverbs = [\"t\", \"re\"]\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r\"[ly]\\b\"\n    return re.findall(regex, text, flags=re.MULTILINE)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.replace('ly', '')\n    ly_index = text.find('ly')\n    if ly_index > 0:\n        adverb_index = text.find('ly', ly_index)\n        adverb_index += 2\n        if adverb_index >= len(text) or adverb_index < 0:\n            return None\n        adverb_positions = text[ly_index:adverb_index]\n        adverb_positions = adverb_positions.split(' ')\n        if len(adverb_positions) == 1 and 'ly' in adverb_positions:\n            adverb_positions = adverb_positions[adverb_positions.index('ly')+1:]\n        return adverb_positions\n    return None\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(len(items)):\n        heapq.heappush(heap,(-items[i][1],items[i][0]))\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return []\n    heapq.heapify(items)\n    top_n = [x[1] for x in heapq.nlargest(n,items, key=lambda x: x[1])]\n    return top_n\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n    \n    #extract n items from the heap.\n    m = heapq.nlargest(n,heap)\n    \n    #return the m items.\n    return m\n    \ndef expensive_items_2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n    \n    #extract n items from the heap.\n    m = heapq.nlargest(n,heap)\n    \n    #return the m items.\n    return m\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # The heappq is a priority queue. \n    # Priority is the most important item so it is the smallest\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[0])\n    for _ in range(n):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    heapq.heapify(h)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if item[1] > heap[-1][1]:\n            heapq.heappush(heap,item)\n        elif item[1] == heap[-1][1]:\n            if item[0] < heap[-1][0]:\n                heapq.heappushpop(heap,item)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap\n    heap = []\n    # Create a dictionary to keep track of how expensive items each key is\n    dict = {}\n    # Add n items to the heap\n    for i in range(n):\n        dict[items[i]] = i\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Your code here\n    import collections\n    data=[]\n    for x in items:\n        data.append(x)\n    for x in data:\n        heapq.heappush(data,x)\n    for x in data:\n        heapq.heappop(data)\n    heapq.heapify(data)\n    for x in data:\n        heapq.heappop(data)\n        heapq.heappush(data,x)\n    for x in data:\n        heapq.heappop(data)\n        heapq.heappush(data,x)\n    print(data)\n    return heapq.nlargest(n,data)\n    \n    \n    \n    \ndef items_in_order(items):\n    '''\n    Write a function to return the items in sorted order.\n    '''\n    import collections\n    data=[]\n    for x in items:\n        data.append(x)\n    for x in data:\n        heapq.heappush(data,x)\n    for x in data:\n        heapq.heappop(data)\n        heapq.heappush(data,x)\n    return data\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[items[i][1],i])\n    res=[]\n    while heap:\n        item=heapq.heappop(heap)\n        res.append(item[0])\n        for i in range(n):\n            if item[1]<=i and items[i][1]>item[0]:\n                heapq.heappush(heap,[items[i][1],i])\n    return res\ndef standard_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[items[i][0],i])\n    res=[]\n    while heap:\n        item=heapq.heappop(heap)\n        res.append(item[0])\n        for i in range(n):\n            if item[0]<=i and items[i][0]>item[0]:\n                heapq.heappush(heap,[items[i][0],i])\n    return res\ndef standard_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[items[i][1],i])\n    res=[]\n    while heap:\n        item=heapq.heappop(heap)\n        res.append(item[0])\n        for i in range(n):\n            if item[1]<=i and items[i][1]>item[0]:\n                heapq.heappush(heap,[items[i][1],i])\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #O(n)\n    heapq.heapify(items)\n    for i in range(n):\n        heapq.heappush(items,heapq.heappop(items)+heapq.heappop(items))\n    return items\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    temp = [l[x] for x in range(0, len(l), n)]\n    return temp\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if (len(l) < n):\n        return l\n    else:\n        return l[:n], l[n:]\n    \ndef sort_lists(l):\n    '''\n    Write a python function that sorts a list of integers.\n    '''\n    if len(l) > 0:\n        return sorted(l)\n    else:\n        return []\n    \ndef merge_lists(l, r):\n    '''\n    Write a python function that merges two sorted lists.\n    '''\n    if len(l) > len(r):\n        return l + r\n    else:\n        return r + l\n    \ndef remove_duplicates(l):\n    '''\n    Write a python function that takes a list of elements and returns a list of elements without any duplicate elements.\n    '''\n    return [x for x in l if x not in l]\n    \ndef preprocess(str):\n    '''\n    Write a python function that takes a string and returns a string with all the characters in upper case.\n    '''\n    if len(str) <= 1:\n        return str\n    else:\n        return str[0].upper() + ''.join(preprocess(x) for x in str[1:])\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = []\n    for i in range(n):\n        a.append(l[i])\n    return a\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # l = list(l)\n    # l.insert(0,l.pop(0))\n    # return l\n    return list(l)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    elements = l[0:n]\n    return elements\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Pick the first element as the list data\n    first = l[0]\n    # Create a temporary list and create the second list\n    temp_list = []\n    # Append the first element\n    temp_list.append(first)\n    # Start at nth element\n    for i in range(n):\n        # Append the element to the temp_list\n        temp_list.append(l[i])\n    # Return the first element\n    return temp_list\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(len(l))]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n] + l[n:]\n    \n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup=tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = ()\n    for el in listx:\n        tuplex += (el,)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    # Write your code here\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if len(listx) == 0:\n        return ()\n    else:\n        t = type(listx[0])\n        return t(listx)\n    \n    \n    \ndef dict_tuple(dct):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    if len(dct) == 0:\n        return ()\n    else:\n        t = type(dct[0])\n        return t(dct)\n    \n    \n    \ndef str_tuple(s):\n    '''\n    Write a function to convert a string to a tuple.\n    '''\n    if len(s) == 0:\n        return ()\n    else:\n        return (s,)\n    \n    \n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    if len(listx) == 0:\n        return set()\n    else:\n        return set(listx)\n    \n    \n    \ndef set_tuple(setx):\n    '''\n    Write a function to convert a set to a tuple.\n    '''\n    if len(setx) == 0:\n        return ()\n    else:\n        return tuple(setx)\n    \n    \n    \ndef str_set(s):\n    '''\n    Write a function to convert a string to a set.\n    '''\n    if len(s) == 0:\n        return set()\n    else:\n        return set(s)\n    \n    \n    \ndef bool_tuple(b):\n    '''\n    Write a function to convert a boolean to a tuple.\n    '''\n    if b == False:\n        return ()\n    else:\n        return (b,)\n    \n    \n    \ndef int_tuple(i):\n    '''\n    Write a function to convert a integer to a tuple.\n    '''\n    if i == 0:\n        return ()\n    else:\n        return (i,)\n    \n    \n    \ndef float_tuple(f):\n    '''\n    Write a function to convert a float to a tuple.\n    '''\n    if f == 0:\n        return ()\n    else:\n        return (f,)\n    \n    \n    \ndef is_int(value):\n    '''\n    Check if the value is an integer.\n    '''\n    try:\n        int(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_float(value):\n    '''\n    Check if the value is a float.\n    '''\n    try:\n        float(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_bool(value):\n    '''\n    Check if the value is a bool.\n    '''\n    try:\n        bool(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_int_or_float(value):\n    '''\n    Check if the value is an integer or a float.\n    '''\n    try:\n        int(value)\n        float(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_bool_or_int(value):\n    '''\n    Check if the value is a bool or an int.\n    '''\n    try:\n        bool(value)\n        int(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none(value):\n    '''\n    Check if the value is a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_int_or_float_none(value):\n    '''\n    Check if the value is an int or a float or a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_bool_or_int_none(value):\n    '''\n    Check if the value is a bool or an int or a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none(value):\n    '''\n    Check if the value is a none and a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_int_none_none(value):\n    '''\n    Check if the value is an int and an int and a none.\n    '''\n    try:\n        int(value)\n        int(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_float_none_none(value):\n    '''\n    Check if the value is a float and an int and a none.\n    '''\n    try:\n        float(value)\n        float(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none_none(value):\n    '''\n    Check if the value is a none and a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none_none(value):\n    '''\n    Check if the value is a none and a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_int_none_none(value):\n    '''\n    Check if the value is an int and an none.\n    '''\n    try:\n        int(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_float_none_none(value):\n    '''\n    Check if the value is a float and an none.\n    '''\n    try:\n        float(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_bool_none_none(value):\n    '''\n    Check if the value is a bool and an none.\n    '''\n    try:\n        bool(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none_none(value):\n    '''\n    Check if the value is a none and a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none_none(value):\n    '''\n    Check if the value is a none and a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none_none(value):\n    '''\n    Check if the value is a none and a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_int_none_none(value):\n    '''\n    Check if the value is an int and a none.\n    '''\n    try:\n        int(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_float_none_none(value):\n    '''\n    Check if the value is a float and an none.\n    '''\n    try:\n        float(value)\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none_none(value):\n    '''\n    Check if the value is a none and a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none_none(value):\n    '''\n    Check if the value is a none and a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none_none(value):\n    '''\n    Check if the value is a none and a none.\n    '''\n    try:\n        value == \"\"\n        return True\n    except:\n        return False\n    \n    \n    \ndef is_none_none_none(value):\n    '''"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Iterate through the list and add each element to a tuple\n    tuple = ()\n    for element in listx:\n        tuple = tuple + (element,)\n    # Return the tuple\n    return tuple\n    "
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for el in listx:\n        tup = tup + (el,)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = []\n    for x in listx:\n        tuple_list.append(x)\n    return tuple_list\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = len(nums)\n    if l == 0:\n        return 0\n    else:\n        max_num = nums[0]\n        min_num = nums[0]\n        for i in range(1, l):\n            if nums[i] > max_num:\n                max_num = nums[i]\n            if nums[i] < min_num:\n                min_num = nums[i]\n        return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Assign the variable to the size of the list,\n    # Set the value to the variable,\n    # Compare the variables,\n    # If the values are equal,\n    # Return the difference value,\n    # If not, return the greatest and second greatest value,\n    # else return 0\n    # \n    # \n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # \n    # \n    # Example:\n    # Input: [2, 2, 2, 2, 2]\n    # Output: 5\n    # Explanation:\n    # 2 and 2 are the smallest values, 2 and 2 are the second smallest.\n    # 2 - 2 = 5\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    large = 0\n    small = 0\n    for i in range(len(nums)):\n        if nums[i] > large:\n            large = nums[i]\n        if nums[i] < small:\n            small = nums[i]\n    print(large, small)\n    \nnums = [1, 4, 4, 7, 8, 4, 9, 2, 2, 1, 6]\nbig_diff(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort nums and convert it into a list\n    nums.sort()\n    # Indexes of the elements in nums\n    i = 0\n    # Keep track of the minimum element\n    minimum = nums[0]\n    # Loop through all elements in nums\n    while i < len(nums):\n        # Check if the current element is greater than the minimum element\n        if nums[i] < minimum:\n            # Update minimum\n            minimum = nums[i]\n        # Update index\n        i = i + 1\n    # Check if the minimum element is the last element\n    if minimum == nums[-1]:\n        # If there are no elements after the end of the list\n        # It means that we have one element and we need to return the second element\n        return nums[1]\n    # Otherwise, it means there are elements after the end of the list\n    else:\n        # Loop through the nums\n        for j in range(i, len(nums)):\n            # Check if the current element is greater than the minimum element\n            if nums[j] < minimum:\n                # Update minimum\n                minimum = nums[j]\n        # Return the minimum element\n        return minimum\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for x in nums:\n        if x > largest:\n            largest = x\n        if x < smallest:\n            smallest = x\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_idx = 0\n    max_idx = len(nums)-1\n    largest_num = nums[0]\n    smallest_num = nums[len(nums)-1]\n    \n    while max_idx >= 0 and min_idx < len(nums)-1:\n        if nums[max_idx] < largest_num:\n            smallest_num = smallest_num\n            smallest_num = nums[max_idx]\n            max_idx -= 1\n        elif nums[min_idx] > smallest_num:\n            smallest_num = smallest_num\n            smallest_num = nums[min_idx]\n            min_idx -= 1\n        else:\n            break\n    \n    return smallest_num - largest_num\n    "
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest = None\n    largest = None\n    for num in nums:\n        if smallest == None or num < smallest:\n            smallest = num\n        if largest == None or num > largest:\n            largest = num\n    return smallest - largest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pas"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b <= a:\n        return 0\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def perfect_square(a,b):\n        if b==0:\n            return False\n        elif b==1:\n            return True\n        elif abs(a-b)>=2:\n            return True\n        else:\n            return perfect_square(a,b-2) or perfect_square(a-2,b)\n    return perfect_square(a,b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Write your code here.\n    squares = []\n    if b < a:\n        a, b = b, a\n    for i in range(b, a):\n        if i % b == 0:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return [a]\n    if b < 0:\n        return []\n    if a == 0:\n        return []\n    if a % b == 0:\n        return perfect_squares(a//b, b)\n    else:\n        return perfect_squares(a//b, b+1) + [a//b]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    assert a > 0\n    assert b > 0\n    assert a < b\n    assert a % 2 == 0\n    assert b % 2 == 0\n    assert a > b\n    assert (a*(a+1) + b*(b+1)) <= 2**31-1\n    while a > b:\n        if a % 2 == 1:\n            a = a // 2\n            if a % 2 == 1:\n                a = a + 1\n        else:\n            a = a // 2\n            if a % 2 == 0:\n                a = a + 1\n    while a % 2 == 0:\n        a = a // 2\n        if a % 2 == 0:\n            a = a + 1\n    return a\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def is_perfect_square(number):\n        return number == (number ** 0.5).sqrt()\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # divide into proper numbers\n    lower_b = int(b)\n    upper_b = int(b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a_sq = a**2\n    b_sq = b**2\n    if a_sq < b_sq:\n        return [a, b]\n    else:\n        return [b, a]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    if abs(a-b) < 2:\n        return [a]\n    for i in range(1, b):\n        if (a**2) + (b**2) == (a**2) + (b**2):\n            if b**2 > a**2:\n                result.append(i)\n            else:\n                result.append(b**2)\n    return result\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x/np.sqrt(2)\n    y = y/np.sqrt(2)\n    return x,y\n    \ndef polar_plane(x,y):\n    '''\n    Write a function to find the plane between the given points.\n    '''\n    a = np.arctan2(y,x)\n    return a\n    \ndef polar_fit(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_sq(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_sq_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_square(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_square_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_circle(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_circle_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_line(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_line_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_sin(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_sin_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_cos(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_cos_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_sin_sq(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_sin_sq_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_cos_sq(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_cos_sq_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_sin_sq(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_sin_sq_error(x,y,z):\n    '''\n    Write a function that finds the fit between two points using\n    a weighted quadratic fit using the squared error.\n    '''\n    q1 = -1*(z-x**3)\n    q2 = -1*(y-z**3)\n    return q1, q2\n    \ndef polar_fit_log_cos_sq(x,y,z):\n    '''\n    Write a function that finds the fit between tw"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    e = (cmath.sqrt(1-x**2-y**2))\n    f = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d,e,f\ndef polar_rect2(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = p[0]**2\n    b = p[1]**2\n    return a,b\ndef polar_rect3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2+z**2)**0.5\n    return a\ndef polar_rect4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    e = (cmath.sqrt(1-x**2-y**2))\n    f = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d,e,f\ndef polar_rect5(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2+z**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2+z**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    e = (cmath.sqrt(1-x**2-y**2))\n    f = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d,e,f\ndef polar_rect6(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect7(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect9(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect10(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect11(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect12(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect13(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect14(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect15(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect16(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect17(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2+y**2)**0.5\n    b = (cmath.sqrt(1-x**2-y**2))\n    c = (x**2+y**2)**0.5\n    d = (cmath.sqrt(1-x**2+y**2))\n    return a,b,c,d\ndef polar_rect18(x,y):\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 or y==0:\n        return 0\n    else:\n        return x*2*pi/360+y*pi/180\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = 1\n    x = x * r\n    y = y * r\n    if x > 0:\n        if y > 0:\n            return x, y\n        elif y < 0:\n            return x, abs(y)\n    elif y > 0:\n        if x > 0:\n            return abs(x), y\n        elif x < 0:\n            return abs(x), abs(y)\n    else:\n        return abs(x), abs(y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex(0,0)\n    theta = complex(0,0)\n    x = complex(x,0)\n    y = complex(0,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    return r.real, r.imag\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = atan2(x,y)\n    b = a*a\n    return b\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cmath.pi)/180, (y*cmath.pi)/180\ndef polar_rect_to_degrees(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates in degrees.\n    '''\n    return (180*y)/cmath.pi, (180*x)/cmath.pi\ndef polar_rad(rad):\n    '''\n    Write a function to convert polar coordinates to polar coordinates in radians.\n    '''\n    return (rad*cmath.pi)/180\ndef polar_degrees(rad):\n    '''\n    Write a function to convert polar coordinates to polar coordinates in degrees.\n    '''\n    return (180*rad)/cmath.pi\ndef polar_to_radians(deg,x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates in radians.\n    '''\n    return cmath.asin(y/cmath.sqrt(x*x+y*y))\ndef deg_to_radians(deg):\n    '''\n    Write a function to convert polar coordinates to polar coordinates in radians.\n    '''\n    return cmath.acos(y/cmath.sqrt(x*x+deg))\ndef dir_to_radians(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates in radians.\n    '''\n    return x*cmath.pi/180, y*cmath.pi/180\ndef check_even(x):\n    '''\n    Check if a number is even.\n    '''\n    return (x%2)==0\ndef floor_div(x,y):\n    '''\n    Floor the number to a given number.\n    '''\n    return (x//y)\ndef is_odd(x):\n    '''\n    Check if a number is odd.\n    '''\n    return (x%2)!= 0\ndef is_prime(x):\n    '''\n    Check if a number is a prime.\n    '''\n    return (x==2) or (x%2==0)\ndef is_triangle(x,y,z):\n    '''\n    Check if a number is a triangle.\n    '''\n    return ((x+y+z)==(x*y)*(x*z)+(y*z)*(y*x))\ndef factorial_recursive(x):\n    '''\n    Use recursion to calculate factorial.\n    '''\n    if x==1:\n        return 1\n    return x*factorial_recursive(x-1)\ndef factorial_iterative(x):\n    '''\n    Use iteration to calculate factorial.\n    '''\n    if x==1:\n        return 1\n    return x*factorial_iterative(x-1)\ndef min_dist(x1,y1,x2,y2):\n    '''\n    Find the minimum distance between a point and its neighbour.\n    '''\n    return abs(x1-x2) + abs(y1-y2)\ndef angle_diff(x,y,z):\n    '''\n    Find the angle between a point and its neighbour.\n    '''\n    return (cmath.acos(y/cmath.sqrt(x*x+z*z)))\ndef dist(x1,y1,x2,y2):\n    '''\n    Find the distance between a point and its neighbour.\n    '''\n    return (abs(x1-x2) + abs(y1-y2))\ndef dist_recursive(x1,y1,x2,y2,z):\n    '''\n    Use recursion to calculate distance between a point and its neighbour.\n    '''\n    if dist(x1,y1,x2,y2)==0:\n        return 0\n    if dist(x1,y1,x2,y2)>0:\n        return dist(x1,y1,x2,y2)\n    else:\n        return dist_recursive(x1,y1,x2,y2,z)\ndef is_inside(x,y,z):\n    '''\n    Check if a point is inside another point.\n    '''\n    return (x>=0 and x<=1 and y>=0 and y<=1 and z>=0 and z<=1)\ndef is_inside_recursive(x,y,z):\n    '''\n    Use recursion to check if point is inside another point.\n    '''\n    if x==0 and y==0 and z==0:\n        return True\n    if x==0 and y==0 and z==1:\n        return True\n    if x==1 and y==0 and z==0:\n        return True\n    if x==1 and y==0 and z==1:\n        return True\n    if x==0 and y==1 and z==0:\n        return True\n    if x==0 and y==1 and z==1:\n        return True\n    if x==1 and y==1 and z==0:\n        return True\n    if x==1 and y==1 and z==1:\n        return True\n    if x==0 and y==0 and z==0:\n        return True\n    return False\ndef is_inside_iterative(x,y,z):\n    '''\n    Use iteration to check if point is inside another point.\n    '''\n    if x==0 and y==0 and z==0:\n        return True\n    if x==0 and y==0 and z==1:\n        return True\n    if x==1 and y==0 and z==0:\n        return True\n    if x==1 and y==0 and z==1:\n        return True\n    if x==0 and y==1 and z==0:\n        return True\n    if x==0 and y==1 and z==1:\n        return True\n    if x==1 and y==1 and z==0:\n        return True\n    if x==1 and y==0 and z==1:\n        return True\n    if x==0 and y==0 and z==0:\n        return True\n    return False\ndef is_inside_stack(x,y,z):\n    '''\n    Check if point is inside another point on a stack.\n    '''\n    return (x>=0 and x<=1 and y>=0 and y<=1 and z>=0 and z<=1)\ndef is_inside_stack_recursive(x,y,z):\n    '''\n    Use recursion to check if point is inside another point on a stack.\n    '''\n    if x==0 and y==0 and z==0:\n        return True\n    if x==0 and y==0 and z==1:\n        return True\n    if x==1 and y==0 and z==0:\n        return True\n    if x==1 and y==0 and z==1:\n        return True\n    if x==0 and y==1 and z==0:\n        return True\n    if x==0 and y==1 and z==1:\n        return True\n    if x==1 and y==1 and z==0:\n        return True\n    if x==1 and y==0 and z==1:\n        return True\n    if x==0 and y==0 and z==0:\n        return True\n    return False\ndef is_inside_stack_iterative(x,y,z):\n    '''\n    Use iteration to check if point is inside another point on a stack.\n    '''\n    if x==0 and y==0 and z==0:\n        return True\n    if x==0 and y==0 and z==1:\n        return True\n    if x==1 and y==0 and z==0:\n        return True\n    if x==1 and y==0 and z==1:\n        return True\n    if x==0 and y==1 and z==0:\n        return True\n    if x==0 and y==1 and z==1:\n        return True\n    if x==1 and y==1 and z==0:\n        return True\n    if x==1 and y==0 and z==1:\n        return True\n    return False\ndef is_inside_circle(x,y,z):\n    '''\n    Check if point is inside another point on a circle.\n    '''\n    if x==0 and y==0 and z==0:\n        return True\n    if x==0 and y==0 and z==1:\n        retur"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x *cmath.pi)/2, (y *cmath.pi)/2\ndef polar_rect_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (x *2 *cmath.pi) / (cmath.pi *(cmath.pi-x*(cmath.pi-y))), (y *2 *cmath.pi) / (cmath.pi *(cmath.pi-x*(cmath.pi-y))), -(2*cmath.pi)**0.5\ndef rad_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return ((x *cmath.pi)/2)**0.5, ((y *cmath.pi)/2)**0.5\ndef rad_rect_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (x *2 *cmath.pi)**0.5, (y *2 *cmath.pi)**0.5\ndef konverto_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x *cmath.pi)/2, (y *cmath.pi)/2\ndef konverto_polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return ((x *2 *cmath.pi)/2)**0.5, ((y *2 *cmath.pi)/2)**0.5\ndef konverto_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x *(cmath.pi/2))**0.5, (y *(cmath.pi/2))**0.5\ndef konverto_rad_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return ((x *(cmath.pi/2))**0.5)**0.5, ((y *(cmath.pi/2))**0.5)**0.5\ndef konverto_konverto_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return ((x *(cmath.pi/2))**0.5)**0.5, ((y *(cmath.pi/2))**0.5)**0.5\ndef konverto_konverto_rad_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return ((x *(cmath.pi/2))**0.5)**0.5, ((y *(cmath.pi/2))**0.5)**0.5\ndef base_converto_rad_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5), (2 *cmath.pi)/(2 *(2*y + x)**0.5)\ndef base_converto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_konverto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_konverto_rad_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_konverto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_konverto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_rad_konverto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_konverto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_rad_konverto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_rad_konverto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_konverto_rad_konverto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return (2 *cmath.pi)/(2 *(2*x + y)**0.5)**0.5, (2 *cmath.pi)/(2 *(2*y + x)**0.5)**0.5\ndef base_converto_konverto_rad_konverto_rad_konverto_rad(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    return(r.real, r.imag)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList)\n    for index in range(len(newList) - 1):\n        item = newList[index]\n        newList[index] = newList[index+1]\n        newList[index+1] = item\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    '''\n    For example, the list [10,20,30] would be swap at position 0 and 2.\n    '''\n    '''\n    Ouput:\n    [20, 10, 30]\n    '''\n    temp_list=[]\n    for i in range(len(newList)-1):\n        temp_list.append(newList[i])\n        temp_list.append(newList[i+1])\n    newList=temp_list\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return None\n    elif len(newList) == 2:\n        newList[0], newList[1] = newList[1], newList[0]\n        return newList\n    else:\n        middle = len(newList) // 2\n        left = newList[:middle]\n        right = newList[middle:]\n        left.reverse()\n        right.reverse()\n        newList = left + right\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.sort()\n    newList.reverse()\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.append(newList.pop(0))\n    newList.append(newList.pop(0))\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    swap = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = swap\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(0, len(newList)):\n        newList[i], newList[len(newList)-i-1] = newList[len(newList)-i-1], newList[i]\n    return newList\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef select_first_second(newList): \n    '''\n    Write a python function to select the first and second elements of a list, using the extended method.\n    '''\n    index = 0\n    for i in newList:\n        if index > len(newList) - 2:\n            return \"List is empty!\"\n        if i > newList[index + 1]:\n            newList[index + 1], newList[index] = newList[index], newList[index + 1]\n        index += 1\n    return newList\n    \ndef select_random(newList): \n    '''\n    Write a python function to select a random element from a list.\n    '''\n    index = random.randint(0, len(newList) - 1)\n    return newList[index]\n    \ndef first_last(newList): \n    '''\n    Write a python function to print the list, using the first and last elements of a list,\n    using the extended method.\n    '''\n    index = 0\n    for i in newList:\n        if index > len(newList) - 2:\n            return \"List is empty!\"\n        if i > newList[index + 1]:\n            newList[index + 1], newList[index] = newList[index], newList[index + 1]\n        index += 1\n    return newList\n    \ndef printList(newList): \n    '''\n    Write a python function to print the list in alphabetical order, using the extended method.\n    '''\n    newList.sort()\n    for i in range(len(newList)):\n        print(newList[i], end=\" \")\n    return newList\n    \ndef sortList(newList): \n    '''\n    Write a python function to sort a list, using the extended method.\n    '''\n    newList.sort()\n    return newList\n    \ndef remove_duplicate(newList): \n    '''\n    Write a python function to remove duplicates from a list, using the extended method.\n    '''\n    newList.sort()\n    newList.remove(newList[0])\n    newList.remove(newList[0])\n    return newList\n    \ndef count_occurences(newList, num): \n    '''\n    Write a python function to count occurrences of a specific value in a list.\n    '''\n    count = 0\n    for i in newList:\n        if i == num:\n            count += 1\n    return count\n    \ndef get_longest(newList): \n    '''\n    Write a python function to get the largest element in a list.\n    '''\n    index = 0\n    for i in newList:\n        if index > len(newList) - 1:\n            return \"List is empty!\"\n        if i > newList[index + 1]:\n            newList[index + 1], newList[index] = newList[index], newList[index + 1]\n        index += 1\n    return newList\n    \ndef get_shortest(newList): \n    '''\n    Write a python function to get the smallest element in a list.\n    '''\n    index = 0\n    for i in newList:\n        if index > len(newList) - 1:\n            return \"List is empty!\"\n        if i < newList[index + 1]:\n            newList[index + 1], newList[index] = newList[index], newList[index + 1]\n        index += 1\n    return newList\n    \ndef get_middle(newList): \n    '''\n    Write a python function to get the middle element of a list.\n    '''\n    index = len(newList) / 2\n    for i in range(index):\n        if index > len(newList) - 1:\n            return \"List is empty!\"\n        if newList[i] > newList[i + 1]:\n            newList[i + 1], newList[i] = newList[i], newList[i + 1]\n    return newList\n    \ndef get_first_last(newList): \n    '''\n    Write a python function to get the first and last element of a list.\n    '''\n    index = 0\n    for i in newList:\n        if index > len(newList) - 1:\n            return \"List is empty!\"\n        if i > newList[index + 1]:\n            newList[index + 1], newList[index] = newList[index], newList[index + 1]\n        index += 1\n    return newList\n    \ndef get_first_second_third(newList): \n    '''\n    Write a python function to get the first and second and third elements of a list.\n    '''\n    index = 0\n    for i in newList:\n        if index > len(newList) - 3:\n            return \"List is empty!\"\n        if i > newList[index + 1]:\n            newList[index + 1], newList[index + 2] = newList[index + 2], newList[index + 1]\n        if i > newList[index + 2]:\n            newList[index + 2], newList[index + 3] = newList[index + 3], newList[index + 2]\n        index += 1\n    return newList\n    \ndef remove_duplicate(newList): \n    '''\n    Write a python function to remove duplicates from a list, using the extended method.\n    '''\n    newList.sort()\n    newList.remove(newList[0])\n    newList.remove(newList[0])\n    return newList\n    \ndef count_occurences(newList, num): \n    '''\n    Write a python function to count occurrences of a specific value in a list.\n    '''\n    count = 0\n    for i in newList:\n        if i == num:\n            count += 1\n    return count\n    \ndef get_longest(newList): \n    '''\n    Write a python function to get the longest element in a list.\n    '''\n    index = 0\n    for i in newList:\n        if index > len(newList) - 1:\n            return \"List is empty!\"\n        if i > newList[index + 1]:\n            newList[index + 1], newList[index] = newList[index], newList[index + 1]\n        index += 1\n    return newList\n    \ndef get_shortest(newList): \n    '''\n    Write a python function to get the shortest element in a list.\n    '''\n    index = len(newList) / 2\n    for i in range(index):\n        if index > len(newList) - 1:\n            return \"List is empty!\"\n        if newList[i] < newList[i + 1]:\n            newList[i + 1], newList[i] = newList[i], newList[i + 1]\n    return newList\n    \ndef get_middle(newList): \n    '''\n    Write a python function to get the middle element of a list.\n    '''\n    index = len(newList) / 2\n    for i in range(index):\n        if index > len(newList) - 1:\n            return \"List is empty!\"\n        if newList[i] > newList[i + 1]:\n            newList[i + 1], newList[i] = newList[i], newList[i + 1]\n    return newList\n    \ndef get_first_last_second_third(newList): \n    '''\n    Write a python function to get the first and last element of a list.\n    '''\n    index = len(newList) / 2\n    for i in range(index):\n        if index > len(newList) - 3:\n            return \"List is empty!\"\n        if newList[i] > newList[i + 1]:\n            newList[i + 1], newList[i + 2] = newList[i + 2], newList[i + 1]\n        if newList[i + 1] > newList[i + 2]:\n            newList[i + 2], newList[i + 3] = newList[i + 3], newList[i + 2]\n        if index > len(newList) - 3:\n            return \"List is empty!\"\n    return newList\n    \ndef get_first_second_third_fourth(ne"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[2]\n    newList[2] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return n\n    else:\n        return n*binomial_Coeff(n-1,k)\n        \ndef main():\n    #n = 6\n    #k = 2\n    #c = 3\n    #print(binomial_Coeff(n,k))\n    print(binomial_Coeff(6,2))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return 0\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n-1):\n        sum += n // k * n // k * binomial_Coeff(n-1,k-1)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeffs = []\n    for i in range(1,n+1):\n        coeff = 1\n        for j in range(i):\n            coeff *= (n-j-1)\n        coeffs.append(coeff)\n    return sum(coeffs)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)\ndef binomial_Coeff_2(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)\ndef binomial_Coeff_3(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1) + binomial_Coeff(n-2,k)\ndef binomial_Coeff_4(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1) + binomial_Coeff(n-2,k) + binomial_Coeff(n-2,k-1) + binomial_Coeff(n-3,k) + binomial_Coeff(n-3,k-1) + binomial_Coeff(n-4,k) + binomial_Coeff(n-4,k-1)\ndef binomial_Coeff_5(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1) + binomial_Coeff(n-2,k) + binomial_Coeff(n-2,k-1) + binomial_Coeff(n-3,k) + binomial_Coeff(n-3,k-1) + binomial_Coeff(n-4,k) + binomial_Coeff(n-4,k-1) + binomial_Coeff(n-5,k) + binomial_Coeff(n-5,k-1) + binomial_Coeff(n-6,k) + binomial_Coeff(n-6,k-1) + binomial_Coeff(n-7,k) + binomial_Coeff(n-7,k-1) + binomial_Coeff(n-8,k) + binomial_Coeff(n-8,k-1) + binomial_Coeff(n-9,k) + binomial_Coeff(n-9,k-1) + binomial_Coeff(n-10,k) + binomial_Coeff(n-10,k-1)\ndef binomial_Coeff_6(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1) + binomial_Coeff(n-2,k) + binomial_Coeff(n-2,k-1) + binomial_Coeff(n-3,k) + binomial_Coeff(n-3,k-1) + binomial_Coeff(n-4,k) + binomial_Coeff(n-4,k-1) + binomial_Coeff(n-5,k) + binomial_Coeff(n-5,k-1) + binomial_Coeff(n-6,k) + binomial_Coeff(n-6,k-1) + binomial_Coeff(n-7,k) + binomial_Coeff(n-7,k-1) + binomial_Coeff(n-8,k) + binomial_Coeff(n-8,k-1) + binomial_Coeff(n-9,k) + binomial_Coeff(n-9,k-1) + binomial_Coeff(n-10,k) + binomial_Coeff(n-10,k-1) + binomial_Coeff(n-11,k) + binomial_Coeff(n-11,k-1) + binomial_Coeff(n-12,k) + binomial_Coeff(n-12,k-1)\ndef binomial_Coeff_7(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1) + binomial_Coeff(n-2,k) + binomial_Coeff(n-2,k-1) + binomial_Coeff(n-3,k) + binomial_Coeff(n-3,k-1) + binomial_Coeff(n-4,k) + binomial_Coeff(n-4,k-1) + binomial_Coeff(n-5,k) + binomial_Coeff(n-5,k-1) + binomial_Coeff(n-6,k) + binomial_Coeff(n-6,k-1) + binomial_Coeff(n-7,k) + binomial_Coeff(n-7,k-1) + binomial_Coeff(n-8,k) + binomial_Coeff(n-8,k-1) + binomial_Coeff(n-9,k) + binomial_Coeff(n-9,k-1) + binomial_Coeff(n-10,k) + binomial_Coeff(n-10,k-1) + binomial_Coeff(n-11,k) + binomial_Coeff(n-11,k-1) + binomial_Coeff(n-12,k) + binomial_Coeff(n-12,k-1) + binomial_Coeff(n-13,k) + binomial_Coeff(n-13,k-1) + binomial_Coeff(n-14,k) + binomial_Coeff(n-14,k-1) + binomial_Coeff(n-15,k) + binomial_Coeff(n-15,k-1) + binomial_Coeff(n-16,k) + binomial_Coeff(n-16,k-1) + binomial_Coeff(n-17,k) + binomial_Coeff(n-17,k-1) + binomial_Coeff(n-18,k) + binomial_Coeff(n-18,k-1) + binomial_Coeff(n-19,k) + binomial_Coeff(n-19,k-1) + binomial_Coeff(n-20,k) + binomial_Coeff(n-20,k-1) + binomial_Coeff(n-21,k) + binomial_Coeff(n-21,k-1) + binomial_Coeff(n-22,k) + binomial_Coeff(n-22,k-1) + binomial_Coeff(n-23,k) + binomial_Coeff(n-23,k-1) + binomial_Coeff(n-24,k) + binomial_Coeff(n-24,k-1) + binomial_Coeff(n-25,k) + binomial_"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c=0\n    k=k+1\n    for i in range(1,n+1):\n        c=c+i*(k**i)\n    return c\nn=int(input(\"Enter the number of elements:\"))\nm=int(input(\"Enter the number of elements after the divisor:\"))\nk=int(input(\"Enter the index of the coefficient:\"))\nsum=binomial_Coeff(n,k)\nprint(\"The sum of the product of the coefficients is:\",sum"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_sum = 0\n    for i in range(1,k+1):\n        binomial_sum += binomial_Coeff(n-i,i)\n    return binomial_sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1 \n    for i in range(k):\n        coeff = coeff * (n - i) * (n - i - 1) * (n - i - 2)\n        print(coeff)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial = n*(n-1)*(n-2)\n    if k>=2:\n        binomial -= n*(n-2)\n    if k == 3:\n        binomial = n*(n-1)*(n-1)*(n-1)\n    return binomial\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ans = []\n    temp = ip\n    if temp.count('0') > 0:\n        ans.append(temp[0:temp.index('0')])\n        temp = temp[temp.index('0')+1:]\n        if temp.count('.') == 1:\n            ans.append(temp[0:temp.index('.')])\n            temp = temp[temp.index('.')+1:]\n            if temp.count('.') == 1:\n                ans.append(temp[0:temp.index('.')])\n                temp = temp[temp.index('.')+1:]\n                if temp.count('.') == 0:\n                    ans.append(temp)\n                else:\n                    ans.append(temp[:temp.index('.')])\n        else:\n            ans.append(temp)\n    else:\n        ans.append(ip)\n    return ans\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = 0\n    while (ip[num] == '0'):\n        num += 1\n    return ip[num:]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    l = 0\n    while(ip[l] == '0'):\n        l += 1\n    print(l)\n    ip = ip[:l]\n    return ip\n    \ndef set_zero_ip(ip):\n    '''\n    Write a function to set the leading zeroes of an ip address.\n    '''\n    l = 0\n    while(ip[l] == '0'):\n        l += 1\n    print(l)\n    ip = ip[:l]\n    return ip\n    \ndef is_valid_ip(ip):\n    '''\n    Check if ip address is valid.\n    '''\n    # Check the first two octets of the address.\n    if len(ip)!= 4:\n        return False\n    if not re.match(r'^(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ip):\n        return False\n    # Check the next four octets of the address.\n    if len(ip)!= 6:\n        return False\n    for i in range(4):\n        if not re.match(r'^(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ip):\n            return False\n        if not re.match(r'^(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ip):\n            return False\n    return True\n    \ndef is_valid_ip_v4(ip):\n    '''\n    Check if ip address is valid.\n    '''\n    # Check the first four octets of the address.\n    if len(ip)!= 4:\n        return False\n    # Check the last four octets of the address.\n    if len(ip)!= 4:\n        return False\n    for i in range(4):\n        if not re.match(r'^((?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ip):\n            return False\n        if not re.match(r'^(?:[0-9]|[1"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    str = ip.split('.')\n    temp = 0\n    for x in str:\n        if x!= temp:\n            temp = x\n    ip = str[0] + str[1] + str[2] + str[3] + str[4] + str[5] + str[6] + str[7] + str[8] + str[9] + str[10]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_count = 0\n    for char in ip:\n        if char == '0':\n            zero_count += 1\n        if zero_count > 1:\n            break\n    return ip[:zero_count]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # pattern=r'^((2(3[0-1]|[01]\\d))|(4[0-1]|\\d))\\.(\\d{1,2}|\\d{1,3})\\.(\\d{1,2}|\\d{1,3})\\.(\\d{1,2}|\\d{1,3})([0-9a-f]{1,4}))'\n    pattern=re.compile(r'^((\\d{1,3}){3})(\\d{1,3}){3}$')\n    ip=ip.split('.')\n    # print(ip)\n    return re.sub(pattern,'',ip[0])\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    x=ip.split('.')\n    x1=[]\n    for i in x:\n        if i.isdigit():\n            x1.append(i)\n    s=''\n    for i in x1:\n        s+=i\n    return s\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # ip = ip.split('.')\n    # ip = '.'.join(ip[2:])\n    # ip = ip.split('.')\n    # ip = '.'.join(ip)\n    # return ip\n    return ip.replace('.','')\n    \ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # port = port.split(':')\n    # port = ':'.join(port)\n    # port = port.split('.')\n    # port = '.'.join(port)\n    # return port\n    return port.replace('.','')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'((?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}' + \\\n        r'((?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}'\n    ip = re.sub(pattern, '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.lstrip('0')\n    if ip[0]=='0':\n        return ip\n    else:\n        return ip+'0'\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_even = []\n    even_odd = []\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    def diff(x):\n        if x==0:\n            return 0\n        return x-1\n    \n    return diff(list1[0])+diff(list1[-1])\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return (0)\n    elif len(list1) == 1:\n        return (list1[0])\n    else:\n        return (list1[0] - list1[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for number in list1:\n        if number % 2 == 0:\n            even_list.append(number)\n        else:\n            odd_list.append(number)\n    return even_list,odd_list\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff=0\n    odd=0\n    even=0\n    for i in range(len(list1)):\n        if i%2==0:\n            odd+=list1[i]\n        else:\n            even+=list1[i]\n        diff+=abs(odd-even)\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    length = len(list1)\n    if length == 0:\n        return None\n    elif length == 1:\n        return list1[0]\n    else:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    while i < len(list1)-1:\n        if i % 2 == 0:\n            list1[i] = list1[i] - list1[i+1]\n        else:\n            list1[i] = list1[i] - list1[i+1]\n        i = i + 1\n    return list1\n    \nprint(diff_even_odd([1, 4, 6, 3, 5]))"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = []\n    for i in list1:\n        if i % 2 == 0:\n            diff.append(i)\n        else:\n            diff.append(i)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #if list is empty then return empty list\n    if not list1:\n        return []\n    #if not all elements are even then return empty list\n    elif len(list1) == 0:\n        return []\n    #if all elements are odd then return empty list\n    elif len(list1) % 2 == 0:\n        return []\n    #else check if the number of elements is odd and return the first even element in list1\n    else:\n        odd_elements = list1[:-1:2]\n        return odd_elements\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    n = len(list1)\n    count_even = 0\n    count_odd = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n=len(str1)\n    swaps=0\n    i=0\n    j=0\n    while i<n:\n        if str1[i]!=str2[j]:\n            swaps+=1\n        i+=1\n        j+=1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1,s2=0,0\n    res=0\n    for i in range(len(str1)) :\n        if str1[i] == '1' and str2[i] == '0' :\n            s1+=1\n        elif str1[i] == '0' and str2[i] == '1' :\n            s2+=1\n        elif str1[i] == '1' and str2[i] == '1' :\n            res+=1\n    return res,s1,s2\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    str1 = str(bin(int(str1,2)))\n    str2 = str(bin(int(str2,2)))\n    # print(str1,str2)\n    str1 = str1[2:]\n    str2 = str2[2:]\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    if n1<n2:\n        n1,n2 = n2,n1\n        \n    count = 0\n    \n    for i in range(n2):\n        if str1[i]!=str2[i]:\n            count+=1\n    \n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def count_swaps(str1,str2): \n        a = list(str1)\n        for i in range(0,len(str1)):\n            for j in range(i+1,len(str1)):\n                if str1[i]!= str2[j]:\n                    a[i],a[j] = a[j],a[i]\n        return ''.join(a)\n    return count_swaps(str1,str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1,l2 = len(str1),len(str2)\n    if l1<l2:\n        m=min(l1,l2)\n    else:\n        m=l1\n    # print(m)\n    result = 0\n    for i in range(l1-m):\n        # print(i)\n        for j in range(l2-m):\n            # print(j)\n            if str1[i]!= str2[j]:\n                result+=1\n                # print(str1[i])\n                # print(str2[j])\n                break\n    return result\nstr1,str2 = \"11100\", \"11100\"\nstr1,str2 = \"10101\", \"10101\"\nprint(min_Swaps(str1,str2))"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2):\n        num_swaps = 0\n        for i in range(0,len(str1)):\n            for j in range(0,len(str2)):\n                if str1[i] == str2[j]:\n                    num_swaps += 1\n                else:\n                    break\n        return num_swaps\n    elif len(str1) > len(str2):\n        num_swaps = len(str1) - len(str2)\n        for i in range(0,len(str1)):\n            for j in range(0,len(str2)):\n                if str1[i] == str2[j]:\n                    num_swaps += 1\n                else:\n                    break\n        return num_swaps\n    else:\n        num_swaps = len(str1) - len(str2)\n        for i in range(0,len(str1)):\n            for j in range(0,len(str2)):\n                if str1[i] == str2[j]:\n                    num_swaps += 1\n                else:\n                    break\n        return num_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Solution 1\n    # Time O(n)\n    # Space O(1)\n    # def minSwaps(s1, s2):\n    #     if (len(s1)!= len(s2)) :\n    #         return 0\n    #     swaps = 0\n    #     for i in range(len(s1)) :\n    #         if s1[i]!= s2[i]:\n    #             swaps += 1\n    #     return swaps\n    #\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 2\n    # Time O(n)\n    # Space O(1)\n    # def minSwaps(s1, s2):\n    #     c = 0\n    #     for i in range(len(s1)):\n    #         if s1[i]!= s2[i]:\n    #             c += 1\n    #             if c == 1:\n    #                 return 0\n    #             else:\n    #                 c = 0\n    #     return c\n    #\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 3\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 4\n    # Time O(n)\n    # Space O(1)\n    # def minSwaps(s1, s2):\n    #     c = 0\n    #     for i in range(len(s1)):\n    #         if s1[i]!= s2[i]:\n    #             c += 1\n    #             if c == 1:\n    #                 return 0\n    #             else:\n    #                 c = 0\n    #     return c\n    #\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 5\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 6\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 7\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 8\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 9\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 10\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 11\n    # Time O(n)\n    # Space O(1)\n    # def minSwaps(s1, s2):\n    #     c = 0\n    #     for i in range(len(s1)):\n    #         if s1[i]!= s2[i]:\n    #             c += 1\n    #             if c == 1:\n    #                 return 0\n    #             else:\n    #                 c = 0\n    #     return c\n    #\n    # Time O(n)\n    # Space O(1)\n    # def minSwaps(s1, s2):\n    #     c = 0\n    #     for i in range(len(s1)):\n    #         if s1[i]!= s2[i]:\n    #             c += 1\n    #             if c == 1:\n    #                 return 0\n    #             else:\n    #                 c = 0\n    #     return c\n    #\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 11\n    # Time O(n)\n    # Space O(1)\n    # def minSwaps(s1, s2):\n    #     c = 0\n    #     for i in range(len(s1)):\n    #         if s1[i]!= s2[i]:\n    #             c += 1\n    #             if c == 1:\n    #                 return 0\n    #             else:\n    #                 c = 0\n    #     return c\n    #\n    # Time O(n)\n    # Space O(1)\n    # def minSwaps(s1, s2):\n    #     c = 0\n    #     for i in range(len(s1)):\n    #         if s1[i]!= s2[i]:\n    #             c += 1\n    #             if c == 1:\n    #                 return 0\n    #             else:\n    #                 c = 0\n    #     return c\n    #\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 12\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 13\n    # Time O(n)\n    # Space O(1)\n    # def minSwaps(s1, s2):\n    #     c = 0\n    #     for i in range(len(s1)):\n    #         if s1[i]!= s2[i]:\n    #             c += 1\n    #             if c == 1:\n    #                 return 0\n    #             else:\n    #                 c = 0\n    #     return c\n    #\n    # Time O(n)\n    # Space O(n)\n    # str1, str2 = removeBits(str1), removeBits(str2)\n    # minSwaps(str1, str2)\n    # return minSwaps(str1, str2)\n    \n    # Solution 14\n    # Time O(n)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            count += 1\n        else:\n            return count\n    return count\ndef main():\n    print(min_Swaps(\"110001010\", \"110001011\"))\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n,m = len(str1),len(str2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1,m+1):\n        dp[i][0] = i\n    for j in range(1,n+1):\n        dp[0][j] = j\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str1[j-1] == str2[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1+min(dp[i-1][j],dp[i][j-1])\n    return dp[m][n]\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            if tuple_list[i][j]==0:\n                tuple_list[i][j]=None\n    size=0\n    for i in range(len(tuple_list)):\n        size=size+1\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    x=len(tuple_list)\n    if x==0:\n        return 0\n    else:\n        return x*8\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    from collections import Counter\n    counter = Counter(tuple_list)\n    return counter['f']\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for elem in tuple_list:\n        size += elem[0] + elem[1] + elem[2]\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += len(tuple_list[i])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    temp = []\n    for i in tuple_list:\n        temp.append(len(i))\n    return sum(temp)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    num_of_items = 0\n    for item in tuple_list:\n        num_of_items += len(item)\n    return num_of_items\ndef zip(*tuple_list):\n    '''\n    Write a function to create a tuple where each item in the tuple is paired with the next tuple.\n    '''\n    new_tuple = []\n    for item in tuple_list:\n        new_tuple.append(item)\n    return tuple(new_tuple)\ndef is_valid(string, lower):\n    '''\n    Write a function to check if the given string is a valid python dictionary or not.\n    '''\n    is_valid = True\n    if lower:\n        string = string.lower()\n    for key, value in string.items():\n        if type(value) is str and key not in string:\n            is_valid = False\n            break\n    return is_valid\ndef is_valid_python_tuple(tuple_list):\n    '''\n    Write a function to check if the tuple is valid or not.\n    '''\n    for index in range(len(tuple_list)):\n        if type(tuple_list[index]) is tuple and tuple_size(tuple_list[index]) > 0:\n            break\n    return True\ndef is_valid_python_list(tuple_list):\n    '''\n    Write a function to check if the tuple is valid or not.\n    '''\n    if tuple_size(tuple_list) > 0:\n        for index in range(len(tuple_list)):\n            if type(tuple_list[index]) is tuple and tuple_size(tuple_list[index]) > 0:\n                break\n        if tuple_size(tuple_list) == 1:\n            tuple_list = tuple_list[0]\n    return is_valid_python_tuple(tuple_list)\ndef list_to_str(tuple_list, is_python_tuple):\n    '''\n    Write a function to convert a python list into a string.\n    '''\n    string_str = ''\n    for item in tuple_list:\n        if is_python_tuple:\n            string_str += str(item)\n        else:\n            string_str += str(item).strip('()')\n    return string_str\ndef list_to_python_tuple(tuple_list):\n    '''\n    Write a function to convert a python list into a tuple.\n    '''\n    python_tuple = []\n    for item in tuple_list:\n        python_tuple.append(item)\n    return tuple(python_tuple)\ndef tuple_to_str(tuple_list):\n    '''\n    Write a function to convert a python tuple into a string.\n    '''\n    string_str = ''\n    for item in tuple_list:\n        string_str += str(item)\n    return string_str\ndef list_to_list(tuple_list):\n    '''\n    Write a function to convert a python list into a list.\n    '''\n    list_str = []\n    for item in tuple_list:\n        list_str.append(item)\n    return list_str\ndef list_to_str(tuple_list):\n    '''\n    Write a function to convert a python tuple into a string.\n    '''\n    string_str = ''\n    for item in tuple_list:\n        string_str += str(item)\n    return string_str\ndef list_to_python_list(tuple_list):\n    '''\n    Write a function to convert a python tuple into a list.\n    '''\n    python_list = []\n    for item in tuple_list:\n        python_list.append(item)\n    return python_list\ndef sort_dict(tuple_list):\n    '''\n    Write a function to sort a given dictionary by values.\n    '''\n    for index in range(len(tuple_list)):\n        for item in tuple_list[index]:\n            if type(item) is str and item not in tuple_list[index]:\n                tuple_list[index].append(item)\n    return tuple_list\ndef reverse_dict(tuple_list):\n    '''\n    Write a function to reverse a given dictionary.\n    '''\n    for index in range(len(tuple_list)):\n        for item in tuple_list[index]:\n            if type(item) is str and item not in tuple_list[index]:\n                tuple_list[index].append(item)\n    return tuple_list\ndef dict_to_str(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a string.\n    '''\n    string_str = ''\n    for index in range(len(tuple_list)):\n        string_str += str(tuple_list[index])\n    return string_str\ndef dict_to_python_dict(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a python dictionary.\n    '''\n    python_dict = {}\n    for index in range(len(tuple_list)):\n        for item in tuple_list[index]:\n            if type(item) is str and item not in tuple_list[index]:\n                python_dict[item] = 0\n            elif type(item) is dict:\n                python_dict[item[key]] = item[value]\n            elif type(item) is int:\n                python_dict[item] = 0\n            else:\n                python_dict[item] = 0\n    return python_dict\ndef dict_to_str(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a string.\n    '''\n    string_str = ''\n    for index in range(len(tuple_list)):\n        string_str += str(tuple_list[index])\n    return string_str\ndef dict_to_list(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a list.\n    '''\n    list_str = []\n    for index in range(len(tuple_list)):\n        list_str.append(tuple_list[index])\n    return list_str\ndef dict_to_python_dict(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a python dictionary.\n    '''\n    python_dict = {}\n    for index in range(len(tuple_list)):\n        python_dict[tuple_list[index][key]] = tuple_list[index][value]\n    return python_dict\ndef dict_to_str(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a string.\n    '''\n    string_str = ''\n    for index in range(len(tuple_list)):\n        string_str += str(tuple_list[index])\n    return string_str\ndef dict_to_list(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a list.\n    '''\n    list_str = []\n    for index in range(len(tuple_list)):\n        list_str.append(tuple_list[index])\n    return list_str\ndef dict_to_python_dict(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a python dictionary.\n    '''\n    python_dict = {}\n    for index in range(len(tuple_list)):\n        python_dict[tuple_list[index][key]] = tuple_list[index][value]\n    return python_dict\ndef dict_to_str(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a string.\n    '''\n    string_str = ''\n    for index in range(len(tuple_list)):\n        string_str += str(tuple_list[index])\n    return string_str\ndef dict_to_list(tuple_list):\n    '''\n    Write a function to convert a given dictionary into a list.\n    '''\n    list_str = []\n    for index in range(len(tuple_list)):\n        list_str.append(tuple_list[index])\n    return list_str\ndef dict_to_python_dict(tuple_list):\n    '''\n    Write a function to convert a given dictionary int"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def find_kth_recur(arr1, arr2, l, r, k):\n        if l > r: return\n        mid = (l+r)//2\n        if arr1[mid] <= arr2[k-1]:\n            return\n        if k == mid:\n            return arr1[k]\n        elif arr1[mid] > arr2[k-1]:\n            return find_kth_recur(arr1, arr2, l, mid-1, k)\n        else:\n            return find_kth_recur(arr1, arr2, mid+1, r, k)\n    return find_kth_recur(arr1, arr2, 0, len(arr1)-1, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # initalize the dp array\n    dp = [0] * (len(arr1) + 1)\n    # calculate the length of the array\n    length = len(arr1)\n    # bind all the elements of the array to the index\n    for i in range(0, length + 1):\n        dp[i] = i\n    # find the value for the given index\n    for i in range(0, len(arr2)):\n        j = i + length - 1\n        # set minimum value to 0\n        dp[j] = -1\n        # find the minimum element in the arr2\n        while j > 0 and arr2[j] > arr1[i]:\n            j -= 1\n        # store the minimum element\n        if j > 0 and arr2[j] > arr1[i]:\n            dp[j] = arr2[j]\n    # return the kth element\n    return dp[len(arr2)]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pos = 0\n    mid = 0\n    for index in range(len(arr1)):\n        if arr1[index] < arr2[mid]:\n            pos = index + 1\n        mid = (mid + k - 1) % len(arr2)\n    return arr1[pos]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[k-1] if k>=0 and k<len(arr1) else -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    n1 = len(arr1)\n    n2 = len(arr2)\n    k = k - 1\n    # find the position of the kth element from the first array\n    # if not, return -1\n    return (arr1[n1-k] if n1 > 0 else -1) if k!= 0 else -1\n    \n    \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Create a binary search tree\n    # Use a binary search tree to find the kth element\n    print(arr1, arr2)\n    # O(log(n))\n    \n    # Recur for all the elements in the array\n    if len(arr1) > len(arr2):\n        # return the kth element\n        return find_kth(arr1, arr2, k)\n    else:\n        # return the kth element\n        return find_kth(arr2, arr1, k)\n    \n    # check if kth element exists\n    # if it does not exist, return\n    # the kth element is not found\n    # if kth element is found, return the kth element\n    \n    # initialize an empty array to store the\n    # kth element in it\n    # array\n    \n    # initialize an empty array to store the\n    # kth element in it\n    # array\n    # find the kth element in it\n    # if it exists, return it\n    # if it does not exist, return\n    # the kth element is not found\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    a1, a2 = len(arr1), len(arr2)\n    if a1 < a2:\n        return arr2[k-1]\n    if k < a1:\n        return arr1[k-a1]\n    left, right = 0, (k-1)\n    while left < a1 and right < a2:\n        if arr1[left] < arr2[right]:\n            left += 1\n        elif arr1[left] > arr2[right]:\n            right += 1\n        else:\n            return arr1[left]\n    if left < a1:\n        return arr1[left]\n    if right < a2:\n        return arr2[right]\n    return arr1[k-a1]"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    assert arr1 and arr2\n    assert len(arr1) > 0\n    assert len(arr2) > 0\n    assert 1 <= k <= len(arr1)\n    assert arr1[0] < arr2[-1]\n    \n    def find_kth_recursive(arr1, arr2, k, start, end):\n        if end >= start:\n            mid = (start + end) // 2\n            if arr1[mid] == arr2[mid]:\n                return mid\n            if k == arr1[mid]:\n                return mid\n            if k < arr1[mid]:\n                return find_kth_recursive(arr1, arr2, k, start, mid - 1)\n            else:\n                return find_kth_recursive(arr1, arr2, k, mid + 1, end)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[k-1]\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def convert(number):\n        convert=0\n        while number > 0:\n            digit = number % 10\n            convert += digit**3\n            number //= 10\n        return convert\n    result=0\n    for i in range(number,0,-1):\n        result+=convert(i)\n    return result == number\n    "
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    total = 0\n    for i in range(len(num)):\n        total += int(num[i])\n    return str(total) == str(total ** 3)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    def is_armstrong(num):\n        count = 0\n        str_num = str(num)\n        if len(str_num) < len(str_num[::-1]):\n            for i in range(len(str_num) - 1):\n                if int(str_num[i]) ** int(str_num[i + 1]) == int(str_num[i]):\n                    count += 1\n            if count == len(str_num):\n                return True\n        else:\n            return False\n    \n    count = 0\n    for i in range(1, number + 1):\n        if is_armstrong(i):\n            count += 1\n    if count == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if(str(number).isdigit() == False):\n        return False\n    else:\n        temp = str(number)\n        summ = 0\n        while (len(temp)!= 0):\n            dig = int(temp[0])\n            temp = temp[1:]\n            if (dig ** 3) == number:\n                summ += 1\n            else:\n                return False\n        return summ == len(temp)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    string = str(number)\n    length = len(string)\n    if length == 1:\n        return True\n    elif length == 2 and string[0] == string[-1]:\n        return True\n    else:\n        for i in range(length - 1):\n            if string[i] + string[i + 1] in string:\n                if string[i] + string[i + 1] == number:\n                    return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number)) == 1:\n        return True\n    else:\n        digits = 0\n        for i in str(number):\n            digits += 1\n        for i in str(number):\n            if int(i) == int(str(number)[digits-1]):\n                return False\n            else:\n                digits -= 1\n        return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    def isArmstrong(number):\n        '''\n        function that checks if the given number is armstrong or not.\n        '''\n        check = 0\n        for i in range(1, number+1):\n            if (number % i == 0):\n                check += 1\n            elif (number % i == 1):\n                check += 0\n        if (check == number):\n            return True\n        else:\n            return False\n            \n    return isArmstrong(number)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #Create a array to store the digits of the number.\n    digits = []\n    \n    #For loop to generate digits of the number.\n    for i in str(number):\n        digits.append(int(i))\n    \n    #Looping through the array to generate the number of\n    #digits of the number.\n    for i in range(len(digits)):\n        #Check if the digits of the number are equal.\n        if digits[i] == number:\n            #If the digits are equal, return true.\n            return True\n    \n    #If any digits are not equal.\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #declaring variable for length of number\n    length = len(number)\n    #declaring variable to store sum of digits\n    sum = 0\n    #declaring variable to store sum of digits of numbers in range\n    sum_of_digits = 0\n    #declaring variable to store remainder of divisors\n    remainder = 0\n    #declaring variable to store length of number\n    length_of_number = len(number)\n    #declaring variable to store sum of digits of the number\n    sum_of_digits_number = 0\n    #declaring variable to store remainder of divisors of number\n    remainder_number = 0\n    #declaring variable to store length of number\n    length_of_number_number = len(number)\n    #declaring variable to store sum of digits of the number\n    sum_of_digits_number_number = 0\n    #declaring variable to store remainder of divisors of number\n    remainder_number_number = 0\n    #declaring variable to store length of number\n    length_of_number_number_number = len(number)\n    #declaring variable to store sum of digits of the number\n    sum_of_digits_number_number_number = 0\n    #declaring variable to store remainder of divisors of number\n    remainder_number_number_number_number = 0\n    #declaring variable to store length of number\n    length_of_number_number_number_number_number = len(number)\n    #declaring variable to store sum of digits of the number\n    sum_of_digits_number_number_number_number_number = 0\n    #declaring variable to store remainder of divisors of number\n    remainder_number_number_number_number_number_number = 0\n    #declaring variable to store length of number\n    length_of_number_number_number_number_number_number_number = len(number)\n    #declaring variable to store sum of digits of the number\n    sum_of_digits_number_number_number_number_number_number = 0\n    #declaring variable to store remainder of divisors of number\n    remainder_number_number_number_number_number_number_number_number = 0\n    #declaring variable to store length of number\n    length_of_number_number_number_number_number_number_number_number_number_number = len(number)\n    #declaring variable to store sum of digits of the number\n    sum_of_digits_number_number_number_number_number_number_number_number_number_number_number_number_number_number = 0\n    #declaring variable to store remainder of divisors of number\n    remainder_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_numbe"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in str(number):\n        sum += int(i)\n    if(sum == number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    def calculate_average(numbers):\n        total = 0\n        average = 0\n        for i in numbers:\n            total += i\n        average = total / len(numbers)\n        return average\n    return calculate_average(number)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    sum2 = 0\n    for num in range(1, number + 1):\n        if num % 2 == 0:\n            sum += num\n            sum2 += num\n        else:\n            sum2 += num\n    average = sum / number\n    print(f\"sum: {sum}, average: {average}, number: {number}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    number = list(number)\n    for item in number:\n        sum = sum + item\n    average = sum / len(number)\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        num = int(input(\"Enter a natural number \"))\n        sum = sum + num\n        count += 1\n    avg = sum / count\n    return avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1,number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    first_n_numbers = []\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        number_to_add = int(input('Enter a natural number: '))\n        first_n_numbers.append(number_to_add)\n        sum += number_to_add\n    if len(first_n_numbers) > 0:\n        average = sum / len(first_n_numbers)\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    number = int(input(\"Enter the number you want to calculate: \"))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    return sum / number\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #your code goes here\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(f\"{n} is even number\")\n    else : \n        print(f\"{n} is not even number\")\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    l = len(str1)\n    for i in range(l-1, -1, -1):\n        if str1[i] == str1[i+1]:\n            return i\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Your code here\n    if len(str1)==0:\n        return None\n    if str1[0]==str1[0]:\n        return 0\n    elif str1[0]==str1[len(str1)-1]:\n        return 1\n    else:\n        return len(str1)-1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1_list = str1.split()\n    str1_list_length = len(str1_list)\n    if str1_list_length == 0:\n        return None\n    else:\n        index = 0\n        first_repeated_char = str1_list[0]\n        for i in range(str1_list_length):\n            if str1_list[i] == first_repeated_char:\n                index = i\n                break\n        return index\n    \n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #If we have a loop\n    for c in str1:\n        if str1.count(c) > 1:\n            return c\n    #If we have not loop\n    return \"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    result = ''\n    for x in str1:\n        if x in str1:\n            result += x\n    return result\n    \n    \nprint(first_repeated_char('universe'))\nprint(first_repeated_char('test'))\nprint(first_repeated_char('abc'))\nprint(first_repeated_char('aaa'))\nprint(first_repeated_char('aa'))\nprint(first_repeated_char('b'))\nprint(first_repeated_char('a'))\nprint(first_repeated_char('aba'))\nprint(first_repeated_char('abb'))\nprint(first_repeated_char('abcd'))\nprint(first_repeated_char('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabc"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # TODO: replace with your code here\n    return str1[0]\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code goes here\n    if(len(str1) == 1):\n        return str1\n    else:\n        print('please pass only 1 letter in str1')\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return list(range(1,n+1))\n    else:\n        arr = [1]\n        for i in range(2,n+1):\n            arr.append(arr[i-1]+arr[i-2])\n        return arr"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    num = []\n    for i in range(1, n+1):\n        num.append(i)\n    return num\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n+1) if i % 5 == 0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        return None\n    l = []\n    l.append(n)\n    if n > 2:\n        l.append(n-1)\n        l.append(n-2)\n    if n > 3:\n        l.append(n-3)\n        l.append(n-4)\n    if n > 5:\n        l.append(n-5)\n        l.append(n-6)\n    if n > 7:\n        l.append(n-7)\n        l.append(n-8)\n    if n > 9:\n        l.append(n-9)\n        l.append(n-10)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n, 0, -1):\n        if i < n:\n            if ludic.count(i) < ludic.count(i-1):\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    ludic_numbers = []\n    \n    for i in range(1, n+1):\n        if i < 1000:\n            ludic_numbers.append(i)\n        else:\n            break\n    \n    return ludic_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def luc(x):\n        if x > 1:\n            return luc(x-1) + x\n        return x\n    return luc(n)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    d = []\n    for i in range(1, n + 1):\n        if i < int(n ** 0.5):\n            d.append(i)\n        else:\n            break\n    return d\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    numbers = [i for i in range(1, n + 1)]\n    ludic = []\n    for i in numbers:\n        if i < 10:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n<0:\n        return \"Please enter a positive number\"\n    if n==0:\n        return [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    if n<=2:\n        return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    if n%2==1:\n        return [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n    if n%2==0:\n        a=[]\n        for i in range(0,n+1):\n            a.append(str(i))\n        for i in range(0,n+1):\n            a.append(str(i))\n        a.sort()\n        return a\n    \nn=int(input(\"enter the number of elements\"))\nprint(get_ludic(n))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return(s[::-1].split())\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words= s.split()\n    s=''\n    for i in words:\n        s+=i\n    return s[::-1]\n    \n    \nprint(reverse_words('the  quick  brown fox  jumps  over  the  lazy  dog'))"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return [word.split() for word in s.split()]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #pass\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # your code here\n    # return reverse_words_iterative(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    # TODO: Create a function to reverse the given string\n    # Hint: use a for loop\n    word_list = []\n    for w in s.split():\n        word_list.append(w[::-1])\n    return''.join(word_list)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    start = 0\n    end = len(s) - 1\n    while start < end:\n        tmp = s[start] + s[end]\n        tmp = tmp.strip()\n        tmp = tmp[::-1]\n        if tmp == s:\n            start += 1\n            end -= 1\n        else:\n            s = s[:start] + tmp + s[end]\n            start += 1\n            end -= 1\n    return s\nprint(reverse_words(input())"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Python Program for Checking Prime Number\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    else:\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        if num == 2 or num % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def is_prime(num):\n        if num == 2: return True\n        if num == 1: return False\n        if num % 2 == 0: return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3: return True\n    if num % 2 == 0 or num % 3 == 0: return False\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0 or num % (i+2) == 0: return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num > 2 and num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num == 4 or num == 5:\n        return True\n    if num % 3 == 0:\n        return False\n    if num % 5 == 0:\n        return False\n    for i in range(6,num,2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi/180)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi / 180)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\ndef logarithmic_to_degrees(logarithmic):\n    '''\n    Write a function to convert logarithms to degrees.\n    '''\n    degrees = logarithmic * (math.pi / 180)\n    return degrees\ndef is_floor(logarithmic):\n    '''\n    Write a function to check whether the input is a floor.\n    '''\n    if logarithmic < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * math.pi / 180\n    return degree\ndef type_func(func):\n    '''\n    Write a function to handle the types of arguments passed to a function.\n    '''\n    def inner(a,b):\n        if type(a) == int or type(a) == float or type(a) == complex:\n            return func(a,b)\n        else:\n            return 'Invalid argument!'\n    return inner\n@type_func\ndef quadratic(a,b,c):\n    '''\n    Write a function to calculate quadratic equation with the given coefficients.\n    '''\n    result = (b*b)-4*a*c\n    return result\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree>0:\n        return (degree+180) * math.pi / 180\n    else:\n        return (degree - 180) * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    degree = degree * (math.pi/180)\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0:\n        return 0\n    elif degree == 90:\n        return math.pi/2\n    elif degree == 180:\n        return 3.141592653589793\n    elif degree == 270:\n        return 5.0/360\n    elif degree == 360:\n        return -3.141592653589793\n    else:\n        return None\n    \ndef main():\n    print(\"Degree to Radian Converter\")\n    degree = input(\"Enter degree (0-360): \")\n    degree = int(degree)\n    rad = radian_degree(degree)\n    \n    print(f\"{degree} degrees is {rad:.2f} radians\")\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree < 0:\n        return degree*180/math.pi\n    else:\n        return degree*(180/math.pi)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    m = pattern.search(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_regex = re.compile(pattern)\n    match = re.search(pattern_regex, text)\n    start = match.start()\n    end = match.end()\n    return start, end, text[start:end]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # findall is a function in python\n    # it returns a list of tuples in the form of (match object, start, end)\n    # it returns an iterator, an iterator is a container that can be iterated over\n    # starts is a starting index (0 based)\n    # ends is an ending index (0 based)\n    # finditer is an iterator\n    # Iterators are iterators in Python (it returns a generator)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Convert the input to a regular expression.\n    regex = re.compile(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = 0\n    substring = \"\"\n    for char in pattern:\n        if char in text:\n            start_index = text.find(char, start_index)\n            end_index = text.find(char, end_index)\n            substring = text[start_index:end_index + 1]\n            break\n    return substring, start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #takes in a string and a pattern\n    matcher = re.finditer(pattern, text, re.MULTILINE | re.DOTALL | re.UNICODE)\n    \n    #gets the matches\n    match_index = 0\n    match_substr = ''\n    for match in matcher:\n        if match_index > 0:\n            match_substr = match_substr + match.group()\n        match_index = match_index + 1\n    \n    return match_substr\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    return match\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = pattern.lower() # convert the pattern to lower case\n    pattern = re.escape(pattern) # escape any special characters\n    pattern = re.compile(pattern) # compile the pattern to a regular expression\n    return pattern.findall(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start, end = 0, 0\n    while end < len(text):\n        m = re.search(pattern, text[end:])\n        if m:\n            start = end\n            end += len(m.group(0))\n            return m.group(0), start, end\n        end += 1\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Split the text by white space, and search the string for the pattern\n    regex_str = re.findall(pattern, text)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    num = list(range(1,n+1))\n    print(num)\n    return num[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b = [1] \n    numbers = [0, 1, 3, 6, 10, 15, 21, 28, 36, 55, 75, 110, 125, 150, 220, 280, 360, 420, 480, 600, 720, 820, 980] \n    index = numbers.index(n) \n    b[index] = b[index] + 1 \n    return b[index] \n  "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    k = 0\n    while i <= n: \n        j = 0\n        while j < i:\n            print('{}*{}'.format(i,j))\n            j = j + 1\n        i = i + 1\n    return\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    num = 1\n    b = [1]*(n+1)\n    for i in range(2,n+1):\n        b[i] = (b[i-1] + b[i-2]) % 1000000007\n        num = (b[i] + num) % 1000000007\n    return num\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Base case: If n is 1, return 1.\n    if n == 1:\n        return 1\n    # Base case: n is 0 or 1\n    if n == 0:\n        return 0\n    # Base case: n is 2 or 3\n    if n == 2:\n        return n\n    # Base case: n is 4 or 5\n    if n == 4 or n == 5:\n        return n\n    # Recursive call\n    return bell_Number(n - 1) + bell_Number(n - 2) + bell_Number(n - 3)\n    \nprint(bell_Number(1))\nprint(bell_Number(2))\nprint(bell_Number(3))\nprint(bell_Number(4))\nprint(bell_Number(5)"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Method 1\n    # n = 2*n - 1\n    # n = 2 * n - 2 + n + n - 2 + 2 * n\n    # n = 2 * n - 2 + n + n - 3 + 4 * n - 5\n    # n = 2 * n - 2 + n + n - 2 + n - 2 + n + n - 3 + 4 * n - 5\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    for i in range (1,n+1):\n        print(i,end = \" \")\n    print()\n    for i in range (2,n+1):\n        print(i,end = \" \")\n    print()\n    print(\"\\n\")\n    \n        \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Step 1: find a factorial\n    # Step 2: find the first prime number\n    # Step 3: break the recurrence\n    # Step 4: return the factorial\n    \n    factorial = 1\n    prime = 1\n    \n    if (n == 1):\n        return 1\n    \n    while (n > 0):\n        if (n % 2 == 0):\n            factorial *= n\n            break\n        else:\n            n = n // 2\n            prime += 1\n            factorial *= prime\n            \n    return factorial\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 0\n    while(i < n):\n        a = i + 1\n        print(a)\n        i = i + 2\n    return a\nprint(bell_Number(12)"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # write your code here\n    # find the k'th element in the list\n    return [list1[i] for i in range(len(list1)) if i<L and i>0]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] == L:\n            del list1[i]\n        else:\n            i += 1\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(list1)\n    k = len(list1)\n    if k > 1:\n        if k <= L:\n            print(\"Cannot remove k'th element as it has no element\")\n        else:\n            list1.pop(k-1)\n            print(list1)\n    else:\n        print(\"List is empty\")\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [i for i in list1 if i < L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    def remove_elem(elem):\n        '''\n        :param elem:\n        :return:\n        '''\n        return list1.remove(elem)\n    return remove_elem(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Pass the input of the list to the function.\n    print(list1)\n    #Create a temp variable to store the return value of the function.\n    temp = list1.pop(L)\n    #Create a new list to store the temp variable.\n    removed = []\n    #Loop through the list.\n    for i in list1:\n        #Check to see if the current element is in the temp list.\n        if i == temp:\n            #If the current element is found, remove it from the temp list.\n            removed.append(i)\n            #Remove the element from the list.\n            list1.remove(i)\n            #Remove the element from the temp list.\n            temp = list1.pop(L)\n            #If there are no remaining elements in the list, there is a problem.\n            if len(list1) == 0:\n                break\n    #Return the returned list.\n    return removed\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n    return [item for item in list1 if item!= L[L.index(item) + L.index(L[-1])]"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for item in list1:\n        if item < L:\n            list2.append(item)\n        else:\n            list2.append(list1.pop())\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L.pop()\n    L.remove(k)\n    return L\n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU'RE AWESOM!\\n\""
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    length = len(test_list)\n    if length == 0:\n        return []\n    elif length == 1:\n        return test_list[0]\n    else:\n        return max(test_list[0])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N==1:\n        return test_list[0][0]\n    if N==2:\n        return max(test_list[0][0],test_list[1][0])\n    elif N>=3:\n        return max(test_list[0][N-2],max(test_list[1][N-2],test_list[2][N-2]))\n    else:\n        print(\"Error: N>2, cannot return the maximum of the 2nd, 3rd, 4th, and 5th rows of the matrix. Please enter a valid number for N\")\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # write your code here\n    if len(test_list) <= 1:\n        return test_list[0][N]\n    return max(test_list[0][N+1:])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 0:\n        return test_list[0][N]\n    elif N == 1:\n        return test_list[0][N]\n    else:\n        return max_of_nth(test_list, N-1) + test_list[0][N]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = test_list[0][N-1]\n    for i in range(N):\n        result = max(result, test_list[i][N-1])\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][0]\n    else:\n        return max_of_nth(test_list, N-1) + test_list[0][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    \n    #try to return in case the list is empty\n    try:\n        assert(len(test_list) == len(test_list[0])), \"the list must have one row per element\"\n        assert(test_list[0] == [0,1,2]), \"the list must be in the form of a list of lists\"\n    except:\n        assert(type(test_list) == list)\n        assert(len(test_list) == len(test_list[0])), \"the list must have one row per element\"\n        assert(test_list[0] == [0,1,2]), \"the list must be in the form of a list of lists\"\n    \n    #iterate through all the elements of the list\n    for i in range(len(test_list[0])):\n        #try to return in case the list is empty\n        try:\n            assert(type(test_list[0][i]) == int), \"the element at index '%d' must be an integer\" %i\n            assert(len(test_list) == len(test_list[0])), \"the list must have one row per element\"\n        except:\n            assert(type(test_list[0][i]) == str), \"the element at index '%d' must be a string\" %i\n            assert(len(test_list) == len(test_list[0])), \"the list must have one row per element\"\n    \n    #return the max of the column\n    return max(test_list[0])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = test_list[0][N]\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_value:\n            max_value = test_list[i][N]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Hint: You can use the built in len function to find the length of the list\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = test_list[0][0]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) <= 1:\n        return lst\n    else:\n        return [lst[0], merge(lst[1:])]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i][0:2] + lst[i][2:4] for i in range(len(lst))]\n    \ndef get_dates(lst):\n    '''\n    Write a python function which takes a list of strings, and returns a list of strings where the first string has the date followed by the second string.\n    '''\n    return [lst[i][:5] + lst[i][6:] for i in range(len(lst))]\n    \ndef main():\n    '''\n    This function will take a list of strings, convert them into an ordered list of strings, sort it, and return it as a list of ordered strings.\n    '''\n    lst = [\"(2002) 1st\", \"(2003) 2nd\", \"(2004) 3rd\", \"(2005) 4th\", \"(2006) 5th\", \"(2007) 6th\", \"(2008) 7th\", \"(2009) 8th\", \"(2010) 9th\", \"(2011) 10th\", \"(2012) 11th\", \"(2013) 12th\", \"(2014) 13th\", \"(2015) 14th\", \"(2016) 15th\", \"(2017) 16th\", \"(2018) 17th\", \"(2019) 18th\", \"(2020) 19th\", \"(2021) 20th\", \"(2022) 21st\"]\n    lst = merge(lst)\n    lst = get_dates(lst)\n    print(lst)\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0][0], lst[1][0]]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0], lst[1]]"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Method 1\n    list1 = []\n    list2 = []\n    for i in lst:\n        list1.append(i[0])\n        list2.append(i[1])\n    return list1, list2\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for item in lst:\n        new_lst.append(item[0])\n        new_lst.append(item[1])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Creating 2 lists with the first element of each sublist and the second element of each sublist respectively.\n    first_list = []\n    second_list = []\n    for i in lst:\n        first_list.append(i[0])\n        second_list.append(i[1])\n    return first_list, second_list\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0], lst[1]"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][j] for j in range(0, len(lst[i]))] for i in range(0, len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    out_list = []\n    for i in range(len(lst)):\n        out_list.append([lst[i][0], lst[i][1]])\n    return out_list\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return ()\n    else:\n        # Cumulative sum = all the values that are present in the tuple\n        cumulative_sum = 0\n        for i in range(0, len(test_list)):\n            cumulative_sum += test_list[i]\n            \n        return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) < 1:\n        return (0)\n    else:\n        return (sum(test_list))\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # your code goes here\n    result = 0\n    for x in test_list:\n        result += x\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum([i for i in test_list])\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for x in test_list:\n        sum += x\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #create a new list to store the values of the tuple\n    test_list_new = []\n    \n    #for loop to iterate through the tuple\n    for i in test_list:\n        #adding the values of the tuple to the new list\n        test_list_new.append(i)\n        #add the values of the tuple to the new list\n        \n    #return the new list\n    return test_list_new\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum=0\n    for i in test_list:\n        cum_sum+=i\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = tuple(test_list)\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    cum_sum = []\n    for i in test_list:\n        cum_sum.append(sum(i))\n    return cum_sum\n    \n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    count = 0\n    sum = 0\n    for element in nums:\n        count = count + 1\n        sum = sum + element\n    return (sum/count)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num) / len(num) for num in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = [0 for i in range(len(nums))]\n    for t in nums:\n        for i in range(len(t)):\n            sum[i] += t[i]\n    \n    return sum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) == 0:\n        return []\n    # Check if tuple is not empty\n    if len(nums) == 1:\n        return [nums[0][0] / nums[0][1]]\n    # Calculate the average of the tuple\n    total = 0\n    sum = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        total += nums[i][0]\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            nums[i][j] /= total\n    return nums\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for tup in nums:\n        tuple_list.append(tup)\n    return tuple_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    n = len(nums)\n    sum = []\n    for i in range(0, n):\n        sum.append(sum(nums[i]))\n    return sum/n\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [avg(num) for num in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t) / len(t) for t in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # write your code here\n    # make a list of tuples\n    tuple_list = []\n    for i in range(0, len(nums)):\n        tuple_list.append(nums[i])\n    # get the sum of each tuple in the list\n    sum = 0\n    for j in range(0, len(tuple_list)):\n        sum += tuple_list[j]\n    # divide the sum by the number of tuples\n    if len(tuple_list) == 1:\n        return [0,0,0]\n    else:\n        return [round((sum / len(tuple_list)), 2), round((sum / len(tuple_list) - float(sum) / len(tuple_list)), 2), round((sum / len(tuple_list) - float(sum) / len(tuple_list) - float(sum) / len(tuple_list)), 2)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sums = []\n    for t in nums:\n        if type(t) == tuple:\n            t = sum(t)\n        sums.append(t)\n    return sums / len(nums)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = test_tup1[: len(test_tup1) - 1] # removing the last element\n    test_tup2 = test_tup2[: len(test_tup2) - 1]\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_modulo = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            test_modulo.append(test_tup1[i])\n        else:\n            test_modulo.append(test_tup2[i])\n    return tuple(test_modulo)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    return ()\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup_modulo = tuple((t1[x] % t2[x] for x in range(len(t1))))\n    return tup_modulo\n    \n    \n    \ndef float_modulo(test_float1, test_float2):\n    '''\n    Write a function which takes two floating point numbers and performs the modulo.\n    '''\n    modulo = round(((test_float1 * test_float2) % 100), 4)\n    return modulo\n    \n    \n    \ndef fraction_modulo(test_frac1, test_frac2):\n    '''\n    Write a function which takes two fraction numbers and performs the modulo.\n    '''\n    modulo = round(((test_frac1 % test_frac2) % 100), 4)\n    return modulo\n    \n    \n    \ndef non_zero_modulo(test_number):\n    '''\n    Write a function which returns the non zero modulo.\n    '''\n    modulo = round(((test_number % 1) % 100), 4)\n    return modulo\n    \n    \n    \ndef number_modulo(test_number):\n    '''\n    Write a function which returns the modulo of a number.\n    '''\n    modulo = round(((test_number % 1) % 100), 4)\n    return modulo\n    \n    \n    \ndef is_prime(num):\n    '''\n    Write a function which returns True if a number is prime, otherwise returns False.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \n    \ndef prime_list(num):\n    '''\n    Write a function which returns a list of prime numbers starting from a number.\n    '''\n    prime_list = [2]\n    for i in range(3, num):\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n    \n    \n    \ndef sum_of_squares(num):\n    '''\n    Write a function which returns the sum of the squares of a number.\n    '''\n    sum_of_squares = 0\n    for i in range(1, num):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \n    \ndef sum_of_squares_list(num):\n    '''\n    Write a function which returns the sum of the squares of a number.\n    '''\n    sum_of_squares_list = 0\n    for i in range(1, num):\n        sum_of_squares_list += i ** 2\n    return sum_of_squares_list\n    \n    \n    \ndef double_square(num):\n    '''\n    Write a function which returns the double of a number.\n    '''\n    double_square = num * 2\n    return double_square\n    \n    \n    \ndef double_square_list(num):\n    '''\n    Write a function which returns the double of a number.\n    '''\n    double_square_list = []\n    for i in range(1, num):\n        double_square_list.append(i * 2)\n    return double_square_list\n    \n    \n    \ndef factorial(num):\n    '''\n    Write a function which returns the factorial of a number.\n    '''\n    factorial = 1\n    for i in range(1, num):\n        factorial *= i\n    return factorial\n    \n    \n    \ndef factorial_list(num):\n    '''\n    Write a function which returns the factorial of a number.\n    '''\n    factorial_list = []\n    for i in range(1, num):\n        factorial_list.append(i * factorial(i))\n    return factorial_list\n    \n    \n    \ndef sum_of_divisors(num):\n    '''\n    Write a function which returns the sum of the divisors of a number.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \n    \n    \ndef sum_of_divisors_list(num):\n    '''\n    Write a function which returns the sum of the divisors of a number.\n    '''\n    sum_of_divisors_list = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            sum_of_divisors_list += i\n    return sum_of_divisors_list\n    \n    \n    \ndef count_ones(num):\n    '''\n    Write a function which returns the number of ones in a given number.\n    '''\n    ones = 0\n    for i in range(1, num + 1):\n        if i % 2 == 0:\n            ones += 1\n    return ones\n    \n    \n    \ndef count_ones_list(num):\n    '''\n    Write a function which returns the number of ones in a given number.\n    '''\n    ones_list = []\n    for i in range(1, num + 1):\n        if i % 2 == 0:\n            ones_list.append(i)\n    return ones_list\n    \n    \n    \ndef is_coprime(num, p):\n    '''\n    Write a function which returns True if a number is coprime with p.\n    '''\n    if p == 2 or p == 3:\n        return True\n    if num % p == 0:\n        return False\n    if p % num == 0:\n        return True\n    return False\n    \n    \n    \ndef coprime_list(num, p):\n    '''\n    Write a function which returns the coprime numbers with p.\n    '''\n    coprime_list = []\n    for i in range(1, num + 1):\n        if is_coprime(i, p):\n            coprime_list.append(i)\n    return coprime_list\n    \n    \n    \ndef coprime_tuple(num, p):\n    '''\n    Write a function which returns the coprime numbers with p.\n    '''\n    coprime_tuple = []\n    for i in range(1, num + 1):\n        if is_coprime(i, p):\n            coprime_tuple.append(i)\n    return coprime_tuple\n    \n    \n    \ndef mult_divisors(num, p):\n    '''\n    Write a function which returns the mult and divisors of a number.\n    '''\n    mult_divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            if num // i == p:\n                mult_divisors.append(num // i)\n            else:\n                mult_divisors.append(num // i)\n                mult_divisors.append(num // p)\n    return mult_divisors\n    \n    \n    \ndef mult_divisors_list(num, p):\n    '''\n    Write a function which returns the mult and divisors of a number.\n    '''\n    mult_divisors_list = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            if num // i == p:\n                mult_divisors_list.append(num // i)\n            else:\n                mult_divisors_list.append(num // i)\n                mult_divisors_list.append(num // p)\n    return mult_divisors_list\n    \n    \n    \ndef modular_inverse(num, p):\n    '''\n    Write a function which returns the modular inverse of a number.\n    '''\n    modulo_inverse = 0\n    i = 0\n    while True:\n        if num % p == 0:\n            modulo_inverse = p\n            break\n        i += 1\n        num //= p\n        if i == 1000:\n            print(\"There is no modular inverse.\")\n            return -1\n    return modulo_inverse\n    \n    \n    \ndef is_perfect_number(num):\n    '''\n    Write a function which returns True if a numbe"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = 0\n    for element in test_tup1:\n        mod += element\n    for element in test_tup2:\n        mod += element\n    return (mod)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError(\"tuples have different lengths\")\n    elif test_tup1[0] > test_tup2[0]:\n        test_tup1 = tuple(test_tup1)\n        test_tup2 = tuple(test_tup2)\n    else:\n        test_tup2 = tuple(test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1], test_tup1[2] % test_tup2[2]\n    #return f\"{test_tup1[0]} {test_tup1[1]} {test_tup1[2]} % {test_tup2[0]} {test_tup2[1]} {test_tup2[2]} = {test_tup1[0] % test_tup2[0]} {test_tup1[1] % test_tup2[1]} {test_tup1[2] % test_tup2[2]}\"\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    a = len(test_tup1)\n    b = len(test_tup2)\n    for i in range(a):\n        for j in range(b):\n            if test_tup1[i] % test_tup2[j] == 0:\n                return test_tup1[i]\n    return 0\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # tup1 = ('z', 'x', 'y', 'z')\n    # tup2 = ('z', 'x', 'y', 'z')\n    # Output: ('z', 'x', 'y', 'z')\n    # try:\n    #     new_tup1 = tuple(map(lambda a, b: a % b, tup1, tup2))\n    #     return new_tup1\n    # except TypeError:\n    #     print('Please enter 2 tuples of the same length.')\n    # except ZeroDivisionError:\n    #     print('Can\\'t divide by zero!')\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo1 = 0\n    modulo2 = 0\n    for i in range(len(test_tup1)):\n        modulo1 += test_tup1[i] * test_tup2[i]\n    for i in range(len(test_tup2)):\n        modulo2 += test_tup1[i] * test_tup2[i]\n    modulo = modulo1 % modulo2\n    return modulo\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in steps:\n        if i == d:\n            count += 1\n        else:\n            if i == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #if matrix is not a valid input \n    if not is_valid_matrix(steps, d): return 0 \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    for i in range(steps):\n        if (i == 0) or (i == 1) or (i == steps-2):\n            return i\n    return 1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # time complexity is O(d)\n    # space complexity is O(d)\n    import itertools\n    def min_Jumps(steps,d):\n        cnt = 0\n        for i in range(steps):\n            for j in range(d):\n                if i + j == d:\n                    cnt += 1\n                if i + j == d + 1:\n                    cnt += 1\n                if i + j > d + 1:\n                    cnt += 1\n        return cnt\n    return min_Jumps(steps,d)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return min(steps[-1] - d, 0)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return True\n    elif steps == 1:\n        return (d[0][0] == d[0][1] and d[0][0] == d[1][0])\n    elif steps == 2:\n        return ((d[0][0] == d[0][1] and d[1][0] == d[0][0] and d[1][1] == d[0][1]) or (d[0][0] == d[0][1] and d[0][1] == d[1][0] and d[1][0] == d[1][1]))\n    elif steps == 3:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[1][0] == d[0][0] and d[1][1] == d[0][1] and d[1][2] == d[0][2])\n    elif steps == 4:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[1][0] == d[0][0] and d[1][1] == d[0][1] and d[1][2] == d[0][2])\n    elif steps == 5:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[0][2] == d[0][2] and d[1][0] == d[0][0] and d[1][1] == d[0][1] and d[1][2] == d[0][2])\n    elif steps == 6:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[1][0] and d[1][1] == d[0][0] and d[1][2] == d[0][1])\n    elif steps == 7:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[1][0] and d[1][1] == d[0][0] and d[1][2] == d[0][1])\n    elif steps == 8:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[1][0] and d[1][1] == d[0][0])\n    elif steps == 9:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[1][0] and d[1][1] == d[0][0])\n    elif steps == 10:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[1][0])\n    elif steps == 11:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[1][0])\n    elif steps == 12:\n        return (d[0][0] == d[0][1] and d[0][1] == d[0][2] and d[0][2] == d[0][2] and d[0][2] == d[0][2])\n    else:\n        return False\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    \n    # This dictionary is used to store the initial values of steps.\n    initial_steps = {}\n    \n    # This dictionary is used to store the values of steps.\n    steps_n = {}\n    \n    # This dictionary is used to store the values of d.\n    d_n = {}\n    \n    # This variable is used to store the number of jumps needed.\n    jumps = 0\n    \n    # This variable is used to store the initial values of d.\n    d_initial = 0\n    \n    # This loop is used to write the steps and the steps_n dictionaries.\n    for step in steps:\n        if (step[0]!= d and step[1]!= 0):\n            initial_steps[step] = steps.count(step)\n            steps_n[step] = steps.count(step)\n            d_n[d] = steps_n.count(step)\n            d_initial = d\n    \n    # This loop is used to write the steps and the d_n dictionaries.\n    for step in steps:\n        if (step[0]!= d and step[1]!= 0):\n            steps_n[step] = steps.count(step)\n            d_n[d] = steps_n.count(step)\n            d_initial = d\n    \n    # This loop is used to find the minimum value of steps and the d_n dictionaries.\n    for step in steps:\n        if (step[0]!= d and step[1]!= 0):\n            if (steps_n[step] == initial_steps[step]):\n                steps_n[step] = 0\n                d_n[d] = 0\n                jumps += 1\n            elif (steps_n[step]!= initial_steps[step]):\n                steps_n[step] = 0\n                d_n[d] = 0\n                jumps += 1\n            elif (d_initial == d):\n                d_n[d] = 0\n                jumps += 1\n            else:\n                jumps += 1\n    \n    # This loop is used to find the minimum value of d_n and the jumps.\n    for d in d_n:\n        if (d_n[d] == 0):\n            jumps += 1\n    \n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    if (d == 0 or d == 1):\n        return count\n    steps_from_origin = 0\n    if d == 0:\n        for row in range(0, steps):\n            if (row + 2) % 2 == 0:\n                if (steps_from_origin % 2 == 0):\n                    count = count + 1\n                else:\n                    count = count + 1\n                steps_from_origin += 1\n            elif d == 1:\n                if (steps_from_origin % 2 == 1):\n                    count = count + 1\n                else:\n                    count = count + 1\n                steps_from_origin += 2\n    elif d == 1:\n        for row in range(0, steps):\n            if (row + 1) % 2 == 0:\n                if (steps_from_origin % 2 == 0):\n                    count = count + 1\n                else:\n                    count = count + 1\n                steps_from_origin += 1\n            elif d == 0:\n                if (steps_from_origin % 2 == 1):\n                    count = count + 1\n                else:\n                    count = count + 1\n                steps_from_origin += 2\n    else:\n        for row in range(0, steps):\n            if (row + 2) % 2 == 1:\n                if (steps_from_origin % 2 == 1):\n                    count = count + 1\n                else:\n                    count = count + 1\n                steps_from_origin += 1\n            elif d == 0:\n                if (steps_from_origin % 2 == 0):\n                    count = count + 1\n                else:\n                    count = count + 1\n                steps_from_origin += 2\n            elif d == 1:\n                if (steps_from_origin % 2 == 1):\n                    count = count + 1\n                else:\n                    count = count + 1\n                steps_from_origin += 2\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def check(d, x):\n        x = abs(x)\n        sum = 0\n        if d < 0:\n            for j in range(x):\n                if j < d:\n                    sum += 1\n        else:\n            for j in range(x):\n                if j < d:\n                    sum += 1\n        return sum\n    # Return the minimum number of jumps needed for the given length\n    def min_Jumps(steps, d):\n        for j in range(d):\n            if d < 0:\n                for i in range(0, steps):\n                    if j == 0:\n                        return i + 1\n                    else:\n                        i += 1\n            else:\n                for i in range(0, steps):\n                    if j == 0:\n                        return i + 1\n                    else:\n                        i += 1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(steps+1):\n        if i == 0:\n            pass\n        elif d == (i,0):\n            pass\n        else:\n            jumps += 1\n            d = (d[0]-i,d[1])\n    return jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            nums1[i] = -nums1[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Base case, if both list is empty\n    if len(nums1) == 0 or len(nums2) == 0:\n        return None\n    # return the two sorted list\n    return sorted(nums1+nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    d = {}\n    for num in nums1:\n        if num in d:\n            d[num]+=1\n        else:\n            d[num]=1\n    for num in nums2:\n        if num not in d:\n            d[num]=1\n    for key in d:\n        if d[key]==1:\n            d[key] = 0\n    return d\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums2) < len(nums1):\n        return print('You cannot divide the elements of two lists')\n    else:\n        for i in range(len(nums2)):\n            if nums1[i] / nums2[i] < 0.7:\n                nums1[i] *= -1\n                nums2[i] = nums2[i] * -1\n        return nums1,nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        div = nums1[0]/nums2[0]\n    except ZeroDivisionError:\n        print(f'Cannot divide by zero. {nums1} and {nums2}')\n    except TypeError:\n        print(f'Can not divide {nums1} with type {type(nums1[0])}')\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = [0]*len(nums1)\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                res[count] = nums1[i]\n                count += 1\n            else:\n                res[count] = -1\n    return res\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list1 = []\n    for i in range(len(nums1)):\n        list1.append(nums1[i])\n    list2 = []\n    for i in range(len(nums2)):\n        list2.append(nums2[i])\n    return list1,list2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num for num in nums1 if num in nums2]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        return nums1,nums2\n    else:\n        return nums2,nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # create a new list with the 2 arrays\n    new_list= []\n    for i in range(len(nums1)):\n        new_list.append([])\n        for j in range(len(nums2)):\n            new_list[i].append(nums1[i][j]/nums2[i][j])\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    temp = ''\n    count = 0\n    for x in range(len(test_str)):\n        if test_str[x].isdigit():\n            temp += test_str[x]\n            count += 1\n            if count == 3:\n                result += temp\n                temp = ''\n                count = 0\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        elif i =='':\n            num_list.append(' ')\n        elif i == '+':\n            num_list.append('+')\n        elif i == '-':\n            num_list.append('-')\n        elif i == '=':\n            num_list.append('=')\n    return ''.join(num_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in test_str:\n        if i.isdigit():\n            test_str = test_str[0:len(test_str)-1] + i\n        elif not i.isdigit():\n            test_str = test_str + i\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in test_str:\n        if i.isdigit():\n            new_str += i\n        elif i in ['+', '-']:\n            new_str += i\n        else:\n            new_str += i\n            new_str +=''\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #Just use a variable to store the index of the numbers that need to be moved\n    numbers_to_move = []\n    #Create a variable to store the string with the numbers that are going to be moved\n    moved_string = ''\n    for i in range(len(test_str)):\n        if test_str[i] == '0' or test_str[i] == '1' or test_str[i] == '2':\n            if test_str[i] == '0':\n                numbers_to_move.append(0)\n            elif test_str[i] == '1':\n                numbers_to_move.append(1)\n            elif test_str[i] == '2':\n                numbers_to_move.append(2)\n        elif test_str[i] == '3' or test_str[i] == '4' or test_str[i] == '5':\n            if test_str[i] == '3':\n                numbers_to_move.append(3)\n            elif test_str[i] == '4':\n                numbers_to_move.append(4)\n            elif test_str[i] == '5':\n                numbers_to_move.append(5)\n        elif test_str[i] == '6' or test_str[i] == '7' or test_str[i] == '8':\n            if test_str[i] == '6':\n                numbers_to_move.append(6)\n            elif test_str[i] == '7':\n                numbers_to_move.append(7)\n            elif test_str[i] == '8':\n                numbers_to_move.append(8)\n        elif test_str[i] == '9' or test_str[i] == '.':\n            if test_str[i] == '9':\n                numbers_to_move.append(9)\n        elif test_str[i] =='':\n            if test_str[i] =='':\n                numbers_to_move.append(10)\n        moved_string = moved_string + str(numbers_to_move[i])\n    return moved_string\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = str(test_str)\n    test_str = test_str.split(',')\n    new_string = ''\n    for i in test_str:\n        i = str(i)\n        i = i.split(' ')\n        for j in i:\n            j = str(j)\n            j = j.split('.')\n            if len(j) > 1:\n                j = j[0]\n                j = j.split('.')\n                for k in j:\n                    k = str(k)\n                    k = k.split('.')\n                    if len(k) > 1:\n                        k = k[0]\n                        k = k.split('.')\n                        for l in k:\n                            l = str(l)\n                            l = l.split('.')\n                            if len(l) > 1:\n                                l = l[0]\n                                l = l.split('.')\n                                if int(l) > 0:\n                                    k = l\n                                else:\n                                    k = k\n                        j = k\n            new_string += j\n    return new_string\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split(' ')\n    i = 0\n    j = 0\n    for x in range(len(test_str)):\n        if test_str[x] == '*':\n            while j < len(test_str):\n                if test_str[j] == '*':\n                    j += 1\n                else:\n                    break\n        else:\n            if test_str[j] == '*':\n                j += 1\n            else:\n                continue\n        test_str[i] = test_str[j]\n        test_str[j] = '*'\n        i += 1\n        j += 1\n    return''.join(test_str)\n    # Write your code here\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Your code here\n    num_list = list(test_str)\n    num_list.reverse()\n    num_str = \"\".join(num_list)\n    return num_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    num_list = list(test_str)\n    num_list.sort()\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == '0':\n            num_list[i] = '9'\n            result += '0'\n        elif num_list[i] == '1':\n            num_list[i] = '1'\n            result += '1'\n        elif num_list[i] == '2':\n            num_list[i] = '2'\n            result += '2'\n        elif num_list[i] == '3':\n            num_list[i] = '3'\n            result += '3'\n        elif num_list[i] == '4':\n            num_list[i] = '4'\n            result += '4'\n        elif num_list[i] == '5':\n            num_list[i] = '5'\n            result += '5'\n        elif num_list[i] == '6':\n            num_list[i] = '6'\n            result += '6'\n        elif num_list[i] == '7':\n            num_list[i] = '7'\n            result += '7'\n        elif num_list[i] == '8':\n            num_list[i] = '8'\n            result += '8'\n        elif num_list[i] == '9':\n            num_list[i] = '9'\n            result += '9'\n        else:\n            result += num_list[i]\n            i+=1\n        if i == len(num_list):\n            result += '0'\n            i = 0\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # YOUR CODE HERE\n    new_str=''\n    for i in range(0,len(test_str)):\n        if test_str[i]=='0':\n            new_str+=test_str[i]\n            continue\n        new_str+=test_str[i]\n    return new_str\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = [1]*len(a)\n    size = 1\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] % a[j] == 0:\n                if subsets[j] < subsets[i]:\n                    subsets[i] = subsets[j]\n                    size = max(size, subsets[i])\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Your code here\n    n=len(a)\n    max_row=0\n    max_col=0\n    for i in range(n):\n        for j in range(n):\n            if a[i]%a[j]==0:\n                if max_row<i:\n                    max_row=i\n                    max_col=j\n                elif i<max_row:\n                    max_row=i\n    print(a[max_row],a[max_col])\n    \n    return max_row,max_col\n    \nprint(largest_subset([3, 9, 5, 2, 7]))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = [[]]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0]*(n+1) for i in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if a[i-1] % j == 0:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + dp[i][j-1])\n    return dp[n][n]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    maximum = 0\n    subset = []\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    largest = -1\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if a[i] % a[j] == 0:\n                if a[i] > largest:\n                    largest = a[i]\n                if a[j] > largest:\n                    largest = a[j]\n    return largest\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    i = 0\n    j = 1\n    found = 0\n    temp = 0\n    while j <= n:\n        if a[i] % j == 0:\n            temp += 1\n            i += 1\n        else:\n            found += 1\n            j += 1\n        if found == temp:\n            break\n    if j > n:\n        return 0\n    else:\n        return found\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create the set of all the elements\n    set_a = set(a)\n    # create a dictionary of the elements as key and their corresponding indexes as value\n    dict_elements = {i: a.index(i) for i in set_a}\n    # initialize the length of the largest subset\n    largest_size = 0\n    # iterate through all the elements in a\n    for i in set_a:\n        # if the element is not divisible by a and the remaining number is divisible,\n        # add the element to the largest subset\n        if dict_elements[i] % 2!= 0 and dict_elements[i] // 2 in dict_elements:\n            largest_size = max(largest_size, dict_elements[i] // 2)\n    return largest_size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # 1. Initialize an empty list\n    subset = []\n    # 2. Iterate over a list\n    for i in range(len(a)):\n        # 3. Check if the sum of the elements in subset is divisible by 2\n        if sum(a[:i] + a[i + 1:]) % 2 == 1:\n            # 4. Append element to subset\n            subset.append(a[:i] + a[i + 1:])\n    # 5. Return the largest subset size\n    return len(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    lst = []\n    # initialise empty list\n    for i in range(0, len(a)):\n        lst.append(a[i])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted1 = sorted(arr1)\n    sorted2 = sorted(arr2)\n    if n == 1:\n        return sorted1[0]\n    elif n == 2:\n        return (sorted2[0] + sorted2[1]) / 2.0\n    else:\n        mid = n // 2\n        if n % 2 == 1:\n            mid = mid + 1\n        return (sorted1[mid] + sorted2[mid]) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        arr1 = arr1[int((n-1)/2):]\n        arr2 = arr2[:int((n-1)/2)]\n        return get_median(arr1, arr2, n)\n    else:\n        arr1 = arr1[int((n-1)/2):]\n        arr2 = arr2[:int((n-1)/2)]\n        return (get_median(arr1, arr2, n-1) + get_median(arr1, arr2, n-2))/2\n        \ndef get_median_of_two_sorted_arrays(arr1, arr2):\n    if len(arr1)!= len(arr2):\n        return None\n    if len(arr1) == 1:\n        return arr1[0]\n    if len(arr1) == 2:\n        return (get_median(arr1[0], arr2[0], len(arr1)) + get_median(arr1[1], arr2[1], len(arr1))) / 2\n    \n    mid = len(arr1) // 2\n    low = arr1[:mid]\n    high = arr1[mid:]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    assert len(arr1) == len(arr2), 'Arrays must be of same size'\n    if len(arr1) > 0:\n        low = 0\n        high = len(arr1) - 1\n        while low < high:\n            mid = low + ((high - low) >> 1)\n            if arr1[mid] < arr2[mid]:\n                low = mid + 1\n            else:\n                high = mid\n        return arr1[low]\n    else:\n        return -1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        arr1_sorted = sorted(arr1)\n        arr2_sorted = sorted(arr2)\n        return (arr1_sorted[n // 2] + arr2_sorted[n // 2]) / 2\n    else:\n        arr1_sorted = sorted(arr1)\n        arr2_sorted = sorted(arr2)\n        return arr1_sorted[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    \n    if n == 1:\n        return arr1[0]\n    \n    if len(arr1) >= 2:\n        if arr1[0] > arr1[1]:\n            return get_median(arr1[1:], arr2, n-1)\n        elif arr1[0] < arr1[1]:\n            return get_median(arr1, arr2[1:], n-1)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==1:\n        if len(arr1)==len(arr2):\n            return arr1[0]\n        return arr2[0]\n    elif n%2==0:\n        return (arr2[len(arr2)//2] + arr1[len(arr1)//2])/2\n    else:\n        return (arr1[len(arr1)//2] + arr2[len(arr2)//2])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    #sort the two lists\n    arr1.sort()\n    arr2.sort()\n    \n    #find the middle of both lists\n    midpoint = int(len(arr1)/2)\n    if len(arr1) % 2 == 0:\n        median = (arr1[midpoint] + arr2[midpoint])/2\n    else:\n        median = arr1[midpoint]\n        \n    #return the median\n    return median\n    \n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = n-1\n    while i < j:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j -= 1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    else:\n        m = (len(arr1) + len(arr2)) // 2\n        return get_median(arr1[:m], arr2[:m], n - 1) + get_median(arr1[m:], arr2[m:], n - 1)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power_2(x):\n        return x*x\n    if n==1:\n        return power_2(nums[0])\n    elif n==2:\n        return power_2(nums[0]+nums[1])\n    elif n==3:\n        return power_2(nums[0]+nums[1]+nums[2])\n    else:\n        nth_nums = [power_2(x) for x in nums[:n]]\n        return sum(nth_nums)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nth_power = [x**n for x in nums]\n    return nth_power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums or n<=0:\n        return []\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    if n == 1:\n        return nums\n    elif n == 2:\n        return [1,1]\n    elif n == 3:\n        return [1,1,1]\n    elif n > 3:\n        temp = nth_nums(nums,n-1)\n        temp.extend([1,1])\n        return temp\n    \n    \ndef list_nth(n,k):\n    '''\n    Write a function that takes an integer and a list and returns the nth to the power of each item in the list.\n    '''\n    if k == 1:\n        return [1]\n    elif k == 2:\n        return [1,1]\n    elif k == 3:\n        return [1,1,1]\n    elif k > 2:\n        temp = list_nth(k-1,k)\n        temp.extend([1,1])\n        return temp\n    \n    \ndef prime_factors(n):\n    '''\n    Find the prime factors of a number n\n    '''\n    \n    if n == 1:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3,n,2):\n            if n % i == 0:\n                return 2\n    return 1\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n*num for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    output = []\n    \n    for n in range(len(nums)):\n        output.append(pow(nums[n],n))\n    \n    return output\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums)<=n:\n        return nums\n    else:\n        return nums[n-1]*nth_nums(nums[n:],n)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # if n < 0:\n    #     return\n    #     return [],n\n    \n    # return nth_nums(nums,n-1) + [n]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def pow(num):\n        if num==0:\n            return 0\n        else:\n            return num**pow(num-1)\n    return [pow(num) for num in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) > 0:\n        return string.upper()\n    else:\n        return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string\n    \ndef is_number(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    number = int(string)\n    if number % 1 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string_upper = string.upper()\n    return string_upper"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Your code here\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string) == str:\n        if string.upper() == string:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    old = newList[0]\n    new = newList[-1]\n    newList[0] = old\n    newList[-1] = new\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return \"List is empty\"\n    else:\n        length = len(newList)\n        if length == 0:\n            return \"List is empty\"\n        else:\n            print(\"First element = %d and Last element = %d\" %(newList[0],newList[length-1]))\n            temp = newList[0]\n            newList[0] = newList[length-1]\n            newList[length-1] = temp\n            return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = newList[1:] + newList[:1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return print(\"List is empty\")\n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    new_list = newList[1:] + newList[:1]\n    new_list.append(newList[0])\n    new_list.append(newList[-1])\n    \n    return new_list\n    \ndef print_List(new_list):\n    '''\n    Write a python function to print the given list.\n    '''\n    \n    for item in new_list:\n        print(item, end ='')\n    print()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1:\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.insert(0, newList.pop())\n    newList.append(newList.pop())\n    print(newList)\n    \nswap_List([1, 2, 3])\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #Funtion to interchange the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    result = []\n    for i in range(len(newList)):\n        result.append(newList[i])\n        newList[i] = result.pop()\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList.pop()\n    newList.pop()\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define triangle as a tuple\n    triangle = (r * (r - 1) / 2, r * (r + 1) / 2)\n    # print(triangle)\n    area = (triangle[0] ** 2 + triangle[1] ** 2) ** 0.5\n    # print(area)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Input \n    # r : The radius of the triangle.\n    # Output\n    # area : Area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    # Note\n    # The area is only defined on two lines of a semicircle, so you need to draw only one line of a semicircle.\n    \n    from math import sqrt\n    a = sqrt((r*r)+(r*r))\n    return a\n    \n    \n    \ndef main() :\n    '''\n    The only function to be implemented here is triangle_area(). It takes the radius as input parameter and print the area of the largest triangle that can be inscribed in a semicircle that can be inscribed in a square that has a given height.\n    '''\n    \n    r = float(input(\"Enter the radius of the triangle: \"))\n    print(\"The area of the largest triangle that can be inscribed in a semicircle that can be inscribed in a square that has a given height: \")\n    print(triangle_area(r))\n    \n    \n    \nif __name__ == \"__main__\" :\n    main("
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1,r+1) :\n        for j in range(1,i+1) :\n            area += 4*j*(j+1)\n    area = area / 3\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Get the diameter of the triangle\n    diameter = math.sqrt(r**2 - (r-1)**2)\n    #Get the semi-circumference\n    S = diameter * math.pi / 2\n    #Get the area of the triangle\n    return (4 * math.pi * r**2) * (math.pi * S**2) / 3\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #a = int(input(\"Enter the radius : \"))\n    a = r\n    if a > 0 :\n        return (math.sqrt(1-((a**2)+(4*a*(3*r*r*a)))))\n    else :\n        print(\"The radius is too small to solve the problem\")"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return r**2*3.14/2\n    \n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (2*(r**2))\n    b = (4*(r**2))\n    c = (3*(r**2))\n    # a + b + c = 1000\n    if (a+b+c == 1000):\n        return a+b+c\n    else:\n        return \"No triangle can be inscribed\"\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # your code goes here\n    return\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def is_square(a) :\n        '''\n        A python function that takes in a number.\n        If the number is the square of a (square of a^2, its square is a^2), returns true.\n        If the number is not a square, returns False.\n        '''\n        square_of_a = a**2\n        if (square_of_a == int(square_of_a)):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    \n    #input - Radius\n    r = float(input(\"Radius of the triangle? \"))\n    \n    #input - Radius\n    if r > 0 :\n        \n        # calculate semi-circle (radius)\n        sqrt1 = (r**2)\n        sqrt2 = (r**2) - (3.14)**2\n        \n        # calculate semi-circle (area)\n        s = (4/3)*(sqrt1 + sqrt2)\n        \n        # output - Area\n        print(f\"The area of the triangle with radius {r} is {s}.\")\n    else:\n        \n        print(\"Incorrect inputs.\")\n    \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    \n    for i in range(start,end):\n        if array[i]!= array[end-1] and array[i]!=None:\n            return array[i]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start == end:\n        return array[end]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    pivot = array[start]\n    low = start\n    high = end\n    while low<high:\n        while low<high and array[low] <= pivot:\n            low += 1\n        while low<high and array[high] >= pivot:\n            high -= 1\n        if low<high:\n            array[low], array[high] = array[high], array[low]\n    array[low], array[high] = array[high], array[low]\n    return find_First_Missing(array,start,high)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start < end:\n        pivot = array[start]\n        low = start + 1\n        high = end\n        # m = array[start]\n        # n = array[end]\n        while low < high:\n            while low < high and array[low] > pivot:\n                low += 1\n            while low < high and array[high] > pivot:\n                high -= 1\n            if low < high:\n                array[low], array[high] = array[high], array[low]\n                low += 1\n                high -= 1\n        if low < end:\n            array[start], array[low] = array[low], array[start]\n        return low\n    else:\n        return None\n    \n    \n    "
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start<0:\n        start=0\n    if end>=len(array):\n        return None\n    if start==end:\n        return array[start]\n    else:\n        mid=(start+end)//2\n        if array[mid]==None:\n            return find_First_Missing(array,start,mid)\n        elif array[mid]<array[start]:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n        \ndef find_Middle_Missing(array,start,end):\n    '''\n    Write a python function to find the midpoint of the list.\n    '''\n    if start>=end:\n        return None\n    if start==end:\n        return array[start]\n    mid=(start+end)//2\n    if array[mid]==None:\n        return find_Middle_Missing(array,start,mid)\n    elif array[mid]<array[start]:\n        return find_Middle_Missing(array,mid+1,end)\n    else:\n        return find_Middle_Missing(array,start,mid)\ndef find_Last_Missing(array,start,end):\n    '''\n    Write a python function to find the last missing number from a sorted list of natural numbers.\n    '''\n    if start>=end:\n        return None\n    if start==end:\n        return array[start]\n    mid=(start+end)//2\n    if array[mid]==None:\n        return find_Last_Missing(array,start,mid)\n    elif array[mid]<array[start]:\n        return find_Last_Missing(array,mid+1,end)\n    else:\n        return find_Last_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end is None):\n        end = len(array)\n    \n    if(end - start < 2):\n        return None\n    \n    if(start == end):\n        return start\n    \n    mid = (start + end) // 2\n    \n    if(array[mid] == mid):\n        return mid\n    elif(array[mid] > mid):\n        return find_First_Missing(array,start=start,end=mid-1)\n    else:\n        return find_First_Missing(array,start=mid+1,end=end)\n    \ndef find_Second_Missing(array):\n    '''\n    Write a python function to find the second smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 1) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Second_Missing(array[:mid+1])\n        else:\n            return find_Second_Missing(array[mid+1:])\n        \ndef find_Third_Missing(array):\n    '''\n    Write a python function to find the third smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 2) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Third_Missing(array[:mid+1])\n        else:\n            return find_Third_Missing(array[mid+1:])\n    \ndef find_Fourth_Missing(array):\n    '''\n    Write a python function to find the fourth smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 3) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Fourth_Missing(array[:mid+1])\n        else:\n            return find_Fourth_Missing(array[mid+1:])\n        \ndef find_Fifth_Missing(array):\n    '''\n    Write a python function to find the fifth smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 4) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Fifth_Missing(array[:mid+1])\n        else:\n            return find_Fifth_Missing(array[mid+1:])\n    \ndef find_Sixth_Missing(array):\n    '''\n    Write a python function to find the sixth smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 5) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Sixth_Missing(array[:mid+1])\n        else:\n            return find_Sixth_Missing(array[mid+1:])\n        \ndef find_Seventh_Missing(array):\n    '''\n    Write a python function to find the seventh smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 6) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Seventh_Missing(array[:mid+1])\n        else:\n            return find_Seventh_Missing(array[mid+1:])\n    \ndef find_Eighth_Missing(array):\n    '''\n    Write a python function to find the eighth smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 7) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Eighth_Missing(array[:mid+1])\n        else:\n            return find_Eighth_Missing(array[mid+1:])\n        \ndef find_Ninth_Missing(array):\n    '''\n    Write a python function to find the ninth smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 10) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Ninth_Missing(array[:mid+1])\n        else:\n            return find_Ninth_Missing(array[mid+1:])\n        \ndef find_Tenth_Missing(array):\n    '''\n    Write a python function to find the tenth smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 11) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Tenth_Missing(array[:mid+1])\n        else:\n            return find_Tenth_Missing(array[mid+1:])\n        \ndef find_First_Missing_1(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 1) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_First_Missing_1(array[:mid+1])\n        else:\n            return find_First_Missing_1(array[mid+1:])\n        \ndef find_Second_Missing_1(array):\n    '''\n    Write a python function to find the second smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 2) // 2\n        \n        if(array[mid] == mid):\n            return mid\n        elif(array[mid] > mid):\n            return find_Second_Missing_1(array[:mid+1])\n        else:\n            return find_Second_Missing_1(array[mid+1:])\n        \ndef find_Third_Missing_1(array):\n    '''\n    Write a python function to find the third smallest missing number from a sorted list of natural numbers.\n    '''\n    if(len(array) == 0):\n        return None\n    if(len(array) == 1):\n        return array[0]\n    else:\n        mid = (len(array) - 3) // 2\n        \n        if(array[mid] == mid):\n            return mid\n    "
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start == end:\n        return None\n    elif start > end:\n        return None\n    elif array[start] == array[end]:\n        return end\n    else:\n        mid = (start + end) // 2\n        if array[mid] == array[mid + 1]:\n            return mid\n        else:\n            return find_First_Missing(array,start,mid-1)\n        \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end == None:\n        end = len(array) - 1\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \ndef split(string):\n    '''\n    Write a function to split a string into a list of strings.\n    '''\n    return string.split(' ')\n    \ndef reverse_dict(dictionary):\n    '''\n    Write a function to reverse the order of the dictionary.\n    '''\n    return {value: key for (key, value) in dictionary.items()}\n    \ndef is_pangram(string):\n    '''\n    Write a function to check whether a string is a pangram.\n    '''\n    return \"\".join(sorted(string)).lower() == \"pangram\"\n    \ndef remove_punctuation(string):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return ''.join(x for x in string if x not in punctuations)\n    \ndef normalize(string):\n    '''\n    Write a function to normalize unicode characters in a string.\n    '''\n    return ''.join(c for c in string if c in normal_punctuation).lower()\n    \ndef is_valid_ip(string):\n    '''\n    Write a function that checks whether a string is a valid IPv4 or IPv6 address.\n    '''\n    return re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', string)!= None\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = \"\"\n    for i in string:\n        if i!='':\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    i = 0\n    while i < len(string):\n        if string[i] =='':\n            new_string += '%20'\n        else:\n            new_string += string[i]\n        i += 1\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # BEGIN SOLUTION\n    return string.replace(' ', '%20')\n    # END SOLUTION\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if (i%2==0):\n            even.append(i)\n    return even\n    #return [even for even in list if int(even)%2==0]\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Solution - Python 3.6+\n    # import operator\n    # def is_even(x):\n    #     return x % 2 == 0\n    # operator.methodcaller('is_even', list)\n    # List = [1, 2, 3, 4, 5, 6]\n    # print(operator.methodcaller('is_even', List))\n    # Solution - Python 2.7+\n    # from operator import methodcaller\n    # def is_even(x):\n    #     return (x % 2 == 0)\n    # methodcaller('is_even', list)\n    # Solution - Python 2.4+\n    # import operator\n    # def is_even(x):\n    #     return operator.methodcaller('is_even', x)\n    # print(is_even(4))\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    odd=[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return even,odd\n    \ndef main():\n    print('Divide and Conquer')\n    print('Enter the length of the list:')\n    n=int(input())\n    print('Enter elements of the list')\n    list=[int(x) for x in input().split()]\n    even,odd=Split(list)\n    print('Even numbers:',end='')\n    for i in even:\n        print(i,end=',')\n    print('\\nOdd numbers:',end='')\n    for i in odd:\n        print(i,end=',')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    even_sum = 0\n    for number in list: \n        if number%2==0:\n            even_sum+=number\n            even_list.append(number)\n    return even_list, even_sum\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    odds = []\n    for number in list:\n        if number % 2 == 0:\n            evens.append(number)\n        else:\n            odds.append(number)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    num_list = [] \n    for num in list: \n        if num % 2 == 0: \n            num_list.append(num) \n    return num_list \n    \ndef Reverse(list): \n    '''\n    Write a python function to reverse the numbers in a list.\n    '''\n    for i in range(len(list)-1, -1, -1): \n        list[i] = list[i]\n    return list \n    \ndef IsPalindrome(list): \n    '''\n    Write a python function to check if a given list is a palindrome.\n    '''\n    rev_list = Reverse(list) \n    for i in range(len(list)): \n        if list[i]!= rev_list[i]: \n            return False\n    return True \n    \ndef RemoveDuplicates(list): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    for i in range(len(list)): \n        if list[i] not in list[i + 1:]: \n            list[i] = list[i] \n    return list \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele)==2: \n        sub.append(ele)\n    else: \n        adjac(ele[1], sub)\n        adjac(ele[0], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    if sub == []:\n        sub.append(ele)\n    else:\n        for i in range(len(sub) - 1):\n            adjac(sub[i][0], sub[i + 1])\n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (0,0):\n        sub = []\n    if ele == (0,-1):\n        sub = [(0,1), (0,-1), (0,0)]\n    if ele == (1,0):\n        sub = [(1,1), (1,-1), (1,0)]\n    if ele == (1,-1):\n        sub = [(1,0), (1,1), (1,-1)]\n    if ele == (0,1):\n        sub = [(0,0), (0,1), (1,0)]\n    if ele == (0,-1):\n        sub = [(0,1), (0,-1), (1,0)]\n    if ele == (1,0):\n        sub = [(1,0), (1,1), (1,-1)]\n    if ele == (1,-1):\n        sub = [(1,0), (1,1), (1,-1)]\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == ele[1] == ele[2]:\n        return\n    elif ele[0] == ele[1] == ele[2]:\n        return\n    elif ele[0] == ele[2] == ele[1]:\n        return\n    elif ele[0] == ele[1] == ele[2]:\n        return\n    elif ele[0] == ele[2] == ele[1]:\n        return\n    elif ele[0] == ele[1] == ele[2]:\n        return\n    elif ele[0] == ele[1] == ele[2]:\n        return\n    elif ele[0] == ele[2] == ele[1]:\n        return\n    elif ele[0] == ele[1] == ele[2]:\n        return\n    else:\n        a, b = ele\n        adjac(a, sub)\n        adjac(b, sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub!= []:\n        return sub\n    if ele in sub:\n        return []\n    sub.append(ele)\n    if ele[0] > 0:\n        adjac(ele[0], sub)\n    if ele[1] > 0:\n        adjac(ele[1], sub)\n    if ele[0] < len(maze[0])-1:\n        adjac(ele[0]+1, sub)\n    if ele[1] < len(maze[0])-1:\n        adjac(ele[1]+1, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [ele[1]* ele[0] + ele[0], ele[1]* ele[1] + ele[0] ]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    if x + y + 1 < 9 and x + y + 2 > 0: \n        sub.append((x+1,y+1)) \n        adjac(x+1, sub)\n        sub.append((x+2,y+2)) \n        adjac(x+2, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return None \n    if ele[0] >= len(grid) or ele[1] >= len(grid[0]): \n        return None \n    elif grid[ele[0]][ele[1]]!= 0: \n        return None \n    sub.append(ele) \n    adjac(ele = (ele[0] + 1, ele[1] + 1), sub = sub) \n    adjac(ele = (ele[0] + 1, ele[1] - 1), sub = sub) \n    adjac(ele = (ele[0] - 1, ele[1] + 1), sub = sub) \n    adjac(ele = (ele[0] - 1, ele[1] - 1), sub = sub) \n    return None \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # if the coordinates are negative, the graph is not valid\n    if (ele[0] < 0 or ele[0] > n - 1 or ele[1] < 0 or ele[1] > n - 1):\n        return []\n    # if the coordinate has already been visited, return it\n    if (sub == []):\n        sub = [ele]\n    # if the coordinate is unvisited, return it\n    else:\n        if (ele in sub):\n            return []\n        # if the coordinates have not been visited, extend the coordinates to the left\n        if (ele[0] > 0):\n            sub = sub + [ele] + [ele[0] - 1]\n        # if the coordinates have not been visited, extend the coordinates to the right\n        elif (ele[0] < n - 1):\n            sub = sub + [ele] + [ele[0] + 1]\n        # if the coordinates have already been visited, return it\n        else:\n            return []\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # YOUR CODE HERE\n    \n    #IMPORTANT: you can't simply replace a string with a space\n    #use regular expression to get rid of whitespaces\n    #use re.sub() to remove the spaces\n    \n    return re.sub(r\"\\s+\", \"_\", text)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return text.replace(\" \",\"_\").replace(\"\\n\",\"_\").replace(\"\\t\",\"_\""
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('-', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_string = text.replace(' ', '_').replace('\\n', '_').replace('\\t', '_').replace('\\r', '_')\n    return text_string\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('\\n','_')\n    text = text.replace('\\t','_')\n    text = text.replace('\\r','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('.', '_')\n    text = text.replace(',', '_')\n    text = text.replace('!', '_')\n    text = text.replace('?', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n','_').replace('\\t','_').replace('\\r','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\").replace(\"  \", \"_\").replace(\" \", \"_\").replace(\"_\",\" \")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text=text.replace(' ','_').replace('\\n','').replace('\\t','').replace('\\r','').replace(' ','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ', '_')\n    text = text.replace(' ', '_')\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num!= 0:\n            num_list.remove(num)\n            num_list.append(num)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.insert(i, 0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == []:\n        return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[zero_index] = num_list[i]\n            zero_index += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    # Iterate through list\n    for index, item in enumerate(num_list):\n        \n        # If index is 0\n        if index == 0:\n            \n            # If item is 0\n            if item == 0:\n                \n                # If item is not 0\n                num_list[index] = 0\n                \n                # Append item to the list\n                num_list.append(item)\n                \n            # If item is 0\n            else:\n                \n                # Append the item\n                num_list.append(item)\n                \n        # If index is 1\n        elif index == 1:\n            \n            # Append item to the list\n            num_list.append(item)\n            \n    # Return the list with the item at the end\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i=0\n    while num_list[i]==0:\n        i+=1\n    num_list.reverse()\n    num_list[i]=0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_removed = []\n    for i in range(0,len(num_list)):\n        if num_list[i] == 0:\n            zero_removed.append(i)\n    for i in range(0,len(zero_removed)):\n        del(num_list[zero_removed[i]])\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n) : \n        result += arr[i]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    #For loop to iterate through each pair of numbers\n    for i in range(0,n*2):\n        #If numbers are equal, add them together\n        if arr[i] == arr[i+1] :\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(n):\n        x ^= arr[i]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result=0\n    for i in range(0,n-1): \n        result = (result ^ arr[i]) \n    return result \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    s = 0\n    for i in range(n-1) : \n        s += arr[i]\n    for i in range(n-1) : \n        xor ^= s\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n<=0:\n        return -1\n    if n==1:\n        return 1\n    if n%2==1:\n        return sum_of_xor(arr,n//2)\n    else:\n        return sum_of_xor(arr,(n-1)//2)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] ^ arr[j] == 0 :\n                ans += 2\n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum+=arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if(n<=0): \n        return 0\n    else: \n        return sum(arr[i]^arr[i+1] for i in range(n//2)) \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # Initialize a dictionary to store the number pairs\n    numbers = dict()\n    \n    # Initialize a counter to save the iterations\n    count = 0\n    \n    # Iterate through the list and store the pairs in the dictionary\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            numbers[arr[i] + arr[j]] = 0\n            count += 1\n            #print(numbers)\n    \n    # Iterate through the dictionary and find the keys in the dictionary and assign each key with the sum\n    for i in range(count):\n        for j in range(i+1,count):\n            numbers[arr[i]+arr[j]] += 1\n            #print(numbers)\n    \n    # Return the sum of the values\n    return sum(numbers.values())\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Hint: you can use list(iterable) instead of iterable.\n    heap = []\n    for i in iterable:\n        heapq.heappush(heap, i)\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        raise ValueError('A list cannot be empty.')\n    for i in range(len(iterable)):\n        # \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6700\u5c0f\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6700\u5c0f\u5143\u7d20\u540e\u9762\u6bd4\u8f83\u5927\u7684\u5143\u7d20\u540e\uff0c\u6211\u4eec\u5c31\u628a\u5c0f\u5143\u7d20\u52a0\u5165\u5c3e\u90e8\n        # \u4e3a\u4e86\u5b9e\u73b0\u6bcf\u6b21\u6392\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u8bb0\u5f55\u6bcf\u6b21\u6392\u5e8f\u540e\u7684\u6700\u5c0f\u5143\u7d20\uff0c\u7136\u540e\n        # \u5728\u6b64\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u8c03\u7528\u5230\u5176\u524d\u9762\u7684\u51fd\u6570\u6765\u627e\u5230\u6700\u5c0f\u5143\u7d20\u7684\u4f4d\u7f6e\n        # \u5f53\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u6700\u5c0f\u5143\u7d20\u540e\u9762\u5f00\u59cb\uff0c\u8ba9\u5176\u4f4d\u7f6e\u8ddf\u5176\u524d\u9762\u6700\u5c0f\u5143\u7d20\u76f8\u8fde\n        def min_heapify(arr, i, heap):\n            small = i\n            l = 2 * i + 1\n            r = 2 * i + 2\n            if l < len(arr) and arr[l][0] < arr[small][0]:\n                small = l\n            if r < len(arr) and arr[r][0] < arr[small][0]:\n                small = r\n            if small!= i:\n                arr[i], arr[small] = arr[small], arr[i]\n                min_heapify(arr, small, heap)\n        heap = []\n        for item in iterable:\n            if item < arr[0][0]:\n                heapq.heappush(heap, item)\n            else:\n                min_heapify(arr, 0, heap)\n                heapq.heappush(heap, item)\n        for i in range(len(heap)):\n            arr[0][0] = heapq.heappop(heap)\n    return arr\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size = len(iterable)\n    for i in range(size-1,0,-1):\n        hq.heappush(hq,(hq[i][1],i))\n    for j in range(size-1,0,-1):\n        hq[0],hq[j] = hq[j],hq[0]\n        hq.pop()\n    return hq[0][1]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    s = list(iterable)\n    heapq.heapify(s)\n    for i in range(len(s)-1,0,-1):\n        heapq.heappush(s,heapq.heappop(s)+heapq.heappop(s))\n    return s\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable,key=lambda x: x.info.weight)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in range(0, len(iterable)):\n        heapq.heappush(heap, iterable[i])\n    for i in range(len(heap) - 1, 0, -1):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for i in iterable:\n        heapq.heappush(hq, i)\n    return hq\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    hq.heapify(iterable)\n    for i in range(n):\n        heapq.heappop(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    hq.heapify(h)\n    for i in range(len(iterable)):\n        hq.heappush(h, iterable[i])\n    for i in range(len(h)):\n        hq.heapreplace(h, hq.heappop(h) + hq.heappop(h))\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    for i in range(n//2-1,-1,-1):\n        for j in range(i+1,n):\n            tmp=hq.heappop(iterable)\n            hq.heappushpop(iterable,tmp)\n    return iterable\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    print(\"\\nProfit/Loss is: \",actual_cost*sale_amount)\n    if actual_cost*sale_amount>0:\n        print(\"No profit\")\n    else:\n        print(\"No loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return False\n    if actual_cost <= 0:\n        return False\n    else:\n        if actual_cost - sale_amount < 0:\n            return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost - sale_amount > 0:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_or_loss = 0\n    if actual_cost > sale_amount:\n        profit_or_loss = \"profit\"\n        profit_or_loss_amount = sale_amount - actual_cost\n    else:\n        profit_or_loss = \"loss\"\n        profit_or_loss_amount = actual_cost - sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return True\n    elif actual_cost >= sale_amount:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if sale_amount == 0:\n        print(\"The amount is zero!\")\n        return False\n    else:\n        print(\"The cost of the sale is :\",sale_amount)\n        print(\"The amount of profit is :\",actual_cost-sale_amount)\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    global profit_noloss,total_cost,sell_price_lst\n    if actual_cost < 0:\n        profit_noloss = 0\n        total_cost = 0\n    else:\n        total_cost = total_cost + sale_amount\n        profit_noloss = profit_noloss + sale_amount/actual_cost\n    sell_price_lst = []\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Convert temperature from celsius to fahrenheit\n    t = (t*1.8)+32\n    #Convert wind velocity from km/h to m/s\n    v = (v*3.6)/5\n    #Use the formula for the wind chill index\n    return ((9/5)*v**(1/5) + 32)\ndef v_to_knots(v,t):\n    '''\n    Write a function to convert the wind speed in kilometers per hour to kilometres per minute.\n    '''\n    #Convert wind speed from km/h to m/s\n    v = (v*3.6)/5\n    #Use the formula for the wind chill index\n    return (v*9/5)*math.log(v,1.8)+32\ndef v_to_miles(v,t):\n    '''\n    Write a function to convert the wind speed in kilometers per hour to miles per hour.\n    '''\n    #Convert wind speed from km/h to m/s\n    v = (v*3.6)/5\n    #Use the formula for the wind chill index\n    return (v*9/5)*math.log(v,1.8)+32\ndef delta_t(v,t):\n    '''\n    Write a function to compute the delta time.\n    '''\n    return (v-t)*1.8\ndef delta_t_to_time(delta_t):\n    '''\n    Write a function to convert the delta time to a time delta in seconds.\n    '''\n    return(delta_t*3600)\ndef time_to_delta_t(time):\n    '''\n    Write a function to convert a time to the delta time.\n    '''\n    return(time-time_to_time(time))\ndef time_to_time(time):\n    '''\n    Write a function to convert a time to a time delta in seconds.\n    '''\n    return(time*3600)\ndef wind_speed_knots(v,t,knots):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(v_to_knots(v,t)*knots)\ndef wind_speed_miles(v,t,miles):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(v_to_miles(v,t)*miles)\ndef wind_speed_kilometers(v,t,kilometers):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(v_to_knots(v,t)*kilometers)\ndef wind_speed_km_hour(v,t,h):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(v_to_miles(v,t)*(h*1.8))\ndef wind_speed_km_minute(v,t,m):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(v_to_knots(v,t)*(m*1.8))\ndef wind_speed_km_second(v,t,s):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(v_to_knots(v,t)*(s*1.8))\ndef wind_speed_km_hour_minus_one_minute(v,t,h):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_kilometers(v,t,h*1.8))\ndef wind_speed_km_minute_minus_one_second(v,t,m):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_kilometers(v,t,m*1.8))\ndef wind_speed_km_second_minus_one_second(v,t,s):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_kilometers(v,t,s*1.8))\ndef wind_speed_knots_minus_one_hour(v,t,k):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_knots(v,t,k*1.8))\ndef wind_speed_knots_minute_minus_one_minute(v,t,k):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_knots(v,t,k*1.8))\ndef wind_speed_knots_minute_minus_one_second(v,t,k):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_knots(v,t,k*1.8))\ndef wind_speed_knots_second_minus_one_second(v,t,k):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_knots(v,t,k*1.8))\ndef wind_speed_km_hour_minus_one_hour(v,t,h):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_kilometers(v,t,h*1.8))\ndef wind_speed_km_minute_minus_one_minute(v,t,m):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_kilometers(v,t,m*1.8))\ndef wind_speed_km_second_minus_one_second(v,t,s):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_kilometers(v,t,s*1.8))\ndef wind_speed_km_hour_minus_one_hour(v,t,h):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_kilometers(v,t,h*1.8))\ndef wind_speed_km_minute_minus_one_minute(v,t,m):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_kilometers(v,t,m*1.8))\ndef wind_speed_km_second_minus_one_second(v,t,s):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_kilometers(v,t,s*1.8))\ndef wind_speed_knots_minus_one_hour(v,t,k):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_knots(v,t,k*1.8))\ndef wind_speed_knots_minute_minus_one_minute(v,t,k):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_knots(v,t,k*1.8))\ndef wind_speed_knots_minute_minus_one_second(v,t,k):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_knots(v,t,k*1.8))\ndef wind_speed_knots_second_minus_one_second(v,t,k):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind_speed_knots(v,t,k*1.8))\ndef wind_speed_knots_hour_minus_one_hour(v,t,h):\n    '''\n    Write a function to calculate the wind speed from the knots.\n    '''\n    return(wind"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index\n    # wind chill index = 7.62 + (9.74*T/100) - 0.62 = 0.24\n    # wind chill index = 2.74 + (0.74*T/100) - 0.62 = 0.71\n    return round(7.62 + (9.74 * t / 100) - 0.62, 2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    A=0.76 # approx. 25.0, refer to https://www.netex.org/en/solutions/netex-exercises/applications/wind-chill-index-and-precipitation-index/\n    C=26 # approx. 65.0\n    C_true=11.9 # approx. 100.0\n    T_true=25.0 # appr. 65.0\n    r=0.08 # approx. 0.08\n    r2=0.001 # approx. 0.001\n    \n    w=v*math.pow(r,2)\n    # print(w)\n    if w<=0:\n        return T_true\n    \n    w=((C_true-C)*math.log(w/(C_true-C)))+C\n    # print(w)\n    # print(w)\n    # print(C_true)\n    \n    if w<0:\n        w=C_true+w\n        # print(w)\n        # print(C_true)\n    \n    return round(w,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    h=(9.74+38.62*temp+32.37*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp)\n    w=(35.74-0.0065*temp+0.112*temp*temp*temp*temp)/(1+0.0065*temp+0.112*temp*temp*temp*temp)\n    return round(h,2)\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed in km/h given a wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    h=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    s=(17.67-0.0065*temp+0.112*temp*temp*temp*temp)/(1+0.0065*temp+0.112*temp*temp*temp*temp*temp)\n    return round(h,2)\ndef wind_direction(v,t):\n    '''\n    Write a function to calculate the wind direction given a wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_round(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_round_rad(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the radian value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_round_deg(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_round_deg_rad(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value using the radian value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_round_deg_deg(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value and the deg value using the deg value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_round_deg_rad(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value and the deg value using the radian value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_round_deg_deg(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value and the deg value using the deg value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_round_deg_deg(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value and the deg value using the deg value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_deg(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_deg_rad(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_deg_rad_deg(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value and the deg value using the deg value.\n    '''\n    if(v<=0 or t<=0):\n        return \"No data.\"\n    temp=t/100\n    d=(9.74+38.62*temp+32.37*temp*temp*temp*temp)/(1+0.62*temp+0.101*temp*temp*temp*temp*temp)\n    return round(d,2)\ndef wind_direction_deg_deg(v,t):\n    '''\n    Write a function to calculate the wind direction using the wind direction function in the previous section using the deg value and the deg value using the deg valu"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # v is in km/h and t is in celsius\n    # V=10^(1/4) * (V**2) + 32*V + 32\n    # T=10^(3/4) * (T**2) + 273\n    # w = (V - 32) / (T - 273)\n    # C = (w - 32) * (9/5) + 32\n    # C = (9/5) * w * (T + 273) + 32\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    # C = C + 273\n    "
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # initialize\n    chill = 0.0\n    wind = 0.0\n    temp = 0.0\n    # wind variables\n    wind_var = v**2\n    temp_var = t*9/5 + 32\n    # calculate wind chill\n    chill = (((wind_var/wind_var) + 1)**(1/3))*(9/5)\n    # calculate temperature\n    temp = temp_var*chill\n    return temp\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # initialize\n    speed = 0.0\n    # wind variables\n    wind_var = v**2\n    temp_var = t*9/5 + 32\n    # calculate speed\n    speed = wind_var/wind_var * (10**5)\n    return speed\ndef humidity(q):\n    '''\n    Write a function to calculate the humidity given the wind speed and humidity.\n    '''\n    # initialize\n    q_1 = 0.0\n    q_2 = 0.0\n    q_3 = 0.0\n    q_4 = 0.0\n    # wind variables\n    wind_var = q**2\n    temp_var = q*9/5 + 32\n    # humidity variables\n    q_1 = math.pow(wind_var*0.00621371, 0.1689)\n    q_2 = math.pow(wind_var*0.00826041, 0.0957)\n    q_3 = math.pow(wind_var*0.0382606, 0.03689)\n    q_4 = math.pow(wind_var*0.0019, 0.0028)\n    # calculate humidity\n    q = math.pow(q_1*q_2*q_3*q_4, 1/4)\n    return q\ndef wind_bearing(q,v,t):\n    '''\n    Write a function to calculate the wind bearing given the wind speed in km/h, the wind direction in degrees and a temperature in celsius.\n    '''\n    # initialize\n    rad = 0.0\n    # wind variables\n    wind_var = q**2\n    temp_var = q*9/5 + 32\n    # wind bearing\n    rad = wind_var*0.00621371*math.pi + (math.degrees(math.atan(temp_var/v))) + (t*3)\n    return rad\ndef wind_speed_knots(q,v,t):\n    '''\n    Write a function to calculate the wind speed in knots given the wind speed and humidity.\n    '''\n    # initialize\n    wind_speed_knots = 0.0\n    # wind variables\n    wind_var = q**2\n    temp_var = q*9/5 + 32\n    # wind speed knots\n    wind_speed_knots = wind_var*0.00621371*math.pi*v\n    return wind_speed_knots\ndef wind_bearing_knots(q,v,t):\n    '''\n    Write a function to calculate the wind bearing in knots given the wind speed in knots and a temperature in celsius.\n    '''\n    # initialize\n    wind_bearing_knots = 0.0\n    # wind bearing\n    wind_bearing_knots = wind_bearing(q,v,t) + (t*3)\n    return wind_bearing_knots\ndef wind_speed_knots_knots(q,v,t):\n    '''\n    Write a function to calculate the wind speed in knots, knots and wind bearing in degrees and degrees.\n    '''\n    # initialize\n    wind_speed_knots = 0.0\n    wind_bearing_knots = 0.0\n    # wind speed knots\n    wind_speed_knots = wind_speed_knots + wind_speed_knots_knots(q,v,t)\n    # wind bearing knots\n    wind_bearing_knots = wind_bearing_knots + wind_bearing_knots_knots(q,v,t)\n    return wind_speed_knots,wind_bearing_knots\ndef wind_bearing_knots_knots(q,v,t):\n    '''\n    Write a function to calculate the wind bearing in knots, knots and wind bearing in degrees and degrees.\n    '''\n    # initialize\n    wind_bearing_knots = 0.0\n    # wind bearing knots\n    wind_bearing_knots = wind_bearing(q,v,t) + (t*3)\n    # wind bearing knots\n    wind_bearing_knots = wind_bearing_knots + wind_bearing_knots_knots(q,v,t)\n    return wind_bearing_knots,wind_bearing_knots\ndef wind_bearing(q,v,t):\n    '''\n    Write a function to calculate the wind bearing given the wind speed and humidity.\n    '''\n    # initialize\n    rad = 0.0\n    # wind variables\n    wind_var = q**2\n    temp_var = q*9/5 + 32\n    # wind bearing\n    rad = math.atan(temp_var/v)*180/math.pi + (t*3)\n    return rad\ndef wind_speed_knots_knots_heading(q,v,t):\n    '''\n    Write a function to calculate the wind speed in knots, knots and wind bearing in degrees and degrees.\n    '''\n    # initialize\n    wind_speed_knots = 0.0\n    wind_bearing_knots = 0.0\n    # wind speed knots\n    wind_speed_knots = wind_speed_knots + wind_speed_knots_knots(q,v,t)\n    # wind bearing knots\n    wind_bearing_knots = wind_bearing_knots + wind_bearing_knots_knots(q,v,t)\n    # heading knots\n    heading_knots = (wind_bearing_knots + 180) % 360\n    return wind_speed_knots,wind_bearing_knots,heading_knots\ndef wind_bearing_knots_knots_heading(q,v,t):\n    '''\n    Write a function to calculate the wind bearing in knots, knots and wind bearing in degrees and degrees.\n    '''\n    # initialize\n    wind_bearing_knots = 0.0\n    # wind bearing knots\n    wind_bearing_knots = wind_bearing(q,v,t) + (t*3)\n    # wind bearing knots\n    wind_bearing_knots = wind_bearing_knots + wind_bearing_knots_knots(q,v,t)\n    # heading knots\n    heading_knots = (wind_bearing_knots + 180) % 360\n    return wind_bearing_knots,wind_bearing_knots,heading_knots\ndef wind_speed_heading(q,v,t):\n    '''\n    Write a function to calculate the wind speed and heading given the wind speed and humidity.\n    '''\n    # initialize\n    wind_speed = 0.0\n    heading = 0.0\n    # wind speed\n    wind_speed = wind_speed_knots(q,v,t)\n    # wind heading\n    heading = wind_bearing_knots(q,v,t)\n    return wind_speed,heading\ndef wind_bearing_heading(q,v,t):\n    '''\n    Write a function to calculate the wind bearing and heading given the wind speed and humidity.\n    '''\n    # initialize\n    wind_bearing = 0.0\n    # wind bearing\n    wind_bearing = wind_bearing_knots(q,v,t)\n    # heading\n    heading = wind_bearing_knots(q,v,t)\n    return wind_bearing,heading\ndef wind_speed_heading_knots(q,v,t):\n    '''\n    Write a function to calculate the wind speed and heading given the wind speed and humidity.\n    '''\n    # initialize\n    wind_speed = 0.0\n    heading = 0.0\n    # wind spee"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = v * 9.0 / 5.0 + 32.0\n    tc = t - 273.15\n    wc_index = round((wc - 32.0) / (wc + 32.0), 2)\n    tc_index = round((tc - 273.15) / (tc + 273.15), 2)\n    return wc_index, tc_index\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v*(9/5) + 32\n    h = t*(9/5) + 32\n    return round(math.log(w,math.e)*(9/5) + 32,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # wind_chill_list = [24.8, 17.5, 16.7, 13.0, 7.3, 9.8, 9.7, 8.3, 7.5, 6.7, 5.5, 4.5, 3.5, 2.6, 2.4, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05]\n    # current_t = 12 # degC\n    # temperature = 67.0 # celsius\n    # wchill = wind_chill_list[current_t-t]\n    # return round(wchill*(10**((5-current_t)/6.25)))\n    # The wind chill index is calculated using the formula in the following equations.\n    # K = 1.0 (T) + 0.6215 (T - 273.15) + 0.4275 (T - 459.67) + 0.11297 (T - 800.0) + 0.0418 (T - 860.0)\n    # W = wchill - 273.15 # celsius\n    # T_c = T + 273.15\n    # wchill = K * (T_c - T) + 0.6215\n    # wchill = K * (T_c - T) + 0.4275\n    # wchill = K * (T_c - T) + 0.11297\n    # wchill = K * (T_c - T) + 0.0418\n    # wchill = K * (T_c - T) + 0.5 * T_c**2.0 + 0.5 * T_c**3.0 + T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.2 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.4 * T_c**3.0 + 0.6 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**2.0 + 0.2 * T_c**3.0 + 0.3 * T_c**4.0\n    # wchill = K * (T_c - T) + 0.1 * T_c**"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #wind chill index\n    #E(t) = 8.83 + (0.6219 * v**0.16 - 0.4366 * v**0.635 + 3.0767 * v**0.2965) * (t - 32.0) / (t - 32.0) + 0.0765\n    #v = m/s\n    #t = celsius\n    wind_chill = 8.83 + (0.6219 * v**0.16 - 0.4366 * v**0.635 + 3.0767 * v**0.2965) * (t - 32.0) / (t - 32.0) + 0.0765\n    return wind_chill\ndef temp_c(v,t):\n    '''\n    Write a function to calculate the temperature in celsius rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #temp = c/m\n    #v = m/s\n    temp = (t - 32.0) / (v - 0.0065)\n    return temp\ndef f(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #wind chill index\n    #E(t) = 8.83 + (0.6219 * v**0.16 - 0.4366 * v**0.635 + 3.0767 * v**0.2965) * (t - 32.0) / (t - 32.0) + 0.0765\n    wind_chill = 8.83 + (0.6219 * v**0.16 - 0.4366 * v**0.635 + 3.0767 * v**0.2965) * (t - 32.0) / (t - 32.0) + 0.0765\n    return wind_chill\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if len(sample_names) < 3:\n        print(\"Please enter at least three names.\")\n        return None\n    elif len(sample_names) > 10:\n        print(\"Please enter at most ten names.\")\n        return None\n    else:\n        name_length = 0\n        for name in sample_names:\n            if len(name) > name_length:\n                name_length = len(name)\n        name_list = []\n        for name in sample_names:\n            if len(name) <= name_length:\n                name_list.append(name)\n        return name_list\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    # for loop for each name in sample_names\n    for name in sample_names:\n        # if name.startswith('a')\n        # break\n        if not name.startswith('A'):\n            names.append(name)\n    # return the sum of the length of the names\n    return sum(len(name) for name in names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if len(name) >= 3:\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for name in sample_names:\n        if not name[0].islower():\n            new_list.append(name)\n    return new_list\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in range(len(sample_names)):\n        while(sample_names[i][0].islower() and sample_names[i][0]!=sample_names[i][0].upper()):\n            sample_names.remove(sample_names[i])\n    return len(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_count = {}\n    for name in sample_names:\n        if name.isupper():\n            if name not in name_count:\n                name_count[name] = 1\n            else:\n                name_count[name] += 1\n        elif name.lower() not in name_count:\n            name_count[name.lower()] = 1\n        else:\n            name_count[name.lower()] += 1\n    sorted_name_count = sorted(name_count.items(), key=lambda x: x[1], reverse=True)\n    for name, count in sorted_name_count:\n        if count < 5:\n            name = name.lower()\n            sample_names.remove(name)\n    return sample_names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return ''.join([l for l in sample_names if l.islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_length = []\n    for name in sample_names:\n        if name[0] == \"a\":\n            name_length.append(len(name))\n        else:\n            name_length.append(0)\n    sample_names.sort()\n    return sum(name_length)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_names = 0\n    for i in sample_names:\n        if i[0].isalpha():\n            sum_names += len(i)\n    return sum_names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    with open(\"./sample_names.txt\",\"w\") as sample_names:\n        for name in sample_names:\n            if name[0].islower():\n                sample_names.write(name.rstrip() + \"\\n\")\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(\"\\\\(.*?\\\\)|\\\\)|[)]\", \"\", items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^()]*\\)', \"\", items)\ndef remove_apostrophe(items):\n    '''\n    Write a function to remove the apostrophe from a string.\n    '''\n    return re.sub(r'\\'[^\\']*\\'', \"\", items)\ndef remove_space(items):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    return re.sub(r'\\s+', \" \", items)\ndef remove_letter(items):\n    '''\n    Write a function to remove letters from a string.\n    '''\n    return re.sub(r'\\w+', \"\", items)\ndef get_emails(items):\n    '''\n    Write a function to get all emails.\n    '''\n    if not items:\n        return \"No email found\"\n    result = []\n    for item in items:\n        result.append(item[0])\n    return \",\".join(result)\ndef get_text_from_csv(filename):\n    '''\n    Return all text in the csv file as a list of strings.\n    '''\n    with open(filename) as f:\n        data = f.read().split(\"\\n\")\n        # data = [remove_parenthesis(item) for item in data]\n        # data = [remove_apostrophe(item) for item in data]\n        # data = [remove_space(item) for item in data]\n        # data = [item.replace('\"', '') for item in data]\n        # data = [item.replace(\"'\", '') for item in data]\n        # data = [item.replace(',', '') for item in data]\n        # data = [item.replace('[', '') for item in data]\n        # data = [item.replace(']', '') for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data]\n        # data = [remove_letter(item) for item in data"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #get list of parenthesis\n    parenthesis = ['(', ')']\n    parenthesis_index = []\n    i = 0\n    while i < len(items):\n        if items[i] in parenthesis:\n            parenthesis_index.append(i)\n        i = i+1\n    #remove the parenthesis from the list\n    for k in range(len(parenthesis_index)):\n        del items[parenthesis_index[k]]\n    #print(items)\n    #print(parenthesis_index)\n    #get rid of the parenthesis\n    for k in range(len(parenthesis_index)):\n        del items[parenthesis_index[k]]\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    stripped_string = \"\"\n    for item in items:\n        if item.find('(')!= -1:\n            item = item.replace('(', '')\n        if item.find(')')!= -1:\n            item = item.replace(')', '')\n        stripped_string += item + \" \"\n    return stripped_string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i] == '(':\n            items[i] = ''\n            items[i+1] = ''\n        elif items[i] == ')':\n            items[i] = ''\n            items[i+1] = ''\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items[0] == ')':\n        items.remove(')')\n        if items[-1] == '(':\n            items.pop()\n        else:\n            items.pop()\n        items.pop()\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    if len(items) == 0:\n        return output\n    for index,item in enumerate(items):\n        if '(' in item:\n            start = index\n            for index,item in enumerate(items):\n                if item == '(' and index<start:\n                    output.append(item[:index]+item[index+1:])\n                else:\n                    break\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string = ''\n    for i in range(len(items)):\n        if items[i] == '(':\n            string += ')'\n        elif items[i] == ')':\n            string += '('\n    return string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join(items[i] for i in range(len(items)) if items[i]=='(' or items[i]==')')\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    count = 0\n    for i in range(len(items)):\n        if items[i] == '(':\n            count += 1\n        elif items[i] == ')':\n            count -= 1\n        if count == 0:\n            return items[0:i] + items[i+1:]\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # BEGIN writing your code\n    pass\n    # END writing your code\n    # HINT: try to solve this with recursion.\n    # HINT: use the fact that n=1: n=2\n    # HINT: use a while loop (i.e. use a for loop)\n    # HINT: use a for loop to iterate over the nth number and see if it is a non-diagonal number\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: to solve this problem, you can use the is_diagonal function\n    # HINT: you can use two pointers (i.e. pointers that iterate on the nth number)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a recursion to solve this problem using a stack (stack is a list that represents a stack)\n    # HINT: you can use a while loop (i.e. use a for loop)\n    # HINT: you can use a while loo"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        for i in range(2, n + 1):\n            if i % 2 == 1:\n                if i == (n // 2) + 1:\n                    return n\n                else:\n                    continue\n            if n == (i // 2):\n                return n\n    return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 0\n    while i < n:\n        if i % 2!= 0:\n            if i == 0:\n                return i + 1\n            else:\n                return i + 2\n        else:\n            i += 1\n    return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    \n    return n\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:\n        return 38\n    elif n == 40:\n        return 39\n    elif n == 41:\n        return 40\n    elif n == 42:\n        return 41\n    elif n == 43:\n        return 42\n    elif n == 44:\n        return 43\n    elif n == 45:\n        return 44\n    elif n == 46:\n        return 45\n    elif n == 47:\n        return 46\n    elif n == 48:\n        return 47\n    elif n == 49:\n        return 48\n    elif n == 50:\n        return 49\n    elif n == 51:\n        return 50\n    elif n == 52:\n        return 51\n    elif n == 53:\n        return 52\n    elif n == 54:\n        return 53\n    elif n == 55:\n        return 54\n    elif n == 56:\n        return 55\n    elif n == 57:\n        return 56\n    elif n == 58:\n        return 57\n    elif n == 59:\n        return 58\n    elif n == 60:\n        return 59\n    elif n == 61:\n        return 60\n    elif n == 62:\n        return 61\n    elif n == 63:\n        return 62\n    elif n == 64:\n        return 63\n    elif n == 65:\n        return 64\n    elif n == 66:\n        return 65\n    elif n == 67:\n        return 66\n    elif n == 68:\n        return 67\n    elif n == 69:\n        return 68\n    elif n == 70:\n        return 69\n    elif n == 71:\n        return 70\n    elif n == 72:\n        return 71\n    elif n == 73:\n        return 72\n    elif n == 74:\n        return 73\n    elif n == 75:\n        return 74\n    elif n == 76:\n        return 75\n    elif n == 77:\n        return 76\n    elif n == 78:\n        return 77\n    elif n == 79:\n        return 78\n    elif n == 80:\n        return 79\n    elif n == 81:\n        return 80\n    elif n == 82:\n        return 81\n    elif n == 83:\n        return 82\n    elif n == 84:\n        return 83\n    elif n == 85:\n        return 84\n    elif n == 86:\n        return 85\n    elif n == 87:\n        return 86\n    elif n == 88:\n        return 87\n    elif n == 89:\n        return 88\n    elif n == 90:\n        return 89\n    elif n == 91:\n        return 90\n    elif n == 92:\n        return 91\n    elif n == 93:\n        return 92\n    elif n == 94:\n        return 93\n    elif n == 95:\n        return 94\n    elif n == 96:\n        return 95\n    elif n == 97:\n        return 96\n    elif n == 98:\n        return 97\n    elif n == 99:\n        return 98\n    elif n == 100:\n        return 99\n    elif n == 101:\n        return 100\n    elif n == 102:\n        return 101\n    elif n == 103:\n        return 102\n    elif n == 104:\n        return 103\n    elif n == 105:\n        return 104\n    elif n == 106:\n        return 105\n    elif n == 107:\n        return 106\n    elif n == 108:\n        return 107\n    elif n == 109:\n        return 108\n    elif n == 110:\n        return 109\n    elif n == 111:\n        return 110\n    elif n == 112:\n        return 111\n    elif n == 113:\n        return 112\n    elif n == 114:\n        return 113\n    elif n == 115:\n        return 114\n    elif n == 116:\n        return 115\n    elif n == 117:\n        return 116\n    elif n == 118:\n        return 117\n    elif n == 119:\n        return 118\n    elif n == 120:\n        return 119\n    elif n == 121:\n        return 120\n    elif n == 122:\n        return 121\n    elif n == 123:\n        return 122\n    elif n == 124:\n        return 123\n    elif n == 125:\n        return 124\n    elif n == 126:\n        return 125\n    elif n == 127:\n        return 126\n    elif n == 128:\n        return 127\n    elif n == 129:\n        return 128\n    elif n == 130:\n        return 129\n    elif n == 131:\n        return 130\n    elif n == 132:\n        return 131\n    elif n == 133:\n        return 132\n    elif n == 134:\n        return 133\n    elif n == 135:\n        return 134\n    elif n == 136:\n        return 135\n    elif n == 137:\n        return 136\n    elif n == 138:\n        return 137\n    elif n == 139:\n        return 138\n    elif n == 140:\n        return 139\n    elif n == 141:\n        return 140\n    elif n == 142:\n        return 141\n    elif n == 143:\n        return 142\n    elif n == 144:\n        return 143\n    elif n == 145:\n        return 144\n    elif n == 146:\n        return 145\n    elif n == 147:\n        return 146\n    elif n == 148:\n        return 147\n    elif n == 149:\n        return 148\n    elif n == 150:\n        return 149\n    elif n == 151:\n        return 150\n    elif n == 152:\n        return 151\n    elif n == 153:\n        return 152\n    elif n == 154:\n        return 153\n    elif n == 155:\n        return 154\n    elif n == 156:\n        return 155\n    elif n == 157:\n        return 156\n    elif n == 158:\n        return 157\n    elif n == 159:\n        return 158\n    elif n == 160:\n        return 159\n    elif n == 161:\n        return 160\n    elif n == 162:\n        return 161\n    elif n == 163:\n        return 162\n    elif n == 164:\n        return 163\n    elif n == 165:\n        return 164\n    elif n == 166:\n        return 165\n    elif n == 16"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    num = n\n    while count < n:\n        if num % count == 0:\n            return num\n        count += 1\n    return num\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = 0\n    e = n - 1\n    while e >= s:\n        if (e - s) % 2 == 1:\n            s = s + 1\n        e = e - 1\n    return s\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = [1, 2, 3, 4, 5]\n    sum = 0\n    for i in range(0, len(num), 2):\n        sum += num[i]\n    if num[-1]!= sum:\n        return False\n    for i in range(0, len(num), 2):\n        if num[i]!= sum:\n            return False\n    return True\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for j in range(n):\n        if j!= i and n - j!= i - n:\n            return n - j\n    return None\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while i < n:\n        if ((n % i) == 0):\n            if (i % 2!= 0):\n                print(n, '=', i)\n                return i\n            else:\n                return i + 1\n        i += 2\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    pattern = 'z$'\n    m = re.search(pattern, text)\n    if m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = re.sub(r'\\s+',' ',text)\n    pattern = r'\\b([a-z])(z)(\\s+)([0-9]+)(\\s+)(\\w+)\\s+'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end, word, symbol = match.span()\n        if symbol == 'z':\n            text = text[:start] + text[end:]\n        elif symbol!= 'z' and symbol!= 'a':\n            return False\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    # remove leading and trailing spaces\n    text = re.sub(' +','', text)\n    # replace punctuation with 'p'\n    text = re.sub(r'[^\\w]','', text)\n    # remove multiple spaces\n    text = re.sub(r' +','', text)\n    \n    # remove non-alphanumeric\n    text = re.sub(r'[^\\w]','', text)\n    \n    return(re.match('[a-zA-Z0-9]', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # regex = \"^(?:[A-Z]\\.)*$\"\n    # regex = \"^([A-Z]{1})+$\"\n    # regex = \"(?:[A-Z]\\.)*$\"\n    # regex = \"(?:[A-Z]{1})+$\"\n    # regex = \"(?:[A-Z]{1})+$\"\n    regex = \"^([A-Z]{1})+$\"\n    return re.search(regex, text) is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex_match_wordz_middle = re.compile('(.|\\w)z')\n    if regex_match_wordz_middle.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) < 3:\n        return 'False'\n    for i in range(len(text)):\n        if (i == 0) or (i == len(text) - 1) or (text[i] == 'z'):\n            continue\n        else:\n            return 'False'\n    return 'True'\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_len = len(text)\n    text_middle = text[(text_len-text_len/2):text_len/2]\n    text_start = text[:text_len/2]\n    text_end = text[(text_len/2):]\n    text_middle = re.findall(\"[0-9]+\", text_middle)\n    text_start = re.findall(\"[0-9]+\", text_start)\n    text_end = re.findall(\"[0-9]+\", text_end)\n    text_middle = [int(i) for i in text_middle]\n    text_start = [int(i) for i in text_start]\n    text_end = [int(i) for i in text_end]\n    \n    if text_start[0]!= 0 and text_end[0]!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # check if start is after a word\n    if text[0].isalpha():\n        start = text.find('z')\n        if start > 0:\n            end = start + 3\n        else:\n            end = start + 1\n    else:\n        end = text.find('z')\n        if end > 0:\n            start = end + 1\n        else:\n            start = end + 1\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match_str = [re.search(r'\\Z+', i) for i in text.split()]\n    return len(match_str)!= 1\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    for word in text.split():\n        if 'z' not in word:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    output = []\n    while i < len(input):\n        output.append(input[i])\n        i += k\n    output.reverse()\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print('Python: reverse_Array_Upto_K')\n    return input[::-1][:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # This is the logic\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    output = []\n    for i in range(length):\n        output.append(input[i])\n    for j in range(k - 1):\n        output.append(input[j])\n    for i in range(k - 1, 0, -1):\n        output.append(input[i])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(0,len(input),k):\n        output.append(input[i])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev_array = []\n    for i in input:\n        rev_array.append(i)\n    for i in range(0, k - len(input)):\n        rev_array.append(rev_array[len(rev_array) - 1])\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 1: \n        return input\n    else: \n        return reverse_Array_Upto_K(input, k - 1) + [input[-1]] + reverse_Array_Upto_K(input[:-k], k)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    end = len(input) - 1\n    first = 0\n    second = end\n    while second < end:\n        first = input[first]\n        second = input[second]\n    # reverse each element of the input array\n    for i in range(end, -1, -1):\n        input[i] = input[i+1]\n    input[0] = first\n    input[end] = second\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Write your code here.\n    # Create a recursive function to print the given array\n    # Reverse the array and then call it.\n    arr = input\n    rev = reverse_array(arr, 0, len(arr)-1)\n    return rev\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return input\n    else:\n        for i in range(len(input)-k):\n            input[i] = input[i+k]\n        return input\n    # output\n    # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    # [3, 6, 9, 12, 15, 20, 25, 30, 35, 40]\n    # [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n    # [7, 13, 16, 21, 28, 36, 42, 46, 51, 55]\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    # Write your code here.\n    for item in test_dict:\n        test_tup += (item,)\n    \n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # YOUR CODE HERE\n    test_tup = tuple(test_tup)\n    test_dict = dict(test_dict)\n    test_tup += (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    try:\n        return test_tup + (test_dict,)\n    except TypeError:\n        print(\"No arguments passed to add_dict_to_tuple(). Please provide a dictionary.\")\n        return None\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # write your code here\n    temp_tup = (test_tup[0] + test_dict[0], test_tup[1] + test_dict[1])\n    return temp_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = tuple(test_tup) + (key, value)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0], test_tup[1])\n    test_dict = {test_dict[0]:test_dict[1]}\n    test_tup.update(test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result_tup = tuple(test_tup) + tuple(test_dict.values())\n    return result_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(sorted(test_tup.items() + test_dict.items()))\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    return test_tup + test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_dict)\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # size of the matrix \n    size = len(cost)\n    # initializing a matrix with size of 1\n    costMatrix = [[1 for x in range(size)] for y in range(size)]\n    #for each cell in matrix\n    for i in range(size):\n        for j in range(size):\n            #to calculate the average of cell i and j \n            costMatrix[i][j] = cost[i][j]/cost[i][j]\n    #for each cell in matrix\n    for i in range(size):\n        for j in range(size):\n            #to calculate the average of cell i and j \n            costMatrix[i][size-1-j] = cost[i][size-1-j]/cost[i][size-1-j]\n            \n    #for each cell in matrix\n    for i in range(size):\n        #to calculate the average of cell i \n        costMatrix[i][i] = sum(costMatrix[i])/len(costMatrix[i])\n        #to calculate the average of cell size of matrix\n        costMatrix[size-1-i][i] = sum(costMatrix[size-1-i][size-1-i])/len(costMatrix[size-1-i][size-1-i])\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    return cost[0][0] / cost[-1][-1]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # This is a problem with the input matrix\n    # We want to find the maximum average on a given path, which we can do with a stack\n    \n    # Consider all coordinates of a path in the matrix\n    # If the cell that is the top left cell is the top left cell of the current path, then it is the path\n    # Add 1 to the sum\n    # If the cell that is the top left cell is the top left cell of the current path, then it is not the path\n    # Add 1 to the sum\n    \n    # Solve this problem using a recursive method\n    # We can now solve this problem by:\n    # (1) finding the maximum, and subtracting 1 from the sum, so the sum is the sum of the current path\n    # (2) checking if the cell that we came from the top left cell of the current path has the right value\n    # (3) checking if the cell that we came from the top left cell of the current path has the right value\n    # (4) checking if the cell that we came from the top left cell of the current path has the right value\n    # (5) adding 1 to the sum\n    # (6) returning the maximum sum\n    # (7) checking if the path is done or not\n    # (8) checking if the path has a path with a cell at the top left cell of the current path\n    # (9) checking if the path has a path with a cell at the top left cell of the current path\n    # (10) checking if the path has a path with a cell at the top left cell of the current path\n    # (11) returning the maximum path\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxPath = []\n    for i in range(0, len(cost)):\n        temp = []\n        for j in range(0, len(cost[0])):\n            if j == 0:\n                temp.append(cost[i][j])\n            elif j == len(cost[0]) - 1:\n                temp.append(cost[i][j])\n            else:\n                temp.append(cost[i][j] + min(temp[j-1], temp[j]))\n        maxPath.append(temp)\n    return maxPath\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #check if list is empty\n    if len(cost) == 0:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    print(cost)\n    print(len(cost))\n    # Calculate the sum of all cells\n    sum = 0\n    # For each cell of the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            sum += cost[i][j]\n    # Set the maximum value to infinity\n    maximum = float(\"-inf\")\n    # Set the minimum value to infinity\n    minimum = float(\"inf\")\n    # Calculate the average\n    average = sum/len(cost)\n    # Loop over all possible paths\n    for i in range(len(cost)):\n        # Calculate the total number of cells visited in the path\n        total = 0\n        for j in range(len(cost[i])):\n            total += cost[i][j]\n        # Set the minimum value to infinity\n        minimum = min(minimum, total)\n        # Set the maximum value to infinity\n        maximum = max(maximum, total)\n        # Calculate the average\n        average = average - total/len(cost[i])\n    print(maximum)\n    print(minimum)\n    print(average)\n    return average\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Your code here\n    # you can use any methods to calculate the average path\n    # you can use the max() function to find the largest number in the list\n    return (max(cost, max(map(max,cost)), default = 0))\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # TODO: Write your code here\n    n = len(cost)\n    \n    #TODO: Write your code here\n    max_path_list = []\n    current_cell = 0\n    current_path = []\n    max_path = 0\n    \n    for i in range(0, n):\n        for j in range(0, n-i):\n            if current_cell == len(cost[0]):\n                #update path with empty list\n                if len(current_path) > 0:\n                    current_path.pop()\n                current_path = []\n            if cost[i][j] > current_path[-1]:\n                current_path.append(j)\n            if cost[i][j] > current_path[-1] and len(current_path) > 0:\n                current_path.pop()\n                \n                if len(current_path) > 0:\n                    current_path.pop()\n                current_path = []\n            else:\n                current_cell += 1\n        if current_cell == len(cost[0]):\n            if len(current_path) > 0:\n                current_path.pop()\n            current_path = []\n            current_path.append(current_cell)\n            \n            current_path.append(current_cell)\n            if len(current_path) > 0:\n                current_path.pop()\n            current_path = []\n            current_cell = 0\n    \n    return max_path\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #return the max of the calculated average\n    return cost[-1]/cost[-2] if len(cost)>2 else -1\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxAverage = 0\n    for row in cost:\n        if maxAverage < 0:\n            maxAverage = 0\n            row.reverse()\n        for item in row:\n            maxAverage += item\n    return maxAverage\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for s in students:\n        filtered[s[0]] = (s[1][0]>=h and s[1][1]>=w)\n    return filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if student[0] < w and student[1] < h:\n            print(f\"The student has a minimum height of {student[0]} and a minimum weight of {student[1]}.\")\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_height = w[h[0]]\n    min_weight = w[w[0]]\n    for i in range(1,len(w)):\n        if w[i] < min_height or w[i] > max_weight:\n            return False\n    return True\n    \n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # TODO: Create a function that checks the height and weight of the given students. If the height is above the minimum, return the student. If the height is below the minimum, return the student and a flag to indicate it's a good student\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    h_min = min(students, key=lambda student: student[1])[1]\n    w_min = min(students, key=lambda student: student[1])[1]\n    h_filt = 0\n    w_filt = 0\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    h_max = w_max = 0\n    filtered_students = {}\n    for key in students:\n        if students[key][1] >= h and students[key][1] >= h_max:\n            if students[key][0] > w:\n                filtered_students[key] = students[key]\n            else:\n                filtered_students[key] = None\n            h_max = students[key][1]\n        else:\n            filtered_students[key] = None\n    return filtered_students,h_max,w_max\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        for key, value in students.items():\n            if student.weight < value[1]:\n                if student.height > h and student.weight > value[0]:\n                    students.pop(key)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for k,v in students.items():\n        if v[0] > h and v[1] > w:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #Assigning the variables with the appropriate type\n    students_data=students.values()\n    height=students.get('height')\n    weight=students.get('weight')\n    if h<height:\n        print('The minimum height is',h,'.')\n        print(students)\n        return\n    if w<weight:\n        print('The minimum weight is',w,'.')\n        print(students)\n        return\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_list=[]\n    filtered_list.append(students[h])\n    filtered_list.append((filters.min_height(students[h]),students[w]))\n    filtered_list.append(students[w])\n    filtered_list.append((filters.min_weight(students[w]),students[h]))\n    return filtered_list\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #print(nums1, nums2)\n    count = 0\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n    \ndef sort_list(nums):\n    '''\n    The input is a list of the same length. Write a function to sort that list.\n    '''\n    #print(nums)\n    new_nums = []\n    for i in nums:\n        new_nums.append(i)\n    #print(new_nums)\n    sort_nums = []\n    for i in range(len(new_nums)):\n        for j in range(len(new_nums)):\n            if eq(new_nums[i], new_nums[j]):\n                sort_nums.append(new_nums[j])\n    #print(sort_nums)\n    new_nums.clear()\n    for i in range(len(sort_nums)):\n        new_nums.append(sort_nums[i])\n    #print(new_nums)\n    return new_nums\n    \n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            if (nums1[i] == nums2[j]):\n                count += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    count_pair = 0\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if nums1[i] == nums2[j]:\n                    count_pair += 1\n                else:\n                    break\n    return count_pair\n        \ndef count_same_pair_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    count_pair = 0\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if nums1[i] == nums2[j]:\n                    count_pair += 1\n                else:\n                    break\n    return count_pair\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_repeated_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_lowest_common_element(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_max_and_min(nums1):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    max = nums1[0]\n    min = nums1[0]\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] > max:\n            max = nums1[i]\n        elif nums1[i] < min:\n            min = nums1[i]\n        count += 1\n    return count\ndef count_common_elements(nums1):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    def count_same_pair_helper(nums1, nums2):\n        count = 0\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                i += 1\n        return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    list1_c = 0\n    list2_c = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                list1_c += 1\n            if nums2[j] == nums1[i]:\n                list2_c += 1\n    print(list1_c, list2_c)\n    return list1_c, list2_c\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    # print(j)\n    return j\ndef count_same_pair_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_3(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_4(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_5(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_6(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_7(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_8(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_9(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_10(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_11(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_12(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_13(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count same pair\", len(nums2))\n    n = len(nums1)\n    # print(nums1)\n    # print(nums2)\n    j = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            j += 1\n    return j\ndef count_same_pair_14(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(\"count same pair\", len(nums1))\n    # print(\"count sam"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for idx, num1 in enumerate(nums1):\n        for idx2, num2 in enumerate(nums2):\n            if num1 == num2:\n                same_count += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                pass\n            else:\n                return nums1[i], nums2[j]\n    return None\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while base!= 0:\n        base_sum += base % 10\n        base = int(base / 10)\n    return base_sum * power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 1 or base == 0:\n        return 1\n    return base + power_base_sum(base-1, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power:\n        sum += int(base)\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return base\n    else:\n        return power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit)\n    if base_sum > power:\n        return 'Error'\n    else:\n        return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base)]) + power\n    #raise NotImplementedError\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_power_sum = 0\n    for digit in str(base):\n        base_power_sum += int(digit)\n    return base_power_sum**power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while base!= 0:\n        digit = base % 10\n        sum_of_digits += digit * power\n        power = int(base / 10)\n        base = int(base / 10)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # First, get the sum of all digits of base\n    sum_digits = 0\n    for digit in str(base):\n        sum_digits += int(digit)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def power_digit_sum(x, n):\n        return (x*(10**n) % base)\n    return power_digit_sum(base, power)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotations = ['\"\"\"',\"'\\\"\",'\\\\\"',\"\\''\"]\n    quotations1 = []\n    for item in quotations:\n        if item in text1:\n            quotations1.append(item)\n    quotations2 = []\n    for item in quotations1:\n        if item!= \"\\\"\":\n            quotations2.append(item)\n    for item in quotations2:\n        if item == \"\\\"\":\n            text2 = text1[text1.index(item)+1:]\n        elif item == \"\\\\\":\n            text2 = text1[text1.index(item)+2:]\n        elif item == \"\\\"\":\n            text2 = text1[text1.index(item)+2:]\n    return text2\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.replace(\"\\\"\", \"\")\n    regex = re.compile(r'(\\d[\\.\\,]\\d+)')\n    # Use re.findall to get the values in the text\n    return regex.findall(text)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    output = []\n    for char in text1:\n        if char =='':\n            output.append('')\n        elif char == ',':\n            output.append('')\n        elif char == '\"':\n            output.append('')\n        elif char == '=':\n            output.append('')\n        else:\n            output.append(char)\n    return ''.join(output)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=text1.replace(\" \",\"\")\n    quotation = re.compile(r'(\\d{1,3}\\s{0,5}\\d{0,5})\\s{0,5}')\n    ans= quotation.findall(text1)\n    return ans\ndef extract_price(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=text1.replace(\" \",\"\")\n    price = re.compile(r'(\\d{1,3}\\s{0,5}\\d{0,5})\\s{0,5}')\n    ans= price.findall(text1)\n    return ans\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.sub('([(])([^\\w])', '\\\\1\\\\2', text1)\n    text1 = re.sub('(\\n)+', '\\\\1', text1)\n    text1 = re.sub('(\\t)+', '\\\\1', text1)\n    text1 = re.sub('([.)])([^\\w])', '\\\\1\\\\2', text1)\n    text1 = re.sub('(\\n)+', '\\\\1', text1)\n    text1 = re.sub('(\\t)+', '\\\\1', text1)\n    text1 = re.sub('([^\\w\\s])', '\\\\1', text1)\n    text1 = re.sub('(\\n)+', '\\\\1', text1)\n    text1 = re.sub('(\\t)+', '\\\\1', text1)\n    text1 = re.sub('([^\\w\\s])', '\\\\1', text1)\n    text1 = re.sub('(\\n)+', '\\\\1', text1)\n    text1 = re.sub('(\\t)+', '\\\\1', text1)\n    text1 = re.sub('[^\\w\\s]', '', text1)\n    text1 = text1.strip()\n    text1 = text1.replace('\\\\n', '\\n')\n    text1 = text1.replace('\\\\t', '\\t')\n    text1 = text1.replace('\\\\r', '\\r')\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #list of words that will be cleaned\n    words = ['brand', 'for','my', 'women', 'do', 'you', 'have','make', 'to','make', 'the', 'way', 'are','make','my','may','make', 'the', 'way', 'to','make', 'the', 'way', 'to','make', 'your', 'way','make','my','may','make', 'you','make', 'the', 'way', 'to','make', 'your', 'way','make', 'your', 'way','make','my','make', 'you','make', 'your', 'way','my','may','make','make', 'way', 'to','make', 'your', 'way','make', 'your', 'way','make', 'way', 'to','make','my','make', 'way','make','make','my','make','make', 'way', 'to','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make','make', "
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\'.*\\'\")\n    result = pattern.search(text1)\n    print('Result ='+ result.group())\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    for q in text1:\n        if q == '\"':\n            if text1.index(q) - 1 > -1:\n                return text1[text1.index(q) + 1:]\n            else:\n                return ''\n        else:\n            return q\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.sub(\"\\\\s+\", \" \", text1)\n    temp = text1.split(\" \")\n    quotation_pattern = re.compile(r'(([\\(\\[]) \\\"([^\"]*?)\")')\n    temp = list(map(lambda x: x.lower(),temp))\n    temp = list(filter(lambda x: (x!= \"a\"), temp))\n    return temp\n    \ndef extract_number(text1):\n    '''\n    Write a function to extract numbers from the given string.\n    '''\n    return re.findall(r'\\d+', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Starting pattern \n    pat = re.compile('[()]')\n    # Extract each values from quotation mark \n    res = re.findall(pat, text1)\n    # Return the extracted values \n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = list(test_tup)\n    tup_len = len(tup)\n    for i in range(tup_len):\n        tup[i] = tup[i] * tup[i+1]\n    return tuple(tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x: x * x, test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2, *t_3 = test_tup\n    t_1_1, t_1_2, t_1_3, t_2_1, t_2_2, t_2_3, t_3_1, t_3_2, t_3_3, *t_4 = t_3\n    t_1_1_1, t_1_1_2, t_1_1_3, t_2_1_1, t_2_1_2, t_2_1_3, t_3_1_1, t_3_1_2, t_3_1_3, t_4_1_1, t_4_1_2, t_4_1_3 = t_4\n    return (t_1_1 * t_1_2, t_1_1 * t_1_3, t_2_1 * t_2_2, t_2_1 * t_2_3, t_3_1 * t_3_2, t_3_1 * t_3_3, t_4 * t_4)\n    \n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_i = 0\n    for i in test_tup:\n        t_i = t_i * test_tup[i]\n    return t_i\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([el * el for el in test_tup])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup_mul = ()\n    for i in range(len(test_tup)):\n        test_tup_mul = test_tup_mul + (test_tup[i]*test_tup[i+1])\n    print(test_tup_mul)\n    return test_tup_mul\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += test_tup[i] * test_tup[i+1]\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n    return test_tup\n    \ndef test_multiply_elements():\n    '''\n    Test your function\n    '''\n    assert multiply_elements((1,2,3,4)) == (1,4,9,16)\n    assert multiply_elements((1,2,3,4,5)) == (1,2,6,24,48)\n    assert multiply_elements((1,2,3,4,5,6)) == (1,2,3,6,24,48)\n    assert multiply_elements((1,2,3,4,5,6,7,8,9)) == (1,2,3,6,24,48,25,36,54)\n    assert multiply_elements((1,2,3,4,5,6,7,8,9,10)) == (1,2,3,6,24,48,25,36,54,106)\n    assert multiply_elements((1,2,3,4,5,6,7,8,9,10,11)) == (1,2,3,6,24,48,25,36,54,106,117)\n    assert multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12)) == (1,2,3,6,24,48,25,36,54,106,117,122)\n    \ndef main():\n    '''\n    Run your test functions\n    '''\n    test_multiply_elements()\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Your code here\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for x in lst1:\n        sum = sum + x\n    for y in lst2:\n        sum = sum + y\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(i) for i in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a+b for a,b in zip(lst1,lst2)]\n    else:\n        print('Not a list of lists')\n        return 'Not a list of lists'\n    \nlst1 = [10,20,30,40,50,60,70,80,90,100]\nlst2 = [40,20,10,30,60,50,90,80,70,50]\nprint(sum_list(lst1,lst2)"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return (lst1 + lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1,lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1 == None or lst2 == None:\n        return None\n    elif lst1 == []:\n        return lst2\n    elif lst2 == []:\n        return lst1\n    elif lst1[0]!= lst2[0]:\n        return sum_list(lst1[1:],lst2[1:])\n    else:\n        return lst1[0] + sum_list(lst1[1:],lst2[1:])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum=0\n    for i in range(len(lst1)):\n        sum += lst1[i]\n        sum += lst2[i]\n    return sum\n    \ndef remove_dup(lst):\n    '''\n    Write a function that takes as input a list of integers [1,2,2,3,3,4,5,6,6,7,7,8,8,9,9,9,9,9], and returns a list of only the elements that appear more than once.\n    '''\n    \n    lst.sort()\n    remove=[]\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            remove.append(lst[i])\n    return remove\n            \n    \ndef reverse_list(lst):\n    '''\n    Write a function that takes as input a list and returns a new list containing all the elements of the input list, in reverse order, except for the first element, which is the first element.\n    '''\n    return lst[::-1]\n    \n    \ndef remove_dups(lst):\n    '''\n    Write a function that takes as input a list of strings, and returns a list of all the strings in the input, except for the first string which is the first string.\n    '''\n    lst.sort()\n    remove=[]\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            remove.append(lst[i])\n    return remove\n    \n    \ndef list_has_dups(lst):\n    '''\n    Write a function that takes as input a list of strings, and returns a boolean indicating whether the input list contains any duplicate strings.\n    '''\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            return True\n    return False\n    \n    \ndef remove_repeats(lst):\n    '''\n    Write a function that takes as input a list of strings, and returns a list of all the strings in the input that appear at least once, in order.\n    '''\n    lst.sort()\n    remove=[]\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            remove.append(lst[i])\n    return remove\n    \n    \ndef has_dups(lst):\n    '''\n    Write a function that takes as input a list of strings, and returns a boolean indicating whether the input list contains any duplicate strings.\n    '''\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n    \ndef sum_digits(n):\n    '''\n    Write a function that takes as input a number n and returns the sum of its digits.\n    '''\n    sum=0\n    while n > 0:\n        digit=n%10\n        sum+=digit\n        n//=10\n    return sum\n    \ndef add_string(a,b):\n    '''\n    Write a function that takes as input two strings and returns the combined string.\n    '''\n    if len(a) == len(b):\n        return a + b\n    else:\n        return 'Error'\n    \ndef has_double(n):\n    '''\n    Write a function that takes as input a non-negative number, and returns a boolean indicating whether it is a double number.\n    '''\n    if n < 0:\n        return False\n    if n % 100 == 0:\n        return True\n    else:\n        return False\n    \ndef sum_floats(lst):\n    '''\n    Write a function that takes as input a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\n    \ndef remove_multiples(lst):\n    '''\n    Write a function that takes as input a list of numbers and returns a list of numbers that are multiplicative of each other.\n    '''\n    lst.sort()\n    remove=[]\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            if lst[i] % lst[i+1] == 0:\n                remove.append(lst[i])\n    return remove\n    \ndef add_multiples(lst):\n    '''\n    Write a function that takes as input a list of numbers and returns a list of numbers that are multiplicative of each other.\n    '''\n    lst.sort()\n    add=[]\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            if lst[i] % lst[i+1] == 0:\n                add.append(lst[i])\n    return add\n    \ndef mod_check(num):\n    '''\n    Write a function that takes as input a number and returns True if it is a modulo, and False otherwise.\n    '''\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n    \ndef is_prime(n):\n    '''\n    Write a function that takes as input a non-negative number n and returns True if it is a prime number and False otherwise.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n == 3 or n == 4:\n        return True\n    if n > 4:\n        return False\n    \ndef prime_factors(n):\n    '''\n    Write a function that takes as input a non-negative number n and returns a list of the prime numbers up to and including the number n.\n    '''\n    divisors = []\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n            \n    return divisors\n    \ndef is_iterable(n):\n    '''\n    Write a function that takes as input a non-negative number n and returns True if it is a non-empty iterable, and False otherwise.\n    '''\n    if n == 0 or n == 1:\n        return False\n    \n    else:\n        try:\n            for i in range(n):\n                if n % i == 0:\n                    return False\n            return True\n        except:\n            return False\n        \ndef factorial(n):\n    '''\n    Write a function that takes as input a non-negative number n and returns the factorial of n.\n    '''\n    if n < 1:\n        return 1\n    return n * factorial(n - 1)\n    \ndef check_prime(n):\n    '''\n    Write a function that takes as input a non-negative number n and returns True if it is a prime number and False otherwise.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    \n    if n > 2:\n        return True\n    else:\n        return False\n    \ndef next_prime(n):\n    '''\n    Write a function that takes as input a non-negative number n and returns the next prime number greater than or equal to it.\n    '''\n    if n < 1:\n        return 2\n    while True:\n        if check_prime(n):\n            if n % 2 == 0:\n                return n + 2\n            else:\n                return n + 3\n        n += 1\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"Error, one list should contain the same length as another.\")\n    else:\n        return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # your code goes here\n    return lst1+lst2\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    final_list = []\n    grouped_list = []\n    list_of_duplicates = []\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped_nums = groupby(nums)\n    for group in grouped_nums:\n        if len(list(group)) == 2:\n            return False\n    return True\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #n = len(nums)\n    #if n == 0: return []\n    # if n == 1:\n    #     return [nums[0]]\n    #     return []\n    # i = 0\n    # c = nums[0]\n    # # k = 0\n    # while i < len(nums):\n    #     if nums[i]!= c:\n    #         i += 1\n    #         c = nums[i]\n    #     else:\n    #         c += 1\n    #         i += 1\n    # return c\n    # return c[1]\n    # if len(nums) == 1:\n    #     return nums[0]\n    # i = 1\n    # while i < len(nums):\n    #     if nums[i]!= nums[i-1]:\n    #         i += 1\n    #     else:\n    #         i += 1\n    #         if i == len(nums)-1:\n    #             return nums[i-1]\n    # return nums[i]\n    # k = 1\n    # while k < len(nums):\n    #     i = 0\n    #     while i < len(nums):\n    #         if nums[i] == nums[i-1] and i!= k:\n    #             del nums[i]\n    #             k += 1\n    #         else:\n    #             i += 1\n    #     if k == len(nums)-1:\n    #         return nums[i-1]\n    # return nums[i]\n    # return nums[i-1]\n    # return nums[i-1:i+1]\n    # return [nums[i-1] for i in range(1, len(nums)+1)]\n    i = 1\n    while i < len(nums):\n        if nums[i]!= nums[i-1]:\n            if nums[i] == nums[i-1] and i!= len(nums)-1:\n                del nums[i]\n                i -= 1\n            else:\n                i += 1\n        else:\n            i += 1\n    if len(nums) == 1:\n        return nums[0]\n    i = 1\n    while i < len(nums):\n        if nums[i]!= nums[i-1]:\n            i += 1\n        else:\n            i += 1\n            if i == len(nums)-1:\n                return nums[i-1]\n    return nums[i-1]\n        \n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # print(nums)\n    if len(nums) == 0:\n        return None\n    #print(nums)\n    d={}\n    for x in nums:\n        if x not in d:\n            d[x]=1\n        else:\n            d[x]+=1\n    #print(d)\n    i=0\n    for k,v in d.items():\n        while i < v and k!= i:\n            #print(i)\n            i=i+1\n        if k == i:\n            return [k]\n        i+=1\n    return None\ndef unique_values_in_lists(nums):\n    '''\n    Write a function to return the numbers from a given list where the duplicates are removed.\n    '''\n    #print(nums)\n    d={}\n    for x in nums:\n        if x in d:\n            d[x]+=1\n        else:\n            d[x]=1\n    #print(d)\n    if len(nums)==1:\n        return None\n    i=0\n    for k,v in d.items():\n        while i < v and k!= i:\n            #print(i)\n            i=i+1\n        if k == i:\n            return [k]\n        i+=1\n    return None\ndef order_unique_values(nums):\n    '''\n    Write a function that returns a list of the uniques values in the given list.\n    '''\n    #print(nums)\n    d={}\n    for x in nums:\n        if x not in d:\n            d[x]=1\n        else:\n            d[x]+=1\n    #print(d)\n    n=len(nums)\n    if n==1:\n        return None\n    i=0\n    for k,v in d.items():\n        while i < v and k!= i:\n            #print(i)\n            i=i+1\n        if k == i:\n            return [k]\n        i+=1\n    return None\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    l=list(nums)\n    for i in range(1,len(l)):\n        if l[i]==l[i-1]:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    seen_add = seen.add\n    \n    for (i, v) in enumerate(nums):\n        if v in seen:\n            continue\n        seen_add(v)\n        if i > 1:\n            if nums[i-2] == v and nums[i-3] == v and nums[i-4] == v:\n                continue\n            if nums[i-2] == v or nums[i-3] == v or nums[i-4] == v:\n                return [v] + consecutive_duplicates(nums[i:])\n    return list()\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for i, x in groupby(nums) if i!= nums.index(x)]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    g = groupby(nums)\n    return list(g.keys())\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Sort and split into groups\n    # Sort the group by last element\n    # Move them back to list\n    # Compare elements in groups\n    # Repeat until list is empty\n    return list(map(lambda x: sorted(list(set(x)), reverse=True)[0], groupby(sorted(nums), key = lambda x: x[-1])))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #\n    # if len(nums) == 1:\n    #     return nums\n    #\n    # result = []\n    # for i in range(len(nums)):\n    #     for j in range(i, len(nums)):\n    #         if nums[j]!= nums[i] and len(nums) > i+1 and len(nums) > j+1:\n    #             result.append(nums[i:j+1])\n    #\n    #     nums = result\n    # return nums\n    #\n    return [x for x in nums if nums.count(x)>1]\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef lateralsurface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef decalsurface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef lite(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef pascal(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef snow(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef tesla(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef faf(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef deltof(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef fahr(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef trif(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef hahn(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef hank(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef iafr(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef iaff(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    C = math.pow(math.cos(math.radians(45)), 2) + math.pow(math.sin(math.radians(45)), 2)\n    C = C / 4\n    if C == 0:\n        return 0\n    else:\n        S = (r + C * math.pow(math.sin(math.radians(45)), 2)) / C\n        return S\ndef farid(r,h)"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # r is a radius\n    # h is the height\n    # return a dictionary with one key per node, values are the lateral surface area at that node\n    return {\n        0: r**2*h,\n        1: r**2*h,\n        2: r**2*h,\n        3: r**2*h,\n        4: r**2*h,\n        5: r**2*h,\n        6: r**2*h,\n        7: r**2*h,\n        8: r**2*h,\n        9: r**2*h,\n        10: r**2*h,\n        11: r**2*h,\n        12: r**2*h,\n        13: r**2*h,\n        14: r**2*h,\n        15: r**2*h,\n        16: r**2*h,\n        17: r**2*h,\n        18: r**2*h,\n        19: r**2*h,\n        20: r**2*h,\n        21: r**2*h,\n        22: r**2*h,\n        23: r**2*h,\n        24: r**2*h,\n        25: r**2*h,\n        26: r**2*h,\n        27: r**2*h,\n        28: r**2*h,\n        29: r**2*h,\n        30: r**2*h,\n        31: r**2*h,\n        32: r**2*h,\n        33: r**2*h,\n        34: r**2*h,\n        35: r**2*h,\n        36: r**2*h,\n        37: r**2*h,\n        38: r**2*h,\n        39: r**2*h,\n        40: r**2*h,\n        41: r**2*h,\n        42: r**2*h,\n        43: r**2*h,\n        44: r**2*h,\n        45: r**2*h,\n        46: r**2*h,\n        47: r**2*h,\n        48: r**2*h,\n        49: r**2*h,\n        50: r**2*h,\n        51: r**2*h,\n        52: r**2*h,\n        53: r**2*h,\n        54: r**2*h,\n        55: r**2*h,\n        56: r**2*h,\n        57: r**2*h,\n        58: r**2*h,\n        59: r**2*h,\n        60: r**2*h,\n        61: r**2*h,\n        62: r**2*h,\n        63: r**2*h,\n        64: r**2*h,\n        65: r**2*h,\n        66: r**2*h,\n        67: r**2*h,\n        68: r**2*h,\n        69: r**2*h,\n        70: r**2*h,\n        71: r**2*h,\n        72: r**2*h,\n        73: r**2*h,\n        74: r**2*h,\n        75: r**2*h,\n        76: r**2*h,\n        77: r**2*h,\n        78: r**2*h,\n        79: r**2*h,\n        80: r**2*h,\n        81: r**2*h,\n        82: r**2*h,\n        83: r**2*h,\n        84: r**2*h,\n        85: r**2*h,\n        86: r**2*h,\n        87: r**2*h,\n        88: r**2*h,\n        89: r**2*h,\n        90: r**2*h,\n        91: r**2*h,\n        92: r**2*h,\n        93: r**2*h,\n        94: r**2*h,\n        95: r**2*h,\n        96: r**2*h,\n        97: r**2*h,\n        98: r**2*h,\n        99: r**2*h,\n        100: r**2*h,\n        101: r**2*h,\n        102: r**2*h,\n        103: r**2*h,\n        104: r**2*h,\n        105: r**2*h,\n        106: r**2*h,\n        107: r**2*h,\n        108: r**2*h,\n        109: r**2*h,\n        110: r**2*h,\n        111: r**2*h,\n        112: r**2*h,\n        113: r**2*h,\n        114: r**2*h,\n        115: r**2*h,\n        116: r**2*h,\n        117: r**2*h,\n        118: r**2*h,\n        119: r**2*h,\n        120: r**2*h,\n        121: r**2*h,\n        122: r**2*h,\n        123: r**2*h,\n        124: r**2*h,\n        125: r**2*h,\n        126: r**2*h,\n        127: r**2*h,\n        128: r**2*h,\n        129: r**2*h,\n        130: r**2*h,\n        131: r**2*h,\n        132: r**2*h,\n        133: r**2*h,\n        134: r**2*h,\n        135: r**2*h,\n        136: r**2*h,\n        137: r**2*h,\n        138: r**2*h,\n        139: r**2*h,\n        140: r**2*h,\n        141: r**2*h,\n        142: r**2*h,\n        143: r**2*h,\n        144: r**2*h,\n        145: r**2*h,\n        146: r**2*h,\n        147: r**2*h,\n        148: r**2*h,\n        149: r**2*h,\n        150: r**2*h,\n        151: r**2*h,\n        152: r**2*h,\n        153: r**2*h,\n        154: r**2*h,\n        155: r**2*h,\n        156: r**2*h,\n        157: r**2*h,\n        158: r**2*h,\n        159: r**2*h,\n        160: r**2*h,\n        161: r**2*h,\n        162: r**2*h,\n        163: r**2*h,\n        164: r**2*h,\n        165: r**2*h,\n        166: r**2*h,\n        167: r**2*h,\n        168: r**2*h,\n        169: r**2*h,\n        170: r**2*h,\n        171: r**2*h,\n        172: r**2*h,\n        173: r**2*h,\n        174: r**2*h,\n        175: r**2*h,\n        176: r**2*h,\n        177: r**2*h,\n        178: "
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if (r < 0.5 or r > 1):\n        print(\"ERROR: The radius of the cone cannot be less than 0.5 or greater than 1!\")\n        return None\n    if (h < 0.5 or h > 1):\n        print(\"ERROR: The height of the cone cannot be less than 0.5 or greater than 1!\")\n        return None\n    if (r*h < 0):\n        print(\"ERROR: The cone cannot be larger than 0!\")\n        return None\n    if (r < 0.5):\n        r = 0.5\n    if (r > 1):\n        r = 1\n    return math.pi*r*r*h*0.5*2*math.pi\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #R, h = 4, 3.5\n    #R = 4\n    #h = 3.5\n    S = 2*math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*math.sin(math.radians(h/2))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S = (h/2)*math.pi*r\n    return S\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    x = math.log(r,2)\n    y = 2*math.log(r,2)\n    z = -h*math.tan(math.radians(y))\n    A = -(1.0+z*z)\n    B = math.pow(1-z,2)*math.pow(1-z,2)\n    C = A+B\n    area = math.pow(B,2)*(math.pow(r,2)-math.pow(r,2)+(1-z*z)*math.pow(1-z,2))\n    return math.pow(2*math.pi*r*area,1.0/3.0)*math.pow(h,2)\ndef chamfer(s1,s2,t1,t2):\n    '''\n    Write a function that returns the distance between two 3D points of a surface surface and two triangles of a surface surface.\n    '''\n    return math.sqrt((s2[0]-s1[0])*(s2[0]-s1[0])+(s2[1]-s1[1])*(s2[1]-s1[1])+(s2[2]-s1[2])*(s2[2]-s1[2]))\ndef convex_hull(points,height,thickness):\n    '''\n    Write a function that returns the hull of a convex polygon given 3D points and an array of surface heights, and a thickness, and returns it.\n    '''\n    hull = []\n    for i in range(len(points)-1):\n        if math.fabs(points[i][2]-points[i+1][2]) <= thickness:\n            hull.append(points[i])\n    hull.append(points[-1])\n    return hull\ndef convex_hull_area(hull):\n    '''\n    Write a function that returns the area of the convex hull given 3D points.\n    '''\n    area = 0\n    for i in range(len(hull)):\n        area += math.pow(hull[i][2]-hull[i+1][2],2)\n    return math.pow(2*math.pi,1/3.0)*area\ndef surface_area(points,height):\n    '''\n    Write a function that returns the surface area of a convex polygon given 3D points and an array of surface heights.\n    '''\n    area = 0\n    for i in range(len(points)-1):\n        area += math.pow(points[i][2]-points[i+1][2],2)\n    area = math.pow(2*math.pi,1/3.0)*area\n    return area\ndef center_height(p):\n    '''\n    Write a function that returns the center of a 3D point.\n    '''\n    return (p[0]+p[1]+p[2])/3.0\ndef main():\n    print(\"Functions for 3D surface surface polygon and convex hull\")\n    print(\"Surface area is:\")\n    print(surface_area([[3,7,9],[3,6,9],[6,4,4],[4,6,4]],1))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],1))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[6,4,4],[0,0,0],[0,0,0]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],2))\n    print(\"Calculating the area of a convex polygon\")\n    print(lateralsurface_cone(1,1))\n    print(lateralsurface_cone(2,2))\n    print(lateralsurface_cone(3,3))\n    print(lateralsurface_cone(4,4))\n    print(lateralsurface_cone(5,5))\n    print(lateralsurface_cone(6,6))\n    print(lateralsurface_cone(7,7))\n    print(lateralsurface_cone(8,8))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[3,6,9],[6,4,4],[4,6,4]],1))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[6,4,4],[0,0,0],[0,0,0]],1))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[6,4,4],[0,0,0],[0,0,0]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[6,4,4],[0,0,0],[0,0,0]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[6,4,4],[0,0,0],[0,0,0]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[6,4,4],[0,0,0],[0,0,0]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[6,4,4],[0,0,0],[0,0,0]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[6,4,4],[0,0,0],[0,0,0]],2))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    print(\"Surface area in 2D:\")\n    print(surface_area([[3,7,9],[6,4,4],[0,0,0],[0,0,0]],3))\n    print(surface_area([[0,0,0],[1,1,1],[0,0,0],[1,1,1]],3))\n    prin"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # area of outer perimeter\n    a = (1/2)*math.pi*(r*(r+h)+h)\n    # area of the front\n    b = (1/2)*math.pi*(r*(r-h)+h)\n    # return the area\n    return a+b\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Convert to degrees\n    theta = math.radians(0)\n    #Radius\n    r_rad = math.radians(r)\n    #Height\n    h_rad = math.radians(h)\n    #Calculate\n    return theta*(r_rad**2)*(math.cos(theta))*math.sin(h_rad)\ndef spiral_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef ellipsoid_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef hyperbola_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a hyperbola given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef circle_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef line_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a line given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef polygon_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a polygon given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef nurbs_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a nurbs curve given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef secant_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a secant curve given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef trapezoid_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a trapezoid curve given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef plane_surface_cone(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a plane given radius r_max and the height h_max and the height h_min.\n    '''\n    #Convert to degrees\n    theta_max = math.radians(0)\n    theta_min = math.radians(360)\n    #Radius\n    r_rad = math.radians(r_max)\n    #Height\n    h_rad = math.radians(h_max)\n    #Calculate\n    return (theta_max-theta_min)*(r_rad**2)*(math.cos(theta_min))*math.sin(h_rad)\ndef plane_surface_cone_2(r_max,r_min,h_max,h_min):\n    '''\n    Write a function to find the lateral surface area of a plane given radius r"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = text.replace(r'\\s+', ':')\n    # text = text.replace(r',', ':')\n    # text = text.replace(r'.', ':')\n    # text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s+', ':')\n    text = text.replace(r',', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r',', ':')\n    text = text.replace(r'.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r',', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r',', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', ':')\n    text = text.replace(r'\\s', ':')\n    text = text.replace(r'\\.', '"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\w\\s]+:\\s*', ':', text)\n    text = re.sub(r'[\\w\\s]+|[,;:.()\\]\\s+', ':', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', text)\n    text = re.sub(r'(?:\\n|\\s){2,}','', tex"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces, commas, and dots\n    text = re.sub('[\\s,]+', ':', text)\n    text = re.sub('[.,;]', ':', text)\n    # Replace any other chars\n    text = re.sub('[!-]', '!', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = ''\n    for i in range(len(text)):\n        if text[i]!='' and text[i]!= ',' and text[i]!= '.' and text[i]!= ':':\n            result += text[i]\n        elif text[i] =='':\n            result += ':'\n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # find all occurences of spaces, commas, or dots\n    new_text = re.sub(' +', ':', text)\n    # find all occurences of colons\n    new_text = re.sub(' +:', ':', new_text)\n    # find all occurences of semicolons\n    new_text = re.sub(' +;', ';', new_text)\n    # find all occurences of dots\n    new_text = re.sub(' +', ':', new_text)\n    # find all occurences of commas\n    new_text = re.sub(',', ':', new_text)\n    # find all occurences of periods\n    new_text = re.sub('.', ':', new_text)\n    # find all occurences of carets\n    new_text = re.sub(' +ct', ':', new_text)\n    # find all occurences of single spaces\n    new_text = re.sub(' +', ':', new_text)\n    # find all occurences of single commas\n    new_text = re.sub(',', ':', new_text)\n    # find all occurences of single periods\n    new_text = re.sub(' +', ':', new_text)\n    # find all occurences of carets\n    new_text = re.sub(' +ct', ':', new_text)\n    # find all occurences of one space\n    new_text = re.sub(' +', ':', new_text)\n    # find all occurences of one comma\n    new_text = re.sub(',', ':', new_text)\n    # find all occurences of one period\n    new_text = re.sub(' +', ':', new_text)\n    # find all occurences of one caret\n    new_text = re.sub(' +ct', ':', new_text)\n    # find all occurences of one colon\n    new_text = re.sub(' +:', ':', new_text)\n    # find all occurences of one slash\n    new_text = re.sub(' +/', ':', new_text)\n    # find all occurences of one bracket\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a space\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a dot\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a colon\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a bracket\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a bracket\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a bracket\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a dot\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a bracket\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a bracket\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a dot\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurences of one bracket with a slash\n    new_text = re.sub(' +[\\[\\]]', ':', new_text)\n    # find all occurence"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\"\\u00a0\")\n    text = text.replace(\",\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\":\", \"\\u00a0\")\n    text = text.replace(\";\", \"\\u00a0\")\n    text = text.replace(\"$\", \"\\u00a0\")\n    text = text.replace(\"!\",\"\\u00a0\")\n    text = text.replace(\"?\", \"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replace(\".\",\"\\u00a0\")\n    text = text.replac"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special = '\\n'\n    text = re.sub(r'[^\\w\\s]','',text)\n    text = re.sub(r'\\s+',' ',text)\n    text = re.sub(r'\\.\\.\\.',':',text)\n    text = re.sub(r'\\.',':',text)\n    text = re.sub(r'\\s+',' ',text)\n    text = re.sub(r'\\.\\.\\.','',text)\n    text = re.sub(r'[,;]',':',text)\n    text = re.sub(r'\\?[0-9]+','',text)\n    text = re.sub(r'\\?[0-9]+','',text)\n    text = re.sub(r'[0-9]+[,;]','',text)\n    text = re.sub(r'\\s+',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    text = re.sub(r'\\.\\.\\.',':',text)\n    text = re.sub(r'\\.',':',text)\n    text = re.sub(r'\\s+',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    text = re.sub(r'[0-9]+\\:',' ',text)\n    text = re.sub(r'[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    text = re.sub(r'[0-9]+[:;]',' ',text)\n    text = re.sub(r'[0-9]+[:;]',' ',text)\n    text = re.sub(r'[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+[:]',' ',text)\n    text = re.sub(r'[0-9]+[:]',' ',text)\n    text = re.sub(r'[0-9]+:[;]',' ',text)\n    text = re.sub(r'[0-9]+:[;]',' ',text)\n    text = re.sub(r'[0-9]+:[;]',' ',text)\n    text = re.sub(r'[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[,;]',':',text)\n    text = re.sub(r'[0-9]+:[,;]',':',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[;]',':',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[;]',':',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[;]',':',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[;]',':',text)\n    text = re.sub(r'[0-9]+[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]+:',' ',text)\n    text = re.sub(r'[0-9]+:[0-9]+:[0-9]+:[0-9]"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('  ',' ')\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace(':','::')\n    text = text.replace(' ',':')\n    return text\ndef replace_symbols(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('  ',' ')\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace(':','::')\n    text = text.replace(' ',':')\n    return text\ndef remove_specialchar(text):\n    '''\n    Write a function to remove spaces, commas, or dots.\n    '''\n    text = text.replace('  ',' ')\n    text = text.replace(' ','')\n    text = text.replace('.','')\n    text = text.replace(':','::')\n    text = text.replace(' ','')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    p = re.compile(r'[{}]')\n    text = p.sub(':', text)\n    text = p.sub(' ', text)\n    text = p.sub(' ', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('\\t', '\\t:\\t')\n    text = text.replace('\\n', '\\n:\\n')\n    text = text.replace('\\xa0', '\\xa0:\\xa0')\n    text = text.replace('\\u200b', '\\u200b:\\u200b')\n    text = text.replace('\\u2500', '\\u2500:\\u2500')\n    text = text.replace('\\u2502', '\\u2502:\\u2502')\n    text = text.replace('\\u250c', '\\u250c:\\u250c')\n    text = text.replace('\\u0309', '\\u0309:\\u0309')\n    text = text.replace('\\u030a', '\\u030a:\\u030a')\n    text = text.replace('\\u0340', '\\u0340:\\u0340')\n    text = text.replace('\\u0381', '\\u0381:\\u0381')\n    text = text.replace('\\u039d', '\\u039d:\\u039d')\n    text = text.replace('\\u03b1', '\\u03b1:\\u03b1')\n    text = text.replace('\\u03c4', '\\u03c4:\\u03c4')\n    text = text.replace('\\u03d6', '\\u03d6:\\u03d6')\n    text = text.replace('\\u03d8', '\\u03d8:\\u03d8')\n    text = text.replace('\\u03e0', '\\u03e0:\\u03e0')\n    text = text.replace('\\u03f0', '\\u03f0:\\u03f0')\n    text = text.replace('\\u03f1', '\\u03f1:\\u03f1')\n    text = text.replace('\\u0402', '\\u0402:\\u0402')\n    text = text.replace('\\u0403', '\\u0403:\\u0403')\n    text = text.replace('\\u0400', '\\u0400:\\u0400')\n    text = text.replace('\\u0401', '\\u0401:\\u0401')\n    text = text.replace('\\u0404', '\\u0404:\\u0404')\n    text = text.replace('\\u0405', '\\u0405:\\u0405')\n    text = text.replace('\\u0406', '\\u0406:\\u0406')\n    text = text.replace('\\u0407', '\\u0407:\\u0407')\n    text = text.replace('\\u0408', '\\u0408:\\u0408')\n    text = text.replace('\\u0409', '\\u0409:\\u0409')\n    text = text.replace('\\u040a', '\\u040a:\\u040a')\n    text = text.replace('\\u040b', '\\u040b:\\u040b')\n    text = text.replace('\\u040c', '\\u040c:\\u040c')\n    text = text.replace('\\u040d', '\\u040d:\\u040d')\n    text = text.replace('\\u040e', '\\u040e:\\u040e')\n    text = text.replace('\\u040f', '\\u040f:\\u040f')\n    text = text.replace('\\u0410', '\\u0410:\\u0410')\n    text = text.replace('\\u0411', '\\u0411:\\u0411')\n    text = text.replace('\\u0412', '\\u0412:\\u0412')\n    text = text.replace('\\u0413', '\\u0413:\\u0413')\n    text = text.replace('\\u0414', '\\u0414:\\u0414')\n    text = text.replace('\\u0415', '\\u0415:\\u0415')\n    text = text.replace('\\u0416', '\\u0416:\\u0416')\n    text = text.replace('\\u0417', '\\u0417:\\u0417')\n    text = text.replace('\\u0418', '\\u0418:\\u0418')\n    text = text.replace('\\u0419', '\\u0419:\\u0419')\n    text = text.replace('\\u041a', '\\u041a:\\u041a')\n    text = text.replace('\\u041b', '\\u041b:\\u041b')\n    text = text.replace('\\u041c', '\\u041c:\\u041c')\n    text = text.replace('\\u041d', '\\u041d:\\u041d')\n    text = text.replace('\\u041e', '\\u041e:\\u041e')\n    text = text.replace('\\u041f', '\\u041f:\\u041f')\n    text = text.replace('\\u0420', '\\u0420:\\u0420')\n    text = text.replace('\\u0421', '\\u0421:\\u0421')\n    text = text.replace('\\u0422', '\\u0422:\\u0422')\n    text = text.replace('\\u0423', '\\u0423:\\u0423')\n    text = text.replace('\\u0424', '\\u0424:\\u0424')\n    text = text.replace('\\u0425', '\\u0425:\\u0425')\n    text = text.replace('\\u0426', '\\u0426:\\u0426')\n    text = text.replace('\\u0427', '\\u0427:\\u0427')\n    text = text.replace('\\u0428', '\\u0428:\\u0428')\n    text = text.replace('\\u0429', '\\u0429:\\u0429')\n    text = text.replace('\\u042a', '\\u042a:\\u042a')\n    text = text.replace('\\u042b', '\\u042b:\\u042b')\n    text = text.replace('\\u042c', '\\u042c:\\u042c')\n    text = text.replace('\\u042d', '\\u042d:\\u042d')\n    text = text.replace('\\u042e', '\\u042e:\\u042e')\n    text = text.replace('\\u042f', '\\u042f:\\u042f')\n    text = text.replace('\\u0430', '\\u0430:\\u0430')\n    text = text.replace('\\u0431', '\\u0431:\\u0431')\n    text = text.replace('\\u0432', '\\u0432:\\u0432')\n    text = text.replace('\\u0433', '\\u0433:\\u0433')\n    text = text.replace('\\u0434', '\\u0434:\\u0434')\n    text = text.replace('\\u0435', '\\u0435:\\u0435')\n    text = text.replace('\\u0436', '\\u0436:\\u0436')\n    text = text.replace('\\u0437', '\\u0437:\\u0437')\n    text = text.replace('\\u0438', '\\u0438:\\u0438')\n    text = text.replace('\\u043a', '\\u043a:\\u043a')\n    text = text.replace('\\u043b', '\\u043b:\\u043b')\n    text = text.replace('\\u043c', '\\u043c:\\u043c')\n    text = text.replace('\\u043d', '\\u043d:\\u043d')\n    text = text.replace('\\u043e', '\\u043e:\\u043e')\n    text = text.replace('\\u043f', '\\u043f:\\u043f')\n    text = text.replace('\\u0440', '\\u0440:\\u0440')\n    text = text.replace('\\u0441', '\\u0441:\\u0441')\n    text = text.replace('\\u0442', '\\u0442:\\u0442')\n    text = text.replace('\\u0443', '\\u0443:\\u0443')\n    text = text"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    l = 0\n    r = n-1\n    \n    while(l<=r):\n        mid = (l+r)//2\n        if A[mid]==x:\n            return mid\n        if A[mid]>x:\n            r = mid-1\n        else:\n            l = mid+1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    low = 0\n    high = len(A)-1\n    while low<=high:\n        mid = (low+high)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if n == 0:\n        return -1\n    elif n == 1:\n        if A[0] == x:\n            return 0\n        else:\n            return -1\n    else:\n        idx = 0\n        while A[idx]!= x:\n            if A[idx] > x:\n                idx += 1\n            elif A[idx] < x:\n                idx += 1\n            else:\n                return idx\n        return idx\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    m = len(A)\n    l = 0\n    h = m-1\n    # first find the smallest number in the array\n    while h >= l and A[l] >= A[h]:\n        l += 1\n    # find the index of the smallest number\n    while l < m and A[l] < A[h]:\n        l += 1\n    # if the number at the index is greater then the smallest number\n    return l\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the first occurence of x\n    start_index = 0\n    end_index = len(A) - 1\n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n        if A[mid_index] == x:\n            return mid_index\n        elif A[mid_index] < x:\n            start_index = mid_index + 1\n        else:\n            end_index = mid_index - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    A.sort()\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    return i\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n    while(start <= end):\n        mid = start + ((end-start) >> 1)\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def find_first_occurrence_rec(A, x):\n        if x not in A:\n            return -1\n        i = 0\n        while i < len(A) and A[i]!= x:\n            i += 1\n        return i\n    return find_first_occurrence_rec(A, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    else:\n        left = 0\n        right = len(A)-1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if A[mid] == x:\n                return mid\n            elif A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n    \ndef find_second_occurrence(A, x):\n    '''\n    Write a function to find the index of the second occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    else:\n        left = 0\n        right = len(A)-1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if A[mid] == x:\n                return mid\n            elif A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([prod for sub in itertools.product(*arr) for prod in sub])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_sum = 0\n    temp_arr = arr\n    for i in range(len(temp_arr)):\n        temp_sum = 0\n        for j in range(i, len(temp_arr)):\n            temp_sum += temp_arr[j]\n            max_sum = max(max_sum, temp_sum)\n    return max_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    summ=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            summ+=arr[i]*arr[j]\n    return summ\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    length = len(arr)\n    for i in range(0, length):\n        for j in range(i + 1, length):\n            sum = sum + arr[j] * arr[i]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * arr[i]\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product = 1\n    #initialize empty list\n    sublist_results = []\n    #assign empty list to create\n    for i in range(len(arr)):\n        sublist_results.append([])\n    #Loop through the array elements\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            #if the element is in sublist results\n            if(arr[i] in sublist_results[j]):\n                #add to product\n                product = product * arr[i]\n                #extend sublist results\n                sublist_results[j].append(arr[i])\n                #extend sublist results\n                sublist_results[j].append(arr[i])\n                #pop last element and concat\n                sublist_results[j].pop()\n                sublist_results[j].pop()\n                \n            #else:\n            #    product = product * arr[i]\n            #    sublist_results[i].append(arr[i])\n    #return the product\n    return product\n    \n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]*(i+1)\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            total += arr[i]*arr[j]\n    return total\ndef main():\n    arr = [5,6,7,8,9,10,11,12,13,14,15]\n    print(sum_Of_Subarray_Prod(arr))\n    print(sum_Of_Subarray_Prod(arr[:-1]) + arr[-1])\nmain()"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    sub_arr = [[] for i in range(len(arr) + 1)]\n    i = 0\n    for item in arr:\n        sub_arr[i + 1].append(item)\n        i += 1\n    \n    sum_of_prod = []\n    for j in range(1, len(sub_arr)):\n        sum_of_prod.append(sum(sub_arr[j]))\n    \n    result = []\n    for i in range(1, len(sum_of_prod)):\n        for j in range(i, len(sub_arr)):\n            result.append(sum_of_prod[i] * sub_arr[j][i-1] * sub_arr[j][i])\n    \n    return(sum(result))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    output = bin(n)[2:] + bin(n)[:len(bin(n)[2:]) - 1]\n    return output\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & (n - 1)) >> 1\n    if n & 1:\n        n = n | 0x80000000\n    else:\n        n = n | 0x80000000\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def to_bin(n):\n        return bin(n)[2:].zfill(8)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    while n > 0:\n        tmp = n & 1\n        n >>= 1\n        n = tmp | (n >> 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    my_bin_str = bin(n)\n    first = my_bin_str[2:]\n    last = my_bin_str[:2]\n    if len(first) == 1:\n        first = \"0\" + first\n    if len(last) == 1:\n        last = \"0\" + last\n    return first + last\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & ~0b10000000\n    return m\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n % 2 == 1:\n        print(f'{n} is odd')\n    else:\n        print(f'{n} is even')\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return [1 if i%2==0 else 0 for i in range(n)]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(n)\n    print(bin(n))\n    print(bin(n)[2:])\n    if n < 0:\n        print(\"Negative number can't be turned\")\n    elif n > 0:\n        print(\"Not zero number can't be turned\")\n    else:\n        print(\"Number can't be turned\")\n    #print(bin(n))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get number\n    num = int(input())\n    # check if number is odd\n    if num & 1 == 1:\n        print('1')\n    # check if number is even\n    elif num & 1 == 0:\n        print('0')\n    # toggle\n    else:\n        print('1')\n    # return number\n    return num\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a) - 1\n    mid = 0\n    #while low < high:\n    while low < high:\n        mid = (high + low) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    try:\n        i = bisect.bisect_left(a, x)\n    except ValueError:\n        return -1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # return bisect.bisect_left(a, x, lo=0, hi=len(a))\n    return bisect.bisect_left(a, x) - 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # return bisect.bisect_right(a, x, lo=0, hi=len(a))\n    return bisect.bisect_right(a, x) + 1\ndef merge(a, b):\n    '''\n    Write a function to merge two sorted lists into a sorted list.\n    '''\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        a[0], b[0] = b[0], a[0]\n    return a + b\ndef sort(a):\n    '''\n    Write a function to sort a list using insertion, left_insertion, or merge sort.\n    '''\n    a.sort(key=lambda x: x[0])\n    l = len(a)\n    if l > 1:\n        if l % 2 == 0:\n            if left_insertion(a, l//2) <= right_insertion(a, l//2):\n                a = left_insertion(a, l//2)\n                a = merge(a, a[:l//2])\n                a = a[l//2:]\n            else:\n                a = left_insertion(a, (l//2)-1)\n                a = merge(a, a[:l//2])\n                a = a[l//2:]\n        else:\n            if left_insertion(a, l//2) <= right_insertion(a, l//2):\n                a = left_insertion(a, l//2)\n                a = merge(a, a[:l//2])\n                a = a[l//2:]\n            else:\n                a = left_insertion(a, (l//2)-1)\n                a = merge(a, a[:l//2])\n                a = a[l//2:]\n        return a\n    else:\n        return a"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    b = bisect.bisect_left(a, x)\n    if b == len(a):\n        return b-1\n    else:\n        return b\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i > len(a) or a[i-1] > x:\n        return i - 1\n    else:\n        return i\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'AEIOU' \n    vowel_set = set(vowels)\n    if re.search(vowels, string) == None: \n        return False \n    else: \n        return True \ndef check_nums(string): \n    '''\n    Write a function to check whether the given string is starting with a number or not using regex.\n    '''\n    numbers = '1234567890'\n    num_set = set(numbers)\n    if re.search(numbers, string) == None: \n        return False \n    else: \n        return True \ndef check_one_word(string): \n    '''\n    Write a function to check whether the given string is a single word or not using regex.\n    '''\n    word = '!@#$%^&*()<>,./?!@#$%^&*-_=+[{]}]()'\n    word_set = set(word)\n    if re.search(word, string) == None: \n        return False \n    else: \n        return True \ndef check_punctuation(string): \n    '''\n    Write a function to check whether the given string contains any of the special characters. \n    '''\n    special_chars = '.,$?!'\n    special_char_set = set(special_chars)\n    if re.search(special_char_set, string) == None: \n        return False \n    else: \n        return True \ndef check_punctuation_double(string): \n    '''\n    Write a function to check whether the given string contains any of the special characters. \n    '''\n    special_chars = '.,$?!'\n    special_char_set = set(special_chars)\n    if re.search(special_char_set, string) == None: \n        return False \n    else: \n        return True \ndef check_digits(string): \n    '''\n    Write a function to check whether the given string contains any of the special characters. \n    '''\n    special_chars = '.,$?!.'\n    special_char_set = set(special_chars)\n    if re.search(special_char_set, string) == None: \n        return False \n    else: \n        return True \ndef check_alpha(string): \n    '''\n    Write a function to check whether the given string contains any of the special characters. \n    '''\n    special_chars = '.,$?!.'\n    special_char_set = set(special_chars)\n    if re.search(special_char_set, string) == None: \n        return False \n    else: \n        return True \ndef check_double_punctuation(string): \n    '''\n    Write a function to check whether the given string contains any of the special characters. \n    '''\n    special_chars = '.,$?!.'\n    special_char_set = set(special_chars)\n    if re.search(special_char_set, string) == None: \n        return False \n    else: \n        return True \ndef check_single_punctuation(string): \n    '''\n    Write a function to check whether the given string contains any of the special characters. \n    '''\n    special_chars = '.,$?!.'\n    special_char_set = set(special_chars)\n    if re.search(special_char_set, string) == None: \n        return False \n    else: \n        return True \ndef check_numbers(string): \n    '''\n    Write a function to check whether the given string contains any of the special characters. \n    '''\n    special_chars = '.,$?!.'\n    special_char_set = set(special_chars)\n    if re.search(special_char_set, string) == None: \n        return False \n    else: \n        return True \ndef check_sentence(string): \n    '''\n    Write a function to check whether the given string contains any of the special characters. \n    '''\n    special_chars = '.,$?!.'\n    special_char_set = set(special_chars)\n    if re.search(special_char_set, string) == None: \n        return False \n    else: \n        return True \ndef check_one_word_sentence(string): \n    '''\n    Write a function to check whether the given string is a single word or not using regex.\n    '''\n    word = '!@#$%^&*()<>,./?!@#$%^&*-_=+[{]}]()'\n    word_set = set(word)\n    if re.search(word_set, string) == None: \n        return False \n    else: \n        return True \ndef check_repeating_word(string): \n    '''\n    Write a function to check whether the given string contains any of the special characters. \n    '''\n    special_chars = '.,$?!.'\n    special_char_set = set(special_chars)\n    if re.search(special_char_set, string) == None: \n        return False \n    else: \n        return True \ndef check_one_word_repeating_word(string): \n    '''\n    Write a function to check whether the given string is a single word or not using regex.\n    '''\n    word = '!@#$%^&*()<>,./?!@#$%^&*-_=+[{]}]()'\n    word_set = set(word)\n    if re.search(word_set, string) == None: \n        return False \n    else: \n        return True \ndef check_one_word_repeating_word_check(string): \n    '''\n    Write a function to check whether the given string is a single word or not using regex.\n    '''\n    word = '!@#$%^&*()<>,./?!@#$%^&*-_=+[{]}]()'\n    word_set = set(word)\n    if re.search(word_set, string) == None: \n        return False \n    else: \n        return True \ndef check_one_word_repeating_word_repeat(string): \n    '''\n    Write a function to check whether the given string is a single word or not using regex.\n    '''\n    word = '!@#$%^&*()<>,./?!@#$%^&*-_=+[{]}]()'\n    word_set = set(word)\n    if re.search(word_set, string) == None: \n        return False \n    else: \n        return True \ndef check_one_word_repeating_word_no_repeat(string): \n    '''\n    Write a function to check whether the given string is a single word or not using regex.\n    '''\n    word = '!@#$%^&*()<>,./?!@#$%^&*-_=+[{]}]()'\n    word_set = set(word)\n    if re.search(word_set, string) == None: \n        return False \n    else: \n        return True \ndef check_one_word_repeating_word_no_repeat_check(string): \n    '''\n    Write a function to check whether the given string is a single word or not using regex.\n    '''\n    word = '!@#$%^&*()<>,./?!@#$%^&*-_=+[{]}]()'\n    word_set = set(word)\n    if re.search(word_set, string) == None: \n        return False \n    else: \n        return True \ndef check_one_word_repeating_word_repeating_word(string): \n    '''\n    Write a function to check whether the given string is a single word or not using regex.\n    '''\n    word = '!@#$%^&*()<>,./?!@#$%^&*-_=+[{]}]()'\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    m = re.search(regex, string)\n    if m:\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] not in \"AEIOU\": \n        return False\n    else:\n        return string[0] == 'a' or string[0] == 'e' or string[0] == 'i' or string[0] == 'o' or string[0] == 'u' or string[0] == 'A' or string[0] == 'E' or string[0] == 'I' or string[0] == 'O' or string[0] == 'U' or string[0] == '1' or string[0] == '2' or string[0] == '3' or string[0] == '4' or string[0] == '5' or string[0] == '6' or string[0] == '7' or string[0] == '8' or string[0] == '9':\n        return True \ndef check_password(string): \n    '''\n    Write a function to check whether the given string is password or not.\n    '''\n    if len(string) < 8:\n        return False\n    else:\n        if any(c in string for c in [\"-\", \"!\", \"$\", \"%\", \"&\", \"(\", \")\", \"_\", \"*\"]): \n            return False\n        elif any(c in string for c in [\"(\", \")\", \"*\"]):\n            return False\n        elif any(c in string for c in [\"#\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"$\"]):\n            return False\n        elif any(c in string for c in [\"*\"]):\n            return False\n        elif any(c in string for c in [\"+\"]):\n            return False\n        elif any(c in string for c in [\"(\", \")\"]):\n            return False\n        elif any(c in string for c in [\"%\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"$\"]):\n            return False\n        elif any(c in string for c in [\"*\"]):\n            return False\n        elif any(c in string for c in [\"%\"]):\n            return False\n        elif any(c in string for c in [\"+\"]):\n            return False\n        elif any(c in string for c in [\"+\"]):\n            return False\n        elif any(c in string for c in [\"(\", \")\"]]):\n            return False\n        elif any(c in string for c in [\"(\", \")\"]]):\n            return False\n        elif any(c in string for c in [\"!\"]):\n            return False\n        elif any(c in string for c in [\"!\"]):\n            return False\n        elif any(c in string for c in [\"$\"]):\n            return False\n        elif any(c in string for c in [\"%\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"$\"]):\n            return False\n        elif any(c in string for c in [\"*\"]):\n            return False\n        elif any(c in string for c in [\"+\"]):\n            return False\n        elif any(c in string for c in [\"+\"]):\n            return False\n        elif any(c in string for c in [\"(\", \")\"]]):\n            return False\n        elif any(c in string for c in [\"(\", \")\"]]):\n            return False\n        elif any(c in string for c in [\"!\"]):\n            return False\n        elif any(c in string for c in [\"!\"]):\n            return False\n        elif any(c in string for c in [\"$\"]):\n            return False\n        elif any(c in string for c in [\"%\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"$\"]):\n            return False\n        elif any(c in string for c in [\"*\"]):\n            return False\n        elif any(c in string for c in [\"+\"]):\n            return False\n        elif any(c in string for c in [\"+\"]):\n            return False\n        elif any(c in string for c in [\"(\", \")\"]]):\n            return False\n        elif any(c in string for c in [\"(\", \")\"]]):\n            return False\n        elif any(c in string for c in [\"!\"]):\n            return False\n        elif any(c in string for c in [\"!\"]):\n            return False\n        elif any(c in string for c in [\"$\"]):\n            return False\n        elif any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"&\"]):\n            return False\n        elif any(c in string for c in [\"$\"]):\n            return False\n        elif any(c in string for c in [\"*\"]):\n            return False\n        elif any(c in string for c in [\"+\"]):\n            return False\n        elif any(c in string for c in [\"+\"]):\n            return False\n        elif any(c in string for c in [\"(\", \")\"]]):\n            return False\n        elif any(c in string for c in [\"(\", \")\"]]):\n            return False\n        elif any(c in string for c in [\"!\"]):\n            return False\n        elif any(c in string for c in [\"!\"]):\n            return False\n        elif any(c in string for c in [\"$\"]):\n            return False\n        elif any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in [\"%\"]) or any(c in string for c in ["
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string.startswith(('A', 'E', 'I', 'O', 'U', 'Y')):\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if len(string)<=1:\n        return True\n    if string[0] in 'aeiouAEIOU':\n        return string[0] in 'aeiouAEIOU'\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'aeiouAEIOU': \n        return True\n    else: \n        return False\n    \n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    for i in range(len(string)): \n        if(string[i]=='A' or string[i]=='E' or string[i]=='I' or string[i]=='O' or string[i]=='U'):\n            return True\n    return False\ndef check_char(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    for i in range(len(string)): \n        if(string[i]=='a' or string[i]=='e' or string[i]=='i' or string[i]=='o' or string[i]=='u'):\n            return True\n    return False\ndef check_word(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if(string[0]=='A' or string[0]=='E' or string[0]=='I' or string[0]=='O' or string[0]=='U'):\n        return True\n    return False\ndef make_dict(string):\n    '''\n    Write a function to split the given string into a dictionary using regex.\n    '''\n    if(string==\" \"):\n        return {}\n    tokens = string.split(' ')\n    key = ''.join(filter(check_str, tokens))\n    value = ''.join(filter(check_str, tokens))\n    return {key:value}\ndef make_dict1(string):\n    '''\n    Write a function to split the given string into a dictionary using regex.\n    '''\n    if(string==\" \"):\n        return {}\n    tokens = string.split(' ')\n    key = ''.join(filter(check_str, tokens))\n    value = ''.join(filter(check_str, tokens))\n    return {key:value}\ndef make_dict2(string):\n    '''\n    Write a function to split the given string into a dictionary using regex.\n    '''\n    if(string==\" \"):\n        return {}\n    tokens = string.split(' ')\n    key = ''.join(filter(check_char, tokens))\n    value = ''.join(filter(check_char, tokens))\n    return {key:value}\ndef make_dict3(string):\n    '''\n    Write a function to split the given string into a dictionary using regex.\n    '''\n    if(string==\" \"):\n        return {}\n    tokens = string.split(' ')\n    key = ''.join(filter(check_word, tokens))\n    value = ''.join(filter(check_word, tokens))\n    return {key:value}\ndef make_dict4(string):\n    '''\n    Write a function to split the given string into a dictionary using regex.\n    '''\n    if(string==\" \"):\n        return {}\n    tokens = string.split(' ')\n    key = ''.join(filter(check_word, tokens))\n    value = ''.join(filter(check_word, tokens))\n    return {key:value}\ndef make_dict5(string):\n    '''\n    Write a function to split the given string into a dictionary using regex.\n    '''\n    if(string==\" \"):\n        return {}\n    tokens = string.split(' ')\n    key = ''.join(filter(check_word, tokens))\n    value = ''.join(filter(check_word, tokens))\n    return {key:value}\ndef check_list(list):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    for i in range(len(list)): \n        if(list[i]=='A' or list[i]=='E' or list[i]=='I' or list[i]=='O' or list[i]=='U'):\n            return True\n    return False\ndef check_char_list(list):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    for i in range(len(list)): \n        if(list[i]=='a' or list[i]=='e' or list[i]=='i' or list[i]=='o' or list[i]=='u'):\n            return True\n    return False\ndef check_word_list(list):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    for i in range(len(list)): \n        if(list[i]=='A' or list[i]=='E' or list[i]=='I' or list[i]=='O' or list[i]=='U'):\n            return True\n    return False\ndef check_space(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if(string==\" \"):\n        return True\n    if(string==\"a\" or string==\"e\" or string==\"i\" or string==\"o\" or string==\"u\"):\n        return True\n    return False\ndef check_space1(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if(string==\" \"):\n        return True\n    if(string==\"a\" or string==\"e\" or string==\"i\" or string==\"o\" or string==\"u\"):\n        return True\n    return False\ndef check_space2(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if(string==\" \"):\n        return True\n    if(string==\"a\" or string==\"e\" or string==\"i\" or string==\"o\" or string==\"u\"):\n        return True\n    return False\ndef check_space3(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if(string==\" \"):\n        return True\n    if(string==\"A\" or string==\"E\" or string==\"I\" or string==\"O\" or string==\"U\"):\n        return True\n    return False\ndef check_space4(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if(string==\" \"):\n        return True\n    if(string==\"A\" or string==\"E\" or string==\"I\" or string==\"O\" or string==\"U\"):\n        return True\n    return False\ndef check_space5(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if(string==\" \"):\n        return True\n    if(string==\"A\" or string==\"E\" or string==\"I\" or string==\"O\" or string==\"U\"):\n        return True\n    return False\ndef make_list(string):\n    '''\n    Write a function to split the given string into a list using regex.\n    '''\n    if(string==\" \"):\n        return []\n    tokens = string.split(' ')\n    return tokens\ndef make_tokens(string):\n    '''\n    Write a function to split the given string into a list using regex.\n    '''\n    if(string==\" \"):\n        return []\n    tokens = string.split(' ')\n    return tokens\ndef make_index(string):\n    '''\n    Write a function to split the given string into a list using regex.\n    '''\n    if(string==\" \"):\n        return []\n    tokens = string.split(' ')\n    return tokens\ndef make_index2(string):\n    '''\n    Write a function to split the given string into a list using regex.\n    '''\n    if(string==\" \"):\n        return []\n    tokens = string.spli"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    s = 1\n    for i in range(n - 1):\n        s = s * (i + 1)\n    return s\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def gs(n):\n        if n == 0:\n            return 0\n        else:\n            return n*gs(n-1)\n    return gs(n)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.floor(math.log(n, 3)))+1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    lst = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            lst.append(i)\n    return lst.index(1) + 1\ndef remove_zeros(lst):\n    '''\n    Write a python function to remove the zeros from lst.\n    '''\n    if lst[0] == 0:\n        del lst[0]\n    return lst\ndef reverse_list(lst):\n    '''\n    Write a python function to reverse the list.\n    '''\n    return lst[::-1]\ndef square_of_list(lst):\n    '''\n    Write a python function to square each element of the list.\n    '''\n    for i in lst:\n        i **= 2\n    return lst\ndef compress_list(lst):\n    '''\n    Write a python function to compress the list.\n    '''\n    lst = remove_zeros(lst)\n    lst = square_of_list(lst)\n    lst = reverse_list(lst)\n    return lst\ndef is_prime(n):\n    '''\n    Write a python function to check whether number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\ndef add(lst, x, y):\n    '''\n    Write a python function to add the values of the first and second lists.\n    '''\n    if lst[0] == 0:\n        lst = remove_zeros(lst)\n    lst.insert(0,x)\n    lst.insert(1,y)\n    return lst\ndef substract(lst, x, y):\n    '''\n    Write a python function to subtract the values of the first and second lists.\n    '''\n    if lst[0] == 0:\n        lst = remove_zeros(lst)\n    lst.insert(0,x)\n    lst.insert(1,y)\n    return lst\ndef multiply(lst, x, y):\n    '''\n    Write a python function to multiply the values of the first and second lists.\n    '''\n    if lst[0] == 0:\n        lst = remove_zeros(lst)\n    lst.insert(0,x)\n    lst.insert(1,y)\n    return lst\ndef divide(lst, x, y):\n    '''\n    Write a python function to divide the values of the first and second lists.\n    '''\n    if lst[0] == 0:\n        lst = remove_zeros(lst)\n    lst.insert(0,x)\n    lst.insert(1,y)\n    return lst\ndef add_product(lst, x, y):\n    '''\n    Write a python function to add the values of the first and second lists.\n    '''\n    if lst[0] == 0:\n        lst = remove_zeros(lst)\n    lst.insert(0,x)\n    lst.insert(1,y)\n    return lst\ndef calculate_sum(lst, exp):\n    '''\n    Write a python function to calculate the sum of the elements of the first list.\n    '''\n    sum = 0\n    for i in lst:\n        sum += i**exp\n    return sum\ndef calculate_product(lst, exp):\n    '''\n    Write a python function to calculate the product of the elements of the first list.\n    '''\n    product = 1\n    for i in lst:\n        product *= i**exp\n    return product\ndef calculate_divide(lst, x, y):\n    '''\n    Write a python function to calculate the product of the first and second lists.\n    '''\n    if lst[0] == 0:\n        lst = remove_zeros(lst)\n    lst.insert(0,x)\n    lst.insert(1,y)\n    return lst\ndef calculate_square(lst, exp):\n    '''\n    Write a python function to calculate the square of the elements of the first list.\n    '''\n    squared = 1\n    for i in lst:\n        squared *= i**exp\n    return squared\ndef calculate_exponent(lst, exp):\n    '''\n    Write a python function to calculate the exponent of the elements of the first list.\n    '''\n    exponent = 1\n    for i in lst:\n        exponent *= i**exp\n    return exponent\ndef calculate_product_of_product(lst, exp):\n    '''\n    Write a python function to calculate the product of the first and second lists.\n    '''\n    product = 1\n    for i in lst:\n        product *= i**exp\n    return product\ndef calculate_division_of_division(lst, x, y):\n    '''\n    Write a python function to calculate the product of the first and second lists.\n    '''\n    division = 1\n    for i in lst:\n        division *= i**x\n    return division\ndef calculate_sqrt(lst, exp):\n    '''\n    Write a python function to calculate the square root of the elements of the first list.\n    '''\n    squared = 1\n    for i in lst:\n        squared *= i**exp\n    return squared\ndef calculate_exponent_of_product(lst, exp):\n    '''\n    Write a python function to calculate the exponent of the first list.\n    '''\n    exponent = 1\n    for i in lst:\n        exponent *= i**exp\n    return exponent\ndef calculate_product_of_division(lst, exp):\n    '''\n    Write a python function to calculate the product of the first and second lists.\n    '''\n    product = 1\n    for i in lst:\n        product *= i**exp\n    return product\ndef calculate_divide_of_division(lst, x, y):\n    '''\n    Write a python function to calculate the product of the first and second lists.\n    '''\n    division = 1\n    for i in lst:\n        division *= i**x\n    return division\ndef calculate_square_of_product(lst, exp):\n    '''\n    Write a python function to calculate the square of the first list.\n    '''\n    squared = 1\n    for i in lst:\n        squared *= i**exp\n    return squared\ndef calculate_exponent_of_product(lst, exp):\n    '''\n    Write a python function to calculate the exponent of the first list.\n    '''\n    exponent = 1\n    for i in lst:\n        exponent *= i**exp\n    return exponent\ndef calculate_product_of_division(lst, exp):\n    '''\n    Write a python function to calculate the product of the first and second lists.\n    '''\n    product = 1\n    for i in lst:\n        product *= i**exp\n    return product\ndef calculate_division_of_division(lst, x, y):\n    '''\n    Write a python function to calculate the product of the first and second lists.\n    '''\n    division = 1\n    for i in lst:\n        division *= i**x\n    return division\ndef calculate_square_of_product(lst, exp):\n    '''\n    Write a python function to calculate the square of the first list.\n    '''\n    squared = 1\n    for i in lst:\n        squared *= i**exp\n    return squared\ndef calculate_exponent_of_division(lst, exp):\n    '''\n    Write a python function to calculate the exponent of the first list.\n    '''\n    exponent = 1\n    for i in lst:\n        exponent *= i**exp\n    return exponent\ndef calculate_product_o"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    low = 0\n    high = n+1\n    while(high - low > 1): \n        mid = (high + low)//2\n        if find_Index(mid) == -1: \n            low = mid \n        else: \n            high = mid \n    return high \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    if n < 0 or n > 36:\n        print(\"Invalid Input\")\n        return\n    while n > 36:\n        n /= 3\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    #initialize the while loop to find index of smallest triangular number\n    while n%10!=0:\n        n = n//10\n        #the last number will always be equal to n-1\n        n = n -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # your code goes here\n    i = 0\n    j = 1\n    while(j < n):\n        print (j)\n        j = j + 2\n    i = n+1\n    print(\"the index of smallest triangular number:\",i)\n    return i\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = n \n    index = 1\n    while(num > 1):\n        if num % 10 == 1:\n            index += 1\n        elif num % 10 == 3:\n            index += 1\n        elif num % 10 == 5:\n            index += 1\n        elif num % 10 == 7:\n            index += 1\n        elif num % 10 == 9:\n            index += 1\n        elif num % 10 == 11:\n            index += 1\n        else:\n            index += 1\n        num //= 10\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    h = int(math.floor(math.log10(n)))\n    for i in range(1, h+1):\n        if n > (1e2**i):\n            return i \n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    lst = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    for i in range(len(lst)):\n        temp = lst[i]\n        index = lst.index(temp)\n        lst[i] = temp\n        if index < n:\n            continue\n        else:\n            return n\n    if len(lst) == 1:\n        return 0\n    else:\n        return len(lst)-1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return int(n/i)\n    return -1\ndef is_prime(num):\n    '''\n    Return True if the number num is prime else return False\n    '''\n    if num<2:\n        return False\n    elif num==2 or num==3:\n        return True\n    elif num%2==0 or num%3==0:\n        return False\n    else:\n        for i in range(5,int(math.sqrt(num))+1,6):\n            if num%i==0:\n                return False\n        return True\ndef is_perfect_square(n):\n    '''\n    Return True if the number n is perfect square else return False\n    '''\n    if n<2:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        return n%6==0\ndef is_in_base_10(n,b):\n    '''\n    Return True if n is in base 10 and b is one of the digits in base b else return False\n    '''\n    if n<2:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        i=0\n        while(n%10!=b):\n            i+=1\n            n//=10\n        return i==1\ndef get_perm(n):\n    '''\n    Return the list of all the permutations of n.\n    '''\n    if n==1 or n==2:\n        return [[1]]\n    if n<3:\n        return []\n    else:\n        res=[]\n        for i in range(1,n//2+1):\n            res+=get_perm(n-i)\n        for i in range(len(res)-1):\n            for j in range(i+1,len(res)):\n                res[i]+=res[j]\n        return res\ndef sub_matrix(A,i,j,n):\n    '''\n    Return the n by n submatrix of A.\n    '''\n    if i<0 or j<0:\n        return -1\n    if i==len(A) or j==len(A[0]):\n        return A\n    res=[]\n    for i in range(len(A[0])):\n        if A[i][j]==0:\n            res+=[[]]\n        else:\n            res+=[[0,A[i][j]]]\n            res+=sub_matrix(A,i,j-1,n)\n    return res\ndef trace(A,n):\n    '''\n    Return the n by n trace matrix of A.\n    '''\n    if n<3:\n        return [[0]]\n    res=[]\n    for i in range(n):\n        if A[i][i]==0:\n            res+=[[]]\n        else:\n            res+=[[0,A[i][i]]]\n            res+=trace(A,n-i-1)\n    return res\ndef rotate_matrix(A):\n    '''\n    Return the n by n rotated matrix of A.\n    '''\n    if A.shape[0]<A.shape[1]:\n        return trace(A,A.shape[0])\n    else:\n        return A\ndef print_matrix(A):\n    '''\n    Print the n by n matrix of A.\n    '''\n    for i in range(A.shape[0]):\n        for j in range(A.shape[1]):\n            print(A[i][j],end=' ')\n        print()\ndef add_matrix(A,B):\n    '''\n    Return the n by n matrix of A and B.\n    '''\n    if B.shape[0]==A.shape[1]:\n        return A+B\n    elif B.shape[0]>A.shape[1]:\n        return add_matrix(B,A)\n    else:\n        return add_matrix(A,B)\ndef mult_matrix(A,B):\n    '''\n    Return the n by n matrix of A and B.\n    '''\n    if B.shape[1]==A.shape[0]:\n        return A*B\n    elif B.shape[1]>A.shape[0]:\n        return add_matrix(mult_matrix(B,A),A)\ndef transpose(A):\n    '''\n    Return the transpose of the n by n matrix of A.\n    '''\n    return A.transpose()\ndef conv(A,B):\n    '''\n    Return the n by n matrix of A and B.\n    '''\n    if B.shape[0]==A.shape[1]:\n        return A-B\n    elif B.shape[0]>A.shape[1]:\n        return conv(B,A)\n    else:\n        return conv(A,B)\ndef take_square(A):\n    '''\n    Return the n by n square matrix of A.\n    '''\n    if A.shape[0]<=A.shape[1]:\n        return A\n    else:\n        return take_square(A.transpose())\ndef solve(A,b):\n    '''\n    Return the solution b to the system A x = b.\n    '''\n    x=[]\n    if A.shape[0]<2 or A.shape[0]>3:\n        x=[]\n    else:\n        x=[[0,0]]\n        x=take_square(A)\n        x=add_matrix(x,x)\n        x=mult_matrix(x,x)\n        x=transpose(x)\n        res=trace(x,len(x))\n        for i in range(len(res)):\n            if i==0:\n                x[i]=int(res[i])\n            else:\n                x[i]=int(x[i])+int(res[i])\n    for i in range(len(x)):\n        x[i]=math.floor(x[i])\n    return x\ndef check(A,b):\n    '''\n    Return True if A and b is equal to zero otherwise return False.\n    '''\n    if abs(A)<10**-300:\n        return True\n    if A.shape[0]==A.shape[1]:\n        if math.isclose(A[0][0],0,abs_tol=1e-300)==True:\n            return False\n        else:\n            return True\n    else:\n        if math.isclose(A[0][0],0,abs_tol=1e-300)==True:\n            return False\n        else:\n            return check(A[1:],b)\ndef multiply(A,B):\n    '''\n    Return the result of A x = B.\n    '''\n    A=add_matrix(A,A)\n    B=add_matrix(B,A)\n    if B.shape[0]<2:\n        return [A,B]\n    else:\n        B=take_square(B)\n        B=add_matrix(B,B)\n        B=mult_matrix(B,B)\n        B=transpose(B)\n        res=trace(B,len(B))\n        for i in range(len(res)):\n            if i==0:\n                B[i]=int(res[i])\n            else:\n                B[i]=int(B[i])+int(res[i])\n        return [B,B]\ndef add_plus(A,B):\n    '''\n    Return the result of A x = B.\n    '''\n    if A.shape[0]==A.shape[1]:\n        return A+B\n    else:\n        return add_plus(A,B.transpose())\ndef minus(A,B):\n    '''\n    Return the result of A x = B.\n    '''\n    if A.shape[0]==A.shape[1]:\n        return A-B\n    else:\n        return minus(A.transpose(),B)\ndef multi(A,B):\n    '"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # If the tuple is empty\n    if len(test_tup) == 0:\n        return {}\n    # If the tuple is not empty\n    elif len(test_tup) > 0:\n        return {test_tup[0]:test_tup[1:]}\n    # If the tuple is just one element\n    else:\n        return {}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create empty dictionary to store key value pairs\n    result = {}\n    for index in range(len(test_tup)):\n        result[test_tup[index]] = test_tup[index + 1]\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for k,v in enumerate(test_tup):\n        dict[v] = k\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    # create a new dictionary\n    dict = {}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {'name':test_tup[0], 'age':test_tup[1]}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(len(test_tup)):\n        new_dict[test_tup[i][0]] = test_tup[i][1]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    temp_dict = {}\n    for i in range(len(test_tup)):\n        temp_dict[test_tup[i][0]] = test_tup[i][1]\n    return temp_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i,e in enumerate(test_tup):\n        d[e] = i\n    return d\n    \ndef init_dict(input_file):\n    '''\n    Return a dictionary of all the words in a given file\n    '''\n    word_dict = dict()\n    with open(input_file, 'r', encoding='utf8') as f:\n        for line in f:\n            line = line.strip()\n            if line.startswith('#'):\n                continue\n            if not line:\n                continue\n            word_list = line.split()\n            for word in word_list:\n                if word not in word_dict:\n                    word_dict[word] = set()\n                word_dict[word].add(word)\n    return word_dict\n    \ndef find_word(word_dict, word):\n    '''\n    Return the indices of the given word in the dictionary.\n    '''\n    return word_dict[word]\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # def convert_tuple(tup):\n    #     '''\n    #     Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    #     '''\n    #     temp = []\n    #     for i in range(len(tup)):\n    #         temp.append({tup[i][0]:tup[i][1]})\n    #     return temp\n    #     '''\n    #     A new list is returned, so the function can be called again with a different tuple\n    #     '''\n    #     return tuple(temp)\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[0::2],tup[1::2]))\n    #     '''\n    #     A new dictionary is returned, so the function can be called again with a different tuple\n    #     '''\n    #     return dict(zip(tup[0::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    #     You need to write a function to convert a list of tuples to a dictionary of key-value pairs.\n    #     '''\n    #     return dict(zip(tup[::2],tup[1::2]))\n    #     '''\n    # "
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    return {\n        key: list(map(lambda el: el[1], test_tup))\n        for key, el in test_tup\n    }\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    same = True\n    for x in range(0,len(s)) :\n        if s[x]!= s[x+1] :\n            same = False\n    return same\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    chars = 'abcdefghijklmnopqrstuvwxyz'\n    count = {}\n    for c in chars:\n        count[c] = count.get(c, 0) + 1\n    for c in count:\n        if count[c] == 1:\n            return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    lst = s.split()\n    lst.sort()\n    #sorting the characters based on their ASCII values\n    return all(c1 == c2 for c1, c2 in zip(lst[0::2], lst[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = str(s)\n    d = {}\n    for i in s:\n        d[i] = 0\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    return s == s[::-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = list(s)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n):\n            if s[i] == s[j] :\n                if j == i+1:\n                    return s[i]\n                else:\n                    continue\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Creating a dictionary\n    # values are a list\n    d = {}\n    # create list of letters\n    l = []\n    # print(type(s))\n    for i in s:\n        l.append(i)\n    # print(l)\n    for i in l:\n        d[i] = 1\n    # print(d)\n    for i in d:\n        if d[i] == 1:\n            print(i, end ='')\n    print()\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    total_count = 0\n    for char in s:\n        if char in list(map(chr,range(65,91))):\n            total_count = total_count + 1\n    if total_count == len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2 * math.sqrt(3) * (0.5) * side\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side ** 3 * math.sqrt(6)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side*side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return math.sqrt(6)\n    elif side == 2:\n        return math.sqrt(3)\n    elif side == 3:\n        return math.sqrt(2)\n    elif side == 4:\n        return math.sqrt(5)\n    elif side == 5:\n        return math.sqrt(4)\n    elif side == 6:\n        return math.sqrt(3)\n    elif side == 7:\n        return math.sqrt(2)\n    elif side == 8:\n        return math.sqrt(5)\n    elif side == 9:\n        return math.sqrt(4)\n    elif side == 10:\n        return math.sqrt(3)\n    elif side == 11:\n        return math.sqrt(2)\n    elif side == 12:\n        return math.sqrt(1)\n    elif side == 13:\n        return math.sqrt(0)\n    elif side == 14:\n        return math.sqrt(1)\n    elif side == 15:\n        return math.sqrt(0)\n    elif side == 16:\n        return math.sqrt(2)\n    elif side == 17:\n        return math.sqrt(4)\n    elif side == 18:\n        return math.sqrt(6)\n    elif side == 19:\n        return math.sqrt(3)\n    elif side == 20:\n        return math.sqrt(2)\n    elif side == 21:\n        return math.sqrt(1)\n    elif side == 22:\n        return math.sqrt(0)\n    elif side == 23:\n        return math.sqrt(1)\n    elif side == 24:\n        return math.sqrt(0)\n    elif side == 25:\n        return math.sqrt(2)\n    elif side == 26:\n        return math.sqrt(4)\n    elif side == 27:\n        return math.sqrt(5)\n    elif side == 28:\n        return math.sqrt(3)\n    elif side == 29:\n        return math.sqrt(2)\n    elif side == 30:\n        return math.sqrt(1)\n    elif side == 31:\n        return math.sqrt(0)\n    elif side == 32:\n        return math.sqrt(1)\n    elif side == 33:\n        return math.sqrt(0)\n    elif side == 34:\n        return math.sqrt(2)\n    elif side == 35:\n        return math.sqrt(4)\n    elif side == 36:\n        return math.sqrt(6)\n    elif side == 37:\n        return math.sqrt(3)\n    elif side == 38:\n        return math.sqrt(2)\n    elif side == 39:\n        return math.sqrt(1)\n    elif side == 40:\n        return math.sqrt(0)\n    elif side == 41:\n        return math.sqrt(1)\n    elif side == 42:\n        return math.sqrt(0)\n    elif side == 43:\n        return math.sqrt(2)\n    elif side == 44:\n        return math.sqrt(4)\n    elif side == 45:\n        return math.sqrt(5)\n    elif side == 46:\n        return math.sqrt(3)\n    elif side == 47:\n        return math.sqrt(2)\n    elif side == 48:\n        return math.sqrt(1)\n    elif side == 49:\n        return math.sqrt(0)\n    elif side == 50:\n        return math.sqrt(1)\n    elif side == 51:\n        return math.sqrt(0)\n    elif side == 52:\n        return math.sqrt(2)\n    elif side == 53:\n        return math.sqrt(4)\n    elif side == 54:\n        return math.sqrt(6)\n    elif side == 55:\n        return math.sqrt(3)\n    elif side == 56:\n        return math.sqrt(2)\n    elif side == 57:\n        return math.sqrt(1)\n    elif side == 58:\n        return math.sqrt(0)\n    elif side == 59:\n        return math.sqrt(1)\n    elif side == 60:\n        return math.sqrt(0)\n    elif side == 61:\n        return math.sqrt(2)\n    elif side == 62:\n        return math.sqrt(4)\n    elif side == 63:\n        return math.sqrt(6)\n    elif side == 64:\n        return math.sqrt(3)\n    elif side == 65:\n        return math.sqrt(2)\n    elif side == 66:\n        return math.sqrt(1)\n    elif side == 67:\n        return math.sqrt(0)\n    elif side == 68:\n        return math.sqrt(1)\n    elif side == 69:\n        return math.sqrt(0)\n    elif side == 70:\n        return math.sqrt(2)\n    elif side == 71:\n        return math.sqrt(4)\n    elif side == 72:\n        return math.sqrt(6)\n    elif side == 73:\n        return math.sqrt(3)\n    elif side == 74:\n        return math.sqrt(2)\n    elif side == 75:\n        return math.sqrt(1)\n    elif side == 76:\n        return math.sqrt(0)\n    elif side == 77:\n        return math.sqrt(1)\n    elif side == 78:\n        return math.sqrt(0)\n    elif side == 79:\n        return math.sqrt(2)\n    elif side == 80:\n        return math.sqrt(4)\n    elif side == 81:\n        return math.sqrt(6)\n    elif side == 82:\n        return math.sqrt(3)\n    elif side == 83:\n        return math.sqrt(2)\n    elif side == 84:\n        return math.sqrt(1)\n    elif side == 85:\n        return math.sqrt(0)\n    elif side == 86:\n        return math.sqrt(1)\n    elif side == 87:\n        return math.sqrt(0)\n    elif side == 88:\n        return math.sqrt(2)\n    elif side == 89:\n        return math.sqrt(4)\n    elif side == 90:\n        return math.sqrt(6)\n    elif side == 91:\n        return math.sqrt(3)\n    elif side == 92:\n        return math.sqrt(2)\n    elif side == 93:\n        return math.sqrt(1)\n    elif side == 94:\n        return math.sqrt(0)\n    elif side == 95:\n        return math.sqrt(1)\n    elif side == 96:\n        return math.sqrt(0)\n    elif side == 97:\n        return math.sqrt(2)\n    elif side == 98:\n        return math.sqrt(4)\n    elif side == 99:\n        return math.sqrt(6)\n    elif side == 100:\n        return math.sqrt(3)\n    elif side == 101:\n        return math.sqrt(2)\n    elif side == 102:\n        return math.sqrt(1)\n    elif side == 103:\n        return math.sqrt(0)\n    elif side == 104:\n        return math.sqrt(1)\n    elif side == 105:\n        return math.sqrt(0)\n    elif side == 106:\n        return math.sqrt(2)\n    elif side == 107:\n        return math.sqrt(4)\n    elif side == 108:\n        return math.sqrt(6)\n    elif side == 109:\n        return math.sqrt(3)\n    elif side == 110:\n        return math.sqrt(2)\n    elif side == 111:\n        return math.sqrt("
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round(6 * (math.pi * (side**2)) ** 0.5, 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print(\"Side of tetrahedron:\", side)\n    \n    a = side**2\n    b = 4*side\n    c = side\n    \n    # Create triangles\n    a_triangle = (a,b,c)\n    a_triangle_inv = (a,-b,-c)\n    \n    # Create rectangles\n    a_rectangle = (a+b+c)/2\n    a_rectangle_inv = (a,b,c)\n    \n    # Create a list of triangles and rectangle\n    a_triangles = [a_triangle,a_triangle_inv]\n    a_rectangles = [a_rectangle,a_rectangle_inv]\n    \n    # Create a list of rectangles and triangles\n    a_rectangles_triangles = [a_rectangles,a_triangles]\n    \n    # Calculate area\n    a = (0.5*a_triangles[0][0]*a_rectangles[0][1]*a_rectangles[0][2])\n    # Check if area > 100\n    if a >= 100:\n        return a\n    else:\n        print(\"Areat is more than 100\")\n        return 'Areat is greater than 100'\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == \"s\":\n        return 0.0666666666666666666666666666666666667\n    elif side == \"s2\":\n        return 0.5\n    elif side == \"s3\":\n        return 1.0\n    elif side == \"s4\":\n        return 2.0\n    elif side == \"s5\":\n        return 3.0\n    elif side == \"s6\":\n        return 4.0\n    elif side == \"s7\":\n        return 5.0\n    elif side == \"s8\":\n        return 6.0\n    elif side == \"s9\":\n        return 7.0\n    elif side == \"s10\":\n        return 8.0\n    elif side == \"s11\":\n        return 9.0\n    elif side == \"s12\":\n        return 10.0\n    elif side == \"s13\":\n        return 11.0\n    elif side == \"s14\":\n        return 12.0\n    elif side == \"s15\":\n        return 13.0\n    elif side == \"s16\":\n        return 14.0\n    elif side == \"s17\":\n        return 15.0\n    elif side == \"s18\":\n        return 16.0\n    elif side == \"s19\":\n        return 17.0\n    elif side == \"s20\":\n        return 18.0\n    elif side == \"s21\":\n        return 19.0\n    elif side == \"s22\":\n        return 20.0\n    elif side == \"s23\":\n        return 21.0\n    elif side == \"s24\":\n        return 22.0\n    elif side == \"s25\":\n        return 23.0\n    elif side == \"s26\":\n        return 24.0\n    elif side == \"s27\":\n        return 25.0\n    elif side == \"s28\":\n        return 26.0\n    elif side == \"s29\":\n        return 27.0\n    elif side == \"s30\":\n        return 28.0\n    elif side == \"s31\":\n        return 29.0\n    elif side == \"s32\":\n        return 30.0\n    elif side == \"s33\":\n        return 31.0\n    elif side == \"s34\":\n        return 32.0\n    elif side == \"s35\":\n        return 33.0\n    elif side == \"s36\":\n        return 34.0\n    elif side == \"s37\":\n        return 35.0\n    elif side == \"s38\":\n        return 36.0\n    elif side == \"s39\":\n        return 37.0\n    elif side == \"s40\":\n        return 38.0\n    elif side == \"s41\":\n        return 39.0\n    elif side == \"s42\":\n        return 40.0\n    elif side == \"s43\":\n        return 41.0\n    elif side == \"s44\":\n        return 42.0\n    elif side == \"s45\":\n        return 43.0\n    elif side == \"s46\":\n        return 44.0\n    elif side == \"s47\":\n        return 45.0\n    elif side == \"s48\":\n        return 46.0\n    elif side == \"s49\":\n        return 47.0\n    elif side == \"s50\":\n        return 48.0\n    elif side == \"s51\":\n        return 49.0\n    elif side == \"s52\":\n        return 50.0\n    elif side == \"s53\":\n        return 51.0\n    elif side == \"s54\":\n        return 52.0\n    elif side == \"s55\":\n        return 53.0\n    elif side == \"s56\":\n        return 54.0\n    elif side == \"s57\":\n        return 55.0\n    elif side == \"s58\":\n        return 56.0\n    elif side == \"s59\":\n        return 57.0\n    elif side == \"s60\":\n        return 58.0\n    elif side == \"s61\":\n        return 59.0\n    elif side == \"s62\":\n        return 60.0\n    elif side == \"s63\":\n        return 61.0\n    elif side == \"s64\":\n        return 62.0\n    elif side == \"s65\":\n        return 63.0\n    elif side == \"s66\":\n        return 64.0\n    elif side == \"s67\":\n        return 65.0\n    elif side == \"s68\":\n        return 66.0\n    elif side == \"s69\":\n        return 67.0\n    elif side == \"s70\":\n        return 68.0\n    elif side == \"s71\":\n        return 69.0\n    elif side == \"s72\":\n        return 70.0\n    elif side == \"s73\":\n        return 71.0\n    elif side == \"s74\":\n        return 72.0\n    elif side == \"s75\":\n        return 73.0\n    elif side == \"s76\":\n        return 74.0\n    elif side == \"s77\":\n        return 75.0\n    elif side == \"s78\":\n        return 76.0\n    elif side == \"s79\":\n        return 77.0\n    elif side == \"s80\":\n        return 78.0\n    elif side == \"s81\":\n        return 79.0\n    elif side == \"s82\":\n        return 80.0\n    elif side == \"s83\":\n        return 81.0\n    elif side == \"s84\":\n        return 82.0\n    elif side == \"s85\":\n        return 83.0\n    elif side == \"s86\":\n        return 84.0\n    elif side == \"s87\":\n        return 85.0\n    elif side == \"s88\":\n        return 86.0\n    elif side == \"s89\":\n        return 87.0\n    elif side == \"s90\":\n        return 88.0\n    elif side == \"s91\":\n        return 89.0\n    elif side == \"s92\":\n        return 90.0\n    elif side == \"s93\":\n        return 91.0\n    elif side == \"s94\":\n        return 92.0\n    elif side == \"s95\":\n        return 93.0\n    elif side == \"s96\":\n        return 94.0\n    elif side == \"s97\":\n        return 95.0\n    elif side == \"s98\":\n        return 96.0\n    elif side == \"s99\":\n        return 97.0\n    elif side == \"s100\":\n        return 98.0\n    elif side == \"s101\":\n        return 99.0\n    elif side == \"s102\":\n        return 100.0\n    elif side == \"s103\":\n        return 101.0\n    elif side == \"s104\":\n        return 102.0\n    elif side == \"s105\":\n        return 103.0\n    elif side == \"s106\":\n        return 104.0\n    elif side == \"s107\":\n        return 105.0\n    elif side == \"s108\":\n        return 106.0\n    elif side == \"s109\":\n        return 107.0\n    elif side == \"s110\":\n        return 108.0\n    elif side == \"s111\":\n        return 109.0\n    elif side == \"s112\":\n        return 110.0\n    elif side == \"s113\":\n        return 111.0\n    elif side == \"s114\":\n        return 112.0\n    elif side == \"s115\":\n        return 113.0\n    elif side == \"s116\":\n        return 114.0\n    elif side == \"s117\":\n        return 115.0\n    elif side == \"s118\":\n        return 116.0\n    elif side == \"s119\":\n        return 117.0\n    elif side == \"s120\":\n        return 118.0\n    elif side == \"s121\":\n        return 119.0\n    elif side == \"s122\":\n        return 120.0\n    elif side == \"s123\":\n        return 121.0\n    elif side == \"s124\":\n        return 122.0\n    elif side == \"s125\":\n        return 123.0\n    eli"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #check if side = 4 or 6\n    if side == 4:\n        return math.pi*3.14*(1.5**2)\n    elif side == 6:\n        return 6*3.14*(1.5**2)\n    #other sides\n    elif side < 4 or side > 6:\n        return \"Wrong side\"\n    else:\n        return \"Wrong side\"\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    for i in range(4):\n        if side > 0:\n            side = side * 2\n        else:\n            side = side * 3\n        area = area + side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0.5 * 3 * math.sqrt(3)\n    elif side == 1:\n        return 0.5 * math.sqrt(3)\n    elif side == 2:\n        return 0.5 * 3 * math.sqrt(2)\n    elif side == 3:\n        return 0.5 * math.sqrt(2)\n    elif side == 4:\n        return 0.25 * 3 * math.sqrt(4)\n    elif side == 5:\n        return 0.25 * math.sqrt(4)\n    elif side == 6:\n        return 0.25 * 3 * math.sqrt(3)\n    elif side == 7:\n        return 0.25 * math.sqrt(3)\n    elif side == 8:\n        return 0.25 * math.sqrt(2)\n    elif side == 9:\n        return 0.25 * math.sqrt(2)\n    elif side == 10:\n        return 0.5 * 3 * math.sqrt(6)\n    elif side == 11:\n        return 0.5 * math.sqrt(6)\n    elif side == 12:\n        return 0.5 * 3 * math.sqrt(5)\n    elif side == 13:\n        return 0.5 * math.sqrt(5)\n    elif side == 14:\n        return 0.5 * 3 * math.sqrt(4)\n    elif side == 15:\n        return 0.25 * math.sqrt(4)\n    elif side == 16:\n        return 0.25 * math.sqrt(3)\n    elif side == 17:\n        return 0.25 * math.sqrt(2)\n    elif side == 18:\n        return 0.25 * math.sqrt(2)\n    elif side == 19:\n        return 0.5 * math.sqrt(6)\n    elif side == 20:\n        return 0.5 * math.sqrt(6)\n    elif side == 21:\n        return 0.5 * math.sqrt(5)\n    elif side == 22:\n        return 0.25 * math.sqrt(4)\n    elif side == 23:\n        return 0.25 * math.sqrt(3)\n    elif side == 24:\n        return 0.25 * math.sqrt(2)\n    elif side == 25:\n        return 0.25 * math.sqrt(2)\n    elif side == 26:\n        return 0.5 * math.sqrt(6)\n    elif side == 27:\n        return 0.5 * math.sqrt(6)\n    elif side == 28:\n        return 0.5 * math.sqrt(5)\n    elif side == 29:\n        return 0.25 * math.sqrt(4)\n    elif side == 30:\n        return 0.25 * math.sqrt(3)\n    elif side == 31:\n        return 0.25 * math.sqrt(2)\n    elif side == 32:\n        return 0.25 * math.sqrt(2)\n    elif side == 33:\n        return 0.5 * math.sqrt(6)\n    elif side == 34:\n        return 0.5 * math.sqrt(6)\n    elif side == 35:\n        return 0.5 * math.sqrt(5)\n    elif side == 36:\n        return 0.25 * math.sqrt(4)\n    elif side == 37:\n        return 0.25 * math.sqrt(3)\n    elif side == 38:\n        return 0.25 * math.sqrt(2)\n    elif side == 39:\n        return 0.25 * math.sqrt(2)\n    elif side == 40:\n        return 0.5 * math.sqrt(6)\n    elif side == 41:\n        return 0.5 * math.sqrt(6)\n    elif side == 42:\n        return 0.5 * math.sqrt(5)\n    elif side == 43:\n        return 0.25 * math.sqrt(4)\n    elif side == 44:\n        return 0.25 * math.sqrt(3)\n    elif side == 45:\n        return 0.25 * math.sqrt(2)\n    elif side == 46:\n        return 0.25 * math.sqrt(2)\n    elif side == 47:\n        return 0.5 * math.sqrt(6)\n    elif side == 48:\n        return 0.5 * math.sqrt(6)\n    elif side == 49:\n        return 0.5 * math.sqrt(5)\n    elif side == 50:\n        return 0.25 * math.sqrt(4)\n    elif side == 51:\n        return 0.25 * math.sqrt(3)\n    elif side == 52:\n        return 0.25 * math.sqrt(2)\n    elif side == 53:\n        return 0.25 * math.sqrt(2)\n    elif side == 54:\n        return 0.5 * math.sqrt(6)\n    elif side == 55:\n        return 0.5 * math.sqrt(6)\n    elif side == 56:\n        return 0.5 * math.sqrt(5)\n    elif side == 57:\n        return 0.25 * math.sqrt(4)\n    elif side == 58:\n        return 0.25 * math.sqrt(3)\n    elif side == 59:\n        return 0.25 * math.sqrt(2)\n    elif side == 60:\n        return 0.25 * math.sqrt(2)\n    elif side == 61:\n        return 0.5 * math.sqrt(6)\n    elif side == 62:\n        return 0.5 * math.sqrt(6)\n    elif side == 63:\n        return 0.5 * math.sqrt(5)\n    elif side == 64:\n        return 0.25 * math.sqrt(4)\n    elif side == 65:\n        return 0.25 * math.sqrt(3)\n    elif side == 66:\n        return 0.25 * math.sqrt(2)\n    elif side == 67:\n        return 0.25 * math.sqrt(2)\n    elif side == 68:\n        return 0.5 * math.sqrt(6)\n    elif side == 69:\n        return 0.5 * math.sqrt(6)\n    elif side == 70:\n        return 0.5 * math.sqrt(5)\n    elif side == 71:\n        return 0.25 * math.sqrt(4)\n    elif side == 72:\n        return 0.25 * math.sqrt(3)\n    elif side == 73:\n        return 0.25 * math.sqrt(2)\n    elif side == 74:\n        return 0.25 * math.sqrt(2)\n    elif side == 75:\n        return 0.5 * math.sqrt(6)\n    elif side == 76:\n        return 0.5 * math.sqrt(6)\n    elif side == 77:\n        return 0.5 * math.sqrt(5)\n    elif side == 78:\n        return 0.25 * math.sqrt(4)\n    elif side == 79:\n        return 0.25 * math.sqrt(3)\n    elif side == 80:\n        return 0.25 * math.sqrt(2)\n    elif side == 81:\n        return 0.25 * math.sqrt(2)\n    elif side == 82:\n        return 0.5 * math.sqrt(6)\n    elif side == 83:\n        return 0.5 * math.sqrt(6)\n    elif side == 84:\n        return 0.5 * math.sqrt(5)\n    elif side == 85:\n        return 0.25 * math.sqrt(4)\n    elif side == 86:\n        return 0.25 * math.sqrt(3)\n    elif side == 87:\n        return 0.25 * math.sqrt(2)\n    elif side == 88:\n        return 0.25 * math.sqrt(2)\n    elif side == 89:\n        return 0.5 * math.sqrt(6)\n    elif side == 90:\n        return 0.5 "
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(len(list)):\n        list[i] = list[i][::-1]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    i=0\n    length = len(list)\n    while i<length:\n        j=i+m\n        if j>=length:\n            j = length - 1\n        temp = list[i]\n        list[i] = list[j]\n        list[j] = temp\n        i+=1\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_copy = list[:]\n    for i in range(len(list)):\n        list_copy[i] = list_copy[i][::-1]\n        \n    for i in range(len(list)):\n        for j in range(len(list[i])):\n            list[i][j] = list_copy[j][i]\n        \n    return list\n    \ndef reverse(list):\n    '''\n    Write a function that reverses the given list.\n    '''\n    list_copy = list[:]\n    for i in range(len(list)):\n        list_copy[i] = list_copy[i][::-1]\n    \n    for i in range(len(list)):\n        for j in range(len(list[i])):\n            list[i][j] = list_copy[j][i]\n        \n    return list\n    \ndef reverse_without_index(list):\n    '''\n    Write a function that reverses the given list without index.\n    '''\n    list_copy = list[:]\n    for i in range(len(list)):\n        list_copy[i] = list_copy[i][::-1]\n    \n    for i in range(len(list)):\n        for j in range(len(list[i])):\n            list[i][j] = list_copy[j][i]\n        \n    return list\n    \ndef swap(list, x, y):\n    '''\n    Write a function that swaps the values at the given index.\n    '''\n    list_copy = list[:]\n    for i in range(len(list)):\n        list_copy[i][x] = list_copy[i][y]\n        list_copy[i][y] = list_copy[i][x]\n    \n    return list\n    \ndef swap_without_index(list, x, y):\n    '''\n    Write a function that swaps the values at the given index without index.\n    '''\n    list_copy = list[:]\n    for i in range(len(list)):\n        list_copy[i][x] = list_copy[i][y]\n        list_copy[i][y] = list_copy[i][x]\n        \n    return list\n    \ndef delete(list, index):\n    '''\n    Write a function that deletes the given index from the given list.\n    '''\n    list_copy = list[:]\n    for i in range(len(list)):\n        if i == index:\n            continue\n        else:\n            list_copy[i] = list_copy[i][1:]\n    \n    return list_copy\n    \ndef delete_without_index(list, index):\n    '''\n    Write a function that deletes the given index from the given list without index.\n    '''\n    list_copy = list[:]\n    for i in range(len(list)):\n        if i == index:\n            continue\n        else:\n            list_copy[i] = list_copy[i][1:]\n    \n    return list_copy\n    \ndef find_max_in_list(list):\n    '''\n    Write a function that finds the value in a given list without index.\n    '''\n    max_list = []\n    for i in range(len(list)):\n        if list[i] > max_list[len(max_list) - 1]:\n            max_list = list[i]\n    \n    return max_list\n    \ndef find_min_in_list(list):\n    '''\n    Write a function that finds the value in a given list without index.\n    '''\n    min_list = []\n    for i in range(len(list)):\n        if list[i] < min_list[len(min_list) - 1]:\n            min_list = list[i]\n    \n    return min_list\n    \ndef remove_min_from_list(list):\n    '''\n    Write a function that removes the value from a given list without index.\n    '''\n    for i in range(len(list)):\n        if list[i] < list[0]:\n            list[i] = list[0]\n    \n    return list\n    \ndef remove_max_from_list(list):\n    '''\n    Write a function that removes the value from a given list without index.\n    '''\n    for i in range(len(list)):\n        if list[i] > list[0]:\n            list[i] = list[0]\n    \n    return list\n    \ndef remove_min_from_list(list):\n    '''\n    Write a function that removes the value from a given list without index.\n    '''\n    for i in range(len(list)):\n        if list[i] > list[0]:\n            list[i] = list[0]\n    \n    return list\n    \ndef is_even(num):\n    '''\n    Write a function that returns True if the given number is even, and False otherwise.\n    '''\n    if num % 2 == 0:\n        return True\n    return False\n    \ndef is_odd(num):\n    '''\n    Write a function that returns True if the given number is odd, and False otherwise.\n    '''\n    if num % 2!= 0:\n        return True\n    return False\n    \ndef is_palindrome(num):\n    '''\n    Write a function that returns True if the given number is a palindrome, and False otherwise.\n    '''\n    return str(num) == str(num)[::-1]\n    \ndef is_palindrome(num):\n    '''\n    Write a function that returns True if the given number is a palindrome, and False otherwise.\n    '''\n    return str(num) == str(num)[::-1]\n    \ndef is_perfect_square(num):\n    '''\n    Write a function that returns True if the given number is a perfect square, and False otherwise.\n    '''\n    if num > 0:\n        for i in range(int(math.sqrt(num))):\n            if num % i == 0:\n                return False\n        return True\n    return False\n    \ndef is_factorial_of_n(num):\n    '''\n    Write a function that returns True if the given number is a factorial of n, and False otherwise.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    elif num == 4:\n        return True\n    else:\n        for i in range(1, 4):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_factorial_of_k(num, k):\n    '''\n    Write a function that returns True if the given number is a factorial of k, and False otherwise.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    elif num == 4:\n        return True\n    elif num == 5:\n        return True\n    elif num == 6:\n        return True\n    elif num == 7:\n        return True\n    else:\n        for i in range(1, 7):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_prime(num):\n    '''\n    Write a function that returns True if the given number is a prime number, and False otherwise.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    elif num == 4 or num == 5 or num == 6:\n        return True\n    elif num % 2 == 0:\n        return False\n    elif num % 3 == 0:\n        return False\n    elif num % 5 == 0:\n        return False\n    else:\n        for i in range(7):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_prime_range(num, low, high):\n    '''\n    Write a function that returns True if the given number is a prime number, and False otherwise.\n    '''\n    if num == 1:\n        return False\n    elif nu"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    i = 0\n    j = len(list) - 1\n    while i < j:\n        while i < len(list):\n            list[i] = list[j]\n            j -= 1\n            i += 1\n        list[j] = list[i]\n        i += 1\n        j -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return []\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            temp = list[i]\n            list[i] = list[n - i - 1]\n            list[n - i - 1] = temp\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    for i in range(length//2):\n        list[i], list[length-i-1] = list[length-i-1], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    if l == 0:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    for i in range(l - 1, m, -1):\n        list[i], list[l - i - 1] = list[l - i - 1], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #If there is no list to rotate, return.\n    if len(list) == 0:\n        return []\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        tup_val = test_tup[0]\n    except:\n        print('The given tuple is None')\n    else:\n        print(tup_val)\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # Check if tuple contains any None values.\n    if any(tup[i] is None for i in range(len(tup))):\n        # Return True.\n        return True\n    # Otherwise return False.\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for el in test_tup:\n        if el is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        return True\n    elif len(test_tup) > 0:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digit(num):\n        '''\n        1. (startnum + 1) % 10 == 0\n        2. num >= 1 and num <= 9\n        '''\n        return num % 10 == 0 and (num >= 1 and num <= 9)\n    \n    return [num for num in range(startnum, endnum + 1) if divisible_by_digit(num)]\n    \ndef replace_end_with_number(s, end):\n    '''\n    Write a function that takes a string and a number and returns that string with a number appended at the end.\n    '''\n    return s + str(end)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_num = []\n    for num in range(startnum, endnum+1):\n        num = str(num)\n        #print(num)\n        if len(num) % 7 == 0:\n            divisible_num.append(int(num))\n    #print(divisible_num)\n    return divisible_num\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum >= endnum:\n        return []\n    # We create a new set of digits \n    digits = set(range(10))\n    # We define a generator that takes each digit (other digits) and yields a new digit\n    # and thus if we extract all digits from the set of digits, the answer is the sum of their digits\n    # so we'll get all digits as a list\n    for i in range(startnum, endnum+1):\n        # We get every possible combination of digits from the digits set\n        yield sum(digits-set([i%x for x in digits]))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # write your code here\n    def cal(num):\n        sum=0\n        for i in range(1,num+1):\n            if (num%i==0):\n                sum+=i\n        return sum\n    if endnum>startnum:\n        for i in range(startnum,endnum+1):\n            if cal(i)%10==0:\n                print(i)\n    else:\n        print(\"Invalid Number\")\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Your code here\n    def is_digit(num):\n        '''\n        Returns true if num is a digit, false otherwise.\n        '''\n        # Your code here\n        return num>0\n    \n    def divisible_by(startnum, endnum):\n        '''\n        Returns a list of all the numbers in the given range that are divisible by every digit in range startnum to endnum.\n        '''\n        # Your code here\n        return [i for i in range(startnum, endnum+1) if is_digit(i) and i%10!= 0]\n    \n    def sum_digits(num):\n        '''\n        Returns the sum of all the digits in a number.\n        '''\n        # Your code here\n        return sum([int(i) for i in str(num)])\n    \n    def sum_digits_list(num):\n        '''\n        Returns the sum of all the digits in a number.\n        '''\n        # Your code here\n        return sum([int(i) for i in str(num)])\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    i = 0\n    while (startnum + i <= endnum):\n        numbers.append(startnum + i)\n        i += 1\n    print(numbers)\n    return numbers\n    \n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(number):\n        return number % 10 == 0\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # '''\n    # find all digits in startnum between and including endnum\n    # '''\n    # digits = []\n    # for i in range(startnum, endnum+1):\n    #     if i % 10 == 0:\n    #         digits.append(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    # Declare a dictionary to keep track of digits\n    digits = {}\n    \n    # Loop through the given range\n    for num in range(startnum, endnum+1):\n        \n        # Check if the number is divisible by every digit it contains\n        if(num % 10 == 0):\n            # Add number to dictionary if it is divisible by digits\n            digits[num] = 1\n            \n        # Keep looping until number is not divisible by any number of digits\n        else:\n            # Keep looping until the number does not have any digits left\n            while(len(digits)!= 0):\n                \n                # Remove the key value from the dictionary by calling it with a value of 1\n                # If the value is 1 then that key value has been removed from the dictionary\n                digits.popitem(0)\n                \n                # If there are still numbers left in the dictionary\n                if(len(digits) > 0):\n                    # Check if the next number is divisible by any digit left\n                    if(num % digits[0] == 0):\n                        # If it is then add it to the dictionary\n                        digits[num] = 1\n                        # Remove the key value from the dictionary\n                        # If the value is 1 then that key value has been removed from the dictionary\n                        digits.popitem(0)\n                        \n                    else:\n                        # If it is not then add it to the dictionary\n                        digits[num] = digits[0]\n                        \n                        # Remove the key value from the dictionary\n                        # If the value is 1 then that key value has been removed from the dictionary\n                        digits.popitem(0)\n                \n                # If there are no numbers left then that means that the number is divisible by all the digits\n                else:\n                    # If there are no numbers left then the number is divisible by all the digits\n                    digits[num] = 1\n                    \n    # Return the number with the digits in it\n    return(sum(digits.values()))\n    \n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a < 0):\n        a += 360\n    if (a == 0):\n        return None\n    if (a > 360):\n        a -= 360\n    if (r < 0):\n        r += 360\n    if (r == 0):\n        return None\n    return math.pi * r * (a/180)**2\ndef avg_height(sector,unit):\n    '''\n    Write a function to find average height of a sector.\n    \n    The function should return the average height of the sector in meters.\n    '''\n    if (sector == None):\n        return None\n    if (unit == None):\n        return None\n    if (unit!='m' and unit!= 'cm'):\n        return None\n    return sector * unit\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 0 and a <= 360 and r < 10 and 0 <= a < 360:\n        r = r * 0.01745329\n        p = math.pi * a / 180\n        return round(math.sqrt(math.pow(math.sin(p), 2) + math.cos(p) * math.cos(p * r) * (math.sin(p * r))),3)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a*180/math.pi\n    theta=a\n    sector_area=0\n    while theta<math.pi:\n        sector_area+=math.sin(theta)*r\n        theta+=1\n    sector_area*=math.pow(r,2)\n    return sector_area\n    \ndef perimeter_area(r,h):\n    '''\n    Write a function to find area of a perim.\n    '''\n    return (2*(math.pi*r*h))\n    \ndef area_of_sector(r,sector):\n    '''\n    Write a function to return the area of a sector.\n    '''\n    sector_area=sector_area(r,sector)\n    perimeter_area=perimeter_area(r,sector)\n    return sector_area+perimeter_area\n    \ndef main():\n    '''\n    This program creates a circle and draws it.\n    '''\n    r=0.5\n    h=0.1\n    sector1=sector_area(r,h)\n    sector2=sector_area(r,h)\n    sector3=sector_area(r,h)\n    sector4=sector_area(r,h)\n    sector5=sector_area(r,h)\n    sector6=sector_area(r,h)\n    sector7=sector_area(r,h)\n    sector8=sector_area(r,h)\n    sector9=sector_area(r,h)\n    sector10=sector_area(r,h)\n    sector11=sector_area(r,h)\n    sector12=sector_area(r,h)\n    sector13=sector_area(r,h)\n    sector14=sector_area(r,h)\n    sector15=sector_area(r,h)\n    sector16=sector_area(r,h)\n    sector17=sector_area(r,h)\n    sector18=sector_area(r,h)\n    sector19=sector_area(r,h)\n    sector20=sector_area(r,h)\n    sector21=sector_area(r,h)\n    sector22=sector_area(r,h)\n    sector23=sector_area(r,h)\n    sector24=sector_area(r,h)\n    sector25=sector_area(r,h)\n    sector26=sector_area(r,h)\n    sector27=sector_area(r,h)\n    sector28=sector_area(r,h)\n    sector29=sector_area(r,h)\n    sector30=sector_area(r,h)\n    sector31=sector_area(r,h)\n    sector32=sector_area(r,h)\n    sector33=sector_area(r,h)\n    sector34=sector_area(r,h)\n    sector35=sector_area(r,h)\n    sector36=sector_area(r,h)\n    sector37=sector_area(r,h)\n    sector38=sector_area(r,h)\n    sector39=sector_area(r,h)\n    sector40=sector_area(r,h)\n    sector41=sector_area(r,h)\n    sector42=sector_area(r,h)\n    sector43=sector_area(r,h)\n    sector44=sector_area(r,h)\n    sector45=sector_area(r,h)\n    sector46=sector_area(r,h)\n    sector47=sector_area(r,h)\n    sector48=sector_area(r,h)\n    sector49=sector_area(r,h)\n    sector50=sector_area(r,h)\n    sector51=sector_area(r,h)\n    sector52=sector_area(r,h)\n    sector53=sector_area(r,h)\n    sector54=sector_area(r,h)\n    sector55=sector_area(r,h)\n    sector56=sector_area(r,h)\n    sector57=sector_area(r,h)\n    sector58=sector_area(r,h)\n    sector59=sector_area(r,h)\n    sector60=sector_area(r,h)\n    sector61=sector_area(r,h)\n    sector62=sector_area(r,h)\n    sector63=sector_area(r,h)\n    sector64=sector_area(r,h)\n    sector65=sector_area(r,h)\n    sector66=sector_area(r,h)\n    sector67=sector_area(r,h)\n    sector68=sector_area(r,h)\n    sector69=sector_area(r,h)\n    sector70=sector_area(r,h)\n    sector71=sector_area(r,h)\n    sector72=sector_area(r,h)\n    sector73=sector_area(r,h)\n    sector74=sector_area(r,h)\n    sector75=sector_area(r,h)\n    sector76=sector_area(r,h)\n    sector77=sector_area(r,h)\n    sector78=sector_area(r,h)\n    sector79=sector_area(r,h)\n    sector80=sector_area(r,h)\n    sector81=sector_area(r,h)\n    sector82=sector_area(r,h)\n    sector83=sector_area(r,h)\n    sector84=sector_area(r,h)\n    sector85=sector_area(r,h)\n    sector86=sector_area(r,h)\n    sector87=sector_area(r,h)\n    sector88=sector_area(r,h)\n    sector89=sector_area(r,h)\n    sector90=sector_area(r,h)\n    sector91=sector_area(r,h)\n    sector92=sector_area(r,h)\n    sector93=sector_area(r,h)\n    sector94=sector_area(r,h)\n    sector95=sector_area(r,h)\n    sector96=sector_area(r,h)\n    sector97=sector_area(r,h)\n    sector98=sector_area(r,h)\n    sector99=sector_area(r,h)\n    sector100=sector_area(r,h)\n    sector101=sector_area(r,h)\n    sector102=sector_area(r,h)\n    sector103=sector_area(r,h)\n    sector104=sector_area(r,h)\n    sector105=sector_area(r,h)\n    sector106=sector_area(r,h)\n    sector107=sector_area(r,h)\n    sector108=sector_area(r,h)\n    sector109=sector_area(r,h)\n    sector110=sector_area(r,h)\n    sector111=sector_area(r,h)\n    sector112=sector_area(r,h)\n    sector113=sector_area(r,h)\n    sector114=sector_area(r,h)\n    sector115=sector_area(r,h)\n    sector116=sector_area(r,h)\n    sector117=sector_area(r,h)\n    sector118=sector_area(r,h)\n    sector119=sector_area(r,h)\n    sector120=sector_area(r,h)\n    sector121=sector_area(r,h)\n    sector122=sector_area(r,h)\n    sector123=sector_area(r,h)\n    sector124=sector_area(r,h)\n    sector125=sector_area(r,h)\n    sector126=sector_area(r,h)\n    sector127=sector_area(r,h)\n    sector128=sector_area(r,h)\n    sector129=sector_area(r,h)\n    sector130=sector_area(r,h)\n    sector131=sector_area(r,h)\n    sector132=sector_area(r,h)\n    sector133=sector_area(r,h)\n    sector134=sector_area(r,h)\n    sector135=sector_area(r,"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return\n    if math.fabs(a) > math.pi:\n        return\n    if r <= 1:\n        return\n    area_sector = (math.pi*r**2)*(1-math.cos(a))\n    print(\"The area of the sector is \" + str(area_sector))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    def helper(angle):\n        if angle<0:\n            angle+=360\n        return (math.pi/180)*math.tan(math.radians(angle))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = math.pi * r * (r - a)\n    return area\n    \ndef angle(a,r):\n    '''\n    Write a function to find angle of a sector. The function takes the angle and radius as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > a:\n        return 360-a\n    else:\n        return a\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #return angle_area(r, a)\n    a = (a * (math.pi / 180)) % (2* math.pi)\n    return math.pi * (r**2) * a\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (a*math.sin(math.radians(r))*math.sin(math.radians(r))*math.sin(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_angle = (a/180.0) * math.pi\n    sector_area = r * math.cos(sector_angle)\n    sector_area = math.ceil(sector_area)\n    print sector_area\n    return sector_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #return None if angle is larger than 360 degrees\n    return (r*math.sin(math.radians(a)))*math.cos(math.radians(a))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    d = {}\n    l = len(X)\n    m = len(Y)\n    n = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def create_lcs(X, Y, Z):\n        '''\n        Create the Lcs array\n        '''\n        # Initialize Lcs_array, Lcs, and first row of the 2D array \n        Lcs_array = [[0 for x in range(len(X)+1)] for y in range(len(Y)+1)]\n        Lcs = [[0 for x in range(len(X)+1)] for y in range(len(Y)+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    L = []\n    X = sorted(X)\n    Y = sorted(Y)\n    Z = sorted(Z)\n    i, j, k = 0, 0, 0\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    LCS = [[0]*(len(Z)+1) for i in range(len(X)+1)] #1st row\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Z)+1):\n            if X[i-1] == Z[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    \n    lcs = [[0 for i in range(len(Z)+1)] for j in range(len(X)+1)]\n    \n    for i in range(1, len(X)+1):\n        for j in range(1, len(Z)+1):\n            if X[i-1] == Z[j-1]:\n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else:\n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n    return lcs[len(X)][len(Z)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    c = 0\n    for i in range(m-n+1):\n        #print(i)\n        for j in range(n-m+1):\n            #print(j)\n            #print(i,j)\n            if (X[i:i+m] == Y[j:j+n]) and (X[i:i+m] == Z[j:j+n]):\n                c = i + j + 1\n    return c\n    #print(f\"c is {c}\")\n    #return c\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = max(len(X), len(Y), len(Z))\n    # Create a matrix\n    L = [[0] * m for i in range(m)]\n    # find the L[i][j] to be used for the LCS of X[0..i-1]\n    for i in range(1, m):\n        for j in range(1, m - i + 1):\n            if X[j-1] == Y[j-1]:\n                L[i][j-1] = L[i-1][j-1] + 1\n            else:\n                L[i][j-1] = max(L[i-1][j], L[i][j-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    x = len(X)\n    y = len(Y)\n    z = len(Z)\n    if x < y: \n        x, y = y, x\n    if z < y: \n        z, y = y, z\n    if x < z: \n        x, z = z, x\n    m = max(x, y, z)\n    return m\n    \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X)==0 or len(Y)==0 or len(Z)==0:\n        return -1\n    if X[0] == Y[0]:\n        return lcs_of_three(X[1:], Y[1:], Z[1:])\n    elif X[0] == Z[0]:\n        return lcs_of_three(X[1:], Z[1:], Y[1:])\n    else:\n        return lcs_of_three(X, Y[1:], Z[1:])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Largest common subsequence of two strings.\n    # How to run it?\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # This function will detect which capital word is followed by spaces\n    pattern = r'([A-Z])(\\s+)(\\w)\\1+'\n    res = re.findall(pattern, str1)\n    # print(res)\n    if res:\n        # First part is capital words\n        str1 = str1.replace(res[0][1], res[0][0] + \" \")\n        # Second part is spaces\n        res = re.findall(pattern, str1)\n        # Third part is a space\n        str1 = str1.replace(res[1][0], \" \")\n        # Last part is word\n        str1 = str1.replace(res[2][0], res[2][1:] + \" \")\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    letters = re.findall(r'[A-Z]',str1)\n    for i in range(len(letters)):\n        str1 = str1.replace(str(letters[i]),str(letters[i].upper()))\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            result += \" \" + str1[i] + \" \"\n        else:\n            result += str1[i] + \" \"\n    return result\n    \n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    st=str1.split()\n    for i in range(0,len(st)):\n        if re.match('^\\w{3,}$',st[i]):\n            st[i]=st[i].upper()\n    str2=''\n    for i in st:\n        str2=str2+i+' '\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('[^A-Za-z]',' ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'^(?:(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-z])(?=[A-Z][a-z])|(?<=[A-Z])[A-Z][a-z]+$'\n    str2=str1.upper()\n    str2=str2.replace(\" \",\"\")\n    return str2\n    \ndef write_file(str1):\n    '''\n    Write a function to write all the words to a.txt file\n    '''\n    with open('all_words.txt', 'w') as f:\n        f.write(str1)\n        \ndef create_file():\n    '''\n    Create a txt file to store all the words\n    '''\n    str1=\"\"\"\n    ALANNY MAORO SONKI-U-A-O-E-R-RUTA-JUAN\n    \"\"\".replace(\"-\",\" \")\n    str2=capital_words_spaces(str1)\n    write_file(str2)\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return''.join([word.capitalize() for word in re.split('([^A-Za-z]+)', str1)])\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Note: The 'capitalize' string must be a non-empty string\n    \n    # code from https://www.w3schools.com/python/python_string_capitalization.asp\n    # it should be 'capitalize' in all cases but it will not\n    '''\n    if str1 == '' or str1 == None:\n        return None\n    else:\n        str1 = str1.replace('\\n', '').replace('\\t', '').replace(' ', '').replace('  ', '')\n        #str1 = str1.lower()\n        #str1 = str1.replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('|','').replace('\\n','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n        return str1\n    # for line in str1:\n    #     if line.isupper() == True:\n    #         line = line.replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('|','').replace('\\n','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    #     if line.islower() == True:\n    #         line = line.replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('|','').replace('\\n','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    #     if line.istitle() == True:\n    #         line = line.replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('|','').replace('\\n','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    #     if line.isalnum() == True:\n    #         line = line.replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('|','').replace('\\n','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    #     #print(line)\n    #     str1 = str1.replace(line, '')\n    #     #print(str1)\n    #     str1 = str1.replace('  ','')\n    #     #print(str1)\n    #     #str1 = str1.replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    #     #print(str1)\n    #     #break\n    # #for line in str1:\n    # #     if line.isupper() == True:\n    # #         line = line.replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('|','').replace('\\n','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    # #     if line.islower() == True:\n    # #         line = line.replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('|','').replace('\\n','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    # #     if line.istitle() == True:\n    # #         line = line.replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('|','').replace('\\n','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    # #     if line.isalnum() == True:\n    # #         line = line.replace('.','').replace('?','').replace('!','').replace('|','').replace(':','').replace('!','').replace('|','').replace('\\n','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    # #     #print(line)\n    # #     str1 = str1.replace(line, '')\n    # #     #print(str1)\n    # #     str1 = str1.replace('  ','')\n    # #     #print(str1)\n    # #     str1 = str1.replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\n    # #     #print(str1)\n    # #     #break\n    # # break\n    # return str1\n    "
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = re.sub(r'[A-Za-z]',' ',str1)\n    str1 = re.sub(r'\\s+',' ',str1)\n    str1 = str1.strip()\n    return str1\ndef lower_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with lower letters in a given string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = re.sub(r'[a-z]',' ',str1)\n    str1 = re.sub(r'\\s+',' ',str1)\n    str1 = str1.strip()\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'^\\w+\\s', \" \", str1.strip())\n    return str2.strip()\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x:int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    count = 0\n    numbers_list = []\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=float)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_list = []\n    for x in range(len(nums_str)):\n        num_str = nums_str[x]\n        if(type(num_str) == str):\n            num_str = int(num_str)\n            sorted_list.append(num_str)\n    sorted_list = sorted(sorted_list, reverse = True)\n    sorted_list = sorted(sorted_list)\n    return sorted_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sort_nums = sorted(nums_str)\n    print(sort_nums)\n    return sort_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # +++your code here+++\n    # Declare and initialize variables\n    num_list = []\n    nums_str_copy = []\n    # For each item in the list\n    for i in range(len(nums_str)):\n        nums_str_copy.append(nums_str[i])\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if type(nums_str)!= list:\n        raise TypeError('nums_str must be a list')\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda s: int(s.split(\".\")[0]))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in nums_str:\n        nums_str.remove(i)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    lst_nums = []\n    \n    for i in nums_str:\n        if i.isnumeric():\n            lst_nums.append(int(i))\n    \n    lst_nums.sort()\n    \n    return lst_nums\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list = list(test_tup)\n    test_list.extend(test_list[1:])\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n    \ndef add_tuple_2(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append((tup[0], tup[1]))\n    \ndef add_tuple_3(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append((tup[0], tup[1], tup[2]))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_tup:\n        test_list.append(tuple(test_tup))\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # TODO\n    # pass the test_list and test_tup to the function\n    # pass the list of tuples to the function\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_tup[0] in test_list:\n        return test_list.index(test_tup[0])\n    else:\n        return 0\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [tuple(test_tup)]\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    result_list = test_list + [test_tup]\n    return result_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    test_list.append(test_tup)\n    print(test_list)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    else:\n        return arr[i] >= arr[i//2]\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return False\n    elif arr[i] < arr[(i - 1)//2]:\n        return True\n    else:\n        return check_min_heap_helper(arr, (i - 1)//2)\n    \ndef heapify(arr, i, n):\n    '''\n    Write a function to solve the heapify problem by using preprocessing.\n    '''\n    while i > 0:\n        min_index = i\n        for j in range(i//2, -1, -1):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index!= i:\n            arr[min_index], arr[i] = arr[i], arr[min_index]\n            i = min_index\n        else:\n            break\n    return arr, i\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[2 * i + 1] and arr[i] > arr[2 * i + 2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base Case\n    if i < 0:\n        return True\n    \n    # If the array is empty, we are out of a sub-array\n    elif i == 0:\n        return False\n    \n    # If the array is not empty\n    else:\n        # Sub-array at index i\n        while arr[i] < arr[i//2]:\n            # Swap i and i//2\n            i = i//2\n        # swap j with i\n        arr[i], arr[i//2] = arr[i//2], arr[i]\n        # Check if min heap\n        return check_min_heap_helper(arr, i//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return False\n    j = 2*i + 1\n    while j < len(arr):\n        if arr[j] < arr[j//2]:\n            return False\n        j = j * 2\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and arr[i] > arr[i//2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    # max heap\n    if arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) or check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i < 0):\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i+1) // 2 > len(arr)-1:\n        return True\n    else:\n        return arr[i] >= arr[i+1]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(math.pow(10, n))\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return 152\n    if n == 154:\n        return 153\n    if n == 155:\n        return 154\n    if n == 156:\n        return 155\n    if n == 157:\n        return 156\n    if n == 158:\n        return 157\n    if n == 159:\n        return 158\n    if n == 160:\n        return 159\n    if n == 161:\n        return 160\n    if n == 162:\n        return 161\n    if n == 163:\n        return 162\n    if n == 164:\n        return 163\n    if n == 165:\n        return 164\n    if n == 166:\n        return 165\n    if n == 167:\n        return 166\n    if n == 168:\n        return 167\n    if n == 169:\n        return 168\n    if n == 170:\n        return 169\n    if n == 171:\n        return 170\n    if n == 172:\n        return 171\n    if n == 173:\n        return 172\n    if n == 174:\n        return 173\n    if n == 175:\n        return 174\n    if n == 176:\n        return 175\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    j = 1\n    while n!= 1:\n        if n % j == 0:\n            n = n // j\n        else:\n            j += 1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    assert n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 4\n    if n == 8:\n        return 4\n    if n == 9:\n        return 4\n    if n == 10:\n        return 5\n    if n == 11:\n        return 6\n    if n == 12:\n        return 6\n    if n == 13:\n        return 7\n    if n == 14:\n        return 7\n    if n == 15:\n        return 8\n    if n == 16:\n        return 9\n    if n == 17:\n        return 10\n    if n == 18:\n        return 11\n    if n == 19:\n        return 12\n    if n == 20:\n        return 13\n    if n == 21:\n        return 14\n    if n == 22:\n        return 15\n    if n == 23:\n        return 16\n    if n == 24:\n        return 17\n    if n == 25:\n        return 18\n    if n == 26:\n        return 19\n    if n == 27:\n        return 20\n    if n == 28:\n        return 21\n    if n == 29:\n        return 22\n    if n == 30:\n        return 23\n    if n == 31:\n        return 24\n    if n == 32:\n        return 25\n    if n == 33:\n        return 26\n    if n == 34:\n        return 27\n    if n == 35:\n        return 28\n    if n == 36:\n        return 29\n    if n == 37:\n        return 30\n    if n == 38:\n        return 31\n    if n == 39:\n        return 32\n    if n == 40:\n        return 33\n    if n == 41:\n        return 34\n    if n == 42:\n        return 35\n    if n == 43:\n        return 36\n    if n == 44:\n        return 37\n    if n == 45:\n        return 38\n    if n == 46:\n        return 39\n    if n == 47:\n        return 40\n    if n == 48:\n        return 41\n    if n == 49:\n        return 42\n    if n == 50:\n        return 43\n    if n == 51:\n        return 44\n    if n == 52:\n        return 45\n    if n == 53:\n        return 46\n    if n == 54:\n        return 47\n    if n == 55:\n        return 48\n    if n == 56:\n        return 49\n    if n == 57:\n        return 50\n    if n == 58:\n        return 51\n    if n == 59:\n        return 52\n    if n == 60:\n        return 53\n    if n == 61:\n        return 54\n    if n == 62:\n        return 55\n    if n == 63:\n        return 56\n    if n == 64:\n        return 57\n    if n == 65:\n        return 58\n    if n == 66:\n        return 59\n    if n == 67:\n        return 60\n    if n == 68:\n        return 61\n    if n == 69:\n        return 62\n    if n == 70:\n        return 63\n    if n == 71:\n        return 64\n    if n == 72:\n        return 65\n    if n == 73:\n        return 66\n    if n == 74:\n        return 67\n    if n == 75:\n        return 68\n    if n == 76:\n        return 69\n    if n == 77:\n        return 70\n    if n == 78:\n        return 71\n    if n == 79:\n        return 72\n    if n == 80:\n        return 73\n    if n == 81:\n        return 74\n    if n == 82:\n        return 75\n    if n == 83:\n        return 76\n    if n == 84:\n        return 77\n    if n == 85:\n        return 78\n    if n == 86:\n        return 79\n    if n == 87:\n        return 80\n    if n == 88:\n        return 81\n    if n == 89:\n        return 82\n    if n == 90:\n        return 83\n    if n == 91:\n        return 84\n    if n == 92:\n        return 85\n    if n == 93:\n        return 86\n    if n == 94:\n        return 87\n    if n == 95:\n        return 88\n    if n == 96:\n        return 89\n    if n == 97:\n        return 90\n    if n == 98:\n        return 91\n    if n == 99:\n        return 92\n    if n == 100:\n        return 93\n    if n == 101:\n        return 94\n    if n == 102:\n        return 95\n    if n == 103:\n        return 96\n    if n == 104:\n        return 97\n    if n == 105:\n        return 98\n    if n == 106:\n        return 99\n    if n == 107:\n        return 100\n    if n == 108:\n        return 101\n    if n == 109:\n        return 102\n    if n == 110:\n        return 103\n    if n == 111:\n        return 104\n    if n == 112:\n        return 105\n    if n == 113:\n        return 106\n    if n == 114:\n        return 107\n    if n == 115:\n        return 108\n    if n == 116:\n        return 109\n    if n == 117:\n        return 110\n    if n == 118:\n        return 111\n    if n == 119:\n        return 112\n    if n == 120:\n        return 113\n    if n == 121:\n        return 114\n    if n == 122:\n        return 115\n    if n == 123:\n        return 116\n    if n == 124:\n        return 117\n    if n == 125:\n        return 118\n    if n == 126:\n        return 119\n    if n == 127:\n        return 120\n    if n == 128:\n        return 121\n    if n == 129:\n        return 122\n    if n == 130:\n        return 123\n    if n == 131:\n        return 124\n    if n == 132:\n        return 125\n    if n == 133:\n        return 126\n    if n == 134:\n        return 127\n    if n == 135:\n        return 128\n    if n == 136:\n        return 129\n    if n == 137:\n        return 130\n    if n == 138:\n        return 131\n    if n == 139:\n        return 132\n    if n == 140:\n        return 133\n    if n == 141:\n        return 134\n    if n == 142:\n        return 135\n    if n == 143:\n        return 136\n    if n == 144:\n        return 137\n    if n == 145:\n        return 138\n    if n == 146:\n        return 139\n    if n == 147:\n        return 140\n    if n == 148:\n        return 141\n    if n == 149:\n        return 142\n    if n == 150:\n        return 143\n    if n == 151:\n        return 144\n    if n == 152:\n        return 145\n    if n == 153:\n        return 146\n    if n == 154:\n        return 147\n    if n == 155:\n        return 148\n    if n == 156:\n        return 149\n    if n == 157:\n        return 150\n    if n == 158:\n        return 151\n    if n == 159:\n        return 152\n    if n == 160:\n        return 153\n    if n == 161:\n        return 154\n    if n == 162:\n        return 155\n    if n == 163:\n        return 156\n    if n == 164:\n        return 157\n    if n == 165:\n        return 158\n    if n == 166:\n        return 159\n    if n == 167:\n        return 160\n    if n == 168:\n        return 161\n    if n == 169:\n        return 162\n    if n == 170:\n        return 163\n    if n == 171:\n        return 164\n    if n == 172:\n        return 165\n    if n == 173:\n        return 166\n    if n == 174:\n        return 167\n    if n == 175:\n        return 168\n    if n == 176"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i\n    return num\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return n\n    if n < 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 1\n    elif n == 6:\n        return 1\n    elif n == 7:\n        return 1\n    elif n == 8:\n        return 1\n    elif n == 9:\n        return 1\n    elif n == 10:\n        return 1\n    elif n == 11:\n        return 1\n    elif n == 12:\n        return 1\n    elif n == 13:\n        return 1\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 1\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 1\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 1\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 1\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 1\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 1\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 1\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 1\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 1\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 1\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 1\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 1\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 1\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 1\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 1\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 1\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 1\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 1\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 1\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 1\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 1\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 1\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 1\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 1\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 1\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 1\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 1\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 1\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 1\n    elif n == 72:\n        return 1\n    elif n == 73:\n        return 1\n    elif n == 74:\n        return 1\n    elif n == 75:\n        return 1\n    elif n == 76:\n        return 1\n    elif n == 77:\n        return 1\n    elif n == 78:\n        return 1\n    elif n == 79:\n        return 1\n    elif n == 80:\n        return 1\n    elif n == 81:\n        return 1\n    elif n == 82:\n        return 1\n    elif n == 83:\n        return 1\n    elif n == 84:\n        return 1\n    elif n == 85:\n        return 1\n    elif n == 86:\n        return 1\n    elif n == 87:\n        return 1\n    elif n == 88:\n        return 1\n    elif n == 89:\n        return 1\n    elif n == 90:\n        return 1\n    elif n == 91:\n        return 1\n    elif n == 92:\n        return 1\n    elif n == 93:\n        return 1\n    elif n == 94:\n        return 1\n    elif n == 95:\n        return 1\n    elif n == 96:\n        return 1\n    elif n == 97:\n        return 1\n    elif n == 98:\n        return 1\n    elif n == 99:\n        return 1\n    elif n == 100:\n        return 1\n    elif n == 101:\n        return 1\n    elif n == 102:\n        return 1\n    elif n == 103:\n        return 1\n    elif n == 104:\n        return 1\n    elif n == 105:\n        return 1\n    elif n == 106:\n        return 1\n    elif n == 107:\n        return 1\n    elif n == 108:\n        return 1\n    elif n == 109:\n        return 1\n    elif n == 110:\n        return 1\n    elif n == 111:\n        return 1\n    elif n == 112:\n        return 1\n    elif n == 113:\n        return 1\n    elif n == 114:\n        return 1\n    elif n == 115:\n        return 1\n    elif n == 116:\n        return 1\n    elif n == 117:\n        return 1\n    elif n == 118:\n        return 1\n    elif n == 119:\n        return 1\n    elif n == 120:\n        return 1\n    elif n == 121:\n        return 1\n    elif n == 122:\n        return 1\n    elif n == 123:\n        return 1\n    elif n == 124:\n        return 1\n    elif n == 125:\n        return 1\n    elif n == 126:\n        return 1\n    elif n == 127:\n        return 1\n    elif n == 128:\n        return 1\n    elif n == 129:\n        return 1\n    elif n == 130:\n        return 1\n    elif n == 131:\n        return 1\n    elif n == 132:\n        return 1\n    elif n == 133:\n        return 1\n    elif n == 134:\n        return 1\n    elif n == 135:\n        return 1\n    elif n == 136:\n        return 1\n    elif n == 137:\n        return 1\n    elif n == 138:\n        return 1\n    elif n == 139:\n        return 1\n    elif n == 140:\n        return 1\n    elif n == 141:\n        return 1\n    elif n == 142:\n        return 1\n    elif n == 143:\n        return 1\n    elif n == 144:\n        return 1\n    elif n == 145:\n        return 1\n    elif n == 146:\n        return 1\n    elif n == 147:\n        return 1\n    elif n == 148:\n        return 1\n    elif n == 149:\n        return 1\n    elif n == 150:\n        return 1\n    elif n == 151:\n        return 1\n    elif n == 152:\n        return 1\n    elif n == 153:\n        return 1\n    elif n == 154:\n        return 1\n    elif n == 155:\n        return 1\n    elif n == 156:\n        return 1\n    elif n == 157:\n        return 1\n    elif n == 158:\n        return 1\n    elif n == 159:\n        return 1\n    elif n == 160:\n        return 1\n    elif n == 16"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==1:\n        return 0\n    elif n%2:\n        return 1\n    else:\n        a=0\n        while True:\n            if n%i==0:\n                a+=1\n                n//=i\n            elif n%i!=0:\n                break\n        return a\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef jacobsthal_seq(n):\n    '''\n    Write a function to find the nth jacobsthal sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef pascal(n):\n    '''\n    Write a function that returns the nth Pascal\u2019s triangle.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef pascal_seq(n):\n    '''\n    Write a function that returns the nth Pascal\u2019s sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef fibonacci(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef fibonacci_seq(n):\n    '''\n    Write a function that returns the nth Fibonacci sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef fibonacci_prime_triangle(n):\n    '''\n    Write a function that returns the nth Fibonacci Prime Triangle number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef fibonacci_prime_triangle_seq(n):\n    '''\n    Write a function that returns the nth Fibonacci Prime Triangle sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef fibonacci_sum(n):\n    '''\n    Write a function that returns the nth Fibonacci sum.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a+i\n    return a\ndef fibonacci_sum_seq(n):\n    '''\n    Write a function that returns the nth Fibonacci sum sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a+i\n    return a\ndef fibonacci_approx(n):\n    '''\n    Write a function that returns the nth Fibonacci approx. number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a+i\n    return a\ndef factorial(n):\n    '''\n    Write a function that returns the nth factorial number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_seq(n):\n    '''\n    Write a function that returns the nth factorial sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_prime_triangle(n):\n    '''\n    Write a function that returns the nth factorial Prime Triangle number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_prime_triangle_seq(n):\n    '''\n    Write a function that returns the nth factorial Prime Triangle sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_sum(n):\n    '''\n    Write a function that returns the nth factorial sum.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a+i\n    return a\ndef factorial_sum_seq(n):\n    '''\n    Write a function that returns the nth factorial sum sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_approx(n):\n    '''\n    Write a function that returns the nth factorial approx. number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod(n):\n    '''\n    Write a function that returns the nth factorial modulo number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_seq(n):\n    '''\n    Write a function that returns the nth factorial modulo sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_prime_triangle(n):\n    '''\n    Write a function that returns the nth factorial modulo Prime Triangle number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_prime_triangle_seq(n):\n    '''\n    Write a function that returns the nth factorial modulo Prime Triangle sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_sum(n):\n    '''\n    Write a function that returns the nth factorial modulo sum.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_sum_seq(n):\n    '''\n    Write a function that returns the nth factorial modulo sum sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_sum_prime_triangle(n):\n    '''\n    Write a function that returns the nth factorial modulo sum Prime Triangle number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_sum_prime_triangle_seq(n):\n    '''\n    Write a function that returns the nth factorial modulo sum Prime Triangle sequence.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_sum_approx(n):\n    '''\n    Write a function that returns the nth factorial modulo sum approx. number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_sum_prime_triangle_approx(n):\n    '''\n    Write a function that returns the nth factorial modulo sum Prime Triangle approx. number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_sum_sum_prime_triangle_approx(n):\n    '''\n    Write a function that returns the nth factorial modulo sum Prime Triangle sum approx. number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        a=a*i\n    return a\ndef factorial_mod_sum_approx_prime_triangle_approx(n):\n    '''\n    Write a function that returns the nth factorial modulo sum approx. number Prime Triangle sum approx. number.\n    '''\n    a=1\n    for i in range(1, n+1):\n        "
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = n * (n + 1) // 2\n    if n == 1: return j\n    elif n == 2: return j // 2\n    else: return j // 3 + (2 * j % 3)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # defining a recursive function to find the nth jacobsthal number \n    def jacobsthal(x): \n        \n        # if x is a valid number \n        if not isinstance(x,int) or not isinstance(x,int): \n            raise TypeError(\"Invalid input\")\n        if x < 1: \n            raise ValueError(\"Invalid input\")\n        if x == 1: \n            return 1\n        elif x == 1 or x == 3: \n            return 2\n        elif x == 5 or x == 11: \n            return 3\n        elif x == 21: \n            return 4\n        elif x == 43: \n            return 5\n        elif x == 85: \n            return 6\n        elif x == 171: \n            return 7\n        elif x == 341: \n            return 8\n        elif x == 683: \n            return 9\n        elif x == 1365: \n            return 10\n        elif x == 2731: \n            return 11\n        else: \n            return 0\n    return jacobsthal(n)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list_copy = test_list[:]\n    test_list.sort()\n    for i in range(K):\n        test_list.remove(test_list_copy[i])\n    return test_list[::-1]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = 0\n    for i in test_list:\n        minimum += 1\n        \n    return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    a = test_list[0]\n    b = test_list[1]\n    print(a,b)\n    print(a+b)\n    min = float('inf')\n    min_index = 0\n    for i in range(0,len(test_list)):\n        if i < K:\n            if test_list[i] < min:\n                min = test_list[i]\n                min_index = i\n    print(min_index, min)\n    return min_index\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # return min(tuple[0] for tuple in test_list), tuple[0]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Declare variables\n    min_k = []\n    minimum = 1\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    lst = []\n    for i in test_list:\n        lst.append(i)\n    lst.sort(reverse=True)\n    count = 0\n    for i in lst:\n        count += 1\n        if count < K:\n            continue\n        else:\n            if count > K:\n                break\n            else:\n                return i\n    return None\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) <= 0:\n        return 0\n    min_list = []\n    min_sum = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_sum:\n            min_sum = test_list[i][1]\n            min_list = [test_list[i]]\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # O(n^K) time | O(n) space\n    min_k = 0\n    for i in range(K):\n        current_min = test_list[i]\n        for j in range(i, K):\n            current_min = min(current_min, test_list[j])\n        min_k = max(min_k, current_min)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(0, len(test_list)):\n        min_list.append(test_list[i])\n    min_list = sorted(min_list)\n    min_k = len(min_list)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return test_list[0:K]"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # --------------------------------------------------------\n    # TO DO\n    # --------------------------------------------------------\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    if len(l1) == len(l2) == len(l3):\n        return l1\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l2)):\n            if l2[i] in l1 and l3[i] in l1:\n                index_list.append(l2[i])\n        for i in range(len(l1)):\n            if l1[i] in l2 and l3[i] in l2:\n                index_list.append(l1[i])\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l2)):\n            if l2[i] in l1 and l3[i] in l1:\n                index_list.append(l2[i])\n        for i in range(len(l1)):\n            if l1[i] in l2 and l3[i] in l2:\n                index_list.append(l1[i])\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l2)):\n            if l2[i] in l1 and l3[i] in l1:\n                index_list.append(l2[i])\n        for i in range(len(l1)):\n            if l1[i] in l2 and l3[i] in l2:\n                index_list.append(l1[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    l1_index = 0\n    l2_index = 0\n    l3_index = 0\n    while l1_index < len(l1) and l2_index < len(l2) and l3_index < len(l3):\n        if l1[l1_index] == l2[l2_index] == l3[l3_index]:\n            index_list.append(l1[l1_index])\n            l1_index += 1\n            l2_index += 1\n            l3_index += 1\n        elif l1[l1_index] == l2[l2_index] or l2[l2_index] == l3[l3_index]:\n            l3_index += 1\n        else:\n            l3_index += 1\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    index_list = []\n    for i in range(len(l1)):\n        list1.append(l1[i])\n    for i in range(len(l2)):\n        list2.append(l2[i])\n    for i in range(len(l3)):\n        list3.append(l3[i])\n    for index in range(len(list1)):\n        for index2 in range(len(list2)):\n            for index3 in range(len(list3)):\n                if index == index2 and index == index3:\n                    index_list.append(index)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    if l1!= [] and l2!= [] and l3!= []:\n        index_list = l1 + l2 + l3\n    else:\n        return []\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    #Convert strings to ints\n    l1 = [int(x) for x in l1]\n    l2 = [int(x) for x in l2]\n    l3 = [int(x) for x in l3]\n    \n    #Find the length of both lists\n    length = len(l1)\n    \n    #Create a list of possible indexes from l1 and l2, l3\n    l = []\n    for i in range(length):\n        if i in l1 and i in l2 and i in l3:\n            l.append(i)\n    \n    #Return the list\n    return l\n    \ndef find_common_index(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    #Convert strings to ints\n    l1 = [int(x) for x in l1]\n    l2 = [int(x) for x in l2]\n    l3 = [int(x) for x in l3]\n    \n    #Create a list of possible indexes from l1 and l2, l3\n    l = []\n    for i in range(len(l1)):\n        if i in l1 and i in l2 and i in l3:\n            l.append(i)\n    \n    #Return the list\n    return l\n    \ndef is_in(element, list):\n    '''\n    A function that takes an element, a list of all the elements in the list, and a list of all the unique elements.\n    It returns a boolean if the element is in the list, or not.\n    '''\n    \n    #Create a list of all the unique elements in the list\n    elements = list(set(list))\n    \n    #Loop through the unique elements in the list\n    for i in elements:\n        \n        #Check if the element is in the list\n        if element == i:\n            return True\n    \n    #If all the elements are in the list\n    return False\n    \ndef find_in_list(element, list):\n    '''\n    A function that takes an element, a list of all the elements in the list, and a list of all the unique elements.\n    It returns a list of the indices of all the elements that is in the list.\n    '''\n    \n    #Create a list of all the unique elements in the list\n    elements = list(set(list))\n    \n    #Loop through the unique elements in the list\n    for i in elements:\n        \n        #Check if the element is in the list\n        if element == i:\n            #Find the index of the element in the list\n            index = list.index(i)\n            #Return the index as a list\n            return index\n    \n    #If all the elements are in the list\n    return []\n    \n    \n    \n    \ndef get_solution_method(solution, index_list, solution_length):\n    '''\n    A function that takes a solution, a list of all the indices, and a solution length.\n    It returns a solution using the specified solution method.\n    '''\n    \n    #Create a list of all the unique elements in the solution\n    elements = solution.copy()\n    \n    #Loop through the unique elements in the solution\n    for i in elements:\n        \n        #Find the index of the element in the solution\n        index = solution.index(i)\n        \n        #Add the index to the solution\n        solution[index] = index_list[index]\n        \n    #Return the solution\n    return solution\n    \ndef get_solution(solution, solution_length):\n    '''\n    A function that takes a solution, a solution length, and a solution.\n    It returns a solution using the specified solution method.\n    '''\n    \n    #Create a list of all the unique elements in the solution\n    elements = solution.copy()\n    \n    #Loop through the unique elements in the solution\n    for i in elements:\n        \n        #Find the index of the element in the solution\n        index = solution.index(i)\n        \n        #Add the index to the solution\n        solution[index] = index_list[index]\n    \n    #Return the solution\n    return solution\n    \ndef validate_input(text):\n    '''\n    A function that takes a text, a list of characters, and a solution.\n    It returns a boolean indicating if all the elements are valid.\n    '''\n    \n    #Check if there are no invalid characters\n    if all([not x.isdigit() for x in text]):\n        return False\n    \n    #Check if there are no duplicate characters\n    if all([not x.isalpha() or not x.isupper() for x in text]):\n        return False\n    \n    #Check if all the elements are unique\n    if all([not x.isdigit() for x in text]):\n        return False\n    \n    #Check if the answer is not empty\n    if text.strip() == \"\":\n        return False\n    \n    #Return a boolean indicating if all the elements are valid\n    return True\n    \ndef is_valid(solution, solution_length):\n    '''\n    A function that takes a solution, a solution length, and a solution.\n    It returns a boolean indicating if all the elements are valid.\n    '''\n    \n    #Check if there are no invalid characters\n    if all([not x.isdigit() for x in solution]):\n        return False\n    \n    #Check if there are no duplicate characters\n    if all([not x.isalpha() or not x.isupper() for x in solution]):\n        return False\n    \n    #Check if all the elements are unique\n    if all([not x.isdigit() for x in solution]):\n        return False\n    \n    #Return a boolean indicating if all the elements are valid\n    return True\n    \ndef process_input(input_string):\n    '''\n    A function that takes a string, the solution, and the solution length.\n    It returns a boolean indicating if all the elements are valid.\n    '''\n    \n    #Check if the string is valid\n    if not validate_input(input_string):\n        return False\n    \n    #Return the solution\n    return solution\n    \ndef process_solution(solution, solution_length):\n    '''\n    A function that takes a solution, a solution length, and a solution.\n    It returns a solution using the specified solution method.\n    '''\n    \n    #Check if there are no invalid characters\n    if all([not x.isdigit() for x in solution]):\n        return solution\n    \n    #Loop through the solution\n    for i in range(solution_length):\n        \n        #Find the index of the element in the solution\n        index = solution.index(solution[i])\n        \n        #Add the index to the solution\n        solution[index] = index_list[index]\n    \n    #Return the solution\n    return solution\n    \ndef process_solution_list(solution, solution_length, index_list):\n    '''\n    A function that takes a solution, a solution length, and a solution.\n    It returns a solution using the specified solution method.\n    '''\n    \n    #Loop through the solution\n    for i in range(solution_length):\n        \n        #Find the index of the element in the solution\n        index = solution.index(solution[i])\n        \n        #Add the index to the solution\n        solution[index] = index_list[index]\n    \n    #Return the solution\n    return solution\n    \ndef process_solution_dict(solution, solution_length, index_list):\n    '''\n    A function that takes a solution, a solution length, and a solution.\n    It returns a solution using the specified solution method.\n    '''\n    \n    #Loop through the solution\n    for i in range(solution_length):\n        \n        #Find the index of the element in the solution\n        index = solution.index(solution[i])\n        \n        #Add the index to the solution\n        solution[index] = index_list[index]\n    \n    #Return the solution\n    return solution\n    \nde"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for element in l1:\n        if element in l2:\n            l4.append(element)\n    for element in l2:\n        if element in l3:\n            l4.append(element)\n    for element in l3:\n        if element in l4:\n            l4.append(element)\n    return l4\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    index_list.append([i,j,k])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_index = 0\n    l2_index = 0\n    l3_index = 0\n    common_list = []\n    \n    while l1_index < len(l1) and l2_index < len(l2) and l3_index < len(l3):\n        \n        if l1[l1_index] == l2[l2_index] == l3[l3_index]:\n            common_list.append(l1[l1_index])\n            common_list.append(l2[l2_index])\n            common_list.append(l3[l3_index])\n            \n            l1_index += 1\n            l2_index += 1\n            l3_index += 1\n        else:\n            if l1[l1_index] > l2[l2_index] and l2[l2_index] > l3[l3_index]:\n                l1_index += 1\n            elif l2[l2_index] > l3[l3_index] and l3[l3_index] > l1[l1_index]:\n                l2_index += 1\n            elif l3[l3_index] > l1[l1_index] and l1[l1_index] > l2[l2_index]:\n                l3_index += 1\n            \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j] and l1[i] in l3:\n                result.append(l1[i])\n    return result\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    low = 0\n    high = len(numbers) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if numbers[mid] < numbers[mid - 1] and numbers[mid] < numbers[mid + 1]:\n            return numbers[mid]\n        elif numbers[mid] < numbers[mid - 1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 'Not found'\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return numbers[n // 2]\n    else:\n        return numbers[n // 2 + 1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Find the second smallest number in a list\n    num_list = [number for number in numbers if number < numbers[0]]\n    return num_list[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest_numbers = []\n    \n    for number in numbers:\n        if not second_smallest_numbers or number > second_smallest_numbers[-1]:\n            second_smallest_numbers.append(number)\n        elif number < second_smallest_numbers[-1]:\n            second_smallest_numbers[-1] = number\n    return second_smallest_numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 2:\n        return numbers[1]\n    else:\n        return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = min(numbers)\n    for i in range(len(numbers)):\n        if numbers[i] == second_smallest:\n            return numbers[i]\n    return None\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in numbers:\n        if smallest < i:\n            smallest = i\n        elif second_smallest < i:\n            second_smallest = i\n    return second_smallest\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by two 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by three 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by four 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by five 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by six 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by seven 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_eight(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by eight 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_nine(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by nine 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_ten(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by ten 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_eleven(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by eleven 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_twelve(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by twelve 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_thirteen(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by thirteen 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_fourteen(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by fourteen 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_fifteen(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by fifteen 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_sixteen(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by sixteen 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_seventeen(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by seven 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_eighteen(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by eight 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_nineeen(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by nine 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_zero_teneen(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by ten 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(b)?',text)\n    if m:\n        return True\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    txt = re.search(r'a(.+)(.+)b', text)\n    if txt:\n        if txt.group(2).startswith('1'):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by one or more 'a's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    txt = re.search(r'(.+)(.+)b', text)\n    if txt:\n        if txt.group(2).startswith('1'):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by one or more 'a's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    txt = re.search(r'(.+)(.+)a', text)\n    if txt:\n        if txt.group(2).startswith('1'):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = []\n    pattern = re.compile('a+b')\n    for word in text.split():\n        if pattern.search(word)!= None:\n            matches.append(word)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.split('a+', text)\n    text = re.sub('b', '', text)\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    result = re.findall(r'(?<=\\n).*?(?=\\n)', text)\n    if len(result) == 0:\n        return result\n    else:\n        result = '\\n'.join(result)\n        return result\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #find all patterns\n    patterns = re.findall(r'\\b\\w+\\b', text)\n    \n    #find indices of 'b' and 'a'\n    index = 0\n    for pattern in patterns:\n        if pattern == 'a':\n            index += 1\n        elif pattern == 'b':\n            index += 1\n            \n    #return result\n    return index\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    x = text.lower().split(' ')\n    for i in x:\n        if i == 'a' or i == 'b':\n            return True\n    return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # <----- text match operation with or without a and b\n    # re.search(pattern, text)\n    # match the pattern in the string\n    pattern = r'\\b[a-zA-Z][a-zA-Z_]*\\b'\n    res = re.findall(pattern, text)\n    return res\n    # res = re.findall(pattern, text)\n    # return list(map(lambda x: x.replace(' ', ''), res))\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.search(r'(?:(a){0,1}b)(?=\\w)(.+)',text)\n    if text:\n        return text.group(2)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('a', text)\n    return match\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #count the number of pairs of reverse strings\n    pairs = 0\n    #count the number of pairs of intreversed strings\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    prev = ''\n    for i in test_list:\n        if i == prev:\n            count += 1\n        else:\n            if count > 1:\n                count = 1\n            prev = i\n        # print(i, prev)\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # the first method to solve the problem is to use a stack.\n    # The first condition is to check if the start and end are not the same\n    if len(test_list) <= 1:\n        return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    #first get the reversed string list\n    reversed_list = test_list[:]\n    reversed_list.reverse()\n    #now count the pairs of pairs\n    for i in range(0, len(reversed_list)-1):\n        #since we want to count from the last character\n        #to the first character\n        if reversed_list[i] == reversed_list[i+1]:\n            #if first and second are same\n            count = count + 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def count_pairs(s1,s2):\n        '''\n        Count the number of times the string s1 and s2 are equal and print the result.\n        '''\n        count = 0\n        for i in range(len(s1)):\n            if s1[i] == s2[i]:\n                count += 1\n        return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Write your code here.\n    string_set = set(test_list)\n    count = 0\n    for char in string_set:\n        for i in range(len(test_list)-1):\n            if test_list[i] == char and test_list[i]!= char and test_list[i+1]!= char:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        if test_list[i] == test_list[len(test_list) - 1 - i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_pair = 0\n    for i in range(0, len(test_list) - 1):\n        if test_list[i] == test_list[i+1]:\n            count_pair += 1\n        else:\n            break\n    return count_pair\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    s = 0\n    n = len(test_list)\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j]:\n                s += 1\n    return s\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return  dict(Counter(test_list[::-1]))\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def create_tuple(tuple):\n        '''\n        Create a tuple of length len(tuple) where each element is a pair of the number of the element that appears\n        in that position, and the index of that position\n        '''\n        return tuple\n    counter = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if (list1[i] == list1[j]):\n                if i in counter:\n                    counter[i] += 1\n                else:\n                    counter[i] = 1\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    out = {}\n    for sub in list1:\n        temp = tuple(sub)\n        if temp in out:\n            out[temp] += 1\n        else:\n            out[temp] = 1\n    return out\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    counter = Counter(list1)\n    return dict(counter)\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for i in list1:\n        unique_dict[tuple(i)] = list1.count(i)\n    return unique_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    #create a list with the same length as the original list\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    #make it a tuple with the elements of the list\n    tuple1 = tuple(new_list)\n    #make a dictionary\n    dict1 = dict.fromkeys(tuple1, 0)\n    #print the dictionary\n    print(dict1)\n    #check if list is empty, if so return None as the result\n    if new_list == []:\n        return None\n    #loop through the list\n    for i in range(len(list1)):\n        #if the element is not the same as the one in the tuple\n        if new_list[i]!= tuple1[i]:\n            #add the number of occurences of the element to the dictionary\n            dict1[tuple1[i]] += 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublist = {}\n    for i in range(0,len(list1)):\n        unique_sublist[list1[i]] = list1[i]\n    return unique_sublist\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_dict = {}\n    for x in range(0,len(list1)):\n        current_list = []\n        for y in range(0,len(list1)):\n            if list1[x] in new_dict.keys():\n                current_list.append(new_dict[list1[x]])\n            else:\n                new_dict[list1[x]] = 1\n        new_dict[list1[x]] = current_list\n    return new_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in list1:\n        if not i in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import defaultdict\n    total_occurances = 0\n    d = defaultdict(int)\n    for i in range(len(list1)):\n        d[tuple(list1[i])] = d[tuple(list1[i])] + 1\n        total_occurances += d[tuple(list1[i])]\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).replace('.', '-') in [i.replace('.', '') for i in str(num)]\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # 1st check for a positive number\n    if num.isdigit():\n        return True\n    \n    # 2nd check for a negative number\n    if num.endswith('.'):\n        return False\n    \n    # 3rd check for a zero\n    if num.isalpha() or num.isalnum():\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    precision = 2\n    return num.replace('.','').isdigit() and num.replace('.','').isalpha() and len(num) <=precision and not any(num.endswith(i) for i in ['+', '-']) and all(c.isdigit() for c in num)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.match(r'\\d+\\.\\d+|\\d+', num):\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        num = num.replace('.', '')\n    if num[0]!= '0':\n        return False\n    if len(num)!= 2:\n        return False\n    if num[1] == '.':\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).replace('.','').isdigit()\n    \ndef is_even(num):\n    '''\n    Write a function to check whether a given number is even or not.\n    '''\n    return num % 2 == 0\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = [int(x) for x in str(num)]\n    return sum(num_list) == num\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str) or not all(i.isdigit() for i in num) or len(num)!= 10:\n        return False\n    return num.isdigit()\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_len = len(arr)\n    temp = 0\n    for i in range(arr_len):\n        temp = arr[i]\n        for j in range(i, arr_len):\n            if temp == arr[j]:\n                temp = 0\n                break\n        if temp!= 0:\n            break\n    return temp\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] == arr[i]):\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if i in arr:\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # get length of list\n    n = len(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if i in arr:\n            arr.remove(i)\n    if arr==[]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    '''\n    For Example:\n    arr = [1,2,2,1,2,3,3,4,5,6,7]\n    Result => 1\n    '''\n    '''\n    arr = [1,2,2,1,2,3,3,4,5,6,7]\n    Result => 2\n    '''\n    unique = []\n    for i in arr:\n        if i not in unique:\n            unique.append(i)\n    return len(unique) == 1"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for i in arr:\n        if i in unique:\n            unique.remove(i)\n        else:\n            unique.append(i)\n    return len(unique) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==1:\n        return arr == [arr[0]]\n    else:\n        set_lst = set(arr)\n        for i in range(0,len(arr)):\n            if arr[i] in set_lst:\n                return False\n    return True\n    \ndef solution(arr):\n    '''\n    Write a python function that returns True if the array contains only one distinct number and False otherwise.\n    '''\n    return not unique_Element(arr"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #Check whether the given month number contains 30 days or not\n    if monthnum3 == 3:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"\\nThe month number is 30 days\")\n        else:\n            print(\"\\nThe month number is not 30 days\")\n            print(\"Try again\\n\")\n    else:\n        print(\"\\nThis month number is not 30 days\")\n        print(\"Try again\\n\")\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        if monthnum3 == 1:\n            monthnum3 = 'Jan'\n        elif monthnum3 == 2:\n            monthnum3 = 'Feb'\n        elif monthnum3 == 3:\n            monthnum3 = 'Mar'\n        elif monthnum3 == 4:\n            monthnum3 = 'Apr'\n        elif monthnum3 == 5:\n            monthnum3 = 'May'\n        elif monthnum3 == 6:\n            monthnum3 = 'Jun'\n        elif monthnum3 == 7:\n            monthnum3 = 'Jul'\n        elif monthnum3 == 8:\n            monthnum3 = 'Aug'\n        elif monthnum3 == 9:\n            monthnum3 = 'Sep'\n        elif monthnum3 == 10:\n            monthnum3 = 'Oct'\n        elif monthnum3 == 11:\n            monthnum3 = 'Nov'\n        elif monthnum3 == 12:\n            monthnum3 = 'Dec'\n    elif monthnum3 == 2:\n        if monthnum3 == 1:\n            monthnum3 = 'Jan'\n        elif monthnum3 == 2:\n            monthnum3 = 'Feb'\n        elif monthnum3 == 3:\n            monthnum3 = 'Mar'\n        elif monthnum3 == 4:\n            monthnum3 = 'Apr'\n        elif monthnum3 == 5:\n            monthnum3 = 'May'\n        elif monthnum3 == 6:\n            monthnum3 = 'Jun'\n        elif monthnum3 == 7:\n            monthnum3 = 'Jul'\n        elif monthnum3 == 8:\n            monthnum3 = 'Aug'\n        elif monthnum3 == 9:\n            monthnum3 = 'Sep'\n        elif monthnum3 == 10:\n            monthnum3 = 'Oct'\n        elif monthnum3 == 11:\n            monthnum3 = 'Nov'\n        elif monthnum3 == 12:\n            monthnum3 = 'Dec'\n    elif monthnum3 == 3:\n        if monthnum3 == 1:\n            monthnum3 = 'Jan'\n        elif monthnum3 == 2:\n            monthnum3 = 'Feb'\n        elif monthnum3 == 3:\n            monthnum3 = 'Mar'\n        elif monthnum3 == 4:\n            monthnum3 = 'Apr'\n        elif monthnum3 == 5:\n            monthnum3 = 'May'\n        elif monthnum3 == 6:\n            monthnum3 = 'Jun'\n        elif monthnum3 == 7:\n            monthnum3 = 'Jul'\n        elif monthnum3 == 8:\n            monthnum3 = 'Aug'\n        elif monthnum3 == 9:\n            monthnum3 = 'Sep'\n        elif monthnum3 == 10:\n            monthnum3 = 'Oct'\n        elif monthnum3 == 11:\n            monthnum3 = 'Nov'\n        elif monthnum3 == 12:\n            monthnum3 = 'Dec'\n    elif monthnum3 == 4:\n        if monthnum3 == 1:\n            monthnum3 = 'Jan'\n        elif monthnum3 == 2:\n            monthnum3 = 'Feb'\n        elif monthnum3 == 3:\n            monthnum3 = 'Mar'\n        elif monthnum3 == 4:\n            monthnum3 = 'Apr'\n        elif monthnum3 == 5:\n            monthnum3 = 'May'\n        elif monthnum3 == 6:\n            monthnum3 = 'Jun'\n        elif monthnum3 == 7:\n            monthnum3 = 'Jul'\n        elif monthnum3 == 8:\n            monthnum3 = 'Aug'\n        elif monthnum3 == 9:\n            monthnum3 = 'Sep'\n        elif monthnum3 == 10:\n            monthnum3 = 'Oct'\n        elif monthnum3 == 11:\n            monthnum3 = 'Nov'\n        elif monthnum3 == 12:\n            monthnum3 = 'Dec'\n    elif monthnum3 == 5:\n        if monthnum3 == 1:\n            monthnum3 = 'Jan'\n        elif monthnum3 == 2:\n            monthnum3 = 'Feb'\n        elif monthnum3 == 3:\n            monthnum3 = 'Mar'\n        elif monthnum3 == 4:\n            monthnum3 = 'Apr'\n        elif monthnum3 == 5:\n            monthnum3 = 'May'\n        elif monthnum3 == 6:\n            monthnum3 = 'Jun'\n        elif monthnum3 == 7:\n            monthnum3 = 'Jul'\n        elif monthnum3 == 8:\n            monthnum3 = 'Aug'\n        elif monthnum3 == 9:\n            monthnum3 = 'Sep'\n        elif monthnum3 == 10:\n            monthnum3 = 'Oct'\n        elif monthnum3 == 11:\n            monthnum3 = 'Nov'\n        elif monthnum3 == 12:\n            monthnum3 = 'Dec'\n    elif monthnum3 == 6:\n        if monthnum3 == 1:\n            monthnum3 = 'Jan'\n        elif monthnum3 == 2:\n            monthnum3 = 'Feb'\n        elif monthnum3 == 3:\n            monthnum3 = 'Mar'\n        elif monthnum3 == 4:\n            monthnum3 = 'Apr'\n        elif monthnum3 == 5:\n            monthnum3 = 'May'\n        elif monthnum3 == 6:\n            monthnum3 = 'Jun'\n        elif monthnum3 == 7:\n            monthnum3 = 'Jul'\n        elif monthnum3 == 8:\n            monthnum3 = 'Aug'\n        elif monthnum3 == 9:\n            monthnum3 = 'Sep'\n        elif monthnum3 == 10:\n            monthnum3 = 'Oct'\n        elif monthnum3 == 11:\n            monthnum3 = 'Nov'\n        elif monthnum3 == 12:\n            monthnum3 = 'Dec'\n    elif monthnum3 == 7:\n        if monthnum3 == 1:\n            monthnum3 = 'Jan'\n        elif monthnum3 == 2:\n            monthnum3 = 'Feb'\n        elif monthnum3 == 3:\n            monthnum3 = 'Mar'\n        elif monthnum3 == 4:\n            monthnum3 = 'Apr'\n        elif monthnum3 == 5:\n            monthnum3 = 'May'\n        elif monthnum3 == 6:\n            monthnum3 = 'Jun'\n        elif monthnum3 == 7:\n            monthnum3 = 'Jul'\n        elif monthnum3 == 8:\n            monthnum3 = 'Aug'\n        elif monthnum3 == 9:\n            monthnum3 = 'Sep'\n        elif monthnum3 == 10:\n            monthnum3 = 'Oct'\n        elif monthnum3 == 11:\n            monthnum3 = 'Nov'\n        elif monthnum3 == 12:\n            monthnum3 = 'Dec'\n    elif monthnum3 == 8:\n        if monthnum3 == 1:\n            monthnum3 = 'Jan'\n        elif monthnum3 == 2:\n            monthnum3 = 'Feb'\n        elif monthnum3 == 3:\n            monthnum3 = 'Mar'\n        elif monthnum3 == 4:\n            monthnum3 = 'Apr'\n        elif monthnum3 == 5:\n            monthnum3 = 'May'\n        elif monthnum3 == 6:\n            monthnum3 = 'Jun'\n        elif monthnum3 == 7:\n            monthnum3 = 'Jul'\n        elif monthnum3 == 8:\n            monthnum3 = 'Aug'\n        elif monthnum3 == 9:\n            monthnum3 = 'Sep'\n        elif monthnum3 == 10:\n            monthnum3 = 'Oct'\n        elif monthnum3 == 11:\n            monthnum3 = 'Nov'\n        elif monthnum3 == 12:\n            monthnum3 = 'Dec'\n    elif monthnum3 == 9:\n        if monthnum3 == 1:\n            monthnum3 = 'Jan'\n        elif monthnum3 == 2:\n            monthnum3 = 'Feb'\n        elif monthnum3 == 3:\n            monthnum3 = 'Mar'\n        elif monthnum3 == 4:\n            monthnum3 = 'Apr'\n        elif monthnum3 == 5:\n            monthnum3 = 'May'"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        raise ValueError('The month number must be between 1 and 12.')\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3>12 or monthnum3<1):\n        return False\n    elif (monthnum3%100 == 0):\n        if(monthnum3%10 == 0):\n            if(monthnum3%4 == 0):\n                if(monthnum3%100 == 0):\n                    if(monthnum3%400 == 0):\n                        return True\n            else:\n                if(monthnum3%400 == 0):\n                    return True\n        else:\n            if(monthnum3%400 == 0):\n                return True\n    else:\n        if(monthnum3%4 == 0):\n            if(monthnum3%100 == 0):\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if not type(monthnum3) is int:\n        return'month number must be an integer number!'\n    elif not 1 <= monthnum3 <= 12:\n        return'month number must be from 1 to 12!'\n    elif monthnum3 < 1 or monthnum3 > 12:\n        return'month number must be from 1 to 12!'\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11 or monthnum3 == 12:\n        return 'Month is full'\n    elif monthnum3 in range(1, 13):\n        return 'Month is not full'\n    else:\n        return False\n    "
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = monthnum3\n    for m in range(1, 13):\n        if monthnum % 7 == 0:\n            return True\n        else:\n            monthnum = monthnum + 1\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        return True\n    else:\n        return False\n    \ndef check_daynumber_number(daynum3):\n    '''\n    Write a function that takes a number and determines whether that number is a leap day or not.\n    '''\n    if daynum3 % 400 == 0:\n        return True\n    elif daynum3 % 100 == 0:\n        return False\n    elif daynum3 % 4 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef main():\n    '''\n    Main function, here, it takes input from the user.\n    '''\n    \n    # define the input for the month\n    input_month=int(input(\"Enter the Month Number: \"))\n    \n    # define the input for the day\n    input_day=int(input(\"Enter the Day Number: \"))\n    \n    # check whether the given month is a leap year or not\n    if check_monthnumber_number(input_month):\n        print(\"This is a leap year\")\n    else:\n        print(\"This is not a leap year\")\n    \n    # check whether the given day is a leap year or not\n    if check_daynumber_number(input_day):\n        print(\"This is a leap year\")\n    else:\n        print(\"This is not a leap year\")\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #all values in the array are compared \n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                #print(arr[i],arr[j])\n                #print(arr[i]-arr[j])\n                return arr[i]-arr[j]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    low = 0\n    high = len(arr) - 1\n    count = 1\n    while count <= n:\n        if arr[low] > arr[high]:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n            count += 1\n        else:\n            low += 1\n            high -= 1\n    return arr\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = []\n    min_diff = 9999999\n    for i in range(0,n):\n        diff.append(arr[i] - arr[i-1])\n    for i in range(0,n-1):\n        diff[i] = abs(arr[i] - arr[i+1])\n    for i in range(0,n-1):\n        diff[i] = abs(arr[i] - arr[i+1])\n        if diff[i] < min_diff:\n            min_diff = diff[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if arr[0]!= arr[-1]:\n        arr.append(arr[0])\n    if arr[-1]!= arr[0]:\n        arr.insert(0, arr[-1])\n    min_diff = arr[0] - arr[1]\n    for i in range(2, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # max_min_diff = 0\n    # for i in range(n):\n    #     for j in range(n):\n    #         diff = arr[i] - arr[j]\n    #         if diff < 0:\n    #             diff = -diff\n    #         max_min_diff = max(max_min_diff,diff)\n    # return max_min_diff\n    min_diff = -99999\n    for i in range(n):\n        for j in range(n):\n            if abs(arr[i]-arr[j]) < min_diff:\n                min_diff = abs(arr[i]-arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Step 1: Find the minimum value of array\n    min_diff = arr[0] - arr[1]\n    # Step 2: Starting from the second element, find the minimum \n    # value of array.\n    for i in range(2,n): \n        min_diff = min(min_diff,arr[i]-arr[i-1])\n    # Step 3: Return the minimum value of array\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    lst = []\n    for i in range(n):\n        lst.append(arr[i])\n    print(lst)\n    def find_min_diff(arr,n): \n        if len(arr)<n:\n            print(\"List is shorter than n\")\n        elif n==1:\n            return arr[0]\n        else:\n            min_diff = float(\"inf\")\n            for i in range(n-1):\n                if arr[i]!= arr[i+1]:\n                    if arr[i+1] - arr[i] < min_diff:\n                        min_diff = arr[i+1] - arr[i]\n                    \n            return min_diff\n    return find_min_diff(lst,n)\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(find_min_diff(arr,n))\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_dif=n[0]\n    index_min=0\n    for i in range(1,n[0]):\n        if arr[i]<arr[index_min]:\n            index_min=i\n    \n    for i in range(1,n[0]):\n        if arr[i]<arr[index_min]:\n            min_dif=min(min_dif,arr[i])\n    return min_dif\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    i,j = 0,n-1\n    while i<n and j>=0:\n        if arr[i]!= arr[j]:\n            if arr[i]-arr[j] < min_diff:\n                min_diff = arr[i]-arr[j]\n                min_index = i\n            if arr[j]-arr[i] < min_diff:\n                min_diff = arr[j]-arr[i]\n                min_index = j\n        i+=1\n        j-=1\n    return min_index\n        \ndef is_empty(arr,n):\n    if n==0 or n==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    result = -999999999999999\n    min_diff = -999999999999999\n    for i in range(n-1):\n        min_diff = max(min_diff, arr[i+1]-arr[i])\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count = count + 1\n    print(count)\n    \nstr = input(\"Enter a string: \")\nnumber_ctr(str)"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # If string is empty\n    if len(str) == 0:\n        return 0\n    # If string contains spaces\n    elif len(str) == 1:\n        return 1\n    # If string contains only digits\n    elif str.isdigit():\n        return int(str)\n    else:\n        # Keep converting string to digits\n        return number_ctr(str.replace(str[0], '0')) + number_ctr(str.replace(str[1], '0'))\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if len(str) < 1:\n        return 0\n    else:\n        return sum([char.isdigit() for char in str])\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    dic = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5,'six':6,'seven':7, 'eight':8, 'nine':9}\n    count = 0\n    for i in str:\n        count += dic[i]\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if len(str)<=0:\n        return 0\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr +=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return False\n    n = n % 10\n    return n == n+1 or n == n+3 or n == n+5 or n == n+7 or n == n+9 or n == n+11\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # if n > 1:\n    #     nth_polite = math.gcd(n - 1, n)\n    #     return nth_polite\n    # else:\n    #     return 1\n    if n <= 0: \n        return 1\n    elif n % 2 == 0:\n        return is_polite(n/2)\n    else:\n        return is_polite(n-1)\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else: \n        x = 0\n        y = n - 1\n        while y >= x: \n            if y % 2 == 1: \n                x = x + 1\n            else: \n                y = y // 2\n        return x\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return \"No.NOL\"\n    elif n > 10: \n        return \"NaN\"\n    else: \n        return math.pow(10, n)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    f=n\n    return f+1 if (f>1) and (f%2==0) else f\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    tot_polite = 0\n    for i in range(1, int(n) + 1):\n        tot_polite += i**2\n    return tot_polite \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n==0):\n        return 0\n    elif(n%2==0):\n        return n//2\n    else:\n        return n-1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=1: return False\n    if n%2==0: return False\n    else: \n        return is_polite(n-1)\n    "
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n % 5 == 0 or n % 5 == 3) and n > 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    else: \n        for i in range(1,n+1):\n            if is_polite(i) == False:\n                return False\n            if i % 2 == 1: \n                return True\n    return True\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    return [(x,y) for (x,y) in combinations(l1, 2)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = [i for i in l1 if i not in l1[::-1]]\n    l1.sort()\n    return l1\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        l2.append((l1[i], l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            if l1[i] == l1[j] or l1[i] + l1[j] < l1[j]:\n                l2.append((l1[i],l1[j]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # for i in range(len(l1)-1):\n    #     if(l1[i] == l1[i+1]):\n    #         continue\n    #     elif(l1[i+1] == l1[i]):\n    #         continue\n    #     else:\n    #         yield(l1[i], l1[i+1])\n        \n    pair = []\n    for i in range(len(l1)-1):\n        if(l1[i] == l1[i+1]):\n            continue\n        else:\n            if(l1[i] not in pair):\n                pair.append(l1[i])\n            if(l1[i+1] not in pair):\n                pair.append(l1[i+1])\n            \n    return pair\n    \n    \n    \ndef pair_with_n(l1, n):\n    '''\n    Write a function to return a list of all pairs of consecutive items with a number\n    equal to a given value.\n    '''\n    pair = []\n    for i in range(len(l1)-1):\n        if(l1[i] == l1[i+1]):\n            continue\n        elif(l1[i+1] == l1[i]):\n            continue\n        else:\n            if(l1[i+1] not in pair):\n                pair.append(l1[i+1])\n            if(l1[i] not in pair):\n                pair.append(l1[i])\n                \n    for i in range(n):\n        pair.append(l1[i])\n        \n    return pair\n        \n    \n    \ndef union(l1, l2):\n    '''\n    Write a function to return the elements of l1 that appear in both lists l2.\n    '''\n    union_l = []\n    for i in l1:\n        if(i not in l2):\n            union_l.append(i)\n        \n    return union_l\n    \n    \ndef intersection(l1, l2):\n    '''\n    Write a function to return the elements of l1 that are present in both lists.\n    '''\n    intersection_l = []\n    for i in l1:\n        if(i in l2):\n            intersection_l.append(i)\n        \n    return intersection_l\n    \n    \ndef find_ranks(l1):\n    '''\n    Write a function to return a list of all the ranks in a list of lists.\n    '''\n    \n    R = []\n    for i in range(len(l1)):\n        if(l1[i] not in R):\n            R.append(l1[i])\n            \n    return R\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        for j in range(i, len(l1)):\n            if l1[i]!= l1[j]:\n                res.append((l1[i], l1[j]))\n    return res\n    \ndef is_palindrome(s):\n    '''\n    Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    a = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j]:\n                a.append((l1[i], l1[j]))\n    return a\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(0,len(l1)-1):\n        for j in range(i+1,len(l1)):\n            l2.append([l1[i],l1[j]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(0, len(l1) - 1):\n        if l1[i] == l1[i+1]:\n            pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1_sorted = sorted(l1)\n    l1_sorted = [l1_sorted[i:i+2] for i in range(0, len(l1_sorted), 2)]\n    return l1_sorted\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] + arr[i] == sum:\n            count += 1\n    return count\n    \ndef sort_pairs(arr, sum):\n    '''\n    Write a python function to sort the list. The input is a list of numbers and a sum.\n    '''\n    arr_sort = sorted(arr, key = get_pairs_count)\n    print(arr_sort)\n    return arr_sort\n    \ndef main():\n    '''\n    Write a python program to sort the list based on the sum of the elements in the array.\n    '''\n    arr = [6, 1, 5, 4, 10, 10]\n    sum = 5\n    print(sort_pairs(arr, sum))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in arr:\n        for j in arr:\n            if (i + j) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair = 0\n    for i in arr:\n        pair += (i + sum)\n    return pair\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for num in arr:\n        if (sum - num) in arr:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # get list of numbers\n    numbers = arr\n    # get sum\n    sum = sum\n    # get length of list\n    n = len(numbers)\n    # initialize pairs list\n    pairs = []\n    # initialize pair counter\n    pair_counter = 0\n    # get pair counter\n    pair_counter = pair_counter + 1\n    # for every number in the numbers list\n    for i in range(n):\n        # get sum of numbers in the list\n        sum = numbers[i]\n        # get the index of the pair\n        idx = 0\n        # for each item in numbers\n        for j in range(i+1, n):\n            # get the sum of numbers\n            j = numbers[j]\n            # if sum is equal to the sum of two numbers\n            if sum == j:\n                # create the pair\n                pair = [i, j]\n                # append the pair to pairs\n                pairs.append(pair)\n                # increment pair counter\n                pair_counter = pair_counter + 1\n    # if the sum of all the numbers is equal to the sum of the pair numbers\n    if sum == pairs[0][1] and pairs[0][0] + pairs[1][0] == pairs[1][1]:\n        # check if the pair numbers are also pairs\n        for pair in pairs:\n            # if the pair is also pairs\n            if pair[0] == pairs[0][1] and pair[1] == pairs[0][1]:\n                # increment the counter\n                pair_counter = pair_counter + 1\n    return pair_counter\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    nums_count = 0\n    for i in range(len(arr)-1):\n        if (sum-arr[i])==arr[i]:\n            nums_count += 1\n    return nums_count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    temp = []\n    for i in range(len(li1)):\n        temp.append(li1[i]-li2[i])\n    return temp\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = 0\n    for i in range(len(li1)-1):\n        if li1[i]!= li2[i]:\n            diff += 1\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1) == 0 or len(li2) == 0:\n        return 0\n    \n    if li1[0] == li2[0]:\n        return li1[0]\n    \n    if li1[0] < li2[0]:\n        return (len(li1) - len(li2))\n    \n    return (len(li2) - len(li1))\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(len(li1)):\n        l1.append(li1[i])\n    for i in range(len(li2)):\n        l2.append(li2[i])\n    return l1-l2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff1=[]\n    diff2=[]\n    for i in li1:\n        diff1.append(i-li2[i])\n    for i in li2:\n        diff2.append(i-li1[i])\n    return diff1,diff2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    s1=set(li1)\n    s2=set(li2)\n    #s3=set()\n    s3=s1-s2\n    return s3\n    #print(s1)\n    #print(s2)\n    #print(s3)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    output = []\n    for i in li1:\n        if i not in li2:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li1)):\n        new_list.append(li1[i]-li2[i])\n    return new_list\n    \ndef DifList(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li1)):\n        new_list.append(li1[i]-li2[i])\n    return new_list\n    \ndef IsOne(li):\n    '''\n    Write a python function to check if the list is one.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        new_list.append(li[i]*2)\n    # return the list of differences\n    return new_list\n    \ndef IsMany(li,num):\n    '''\n    Write a python function to check if the list is many.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        new_list.append(li[i]*num)\n    # return the list of differences\n    return new_list\n    \ndef IsLen(li,num):\n    '''\n    Write a python function to check if the list is lenght.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        new_list.append(li[i]*num)\n    # return the list of differences\n    return new_list\n    \ndef IndToChar(i):\n    '''\n    Write a python function to return the characters in the given index.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        new_list.append(li[i][i])\n    # return the list of differences\n    return new_list\n    \ndef Len(li):\n    '''\n    Write a python function to get the length of the list.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        new_list.append(len(li[i]))\n    # return the list of differences\n    return new_list\n    \ndef Subst(li,s,e):\n    '''\n    Write a python function to get the substring of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        if li[i] in s:\n            new_list.append(li[i])\n        else:\n            new_list.append(li[i][s.index(li[i])+e-1])\n    # return the list of differences\n    return new_list\n    \ndef Trim(li,s,e):\n    '''\n    Write a python function to get the trimmed string of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        if li[i] in s:\n            new_list.append(li[i][:s.index(li[i])])\n        else:\n            new_list.append(li[i][:s.index(li[i])+e-1])\n    # return the list of differences\n    return new_list\n    \ndef Trim1(li,s,e):\n    '''\n    Write a python function to get the trimmed string of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        if li[i] in s:\n            new_list.append(li[i][s.index(li[i])+e-1])\n        else:\n            new_list.append(li[i])\n    # return the list of differences\n    return new_list\n    \ndef Trim2(li,s,e):\n    '''\n    Write a python function to get the trimmed string of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        if li[i] in s:\n            new_list.append(li[i][:s.index(li[i])+e-1])\n        else:\n            new_list.append(li[i])\n    # return the list of differences\n    return new_list\n    \ndef Trim3(li,s,e):\n    '''\n    Write a python function to get the trimmed string of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        if li[i] in s:\n            new_list.append(li[i][:s.index(li[i])+e-1])\n        else:\n            new_list.append(li[i])\n    # return the list of differences\n    return new_list\n    \ndef Trim4(li,s,e):\n    '''\n    Write a python function to get the trimmed string of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        if li[i] in s:\n            new_list.append(li[i][s.index(li[i])+e-1])\n        else:\n            new_list.append(li[i])\n    # return the list of differences\n    return new_list\n    \ndef Trim5(li,s,e):\n    '''\n    Write a python function to get the trimmed string of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        if li[i] in s:\n            new_list.append(li[i][s.index(li[i])+e-1])\n        else:\n            new_list.append(li[i])\n    # return the list of differences\n    return new_list\n    \ndef Trim6(li,s,e):\n    '''\n    Write a python function to get the trimmed string of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        if li[i] in s:\n            new_list.append(li[i][s.index(li[i])+e-1])\n        else:\n            new_list.append(li[i])\n    # return the list of differences\n    return new_list\n    \ndef Trim7(li,s,e):\n    '''\n    Write a python function to get the trimmed string of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range(0,len(li)):\n        if li[i] in s:\n            new_list.append(li[i][s.index(li[i])+e-1])\n        else:\n            new_list.append(li[i])\n    # return the list of differences\n    return new_list\n    \ndef Trim8(li,s,e):\n    '''\n    Write a python function to get the trimmed string of the given substring.\n    '''\n    # Create new list, which is the difference between li1 and li2\n    new_list = []\n    for i in range("
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    res=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            res.append(li1[i])\n    return res\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dif = []\n    for i in range(0,len(li1)):\n        dif.append(li1[i] - li2[i])\n    return(dif)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # if n = 0\n    if n == 0:\n        return 0\n    # if n = 1\n    elif n == 1:\n        return 1\n    # if n > 1\n    elif n > 1:\n        # return the sum\n        return n * odd_num_sum(n-1)\n    \nprint(odd_num_sum(10))\nprint(odd_num_sum(15)"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0 \n    for i in range(1,n+1) : \n        sum += i ** 4 \n    return sum \nprint(odd_num_sum(5)) \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n > 0 :\n        return odd_num_sum(n - 1) + n * 2\n    else :\n        return 0\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n,0,-2):\n        sum=sum+i**3\n    print(sum)\n    \nodd_num_sum(1)\nodd_num_sum(5)\nodd_num_sum(12)\nodd_num_sum(26)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        print('Invalid input')\n    else : \n        s = 0\n        for i in range(1,n+1):\n            s = s + (i**4)\n        return s\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        total += 4**i\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        raise ValueError(\"n must be a positive integer\")\n    if n == 1 : \n        return n \n    elif n % 2 == 0 : \n        return n * n * 4\n    else : \n        return n * odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = n // 4\n    return odd_num**3\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        sum += i ** 2\n    return sum\n    \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    odd_num_sum = 0\n    for i in range(0, n):\n        odd_num_sum = odd_num_sum + i ** 4\n    return odd_num_sum"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if char == stack.pop():\n                continue\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    stack.append(exp[0])\n    for idx in exp[1:]:\n        if idx == '(' or idx == ')' or idx == '{' or idx == '}':\n            stack.append(idx)\n        elif idx == ')':\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            if not stack:\n                return False\n            else:\n                stack.pop()\n        elif idx == '}':\n            while stack and stack[-1]!= '{':\n                stack.pop()\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    operators = {\n        '(': 1,\n        ')': -1,\n        '[': 0,\n        ']': -1\n    }\n    for char in exp:\n        if char in operators:\n            if len(stack) < 1 or stack[-1] == '(' or stack[-1] == ')':\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.pop()\n        else:\n            stack.append(char)\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp.count('(')!= exp.count(')'):\n        return False\n    else:\n        if exp.count(')') == 0:\n            return True\n        else:\n            return False\ndef solution(expression):\n    '''\n    Write a function to calculate the postfix expression with dfs (recursive).\n    '''\n    stack = []\n    pre = []\n    post = []\n    for i in expression:\n        if i.isalpha():\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                while stack and stack[-1]!= '(':\n                    pre.append(stack.pop())\n                stack.pop()\n        elif i == '+' or i == '-':\n            while stack and stack[-1]!= '(':\n                post.append(stack.pop())\n            stack.pop()\n            while stack and stack[-1] == '(':\n                stack.pop()\n            post.append(i)\n    while stack:\n        post.append(stack.pop())\n    return pre, post\ndef reverse_expression(expression):\n    '''\n    Write a function to reverse the given expression in postfix.\n    '''\n    s = []\n    while expression:\n        t = expression[0]\n        expression = expression[1:]\n        if t == '(':\n            s.append(t)\n        elif t == ')':\n            while s and s[-1]!= '(':\n                a = s.pop()\n                if len(s):\n                    s.append(a)\n            s.pop()\n        else:\n            s.append(t)\n    return ''.join(s)\ndef check_expression_stack(expression):\n    '''\n    Write a function to check the stack of exprs.\n    '''\n    s = deque()\n    s.append(expression)\n    while s:\n        tmp = s.pop()\n        if check_expression(tmp):\n            s.append(tmp)\n    return s\ndef check_expression_back(expression):\n    '''\n    Write a function to check the stack of exprs.\n    '''\n    s = deque()\n    s.append(expression)\n    while s:\n        tmp = s.pop()\n        if check_expression(tmp):\n            s.append(tmp)\n    return s\ndef calculate_postfix(expression):\n    '''\n    Write a function to calculate the postfix expression.\n    '''\n    s = deque()\n    s.append(expression)\n    while s:\n        tmp = s.pop()\n        if check_expression(tmp):\n            s.append(calculate_postfix(tmp))\n    return s\ndef get_expressions_stack(expression):\n    '''\n    Write a function to get the stack of expression.\n    '''\n    s = deque()\n    s.append(expression)\n    while s:\n        tmp = s.pop()\n        if check_expression(tmp):\n            s.append(tmp)\n    return s\ndef get_expressions_back(expression):\n    '''\n    Write a function to get the stack of expression.\n    '''\n    s = deque()\n    s.append(expression)\n    while s:\n        tmp = s.pop()\n        if check_expression(tmp):\n            s.append(tmp)\n    return s\ndef postfix_to_postfix(expression):\n    '''\n    Write a function to convert a given postfix expression to postfix.\n    '''\n    s = deque()\n    s.append(expression)\n    while s:\n        tmp = s.pop()\n        if check_expression(tmp):\n            if tmp.isalpha():\n                s.append(tmp)\n            else:\n                s.append(reverse_expression(tmp))\n    return s\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef bracket_expression(exp):\n    '''\n    Write a function that checks if a given expression is bracket expression or not.\n    https://www.geeksforgeeks.org/check-for-bracket-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='{':\n        return True\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='(':\n        return False\n    else:\n        return False\ndef parentheses_expression(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef parenthesizable_expression(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef string_expression(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='[':\n        return True\n    elif exp[0]=='(':\n        return False\n    elif exp[0]==']':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef string_multiline_expression(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef num_expressions(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef empty_expression(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef bracket_multiline_expression(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef string_multiline_expression(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef string_multiline_expression(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\ndef string_expression(exp):\n    '''\n    Write a function that checks if a given expression is parentheses expression or not.\n    https://www.geeksforgeeks.org/check-for-parentheses-expressions-in-an-expression/\n    '''\n    #Stratify\n    if exp[0]=='(':\n        return True\n    elif exp[0]==')':\n        return False\n    elif exp[0]=='[':\n        return False\n    elif exp[0]=='{':\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    op_stack = []\n    symbols = ['(', ')']\n    \n    for i in exp:\n        if i in symbols:\n            symbols.remove(i)\n            op_stack.append(i)\n        else:\n            while op_stack:\n                pop_item = op_stack.pop()\n                if pop_item == '(':\n                    break\n            if len(op_stack) == 0:\n                return False\n            elif i == pop_item:\n                continue\n            else:\n                return False\n    return True\n        \ndef get_empty_squares(expression):\n    '''\n    Given an expression, return all empty squares in the expression.\n    '''\n    # Brute Force - Time O(n^2)\n    squares = []\n    for i in range(len(expression)):\n        for j in range(len(expression)):\n            if expression[i][j] =='':\n                squares.append([i,j])\n    return squares\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    s = 0\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #Remove all the parentheses, not checking for parentheses that are not balanced.\n    exp = exp.replace('(','( ')\n    exp = exp.replace(')',') ')\n    #Check if the expression is empty.\n    if len(exp.split()) == 0:\n        return False\n    #Check if the expression is syntactically correct.\n    #Syntactically correct is a bracketed expression.\n    elif exp.split()[0] == '(' and exp.split()[-1] == ')':\n        return True\n    #Syntactically correct is a string.\n    elif len(exp.split()) > 1:\n        if not (exp.split()[0] == '(' and exp.split()[-1] == ')'):\n            return False\n        else:\n            for i in exp.split()[1:-1]:\n                if not (i == '(' or i == ')'):\n                    return False\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == '':\n        return ''\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    i = 0\n    while i < len(test_str):\n        if len(test_str[i:i+K]) < K:\n            test_str = test_str[:i] + test_str[i+K:]\n            i = i + K\n        else:\n            i = i + 1\n    print(test_str)\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    temp_str = ''\n    for char in test_str:\n        if len(char) == K:\n            temp_str += char\n    return temp_str\n    \n    \n    "
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    # Your code here\n    s = set(test_str)\n    if len(s) <= K:\n        return test_str\n    elif K % len(s) == 0:\n        print(\"No\")\n        return test_str\n    else:\n        print(\"Yes\")\n        return test_str[:K//len(s)] + remove_length(test_str[K//len(s):], K % len(s))\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = test_str.split(' ')\n    for word in word_list:\n        if len(word) == K:\n            word_list.remove(word)\n    return''.join(word_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) <= K:\n        return test_str\n    else:\n        return remove_length(test_str, K//2) + remove_length(test_str, K//2)\n    \ndef count_words(test_str, K):\n    '''\n    Write a function to count all the words in the given string.\n    '''\n    count = 0\n    for i in range(0, len(test_str)):\n        if test_str[i] in string.ascii_lowercase:\n            count += 1\n    return count\n    \nprint(remove_length(\"abcde\", 7))\nprint(count_words(\"abcde\", 7))\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    import re\n    pattern = r'\\b(\\w+)\\s+\\d+\\s+(\\d+)+\\b'\n    list = re.findall(pattern, test_str)\n    list.sort()\n    print(list)\n    \n    sub_pattern = r'\\b(\\w+)\\s+\\d+\\s+(\\d+)+\\b'\n    for i in range(K):\n        print(i)\n        print(sub_pattern)\n        sub_pattern = sub_pattern.replace(str(i), str(i))\n        sub_pattern = sub_pattern.replace('\\w+', '')\n        print(sub_pattern)\n    return test_str.replace(sub_pattern, '')\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    letters = []\n    for word in test_str.split():\n        if len(word) < K:\n            letters.append(word)\n    return''.join(letters)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = []\n    word = test_str\n    for i in range(len(test_str)):\n        if len(word) == K:\n            result.append(word)\n            word = word[:-1]\n        elif len(word) > K:\n            word = word[:-K]\n            result.append(word)\n        elif len(word) < K:\n            result.append(word)\n    return ''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == K:\n        return test_str\n    elif len(test_str) < K:\n        return None\n    else:\n        words = test_str.split()\n        removed = \"\"\n        for i in range(len(words)):\n            for j in range(i + 1, len(words)):\n                if len(words[i]) == K:\n                    words.pop(i)\n                    words.pop(j)\n                    break\n        for word in words:\n            removed += word + \" \"\n        return removed.strip()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.finditer(pattern,text)\n    for m1 in m:\n        m1 = m1.group()\n        n = text.index(m1)\n        #print(n)\n        #print(m1)\n        if n>0:\n            return n, m1\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    end=len(pattern)-1\n    length=len(pattern)\n    \n    while index<length:\n        if text[index:index+length]==pattern:\n            #print(\"Text: \" +text + \" Pattern: \" + pattern + \" Position: \" +str(index)+ \" Position End: \" +str(index+length))\n            return text[index:index+length]\n        index=index+1\n    \n    return None\n    \ndef is_valid_email(email):\n    '''\n    Check whether email is valid or not. Return boolean.\n    '''\n    pattern='([a-zA-Z0-9._%-]+[a-zA-Z0-9_.-]{2,20})'\n    if(re.match(pattern,email)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    find = re.findall(pattern, text)\n    if find:\n        index_list = []\n        index = 0\n        while index < len(find):\n            index_list.append(index)\n            index += 1\n        return index_list, find\n    else:\n        return None, None\ndef print_line(text):\n    '''\n    Write a function to print a line.\n    '''\n    print(text)\ndef filter_file(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        index_list, find = occurance_substring(text, '\\n')\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        text = text.replace('\\n','')\n        print_line(text)\ndef filter_file_2(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_3(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_4(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_5(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_6(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_7(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_8(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_9(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_10(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_11(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_12(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_13(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_14(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(text)\ndef filter_file_15(filename):\n    '''\n    Write a function to filter a file.\n    '''\n    with open(filename, 'r') as f:\n        text = f.read()\n        pattern = '\\n'\n        index_list, find = occurance_substring(text, pattern)\n        for i in range(len(index_list)):\n            if i < len(index_list) - 1:\n                text = text.replace(find[i],'')\n        print_line(tex"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match is None:\n        return None\n    return match.start()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = r'(?:'+pattern+r')\\b'\n    regex = re.compile(regex,re.IGNORECASE)\n    m = regex.search(text)\n    if m!= None:\n        return m.start(), m.end()\n    else:\n        return None,None\ndef find_substring_occurrence(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = r'(?:'+pattern+r')\\b'\n    regex = re.compile(regex,re.IGNORECASE)\n    m = regex.search(text)\n    if m!= None:\n        return m.start(), m.end()\n    else:\n        return None,None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\":\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"?\",\"\")\n    pattern = pattern.replace(\"!\",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\"$\",\"\")\n    pattern = pattern.replace(\"*\",\"\")\n    pattern = pattern.replace(\"&\",\"\")\n    pattern = pattern.replace(\"+\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\" \", \"\")\n    pattern = pattern.replace(\"{\",\"\")\n    pattern = pattern.replace(\"}\",\"\")\n    pattern = pattern.replace(\"|\",\"\")\n    pattern = pattern.replace(\"/\",\"\")\n    pattern = pattern.replace(\"\\\"\",\"\")\n    pattern = pattern.replace(\"&\",\"\")\n    pattern = pattern.replace(\"*\",\"\")\n    pattern = pattern.replace(\">\",\"\")\n    pattern = pattern.replace(\"<\",\"\")\n    pattern = pattern.replace(\"[\",\"\")\n    pattern = pattern.replace(\"]\",\"\")\n    pattern = pattern.replace(\"?\",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"0\",\"\")\n    pattern = pattern.replace(\"1\",\"\")\n    pattern = pattern.replace(\"2\",\"\")\n    pattern = pattern.replace(\"3\",\"\")\n    pattern = pattern.replace(\"4\",\"\")\n    pattern = pattern.replace(\"5\",\"\")\n    pattern = pattern.replace(\"6\",\"\")\n    pattern = pattern.replace(\"7\",\"\")\n    pattern = pattern.replace(\"8\",\"\")\n    pattern = pattern.replace(\"9\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\":\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"?\",\"\")\n    pattern = pattern.replace(\"!\",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\"$\",\"\")\n    pattern = pattern.replace(\"*\",\"\")\n    pattern = pattern.replace(\"&\",\"\")\n    pattern = pattern.replace(\"+\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\"{\",\"\")\n    pattern = pattern.replace(\"}\",\"\")\n    pattern = pattern.replace(\"|\",\"\")\n    pattern = pattern.replace(\"/\",\"\")\n    pattern = pattern.replace(\"\\\"\",\"\")\n    pattern = pattern.replace(\"&\",\"\")\n    pattern = pattern.replace(\"*\",\"\")\n    pattern = pattern.replace(\">\",\"\")\n    pattern = pattern.replace(\"<\",\"\")\n    pattern = pattern.replace(\"[\",\"\")\n    pattern = pattern.replace(\"]\",\"\")\n    pattern = pattern.replace(\"?\",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"0\",\"\")\n    pattern = pattern.replace(\"1\",\"\")\n    pattern = pattern.replace(\"2\",\"\")\n    pattern = pattern.replace(\"3\",\"\")\n    pattern = pattern.replace(\"4\",\"\")\n    pattern = pattern.replace(\"5\",\"\")\n    pattern = pattern.replace(\"6\",\"\")\n    pattern = pattern.replace(\"7\",\"\")\n    pattern = pattern.replace(\"8\",\"\")\n    pattern = pattern.replace(\"9\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\":\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"?\",\"\")\n    pattern = pattern.replace(\"!\",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\"$\",\"\")\n    pattern = pattern.replace(\"*\",\"\")\n    pattern = pattern.replace(\"&\",\"\")\n    pattern = pattern.replace(\"+\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\"{\",\"\")\n    pattern = pattern.replace(\"}\",\"\")\n    pattern = pattern.replace(\"|\",\"\")\n    pattern = pattern.replace(\"/\",\"\")\n    pattern = pattern.replace(\"\\\"\",\"\")\n    pattern = pattern.replace(\"&\",\"\")\n    pattern = pattern.replace(\"*\",\"\")\n    pattern = pattern.replace(\">\",\"\")\n    pattern = pattern.replace(\"<\",\"\")\n    pattern = pattern.replace(\"[\",\"\")\n    pattern = pattern.replace(\"]\",\"\")\n    pattern = pattern.replace(\"?\",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"0\",\"\")\n    pattern = pattern.replace(\"1\",\"\")\n    pattern = pattern.replace(\"2\",\"\")\n    pattern = pattern.replace(\"3\",\"\")\n    pattern = pattern.replace(\"4\",\"\")\n    pattern = pattern.replace(\"5\",\"\")\n    pattern = pattern.replace(\"6\",\"\")\n    pattern = pattern.replace(\"7\",\"\")\n    pattern = pattern.replace(\"8\",\"\")\n    pattern = pattern.replace(\"9\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\":\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"?\",\"\")\n    pattern = pattern.replace(\"!\",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\"$\",\"\")\n    pattern = pattern.replace(\"*\",\"\")\n    pattern = pattern.replace(\"&\",\"\")\n    pattern = pattern.replace(\"+\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"0\",\"\")\n    pattern = pattern.replace(\"1\",\"\")\n    pattern = pattern.replace(\"2\",\"\")\n    pattern = pattern.replace(\"3\",\"\")\n    pattern = pattern.replace(\"4\",\"\")\n    pattern = pattern.replace(\"5\",\"\")\n    pattern = pattern.replace(\"6\",\"\")\n    pattern = pattern.replace(\"7\",\"\")\n    pattern = pattern.replace(\"8\",\"\")\n    pattern = pattern.replace(\"9\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"0\",\"\")\n    pattern = pattern.replace(\"1\",\"\")\n    pattern = pattern.replace(\"2\",\"\")\n    pattern = pattern.replace(\"3\",\"\")\n    pattern = pattern.replace(\"4\",\"\")\n    pattern = pattern.replace(\"5\",\"\")\n    pattern = pattern.replace(\"6\",\"\")\n    pattern = pattern.replace(\"7\",\"\")\n    pattern = pattern.replace(\"8\",\"\")\n    pattern = pattern.replace(\"9\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"0\",\"\")\n    pattern = pattern.replace(\"1\",\"\")\n    pattern = pattern.replace(\"2\",\"\")\n    pattern = pattern.replace(\"3\",\"\")\n    pattern = pattern.replace(\"4\",\"\")\n    pattern = pattern.replace(\"5\",\"\")\n    pattern = pattern.replace(\"6\",\"\")\n    pattern = pattern.replace(\"7\",\"\")\n    pattern = pattern.replace(\"8\",\"\")\n    pattern = pattern.replace(\"9\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\";\",\"\")\n    pattern = pattern.replace(\"0\",\"\")\n    pattern = pattern.replace(\"1\",\"\")\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern,re.IGNORECASE)\n    patterns = regex.findall(text)\n    for i in range(len(patterns)):\n        if patterns[i] == pattern:\n            return patterns[i]\n        \ndef get_valid_text(text):\n    \"\"\"\n    Remove all punctuations and make it upper case\n    Remove all non-alphabetic characters\n    Remove all non-alphabetical characters\n    Clean the text by removing all numbers and special characters.\n    Make all the words lowercase.\n    Make all the words in the sentence lowercase.\n    \"\"\"\n    regex = re.compile(\"[^a-zA-Z0-9\\s]\")\n    text = regex.sub(\" \",text.lower())\n    text = text.split(\" \")\n    for i in range(len(text)):\n        text[i] = text[i].strip()\n    return \" \".join(text)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    def get_substring(text,pos):\n        '''\n        Return the substrings within a string.\n        '''\n        if pos<len(text) and text[pos]==pattern[0]:\n            return text[pos:pos+len(pattern[1])]\n        return None\n    \n    substring_dict = dict()\n    for i in range(len(pattern)):\n        if pattern[i] in text:\n            substring_dict[pattern[i]]=get_substring(text,i)\n    #print(substring_dict)\n    if len(substring_dict)>0:\n        substring_list = list(substring_dict.keys())\n        #print(substring_list)\n        return substring_list[0]\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_len = len(pattern)\n    if(pattern_len == 0):\n        return None\n    pattern = pattern.lower()\n    text = text.lower()\n    regex = \"(?:\" + pattern + \")(?P<position>[0-9]+)\"\n    m = re.finditer(regex, text)\n    for match in m:\n        if match.group(\"position\")!= '':\n            return match.group(\"position\")\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(text)\n    print(pattern)\n    \n    pattern = pattern.lower()\n    substrings = re.findall(pattern,text)\n    substrings_count = len(substrings)\n    for i in range(0,substrings_count):\n        print(substrings[i])\n        print(text[substrings[i][0]:substrings[i][1]])\n        if(substrings[i][0] <= text[substrings[i][1]] <= substrings[i][1]):\n            return (substrings[i][0],substrings[i][1])\n    return None\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    a=[]\n    for i in range(0,len(nums)):\n        a.append(nums[i])\n    for i in range(0,len(nums)):\n        if i%2==0:\n            if a.count(nums[i])!=1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            odd.append(nums[i])\n    return len(odd)==0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            print(nums[i], end = \" \")\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_num = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            odd_num.append(nums[i])\n    if len(odd_num) % 2 == 1:\n        return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Write your code here\n    return len(nums) % 2!= 0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list = []\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 1:\n            odd_list.append(nums[i])\n    return odd_list\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # base case\n    if not nums:\n        return True\n    \n    # recursive case\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return False\n    \n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    new_list = []\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            new_list.append(nums[i])\n    return new_list\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for vowel in test_str:\n        if vowel in \"AEIOUaeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ('a','e','i','o','u')\n    cnt = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for letter in test_str:\n        if letter.lower() in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i in 'aeiouAEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_count = 0\n    for char in test_str:\n        if char in vowels:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for ch in test_str:\n        if ch in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    vowels_count = 0\n    for letter in test_str:\n        if letter in vowels:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    test_str = test_str.lower()\n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    # construct the string from the string \n    for i in test_str:\n        # print the i\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            # if the i is a vowel \n            if 'A' or 'E' or 'I' or 'O' or 'U' in i:\n                # count the count of its neighbors \n                count += 1\n    # return the count \n    return count \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # for i in range(len(arr)):\n    #     for j in range(i,len(arr)):\n    #         if arr[i] == arr[j]:\n    #             arr[i],arr[j] = arr[j],arr[i]\n    # return sum(arr)\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i]:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a dictionary to track the occurences of each element\n    occ = {}\n    # looping through the array\n    for i in range(len(arr)):\n        # checking whether the element has appeared in the dictionary or not\n        if arr[i] in occ.keys():\n            # increment occurence of the element by 1\n            occ[arr[i]] += 1\n        else:\n            # if not then it is a new element\n            occ[arr[i]] = 1\n    return sum(occ.values())\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #!!! MINIMUM EITHER DOING A LOOP OR A FUNCTION\n    # NOTE: DO NOT USE A FUNCTION TO WORK WITH A LARGE ENTRY OF LIST\n    # for i in arr:\n    #     if i not in arr:\n    #         return i\n    #         # return i + find_sum(arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #create a list of numbers\n    numbers = []\n    for i in range(len(arr)):\n        numbers.append(arr[i])\n    #find the sum of numbers\n    s = 0\n    for i in numbers:\n        if i not in numbers:\n            s += i\n    #return the sum of numbers\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if i not in arr:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Take input list as input\n    # Using for loop to iterate through list\n    sum = 0\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #create an empty list\n    result = []\n    #Loop through the list\n    for i in range(len(arr)):\n        #check if there is an element in the list\n        if arr[i] not in result:\n            #add element to result\n            result.append(arr[i])\n    #return result\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # # O(n) time | O(1) space\n    # sum = 0\n    # for i in range(len(arr)):\n    #     if arr[i] not in sum:\n    #         sum += arr[i]\n    # return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #TODO Implement the function.\n    consecutive = []\n    start_index = -1\n    for i,v in enumerate(list1):\n        if v not in consecutive:\n            consecutive.append(v)\n            if start_index == -1:\n                start_index = i\n    \n    #TODO Write a function to get the index of the first element of the list.\n    \n    #TODO Write a function to get the index of the last element of the list.\n    \n    return consecutive"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    g = groupby(list1)\n    output = [[] for _ in range(len(list1))]\n    for k,g in g:\n        l = [i for i in g]\n        for x in l:\n            output[x].append(x)\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # creating a empty list to store the elements after each duplicate\n    # (recursive function)\n    final_list = []\n    # to check if the element is already present in the list\n    def is_in_list(e):\n        if e in final_list:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #return list(zip(*groupby(list1)))\n    return [list(group) for key, group in groupby(list(list1))]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1)\n    result = []\n    for k, g in grouped:\n        for element in g:\n            if element not in result:\n                result.append(element)\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist1 = []\n    for i in list1:\n        for j in range(len(i)):\n            if i[j]!= i[j - 1] and j!= 0 and j!= len(i) - 1:\n                sublist1.append([i[j - 1], i[j]])\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(map(list, groupby(sorted(list1), lambda x: x)))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if list1[i] not in result:\n            result.append(list1[i])\n        elif list1[i] in result:\n            j = result.index(list1[i]) + 1\n            result.insert(j, list1[i])\n            result.insert(j, list1[i])\n            result.remove(list1[i])\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    '''\n    List1: [1,1,1,3,3,3,5,4,4,4,5,5]\n    Output: [[1],[1,1],[1,3,3],[1,4,4,4],[1,5,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1],[1,1,1],[1,3,3],[1,4,4,4],[1,5,5]]\n    Expected Output: [[1,1,1,3,3,3],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1],[1,1],[1,3,3],[1,4,4,4],[1,5,5]]\n    Expected Output: [[1,1,1],[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1],[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '''\n    Problems:\n    list1 = [1,1,1,3,3,3,5,4,4,4,5,5]\n    Expected Output: [[1,1,1,3,3,3,5],[1,1,1,4,4,4],[1,1,1,4,5,5]]\n    Expected Output: [[1,1,1,3],[1,1,1,4],[1,1,1,4,5],[1,1,1,5]]\n    '''\n    '"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    uniq_list = []\n    temp_list = []\n    count = 0\n    for i in list1:\n        if i not in uniq_list:\n            uniq_list.append(i)\n        else:\n            count = count + 1\n            for j in range(count):\n                temp_list.append(i)\n    return temp_list\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in range(0, len(list1)):\n        dict[list1[i]] = dict.get(list1[i], 0) + 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    cnt = {}\n    for i in range(len(list1)):\n        lst = list(list1[i])\n        lst = tuple(lst)\n        cnt[lst] = cnt.get(lst, 0) + 1\n    return cnt\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for i in list1:\n        if i in unique_dict.keys():\n            unique_dict[i] += 1\n        else:\n            unique_dict[i] = 1\n    return unique_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # TODO\n    counts = dict()\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in counts:\n                counts[list1[i][j]] += 1\n            else:\n                counts[list1[i][j]] = 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in range(0,len(list1)):\n        if list1[i] not in d.keys():\n            d[list1[i]] = 1\n        else:\n            d[list1[i]] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # ---------------------------------\n    # START CODE CHALLENGE\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for list in list1:\n        if list in result:\n            result[list] += 1\n        else:\n            result[list] = 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your code here\n    \n    d = {}\n    for i in range(len(list1)):\n        d[tuple(list1[i])] = list1.count(tuple(list1[i]))\n    return d\n    \n    \n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    dictionary = {}\n    for item in list1:\n        if item in dictionary:\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    subdict = {}\n    for i in list1:\n        count = len(i)\n        if count not in subdict:\n            subdict[count] = [i]\n        else:\n            subdict[count].append(i)\n    \n    return subdict\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 3)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_of_sums = []\n    for x in combinations(test_list,2):\n        combinations_of_sums.append(x)\n    return combinations_of_sums\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in test_list:\n        for j in combinations(i,3):\n            result.append(j)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    for i in test_list:\n        if len(i) == 1:\n            comb_list.append(i)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        for k in combinations(test_list,i):\n            ans.append(k)\n    return ans\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    if len(test_list)==0:\n        return []\n    \n    total = test_list[0]\n    test_list = test_list[1:]\n    \n    if total in test_list:\n        return test_list\n    \n    test_list.append(total)\n    \n    print(test_list)\n    \n    return find_combinations(test_list)\n    \nprint(find_combinations([3,4,5]))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for p in test_list:\n        for x in combinations(p, 2):\n            yield x\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    if test_list[0] + test_list[1] > test_list[1] and test_list[0] + test_list[2] > test_list[2]:\n        return print(\"we have no possible combinations\")\n    elif test_list[0] + test_list[1] == test_list[2] and test_list[0] + test_list[2] == test_list[1]:\n        return print(\"we have no possible combinations\")\n    elif test_list[0] + test_list[2] == test_list[1] and test_list[0] + test_list[1] == test_list[2]:\n        return print(\"we have no possible combinations\")\n    else:\n        for i in range(test_list[0], test_list[1] + 1):\n            if i < test_list[0] + test_list[1]:\n                test_list[1] = i\n                find_combinations(test_list)\n        for i in range(test_list[0] + 1, test_list[1] + 1):\n            if i < test_list[0] + test_list[1]:\n                test_list[0] = i\n                find_combinations(test_list)\n        return print(test_list)\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = []\n    test_list_set = set(test_list)\n    for comb in combinations(test_list_set,2):\n        results.append(tuple(comb))\n    return results\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in test_list:\n        res += combinations(i,len(i))\n    return res\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # 1)\n    if (n % 2 == 0) : # 2)\n        # 3)\n        if (n >= 2) : \n            # 4)\n            for i in range(3, int(math.sqrt(n)) + 1, 2) : \n                if (n % i == 0) : \n                    # 5)\n                    return 'error'\n            return n\n        return 'n\u00famero primo'\n    else :\n        # 6)\n        return 'n\u00famero inv\u00e1lido'\n        \nprint(count_divisors(6))\nprint(count_divisors(12))\nprint(count_divisors(13))\nprint(count_divisors(23))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) :\n        if (n % i == 0) :\n            count += 1\n    if count == 2 :\n        return \"It's an even number!\"\n    else :\n        return \"It's an odd number!\"\nprint(count_divisors(30))"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    x = 1\n    while(n % 2 == 0):\n        x = x + 1\n        n = n / 2\n    if x == 1 :\n        return \"It's not even\"\n    else :\n        return \"It's even\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, math.ceil(n/2)):\n        if n % i == 0:\n            divisors += 1\n            if divisors == 2:\n                return n, \"even\"\n            else:\n                divisors = 0\n    return n, \"not even\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n+1): \n        if (n%i==0): \n            count=count+1\n    if count==2: \n        return True \n    else : \n        return False\ndef count_divisors_2(n) :\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    i=2\n    while i<n:\n        if (n%i==0):\n            count=count+1\n        i=i+2\n    if count==2:\n        return True\n    else :\n        return False\ndef prime(n) :\n    '''\n    This function checks whether a number is prime or not. \n    '''\n    if (n == 0):\n        return False\n    if (n==1) :\n        return True\n    if (count_divisors(n)):\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if (n%i==0):\n                return False\n        return True\ndef count_divisors_3(n):\n    '''\n    This function checks whether the count of divisors is even.\n    '''\n    if (n == 0):\n        return False\n    if (n == 1) :\n        return True\n    if (count_divisors(n)):\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if (n%i==0):\n                return False\n        return True\ndef check_prime(n):\n    '''\n    This function checks whether a number is prime or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if (count_divisors(n)):\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if (n%i==0):\n                return False\n        return True\ndef get_numbers_divisible_by_seven(n):\n    '''\n    This function checks whether a number is divisible by 7.\n    '''\n    if n == 0:\n        return False\n    if (count_divisors(n)):\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if (n%i==0):\n                return False\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 2) : \n        return True \n    if (n % 2 == 0) : \n        return False\n    else : \n        for i in range(3, int(math.sqrt(n)+1)) : \n            if (n % i == 0) : \n                return False\n        return True \n    \n    \ndef count_sq_divisors(n) : \n    '''\n    Write a python function to check whether the count of sq divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 2) : \n        return True \n    if (n % 2 == 0) : \n        return False\n    else : \n        for i in range(3, int(math.sqrt(n)+1)) : \n            if (n % i == 0) : \n                return False\n        return True \n    \n    \ndef fibonacci(n) : \n    '''\n    Function to calculate the fibonacci series \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0 : \n        return n \n    if (n <= 2) : \n        return n \n    elif (n == 2) : \n        return 1 \n    elif (n > 2) : \n        return (fibonacci(n-1) + fibonacci(n-2)) \n        \n    \ndef test_count_divisors() : \n    '''\n    Function to test if the number of divisors is even or odd.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    test_divisors = True \n    for n in range(2, 50) : \n        if count_divisors(n) : \n            test_divisors = False \n            break \n    if test_divisors : \n        print('The number of divisors is even.')\n    else : \n        print('The number of divisors is odd.') \n        \ndef test_count_sq_divisors() : \n    '''\n    Function to test if the number of sq divisors is even or odd.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    test_sq_divisors = True \n    for n in range(2, 50) : \n        if count_sq_divisors(n) : \n            test_sq_divisors = False \n            break \n    if test_sq_divisors : \n        print('The number of sq divisors is even.')\n    else : \n        print('The number of sq divisors is odd.') \n        \n    \n    \ndef fibonacci_fibonacci(n) : \n    '''\n    Function to calculate the Fibonacci series \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0 : \n        return n \n    if (n <= 2) : \n        return n \n    elif (n == 2) : \n        return 1 \n    elif (n > 2) : \n        return (fibonacci_fibonacci(n-1) + fibonacci_fibonacci(n-2))\n        \n    \ndef fibonacci_seq(n) : \n    '''\n    Function to calculate the Fibonacci sequence \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0 : \n        return n \n    if (n <= 2) : \n        return n \n    elif (n == 2) : \n        return 1 \n    elif (n > 2) : \n        return (fibonacci_seq(n-1) + fibonacci_seq(n-2))\n        \n    \ndef fibonacci_series(n) : \n    '''\n    Function to calculate the fibonacci sequence \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0 : \n        return n \n    if (n <= 2) : \n        return n \n    elif (n == 2) : \n        return 1 \n    elif (n > 2) : \n        return (fibonacci_series(n-1) + fibonacci_series(n-2))\n        \n    \ndef fibonacci_subset(n) : \n    '''\n    Function to calculate the Fibonacci subset \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0 : \n        return n \n    if (n <= 2) : \n        return n \n    elif (n == 2) : \n        return 1 \n    elif (n > 2) : \n        return (fibonacci_subset(n-1) + fibonacci_subset(n-2))\n        \n    \ndef fibonacci_partition(n) : \n    '''\n    Function to calculate the Fibonacci partition \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0 : \n        return n \n    if (n <= 2) : \n        return n \n    elif (n == 2) : \n        return 1 \n    elif (n > 2) : \n        return (fibonacci_partition(n-1) + fibonacci_partition(n-2))\n        \n    \ndef fibonacci_partition_out_of_range(n) : \n    '''\n    Function to calculate the Fibonacci partition \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0 : \n        return n \n    if (n > 2) : \n        return (fibonacci_partition_out_of_range(n-1) + fibonacci_partition_out_of_range(n-2))\n        \n        \ndef fibonacci_partition_out_of_range_no_rec(n) : \n    '''\n    Function to calculate the Fibonacci partition \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0 : \n        return n \n    if (n > 2) : \n        return (fibonacci_partition_out_of_range_no_rec(n-1) + fibonacci_partition_out_of_range_no_rec(n-2))\n        \n        \ndef count_fibonacci_divisors(n) : \n    '''\n    Function to calculate the fibonacci series \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0 : \n        return n \n    if (n % 2 == 0) : \n        return count_divisors(n)\n    else : \n        for i in range(3, int(math.sqrt(n)+1)) : \n            if (n % i == 0) : \n                return count_divisors(n)\n        return False \n    \n    \ndef count_sq_fibonacc"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i == n // i:\n                divisors.append(n//i)\n    if divisors[0] * divisors[1] == n:\n        return True\n    return False\n    \ndef main():\n    n = input(\"Enter the number : \")\n    print(count_divisors(n))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 2 : \n        print(n, \"is an even number.\") \n    elif n % 2 == 0 : \n        print(n, \"is an even number.\") \n    else : \n        print(n, \"is not an even number.\") \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    print(\"count divisors of {} is {}\".format(n, n), end=\" \")\n    if n == 0:\n        print(\"the number is 0\")\n    else:\n        if n % 2 == 0:\n            print(\"{} is divisible by 2\".format(n), end=\" \")\n        else:\n            print(\"{} is not divisible by 2\".format(n), end=\" \")\n    return n \n    \ndef test_count_divisors():\n    assert count_divisors(20) == 10\n    assert count_divisors(40) == 1\n    assert count_divisors(12) == 0\n    assert count_divisors(0) == 0\n    assert count_divisors(10) == 0\n    assert count_divisors(20) == 0\n    assert count_divisors(32) == 0\n    assert count_divisors(32) == 0\n    assert count_divisors(1234) == 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    i = 0\n    for x in range(len(arr)):\n        while(i < len(arr)):\n            if(i == len(arr) - 1):\n                sum += arr[i]\n            elif(arr[i] % 2 == 1):\n                sum += arr[i]\n            i += 1\n        i = 0\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    length = len(arr)\n    \n    if length%2!= 0:\n        return (arr[0] + arr[length//2] + arr[length//2 - 1])\n    elif length > 2:\n        count = arr[0]\n        i = 1\n        while i <= length//2:\n            count += arr[i]\n            i += 2\n    else:\n        return arr[0]\n    \n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = sum(arr)\n    if s % 2 == 1:\n        return s + odd_length_sum(arr[2:])\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i]%2==1:\n            s = s + arr[i]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            total = total + arr[i]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in arr:\n        s += i\n        if i % 2 == 0:\n            s -= i\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    summation = 0\n    odd_length_arr = list(filter(lambda i: len(i) % 2 == 1, arr))\n    for i in odd_length_arr:\n        summation += i\n    return summation\n    \n    "
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 1:\n            odd_length += arr[i]\n    return odd_length\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb = r, g, b\n    # TODO: Convert the rgb color to hsv color\n    # TODO: Return the hsv color\n    color = (0, 0, 0)\n    if rgb[0] > 255:\n        color = (0, 255, 0)\n    elif rgb[0] < 0:\n        color = (255, 0, 0)\n    else:\n        color = (0, 0, 255)\n    if rgb[1] > 255:\n        color = (0, 255, 255)\n    elif rgb[1] < 0:\n        color = (255, 0, 255)\n    else:\n        color = (0, 0, 255)\n    if rgb[2] > 255:\n        color = (0, 255, 255)\n    elif rgb[2] < 0:\n        color = (255, 0, 255)\n    else:\n        color = (0, 0, 255)\n    return color\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = map(int, [r, g, b])\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    if min_rgb == max_rgb:\n        max_rgb += 1\n    else:\n        max_rgb += 1\n    if max_rgb <= 0:\n        max_rgb = 0\n    if max_rgb == 0:\n        r = 0\n    else:\n        r = max_rgb / 255.0\n    if min_rgb <= 0:\n        min_rgb = 0\n    else:\n        min_rgb = min_rgb / 255.0\n    if min_rgb == 0:\n        g = 0\n    else:\n        g = min_rgb / 255.0\n    if min_rgb == 0:\n        b = 0\n    else:\n        b = min_rgb / 255.0\n    if max_rgb > 0:\n        return [r, g, b]\n    elif max_rgb == 0:\n        return [r, g, b]\n    else:\n        return [r, g, b]\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    # Initialize the lists to hold the colors\n    hue = 0\n    saturation = 0\n    value = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_v = 255\n    min_v = 0\n    # B,G,R convert values\n    if r > max_v:\n        r = max_v\n    elif r < min_v:\n        r = min_v\n    if g > max_v:\n        g = max_v\n    elif g < min_v:\n        g = min_v\n    if b > max_v:\n        b = max_v\n    elif b < min_v:\n        b = min_v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    x = r + 0.5\n    r, g, b = r + 0.25*x, g + 0.25*x, b + 0.25*x\n    return r, g, b\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #get current rgb color\n    #get saturation\n    #get hue\n    #convert to hsv\n    #get rgb value\n    #return hsv\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #r,g,b = rgb_to_hsv(r,g,b)\n    #return hsv_to_rgb(r,g,b)\n    return (r,g,b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert rgb color to hsv\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    h, s, v = 0, 0, 0\n    if r >= 0 and g >= 0 and b >= 0:\n        h = (((r + g + b) / 3) * 360) \n        s = 255 - ((r * 2 + g * 2 + b) / (r + g + b))\n        v = s\n        if s >= 0 and s <= 1:\n            h = 0\n        elif s >= 1 and s <= 10:\n            h = (s * 6)\n        elif s >= 10 and s <= 20:\n            h = (s * 6) + 100\n        elif s >= 20 and s <= 30:\n            h = (s * 6) + 400\n        elif s >= 30 and s <= 40:\n            h = (s * 6) + 800\n        elif s >= 40 and s <= 50:\n            h = (s * 6) + 1600\n        elif s >= 50 and s <= 60:\n            h = (s * 6) + 2000\n        elif s >= 60 and s <= 70:\n            h = (s * 6) + 2800\n        elif s >= 70 and s <= 80:\n            h = (s * 6) + 3200\n        elif s >= 80 and s <= 100:\n            h = (s * 6) + 3400\n        elif s >= 100 and s <= 110:\n            h = (s * 6) + 3100\n        elif s >= 110 and s <= 120:\n            h = (s * 6) + 3900\n        elif s >= 120 and s <= 130:\n            h = (s * 6) + 2900\n        elif s >= 130 and s <= 150:\n            h = (s * 6) + 3000\n        elif s >= 150 and s <= 160:\n            h = (s * 6) + 2800\n        elif s >= 160 and s <= 170:\n            h = (s * 6) + 3100\n        elif s >= 170 and s <= 180:\n            h = (s * 6) + 3400\n        elif s >= 180 and s <= 190:\n            h = (s * 6) + 3100\n        elif s >= 190 and s <= 200:\n            h = (s * 6) + 3900\n        elif s >= 200 and s <= 210:\n            h = (s * 6) + 2900\n        elif s >= 210 and s <= 220:\n            h = (s * 6) + 3000\n        elif s >= 220 and s <= 230:\n            h = (s * 6) + 2800\n        elif s >= 230 and s <= 240:\n            h = (s * 6) + 3100\n        elif s >= 240 and s <= 250:\n            h = (s * 6) + 3400\n        elif s >= 250 and s <= 270:\n            h = (s * 6) + 3100\n        elif s >= 270 and s <= 300:\n            h = (s * 6) + 3900\n        elif s >= 300 and s <= 310:\n            h = (s * 6) + 2900\n        elif s >= 310 and s <= 320:\n            h = (s * 6) + 3000\n        elif s >= 320 and s <= 330:\n            h = (s * 6) + 2800\n        elif s >= 330 and s <= 340:\n            h = (s * 6) + 3100\n        elif s >= 340 and s <= 350:\n            h = (s * 6) + 3400\n        elif s >= 350 and s <= 360:\n            h = (s * 6) + 3100\n        elif s >= 360 and s <= 370:\n            h = (s * 6) + 3900\n        elif s >= 370 and s <= 380:\n            h = (s * 6) + 2900\n        elif s >= 380 and s <= 390:\n            h = (s * 6) + 3000\n        elif s >= 390 and s <= 420:\n            h = (s * 6) + 2800\n        elif s >= 420 and s <= 440:\n            h = (s * 6) + 3100\n        elif s >= 440 and s <= 460:\n            h = (s * 6) + 3400\n        elif s >= 460 and s <= 500:\n            h = (s * 6) + 3100\n        elif s >= 500 and s <= 540:\n            h = (s * 6) + 3900\n        elif s >= 540 and s <= 570:\n            h = (s * 6) + 2900\n        elif s >= 570 and s <= 580:\n            h = (s * 6) + 3000\n        elif s >= 580 and s <= 690:\n            h = (s * 6) + 2800\n        elif s >= 690 and s <= 700:\n            h = (s * 6) + 3100\n        elif s >= 700 and s <= 720:\n            h = (s * 6) + 3400\n        elif s >= 720 and s <= 740:\n            h = (s * 6) + 3100\n        elif s >= 740 and s <= 790:\n            h = (s * 6) + 3900\n        elif s >= 790 and s <= 870:\n            h = (s * 6) + 2900\n        elif s >= 870 and s <= 900:\n            h = (s * 6) + 3000\n        elif s >= 900 and s <= 920:\n            h = (s * 6) + 2800\n        elif s >= 920 and s <= 960:\n            h = (s * 6) + 3100\n        elif s >= 960 and s <= 1030:\n            h = (s * 6) + 3400\n        elif s >= 1030 and s <= 1100:\n            h = (s * 6) + 3100\n        elif s >= 1100 and s <= 1170:\n            h = (s * 6) + 3900\n        elif s >= 1170 and s <= 1200:\n            h = (s * 6) + 2900\n        elif s >= 1200 and s <= 1300:\n            h = (s * 6) + 3000\n        elif s >= 1300 and s <= 1400:\n            h = (s * 6) + 2800\n        elif s >= 1400 and s <= 1520:\n            h = (s * 6) + 3100\n        elif s >= 1520 and s <= 1600:\n            h = (s * 6) + 3400\n        elif s >= 1600 and s <= 1700:\n            h = (s * 6) + 3100\n        elif s >= 1700 and s <= 1900:\n            h = (s * 6) + 3900\n        elif s >= 1900 and s <= 2000:\n            h = (s * 6) + 2900\n        elif s >= 2000 and s <= 2100:\n            h = (s * 6) + 3000\n        elif s >= 2100 and s <= 2170:\n            h = (s * 6) + 2800\n        elif s >= 2170 and s <= 2300:\n            h = (s * 6) + 3100\n        elif s >= 2300 and s <= 2400:\n            h = (s * 6) + 3400\n        elif s >= 2400 and s <= 2600:\n            h = (s * 6) + 3100\n        elif s >= 2600 and s <= 2800:\n            h = (s * 6) + 3900\n        elif s >= 2800 and s <= 3200:\n            h = (s * 6) + 2900\n        elif s >= 3200 and s <= 3400:\n            h = (s * 6) + 3000\n        elif s >= 3400 and s <= 3500:\n            h = (s * 6) + 2800\n        elif s >= 3500 and s <= 3600:\n            h = (s * 6) + 3100\n        elif s >= 3600 and s <= 3700:\n            h = (s * 6) + 3400\n        elif s >= 3700 and s <= 3800:\n            h = (s * 6) + 3100\n        elif s >= 3800 and s <= 3900:\n            h = (s * 6) + 3900\n        elif s >= 3900 and s <= 4000:\n            h = (s * 6) + 2900\n        elif s >= 4000 and s <= 4200:\n            h = (s * 6) + 3000\n        elif s >= 4200 and s <"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # make a copy of the rgb tuple and add it to the hsv tuple\n    hsv = (r, g, b)\n    # convert it back to a tuple and add it to the rgb tuple\n    return hsv + (r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = int(r * 255)\n    s = int((g + b) / 2)\n    v = int(255 * ((r + g + b) / 3))\n    h = h % 180\n    return (h, s, v)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # write your code here\n    even = list1[0::2]\n    odd = list1[1::2]\n    print(even)\n    print(odd)\n    p = 0\n    for i in odd:\n        p = p * i\n    for i in even:\n        p = p * i\n    print(p)\n    return p\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            product *= i\n        else:\n            product *= i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            list1[i] = list1[i] // 2\n        else:\n            list1[i] = list1[i] * 3 + 1\n    return list1\n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1_even = list1[0::2]\n    list1_odd = list1[1::2]\n    \n    list2 = list1_even + list1_odd\n    \n    return sum(list2)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for x in list1:\n        if (x % 2 == 0):\n            product = product * x\n        else:\n            product = product * x\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    if list1 == []:\n        return 0\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n            num += 1\n        else:\n            odd += i\n            num -= 1\n    print(f'The product of first even and odd number is {num*even}')\n    print(f'The product of first even and odd number is {num*odd}')\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd=[]\n    for i in list1:\n        if i%2==0:\n            even_odd.append(i)\n        else:\n            even_odd.append(i)\n    return even_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Check if the list is empty or not. If it is then the function should return 0\n    if not list1:\n        return 0\n    # Check if the list is empty or not. If it is then the function should return 0\n    elif not list1[0]:\n        return 0\n    # Check if the list is empty or not. If it is then the function should return 0\n    elif not list1[len(list1)-1]:\n        return 0\n    # Iterate through each item of the list\n    for x in range(0, len(list1), 2):\n        # Check if the item of the list is odd\n        if list1[x] % 2 == 1:\n            # Take the multiplication of the first item of the list\n            # and multiply with 2\n            # Now we are using the division operator to find the product\n            # and return the result of this product\n            return list1[x] * list1[x+1]\n        else:\n            # Take the multiplication of the first item of the list\n            # and multiply with 2\n            # Now we are using the division operator to find the product\n            # and return the result of this product\n            return list1[x] * list1[x+1] * 2\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(0,len(list1),2):\n        product*=list1[i]\n    return product\n    \n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(s) for s in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # start with an empty list\n    output = []\n    # traverse in the string\n    for char in test_str:\n        # if char is a digit, add it to the output list\n        if char.isdigit():\n            output.append(int(char))\n        # if char is not a digit, append it to the output list with '0'\n        else:\n            output.append(0)\n    # return the tuple\n    return tuple(output)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str)\n    return test_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = ()\n    for char in test_str:\n        new_tuple += (ord(char),)\n    return tuple(new_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    s = test_str.split(',')\n    l = []\n    for i in s:\n        for j in i.split('-'):\n            l.append(int(j))\n    return tuple(l)\n    \n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    i = 0\n    tup_str = test_str.split(\",\")\n    for i in range(0, len(tup_str)):\n        tup_str[i] = int(tup_str[i])\n    return tup_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Check if the index is already present\n    while(a[int(x)]!= x):\n        index = bisect.bisect_right(a, x)\n        if(index == 0):\n            return -1\n        # Move to the right index\n        x = a[index-1]\n    return index-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i - 1\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # num = len(a)\n    # if num == 1:\n    #     return a[0]\n    # if num == 0:\n    #     return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return (bisect.bisect_right(a,x) - 1)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # base case\n    if a[0] < x:\n        return 0\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) < 1:\n        return None\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return None\n    elif a[i-1] < x:\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x<a[0]:\n        return 0\n    if a[0]<x<a[1]:\n        return 1\n    return 2\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if a[0]<x:\n        return 0\n    if a[1]<x<a[2]:\n        return 1\n    return 2\ndef insert(a, x):\n    '''\n    Write a function to locate the insertion point for a specified value in sorted order.\n    '''\n    if a[0]>x:\n        return 0\n    if a[1]>x<a[2]:\n        return 1\n    return 2\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # If the value is not found in the array then return the original index\n    # of the array to avoid two additional runs\n    if a[x]!= x:\n        return bisect_right(a, x)\n    else:\n        # Find the index of the element to be inserted to maintain the insertion order\n        ind = bisect_right(a, x)\n        # Insert value into sorted array\n        return ind + 1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a?(b\\w){3}'\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Iterate through the string\n    for index, letter in enumerate(text):\n        # If the letter is a 'a' then ignore it.\n        if letter == 'a':\n            continue\n        # If the letter is a 'b' then ignore it.\n        elif letter == 'b':\n            continue\n        # If the letter is an 'o' then just ignore it.\n        elif letter == 'o':\n            continue\n        # If there are no three letters followed by a 'b' then return false.\n        else:\n            return False\n    # Return true if there are three letters followed by an 'o'.\n    return True\n    # Remove the a from the end of the string\n    # if it ends in an 'o'\n    # If it ends in a 'b' then return False\n    # If it doesn't end in an 'o' or 'b' then return True.\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # return the pattern for the first match\n    pattern = re.compile(r'([a-z]+)\\1\\1')\n    return pattern.match(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(\"a(.*?)b\", text)\n    return match.group(1)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a[b]?\\s?\\w*b\\s?\\w*')\n    match_result = re.search(pattern,text)\n    return match_result\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # This will return true when it is empty, false otherwise\n    empty = re.search('[a-zA-Z]+', text)\n    if empty is None:\n        # This will return true when it is empty\n        return True\n    else:\n        # This will return false when it is not empty\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Create a regex object for the text\n    text_regex = re.compile(r'[a-z][A-Z][a-z]{3,}')\n    # Make a text match with the regex\n    match = text_regex.search(text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Pattern for a single match\n    pattern = r'(\\a)(\\b)([bc])'\n    # Text to match\n    matched = re.match(pattern, text)\n    if matched is None:\n        return False\n    # Extract variables from matched\n    group1 = matched.group(1)\n    group2 = matched.group(2)\n    group3 = matched.group(3)\n    # Remove the a and b from the end of the string\n    group3 = re.sub(r'(a)(\\b)([bc])', r'\\1\\2\\3', group3)\n    # Make sure the string contains a,b,c, and the 'b'\n    if 'b' in group1 or 'c' in group1:\n        return False\n    if 'a' in group2 or 'b' in group2:\n        return False\n    if 'a' in group3 or 'b' in group3:\n        return False\n    # Make sure the string contains a,b,c, and the 'a'\n    if 'a' in group1 or 'b' in group1:\n        return False\n    if 'a' in group2 or 'b' in group2:\n        return False\n    if 'a' in group3 or 'b' in group3:\n        return False\n    # Make sure the string contains a,b,c, and the 'c'\n    if 'a' in group1 or 'b' in group2 or 'c' in group2:\n        return False\n    if 'a' in group3 or 'b' in group3 or 'c' in group3:\n        return False\n    # If all three of the characters are equal to 'c' or to 'b'\n    return True\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    m = re.search(r'a\\w+b', text)\n    print(m)\n    if m:\n        print(\"Match found!\")\n    else:\n        print(\"Match not found!\")\n    return m\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return bool(re.search('\\b(a|b)\\b', text))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.split(\",\")\n    test_str = test_str.split(\",\")\n    for i in range(0, len(test_list)):\n        test_str[i] = test_str[i].strip(\"\\n\")\n        test_str[i] = test_str[i].strip()\n    for j in range(0, len(test_str)):\n        test_list[j] = test_list[j].strip()\n    return test_tuple(test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result = tuple(test_list)\n    test_list = result\n    return test_str +'' + str(result)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    lst = []\n    for i in range(len(test_str)):\n        lst.append(test_str[i])\n    return lst\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if not isinstance(test_list, (list, tuple)):\n        raise TypeError(\"tuple needs to be of type list or tuple\")\n    elif not isinstance(test_str, (str, list)):\n        raise TypeError(\"string needs to be of type str or list\")\n    elif not len(test_list) == len(test_str):\n        raise ValueError(\"all strings needs to be of the same length\")\n    else:\n        return tuple(test_list + [test_str])\n    \n    \ndef test_is_string(test_func):\n    '''\n    Write a function to test whether the given test_func function is implemented properly\n    '''\n    # test_func must be implemented\n    def test_wrapper(*args, **kwargs):\n        if not test_func(*args, **kwargs):\n            raise TypeError(\"test_func must be implemented\")\n        else:\n            return test_func(*args, **kwargs)\n    \n    return test_wrapper\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_list == []:\n        new_tuple = ()\n    elif test_list[0] == '(':\n        if test_str == '':\n            return tuple()\n        return tuple(map(int, test_str))\n    elif test_str[0] == '(':\n        if test_str == '':\n            return tuple()\n        if not test_list.count(test_str):\n            return tuple()\n        return tuple(map(int, test_list[1:] + test_str))\n    return tuple(test_list[1:])\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Your code here\n    return test_list, test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    res = ()\n    for index in range(len(test_str)):\n        res += (test_list[index],)\n    return res\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = []\n    for i in test_list:\n        if i not in tuple_list:\n            tuple_list.append(i)\n    tuple_string = ''.join(tuple_list)\n    return tuple_string, tuple_list\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = [0] * len(test_list)\n    index = 0\n    for word in test_str:\n        tuple_list[index] = word\n        index += 1\n    return tuple(tuple_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(lambda item: int(item), test_str.split(',')))\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums == []:\n        return False\n    else:\n        return True if nums[0] % 2 == 0 else False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = [i for i in nums if i%2==0]\n    if even_numbers:\n        return True\n    else:\n        return False\n    \n    # O(N) | O(1)\n    # O(N)\n    \n    # return True if numbers is even or else False\n    \n    # O(N)\n    # O(1)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return sum(set(nums[x]%2 for x in range(len(nums)-1)))==0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # the condition is that the list is even or odd\n    even = False\n    odd = False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    counter = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            counter += 1\n    return counter % 2 == 0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even += 1\n            if even > 2:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return nums[i] == nums[i]\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return True if any(n % 2 == 0 for n in nums) else False\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[1:]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x:x[1]!=x[0], test_tup))\n    \n    \ndef nested(test_tup, test_list):\n    '''\n    Write a function to return the first item of a list.\n    '''\n    return list(filter(lambda x:x[0]==test_tup, test_list))[0][1]\n    \n    \ndef nested_to_string(nested):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return ''.join(map(lambda x:x.split(',')[1], nested))\n    \n    \ndef nested_to_list(nested):\n    '''\n    Write a function to convert a nested list to a list.\n    '''\n    return list(map(lambda x:x.split(',')[0], nested))\n    \n    \ndef nested_to_dict(nested):\n    '''\n    Write a function to convert a nested list to a dictionary.\n    '''\n    return dict(map(lambda x:x.split(',')[0], nested))\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to test if a number is prime.\n    '''\n    return all(n % i for i in range(2, int(math.sqrt(n)) + 1))\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to test if a string is palindrome.\n    '''\n    return s == s[::-1]\n    \n    \ndef can_split(s):\n    '''\n    Write a function to check if a string can be split into two words.\n    '''\n    return not all(s[i] == s[i + 1] for i in range(len(s) - 1))\n    \n    \ndef is_odd(n):\n    '''\n    Write a function to test if a number is odd.\n    '''\n    return all(n % 2 == 1)\n    \n    \ndef is_prime_digits(s):\n    '''\n    Write a function to test if a string is a prime number.\n    '''\n    return any(n % 10 == 0 for n in map(int, s))\n    \n    \ndef is_palindrome_digits(s):\n    '''\n    Write a function to test if a string is a palindrome number.\n    '''\n    return all(s[i] == s[i + 1] for i in range(len(s) - 1))\n    \n    \ndef count_fib(n):\n    '''\n    Write a function to count the frequency of digits in a number.\n    '''\n    return {digit: n % 10 == 0 for digit in '123456789'}\n    \n    \ndef is_palindrome_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \n    \ndef count_fib_digits(s):\n    '''\n    Write a function to count the frequency of digits in a number.\n    '''\n    return {digit: s.count(digit) for digit in '123456789'}\n    \n    \ndef is_palindrome_palindrome_digits(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return all(s[i] == s[i + 1] for i in range(len(s) - 1))\n    \n    \ndef find_permutations(s):\n    '''\n    Write a function to find all permutations of a string.\n    '''\n    return [''.join(s[i] for i in range(len(s))) for s in itertools.permutations(s)]\n    \n    \ndef longest_palindrome(s):\n    '''\n    Write a function to find the longest palindrome.\n    '''\n    return max(map(lambda x:is_palindrome(x), s), key=lambda x: len(x))\n    \n    \ndef find_permutations_palindrome(s):\n    '''\n    Write a function to find all permutations of a string.\n    '''\n    return [''.join(s[i] for i in range(len(s))) for s in itertools.permutations(s)]\n    \n    \ndef is_palindrome_shortest(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \n    \ndef longest_palindrome_shortest(s):\n    '''\n    Write a function to find the longest palindrome.\n    '''\n    return max(map(lambda x:is_palindrome_shortest(x), s), key=lambda x: len(x))\n    \n    \ndef find_permutations_shortest(s):\n    '''\n    Write a function to find all permutations of a string.\n    '''\n    return [''.join(s[i] for i in range(len(s))) for s in itertools.permutations(s)]\n    \n    \ndef is_palindrome_longest(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return all(s[i] == s[i + 1] for i in range(len(s) - 1))\n    \n    \ndef longest_palindrome_longest(s):\n    '''\n    Write a function to find the longest palindrome.\n    '''\n    return max(map(lambda x:is_palindrome_longest(x), s), key=lambda x: len(x))\n    \n    \ndef find_permutations_longest(s):\n    '''\n    Write a function to find all permutations of a string.\n    '''\n    return [''.join(s[i] for i in range(len(s))) for s in itertools.permutations(s)]\n    \n    \ndef is_palindrome_longest_non_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return any(s[i] == s[i + 1] for i in range(len(s) - 1))\n    \n    \ndef longest_palindrome_longest_non_palindrome(s):\n    '''\n    Write a function to find the longest palindrome.\n    '''\n    return max(map(lambda x:is_palindrome_longest_non_palindrome(x), s), key=lambda x: len(x))\n    \n    \ndef find_permutations_longest_non_palindrome(s):\n    '''\n    Write a function to find all permutations of a string.\n    '''\n    return [''.join(s[i] for i in range(len(s))) for s in itertools.permutations(s)]\n    \n    \ndef is_palindrome_longest_non_palindrome_digits(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return any(s[i] == s[i + 1] for i in range(len(s) - 1))\n    \n    \ndef longest_palindrome_longest_non_palindrome_digits(s):\n    '''\n    Write a function to find the longest palindrome.\n    '''\n    return max(map(lambda x:is_palindrome_longest_non_palindrome_digits(x), s), key=lambda x: len(x))\n    \n    \ndef find_permutations_longest_non_palindrome_digits(s):\n    '''\n    Write a function to find all permutations of a string.\n    '''\n    return [''.join(s[i] for i in range(len(s))) for s in itertools.permutations(s)]\n    \n    \ndef is_palindrome_longest_non_palindrome_digits_shortest(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return any(s[i] == s[i + 1] for i in range(len"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    \n    # get the size of the tuple\n    size = len(test_tup)\n    \n    # check for empty tuple\n    if size == 0:\n        return ()\n    \n    # create a new tuple to remove all the tuples\n    new_tuple = ()\n    \n    # for every index in the tuple, find the index of the tuple\n    for idx, item in enumerate(test_tup):\n        if idx == 0:\n            # if the index is 0, then it is the first element of the tuple\n            # and it must be removed\n            new_tuple = item\n            continue\n        \n        # check if the index is in the first element of the tuple\n        elif item!= test_tup[idx-1]:\n            # if the current index is less than the index of the last element of the tuple,\n            # then it must be removed\n            # this is because we have already removed the last element of the tuple\n            # by \"deconstructing\" the tuple\n            new_tuple = item\n            break\n            \n    # if the current index is the same as the index of the last element of the tuple\n    # then it must be removed\n    # this is because we have already removed the last element of the tuple\n    # by \"deconstructing\" the tuple\n    if len(new_tuple) == 0:\n        return ()\n    \n    # return the tuple\n    return new_tuple\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if test_tup:\n        tup = test_tup[0]\n    else:\n        return\n    if type(tup) is tuple and type(test_tup) is tuple:\n        remove_nested((tup,test_tup))\n    elif type(tup) is tuple:\n        pass\n    elif type(test_tup) is tuple:\n        pass\n    else:\n        pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup_tuple = (test_tup[0], test_tup[1], test_tup[2])\n    return test_tup_tuple\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test_tup[0]\n    del test"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is not tuple:\n        return test_tup\n    else:\n        if len(test_tup) <= 1:\n            return test_tup\n        else:\n            new_tup = []\n            for element in test_tup:\n                if type(element) is not tuple:\n                    return new_tup\n                else:\n                    if element not in new_tup:\n                        new_tup.append(element)\n            return new_tup\n        \ndef get_max_int(test_tup):\n    '''\n    Get the value with the max int.\n    '''\n    if type(test_tup) is not tuple:\n        return test_tup\n    else:\n        if len(test_tup) <= 1:\n            return test_tup\n        else:\n            new_tup = []\n            for element in test_tup:\n                if type(element) is int:\n                    new_tup.append(element)\n            return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    i = 0\n    while i < len(test_tup):\n        if isinstance(test_tup[i], tuple):\n            # remove items from the tuple if they are in the tuple\n            new_tup = new_tup + test_tup[i]\n            del test_tup[i]\n        else:\n            # if they're not in the tuple, make them None\n            test_tup[i] = None\n        i += 1\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tuple = test_tup\n    l = len(nested_tuple)\n    for k in range(1, l):\n        if nested_tuple[k][0] == nested_tuple[k - 1][0] and \\\n            nested_tuple[k][1] == nested_tuple[k - 1][1]:\n            del nested_tuple[k]\n    return tuple(nested_tuple)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output_list = []\n    for input_list_count in range(0,len(input_list),2):\n        output_list.append(len(input_list[input_list_count]))\n    return output_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) is list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    '''\n    Example:\n    >>> count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> count_list([1, 2, 3, [4, 5, 6, [7, 8, 9]]])\n    [[2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    '''\n    '''\n    For the second question, we have thought the lists so far, just as they are, and \n    we have to put them into a set, because every element in the list is a \n    unique element in the set, and for the first element, we need to count the \n    occurence.\n    '''\n    '''\n    If the input list is empty, then it is a list with just an empty list. \n    We simply return this empty list, since its size is 1.\n    '''\n    if input_list == [] or input_list == 1:\n        return [1]\n    else:\n        '''\n        In the above example, the list input is: [1, 2, 3, 4, 5, 6, 7, 8, 9].\n        The empty list is returned.\n        '''\n        return count_list(input_list[1:])\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for input_list in input_list: \n        result += len(input_list)\n    return result\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for i in input_list:\n        if isinstance(i,list):\n            result += 1\n    return result\n    \n    # Write a python function to count the number of lists in a given number of lists.\n    # Expected output:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    # Expected Result:\n    "
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0, len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    print(\"Total number of lists: \", count)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    output_count = 0\n    for input_list_item in input_list:\n        if isinstance(input_list_item, list):\n            output_count += count_list(input_list_item)\n        else:\n            output_count += 1\n    return output_count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    my_dict = dict()\n    index = 0\n    for i in range(0,len(input_list)):\n        if input_list[i][0] in my_dict:\n            my_dict[input_list[i][0]]+=1\n        else:\n            my_dict[input_list[i][0]]=1\n    return my_dict\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)<1:\n        raise ValueError(\"Array is empty\")\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==None:\n        return 0\n    #return arr[-1]\n    return last(arr[:-1],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def find(arr,x):\n        '''\n        Given an array arr and a value, returns the last index of\n        the value.\n        '''\n        index = 0\n        for i in range(len(arr)):\n            if arr[i] == x:\n                index = i\n                break\n        return index\n    \n    if x in arr:\n        return find(arr,x)\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def check(x):\n        if len(x) == 1:\n            return x == '*'\n        \n        if x[0] == '*':\n            return False\n        \n        if x[0] == x[-1]:\n            return True\n        \n        if x[-1] == x[-2]:\n            return True\n        \n        if x[0]!= x[-1]:\n            if check(x[:-1]) == True:\n                return True\n        \n        if len(x) % 2 == 0:\n            if check(x[:-1]) == True:\n                return True\n        \n        if len(x) % 2!= 0:\n            if check(x[:-1]) == True:\n                return True\n    \n    if check(arr) == False:\n        return -1\n    \n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[i + 1] and arr[i] == '*':\n            i += 2\n            if i == len(arr) - 1:\n                return i\n        i += 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr = arr[1:]\n    i=0\n    for j in range(len(arr)-1):\n        if arr[j]<arr[j+1]:\n            i=j\n            break\n    print(i)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    elif len(arr)==1:\n        return 0 if arr[0]==x else -1\n    elif arr[0]==x:\n        return 0\n    elif arr[-1]==x:\n        return len(arr)-1\n    else:\n        if arr[0]>x:\n            return 0 if arr[0]>x else len(arr)-1\n        elif arr[-1]>x:\n            return len(arr)-1\n        else:\n            return len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return last_index(arr,x,0,len(arr)-1)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    #split the string using spaces\n    a = text.split()\n    \n    for i in a:\n        #convert each item to lowercase\n        item_lower = i.lower()\n        \n        #find the first a\n        first_a = item_lower.find('a')\n        \n        #check if the found a is at the end\n        if (first_a > -1):\n            #extract the remaining part\n            remainder = item_lower[first_a + 1:]\n            \n            #check if the last character of the string is a word\n            if (remainder[0] in \"AB\"):\n                #the whole string was found and has an end\n                endb = 'b'\n            else:\n                #the word was not found\n                endb = '-'\n        \n        #if the whole string was found, add the end\n        else:\n            endb = '-'\n    \n    return endb\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if not text.endswith('b') or text.startswith('a'):\n        return 0\n    return 1\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Starting with the last non-space character of the input string\n    last_space_char = text[-1]\n    # Now there should be an alphanumeric character in the range between 1 and 9\n    # and an ending in 'b'\n    regex = '^[a-zA-Z0-9_]+[a-zA-Z0-9_]+$'\n    regex = regex.replace(' ', '')\n    m = re.search(regex, last_space_char)\n    if m:\n        return m.group()\n    else:\n        return last_space_char\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_split = text.split(' ')\n    pattern = r\"(a[\\s]*)(b)\"\n    text_to_match = r\"(a[\\s]*)(b)\"\n    for word in text_split:\n        match = re.search(pattern, word)\n        if match:\n            if match.group(1)!= \"\":\n                print(match.group(1)+\" \" + match.group(2)+\" \" + match.group(1)+\" \" + match.group(3)+\" \" + match.group(2))\n        else:\n            print(word
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # TODO\n    # Implement this function.\n    return re.search(r'a[a-zA-Z0-9]+\\b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #text = \"a\"\n    #Find \"b\" in the beginning of the string\n    #text = \"a\"\n    \n    #Find \"b\" in the end of the string\n    #text = \"b\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string\n    #text = \"b\"\n    #text = \"a\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"b\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"b\" in the end of the string\n    #text = \"b\"\n    #text = \"b\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"b\"\n    #text = \"b\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"b\"\n    #text = \"b\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"b\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"b\"\n    \n    #Find \"b\" in the beginning of the string and \"b\" in the end of the string\n    #text = \"b\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"b\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"b\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"b\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"b\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"b\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"b\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the end of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the beginning of the string\n    #text = \"endb\"\n    #text = \"endb\"\n    \n    #Find \"b\" in the beginning of the string and \"endb\" in the end of the string"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start = re.search(r'(a\\b)', text)\n    end = re.search(r'(b\\b)', text)\n    return [start, end]\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    def ab(text):\n        '''\n        Text is a string.\n        Return a list of matches.\n        '''\n        if text[0]=='a':\n            return ['a', text[1:]]\n        elif text[-1]=='b':\n            return ['b', text[:-1]]\n        else:\n            return []\n    matches=[]\n    for match in ab(text):\n        matches.append(match[0])\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('^(.*)b(.*)$',text,flags=re.I)\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_starta_startb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)b(.*)$',text,flags=re.I)\ndef text_startb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by 'a'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('^(.*)b(.*)$',text,flags=re.I)\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)b(.*)$',text,flags=re.I)\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)b(.*)$',text,flags=re.I)\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_starta_startb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)b(.*)$',text,flags=re.I)\ndef text_startb_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by 'a'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by 'b'.\n    '''\n    return re.search('^(.*)b(.*)$',text,flags=re.I)\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by 'a'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by 'a'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by 'b'.\n    '''\n    return re.search('^(.*)b(.*)$',text,flags=re.I)\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)b(.*)$',text,flags=re.I)\ndef text_startb_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b'.\n    '''\n    return re.search('^(.*)a(.*)$',text,flags=re.I)\ndef tex"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'(?:(?<=\\w+a)\\w+\\w+\\w+)+b', text, flags=re.I)\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    my_sum = 0\n    for value in dict.values():\n        my_sum += value\n    return my_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total=0\n    for i in dict.values():\n        total+=i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict:\n        sum = sum + dict[x]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # your code here\n    #return sum([dict.values()])\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s=0\n    for key, value in dict.items():\n        s = s + value\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0: \n        return 0\n    else: \n        return n % 2 + sum_odd(n//2) \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if (n % 2 == 1):\n        sum = n * 0.5\n    for i in range(2, n):\n        if (i % 2 == 1):\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    num = 0\n    for i in range(l,r+1):\n        if i % 2 == 1:\n            num += i\n    return num\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1,n+1))\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(n/2)\n    if l == 0:\n        return 0\n    else:\n        if n % 2 == 0:\n            return l + sum_odd(l)\n        else:\n            return sum_odd(l) + 1"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n\n    sum = 0\n    while l <= r:\n        m = l + (r - l) // 2\n        if m % 2!= 0:\n            sum += m\n            l = m + 1\n        else:\n            r = m - 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #The number of odd numbers are stored in the variable oddNumbers.\n    oddNumbers = 0\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for element in arr:\n        sum += element\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n    "
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # start = 0\n    # end = len(arr) - 1\n    # sum = 0\n    # while start <= end:\n    #     if arr[start] + arr[end] < arr[start] + arr[end] + 1:\n    #         sum += arr[start] + arr[end]\n    #         start += 1\n    #     else:\n    #         start += 1\n    #         end -= 1\n    # return sum\n    \n    start = 0\n    end = len(arr) - 1\n    sum = 0\n    while start <= end:\n        if arr[start] + arr[end] < arr[start] + arr[end] + 1:\n            sum += arr[start] + arr[end]\n            start += 1\n        else:\n            sum += arr[end]\n            end -= 1\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n    \n    \n    \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialise a sum array\n    sum = 0\n    \n    # iterate through the array\n    for i in arr:\n        # find the sum of the array\n        sum = sum + i\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if (d==1):\n        return n\n    else:\n        temp = n%2\n        n = n//2\n        a = n\n        temp1 = n\n        temp2 = a\n        a = temp\n        temp = a\n        a = temp1\n        temp1 = a\n        a = temp2\n        temp2 = a\n        a = temp1\n        temp1 = a\n        a = temp2\n        return a\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n&((1<<32) - 1)\n    return (n << d) + (n >> 32)\ndef main():\n    n=int(input())\n    \n    # write your code here\n    print(\"right rotation: %d\" %(right_rotate(n,10)))\n    print(\"left rotation: %d\" %(left_rotate(n,10)))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # your code here\n    return n&1\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    x=n\n    count=0\n    while x > 0:\n        rem=x%d\n        if rem==0:\n            count+=1\n        x=x//d\n    if count>0:\n        return (x-1)%d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) + (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Your code here\n    # return n << d\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n&0xffffffffffffffff\n    if d == 0:\n        n = n >> 1\n    elif d == 1:\n        n |= 0b10000000\n    elif d == 2:\n        n |= 0b11000000\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Write your code here\n    n_r = n % 2\n    if n_r == 0:\n        n = (n - 1) ^ 2\n    else:\n        n = (n - 1) ^ 1\n    n = n_r << d\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # assume that the number is 32 bit\n    n = int(n)\n    #print(n)\n    a = n & 0xffff\n    n = n >> 16\n    b = (n&0xff00) | ((n&0x800000) << 16)\n    c = (n&0x3f0000) | ((n&0x3f000) >> 24)\n    d = (n&0xff000000) | ((n&0xffffff00) << 24)\n    #print(d)\n    return \"%x\" %(a|b|c|d)\n    \n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n % (2**32)\n    return (n>>d) | ((n&(~(1 << d)) ) << d)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \", \"\")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = re.sub(r'\\s+','', text)\n    return new_text\ndef is_digit(text):\n    '''\n    Write a function to check whether a string is a digit.\n    '''\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with a single space\n    # Using regular expression\n    new_text = re.sub(r'\\s+','', text)\n    \n    # Replace all quotes with single quote\n    new_text = re.sub(r'\\'', '\\'\\'', new_text)\n    \n    # Replace all quotes with double quotes\n    new_text = re.sub(r'\\\"', '\\\"\\\"', new_text)\n    \n    # Replace all punctuation with space\n    new_text = re.sub(r'[!@#$%^&*()_+-]','', new_text)\n    \n    # Replace all whitespaces with a single space\n    new_text = re.sub(r'\\s+','', new_text)\n    \n    return new_text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #using re.sub\n    text_before_spaces = re.sub(\"[^A-Za-z0-9]+\", \"\", text)\n    return text_before_spaces\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    return re.sub(r'\\s+','', str(text))\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    no_spaces = text.replace('\\n','')\n    no_spaces = no_spaces.replace(' ','')\n    no_spaces = no_spaces.replace('\\t','')\n    no_spaces = no_spaces.replace('\\r','')\n    no_spaces = no_spaces.replace('\\xa0','')\n    return no_spaces\ndef remove_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    no_digits = re.sub(r'\\d+', '', text)\n    return no_digits\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation marks from a string.\n    '''\n    text = remove_all_spaces(text)\n    text = remove_digits(text)\n    return text\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #print(f\"x : {x}\")\n    #print(f\"y : {y}\")\n    #print(f\"z : {z}\")\n    x_dif = abs(x-y)\n    y_dif = abs(x-z)\n    z_dif = abs(y-z)\n    if x_dif == 0:\n        return 0\n    if y_dif == 0:\n        return 1\n    if z_dif == 0:\n        return 2\n    if x_dif > y_dif or x_dif > z_dif:\n        return 1\n    if y_dif > x_dif or y_dif > z_dif:\n        return 2\n    if z_dif > x_dif or z_dif > y_dif:\n        return 2\n    else:\n        return 1\n    \ndef test():\n    '''\n    Test\n    '''\n    x = 3\n    y = 2\n    z = 2\n    print(test_three_equal(x,y,z))\n    \nif __name__ == \"__main__\":\n    test()"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x>y and x>z, 'One of the input is not a valid number'\n    assert y>z, 'One of the input is not a valid number'\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x_count = 0\n    y_count = 0\n    z_count = 0\n    for item in x:\n        if item in y:\n            x_count = x_count + 1\n        if item in z:\n            y_count = y_count + 1\n        if item in z:\n            z_count = z_count + 1\n    print(x_count)\n    print(y_count)\n    print(z_count)\n    print('Number of equal numbers from x: ', x_count)\n    print('Number of equal numbers from y: ', y_count)\n    print('Number of equal numbers from z: ', z_count)\n    assert(x_count == y_count == z_count == 3)\n    assert(x_count!= y_count!= z_count == 3)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = x\n    y = y\n    z = z\n    if x < y:\n        x = y\n    else:\n        x = y\n    if x < z:\n        x = z\n    else:\n        x = z\n    if y < z:\n        y = z\n    else:\n        y = z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pass\ndef count_invalid_character(s):\n    '''\n    Write a python function that returns the number of characters that are not in a given string.\n    '''\n    pass\ndef swap_char(s):\n    '''\n    Write a python function that swaps two characters in a given string.\n    '''\n    pass\ndef main():\n    \"\"\"\n    Test Cases\n    (1) Test case 1: Given a string with a single character\n    (2) Test case 2: Given a string with 2 characters and a single character\n    (3) Test case 3: Given a string with 3 characters and a single character\n    (4) Test case 4: Given a string with 3 characters and two characters\n    (5) Test case 5: Given a string with 6 characters and a single character\n    (6) Test case 6: Given a string with 5 characters and a single character\n    \"\"\"\n    pass\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    from functools import reduce\n    if x == y == z == 1:\n        return 1\n    if x == y == z == 2:\n        return 2\n    if x == y == z == 3:\n        return 3\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    #checking if the number is even\n    if (x%2==0):\n        if (y%2==0):\n            if (z%2==0):\n                return(x*y*z)\n            else:\n                return(x*y*z-1)\n        else:\n            return(x*y*z-1)\n    #checking if the number is odd\n    else:\n        if (y%2==0):\n            if (z%2==0):\n                return(x*y*z)\n            else:\n                return(x*y*z-1)\n        else:\n            return(x*y*z-1)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #check the type of x\n    assert type(x) == int, 'x should be int not {}'.format(type(x))\n    #check the type of y\n    assert type(y) == int, 'y should be int not {}'.format(type(y))\n    #check the type of z\n    assert type(z) == int, 'z should be int not {}'.format(type(z))\n    #check the type of x + y + z\n    assert type(x + y + z) == int, 'x + y + z should be int not {}'.format(type(x + y + z))\n    #check the type of x + y\n    assert type(x + y) == int, 'x + y should be int not {}'.format(type(x + y))\n    #check the type of x - y\n    assert type(x - y) == int, 'x - y should be int not {}'.format(type(x - y))\n    #check the type of x * y\n    assert type(x * y) == int, 'x * y should be int not {}'.format(type(x * y))\n    #check the type of x / y\n    assert type(x / y) == int, 'x / y should be int not {}'.format(type(x / y))\n    #check the type of x // y\n    assert type(x // y) == int, 'x // y should be int not {}'.format(type(x // y))\n    #check the type of x ** y\n    assert type(x ** y) == int, 'x ** y should be int not {}'.format(type(x ** y))\n    #check the type of x ** y ** z\n    assert type(x ** y ** z) == int, 'x ** y ** z should be int not {}'.format(type(x ** y ** z))\n    #check the type of x ** y ** z ** x\n    assert type(x ** y ** z ** x) == int, 'x ** y ** z ** x should be int not {}'.format(type(x ** y ** z ** x))\n    #check the type of x ** y ** z ** x ** y\n    assert type(x ** y ** z ** x ** y) == int, 'x ** y ** z ** x ** y should be int not {}'.format(type(x ** y ** z ** x ** y))\n    #check the type of x ** y ** z ** x ** y ** z\n    assert type(x ** y ** z ** x ** y ** z) == int, 'x ** y ** z ** x ** y ** z should be int not {}'.format(type(x ** y ** z ** x ** y ** z))\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num_of_equal = 0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                if x[i]==y[j] and y[j]==z[k] and z[k]==x[i]:\n                    num_of_equal+=1\n    print(num_of_equal)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # YOUR CODE GOES HERE\n    return\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    if len(arr) <= 1:\n        return 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n        if arr[i] == arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # Code to find how many rotations need to be done to make the array SORTED\n    '''\n    Consider the following example\n    arr = [1, 5, 8, 6, 9, 7, 2, 3, 4]\n    print(count_rotation(arr)) --> 3\n    \n    The array contains 5 elements, but since the last element was repeated 5 times (indexing 0),\n    the array is now\n    [1, 5, 8, 6, 9, 7, 2, 3, 4, 6, 9, 3, 7, 5, 8]\n    \n    You have to count the number of rotations required to make the array SORTED.\n    This is as follows:\n    1) Count the number of rotations to make the array SORTED\n    2) Divide the array into 2 parts: left and right.\n    3) Sort the left part and the right part\n    4) Repeat step 2 until the left side is sorted.\n    \n    This is the unique solution\n    '''\n    # Your code here\n    l, r = 0, len(arr)-1\n    while l< r:\n        mid = (l+r)//2\n        if arr[mid]==mid:\n            l += 1\n        else:\n            r = mid-1\n    return l"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    # count in left half\n    left_half = arr[:n//2]\n    right_half = arr[n//2:]\n    \n    for i in range(n):\n        if left_half[i]!= right_half[i]:\n            count+=1\n    \n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            count+=1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    while n>0:\n        n=n-1\n        pivot = arr[n]\n        i = n-1\n        j = 0\n        while i>=0 and arr[i] > pivot:\n            arr[i+1] = arr[i]\n            i = i-1\n        arr[i+1] = pivot\n        rotations+=1\n    return rotations\n    \ndef average(arr):\n    '''\n    Write a python function to return the average of the given unsorted array.\n    '''\n    n = len(arr)\n    arr = arr[:n]\n    return sum(arr)/len(arr)\n    \ndef count_swap(arr):\n    '''\n    Write a python function to count the number of swaps required to generate a sorted array.\n    '''\n    n = len(arr)\n    swaps = 0\n    while n>0:\n        n=n-1\n        pivot = arr[n]\n        i = n-1\n        j = 0\n        while i>=0 and arr[i] > pivot:\n            arr[i+1] = arr[i]\n            i = i-1\n        arr[i+1] = pivot\n        swaps+=1\n    return swaps\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # your code here\n    count = 0\n    i=0\n    j=len(arr)-1\n    while i<=j:\n        if arr[i]<arr[j]:\n            i+=1\n        else:\n            j-=1\n            count+=1\n    print(count)\n    \nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int,input().strip().split()))\n    count_rotation(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count rotations\n    # we can use this to create the same number of rotations as it would be if we rotate each number\n    rotations = 0\n    # for every number in the array\n    for number in arr:\n        # if this number is not equal to 0\n        if number!= 0:\n            # if it is the number we need to flip\n            if arr.index(number) > arr.index(number+1):\n                # if we are at the end of the array\n                if arr.index(number) == arr.size() - 1:\n                    # if the number is larger than the number we just flipped\n                    if arr[arr.index(number)-1] < number:\n                        # if it is going to be negative\n                        if number < 0:\n                            # we flip it\n                            number = abs(number)\n                # if it is not the end of the array\n                else:\n                    # if it is going to be negative\n                    if number < 0:\n                        # if it is going to be a negative number\n                        if arr[arr.index(number)] < number:\n                            # if it is going to be negative\n                            number = -number\n                    # if it is going to be positive\n                    if arr[arr.index(number)] > number:\n                        # if it is going to be positive\n                        if number > 0:\n                            # if it is going to be positive\n                            if number > arr[arr.index(number)-1]:\n                                # if it is going to be positive\n                                number = number - arr[arr.index(number)-1]\n                            # if it is going to be negative\n                            elif number < arr[arr.index(number)+1]:\n                                # if it is going to be negative\n                                number = number + arr[arr.index(number)-1]\n                            # if it is going to be zero\n                            else:\n                                # if it is going to be zero\n                                number = 0\n        # if this number is equal to 0, we just flip it\n        else:\n            number = 0\n        rotations += number\n    # if the array is empty\n    if rotations == 0:\n        return 0\n    # if it is not empty\n    else:\n        # if the number is positive\n        if number > 0:\n            # if it is going to be negative\n            if number > arr[arr.index(number)]:\n                # if it is going to be positive\n                if number < arr[arr.index(number)+1]:\n                    # if it is going to be negative\n                    if number < arr[arr.index(number)-1]:\n                        # if it is going to be positive\n                        if number < arr[arr.index(number)-1]:\n                            # if it is going to be positive\n                            if number > arr[arr.index(number)-1]:\n                                # if it is going to be negative\n                                if number > arr[arr.index(number)-1]:\n                                    # if it is going to be negative\n                                    if number > arr[arr.index(number)+1]:\n                                        # if it is going to be negative\n                                        if number > arr[arr.index(number)-1]:\n                                            # if it is going to be negative\n                                            if number > arr[arr.index(number)+1]:\n                                                # if it is going to be negative\n                                                if number > arr[arr.index(number)+2]:\n                                                    # if it is going to be negative\n                                                    if number < arr[arr.index(number)+1]:\n                                                        # if it is going to be negative\n                                                        if number > arr[arr.index(number)+2]:\n                                                            # if it is going to be negative\n                                                            if number < arr[arr.index(number)+2]:\n                                                                # if it is going to be negative\n                                                                if number < arr[arr.index(number)+2]:\n                                                                    # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                                                        # if it is going to be negative\n                                                                    if number < arr[arr.index(number)+2]:\n                                "
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count_rot = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count_rot += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return count_rot\n        \n    \ndef count_sort(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    count_rot = 0\n    #print(arr)\n    for i in range(n):\n        #print(arr[i])\n        if arr[i] > arr[i+1]:\n            count_rot += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return count_rot\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    rotation_count = 0\n    for j in range(1, len(arr)):\n        current_number = arr[j]\n        i = j - 1\n        while (i >= 0 and arr[i] > current_number):\n            arr[i+1] = arr[i]\n            i -= 1\n        arr[i+1] = current_number\n        rotation_count += 1\n    return rotation_count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]==arr[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    for i in range(0,n) :\n        if (n%2 == 1) :\n            if (n == int((n+1)/2)) :\n                return True\n            elif (n == int((n-1)/2)) :\n                return True\n            else :\n                return False\n        else :\n            if (n == int((n+1)/2)) :\n                return True\n            elif (n == int((n-1)/2)) :\n                return True\n            else :\n                return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    a = n\n    if a <= 1 :\n        return False\n    for i in range (2,a//2+1) :\n        if a%i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        if n == 3 or n == 5:\n            return True\n        else:\n            return False\n    if n % 2!= 0:\n        return False\n    if n == 3 or n == 5:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<=2:\n        if n == int(n):\n            return True\n        else:\n            return False\n    if n%2 == 0 :\n        return False\n    else:\n        if int(n/2) == int(n**0.5) and n%2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # your code here\n    if(n==0):\n        return True\n    if(n==1):\n        return True\n    if(n%2==0):\n        if(n**0.5==n):\n            return True\n        return False\n    if(n%2==1):\n        if(n**0.5==n+1):\n            return True\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    elif n == 2 :\n        return n!= 1 and n % 2 == 0\n    else :\n        return not (n % 2 == 0)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n == 1) : return True\n    if(n == 2) : return True if n!= 3 and n!= 5 and n!= 7 and n!= 11 and n!= 13 and n!= 17 and n!= 19 else False\n    sq = [1, 2, 4, 8, 16, 32, 64, 128, 256]\n    for i in sq :\n        if (n % i == 0) :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    is_perfect_square = True\n    # if n is perfect square\n    if n % 2 == 0:\n        is_perfect_square = False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return False\n    \n    product = arr[0] * arr[1]\n    check = product\n    \n    for i in range(2, len(arr)):\n        check = check * arr[i]\n    \n    if check % 2 == 0:\n        return True\n    return False\n    \narr = [5, 6, 7, 8, 9, 10]\nprint(is_product_even(arr))"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum_of_even = 0\n    for number in arr:\n        sum_of_even += number\n    return sum_of_even % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = sum(arr)\n    if total % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(x % 2 == 0 for x in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(arr[i] % arr[j] == 0):\n                return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr==[]:\n        return 0\n    sum=0\n    for i in arr:\n        sum+=i\n    if sum%2==0:\n        return True\n    else:\n        return False\narr=[1,2,3,4,5,6]\nprint(is_product_even(arr)"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for item in arr:\n        if item%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Corner cases\n    if len(arr) < 2: \n        return False\n    if len(arr) == 2 and arr[0] == arr[1]: \n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) <= 1:\n        return arr == []\n    if arr[0] == arr[1] and is_product_even(arr[2:]) == False:\n        return False\n    if arr[0] == arr[1] and is_product_even(arr[2:]) == True:\n        return False\n    if arr[0]!= arr[1] and is_product_even(arr[2:]) == True:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if (len(arr) <= 1):\n        return arr == arr\n    elif (arr[0] % 2 == 0):\n        return is_product_even(arr[1:])\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list = []\n    for i in range(len(lists)):\n        sum_list.append([0 for i in range(len(lists[i]))])\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sum_list[i][j] = lists[i][j] + max_sum_list(lists[i+1:])\n    return sum_list\n    \ndef min_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the lowest.\n    '''\n    sum_list = []\n    for i in range(len(lists)):\n        sum_list.append([0 for i in range(len(lists[i]))])\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sum_list[i][j] = lists[i][j] + min_sum_list(lists[i+1:])\n    return sum_list\n    \ndef main():\n    #create an array and make the list to be tested\n    numbers = [[5,8,9],[7,6,4],[3,6,8],[8,3,1]]\n    \n    #do the test on the main array\n    print(max_sum_list(numbers))\n    print(min_sum_list(numbers))\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    sums = []\n    \n    for i in lists:\n        sum = 0\n        for j in i:\n            sum += j\n        sums.append(sum)\n        \n    highest_sum = max(sums)\n    \n    #for i in lists:\n        #if sum(i) == highest_sum:\n            #print(i)\n    \n    return highest_sum\n        \nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(max_sum_list(lists)"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_list = []\n    sum_of_elements = 0\n    for lst in lists:\n        for elem in lst:\n            sum_of_elements += elem\n            if sum_of_elements > highest_list[-1]:\n                highest_list.append(elem)\n    highest_list.append(sum_of_elements)\n    return highest_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for i in lists:\n        for j in i:\n            max_sum_list.append(j)\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in lists:\n        for j in i:\n            if j > 0:\n                max_sum.append(j)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            temp = lists[i]+lists[j]\n            if(temp>max_list[0]):\n                max_list = [lists[i],lists[j]]\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = []\n    highest_list = []\n    for list in lists:\n        num = 0\n        for value in list:\n            num += value\n        if num > highest:\n            highest = num\n            highest_list = list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = list()\n    for a in lists:\n        s = 0\n        for b in a:\n            s += b\n            if s > max_sum[0]:\n                max_sum = [s, a]\n    return max_sum\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upp_count = 0\n    for c in test_str:\n        if c.isupper():\n            upp_count += 1\n    return upp_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            result += 1\n    return result\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_upp = 0\n    max_run_low = 0\n    max_run_low_value = 0\n    max_run_upp_value = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] == test_str[i].upper():\n                if test_str[i] > max_run_upp:\n                    max_run_upp = test_str[i]\n                    max_run_upp_value = i\n            elif test_str[i].islower():\n                if test_str[i] > max_run_low:\n                    max_run_low = test_str[i]\n                    max_run_low_value = i\n    return max_run_upp_value, max_run_low_value\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] > max:\n                max = test_str[i]\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def get_unique_characters(string):\n        '''\n        Return a set of all the unique characters in the given string.\n        '''\n        return set(string)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_upper = 0\n    for char in test_str:\n        if char.isupper():\n            if max_run_upper < char.upper():\n                max_run_upper = char.upper()\n    return max_run_upper\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_lower = 0\n    max_run_upper = 0\n    for i in test_str:\n        if i.isupper():\n            if max_run_lower <= i.lower():\n                max_run_lower = i.lower()\n            else:\n                max_run_lower = i.lower()\n                \n        elif i.islower():\n            if max_run_upper <= i.upper():\n                max_run_upper = i.upper()\n            else:\n                max_run_upper = i.upper()\n    return max_run_lower, max_run_upper\n    \ntest_str = input(\"Please enter a string: \")\nprint(max_run_uppercase(test_str))"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if max_run < i:\n                max_run = i\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(map(lambda x: 0 if x =='' or x == '-' or x == '?' else x.upper(), test_str.upper()))\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase = []\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run_uppercase.append(test_str[i])\n    return max(max_run_uppercase)\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    print(nums[0])\n    print(len(nums))\n    if len(nums) < 2:\n        return False\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    even_nums = []\n    odd_nums = []\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    num_list = []\n    for i in nums:\n        num_list.append(i)\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if nums[mid] % 2!= 0:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odds = []\n    if len(nums) % 2 == 0:\n        for i in range(len(nums)):\n            odds.append(nums[i])\n        \n        return odds[::-1][0]\n    else:\n        return -1\n    \nnums = [1,2,3,4,5]\nprint(first_odd(nums))"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # nums = [1, 2, 3, 4, 5]\n    for num in nums:\n        if num%2 == 1:\n            return num\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2)!= 0:\n            return nums[i]\n    return 0\n    "
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    # If list is empty or one element, return -1\n    if len(nums) == 0 or len(nums) == 1:\n        return -1\n    \n    # Get the first element\n    first = nums[0]\n    \n    # Check if the first element is odd\n    if first % 2 == 0:\n        return first\n    \n    # Get the rest of the list\n    new_list = nums[1:]\n    \n    # Compare each element with the first element\n    for i in range(len(new_list)):\n        if first % 2!= new_list[i]:\n            return first\n    \n    return first\n    "
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup_list = [tuple(x) for x in test_tup]\n    test_tup_list.sort()\n    for i in range(0, len(test_tup_list), K):\n        if test_tup_list[i:i+K] == test_tup_list[i:i+K][::-1]:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) <= K:\n        return True\n    elif len(test_tup) > K:\n        return False\n    elif test_tup[0][0] == test_tup[1][0]:\n        return check_K(test_tup[1:], K)\n    elif test_tup[0][0] == test_tup[-1][0]:\n        return check_K(test_tup[:-1], K)\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    K=check_K_in(K, test_tup)\n    if K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #check if the tuple has the k\n    k = K[-1]\n    if test_tup[0] == k:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #declare variables\n    test_tup = tuple(test_tup)\n    K = int(K)\n    print('K: ',K)\n    #check if the tuples contain the given k or not\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if (len(test_tup) > K):\n        return False\n    if (len(test_tup) < K):\n        return False\n    for i in range(K):\n        if (test_tup[i][0]!= test_tup[i][1]):\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    result = True\n    for i in range(len(test_tup)):\n        if test_tup[i][0] >= K:\n            result = False\n    return result\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i[K] == 1:\n            count += 1\n    if count == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_tup = []\n    for index, element in enumerate(test_tup):\n        if K < element:\n            check_tup.append(index)\n        elif K > element:\n            check_tup.append(index)\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup_list = list(test_tup)\n    for x in tup_list:\n        if x in K:\n            return True\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for t in test_tup2:\n        if t < test_tup1[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            result = False\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Use List Comprehension\n    test_tup3 = []\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            test_tup3.append(test_tup2[i])\n    return test_tup3\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if both elements in the tuple are less than the element in the first tuple\n    if test_tup1[0] < test_tup2[0]:\n        return False\n    elif test_tup1[1] < test_tup2[1]:\n        return False\n    # Check if both elements in the tuple are the same value\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] == test_tup2[1]:\n            return False\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller_tuple = False\n    \n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            smaller_tuple = True\n    \n    return smaller_tuple\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup2) == len(test_tup1) and type(test_tup2[0]) == type(test_tup1[0]):\n        for i in range(len(test_tup2)):\n            if test_tup2[i] > test_tup1[i]:\n                return False\n        return True\n    return False\n"
    }
]