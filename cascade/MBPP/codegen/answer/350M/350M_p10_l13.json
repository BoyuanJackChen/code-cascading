[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #TODO: Implement this function\n    l = list(test_tup1)\n    l.extend(test_tup2)\n    return l\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # your code here\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Tup1 and Tup2 must have the same length.'\n    assert set(test_tup1).issubset(set(test_tup2)), 'Tup1 and Tup2 must be a subset of each other.'\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = []\n    l2 = []\n    l3 = []\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # NOTE: use set for the element set\n    shared_elements = set()\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    dict1 = {}\n    for i in test_tup1:\n        if i in test_tup2:\n            dict1[i] = 1\n    return dict1\n    \ndef find_elements_unique(test_tup1, test_tup2):\n    '''\n    Write a function to find the elements in both lists that are unique.\n    '''\n    dict1 = {}\n    for i in test_tup1:\n        if i in test_tup2:\n            dict1[i] = 1\n    return dict1\n    \ndef compare_elements(test_tup1, test_tup2):\n    '''\n    Write a function to compare two lists, each of whose elements\n    are lists, and print out a message if they are the same.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Lists must have the same size\"\n    for i in test_tup1:\n        if i not in test_tup2:\n            return i + \" not in list\"\n    return True\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    s1=set(test_tup1)\n    s2=set(test_tup2)\n    s_shared=s1.intersection(s2)\n    return list(s_shared)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    num_elements = len(test_tup1)\n    temp_list1 = []\n    for i in range(0, num_elements):\n        temp_list1.append(test_tup1[i])\n    \n    num_elements = len(test_tup2)\n    temp_list2 = []\n    for i in range(0, num_elements):\n        temp_list2.append(test_tup2[i])\n    \n    shared_list = []\n    for i in range(0, num_elements):\n        if (temp_list1[i] in temp_list2):\n            shared_list.append(temp_list1[i])\n        \n    return shared_list\n    \n    \n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_lst = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            test_lst.append(test_tup1[i])\n        else:\n            test_lst.append(test_tup2[i])\n    return test_lst\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(test_tup2)\n    \n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, n):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, n):\n        if n%i==0:\n            return False\n    return True\ndef num_consecutive(n):\n    '''\n    Write a python function to count consecutive numbers in a sequence.\n    '''\n    for i in range(0, n):\n        if n%i==0:\n            if i==0:\n                return i+1\n            elif n%i==0:\n                return n+1\ndef count_primes(n):\n    '''\n    Write a python function to count primes.\n    '''\n    for i in range(2, n):\n        if is_prime(i):\n            if i==2:\n                return 2\n            else:\n                if is_prime(i+1):\n                    return 3\n                else:\n                    continue\ndef is_pentagram(n):\n    '''\n    Write a python function to determine whether a number is pentagram or not.\n    '''\n    return n%5==0\ndef is_octagram(n):\n    '''\n    Write a python function to determine whether a number is octagram or not.\n    '''\n    return (n%5)%2==0\ndef is_hexagon(n):\n    '''\n    Write a python function to determine whether a number is hexagon or not.\n    '''\n    return n%5==0\ndef is_square(n):\n    '''\n    Write a python function to determine whether a number is square or not.\n    '''\n    return n%5==0\ndef is_square_or_pentagram(n):\n    '''\n    Write a python function to determine whether a number is square or pentagram or not.\n    '''\n    return (n%5)%2==0\ndef is_square_or_octagon(n):\n    '''\n    Write a python function to determine whether a number is square or octagon or not.\n    '''\n    return (n%5)%2==0\ndef is_square_or_hexagon(n):\n    '''\n    Write a python function to determine whether a number is square or hexagon or not.\n    '''\n    return (n%5)%2==0\ndef is_all_prime(n):\n    '''\n    Write a python function to determine whether a number is all prime or not.\n    '''\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_with_sqrt(n):\n    '''\n    Write a python function to determine whether a number is a prime or not.\n    '''\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef find_smallest_square(n):\n    '''\n    Write a python function to find the smallest square.\n    '''\n    if n<2:\n        return n+1\n    if n<6:\n        return 6\n    if n<12:\n        return 12\n    if n<18:\n        return 18\n    if n<28:\n        return 28\n    if n<36:\n        return 36\n    if n<48:\n        return 48\n    if n<80:\n        return 80\n    if n<96:\n        return 96\n    if n<128:\n        return 128\n    if n<256:\n        return 256\n    if n<512:\n        return 512\n    if n<1024:\n        return 1024\n    if n<2048:\n        return 2048\n    if n<4096:\n        return 4096\n    if n<8192:\n        return 8192\n    if n<32768:\n        return 32768\n    if n<65536:\n        return 65536\n    if n<131072:\n        return 131072\n    if n<262144:\n        return 262144\n    if n<524288:\n        return 524288\n    if n<1048576:\n        return 1048576\n    if n<2097152:\n        return 2097152\n    if n<4097152:\n        return 4097152\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608:\n        return 8388608\n    if n<17777216:\n        return 17777216\n    if n<327675:\n        return 327675\n    if n<4095264:\n        return 4095264\n    if n<8388608"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 0:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_finder(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if is_prime(n):\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef get_count(n):\n    '''\n    Write a python function to get the count of given number.\n    '''\n    c = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            c += 1\n    return c\ndef multiply(x, y):\n    '''\n    Write a python function to multiply two integers.\n    '''\n    return x * y\ndef add(x, y):\n    '''\n    Write a python function to add two integers.\n    '''\n    return x + y\ndef get_all_factors(n):\n    '''\n    Write a python function to get all factors of a number.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        res = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                res.append(i)\n        res.append(n)\n        return res\ndef is_prime_2(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef get_factors(n):\n    '''\n    Write a python function to get all factors of a number.\n    '''\n    return get_all_factors(n)\ndef check_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_2_prime(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_2_prime_2(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef get_all_primes(n):\n    '''\n    Write a python function to get all primes from 1 to a given number.\n    '''\n    return [i for i in range(1, n + 1) if is_prime(i)]\ndef is_prime_prime(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_prime_2(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_prime_2_prime(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_2_2_prime(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef get_factors_2_prime(n):\n    '''\n    Write a python function to get all factors of a number.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    return get_factors_2_prime(n//3) + get_factors_2_prime(n//3+2) + get_factors_2_prime(n//3+4)\ndef is_prime_2_2(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_prime_2(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_2_2_2(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n    "
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        if n == 2:\n            return 0\n        elif n % 2 == 0:\n            return 2\n        else:\n            return 3\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return n\n    elif n % 2 == 0:\n        return is_not_prime(n-1)\n    else:\n        return is_not_prime(3*n+1)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Find the square root of n.\n    # Sqrt(n) = 1.5(n ^ 0.5)\n    # A non-prime number is one which is divisible by both the\n    # two smallest primes.\n    #\n    # We know that the lowest number is n = n/2.\n    #\n    # We can calculate this and say,\n    #\n    # sqrt(n) - 1 = n/2.\n    #\n    # Thus, n / 2 = n/2 - 1 = n - 1.\n    #\n    # We know that n!= 2n - 1.\n    #\n    # n!= n / 2.\n    #\n    # In fact, if n is odd, it is not prime.\n    #\n    #\n    #\n    #\n    #\n    #\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i**2 <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(3, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        return -1\n    if n==1:\n        return nums[0]\n    hq = []\n    hq.append([])\n    heapq.heapify(hq)\n    for i in range(n):\n        heapq.heappush(hq,[-nums[i],nums[i]])\n    result=[]\n    while len(hq)>0:\n        a = heapq.heappop(hq)\n        result.append(-a[1])\n        if len(hq)>0:\n            heapq.heappush(hq,[-hq[0][0],hq[0][1]])\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    for i in range(n):\n        result.append(nums[i])\n        \n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    def heapify_down(arr, n, i):\n        if i >= n:\n            return\n        l = 2 * i + 1\n        r = 2 * i + 2\n        # Recur down through left and right sub-heap\n        if l < n and arr[l] > arr[i]:\n            return heapify_down(arr, n, l)\n        if r < n and arr[r] > arr[i]:\n            return heapify_down(arr, n, r)\n        \n        # Largest Element\n        if arr[i] > arr[l] and arr[i] > arr[r]:\n            arr[i], arr[l] = arr[l], arr[i]\n            return arr\n        \n        return arr\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    heap = []\n    for num in nums:\n        if not heap or num > heap[-1]:\n            heapq.heappush(heap,-num)\n        else:\n            heapq.heappushpop(heap,-num)\n    return -heap[0] if not heap or nums[0] > heap[-1] else heap[0]\ndef heap_queue_largest_all(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    ans = []\n    for num in nums:\n        if not ans or num > ans[-1]:\n            ans.append(-num)\n        else:\n            ans.append(-num)\n            heapq.heapreplace(ans,-num)\n    return ans[0] if not ans or nums[0] > ans[-1] else ans[0]\ndef heap_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using heap sort.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef heap_max(nums):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if not heap or num > heap[-1]:\n            heapq.heappush(heap,-num)\n        else:\n            heapq.heappushpop(heap,-num)\n    return -heap[0] if not heap or nums[0] > heap[-1] else heap[0]\ndef heap_max_all(nums):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    ans = []\n    for num in nums:\n        if not ans or num > ans[-1]:\n            ans.append(-num)\n        else:\n            ans.append(-num)\n            heapq.heapreplace(ans,-num)\n    return ans[0] if not ans or nums[0] > ans[-1] else ans[0]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # if we have a tie, return n largest numbers\n    if len(nums)==n:\n        return nums\n    # else, pop a random number from the list\n    pop_index=hq.heappop(nums)\n    # find the smallest\n    smallest_index=hq.heappop(nums)\n    # push it back\n    hq.heappush(nums,pop_index)\n    # if it's not the smallest, push it back\n    while smallest_index!=pop_index:\n        hq.heappush(nums,hq.heappop(nums)+smallest_index)\n        smallest_index=hq.heappop(nums)\n    # return the top most number\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = [int(i) for i in str(nums)]\n    nums.sort(reverse=True)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    queue = []\n    hq.heapify(queue)\n    for i in range(n):\n        heapq.heappush(queue,nums[i])\n        nums[i] = -nums[i]\n    return [i for i in queue]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for num in nums:\n        heapq.heappush(heap,num)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(0,n):\n        h.append(nums[i])\n    hq.heapify(h)\n    for i in range(n-1, 0, -1):\n        hq.heapreplace(h,hq.heappop(h))\n    return h\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    if x < 0: \n        return False\n    if x > 0: \n        if x % 2 == 0: \n            return True\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x == 0):\n        return True\n    elif (x == 1):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x > 0):\n        return False\n    elif (x < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return -1\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    temp = x\n    if x==0:\n        return False\n    elif x%2==0:\n        if temp%2==0:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & 1) == 1:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_or_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position or not.\n    '''\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_and_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not.\n    '''\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_or_Not_and_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not and not.\n    '''\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_and_Not_and_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not and not.\n    '''\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_and_Not_and_Not_and_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not and not and not.\n    '''\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_and_Not_and_Not_and_Not_and_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not and not and not and not.\n    '''\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_and_Not_and_Not_and_Not_and_Not_and_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not and not and not and not and not.\n    '''\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not and not and not and not and not and not.\n    '''\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not and not and not and not and not and not and not.\n    '''\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and not and\ndef is_Power_Of_Two_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_and_Not_an"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # your code here\n    if x>=10 or x<=0:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Base case\n    if x == 0:\n        return True\n    #recursive case\n    elif x < 0:\n        return False\n    elif x % 2 == 0:\n        return is_Power_Of_Two(x//2)\n    elif x % 2 == 1:\n        return is_Power_Of_Two(x//2+1)\n    else:\n        return False\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    long = []\n    pattern = re.compile(r'(\\w)(\\w+)(\\w+)')\n    result = pattern.findall(text)\n    for word in result:\n        if len(word[2]) >= 4:\n            long.append(word)\n    return(long)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    #search for each char\n    for word in text.split():\n        #find the count of each char\n        char_count = 0\n        for char in word:\n            if char.isalpha():\n                char_count += 1\n        #if count is greater than 3, add it to the long list\n        if char_count > 3:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #text = 'A short text to test.'\n    long_pattern = re.compile('[a-zA-Z0-9]+')\n    words = long_pattern.findall(text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_list = []\n    \n    for word in text:\n        \n        if len(word) >= 4:\n            char_list.append(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for char in text:\n        if len(char) >= 4:\n            result.append(char)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 4:\n            char_list.append(word)\n    return char_list\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters in a string.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 2:\n            char_list.append(word)\n    return char_list\ndef find_char_short_diff(text):\n    '''\n    Write a function to find all words which are at least 2 characters and differ in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 2:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            char_list.append(word)\n    return char_list\ndef find_short_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters in a string.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            char_list.append(word)\n    return char_list\ndef find_long_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length and difference in length and difference in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length and difference in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length and difference in length by the maximum allowed difference between two characters.\n    '''\n    char_list = []\n    for word in text.split():\n        if len(word) >= 3:\n            if len(word) < len(word[1:-1]) + 1:\n                char_list.append(word)\n    return char_list\ndef find_long_diff_diff_diff_diff_diff(text):\n    '''\n    Write a function to find all words which are at least 3 characters and different in length and difference in length and difference in length by the maximu"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = \"\"\n    for i in text:\n        if len(i)>4:\n            long_text += i\n    return long_text\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_long = []\n    for c in text:\n        if len(c) > 3:\n            word_long.append(c)\n    return word_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    pattern = re.compile(\"[^a-zA-Z0-9_\\s]\")\n    all_characters = pattern.findall(text)\n    char_count = 0\n    for letter in all_characters:\n        if len(letter) < 4:\n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    r = re.compile(r\"\\w{4,}\")\n    return r.findall(text)\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    r = re.compile(r\"\\W{1,}\")\n    return r.findall(text)\ndef find_char_middle(text):\n    '''\n    Write a function to find all words which are at least 4 characters middle in a string.\n    '''\n    r = re.compile(r\"\\W{3,}\")\n    return r.findall(text)\ndef find_char_long_middle(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and middle in a string.\n    '''\n    r = re.compile(r\"\\W{3,}\")\n    return r.findall(text)\ndef find_char_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and middle in a string.\n    '''\n    r = re.compile(r\"\\W{2,}\")\n    return r.findall(text)\ndef find_char_short_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters short and long in a string.\n    '''\n    r = re.compile(r\"\\W{4,}\")\n    return r.findall(text)\ndef find_char_long_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long in a string.\n    '''\n    r = re.compile(r\"\\W{2,}\")\n    return r.findall(text)\ndef find_char_long_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and short in a string.\n    '''\n    r = re.compile(r\"\\W{1,}\")\n    return r.findall(text)\ndef find_char_long_long_middle(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and middle in a string.\n    '''\n    r = re.compile(r\"\\W{3,}\")\n    return r.findall(text)\ndef find_char_middle_long_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and middle and long in a string.\n    '''\n    r = re.compile(r\"\\W{2,}\")\n    return r.findall(text)\ndef find_char_long_short_long_middle(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and short and long and middle in a string.\n    '''\n    r = re.compile(r\"\\W{4,}\")\n    return r.findall(text)\ndef find_char_middle_long_short_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and middle and long and short in a string.\n    '''\n    r = re.compile(r\"\\W{2,}\")\n    return r.findall(text)\ndef find_char_long_long_short_middle(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and short and middle in a string.\n    '''\n    r = re.compile(r\"\\W{3,}\")\n    return r.findall(text)\ndef find_char_long_long_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and middle and long and long in a string.\n    '''\n    r = re.compile(r\"\\W{4,}\")\n    return r.findall(text)\ndef find_char_short_long_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and short and long and middle and long in a string.\n    '''\n    r = re.compile(r\"\\W{1,}\")\n    return r.findall(text)\ndef find_char_long_long_short_middle(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and long and short in a string.\n    '''\n    r = re.compile(r\"\\W{2,}\")\n    return r.findall(text)\ndef find_char_long_long_short_middle(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and long and short in a string.\n    '''\n    r = re.compile(r\"\\W{3,}\")\n    return r.findall(text)\ndef find_char_long_short_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and long and short in a string.\n    '''\n    r = re.compile(r\"\\W{4,}\")\n    return r.findall(text)\ndef find_char_long_short_middle_long_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and short and long and short in a string.\n    '''\n    r = re.compile(r\"\\W{1,}\")\n    return r.findall(text)\ndef find_char_short_long_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and short and long and middle and long in a string.\n    '''\n    r = re.compile(r\"\\W{3,}\")\n    return r.findall(text)\ndef find_char_long_long_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and short in a string.\n    '''\n    r = re.compile(r\"\\W{2,}\")\n    return r.findall(text)\ndef find_char_long_long_short_middle(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and short and middle in a string.\n    '''\n    r = re.compile(r\"\\W{3,}\")\n    return r.findall(text)\ndef find_char_long_short_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and short and long and middle in a string.\n    '''\n    r = re.compile(r\"\\W{4,}\")\n    return r.findall(text)\ndef find_char_long_short_long_middle(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and short and long and long and middle in a string.\n    '''\n    r = re.compile(r\"\\W{1,}\")\n    return r.findall(text)\ndef find_char_long_short_long_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and short and long and long and long and long and long in a string.\n    '''\n    r = re.compile(r\"\\W{4,}\")\n    return r.findall(text)\ndef find_char_long_long_short_long_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and long and long and long and long and long and long and long in a string.\n    '''\n    r = re.compile(r\"\\W{1,}\")\n    return r.findall(text)\ndef find_char_long_long_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and long and long and long in a string.\n    '''\n    r = re.compile(r\"\\W{3,}\")\n    return r.findall"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Your code here\n    \n    return [n**2 for n in nums]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #Use a for loop to take all of the numbers\n    #and add them together and then return them\n    \n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num**2)\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num ** 2\n        squares.append(square)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    def square_nums_rec(nums, start=0):\n        if start == len(nums):\n            return []\n        if start == len(nums):\n            return [nums[start]]\n        return [nums[start]**2 for i in range(start, len(nums))] + square_nums_rec(nums, start+1)\n    return square_nums_rec(nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) % 2 == 0: # If string is even length\n        minRot = 0 # Set minRot to 0\n        maxRot = 0 # Set maxRot to 0\n        for i in range(0,len(str),2): # Loop through the string to find the min and max rotations\n            if str[i]!= str[i+1]: # Check each character in the string to see if it's not the same as the other\n                if str[i+1] > str[i]: # If the char is greater than the next char of the other\n                    if str[i+1] == str[i]: # If it's the same as the next char of the other\n                        maxRot += 1 # Increase the maxRot with 1\n                    elif str[i+1] > str[i]: # If it's not the same as the next char of the other\n                        minRot += 1 # Increase minRot with 1\n                    else: # If it's not the same as the next char of the other\n                        minRot = 0 # If it's the same as the next char of the other, we don't need to increase minRot\n                        maxRot = 0 # If it's not the same as the next char of the other, we don't need to increase maxRot\n                else: # If the char is not greater than the next char of the other\n                    minRot += 1 # Increase minRot with 1\n                    maxRot = 0 # If it's not the same as the next char of the other, we don't need to increase maxRot\n            else: # If the char is not greater than the next char of the other\n                minRot += 1 # Increase minRot with 1\n                maxRot = 0 # If it's not the same as the next char of the other, we don't need to increase maxRot\n        return minRot + maxRot # Return minRot + maxRot\n    else: # If the string is odd length\n        minRot = 0 # Set minRot to 0\n        maxRot = 0 # Set maxRot to 0\n        for i in range(0,len(str),2): # Loop through the string to find the min and max rotations\n            if str[i]!= str[i+1]: # Check each character in the string to see if it's not the same as the other\n                if str[i+1] > str[i]: # If the char is greater than the next char of the other\n                    if str[i+1] == str[i]: # If it's the same as the next char of the other\n                        maxRot += 1 # Increase maxRot with 1\n                    elif str[i+1] > str[i]: # If it's not the same as the next char of the other\n                        minRot += 1 # Increase minRot with 1\n                    else: # If it's not the same as the next char of the other\n                        minRot = 0 # If it's the same as the next char of the other, we don't need to increase minRot\n                        maxRot = 0 # If it's not the same as the next char of the other, we don't need to increase maxRot\n                else: # If the char is not greater than the next char of the other\n                    minRot += 1 # Increase minRot with 1\n                    maxRot = 0 # If it's not the same as the next char of the other, we don't need to increase maxRot\n            else: # If the char is not greater than the next char of the other\n                minRot += 1 # Increase minRot with 1\n                maxRot = 0 # If it's not the same as the next char of the other, we don't need to increase maxRot\n        return minRot + maxRot # Return minRot + maxRot\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"R\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_Smallest_Rotations(str): \n    '''\n    Write a python function to find the smallest number of rotations required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the smallest number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the smallest number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the smallest number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the smallest number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the smallest number of rotations required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"S\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_N_smallest_Rotations(str): \n    '''\n    Write a python function to find the n-smallest number of rotations required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the n-smallest number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the n-smallest number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the n-smallest number of rotations required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"N\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_All_n_Smallest_Rotations(str): \n    '''\n    Write a python function to find the all n-smallest number of rotations required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the all n-smallest number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the all n-smallest number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the all n-smallest number of rotations required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"A\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_Rotation_in_Least_Rotations(str): \n    '''\n    Write a python function to find the rotation in least number of rotations required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the rotation in least number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the rotation in least number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the rotation in least number of rotations required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"R\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_All_Rotation_in_Least_Rotations(str): \n    '''\n    Write a python function to find the all rotation in least number of rotations required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the all rotation in least number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the all rotation in least number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the all rotation in least number of rotations required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"R\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_Last_Least_Rotation(str): \n    '''\n    Write a python function to find the least rotation in the least number of rotations required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the least rotation in the least number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the least rotation in the least number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the least rotation in the least number of rotations required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"L\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_Rotations_in_Least_Rotations(str): \n    '''\n    Write a python function to find the rotations in least number of rotations required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the rotations in least number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the rotations in least number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the rotations in least number of rotations required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"L\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_All_rotations_in_Least_Rotations(str): \n    '''\n    Write a python function to find the all rotations in least number of rotations required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the all rotations in least number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the all rotations in least number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the all rotations in least number of rotations required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"L\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_Rotation_in_Least_Rotation_2(str): \n    '''\n    Write a python function to find the rotation in least number of rotations required to get the same string.\n    '''\n    #raise NotImplementedError(\"Write a python function to find the rotation in least number of rotations required to get the same string.\\n\")\n    \n    #raise NotImplementedError(\"Write a python function to find the rotation in least number of rotations required to get the same string.\\n\")\n    #raise NotImplementedError(\"Write a python function to find the rotation in least number of rotations required to get the same string.\\n\")\n    \n    rotations = 0\n    for c in str:\n        if c == \"R\":\n            rotations += 1\n    \n    return rotations\n    \n    \ndef find_All_rotations_in_Least_Rotation_2(str): "
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    minRotations=0\n    if (str==\"?\"): return 0\n    for i in range(len(str)-1):\n        if (str[i]==str[i+1]): minRotations=minRotations+1\n    return minRotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    a = str.count(\"U\")\n    b = str.count(\"R\")\n    c = str.count(\"D\")\n    d = str.count(\"L\")\n    if a > b:\n        if a > c:\n            if a > d:\n                return a\n        if c > d:\n            if c > a:\n                return c\n        if d > a:\n            if d > b:\n                return d\n    if b > c:\n        if b > d:\n            if b > a:\n                return b\n        if d > a:\n            if d > b:\n                return d\n    if c > d:\n        if c > a:\n            if c > b:\n                return c\n        if a > b:\n            if a > c:\n                return a\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    rotations_min = 0\n    for i in range(0,len(str)-1):\n        if str[i] == str[i+1]:\n            continue\n        elif str[i] == str[i+1]:\n            continue\n        else:\n            rotations += 1\n    rotations_min = rotations\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            continue\n        elif str[i] == str[i+1]:\n            continue\n        else:\n            rotations += 1\n    rotations_min = rotations\n    return rotations_min\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    rotations = 0\n    if l < 3:\n        return rotations\n    l = 3\n    while l < len(str):\n        rotations += 1\n        rot = str[l - 3 : l]\n        if rot!= str[l - 1]:\n            l += 1\n        else:\n            break\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotation_count = 0\n    for i in range(0, len(str)):\n        if(str[i]!= str[i-1]):\n            if(str[i] == str[i-1]):\n                rotation_count += 1\n            else:\n                rotation_count += 1\n                print(rotation_count)\n                rotation_count = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    count1 = 0\n    count2 = 0\n    for i in range(0, len(str)):\n        if (str[i] == str[i - 1] and i == len(str) - 2):\n            count += 1\n            count1 += 1\n        elif(str[i] == str[i - 1] and i < len(str) - 2):\n            count += 1\n            count1 += 1\n        elif(str[i] == str[i - 1] and i > 0):\n            count += 1\n            count1 += 1\n    return count, count1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0 \n    for i in range(len(str)):\n        if str[i] == str[i-1]:\n            count += 1\n    if count < 0:\n        return count\n    return 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    s = \"\"\n    for i in range(len(str)):\n        s = str[i] + s\n    if len(s) > len(str) :\n        return 0\n    else :\n        str_list = list(str)\n        for i in range(len(str)):\n            for j in range(i, len(str)):\n                if i!= j and s[i] == s[j]:\n                    rotations += 1\n        return rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    index = s.index(ch)\n    s[index] =''\n    return ''.join(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    # if the character is not present in string\n    if ch not in s:\n        return 0\n    \n    # if the character is present in string\n    elif ch not in s[:len(s)-1]:\n        return 0\n    \n    # if it is present in string\n    else:\n        return 1\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,' ')\n    s=s.split()\n    return \" \".join(s[0:-1])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    for j in range(len(s)):\n        if ch == s[j]:\n            i = j\n            break\n        \n    if len(s) == i + 1: \n        return None\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = 0\n    j = s.find(ch)\n    s = s[:j] + s[j + 1:]\n    occ = len(s) - len(s[:j] + s[j + 1:])\n    return s,occ\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0]==s[-1]: \n        return s\n    \n    else: \n        s.remove(s[0]) \n        s.remove(s[-1]) \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if(s[-1]!=ch): \n        s=s[:-1]+s[-1]\n    if(s[0]!=ch): \n        s=s[1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    str1=''\n    for i in range(len(s)-1):\n        if(ch == s[i]):\n            if(str1.find(s[i])==-1):\n                str1=str1+s[i]\n            else:\n                str1=str1+s[i]+s[i+1]\n        else:\n            str1=str1+s[i]\n    return str1\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch =='':\n        return s.lstrip()\n    elif ch == '+' or ch == '-':\n        return s.rstrip()\n    elif ch == '*' or ch == '+.' or ch == '*.':\n        return s.strip(ch)\n    else:\n        raise ValueError('Invalid Character')\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l=len(M)\n    #For loop to keep the row number\n    for i in range(0,l):\n        #For loop to keep the sum of rows\n        for j in range(0,l-i-1):\n            if M[j][i]>M[j][i+1]:\n                #change the temp[i][j] with the largest sum\n                M[j][i],M[j][i+1]=M[j][i+1],M[j][i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i, len(M)):\n            if M[i][j] < 0:\n                M[i], M[j] = M[j], M[i]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    i = 0\n    j = 0\n    while i < len(M) - 1:\n        if M[i][j] > M[i+1][j]:\n            M[i], M[i+1] = M[i+1], M[i]\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = [M[i][0] for i in range(len(M))]\n    rows.sort()\n    M = [[M[i][j] for i in range(len(M))] for j in range(len(M[0]))]\n    for i in range(len(M)):\n        M[i][0] = rows[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    s = 0\n    for i in range(0,rows):\n        s += M[i][0]\n    j = 0\n    for i in range(0,rows):\n        if M[i][0] >= s:\n            s -= M[i][0]\n            M[i][0] = 0\n            j += 1\n    return j\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if M[i][j] > M[i][0]:\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for row in M:\n        for e in row:\n            if e == 0:\n                continue\n            else:\n                e = e + row[0]\n                row[0] = e\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    M.sort()\n    M.sort(lambda a, b: a+b)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows_arr = []\n    cols_arr = []\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N):\n        for j in range(i, N):\n            if M[i][j] > M[i][i]:\n                M[i], M[j] = M[j], M[i]\n    return M\n    \ndef solve_puzzle(M, row, col, n):\n    '''\n    Write a function to solve the given matrix in the given row and column. The input format is the same as the one for the solve_sudoku() function.\n    \n    The function should return the solution as a list of lists. The list should be sorted and each row of the list should be a permutation of the integers from 1 to 9.\n    '''\n    n = n\n    \n    if M[row][col]!= 0:\n        return None\n    \n    for i in range(1, 10):\n        if is_valid(M, row, col, i):\n            M[row][col] = i\n            solve_puzzle(M, row + 1, col, n)\n            if solve_puzzle(M, row + 1, col + 1, n):\n                return M\n            M[row][col] = 0\n    \n    return None\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return ((((l * h) / 2) ** 3)) * (3/8)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    c = l*b\n    h = h/2\n    q = h*c\n    return(q)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #find the length of the solid\n    l1 = (b - l) / 2 \n    l2 = l + l1\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # create the ci-diameter\n    d = float(b) - float(l)\n    # find the volume of the triangle\n    return round(d/2,2) * h \n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    # create the ci-diameter\n    d = float(b) - float(l)\n    # find the area of the triangle\n    return round(d/2,2) * h \n    \ndef find_Volume_Square(l,b,h) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    # create the ci-diameter\n    d = float(b) - float(l)\n    # find the volume of the square\n    return round(d,2) * h \n    \ndef find_Area_Square(l,b,h) : \n    '''\n    Write a python function to find the area of a square prism.\n    '''\n    # create the ci-diameter\n    d = float(b) - float(l)\n    # find the area of the square\n    return round(d,2) * h \n    \ndef find_Volume_Cube(l,b,h) : \n    '''\n    Write a python function to find the volume of a cube prism.\n    '''\n    # create the ci-diameter\n    d = float(b) - float(l)\n    # find the volume of the cube\n    return round(d/3,2) * h \n    \ndef find_Area_Cube(l,b,h) : \n    '''\n    Write a python function to find the area of a cube prism.\n    '''\n    # create the ci-diameter\n    d = float(b) - float(l)\n    # find the area of the cube\n    return round(d,2) * h \n    \ndef main() : \n    '''\n    A simple program for finding the volume of a triangle.\n    '''\n    # Define the parameters\n    l = float(input(\"Enter the length of the l-shaped triangle : \"))\n    b = float(input(\"Enter the breadth of the l-shaped triangle : \"))\n    h = float(input(\"Enter the height of the l-shaped triangle : \"))\n    print(\"The volume of the triangle is \",find_Volume(l,b,h), \"m3\")\n    print(\"The area of the triangle is \",find_Area(l,b,h), \"m^2\")\n    print(\"The volume of the square is \",find_Volume_Square(l,b,h), \"m3\")\n    print(\"The area of the square is \",find_Area_Square(l,b,h), \"m^2\")\n    print(\"The volume of the cube is \",find_Volume_Cube(l,b,h), \"m3\")\n    print(\"The area of the cube is \",find_Area_Cube(l,b,h), \"m^2\")\n    \nif __name__ == \"__main__\" : \n    main()"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (3 * l * b)/2\n    return(v)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    m = l / 2 \n    n = h / 2 \n    k = (h * h + m * m - 2 * m * m) / (2 * m)\n    V = ((m ** 3) + (n ** 3) + k ** 3) ** 0.5\n    return(V)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 1.0*((l*b*h)/2) \n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #return h**3 * b**2 * l**2 \n    return l**3 * b**2 * h**2\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lower = text.lower()\n    for i in range(len(text_lower)):\n        if text_lower[i] == '_':\n            print(i)\n            print(text_lower[i])\n            if text_lower[i - 1] not in '_!.':\n                print(text_lower[i - 1])\n                return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if type(text) == list:\n        for t in text:\n            if type(t) == str:\n                if text_lowercase_underscore(t.lower()) is True:\n                    return True\n        return False\n    else:\n        if text_lowercase_underscore(text) is True:\n            return True\n        return False\n    \ndef has_digits(num):\n    '''\n    Write a function that returns true if the input number has at least one digit, false otherwise.\n    '''\n    return len(str(num)) <= 1\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    return re.findall('[a-zA-Z0-9]', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z0-9_]*[a-z0-9_]', text.lower())!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for char in text:\n        if char.lower() == '_':\n            return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return (re.search(\"(?<=[^_].)([A-Z][a-z]{2,})(?=[A-Z])\", text) is not None)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # if input is empty or a string\n    if not text:\n        return False\n    # if input is a string with only one letter\n    if len(text) == 1:\n        if text.islower():\n            return True\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[A-Z][a-z]*_[A-Z][a-z]*', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]\\b[^_\\w]*[_]\\w*\\b'\n    if re.findall(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    '''\n    This is the function body.\n    \n    1. Find all the possible uppercase letters\n    2. Find all the possible lowercase letters\n    3. If the value is true, return true\n    4. If the value is false, return false\n    '''\n    \n    # First, find all the possible uppercase letters.\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    upper_index = upper.find('U')\n    upper_letter = upper[upper_index + 1]\n    upper_index_lst = []\n    upper_index_lst.append(upper_index)\n    upper_letter_index = upper_index\n    while upper_index_lst!= []:\n        upper_index_lst.append(upper_index_lst[0] + 1)\n        upper_index_lst.pop(0)\n    \n    # Find all the possible lowercase letters.\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    lower_index = lower.find('L')\n    lower_letter = lower[lower_index + 1]\n    lower_index_lst = []\n    lower_letter_index = lower_index\n    while lower_index_lst!= []:\n        lower_index_lst.append(lower_index_lst[0] + 1)\n        lower_index_lst.pop(0)\n    \n    # If the value is true, return true.\n    if upper_letter in upper_letter_index and lower_letter in lower_letter_index:\n        return True\n    \n    # If the value is false, return false.\n    else:\n        return False\n    "
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a*a\n    print(\"perimeter of square given as an argument is\", perimeter)\n    \nsquare_perimeter(5)\nsquare_perimeter(4)\nsquare_perimeter(6)\nsquare_perimeter(8)\nsquare_perimeter(7)\nsquare_perimeter(9"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2 * len(a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    a = int(a)\n    if a > 0:\n        a = (a * 4)\n        return a\n    else:\n        print('Invalid input')\n    return a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2 + 2*a*b + b**2 + 2*b*a + a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    def square_perimeter(a):\n        return (4*a)\n    return square_perimeter(a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    print('This is a function that takes a side length and returns the perimeter of a square.')\n    print('The return is a variable called square_perimeter')\n    return a*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a) + (4 * a) + (4 * a)\n    "
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    s = (a**2)\n    return s\nprint(square_perimeter(10))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a **2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not isinstance(string, str):\n        raise TypeError('Input is not a string.')\n    if not isinstance(string, str):\n        raise TypeError('Input is not a string.')\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(filter(None, list(string)))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    split = string.split()\n    newlist = []\n    for word in split:\n        if word in split[0]:\n            newlist.append(word)\n    return newlist\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0: \n        return '' \n    elif len(string) == 1: \n        return string \n    else: \n        if string[0] not in string: \n            return str_to_list(string[1:]) \n        else: \n            return str_to_list(string[0:]) + str_to_list(string[1:]) \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char in string.lower():\n            result.append(char)\n        else:\n            continue\n    return \"\".join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    n = 0\n    res = []\n    for i in range(len(string)):\n        if string[i] not in res:\n            res.append(string[i])\n            n += 1\n    return res[:n]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    final_list = []\n    for char in string:\n        if char not in final_list:\n            final_list.append(char)\n    return final_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in string[:len(string)]]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for i in string:\n        if i in list(string):\n            list_string.append(i)\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [x for x in string if x in list(string[0:])]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    arraynums.sort()\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # array = [2, 3, 2, 6, 3, 1, 1, 3]\n    # [2, 3, 3, 6, 6, 1, 1, 3]\n    array = arraynums\n    #print(array)\n    #print(set(array))\n    #print(list(set(array)))\n    #print(list(array))\n    #print(set(array))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Write your code here\n    res = False\n    arr = []\n    for i in arraynums:\n        arr.append(i)\n        if(len(arr)>=2):\n            if(arr[-1]==arr[-2]):\n                res=True\n                break\n    return res\n        \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert duplicate_check(arraynums) == True, f'{arraynums} is not a duplicate array'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = arraynums\n    arraynums_set = set(arr)\n    if len(arraynums_set) > 0:\n        duplicate = True\n    else:\n        duplicate = False\n    return duplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Solution 1 - Brute Force\n    # O(n^2) time complexity\n    # O(n) space complexity\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if(arraynums==[]):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"**********Test case - 1**********\")\n    result = arraynums.count(arraynums[0])\n    assert result == 0, \"There is not any duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 2**********\")\n    result = arraynums.count(arraynums[1])\n    assert result == 1, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 3**********\")\n    result = arraynums.count(arraynums[2])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 4**********\")\n    result = arraynums.count(arraynums[3])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 5**********\")\n    result = arraynums.count(arraynums[4])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 6**********\")\n    result = arraynums.count(arraynums[5])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 7**********\")\n    result = arraynums.count(arraynums[6])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 8**********\")\n    result = arraynums.count(arraynums[7])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 9**********\")\n    result = arraynums.count(arraynums[8])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 10**********\")\n    result = arraynums.count(arraynums[9])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 11**********\")\n    result = arraynums.count(arraynums[10])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 12**********\")\n    result = arraynums.count(arraynums[11])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 13**********\")\n    result = arraynums.count(arraynums[12])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 14**********\")\n    result = arraynums.count(arraynums[13])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 15**********\")\n    result = arraynums.count(arraynums[14])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 16**********\")\n    result = arraynums.count(arraynums[15])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 17**********\")\n    result = arraynums.count(arraynums[16])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 18**********\")\n    result = arraynums.count(arraynums[17])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 19**********\")\n    result = arraynums.count(arraynums[18])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 20**********\")\n    result = arraynums.count(arraynums[19])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 21**********\")\n    result = arraynums.count(arraynums[20])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 22**********\")\n    result = arraynums.count(arraynums[21])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 23**********\")\n    result = arraynums.count(arraynums[22])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 24**********\")\n    result = arraynums.count(arraynums[23])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 25**********\")\n    result = arraynums.count(arraynums[24])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 26**********\")\n    result = arraynums.count(arraynums[25])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 27**********\")\n    result = arraynums.count(arraynums[26])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 28**********\")\n    result = arraynums.count(arraynums[27])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 29**********\")\n    result = arraynums.count(arraynums[28])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 30**********\")\n    result = arraynums.count(arraynums[29])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 31**********\")\n    result = arraynums.count(arraynums[30])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 32**********\")\n    result = arraynums.count(arraynums[31])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 33**********\")\n    result = arraynums.count(arraynums[32])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 34**********\")\n    result = arraynums.count(arraynums[33])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 35**********\")\n    result = arraynums.count(arraynums[34])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 36**********\")\n    result = arraynums.count(arraynums[35])\n    assert result == 2, \"There is no duplicate element in the array\"\n    print(\"Passed\")\n    \n    print(\"**********Test case - 37**********\")\n    result = arraynums.count(arraynums[36])"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    print(arraynums)\n    for i in range(len(arraynums)-1):\n        print(i,arraynums[i],arraynums[i+1])\n        if arraynums[i] == arraynums[i+1]:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 5 == 0 and (x % 2 == 0 or x % 3 == 0)) or (x % 5 == 1 and (x % 2 == 0 or x % 3 == 0))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==1 or x==2 or x==3 or x==4 or x==5:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    elif x == 1:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 7:\n        return \"Woodball\"\n    if x < 7:\n        return \"Stone\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0: \n        return True\n    else:\n        if x % 4 == 0: \n            return False\n        else: \n            return is_woodall(x//4)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%10==5:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        raise TypeError(\"The number must be positive\")\n    elif num < 2:\n        return num\n    elif num < 5:\n        return num * -1\n    elif num < 10:\n        return (num * -2)\n    elif num < 100:\n        return (num * -3)\n    else:\n        return num * -4\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    if (num < 0):\n        num = -1 * num\n    if (num == 0):\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 1 or num ==2:\n        return False\n    else:\n        num_rev = int(str(num)[::-1])\n        if num_rev == 2:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def rev2(num):\n        return(num * 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return -1\n    else:\n        while num > 0:\n            num, res = divmod(num, 2)\n            if res == 1:\n                return -1\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num:\n        temp = num % 10\n        rev_num = rev_num * 10 + temp\n        num //= 10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # keep track of the current index\n    curr = 0\n    # check the loop if it's already present\n    while curr < num:\n        if num == curr:\n            return False\n        # increment the current index by 1\n        curr += 1\n    # if it's not present return false\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <= 0:\n        return \"The given number is not valid. Please input a positive integer\"\n    else:\n        rev = int(num)\n        return rev * 2 - rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(num):\n        return \"Neither\"\n    if num < int(num):\n        return \"Two's complement\"\n    return \"Neither\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # your code goes here\n    if num < 0:\n        return \"Negative Number\"\n    while num > 0:\n        num = num // 2\n        if num == 1:\n            return \"One\"\n    return \"Even number\""
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return [i for i in arr if len(str(i)) == len(set(str(i)))]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    n = len(arr)\n    for i in range(n) : \n        for j in range(n) : \n            if (arr[i][j] > max) : \n                max = arr[i][j]\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    '''\n    Sample Input 1:\n    \n    12\n    Sample Output 1:\n    \n    12\n    Sample Input 2:\n    \n    5\n    Sample Output 2:\n    \n    5\n    Sample Input 3:\n    \n    3\n    Sample Output 3:\n    \n    3\n    \n    '''\n    \n    '''\n    code here\n    '''\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Write your code here\n    max_num = 0\n    arr.sort()\n    if len(arr) == 0:\n        return 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr :\n        if i > max_num :\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    lst = [i for i in range(1,10)]\n    lst1 = [i*5 for i in lst]\n    max_num = lst1[-1]\n    count = 0\n    for i in arr :\n        if i not in lst and i!= max_num :\n            count += 1\n    if count == len(arr) :\n        return max_num\n    else :\n        return 0\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = []\n    \n    # traverse the array to the end\n    for i in range(len(arr)-1, -1, -1):\n        # check if the current number can be formed with the numbers of the array\n        for j in range(i, -1, -1):\n            if arr[j] == 0:\n                # if it's 0, don't add it, just remove it from the array\n                del arr[j]\n            else:\n                # if it's a non-zero number, add the number\n                arr[j] += arr[j-1]\n    \n    # when the above line is not working, add the numbers again\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_num.append(arr[i])\n    \n    #print(max_num)\n    return max(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1) : \n        if arr[i] == arr[i+1] : \n            return arr[i]\n    return -1\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < y:\n        return x\n    elif x > y:\n        return y\n    else:\n        return 'No'\n    \n    \ndef main():\n    '''\n    Write a python function to get the length of a given list. \n    '''\n    a = [1,2,3,4,5]\n    print(len(a))\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0) and (y >= 0):\n        if (x == y) :\n            print(False)\n        else:\n            print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=abs(x)\n    y=abs(y)\n    if x > y:\n        sign = 1\n    elif x < y:\n        sign = -1\n    else:\n        sign = 0\n    return sign"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x > 0 and y < 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y : \n        return 'greater'\n    elif x < y : \n        return 'less'\n    else : \n        return 'equal'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        print(0,0)\n    elif x<0 and y<0:\n        print(0,0)\n    elif x>0 and y<0:\n        print(0,0)\n    elif x>0 and y>0:\n        print(0,0)\n    else:\n        print(1,1)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return 'Negative number'\n    elif x<0 and y>0:\n        return 'Positive number'\n    elif x>0 and y<0:\n        return 'Zero'\n    elif x<0 and y>0:\n        return 'One'\n    else:\n        return 'Equilateral triangle'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        print(True)\n    else:\n        print(False)\n        \nif __name__ == \"__main__\":\n    x = input(\"x :\")\n    y = input(\"y :\")\n    opposite_Signs(x, y)"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    if x < y:\n        return False\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == y : return True\n    if x > y : return opposite_Signs(x, y+1)\n    if y > x : return opposite_Signs(x, y-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    \n    if n == 1:\n        return True\n    \n    \n    if n % 2 == 0:\n        return is_octagonal(n / 2)\n    else:\n        return is_octagonal((3 * n) + 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    while n > 0: \n        a += 1 \n        n = n // 3\n    return "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # // - the no of digits to the right is always odd\n    # // - the no of digits to the left is always even\n    # // - if the nth digit is odd, the no of digits left to the right is odd\n    # // - if the nth digit is even, the no of digits left to the left is even\n    # // - if the no of digits are odd, return false\n    # // - Else, return true\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Base case\n    if n == 0: return 0\n    \n    # Initialize the first and last numbers\n    num_a = n//2\n    num_b = num_a - 1\n    \n    # Brute Force Search\n    # Start at the first and last number\n    for i in range(num_a, num_b + 1):\n        # Check if the number is one, the number is not a square\n        if is_square(i):\n            return i\n    \n    # Return -1 if the number isn't an octagonal number\n    return -1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return -1\n    else:\n        return int(n/2)\n    \n    \ndef main():\n    '''\n    Driver code to test is_octagonal() and is_hexagonal()\n    '''\n    n = int(input('Enter n: '))\n    \n    assert is_octagonal(n)!= -1\n    assert is_octagonal(n) == is_hexagonal(n)\n    assert is_octagonal(n) == is_hexagonal(n)\n    \n    print('Yes') if is_octagonal(n) > 0 else print('No')\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 840\n    elif n == 8:\n        return 980\n    elif n == 9:\n        return 1260\n    elif n == 10:\n        return 1440\n    elif n == 11:\n        return 1680\n    else:\n        raise ValueError('n must be a positive integer')\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # write your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 4\n    elif n == 7:\n        return 5\n    elif n == 8:\n        return 6\n    elif n == 9:\n        return 7\n    elif n == 10:\n        return 8\n    elif n == 11:\n        return 9\n    elif n == 12:\n        return 10\n    elif n == 13:\n        return 11\n    elif n == 14:\n        return 12\n    elif n == 15:\n        return 13\n    elif n == 16:\n        return 14\n    else:\n        return 'invalid number'\n    \ndef is_pentagonal(n):\n    '''\n    Write a function that takes a non negative integer as input and returns true if it is a pentagonal number, false otherwise.\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    \n    return (n*(n+1))//2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Your code here\n    if n == 0: \n        return 0\n    elif n % 2 == 0: \n        return n // 10\n    else:\n        return (n // 10) + (n % 10)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = 1\n    while n!= 0:\n        n = n // 10\n        x += 1\n    return x\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Step 1.\n    #     For any string in the input, its substring length is equal to the sum of its digits\n    # Step 2.\n    #     If the substring has sum of digits equals to the string length, return 1.\n    #     Else, return 0\n    def countSubStr(s):\n        count = 0\n        for i in range(len(s)):\n            count += s.count(s[i])\n        return count\n    count = 0\n    for i in range(len(s)):\n        if s[i] >= 10:\n            count += countSubStr(s[i])\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s)<=2:\n        return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # store the current counter\n    counter = defaultdict(int)\n    # store the initial string\n    initial_string = s[0]\n    # iterate through the string\n    for i in range(1, len(s)):\n        # check if the current string is a substring with digits equal to the current\n        # string\n        if s[i] == initial_string:\n            # increment the counter\n            counter[i] += 1\n        # if it is a substring with digits equal to the current string, increment the counter\n        else:\n            # increment the counter\n            counter[i] += counter[i - 1]\n    # return the counter\n    return counter\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # TODO: Write a function that takes a string s and returns the number of substrings with the sum of digits equal to their length.\n    # Recall that the substrings are separated by a single space.\n    \n    # If the length of the string is 0, it will be returned as 0.\n    # Note: The space is considered a one-character string and has the length of 1.\n    \n    # For example, if the length of the string is 3,\n    # the function returns 4 because the substring \"abab\" has the sum of digits of length 3.\n    \n    # Count the number of substrings with a sum of digits equal to their length.\n    # Refer https://www.geeksforgeeks.org/count-the-number-of-substrings-with-the-sum-of-digits-of-the-substring-using-python/ for more details.\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    D = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        D[s[i]] += 1\n    return D\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    Dict = defaultdict(lambda: 0)\n    count = 0\n    for i in range(len(s)):\n        Dict[s[i]] = Dict[s[i]] + 1\n    for i in Dict:\n        if Dict[i] == s.count(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s: return 0\n    if len(s) < 2: return len(s)\n    sub = 0\n    d = defaultdict(int)\n    for i in range(len(s)-1):\n        for j in range(i+1, len(s)):\n            sub += s[i:j+1].count(s[i])\n            d[sub] += 1\n    return len(d)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == s[1]:\n        return count_Substrings(s[2:]) + 1\n    else:\n        count = count_Substrings(s[2:])\n        return count + count_Substrings(s[1:])\n    \ndef get_number_of_characters(s):\n    '''\n    A python function that returns the number of characters in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    return len(s)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    l = len(s)\n    for i in range(1,l):\n        if int(s[i:i+2])==s[i-1]*int(s[i-1]) == s[i-2]*s[i-2]:\n            count+=1\n    return count\n    #return count\ndef count_Substrings_Optimized(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    l = len(s)\n    for i in range(1,l):\n        if int(s[i:i+2])==s[i-1]*int(s[i-1]) == s[i-2]*s[i-2]:\n            count+=1\n    return count\n    #return count\ndef count_Substrings_Optimized2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    l = len(s)\n    for i in range(1,l):\n        if int(s[i:i+2])==s[i-1]*int(s[i-1]) == s[i-2]*s[i-2]:\n            count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #s=input(\"Enter the string:\")\n    #if(s==\" \"):\n    #    s=input(\"Enter a string:\")\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(xs[0])\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = float('inf')\n    index = 0\n    for i in range(len(xs)):\n        if xs[i] < smallest_number:\n            index = i\n            smallest_number = xs[i]\n    return index\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    lowest = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < lowest:\n            lowest = xs[i]\n    return lowest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    smallest_index = 0\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    for i in range(len(xs)):\n        for j in range(len(xs)-i):\n            if xs[j] > xs[j+1]:\n                xs[j],xs[j+1] = xs[j+1],xs[j]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_numbers = []\n    for x in xs:\n        if x < smallest_numbers[-1]:\n            smallest_numbers.append(x)\n        else:\n            smallest_numbers.append(smallest_numbers[-1])\n    return smallest_numbers[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = 100000\n    for x in xs:\n        if x < smallest_num:\n            smallest_num = x\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    minimum = xs[0]\n    for i in xs:\n        if i < minimum:\n            minimum = i\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n    return min\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(test_list[i][0]-test_list[i][1]) for i in range(len(test_list)))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            difference = abs(test_list[i][1] - test_list[j][1])\n            if difference > max_difference:\n                max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = test_list[0][1] - test_list[1][1]\n    for i in range(len(test_list)):\n        diff = test_list[i][1] - test_list[i + 1][1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    count = 0\n    for i in test_list:\n        count += 1\n        if count % 2 == 0:\n            temp = max(test_list[i][0], test_list[i][1]) - min(test_list[i][0], test_list[i][1])\n            if temp > 0:\n                return temp\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(list(map(lambda x: abs(x[0] - x[1]), test_list)))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            temp = abs(test_list[i] - test_list[j])\n            if temp > diff:\n                diff = temp\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    i = 0\n    while i < len(test_list):\n        j = i + 1\n        while j < len(test_list):\n            if test_list[i] < test_list[j]:\n                test_list[i] = -test_list[j]\n                max_diff += 1\n                j += 1\n            else:\n                j += 1\n        i += 1\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    lst = list(test_list)\n    index = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            index.append(j)\n    index.sort()\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff_val = 0\n    for i in test_list:\n        if test_list.count(i) > 1:\n            print(i,test_list.count(i))\n            max_diff_val = max(i,max_diff_val)\n    return max_diff_val\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks_dict = {}\n    for subject_marks in subjectmarks:\n        subject_marks_dict[subject_marks[0]] = subject_marks[1]\n    return sorted(subject_marks_dict.items(),key=lambda item:item[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Use a lambda expression to create a function that sorts the items in each tuple in ascending order\n    sorted_list = sorted(subjectmarks, key=lambda item: item[1])\n    print(\"\\nSorted list\")\n    print(sorted_list)\n    # Use a lambda expression to create a function that sorts the items in each tuple in descending order\n    sorted_list = sorted(subjectmarks, key=lambda item: item[0], reverse = True)\n    print(\"\\nSorted list\\n\")\n    print(sorted_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1], reverse=True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_marks(marks):\n        newmarks=sorted(marks, key=lambda x:x[1])\n        return newmarks\n    return sort_marks(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    tuple_list = []\n    for i in subjectmarks:\n        tuple_list.append(i[1])\n    tuple_list.sort(key = lambda x: x[1])\n    return tuple_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key = lambda x:x[1], reverse=False)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    n = len(subjectmarks)\n    for i in range(n):\n        if subjectmarks[i][1] == 'A+':\n            subjectmarks[i][1] = 'A'\n        if subjectmarks[i][1] == 'A-':\n            subjectmarks[i][1] = 'A'\n        if subjectmarks[i][1] == 'B+':\n            subjectmarks[i][1] = 'B'\n        if subjectmarks[i][1] == 'B-':\n            subjectmarks[i][1] = 'B'\n        if subjectmarks[i][1] == 'C+':\n            subjectmarks[i][1] = 'C'\n        if subjectmarks[i][1] == 'C-':\n            subjectmarks[i][1] = 'C'\n        if subjectmarks[i][1] == 'D+':\n            subjectmarks[i][1] = 'D'\n        if subjectmarks[i][1] == 'D-':\n            subjectmarks[i][1] = 'D'\n        if subjectmarks[i][1] == 'F+':\n            subjectmarks[i][1] = 'F'\n        if subjectmarks[i][1] == 'F-':\n            subjectmarks[i][1] = 'F'\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for data in data_list:\n        sum = sum + data\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return None\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n    "
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for element in data_list:\n        if type(element) == int:\n            result += element\n        else:\n            result += recursive_list_sum(element)\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #Define accumulator\n    result = 0\n    #Loop through list\n    for item in data_list:\n        #If item is not a list\n        if type(item)!= list:\n            #Add to accumulator\n            result += item\n        #Else\n        else:\n            #Loop through list\n            for item in item:\n                #Add to accumulator\n                result += item\n    #Return accumulator\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write your solution here\n    if not data_list:\n        return []\n    if len(data_list) == 1:\n        return data_list\n    else:\n        return data_list + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # your code here\n    if len(data_list) == 0:\n        return []\n    if isinstance(data_list[0],list):\n        return recursive_list_sum([element for sublist in data_list for element in sublist]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    total = 0\n    for d in data_list:\n        total += d\n        \n    return total\n    \ndef test_recursive_list_sum():\n    assert recursive_list_sum([2,1,1,2]) == 2\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,2]) == 3\n    assert recursive_list_sum([2,3,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 6\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,2]) == 4\n    assert recursive_list_sum([2,3,2]) == 8\n    assert recursive_list_sum([2,1]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([2,1,1,2,3,2,4]) == 30\n    assert recursive_list_sum([2,1,2]) == 4\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([2,1,1,2,3,2,4]) == 30\n    assert recursive_list_sum([2,1,1,2]) == 4\n    assert recursive_list_sum([2,1,1,2,3,2,4]) == 12\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list_sum([1,2]) == 1\n    assert recursive_list_sum([2,1,1]) == 2\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([2,1,1,2,3,2]) == 12\n    assert recursive_list_sum([2,1,1,2]) == 6\n    assert recursive_list_sum([]) == 0\n    assert recursive_list_sum([3,2]) == 0\n    assert recursive_list_sum([1,2,3]) == 0\n    assert recursive_list_sum([1,2,3,4]) == 8\n    assert recursive_list"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_list_no_repeats = []\n    for item in data_list:\n        if item not in data_list_no_repeats:\n            data_list_no_repeats.append(item)\n    return sum(data_list_no_repeats)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Get length of data_list\n    n = len(data_list)\n    # Create a new array and populate it with data_list\n    output = [data_list[0]]\n    for i in range(1, n):\n        output.append(data_list[i] + output[i-1])\n    return output\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return []\n    elif len(data_list) == 1:\n        return data_list\n    else:\n        return [data_list[0] + recursive_list_sum(data_list[1:])]\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Create an empty dictionary\n    dic = {}\n    # Loop through the list\n    for item in list:\n        # Check if item is in dictionary\n        if item > 0:\n            # Increment the count\n            dic[item] = dic.get(item, 0) + 1\n            # Return the dictionary\n    return dic\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n    \n    \n    "
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for number in list:\n        if number>0:\n            count=count+1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_list = []\n    for number in list:\n        if number >= 0:\n            positive_list.append(number)\n    \n    print(positive_list)\n    print(len(positive_list))\n    \ndef pos_sum(list):\n    '''\n    Write a python function to sum all positive numbers in a list.\n    '''\n    sum_list = 0\n    for number in list:\n        if number >= 0:\n            sum_list += number\n            \n    print(sum_list)\n    print(sum_list/len(list))\n    \ndef neg_sum(list):\n    '''\n    Write a python function to sum all negative numbers in a list.\n    '''\n    sum_list = 0\n    for number in list:\n        if number < 0:\n            sum_list += number\n            \n    print(sum_list)\n    print(sum_list/len(list))\n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    negative_list = []\n    for number in list:\n        if number < 0:\n            negative_list.append(number)\n            \n    print(negative_list)\n    print(len(negative_list))\n    \ndef neg_sum(list):\n    '''\n    Write a python function to sum all negative numbers in a list.\n    '''\n    sum_list = 0\n    for number in list:\n        if number < 0:\n            sum_list += number\n    \n    print(sum_list)\n    print(sum_list/len(list))\n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    negative_list = []\n    for number in list:\n        if number < 0:\n            negative_list.append(number)\n            \n    print(negative_list)\n    print(len(negative_list)"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for i in list:\n        if i > 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for number in list:\n        if number > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #print(n)\n    #print(n-1)\n    #print(n//2)\n    #print(n-n//2)\n    #print(n//3)\n    \n    if n < 2:\n        return n\n    else:\n        return (bell_number(n-1) + bell_number(n-2)) % (10**9 + 7)\n    \n    \ndef bell_tree(n):\n    '''\n    Write a function that returns the number of ways to partition a set of Bell numbers.\n    '''\n    #print(n)\n    #print(n-1)\n    #print(n//2)\n    #print(n-n//2)\n    #print(n//3)\n    \n    if n < 2:\n        return n\n    else:\n        return (bell_tree(n-1) + bell_tree(n-2)) % (10**9 + 7)\n    \n    \ndef bell_recursion(n):\n    '''\n    Write a function that returns the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    else:\n        return (bell_recursion(n-1) + bell_recursion(n-2)) % (10**9 + 7)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def binomial(n, m, p):\n        '''\n        Implement a bottom-up approach for binomial search.\n        '''\n        if m == 0:\n            return n\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n > 4:\n        return 4\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count_list = [0]*(n+1)\n    count_list[0] = 1\n    count_list[1] = 1\n    for i in range(2,n+1):\n        for j in range(i-1,-1,-1):\n            if j==0:\n                count_list[j+1] = count_list[j] + count_list[j+1]\n            if i==j:\n                count_list[j+1] = count_list[j+1] + count_list[j]\n    return count_list[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    \n    else:\n        return bell_number(n-1) + bell_number(n-2)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n    \ndef linear_search(arr,x):\n    '''\n    Return the index of x in arr if it is present, otherwise return -1.\n    '''\n    for i in range(len(arr)):\n        if arr[i]==x:\n            return i\n    return -1\n    \ndef linear_search_recursion(arr,x):\n    '''\n    Return the index of x in arr if it is present, otherwise return -1.\n    '''\n    if arr[0]==x:\n        return 0\n    elif arr[0]>x:\n        return linear_search_recursion(arr[1:],x)\n    else:\n        return linear_search_recursion(arr[1:],x)\n    \ndef modular_inverse(p,n):\n    '''\n    Compute the modular multiplicative inverse of n, if n is prime, return n as its value.\n    If n isn't prime, return -1.\n    '''\n    if p>1:\n        return modular_inverse(p,n%p)\n    elif n==2:\n        return 0\n    elif p==2:\n        return 1\n    else:\n        return -1\n    \ndef modular_inverse_recursion(n,p):\n    '''\n    Return the modular multiplicative inverse of n, if n is prime, return n as its value.\n    If n isn't prime, return -1.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return modular_inverse_recursion(n%p,p)\n    elif n==p:\n        return 1\n    elif n%p==0:\n        return modular_inverse_recursion(n//p,p)\n    else:\n        return modular_inverse_recursion(n//p,p)\n        \ndef modular_inverse_iter(n,p):\n    '''\n    Compute the modular multiplicative inverse of n, if n is prime, return n as its value.\n    If n isn't prime, return -1.\n    '''\n    mod_p=p\n    while n!=0:\n        n=n%p\n        mod_p=mod_p*p\n    return mod_p\n        \ndef modinv(n,p):\n    '''\n    Return the modular inverse of n modulo p, if n is prime, return n as its value.\n    If n isn't prime, return -1.\n    '''\n    mod_p=p\n    while n!=0:\n        n=n%p\n        mod_p=mod_p*p\n    if mod_p==1:\n        return 0\n    elif mod_p==p:\n        return 1\n    else:\n        return modinv(n,p)\n    \ndef modinv_recursion(n,p):\n    '''\n    Return the modular inverse of n modulo p, if n is prime, return n as its value.\n    If n isn't prime, return -1.\n    '''\n    mod_p=p\n    while n!=0:\n        n=n%p\n        mod_p=mod_p*p\n    if mod_p==1:\n        return 0\n    elif mod_p==p:\n        return 1\n    else:\n        return modinv_recursion(n,p)\n        \ndef modinv_iter(n,p):\n    '''\n    Compute the modular inverse of n modulo p, if n is prime, return n as its value.\n    If n isn't prime, return -1.\n    '''\n    mod_p=p\n    while n!=0:\n        n=n%p\n        mod_p=mod_p*p\n    if mod_p==1:\n        return 0\n    elif mod_p==p:\n        return 1\n    else:\n        return modinv_iter(n,p)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    import math\n    def bell_partition(a, p):\n        a.sort()\n        count = 1\n        p = math.floor(len(a) / 2)\n        for i in range(1, len(a)):\n            if a[i] < a[p]:\n                count += 1\n                p = i\n        return count\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(n):\n        count += bell_partition(a, i)\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def B_partition(n, m):\n        dp = [0] * (m + 1)\n        for i in range(1, m+1):\n            dp[i] = dp[i-1] + i\n        return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n==0:\n        return 1\n    elif n==1:\n        return 0\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0]<A[-1]:\n        for i in range(1, len(A)):\n            if A[i-1]>A[i]:\n                return False\n    else:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A) < 2): \n        return True\n    else:\n        i = 0\n        j = 1\n        while j <= len(A) - 1:\n            if A[i] > A[j]:\n                return False\n            i = i + 1\n            j = j + 1\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if all elements of given array are positive numbers\n    if all(n > 0 for n in A):\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    \n    if A[0] == A[1]:\n        for i in range(1, len(A)):\n            if A[i]!= A[i - 1]:\n                return False\n        return True\n    \n    # sort array and compare with first element. \n    # if A[0]!= A[1], return false\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    # check if left side has elements\n    left = A[0]\n    for i in range(1,len(A)):\n        if A[i] > left:\n            return False\n        left = A[i]\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    first_row = A[0]\n    last_row = A[len(A)-1]\n    if first_row == last_row:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    for i in range(1,n): \n        if A[i]<A[i-1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Define a boolean variable \n    # to check whether the given array is monotonic or not.\n    lst = []\n    lst_1 = []\n    i = 0\n    j = 0\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    i = 0\n    while i < len(A)-1:\n        if A[i] > A[i+1]:\n            is_monotonic = False\n            break\n        i += 1\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] == A[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    list_ = list(l)\n    start_index = 0\n    end_index = len(l)\n    \n    while start_index < end_index:\n        \n        if l[start_index] == s:\n            return True\n        \n        if list_[start_index] < s < list_[start_index + 1]:\n            return False\n        \n        start_index += 1\n        end_index -= 1\n    \n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l is None or s is None:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    count = 0\n    for i in s:\n        if i in l:\n            count += 1\n    if count == len(l):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Declare a list of all indices where the list is located\n    indices = []\n    # Loop through the list\n    for i in range(len(l)):\n        # Check whether the element of the list at the current index is\n        # in the sublist.\n        if l[i] in s:\n            # Append the index of the element to the list of indices\n            indices.append(i)\n    # Return the boolean\n    return len(indices) == len(s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return True if len(l) == len(set(l)) else False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    #Initialize empty array to store the subset\n    s1 = []\n    \n    #Add each element to the list\n    for i in s:\n        s1.append(i)\n    \n    #Initialize empty array to store the first element\n    s2 = []\n    \n    #Add each element to the list\n    for i in range(len(l)):\n        s2.append(l[i])\n    \n    #Loop through each element of the array\n    for i in range(len(s1)):\n        \n        #Check if the element is in the first array element\n        if s1[i] in l:\n            \n            #Check if there is any element in the other array\n            if s2:\n                #Compare the current element in the array and the first element in the sublist\n                if s2[0] == s1[i]:\n                    \n                    #If the first element in the sublist is not in the second element then return false\n                    if s1[i]!= s2[0]:\n                        return False\n                    \n                #If the first element in the sublist is in the second element, then return true\n                else:\n                    return True\n            else:\n                return False\n        \n        #If there is no element in the sublist\n        else:\n            \n            #If there is an element in the sublist and the current element is in the first element of the array\n            if s2:\n                if s2[0] == s1[i]:\n                    return True\n            \n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 1:\n        return True\n    if not s in l:\n        return False\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0 or len(s) == 0:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] in l:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(tuple)==len(Input) for tuple in Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #your code here\n    if len(Input)>0:\n        for i in range(len(Input)):\n            for j in range(i+1,len(Input)):\n                if len(Input[i])!=len(Input[j]):\n                    return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0,len(Input)):\n        for j in range(0,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                if len(Input[i]) == 1:\n                    return False\n            \n            else:\n                if len(Input[i]) == 2:\n                    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    Input = sorted(Input)\n    length = len(Input[0])\n    for i in range(length):\n        for j in range(i+1,length):\n            if Input[i] == Input[j]:\n                print(f\"{i} - {j}\")\n                return False\n    \n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equ_tup_list = []\n    for element in Input:\n        equ_tup = tuple(element)\n        if len(equ_tup) == len(element):\n            equ_tup_list.append(equ_tup)\n    return equ_tup_list\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Using deque \n    # Dictionaries to store the elements and counts.\n    Dict = { }\n    Equal = []\n    equal = 0\n    \n    # Function to find the length of the elements\n    def length(tup):\n        return len(tup)\n        \n    # Function to find the length of the elements\n    def count(tup):\n        return len(tup)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if type(Input)!= tuple:\n        raise TypeError('Input must be a tuple')\n    if len(Input) % 2 == 1:\n        raise ValueError('Input must have an even number of elements')\n    if len(Input) < 3:\n        return True\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if j == len(Input)-1:\n                break\n            if Input[i]!= Input[j+1]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return True\n    return (len(set(Input[0])) == len(Input[0]))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    i = 0\n    for i in range(len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1]:\n                return True\n    return False\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    length = len(nums)\n    if length < 1:\n        return []\n    \n    for i in range(0, length-1):\n        for j in range(i+1, length):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] < nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums):\n        mid = len(nums) // 2\n        if len(nums) % 2 == 0:\n            return nums[mid]\n        else:\n            return nums[mid]\n        \n        return sorted(nums, key = sort)\n    \n    nums_sorted = sort(nums)\n    left, right = 0, len(nums_sorted) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if nums_sorted[mid] > nums_sorted[mid+1]:\n            return nums_sorted[mid]\n        elif nums_sorted[mid] > nums_sorted[mid+1]:\n            return nums_sorted[mid+1]\n        else:\n            if nums_sorted[mid] < nums_sorted[mid-1]:\n                return nums_sorted[mid]\n            elif nums_sorted[mid] < nums_sorted[mid+1]:\n                return nums_sorted[mid]\n            else:\n                return nums_sorted[mid-1]\n                \n    return nums_sorted[len(nums_sorted)-1]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # creating a temp_list\n    temp_list = []\n    # creating the length of the array\n    length = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\nnums = [4,5,6,1,3,2]\nnums = comb_sort(nums)\nprint(nums"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the middle of the list\n        mid = n // 2\n        # Compare the numbers from the left half to the right half\n        for j in range(0, mid):\n            if nums[j] > nums[mid]:\n                nums[j], nums[mid] = nums[mid], nums[j]\n    #print(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def partition(arr, low, high):\n        i = low\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[high] = arr[high], arr[i]\n        return i\n    if len(nums) <= 1:\n        return nums\n    arr = nums[:]\n    arr.sort()\n    \n    for i in range(len(arr) - 1):\n        low = i\n        high = i + 1\n        while low < len(arr):\n            if arr[low] > arr[high]:\n                arr[low], arr[high] = arr[high], arr[low]\n                low += 1\n                high += 1\n            low += 1\n            high += 1\n        arr[low], arr[high] = arr[high], arr[low]\n        \n    arr.sort()\n    return arr\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        j = i\n        for k in range(i+1, len(nums)):\n            if nums[j] > nums[k]:\n                j = k\n            if j == i:\n                continue\n            elif nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # length = len(nums)\n    # for i in range(length - 1):\n    #     for j in range(length - i - 1):\n    #         if nums[j] > nums[j+1]:\n    #             temp = nums[j]\n    #             nums[j] = nums[j+1]\n    #             nums[j+1] = temp\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s_num = str(n)\n    #print(s_num)\n    i = 0\n    while i < len(s_num):\n        if s_num[i] == 'x':\n            i += 1\n            continue\n        elif s_num[i] == 'y':\n            if s_num[i+1] == 'x':\n                return False\n            else:\n                i += 1\n                continue\n        else:\n            i += 1\n            continue\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n%2!= 0):\n        print(\"Value is not an odd number\")\n        return\n    if (n <= 0):\n        print(\"Value is less than 0\")\n        return\n    if (n == 1):\n        print(\"Value is a single number\")\n        return\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n < 0):\n        return False\n    elif (n == 0):\n        return True\n    elif (n == 1):\n        return False\n    elif (n > 1):\n        return False\n    else:\n        return True\n    \n    \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return -1\n    else: \n        return n % 10 - (dif_Square(n//10) * n//10)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1: \n        return False\n    elif n == 2: \n        return True\n    elif n % 2 == 0: \n        return dif_Square(n//2)\n    else: \n        return dif_Square(3*n+1)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is divisible by 2\n    if (n % 2 == 0): \n        print(\"That number is divisible by two\")\n    else: \n        # Check if the number is divisible by 3\n        if (n % 3 == 0): \n            print(\"That number is divisible by three\")\n        else: \n            # Check if the number is divisible by 5\n            if (n % 5 == 0): \n                print(\"That number is divisible by five\")\n            else: \n                # Check if the number is divisible by both 5 and 4\n                if (n % (5 + 4) == 0): \n                    print(\"That number is divisible by both 5 and 4\")\n                else: \n                    print(\"That number is not divisible by both 5 and 4\")\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Implement your code here\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s1 = n % 10\n    s2 = (n - s1) % 10\n    if s1 > s2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if (pattern in colors):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Check if the pattern string starts with a '#' character\n    if (patterns[0][0]!= \"#\"):\n        return False\n    \n    # Check the second to last color\n    for i in range(1, len(patterns)):\n        if patterns[i][0]!= patterns[i-1][0]:\n            return False\n    \n    # Check the first character\n    if (colors[0][0]!= patterns[0][0]):\n        return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = sorted(patterns)\n    for color in colors:\n        for pattern in patterns:\n            if color == pattern:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(patterns)\n    for i in range(n):\n        for j in range(n):\n            if(i == j):\n                continue\n            if(colors[i][0] == colors[j][0]):\n                if(colors[i][1]!= colors[j][1]):\n                    return False\n            elif(colors[i][0]!= colors[j][0]):\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Your code here\n    if len(colors)!= len(patterns) or len(colors) == 0:\n        return False\n    colors = set(colors)\n    patterns = set(patterns)\n    return len(colors & patterns) == 0\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if (color in pattern and color in color):\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # find all the patterns\n    all_patterns = []\n    for pattern in patterns:\n        all_patterns += pattern\n    \n    # find all the color codes\n    all_colors = []\n    for color in colors:\n        all_colors += color\n    \n    # check if pattern exists in all the pattern\n    for pattern in all_patterns:\n        if pattern not in all_colors:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    flag = True\n    n = len(colors)\n    for i in range(0, n):\n        if i == 0:\n            for j in range(0, n):\n                if j == 0:\n                    if patterns[i] == colors[j] and patterns[j] == colors[i]:\n                        continue\n                elif patterns[i] == colors[j] and patterns[j]!= colors[i]:\n                    flag = False\n                    break\n        else:\n            if colors[i]!= colors[i - 1] and patterns[i]!= patterns[i - 1] and patterns[i]!= colors[i - 1] and patterns[i]!= colors[i]:\n                flag = False\n                break\n    return flag\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    length = len(colors)\n    patterns_set = set(patterns)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for i in test_list:\n        if all(elem%K == 0 for elem in i):\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # TODO: implement this function\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0]%test_list[j][0]==0:\n                break\n        else:\n            return test_list[i]\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #print(test_list)\n    temp_list = []\n    for i in test_list:\n        if len(i) % K == 0:\n            temp_list.append(i)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    all_tuples = []\n    for tup in test_list:\n        for t in tup:\n            if t % K == 0:\n                all_tuples.append(t)\n    return all_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for element in test_list:\n        if element[0] % K == 0:\n            return element\n    return None\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in test_list:\n        if i % K == 0:\n            count += 1\n    if count == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create list of tuples\n    tup_list = []\n    for tup in test_list:\n        # check if tuple is divisible by k\n        if len(tup) % K == 0:\n            # check if it contains all of the elements of the tuple\n            if tuple(tup) in test_list:\n                # append tuple to list\n                tup_list.append(tup)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                tuples.append((test_list[i][j], i+1))\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tuple in test_list:\n        if tuple[1] % K == 0:\n            if tuple[0] not in test_list:\n                test_list.append(tuple)\n        elif tuple[0] % K == 0:\n            test_list.remove(tuple)\n    return test_list\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Write your code here\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1, n + 1):\n        if(n % i == 0):\n            print(n, 'divisible by 11')\n            return\n    print(n, 'is not divisible by 11')\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print(\"Divisible by 11\")\n        return True\n    else:\n        print(\"Not divisible by 11\")\n        return False\ndef check_D(n):\n    '''\n    Write a python function to check whether a number is odd or even.\n    '''\n    if n%2 == 0:\n        print(\"Even\")\n        return True\n    else:\n        print(\"Odd\")\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%2==0: \n        print(n,\"is divisible by 11\")\n    else: \n        print(n,\"is not divisible by 11\")\n    \ndef is_Equal(n): \n    '''\n    Write a python function to check whether a number is equal to 9.\n    '''\n    if n==9: \n        print(n,\"is equal to 9\")\n    else: \n        print(n,\"is not equal to 9\")\n    \ndef is_Even(n): \n    '''\n    Write a python function to check whether a number is even.\n    '''\n    if n%2==0: \n        print(n,\"is even\")\n    else: \n        print(n,\"is not even\")\n    \ndef is_Odd(n): \n    '''\n    Write a python function to check whether a number is odd.\n    '''\n    if n%2==1: \n        print(n,\"is odd\")\n    else: \n        print(n,\"is not odd\")\n    \ndef main(): \n    is_Odd(9) \n    print() \n    is_Even(9) \n    print() \n    is_Diff(9) \n    print() \n    is_Equal(9) \n    print() \n    is_Odd(7) \n    print() \n    is_Even(7) \n    print() \n    \nmain() "
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0:\n        return True\n    return False\n    # Write a Python function to check whether a number is perfect or not.\n    # perfect numbers are greater than 1 and less than 10^12.\n    # for example, perfect numbers 2, 4, 6, 8, 10, 12, 14, 16, 18,...\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 11\ndef main():\n    '''\n    Write a Python program to print out all numbers between 0 and \n    100 inclusive that are divisible by 3 and 5. \n    '''\n    for i in range(0,100):\n        if is_Diff(i):\n            print(i)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 1: return False\n    elif n % 2 == 0: return True\n    else: \n        return False\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    if n % 2 == 0: return True\n    else: return False\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    if n % 2 == 1: return True\n    else: return False\n    \ndef is_Prime(n): \n    '''\n    Write a python function to determine whether a number is prime or not.\n    '''\n    if n > 1:\n        if n <= 3: \n            return True\n        if n % 2 == 0 or n % 3 == 0: return False\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0: \n                return False\n        return True\n    else: \n        return False\n    \ndef is_Perfect(n): \n    '''\n    Write a python function to determine whether a number is perfect or not.\n    '''\n    if n > 1:\n        if n % 2 == 0: \n            return True\n        if n % 3 == 0: \n            return False\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0:\n                return False\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return print(\"String is not Odd length\")\n    else:\n        return print(\"String is Odd length\")\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # your code goes here\n    # for i in range(len(s)):\n    #     print(s[i])\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) <= 2:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    '''\n    Description\n    \n    The function is to check whether the length of the word is odd or even,\n    either by using the len function to calculate the length of word.\n    \n    Parameters\n    ----------\n    s : string \n        The string to check the length of.\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split(' ')\n    odd = 0\n    for w in words:\n        if len(w) % 2 == 1:\n            odd += 1\n    if odd == 1:\n        return 'Odd'\n    else:\n        return 'Even'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if not s: \n        return 0\n    elif s[0] in vowels:\n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i] in vowels:\n                return 0\n            else:\n                pass\n        return len(s)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)<2): \n        return \"Length must be more than two characters.\"\n    else:\n        count = 0\n        for i in range(len(s)-1):\n            if s[i] == s[i+1]:\n                count += 1\n            else:\n                return \"Word doesn't have the following characters.\"\n        if count % 2 == 0:\n            return \"Word is an odd length.\"\n        else:\n            return \"Word is an even length.\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math \n    def tetrahedral(a, b, c, d, e, f, g, h): \n        '''\n        Generate a 4-tetrahedral number as a pair of numbers in the form (a,b,c,d) and (a,b,c,f) and (a,b,c,e) and (a,b,c,h).\n        '''\n        n = 0\n        while n == 0: \n            t = str(a) + str(b) + str(c) + str(d) + str(e) + str(f) + str(g) + str(h)\n            t = int(t) \n            tot = a + b + c + d + e + f + g + h\n            tot = int(tot)\n            if tot == 3 or tot == 4: \n                return tot \n            elif tot == 5: \n                if a == b and b == c and c == d and d == e and e == f and f == g and g == h: \n                    return tot \n                else: \n                    return a + b + c + d + e + f + g + h \n            else: \n                if a == b and b == c and c == d and d == e and e == f and f == g and g == h: \n                    return tot \n                else: \n                    return a + b + c + d + e + f + g + h \n            tot -= 1 \n            n = tot \n    def tetrahedral_number(n): \n        '''\n        Write a function to find the nth tetrahedral number.\n        '''\n        import math \n        def tetrahedral(a, b, c, d, e, f, g, h): \n            '''\n            Generate a 4-tetrahedral number as a pair of numbers in the form (a,b,c,d) and (a,b,c,e) and (a,b,c,f) and (a,b,c,h).\n            '''\n            n = 0\n            while n == 0: \n                t = str(a) + str(b) + str(c) + str(d) + str(e) + str(f) + str(g) + str(h)\n                t = int(t) \n                tot = a + b + c + d + e + f + g + h\n                tot = int(tot)\n                if tot == 3 or tot == 4: \n                    return tot \n                elif tot == 5: \n                    if a == b and b == c and c == d and d == e and e == f and f == g and g == h: \n                        return tot \n                    else: \n                        return a + b + c + d + e + f + g + h \n                else: \n                    if a == b and b == c and c == d and d == e and e == f and f == g and g == h: \n                        return tot \n                    else: \n                        return a + b + c + d + e + f + g + h \n            return a + b + c + d + e + f + g + h \n        tot = tetrahedral(a, b, c, d, e, f, g, h) \n        tot -= 1 \n        return tetrahedral(a, b, c, d, e, f, g, h) + tot \n    if n == 0: \n        return tetrahedral_number(0)\n    else: \n        return tetrahedral_number(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    possible_tetrahedra = set(list('abcdefgh')[:n])\n    odd_tetrahedra = set(list('abcdefgh')[n:])\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return tetrahedral_number(n//2)\n    else:\n        return tetrahedral_number(n//2) + tetrahedral_number(n//2 + 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1 or n == 0:\n        return n\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n=int(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 4\n    elif n==3:\n        return 3\n    elif n==4:\n        return 6\n    else:\n        return tetrahedral_number(n-1)+tetrahedral_number(n-2)+tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tet_set = set([1,2,3,4,5])\n    for i in range(6,n+1):\n        tet_set.update([i,i+1,i+2,i+3,i+4])\n    return tet_set.pop()\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    from itertools import permutations\n    numbers = list(range(1, n+1))\n    permutations = list(permutations(numbers, 2))\n    permutations.sort()\n    for p in permutations:\n        if (p[0]+p[1]==n):\n            return p[0]\n    return -1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # check if n is even or odd.\n    if n % 2 == 0:\n        n1 = n//2\n        n2 = n//4\n        n3 = n//8\n    else:\n        n1 = n//2\n        n2 = n//4\n        n3 = n//8\n    \n    # sum all the combinations\n    n_tetrahedral = n1 + n2 + n3\n    # find the nth tetrahedral number\n    return n_tetrahedral\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n > 0: \n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n    else: \n        return n + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        raise ValueError(\"tetrahedral_number must be greater than 0.\")\n    if n == 1:\n        return 1\n    return n*(n+1)//2\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (r ** 3) * math.pi\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 3.14 * (r ** 2)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Volume formula - volume of sphere is 3.14*r^3\n    # For simplicity, we use the following formula - first parameter is the radius and second is the height\n    # Formula: 3.14*r^3\n    # Formula: 3.14*r^3*2*pi\n    return 3.14 * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    # YOUR CODE HERE\n    return 4 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*(pi*r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4*3.14*(r*r)\n    print('The volume of a sphere with radius ',r,' is ',v)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4*math.pi*r**3)*(3.14159*(r**2))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # write your code here\n    v=4*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (math.pi * r ** 3)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = ''\n    for c in strr:\n        char += chr(ord(c) % 256)\n    return char\n    \ndef search_strr(strr, match_str):\n    '''\n    This function is written to find the string in the given string array.\n    '''\n    for i in range(len(strr)):\n        if strr[i] == match_str:\n            return i\n    return -1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    lst = []\n    while i<len(strr):\n        lst.append(ord(strr[i])%26)\n        i+=1\n    ans = []\n    for k in lst:\n        ans.append(chr(k))\n    return \"\".join(ans)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst = []\n    for c in strr:\n        lst.append(ord(c))\n    return sum(lst)%26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    new_str = \"\"\n    for i in range(len(strr)):\n        new_str += chr(ord(strr[i]) % 26 + ord('a'))\n    print(new_str)\n    return new_str\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ''.join([chr(ord(s) + int(c)) for s, c in zip(strr, range(26))])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ''.join(char for char in strr if ord(char)%26==0)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str = strr.lower()\n    str = str.replace(' ','')\n    str = str.replace(':','?')\n    str = str.replace(' ','')\n    str = str.replace('/',' ')\n    str = str.replace('.','')\n    str = str.replace(',',' ')\n    str = str.replace(';',' ')\n    str = str.replace('!',' ')\n    str = str.replace('-',' ')\n    str = str.replace('&',' ')\n    str = str.replace('(',' ')\n    str = str.replace(')',' ')\n    str = str.replace(';',' ')\n    str = str.replace('&',' ')\n    str = str.replace('(',' ')\n    str = str.replace(')',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = str.replace('_',' ')\n    str = st"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    char_list = list(strr)\n    mod_num = 0\n    while mod_num < len(char_list):\n        char = char_list[mod_num]\n        num = ord(char) % 26\n        mod_num += 1\n        char_list[mod_num] = chr(num + 97)\n    print(\"\".join(char_list))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = [ord(x) for x in strr]\n    char_list = [x % 26 for x in char_list]\n    return char_list\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    mod_10 = 0\n    for x in strr:\n        mod_10 += ord(x)\n    mod_10 = mod_10 % 26\n    return chr(mod_10)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    m=1\n    n=n-1\n    if n==1:\n        return n\n    else:\n        for i in range(n,n+m,1):\n            if (n-i)%2==1:\n                return n-i\n        return n-1\n        \ndef factorial(n):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # convert string to int\n    n = int(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n - 1) * 2 + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # My approach, but is still very slow\n    # def sequence(n):\n    #     arr = []\n    #     for i in range(n):\n    #         arr.append(i)\n    #     return arr\n    \n    # def sequence(n):\n    #     return (i for i in range(n))\n    \n    # arr = []\n    # for i in range(n):\n    #     arr.append(i)\n    \n    # return arr\n    \n    \n    # Start with the one that comes after the last number\n    # Then go to the next number in the sequence\n    # Find the next number in sequence\n    \n    # Now use this as starting point for the sequence\n    # i -1 because the index of the starting point is the last number in the sequence\n    # For each number in the sequence, just add the number to the end of the sequence\n    # The last number is the nth number in the sequence\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n*(n-1)*2\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence_length = len(str(n))\n    \n    if sequence_length == 1:\n        return n\n    \n    if sequence_length == 2:\n        return n*n\n    \n    if sequence_length == 3:\n        return (n*n*n)\n        \n    if sequence_length == 4:\n        return (n*n*n*n*n)\n    \n    if sequence_length == 5:\n        return (n*n*n*n*n*n*n)\n        \n    if sequence_length == 6:\n        return (n*n*n*n*n*n*n*n*n*n)\n    \n    if sequence_length == 7:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        \n    if sequence_length == 8:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n    \n    if sequence_length == 9:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n    \n    if sequence_length == 10:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        \n    if sequence_length == 11:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n    \n    if sequence_length == 12:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n    \n    if sequence_length == 13:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n    \n    if sequence_length == 14:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        \n    if sequence_length == 15:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n    \n    if sequence_length == 16:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n)\n        \n    if sequence_length == 17:\n        return (n*n*n*n*n*n*n*n*n*n*n*n*n)\n    \n    if sequence_length == 18:\n        return (n*n*n*n*n*n*n*n*n*n*n*n)\n    \n    if sequence_length == 19:\n        return (n*n*n*n*n*n*n)\n    \n    if sequence_length == 20:\n        return (n*n*n)\n    \n    if sequence_length == 21:\n        return (n*n*n)\n    \n    if sequence_length == 22:\n        return (n*n)\n        \n    if sequence_length == 23:\n        return (n*n)\n    \n    if sequence_length == 24:\n        return (n*n)\n    \n    if sequence_length == 25:\n        return (n*n*n*n)\n    \n    if sequence_length == 26:\n        return (n*n*n*n)\n    \n    if sequence_length == 27:\n        return (n*n*n*n)\n    \n    if sequence_length == 28:\n        return (n*n*n*n*n)\n    \n    if sequence_length == 29:\n        return (n*n*n*n*n)\n        \n    if sequence_length == 30:\n        return (n*n*n*n*n*n)\n        \n    if sequence_length == 31:\n        return (n*n*n*n*n)\n    \n    if sequence_length == 32:\n        return (n*n*n*n*n*n)\n    \n    if sequence_length == 33:\n        return (n*n*n)\n    \n    if sequence_length == 34:\n        return (n*n)\n    \n    if sequence_length == 35:\n        return (n*n*n*n)\n    \n    if sequence_length == 36:\n        return (n*n*n)\n    \n    if sequence_length == 37:\n        return (n*n)\n    \n    if sequence_length == 38:\n        return (n*n)\n    \n    if sequence_length == 39:\n        return (n*n*n)\n    \n    if sequence_length == 40:\n        return (n*n*n)\n    \n    if sequence_length == 41:\n        return (n*n*n*n)\n    \n    if sequence_length == 42:\n        return (n*n*n*n)\n    \n    if sequence_length == 43:\n        return (n*n*n*n)\n    \n    if sequence_length == 44:\n        return (n*n*n*n)\n    \n    if sequence_length == 45:\n        return (n*n)\n    \n    if sequence_length == 46:\n        return (n*n)\n    \n    if sequence_length == 47:\n        return (n*n)\n    \n    if sequence_length == 48:\n        return (n*n*n)\n    \n    if sequence_length == 49:\n        return (n*n*n)\n    \n    if sequence_length == 50:\n        return (n*n*n)\n    \n    if sequence_length == 51:\n        return (n*n*n*n)\n    \n    if sequence_length == 52:\n        return (n*n*n*n)\n    \n    if sequence_length == 53:\n        return (n*n*n*n)\n    \n    if sequence_length == 54:\n        return (n*n*n*n)\n    \n    if sequence_length == 55:\n        return (n*n*n*n)\n    \n    if sequence_length == 56:\n        return (n*n*n*n)\n    \n    if sequence_length == 57:\n        return (n*n*n*n)\n    \n    if sequence_length == 58:\n        return (n*n)\n    \n    if sequence_length == 59:\n        return (n)\n    \n    if sequence_length == 60:\n        return (n)\n    \n    if sequence_length == 61:\n        return (n)\n    \n    if sequence_length == 62:\n        return (n*n)\n    \n    if sequence_length == 63:\n        return (n*n)\n    \n    if sequence_length == 64:\n        return (n*n)\n    \n    if sequence_length == 65:\n        return (n*n*n)\n    \n    if sequence_length == 66:\n        return (n*n)\n    \n    if sequence_length == 67:\n        return (n*n*n)\n    \n    if sequence_length == 68:\n        return (n*n)\n    \n    if sequence_length == 69:\n        return (n*n)\n    \n    if sequence_length == 70:\n        return (n*n*n)\n    \n    if sequence_length == 71:\n        return (n*n*n)\n    \n    if sequence_length == 72:\n        return (n*n*n*n)\n    \n    if sequence_length == 73:\n        return (n*n*n*n)\n    \n    if sequence_length == 74:\n        return (n*n*n*n)\n    \n    if sequence_length == 75:\n        return (n*n*n*n)\n    \n    if sequence_length == 76:\n        return (n*n*n*n)\n    \n    if sequence_length == 77:\n        return (n*n)\n    \n    if sequence_length == 78:\n        return (n*n)\n    \n    if sequence_length == 79:\n        return (n)\n    \n    if sequence_length == 80:\n        return ("
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    count = 0\n    while True:\n        a += 1\n        if (n - a) % 2 == 1:\n            count += 1\n        n -= a\n        if n == 0:\n            return count\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    c = 0\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    while n > 1:\n        c = a + b\n        a = b\n        b = c\n        n -= 1\n    return c\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(n, 0, -1):\n        if n < i:\n            break\n        print(i)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**3\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=3.14*r*r\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = r*math.pi*3.14\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 3.14*r**2 * (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + (r**2 + "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #You may assume that the radius of the sphere is always non-negative.\n    area = (4/3)*3.14*(r**3)\n    print(\"The surface area of the sphere is: \" + str(area))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r,3)\ndef surfacearea_sphereness(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4/3 * math.pi * (math.pow(r,3) - 1)\ndef surfacearea_cylindrical(r, h):\n    '''\n    Write a function to calculate the surface area of a cylindrical sphere.\n    '''\n    return 4/3 * math.pi * (math.pow(r,3) - 1) * math.sin(math.pi * (r/h))\ndef surfacearea_cylindrical_sphere(r, h):\n    '''\n    Write a function to calculate the surface area of a cylindrical sphere.\n    '''\n    return 4/3 * math.pi * (math.pow(r,3) - 1) * math.sin(math.pi * (r/h)) * (math.pow(math.sin(math.pi * (r/h)),2))\ndef surfacearea_triangular(r, h):\n    '''\n    Write a function to calculate the surface area of a triangular sphere.\n    '''\n    return 4/3 * math.pi * (math.pow(r,3) - 1) * math.sin(math.pi * (r/h)) * (math.pow(math.sin(math.pi * (r/h)),3))\ndef surfacearea_sphere_vectors(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4/3 * math.pi * (math.pow(math.sqrt(v1**2 + v2**2 + v3**2),3))\ndef surfacearea_cylindrical_vectors(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a cylindrical sphere.\n    '''\n    return 4/3 * math.pi * (math.pow(math.sqrt(v1**2 + v2**2 + v3**2),3)) * (math.pow(math.sin(math.pi * (v1/v2)),2))\ndef surfacearea_triangular_vectors(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a triangle sphere.\n    '''\n    return 4/3 * math.pi * (math.pow(math.sqrt(v1**2 + v2**2 + v3**2),3)) * (math.pow(math.sin(math.pi * (v2/v3)),2))\ndef surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_sphere_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres_spheres(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres_spheres(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres_spheres(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres_spheres(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres_spheres(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres_spheres(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres_spheres(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres_spheres(v1,v2,v3):\n    '''\n    Write a function to calculate the surface area of a sphere and cylindrical sphere.\n    '''\n    return surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3) + surfacearea_sphere_and_cylindrical_vectors(v1,v2,v3)\ndef surfacearea_sphere_and_cylindrical_vectors_spheres_spheres(v1,v2,v3):\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #Define a variable with radius\n    r_ = r\n    area = 4*3.14*r_*r_*3\n    return area\n    \ndef surfacearea_cuboid(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    #Define a variable with size of x1,y1,z1,x2,y2,z2,x3,y3,z3\n    r1 = (x1+x2+x3)/3\n    r2 = (y1+y2+y3)/3\n    r3 = (z1+z2+z3)/3\n    area = 4*3.14*(r1*r2*r3)\n    return area\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Define a variable with radius\n    r_ = r\n    volume = 4/3 * 3.14 * r_**3\n    return volume\n    \ndef volume_cuboid(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    #Define a variable with size of x1,y1,z1,x2,y2,z2,x3,y3,z3\n    r1 = (x1+x2+x3)/3\n    r2 = (y1+y2+y3)/3\n    r3 = (z1+z2+z3)/3\n    volume = 4/3 * 3.14 * (r1*r2*r3)\n    return volume\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    #Define a variable with radius\n    r_ = r\n    volume = 4/3 * 3.14 * r_**3\n    return volume\n    \ndef area_cuboid(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    #Define a variable with size of x1,y1,z1,x2,y2,z2,x3,y3,z3\n    r1 = (x1+x2+x3)/3\n    r2 = (y1+y2+y3)/3\n    r3 = (z1+z2+z3)/3\n    volume = 4/3 * 3.14 * (r1*r2*r3)\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Define a variable with radius\n    r_ = r\n    volume = 4/3 * 3.14 * r_**3\n    return volume\n    \ndef volume_cuboid(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    #Define a variable with size of x1,y1,z1,x2,y2,z2,x3,y3,z3\n    r1 = (x1+x2+x3)/3\n    r2 = (y1+y2+y3)/3\n    r3 = (z1+z2+z3)/3\n    volume = 4/3 * 3.14 * (r1*r2*r3)\n    return volume\n    \ndef surface_area(x, y, z):\n    '''\n    Write a function to calculate the surface area of a plane\n    '''\n    #Define a variable with x,y,z\n    area = (0.5*(x**2 + y**2 + z**2))**0.5\n    return area\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere\n    '''\n    #Define a variable with radius\n    r_ = r\n    area = (0.5*(r_**2))**0.5\n    return area\n    \ndef surface_area_cuboid(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to calculate the surface area of a cube\n    '''\n    #Define a variable with size of x1,y1,z1,x2,y2,z2,x3,y3,z3\n    r1 = (x1+x2+x3)/3\n    r2 = (y1+y2+y3)/3\n    r3 = (z1+z2+z3)/3\n    area = (0.5*(r1**2))**0.5\n    area_cuboid = (0.5*(r1*r2*r3))**0.5\n    return area\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere\n    '''\n    #Define a variable with radius\n    r_ = r\n    area = (0.5*(r_**2))**0.5\n    return area\n    \ndef surface_area_cuboid(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to calculate the surface area of a cube\n    '''\n    #Define a variable with size of x1,y1,z1,x2,y2,z2,x3,y3,z3\n    r1 = (x1+x2+x3)/3\n    r2 = (y1+y2+y3)/3\n    r3 = (z1+z2+z3)/3\n    area = (0.5*(r1**2))**0.5\n    area_cuboid = (0.5*(r1*r2*r3))**0.5\n    return area\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere\n    '''\n    #Define a variable with radius\n    r_ = r\n    area = (0.5*(r_**2))**0.5\n    return area\n    \ndef surface_area_cuboid(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to calculate the surface area of a cube\n    '''\n    #Define a variable with size of x1,y1,z1,x2,y2,z2,x3,y3,z3\n    r1 = (x1+x2+x3)/3\n    r2 = (y1+y2+y3)/3\n    r3 = (z1+z2+z3)/3\n    area = (0.5*(r1**2))**0.5\n    area_cuboid = (0.5*(r1*r2*r3))**0.5\n    return area\n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    #Define a variable with radius\n    r_ = r\n    volume = 4/3 * 3.14 * r_**3\n    return volume\n    \ndef volume_cuboid(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    #Define a variable with size of x1,y1,z1,x2,y2,z2,x3,y3,z3\n    r1 = (x1+x2+x3)/3\n    r2 = (y1+y2+y3)/3\n    r3 = (z1+z2+z3)/3\n    volume = 4/3 * 3.14 * (r1*r2*"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    x = abs(r)\n    return (pi * (2*x - 1) + 1) / 2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Write your code here.\n    return 3.14 * (r ** 3)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x = n // 6\n    y = n - (x * 6)\n    if x == 0:\n        return n * 2\n    if y == 0:\n        return n * 5\n    if x == y:\n        return n * 9\n    if x == y + 1:\n        return n * 3\n    if x == y - 1:\n        return n * 4\n    else:\n        return n * 8\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        raise Exception(\"n must be positive integer\")\n    if n % 4 == 0:\n        return n\n    else:\n        return n * n + (n + 1) // 2 * (n + 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    \n    # Write your code here.\n    return n*6\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n - 1) + n + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n=int(n)\n    res=None\n    for i in range(n,0,-1):\n        if i==n:\n            continue\n        if i==n-1:\n            if n%16==1:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==2:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==3:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==4:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==5:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==6:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==7:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==8:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==9:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==10:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==11:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==12:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==13:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==14:\n                res=n\n            else:\n                res=n+1\n        if i==n-1:\n            if n%16==15:\n                res=n\n            else:\n                res=n+1\n    return res\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n * (n + 1)) // 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    for i in range(n):\n        print(hexagon(i+1), end=' ')\n    print()\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n < 0:\n        print(\"Error: negative number\")\n        return\n    else:\n        return int((n + 1) / 6) * 4 - 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None and dict3==None:\n        return None\n    elif dict1==None or dict2==None or dict3==None:\n        return None\n    elif len(dict1)!=len(dict2) or len(dict1)!=len(dict3):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        for i in dict3:\n            if i in res:\n                res[i]=dict3[i]\n        return res\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            res[i]=dict2[i]\n        return res\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef dict_to_list(dict):\n    '''\n    Convert a dictionary into a list of the keys.\n    '''\n    res=[]\n    for i in dict:\n        res.append(i)\n    return res\ndef convert_keys_to_list(dict1):\n    '''\n    Convert a dictionary into a list of the keys.\n    '''\n    res=[]\n    for i in dict1:\n        res.append(i)\n    return res\ndef merge_dictionaries_two_list(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_dict(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_list_dict(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_dict_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_dict_three(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_dict_two_list(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_dict_two_list_dict(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_dict_two_list_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_dict_two_list_two_dict(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_list_two_dict_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict2==None:\n        return None\n    elif dict1==None or dict2==None:\n        return None\n    elif len(dict1)!=len(dict2):\n        return None\n    else:\n        res=dict1.copy()\n        for i in dict2:\n            if i in res:\n                res[i]=dict2[i]\n        return res\ndef merge_dictionaries_two_dict_two_list_two_dict_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if dict1==None and dict"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1 = {key:dict1[key] for key in dict1 if key in dict2 and key in dict3}\n    dict2 = {key:dict2[key] for key in dict2 if key in dict1 and key in dict3}\n    dict3 = {key:dict3[key] for key in dict3 if key in dict1 and key in dict2}\n    return dict1, dict2, dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dic= dict()\n    for key in dict1.keys():\n        if key in dict2.keys():\n            new_dic[key]= dict1[key] + dict2[key]\n        else:\n            new_dic[key] = dict1[key]\n    for key in dict3.keys():\n        if key in dict2.keys():\n            new_dic[key] = dict2[key] + dict3[key]\n        else:\n            new_dic[key] = dict3[key]\n    return new_dic\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if key in dict2:\n            if key in dict3:\n                result[key] = dict2[key] + dict3[key]\n            else:\n                result[key] = dict2[key]\n        else:\n            result[key] = value\n    for key, value in dict2.items():\n        if key in dict1:\n            if key in dict3:\n                result[key] = dict1[key] + dict3[key]\n            else:\n                result[key] = dict1[key]\n        else:\n            result[key] = value\n    for key, value in dict3.items():\n        if key in dict2:\n            if key in dict1:\n                result[key] = dict1[key] + dict2[key]\n            else:\n                result[key] = dict1[key]\n        else:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #This is for writing into a dictionary in order to be able to merge dictionaries that are n different key value pairs\n    merged=dict(dict1, dict2, dict3)\n    #Because we want the second dictionary to be the last of the three dictionaries, we reverse the order of the dictionaries\n    #because we want the three dictionaries to get merged in an order\n    merged.reverse()\n    #The function calls itself to get the output of the three dictionaries\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    d.update(dict2)\n    d.update(dict3)\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dic = dict(dict1)\n    for i in dict2:\n        if i not in new_dic:\n            new_dic[i] = dict2[i]\n    for i in dict3:\n        if i not in new_dic:\n            new_dic[i] = dict3[i]\n    return new_dic\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n    return merged_dict\n    \n    \ndef merge_dictionaries_four(dict1,dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n    return merged_dict\n    \ndef merge_dictionaries_five(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n    \n    for key, value in dict4.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    return merged_dict\n    \ndef merge_dictionaries_six(dict1,dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n    \n    return merged_dict\n    \ndef merge_dictionaries_seven(dict1,dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    for key, value in dict4.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    for key, value in dict5.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    return merged_dict\n    \ndef merge_dictionaries_eight(dict1,dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    for key, value in dict4.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    for key, value in dict5.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    return merged_dict\n    \ndef merge_dictionaries_nine(dict1,dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    for key, value in dict4.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    for key, value in dict5.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n        \n    return merged_dict\n    \ndef merge_dictionaries_ten(dict1,dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        if key in dict2:\n            dict_merged = {}\n            dict_merged.update(dict2)\n            dict_merged.update(dict3)\n            if dict_merged.get(key) is not None:\n                merged_dict[key] = dict_merged[key]\n            else:\n                merged_dict[key] = value\n    "
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict3.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    # Get all the elements\n    res = dict()\n    for i in list1:\n        # If the element is not in the dictionary, its frequency is 1\n        if i not in res:\n            res[i] = 1\n        else:\n            # If the element is already in the dictionary, its frequency is frequency of this element plus 1\n            res[i] += 1\n            \n    return res\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if list1 is None:\n        return None\n    freq_dict = dict()\n    for x in list1:\n        if x in freq_dict.keys():\n            freq_dict[x] += 1\n        else:\n            freq_dict[x] = 1\n    return freq_dict\ndef hash_dict(d):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, returned as a dictionary.\n    '''\n    if d is None:\n        return None\n    hash_dict = dict()\n    for key in d.keys():\n        if key not in hash_dict.keys():\n            hash_dict[key] = 1\n        else:\n            hash_dict[key] += 1\n    return hash_dict\ndef freq_dict(d):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, returned as a dictionary.\n    '''\n    if d is None:\n        return None\n    freq_dict = dict()\n    for key in d.keys():\n        if key not in freq_dict.keys():\n            freq_dict[key] = 1\n        else:\n            freq_dict[key] += 1\n    return freq_dict\ndef hash_dict_count(d):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, returned as a dictionary.\n    '''\n    if d is None:\n        return None\n    hash_dict = dict()\n    for key in d.keys():\n        if key not in hash_dict.keys():\n            hash_dict[key] = 1\n        else:\n            hash_dict[key] += 1\n    return hash_dict\ndef bin_search_using_hash(ls1, key):\n    '''\n    Write a function to get the frequency of all the elements in a list and return the index of the first occurrence of the element in the list.\n    '''\n    if ls1 is None:\n        return None\n    index = -1\n    pos = len(ls1)\n    while pos > 0:\n        pos -= 1\n        if ls1[pos] == key:\n            index = pos\n            return index\n    return index\ndef bin_search_using_dict(ls1, key):\n    '''\n    Write a function to get the frequency of all the elements in a list and return the index of the first occurrence of the element in the list.\n    '''\n    if ls1 is None:\n        return None\n    index = -1\n    pos = len(ls1)\n    while pos > 0:\n        pos -= 1\n        if ls1[pos] == key:\n            index = pos\n            return index\n    return index\ndef bin_search(ls1, key, low, high):\n    '''\n    Write a function to get the frequency of all the elements in a list and return the index of the first occurrence of the element in the list.\n    '''\n    if ls1 is None:\n        return None\n    index = -1\n    pos = low\n    while pos < high:\n        pos += 1\n        if ls1[pos] == key:\n            index = pos\n            return index\n    return index\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\ndef freq_length(list1):\n    '''\n    Write a function to find the length of the set of all the elements in a list.\n    '''\n    return len(list1)\ndef least_frequent(list1):\n    '''\n    Write a function that returns the least number of different elements in a list, sorted in descending order.\n    '''\n    freq = freq_count(list1)\n    for i in freq:\n        if freq[i] == 1:\n            return i\ndef find_duplicates(list1):\n    '''\n    Write a function that returns the elements that appear multiple times.\n    '''\n    return list(set(list1))\ndef filter_duplicates(list1):\n    '''\n    Write a function that returns the elements that appear multiple times.\n    '''\n    return list(filter(lambda x: list1.count(x) > 1, list1))\ndef frequency_sort(list1):\n    '''\n    Write a function that sorts the frequency of each element in a list.\n    '''\n    freq = freq_count(list1)\n    for i in freq:\n        freq[i] = freq[i] / list1.count(i)\n    freq = collections.OrderedDict(sorted(freq.items(), key = lambda item: item[1], reverse=True))\n    return freq\ndef bucket_sort(list1, start, end):\n    '''\n    Write a function that sorts the frequency of each element in a list.\n    '''\n    freq = freq_count(list1)\n    bucket_list = [[] for i in range(len(freq) + 1)]\n    for i in freq:\n        bucket_list[i].append(list1.count(i))\n    bucket_list = collections.OrderedDict(sorted(bucket_list, key=lambda item: item[1], reverse=True))\n    for i in range(len(freq)):\n        index = start\n        while index <= end and len(bucket_list[index]) < i:\n            index += 1\n        list1[start:index] = list(bucket_list[index].pop(0))\n    return list1\ndef selectionsort(list1):\n    '''\n    Write a function that sorts the frequency of each element in a list.\n    '''\n    freq = freq_count(list1)\n    for i in range(len(freq)):\n        min_index = i\n        for j in range(i + 1, len(freq)):\n            if freq[i] < freq[j]:\n                min_index = j\n        list1[i], list1[min_index] = list1[min_index], list1[i]\n    return list1\ndef heap_sort(list1):\n    '''\n    Write a function that sorts the frequency of each element in a list.\n    '''\n    freq = freq_count(list1)\n    for i in range(len(freq)):\n        index = 0\n        while index < len(freq) - i - 1:\n            if freq[index] > freq[index + 1]:\n                index += 1\n            elif freq[index] == freq[index + 1]:\n                index += 1\n                freq[index] = 1\n        list1[i], list1[index] = list1[index], list1[i]\n    return list1\ndef insertion_sort(list1):\n    '''\n    Write a function that sorts the frequency of each element in a list.\n    '''\n    freq = freq_count(list1)\n    for i in range(1, len(freq)):\n        j = i\n        while j > 0 and freq[j] < freq[j - 1]:\n            list1[j], list1[j - 1] = list1[j - 1], list1[j]\n            j -= 1\n    return list1\ndef merge_sort(list1):\n    '''\n    Write a function that sorts the frequency of each element in a list.\n    '''\n    freq = freq_count(list1)\n    def merge_sort_rec(low, high):\n        if high - low > 1:\n            mid = low + (high - low) // 2\n            merge_sort_rec(low, mid)\n            merge_sort_rec(mid, high)\n            i, j = low, mid + 1\n            while i < j:\n                if freq[list1[i]] < freq[list1[j]]:\n                    list1[i], list1[j] = list1[j], list1[i]\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n        else:\n            list1[low:high + 1] = list1[low:high + 1][::-1]\n    list1 = collections.deque(list1)\n    merge_sort_rec(0, len(list1))\n    return list1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of elements in a list.\n    freq = collections.Counter(list1)\n    # Return the frequency dictionary.\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = collections.Counter(list1)\n    return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = collections.Counter(list1)\n    print(dic)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = collections.Counter(list1)\n    return dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    for num in list1:\n        count = list1.count(num)\n        dic = collections.Counter(list1)\n        dic[num] = count\n    return dic\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    answer = 0\n    if N == 0:\n        answer = 0\n    elif N == 1:\n        answer = 1\n    else:\n        answer = N\n        for num in range(1,N+1):\n            if num == N:\n                answer = num\n            elif answer > num:\n                answer = num\n    return answer\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0 or N == 1:\n        return N\n    if N == 2:\n        return 1\n    if N > 2:\n        return closest_num(N-2) + closest_num(N-1)\n    \n    \n    \n    \ndef main():\n    N = int(input())\n    if N == 0:\n        print(0)\n        return\n    \n    print(closest_num(N))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lst = sorted(N)\n    lst.reverse()\n    i = 0\n    ans = lst[0]\n    for num in lst:\n        if i!= 0:\n            if num < ans:\n                ans = num\n        i += 1\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return max(range(1, N + 1))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(N, key=abs)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = N\n    for i in range(N, 0, -1):\n        if i < N:\n            if i < min_diff:\n                min_diff = i\n        else:\n            break\n    return min_diff\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    s = sorted([int(N)])\n    start = 0\n    end = len(s) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if s[mid] == N:\n            return mid\n        elif s[mid] < N:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        raise ValueError('Number must be greater than zero')\n    elif N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        return N + closest_num(N - 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    m = N\n    while N >= m:\n        m = m - (N-m)\n    return m\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    d = [10000] * (N+1)\n    d[0] = 0\n    for i in range(1, N+1):\n        d[i] = sys.maxsize\n        for j in range(i):\n            if i - j >= 0:\n                d[i] = min(d[i], d[j] + 1)\n    return d[N]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    else:\n        return max(map(len, list1))\n    \nprint(\"Hello world\")\nprint(len_log([\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for word in list1:\n        if len(word) > len(max(list1, key=len)):\n            max_length = len(word)\n    return max_length\n    \n    \n    \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    i = 0\n    for x in range(len(list1)):\n        if len(list1[i]) > len(list1[x]):\n            i = x\n    return i\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Insert your code here\n    \n    s = list1[0]\n    max = 0\n    for w in list1[1:]:\n        if len(w) > max:\n            max = len(w)\n    print(max)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for word in list1:\n        list2.append(len(word))\n    return max(list2)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        temp = 0\n        for i in range(len(list1)):\n            if list1[i]!= \" \":\n                temp = max(temp, len(list1[i]))\n        return temp\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #length of word = max(len(word_i) for word_i in list1)\n    return max(len(i) for i in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for element in list1:\n        if len(element) > max_len:\n            max_len = len(element)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    print(f'The length of the longest word in the given list is {max_len}')\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    #Using a loop\n    for i in list1:\n        # If the word is longer than the current longest word\n        if len(i) > max_length:\n            max_length = len(i)\n    print(max_length)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    n = len(sub_str)\n    count = 0\n    for i in range(len(str1)):\n        if sub_str[i:i+n] == str1:\n            count += 1\n        else:\n            if count == 0:\n                return False\n            count = 0\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1= str1.lower()\n    sub_str = sub_str.lower()\n    sub_str = sub_str.split(\" \")\n    \n    l=len(sub_str)\n    count=0\n    \n    for i in range(len(str1)-l+1):\n        if str1[i:i+l] in sub_str:\n            count+=1\n    return(count>=l*(l/2))\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1_len = len(str1)\n    for i in range(str1_len - len(sub_str)):\n        sub_str += str1[i]\n    return sub_str in str1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1.find(sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not sub_str or not str1:\n        return False\n    for index, char in enumerate(str1):\n        if char == sub_str[0]:\n            result = True\n        if not result:\n            return False\n        if len(sub_str) == 1:\n            return True\n        # update the new index and the previous char\n        # if the previous char is the current char, return True\n        # if the previous char is not the current char, update the new index\n        # if the previous char is not the current char, return False\n        elif char == sub_str[1]:\n            if index > 0:\n                # print(index, char, sub_str)\n                if sub_str[1]!= sub_str[index-1]:\n                    return False\n            elif index == len(sub_str) - 1:\n                return False\n            # the current char is the previous char\n            else:\n                return True\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pos = 0\n    for i in range(len(str1)):\n        if(str1[i:i+len(sub_str)] == sub_str):\n            pos = i\n            break\n    return pos\n    \n    \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # write your code here\n    n=len(sub_str)\n    return sub_str in str1[:n]\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # A = 'python'\n    # B = 'is'\n    # C = 'a'\n    # D = 'apple'\n    # E = 'a'\n    # F = 'dict'\n    # G = 'for'\n    # H = 'this'\n    # I = 'is'\n    # J = 'function'\n    # K = 'that'\n    # L ='string'\n    # M = 'of'\n    # N = 'a'\n    # O = 'or'\n    # P = 'is'\n    # Q ='string'\n    # R = 'time'\n    # S = 'is'\n    # T = 'a'\n    # U = 'and'\n    # V ='strings'\n    # W = 'is'\n    # X = 'a'\n    # Y = 'is'\n    # Z = 'a'\n    # A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z = \\\n    #    list(str1)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Edge case when n = 0\n    if n == 0: \n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n == 0): \n        return True\n    elif (n%2==0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_undulating(n // 2)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True\n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return is_undulating(n//2) \n    return is_undulating(3*n-1) \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Your code here\n    \n    return 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return True if n % 2 == 1 else False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return False\n    else: \n        n = abs(n)\n        if n % 2 == 0: \n            return True\n        else: \n            return False"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2==0 and n>1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a ** b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \n    \n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(f\"a is {a} and b is {b}\")\n    # YOUR CODE HERE\n    print(f\"The result of a to b is {a**b}\")\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n    \nprint(power(2,3)) # Should be 2^3 = 32\nprint(power(2,4)) # Should be 2^4 = 16\nprint(power(2,5)) # Should be 2^5 = 1024\nprint(power(2,6)) # Should be 2^6 = 1024\nprint(power(2,7)) # Should be 2^7 = 1024\nprint(power(2,8)) # Should be 2^8 = 1024\nprint(power(2,9)) # Should be 2^9 = 1024\nprint(power(2,10)) # Should be 2^10 = 1024\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a*power(b,1/2)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #print(test_list)\n    min_index = -1\n    min_value = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_value:\n            min_index = i\n            min_value = test_list[i][0]\n    return test_list[min_index][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # write your code here\n    if len(test_list)==0:\n        return 0\n    else:\n        min_index=test_list[0][0]\n        for item in test_list:\n            if item[0]<min_index:\n                min_index=item[0]\n        return min_index\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # write your code here\n    if len(test_list)==0:\n        return 0\n    else:\n        max_index=test_list[0][0]\n        for item in test_list:\n            if item[0]>max_index:\n                max_index=item[0]\n        return max_index\ndef index_second_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the second value of the tuple with the largest first value.\n    '''\n    # write your code here\n    if len(test_list)==0:\n        return 0\n    else:\n        second_max_index=test_list[0][1]\n        for item in test_list:\n            if item[1]>second_max_index:\n                second_max_index=item[1]\n        return second_max_index\ndef index_second_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the second value of the tuple with the smallest first value.\n    '''\n    # write your code here\n    if len(test_list)==0:\n        return 0\n    else:\n        second_min_index=test_list[0][1]\n        for item in test_list:\n            if item[1]<second_min_index:\n                second_min_index=item[1]\n        return second_min_index\ndef merge(list_1, list_2):\n    '''\n    Given a list of tuples, merge the two lists into a new sorted list.\n    '''\n    if len(list_1)==0:\n        return list_2\n    elif len(list_2)==0:\n        return list_1\n    else:\n        # write your code here\n        index_1=list_1[0]\n        index_2=list_2[0]\n        if index_1[0]>index_2[0]:\n            return merge(list_1[1:], list_2)\n        elif index_1[0]==index_2[0]:\n            return index_1+index_2\n        else:\n            return index_2+index_1\ndef merge_sort(list_1):\n    '''\n    Given a list of tuples, sort the list and return it.\n    '''\n    # write your code here\n    if len(list_1)==0:\n        return list_1\n    else:\n        mid=len(list_1)//2\n        left=list_1[:mid]\n        right=list_1[mid:]\n        left=merge_sort(left)\n        right=merge_sort(right)\n        return merge(left,right)\ndef main():\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # write your code here\n    test_list = [\n        (1,1),\n        (2,3),\n        (3,4),\n        (4,5),\n        (5,6),\n        (5,7),\n        (6,8),\n        (7,9),\n        (8,10),\n        (9,11),\n        (10,12)\n        ]\n    print(index_minimum(test_list))\n    print(index_maximum(test_list))\n    print(index_second_minimum(test_list))\n    print(index_second_maximum(test_list))\nmain()\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # TODO: Replace this with a faster implementation.\n    def get_min_value(test_list):\n        lowest_second = test_list[0][1]\n        lowest_second_index = 0\n        for i in range(1, len(test_list)):\n            if test_list[i][1] < lowest_second:\n                lowest_second_index = i\n                lowest_second = test_list[i][1]\n        return lowest_second\n    return get_min_value(test_list)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    tuple_list = [(item[0], item[1]) for item in test_list]\n    min_idx = sorted(tuple_list)[0]\n    return min_idx[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list_copy = test_list.copy()\n    min_val = 0\n    for x in test_list_copy:\n        for y in x[1:]:\n            if y < min_val:\n                min_val = y\n    return min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list = sorted(test_list,key=itemgetter(1))\n    return new_list[0][0]\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    # Your code here\n    return test_list[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Create an empty list\n    index_list = []\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    if test_list:\n        return min(tuple(map(itemgetter(0), test_list)))\n    else:\n        return None\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    print('Index minimum test')\n    print('\\n'.join(['{:2d} {:2s}'.format(element[0],element[1]) for element in test_list]))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Take the input as a list of lists.\n    lst = lst[:]\n    # Create an empty list to store the lengths.\n    lengths = []\n    for i in lst:\n        # Add each item in the list to the lengths list.\n        lengths.append(len(i))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for i in lst:\n        for j in i:\n            print(len(j))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    smallest_index = 0\n    for index, item in enumerate(lst):\n        if item < smallest:\n            smallest = item\n            smallest_index = index\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # set a min value to 0\n    min_value = 0\n    # for each element in the list\n    for i in lst:\n        if len(i) < min_value:\n            min_value = len(i)\n    # return the number of the length\n    return min_value\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = sys.maxsize\n    for i in range(0,len(lst)):\n        for j in range(i+1,len(lst)):\n            temp = lst[i] + lst[j]\n            if temp < min_length:\n                min_length = temp\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n    if lst[0] < lst[1]:\n        return 1 + Find_Min_Length(lst[1:])\n    else:\n        return 1 + Find_Min_Length(lst[:-1])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return len(min(lst, key = len))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    '''\n    Write your code here.\n    '''\n    min_length = None\n    for lst_i in lst:\n        if min_length == None:\n            min_length = len(lst_i)\n        else:\n            if len(lst_i) < min_length:\n                min_length = len(lst_i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 100000\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    d = dict()\n    for lst_item in lst:\n        if lst_item not in d.keys():\n            d[lst_item] = 1\n        else:\n            d[lst_item] = d[lst_item] + 1\n    \n    for i in d.keys():\n        if d[i] == 1:\n            return i\n    \n    return -1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n%2 == 0:\n        return divisor(n//2)\n    else:\n        return (divisor(n-1))+1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 1 + divisor(n // 2)\n    else:\n        return divisor(n // 2) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n%i==0:\n            divisors += 1\n    return divisors\ndef main():\n    n = int(input(\"Give me a positive integer: \"))\n    print(f\"{n} can have {divisor(n)} divisors\")\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num = 0\n    for i in range(1, n):\n        if n % i == 0:\n            num += 1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1,n):\n        if n%i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            print(i)\n        i += 1\n    return 0\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c=0\n    for i in range(1,n+1):\n        if n%i==0:\n            c=c+1\n    return c\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1,n):\n        if n % i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return len([i for i in range(1,n+1) if n % i == 0])\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict_freq = {}\n    list_freq = []\n    for i in list1:\n        for j in i:\n            if j in dict_freq:\n                dict_freq[j] += 1\n            else:\n                dict_freq[j] = 1\n    for i in dict_freq.keys():\n        list_freq.append(dict_freq[i])\n    return dict_freq, list_freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for lst in list1:\n        for ele in lst:\n            if ele in freq:\n                freq[ele] += 1\n            else:\n                freq[ele] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq.keys():\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #code here\n    freq_dict = {}\n    for element in list1:\n        if element not in freq_dict.keys():\n            freq_dict[element] = 1\n        else:\n            freq_dict[element] += 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # list1 is a list of lists of length N\n    list1_freq = {}\n    \n    for l in list1:\n        for e in l:\n            if e not in list1_freq:\n                list1_freq[e] = 0\n            list1_freq[e] += 1\n    \n    return list1_freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # initialize an empty dictionary\n    dic = {}\n    \n    # iterate through each element in the flattened list\n    for i in range(0, len(list1)):\n        \n        # check if the element is not an empty string\n        if len(list1[i]) > 0:\n            # loop through the elements in the list\n            for k in range(0, len(list1[i])):\n                # add the key-value pair to the dictionary\n                if list1[i][k] not in dic:\n                    dic[list1[i][k]] = 1\n                else:\n                    dic[list1[i][k]] += 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # TODO: Write your code here\n    frequency_list = dict()\n    for list in list1:\n        for el in list:\n            if el not in frequency_list:\n                frequency_list[el] = 1\n            else:\n                frequency_list[el] += 1\n    return frequency_list\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for each in list1:\n        for i in each:\n            frequency_dictionary.setdefault(i, 0)\n            frequency_dictionary[i] += 1\n    return frequency_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in list1:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict_of_frequency = {}\n    for el in list1:\n        for i in range(len(el)):\n            if el[i] not in dict_of_frequency:\n                dict_of_frequency[el[i]] = 0\n            dict_of_frequency[el[i]] += 1\n    return dict_of_frequency\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Base Case\n    if len(numbers) == 0:\n        return 0\n    # Step 1 : Simply return the list element\n    return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    return(sum(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Your code here\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num_list = []\n    for i in range(0,len(numbers)):\n        num_list.append(numbers[i] * (i+1))\n    print(num_list)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply(numbers):\n        num = 1\n        for num in numbers:\n            numbers[0] = num\n            num *= numbers[0]\n        return numbers[0]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multipled_list = []\n    for number in numbers:\n        multipled_list.append(number * len(numbers))\n    print(multipled_list)\n    return multipled_list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(map(lambda x: int(x) * int(x), numbers)) / len(numbers)\n    # Answer: 13\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    result = [0] * len(numbers)\n    \n    # Use 'for' loop to multiply all the numbers in the list\n    for index, num in enumerate(numbers):\n        result[index] = num * result[index]\n        \n    # Return the result\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    l = len(numbers)\n    for i in range(l):\n        numbers[i] = numbers[i] * l\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Write your code here\n    for i in numbers:\n        yield i*(len(numbers))\n    \n    \n    "
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # First: initialize the binary form of the number to an empty string\n    n_binary_str = \"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert type(n) == int, \"Please convert n to an integer.\"\n    assert n >= 0, \"Please convert n to a non-negative integer.\"\n    assert n <= 255, \"Please convert n to an integer between 0 and 255.\"\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bits = []\n    while n!= 0:\n        bits.insert(0, str(n % 2))\n        n = n // 2\n    return ''.join(reversed(bits))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:]\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    return str(bin(n)[2:].zfill(8)) \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    if n < 0:\n        n = -n\n        sign = '-'\n    else:\n        sign = ''\n    if n == 0:\n        result = '0'\n    while n:\n        if n % 2 == 0:\n            result = result + '0'\n            n = n // 2\n        else:\n            result = result + '1'\n            n = (n-1) // 2\n    result = result + sign\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n!= 0:\n        binary += str(n%2)\n        n = n//2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0' \n    else: \n        return n > 0 and int(bin(n)[2:]) or '0' \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    elif n < 0:\n        return '-' + decimal_to_binary(abs(n))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    next_palindrome = num\n    for i in range(3, int(num**(1/2)) + 1):\n        if(num%i == 0):\n            num = num/i\n            if(num == 0):\n                break\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 1\n    while True:\n        i += 1\n        if num > i:\n            return i\n        if num < i:\n            return i - 1\n        if num % 2 == 0:\n            return i - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    elif num == 2:\n        return 3\n    elif num == 3:\n        return 4\n    else:\n        i = 0\n        j = 1\n        while i < num and j < num:\n            if num % i == 0:\n                return i\n            if num % j == 0:\n                return j\n            i += 1\n            j += 1\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest = num\n    while num % 10 == 0:\n        num //= 10\n    \n    while num % 10 == 10:\n        num //= 10\n    \n    while num % 10 == 11:\n        num //= 10\n    \n    while num % 10 == 0:\n        num //= 10\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num==1 or num==0:\n        return num\n    else:\n        return next_smallest_palindrome(int(str(num)[::-1]))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    elif num < 0:\n        print(\"Error: Negative number cannot be represented as a palindrome\")\n        return None\n    else:\n        if num % 2 == 0:\n            return 2 * next_smallest_palindrome(num // 2)\n        else:\n            return next_smallest_palindrome(num // 2) + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return -1\n    if num == 0:\n        return 1\n    smallest = 2\n    for i in range(1,int(num / 2) + 1):\n        if is_palindrome(i) and is_palindrome(i - 1):\n            if num % i == 0:\n                num = num // i\n                smallest = i\n    return smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while (num % 10) == 0:\n        num /= 10\n    if num > 255:\n        return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 1:\n        return 0\n    if num == 1:\n        return 1\n    elif num % 2 == 0:\n        return num / 2\n    else:\n        return num * 3 + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 2:\n        return num\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def get_index(arr, n, k):\n        if k == 0:\n            return n\n        return get_index(arr, n, k - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if (arr[i]==k):\n            count += 1\n            if (count==k):\n                return i\n            else:\n                count = 0\n    \n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k-1) % len(arr)]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    k = int(k)\n    if k == 0:\n        return -1\n    if arr[k - 1] == 0:\n        return arr[k - 1]\n    else:\n        return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #your code here\n    if(k == 0):\n        return arr[k]\n    elif(k > len(arr) - 1):\n        return arr[len(arr) - 1]\n    else:\n        index = 0\n        while(index <= k - 1):\n            index += 1\n            if(arr[index] <= arr[k]):\n                break\n        return arr[index]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left_pointer = 0\n    right_pointer = len(arr) - 1\n    found = False\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # O(n) time | O(1) space\n    # arr = [1, 2, 3, 4, 5]\n    # k = 1\n    return arr[k]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # print(\"SnakeCase(word) = \", word)\n    return word.title()\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0].upper() == 'N':\n        word = word[1:]\n    if word[-1].upper() == 'Y':\n        word = word[:-1]\n    if word[1:].isalpha():\n        word = word[1:]\n    return word + 'Case'\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(x.title() for x in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    def split(s):\n        return s[0].lower() + s[1:].lower()\n    return ''.join(map(split, word.split('-')))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for i in range(len(word)):\n        if word[i].isalpha():\n            new_word += word[i].upper()\n        elif word[i] == '_':\n            new_word += word[i].lower()\n        elif word[i] == '-' or word[i] =='':\n            new_word += word[i]\n        else:\n            new_word += word[i]\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    words[0] = words[0].title()\n    return ''.join(x.capitalize() for x in words)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(i.capitalize() for i in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == \"\":\n        return word\n    else:\n        new_word = \"\"\n        prev_char = word[0]\n        for c in word:\n            if c!= prev_char:\n                new_word += c\n                prev_char = c\n        return snake_to_camel(new_word)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return n \n    elif n == m or n % 2 == 0:\n        return eulerian_num(n // 2, m) + m\n    else:\n        return eulerian_num(n - 1, m) + m\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # M = n x m\n    M = m\n    nums = [i for i in range(n)]\n    \n    # compute the set of all indices that make up the\n    # Eulerian path from n to 0\n    Euler = [0]\n    Euler.extend(range(n))\n    \n    while len(Euler) > 1:\n        # find the next index that makes up the Eulerian path\n        i = 0\n        while i < len(Euler):\n            if Euler[i] - Euler[i - 1] == 1:\n                break\n            i += 1\n        \n        # set the index of the Eulerian path to the next index\n        Euler[i] = Euler[i - 1]\n        \n        # remove the previous indices of the Eulerian path\n        Euler.pop(i - 1)\n        \n        # find the set of all indices of the remaining Eulerian path\n        Euler.extend(range(Euler[i] + 1, n))\n    \n    # return the Eulerian path\n    return Euler[0] * M\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if(n == m == 0): \n        return 0\n    if(n == 0): \n        return 1\n    if(n == 1): \n        return n \n    if(n < m): \n        return eulerian_num(n, m - 1) \n    else: \n        return eulerian_num(n - 1, m) \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a_list = []\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if i!= j and j % i == 0:\n                a_list.append(j)\n    if a_list == []:\n        return 0\n    else:\n        return a_list[0]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m: return 1\n    elif n == m: return 1\n    elif n < m: return 1 + eulerian_num(n-1, m)\n    return eulerian_num(n-1, m) + eulerian_num(n-2, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler = []\n    \n    # Generate the list of integers for the nodes. \n    for i in range(m):\n        euler.append(i+1)\n        \n    # Generate the list of integers for the edges. \n    for i in range(n):\n        euler.append(i+1)\n        \n    # Sort the list of integers. \n    euler.sort()\n    \n    # Create an array of all the integers in the list of integers. \n    a = []\n    for i in euler:\n        a.append(i)\n        \n    # Compare the values of the two lists.\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            return a[i]\n        \n    return 0"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n == m == 0):\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s = n + m\n    if s % 2!= 0: \n        print('The Eulerian number is', n, m)\n    else: \n        e = (n - 1) + (m - 1)\n        print('The Eulerian number is', e, s)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n \n    if (n > m): \n        return -1 \n    if (n % 2 == 1): \n        return -1 \n    if (n % 2 == 0): \n        return eulerian_num(n//2, m) \n    \n    \ndef main(): \n    num = int(input(\"Enter the number of vertices(n) and edges(e): \")) \n    print(\"Number of vertices: \", num) \n    print(\"Edge weights: \", end = \" \") \n    for i in range(num): \n        w = int(input()) \n        print(i + 1, \" \", end = \" \") \n        print(w, end = \" \") \n        \n    n, e = map(int, input().split()) \n    print(\"The Eulerian number is :\", eulerian_num(n, e)) \n    \nmain() "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # The implementation is basically\n    # e_n = n * n - n * m\n    # The implementation is given as follows:\n    # The input value is the m for the input\n    # n for the output\n    # e_n for the output\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # pass\n    output_list = []\n    for x in input_list:\n        tmp_list = []\n        for y in x:\n            tmp_list.append(y)\n        output_list.append(tmp_list)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for item in input_list:\n        for i in range(len(item)):\n            temp = item[i]\n            item[i] = item[len(item)-1]\n            item[len(item)-1] = temp\n        output_list.append(item)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    for i in range(len(input_list)):\n        output.append(sorted(input_list[i]))\n    return output\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list)==0:\n        return []\n    else:\n        new_list=[]\n        for sublist in input_list:\n            for each_string in sublist:\n                new_list.append(each_string)\n        return sorted(new_list)"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if input_list:\n        sorted_list = []\n        for i in input_list:\n            sorted_list.append(sorted(i))\n        sorted_list = sorted(sorted_list, key = lambda sublist: len(sublist))\n        return sorted_list\n    else:\n        return []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for j in range(len(input_list)):\n        for i in range(len(input_list[j])):\n            input_list[j][i] = input_list[j][i].lower()\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # return sorted(list(map(sorted, input_list)))\n    return sorted(sorted(input_list, key=lambda x: x[0]), key=lambda x: x[1])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # TODO: use a lambda to merge lists into a single list\n    \n    # TODO: use the sort method on the sublists to sort each sublist in the input list.\n    \n    # TODO: return the new list in sorted order\n    \n    \n    # TODO: use a lambda to get the first two words from each string, and place that in the new sublist\n    \n    # TODO: put that into a new sorted list with a lambda and merge the first two words into the new sublist\n    \n    # TODO: put the new sublist in the right place\n    \n    \n    # TODO: return the sorted list as a new list\n    \n    # TODO: use a lambda to find the length of each list\n    \n    # TODO: use a lambda to get the middle index of a list\n    \n    # TODO: write a test to check if the new sublist is as expected\n    \n    # TODO: sort the sublists and return the new sorted list\n    \n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if type(input_list) == type([]):\n        for i in range(len(input_list)):\n            input_list[i].sort(key=str.lower)\n    else:\n        raise TypeError(\"input_list must be a list of lists\")\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(sublist):\n        for i in range(len(sublist)):\n            sublist[i].sort()\n        return sublist\n    \n    return sort_sublist(input_list)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i:\n            c+=1\n    return c\n        \n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(list(filter(lambda x: x[1] == \"True\", lst)))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for num in lst:\n        if num == 1:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    s=0\n    for i in lst:\n        if(i):\n            s+=1\n    return s\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    def func(arr):\n        d = {}\n        for i in arr:\n            if i == True:\n                d[i] = d.get(i,0) + 1\n        return d\n    s = func(lst)\n    return s['True']\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [bool(i) for i in lst]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for element in lst:\n        if element == True:\n            count_true += 1\n    return count_true\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if (i==1):\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if(i):\n            cnt = cnt + 1\n    return cnt\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_tup) == len(test_list):\n        for i in range(len(test_list)):\n            test_tup.append((test_list[i],i))\n    else:\n        raise ValueError('The list is not as expected')\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    try:\n        print('Attempting to add list', test_tup)\n        test_list.append(test_tup)\n        print('Successfully added to list.')\n    except TypeError:\n        print('Attempting to add list', test_tup)\n        test_list.append(test_tup)\n        print('Failed. List too long.')\n    except Exception as e:\n        print('Failure.', e)\n        raise e\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    \n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in test_list:\n        test_tup.append(x)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_tup:\n        test_list += [test_tup]\n    return test_list\n    \ndef add_tuples(test_list, test_tup):\n    '''\n    Write a function to append the given tuple to the given list.\n    '''\n    if test_tup:\n        test_list += (test_tup,)\n    return test_list\n    \ndef add_tuples(test_list, test_tup):\n    '''\n    Write a function that takes as input a list, a tuple, and returns a\n    new list with all elements of the input list appended to the given\n    tuple.\n    '''\n    if test_tup:\n        test_list += test_tup\n    return test_list\n    \ndef get_test_list(test_list, tup, index = None):\n    '''\n    Get the element from the given list at the given index and return the\n    value if the given index is not None.\n    '''\n    try:\n        if tup:\n            return test_list[index]\n        return None\n    except IndexError:\n        return None\n    \ndef create_test_list(test_list, tup, index = None):\n    '''\n    Return a new list containing all elements of the given list, from the\n    given tuple, and removed from it. The tuple is returned as a tuple, and\n    if an index is not given, then the index of the last element is\n    returned.\n    '''\n    try:\n        if tup:\n            return test_list[index]\n        return tup\n    except IndexError:\n        return tup\n    \ndef get_test_tup(test_list, tup, index = None):\n    '''\n    Get the element from the given list at the given index and return the\n    value if the given index is not None.\n    '''\n    try:\n        if tup:\n            return test_list[index]\n        return tup\n    except IndexError:\n        return None\n    \ndef create_test_tup(test_list, tup, index = None):\n    '''\n    Return a new tuple from the given list, from the given tuple, and removed\n    from it. The tuple is returned as a tuple, and if an index is not\n    given, then the index of the last element is returned.\n    '''\n    try:\n        if tup:\n            return test_list[index]\n        return tup\n    except IndexError:\n        return tup\n    \ndef get_test_tup(test_list, tup, index = None):\n    '''\n    Get the element from the given list at the given index and return the\n    value if the given index is not None.\n    '''\n    try:\n        if tup:\n            return test_list[index]\n        return tup\n    except IndexError:\n        return None\n    \ndef get_index(test_list, tup):\n    '''\n    Return the index of the given tuple element in the given list.\n    '''\n    try:\n        if tup:\n            return test_list.index(tup)\n        return None\n    except ValueError:\n        return None\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    for i, j in test_tup:\n        test_list.append(i)\n        test_list.append(j)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    for i in range(len(num1)):\n        heapq.heappush(heap,[num1[i],i])\n    for i in range(len(num2)):\n        heapq.heappush(heap,[num2[i],i])\n    for i in range(len(num3)):\n        heapq.heappush(heap,[num3[i],i])\n    return heap\n    \ndef merge(num1,num2,num3):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    heap = []\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    for i in range(len(num1)):\n        heapq.heappush(heap,[num1[i],i])\n    for i in range(len(num2)):\n        heapq.heappush(heap,[num2[i],i])\n    for i in range(len(num3)):\n        heapq.heappush(heap,[num3[i],i])\n    return heap\n    \ndef merge_two_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    heap = []\n    for i in range(len(num1)):\n        heapq.heappush(heap,[num1[i],i])\n    for i in range(len(num2)):\n        heapq.heappush(heap,[num2[i],i])\n    return heap\n    \ndef merge_3_lists(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    heap = []\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    for i in range(len(num1)):\n        heapq.heappush(heap,[num1[i],i])\n    for i in range(len(num2)):\n        heapq.heappush(heap,[num2[i],i])\n    for i in range(len(num3)):\n        heapq.heappush(heap,[num3[i],i])\n    return heap\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a=[]\n    b=[]\n    c=[]\n    i=0\n    while(i<len(num1)):\n        a.append(num1[i])\n        i=i+1\n    i=0\n    while(i<len(num2)):\n        b.append(num2[i])\n        i=i+1\n    i=0\n    while(i<len(num3)):\n        c.append(num3[i])\n        i=i+1\n    ans=[]\n    i=0\n    while(i<len(a)):\n        if(a[i] not in ans):\n            ans.append(a[i])\n        i=i+1\n    i=0\n    while(i<len(b)):\n        if(b[i] not in ans):\n            ans.append(b[i])\n        i=i+1\n    i=0\n    while(i<len(c)):\n        if(c[i] not in ans):\n            ans.append(c[i])\n        i=i+1\n    return ans\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    if l1<l2 and l2<l3:\n        for i in range(l1):\n            list1.append(num1[i])\n        for j in range(l2):\n            list2.append(num2[j])\n        for k in range(l3):\n            list3.append(num3[k])\n    else:\n        for i in range(l2):\n            list2.append(num2[i])\n        for j in range(l3):\n            list3.append(num3[j])\n        for k in range(l1):\n            list1.append(num1[k])\n    return list1+list2+list3\n    \ndef merge_sorted_list2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    if l1<l2 and l2<l3:\n        for i in range(l1):\n            list1.append(num1[i])\n        for j in range(l2):\n            list2.append(num2[j])\n        for k in range(l3):\n            list3.append(num3[k])\n    else:\n        for i in range(l2):\n            list2.append(num2[i])\n        for j in range(l3):\n            list3.append(num3[j])\n        for k in range(l1):\n            list1.append(num1[k])\n    return list1+list2+list3\n    \ndef merge_sorted_list3(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    if l1<l2 and l2<l3:\n        for i in range(l1):\n            list1.append(num1[i])\n        for j in range(l2):\n            list2.append(num2[j])\n        for k in range(l3):\n            list3.append(num3[k])\n    else:\n        for i in range(l2):\n            list2.append(num2[i])\n        for j in range(l3):\n            list3.append(num3[j])\n        for k in range(l1):\n            list1.append(num1[k])\n    return list1+list2+list3\n    \ndef merge_sorted_list4(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    if l1<l2 and l2<l3:\n        for i in range(l1):\n            list1.append(num1[i])\n        for j in range(l2):\n            list2.append(num2[j])\n        for k in range(l3):\n            list3.append(num3[k])\n    else:\n        for i in range(l2):\n            list2.append(num2[i])\n        for j in range(l3):\n            list3.append(num3[j])\n        for k in range(l1):\n            list1.append(num1[k])\n    return list1+list2+list3\n    \ndef merge_sorted_list5(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    if l1<l2 and l2<l3:\n        for i in range(l1):\n            list1.append(num1[i])\n        for j in range(l2):\n            list2.append(num2[j])\n        for k in range(l3):\n            list3.append(num3[k])\n    else:\n        for i in range(l2):\n            list2.append(num2[i])\n        for j in range(l3):\n            list3.append(num3[j])\n        for k in range(l1):\n            list1.append(num1[k])\n    return list1+list2+list3\n    \ndef merge_sorted_list6(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    if l1<l2 and l2<l3:\n        for i in range(l1):\n            list1.append(num1[i])\n        for j in range(l2):\n            list2.append(num2[j])\n        for k in range(l3):\n            list3.append(num3[k])\n    else:\n        for i in range(l2):\n            list2.append(num2[i])\n        for j in range(l3):\n            list3.append(num3[j])\n        for k in range(l1):\n            list1.append(num1[k])\n    return list1+list2+list3\n    \ndef merge_sorted_list7(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    if l1<l2 and l2<l3:\n        for i in range(l1):\n            list1.append(num1[i])\n        for j in range(l2):\n            list2.append(num2[j])\n        for k in range(l3):\n            list3.append(num3[k])\n    else:\n        for i in range(l2):\n            list2.append(num2[i])\n        for j in range(l3):\n            list3.append(num3[j])\n        for k in range(l1):\n            list1.append(num1[k])\n    return list1+list2+list3\n    \ndef merge_sorted_list8(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    if l1<l2 and l2<l3:\n        for i in range(l1):\n            list1.append(num1[i])\n        for j in range(l2):\n            list2.append(num2[j])\n        for k in range(l3):\n            list3.append(num3[k])\n    else:\n        for i in range(l2):\n            list2.append(num2[i])\n        for j in range(l3):\n            list3.append(num3[j])\n        for k in range(l1):\n            list1.append(num1[k])\n    return list1+list2+list3\n    \ndef merge_sorted_list9(num1,nu"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    s = []\n    heapq.heapify(s)\n    result = [0,0,0,0]\n    count = 0\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=[]\n    l2=[]\n    l3=[]\n    l1=num1\n    l2=num2\n    l3=num3\n    p1=0\n    p2=0\n    p3=0\n    if len(l1)==0:\n        print('Empty')\n    elif len(l2)==0:\n        print('Empty')\n    elif len(l3)==0:\n        print('Empty')\n    else:\n        while(p1<len(l1) and p2<len(l2) and p3<len(l3)):\n            if l1[p1]<l2[p2]<l3[p3]:\n                print(l1[p1],l2[p2],l3[p3])\n                l1.remove(l1[p1])\n                l2.remove(l2[p2])\n                l3.remove(l3[p3])\n                p1+=1\n                p2+=1\n                p3+=1\n            else:\n                p1+=1\n        print(l1)\n        print(l2)\n        print(l3)\n        print('\\n')\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # your code here\n    heapq.heappush(num1,num3)\n    heapq.heappush(num2,num3)\n    num3=heapq.heappop(num1)\n    heapq.heappush(num2,num3)\n    num3=heapq.heappop(num2)\n    heapq.heappush(num1,num3)\n    return num1,num2,num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap=[]\n    merged=[]\n    for i in num1:\n        heapq.heappush(heap,i)\n    for i in num2:\n        heapq.heappush(heap,i)\n    for i in num3:\n        heapq.heappush(heap,i)\n    for i in range(len(heap)-1):\n        merged.append(heapq.heappop(heap))\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=[]\n    l2=[]\n    l3=[]\n    l1.append(num1)\n    l2.append(num2)\n    l3.append(num3)\n    sorted_list=[]\n    sorted_list.extend(l1)\n    sorted_list.extend(l2)\n    sorted_list.extend(l3)\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=[]\n    l2=[]\n    l3=[]\n    l1.append(num1)\n    l2.append(num2)\n    l3.append(num3)\n    if len(l1)==0:\n        return l3\n    if len(l2)==0:\n        return l1\n    if len(l3)==0:\n        return l2\n    if len(l3)==1:\n        return l3\n    if len(l1)>len(l2):\n        for i in range(len(l1)):\n            if l1[i]<l2[i]:\n                l1[i]=l1[i]+l2[i]\n            else:\n                l1[i]=l1[i]+l3[i]\n    elif len(l2)>len(l1):\n        for i in range(len(l2)):\n            if l2[i]<l1[i]:\n                l2[i]=l2[i]+l1[i]\n            else:\n                l2[i]=l2[i]+l3[i]\n    elif len(l1)==len(l2):\n        for i in range(len(l1)):\n            if l1[i]<l2[i]:\n                l1[i]=l1[i]+l2[i]\n            else:\n                l1[i]=l1[i]+l3[i]\n    return l1\ndef merge_sort(l):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if len(l)>1:\n        m=len(l)//2\n        l1=l[:m]\n        l2=l[m:]\n        return merge_sort(l1) + l2\n    else:\n        return l\ndef bubble_sort(l):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    for i in range(len(l)):\n        for j in range(len(l)-1-i):\n            if l[j]>l[j+1]:\n                l[j],l[j+1]=l[j+1],l[j]\n    return l\ndef select_sort(l):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    for i in range(len(l)):\n        min_val=i\n        for j in range(i+1,len(l)):\n            if l[j]<l[min_val]:\n                min_val=j\n        l[i],l[min_val]=l[min_val],l[i]\n    return l\ndef insertion_sort(l):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    for i in range(1,len(l)):\n        item=l[i]\n        j=i-1\n        while j>=0 and item<l[j] :\n            l[j+1]=l[j]\n            j-=1\n        l[j+1]=item\n    return l\ndef quick_sort(l):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    def partition(l,l1,pivot):\n        '''\n        Write a function to partition the list.\n        '''\n        low=pivot+1\n        high=len(l)-1\n        while low<high:\n            while low<high and l[low]<=l[pivot]:\n                low+=1\n            while low<high and l[high]>l[pivot]:\n                high-=1\n            if low<high:\n                l[low],l[high]=l[high],l[low]\n                low+=1\n                high-=1\n        l[low],l[high]=l[high],l[low]\n        return low\n    def quick(l,low,high):\n        '''\n        Write a function to sort a list in ascending order.\n        '''\n        if low<high:\n            p=partition(l,low,high)\n            quick(l,low,p-1)\n            quick(l,p+1,high)\n    quick(l,0,len(l)-1)\n    return l\ndef shell_sort(l):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    def partition(l,l1,l2,pivot):\n        '''\n        Write a function to partition the list.\n        '''\n        low=pivot+1\n        high=len(l)-1\n        while low<high:\n            while low<high and l[low]<=l[pivot]:\n                low+=1\n            while low<high and l[high]>l[pivot]:\n                high-=1\n            if low<high:\n                l[low],l[high]=l[high],l[low]\n                low+=1\n                high-=1\n        l[low],l[high]=l[high],l[low]\n        return low\n    def sort(l):\n        '''\n        Write a function to sort a list in ascending order.\n        '''\n        low=0\n        high=len(l)\n        while low<=high:\n            mid=low+high//2\n            if sort(l[low:mid])>=sort(l[mid:]) and sort(l[low:mid])>sort(l[mid+1:high]):\n                l[low:mid]=l[mid:mid+1]\n                low=mid+1\n                mid=0\n            elif sort(l[mid:high])<sort(l[low:mid]) and sort(l[mid+1:high])<sort(l[low:mid]):\n                l[mid:high]=l[low:mid+1]\n                low=mid+1\n                mid=high\n            else:\n                mid=low+int((high-low)/2)\n                if sort(l[low:mid])<sort(l[mid:]) and sort(l[mid+1:high])<sort(l[low:mid]):\n                    l[low:mid]=l[mid:mid+1]\n                    low=mid+1\n                    mid=0\n                else:\n                    l[mid:high]=l[low:mid+1]\n                    low=mid+1\n                    mid=high\n        return l\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]<l[j]:\n                l[i],l[j]=l[j],l[i]\n    return l\ndef shell_sort_f(l):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    def sort_func(l):\n        '''\n        Write a function to sort a list in ascending order.\n        '''\n        def sort(l,l1,l2):\n            '''\n            Write a function to sort a list in ascending order.\n            '''\n            mid=len(l)//2\n            low=0\n            high=len(l)\n            while low<=mid and high>=0:\n                if l[low]<l[mid] and l[low]<l[high]:\n                    l[low],l[high]=l[high],l[low]\n                elif l[low]>l[mid] and l[high]>l[mid]:\n                    l[low],l[high]=l[high],l[low]\n                else:\n                    low+=1\n                    high-=1\n            if low<=mid:\n                sort_func(l,l1,l2)\n                sort(l,l1,l2)\n                sort_func(l,l2,l)\n            else:\n                sort_func(l,l2,l)\n                sort(l,l2,l)\n        sort(l,l1,l2)\n    sort_func(l)\n    return l\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num_list1 = [x for x in num1]\n    num_list2 = [x for x in num2]\n    num_list3 = [x for x in num3]\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num_list1) and j < len(num_list2) and k < len(num_list3):\n        if num_list1[i] <= num_list2[j] and num_list2[j] <= num_list3[k]:\n            num_list1[i] = num_list1[i] + num_list2[j]\n            num_list2[j] = 0\n            num_list3[k] = num_list3[k] + num_list2[j]\n            j += 1\n        elif num_list1[i] > num_list2[j] and num_list2[j] > num_list3[k]:\n            num_list1[i] = num_list1[i] + num_list2[j]\n            num_list2[j] = 0\n            num_list3[k] = num_list3[k] + num_list2[j]\n            i += 1\n        else:\n            i += 1\n            j += 1\n            k += 1\n    while i < len(num_list1):\n        num_list1[i] = num_list1[i] + num_list2[j]\n        j += 1\n    while j < len(num_list3):\n        num_list3[k] = num_list3[k] + num_list2[j]\n        k += 1\n    return num_list1\ndef merge_sorted_list_aux(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num_list1 = sorted(num1)\n    num_list2 = sorted(num2)\n    num_list3 = sorted(num3)\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num_list1) and j < len(num_list2) and k < len(num_list3):\n        if num_list1[i] <= num_list2[j] and num_list2[j] <= num_list3[k]:\n            num_list1[i] = num_list1[i] + num_list2[j]\n            num_list2[j] = 0\n            num_list3[k] = num_list3[k] + num_list2[j]\n            j += 1\n        elif num_list1[i] > num_list2[j] and num_list2[j] > num_list3[k]:\n            num_list1[i] = num_list1[i] + num_list2[j]\n            num_list2[j] = 0\n            num_list3[k] = num_list3[k] + num_list2[j]\n            i += 1\n        else:\n            i += 1\n            j += 1\n            k += 1\n    while i < len(num_list1):\n        num_list1[i] = num_list1[i] + num_list2[j]\n        j += 1\n    while j < len(num_list3):\n        num_list3[k] = num_list3[k] + num_list2[j]\n        k += 1\n    return num_list1\ndef merge_sorted_list_2(num1,num2):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num_list1 = [x for x in num1]\n    num_list2 = [x for x in num2]\n    num_list3 = num1 + num2\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num_list1) and j < len(num_list2):\n        if num_list1[i] <= num_list2[j]:\n            num_list1[i] = num_list1[i] + num_list2[j]\n            num_list2[j] = 0\n            k += 1\n        elif num_list1[i] > num_list2[j]:\n            num_list1[i] = num_list1[i] + num_list2[j]\n            num_list2[j] = 0\n            i += 1\n        else:\n            i += 1\n            j += 1\n    while i < len(num_list1):\n        num_list1[i] = num_list1[i] + num_list2[j]\n        j += 1\n    while j < len(num_list3):\n        num_list3[k] = num_list3[k] + num_list2[j]\n        k += 1\n    return num_list1,num_list2,num_list3\ndef merge_sorted_list_2_2(num1,num2):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num_list1 = sorted(num1)\n    num_list2 = sorted(num2)\n    num_list3 = num1 + num2\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num_list1) and j < len(num_list2):\n        if num_list1[i] <= num_list2[j]:\n            num_list1[i] = num_list1[i] + num_list2[j]\n            num_list2[j] = 0\n            k += 1\n        elif num_list1[i] > num_list2[j]:\n            num_list1[i] = num_list1[i] + num_list2[j]\n            num_list2[j] = 0\n            i += 1\n        else:\n            i += 1\n            j += 1\n    while i < len(num_list1):\n        num_list1[i] = num_list1[i] + num_list2[j]\n        j += 1\n    while j < len(num_list3):\n        num_list3[k] = num_list3[k] + num_list2[j]\n        k += 1\n    return num_list1,num_list2,num_list3\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i = 0\n    for x in range(n):\n        if (s[i] % 2!= 0):\n            s[i] = '1' + s[i]\n        else:\n            s[i] = '0' + s[i]\n        i += 1\n    return int(''.join(s))\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,len(s),1):\n        if int(s[i])%2!= 0:\n            count = count+1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code goes here\n    return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum([len(s)-i for i in range(n) if (s[i]%2)])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (s[n-1::2]+s[:n//2]+s[n//2::2])*(n%2==0)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string=''\n    for i in range(0,n):\n        string+=s[i]\n    odd=0\n    for i in range(0,n):\n        if(int(string[i])%2!=0):\n            odd+=1\n    return odd\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n==0): \n        return 0\n    if(n==1): \n        return 1\n    count=0\n    for i in range(1,n//2+1):\n        if(s[i-1]=='1'):\n            count+=1\n        if(s[i+n-1]=='1'):\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #initializing the count\n    count = 0\n    \n    #For loop\n    for i in range(n):\n        if i%2!= 0:\n            count += 1\n            \n    #returning count\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==1:\n        return 1\n    else:\n        return odd_Equivalent(s,n-1)\n        \ndef even_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    if n==1:\n        return 1\n    else:\n        return even_Equivalent(s,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    output=0\n    for i in s:\n        if int(i)%2:\n            output+=1\n    return output\nprint(odd_Equivalent('1011',6))"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    newlist=[]\n    for item in nestedlist:\n        if isinstance(item,list):\n            for i in item:\n                if isinstance(i,list):\n                    for j in i:\n                        newlist.append(j)\n                else:\n                    newlist.append(i)\n        else:\n            newlist.append(item)\n    return newlist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    if nestedlist == []:\n        return []\n    if nestedlist[0] == []:\n        return nestedlist\n    if nestedlist[0][0] == nestedlist[0][1]:\n        return nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return (set(nestedlist[0]).intersection(*nestedlist[1:]))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here.\n    \n    return set([i for i in nestedlist])\n    \ndef common_elements_2(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here.\n    \n    return list(set([i for i in nestedlist if len(i)>0]))\n    \ndef common_elements_3(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here.\n    \n    return list(set([i for i in nestedlist if len(i)>0]))\n    \ndef common_elements_4(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here.\n    \n    return set([i for i in nestedlist if len(i)>0])\n    \ndef common_elements_5(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here.\n    \n    return set([i for i in nestedlist if len(i)>0])\n    \ndef main():\n    nestedlist1 = [1,2,[3,4]]\n    nestedlist2 = [1,2,[3,4,5,6]]\n    print(common_elements_2(nestedlist1))\n    print(common_elements_2(nestedlist2))\n    print(common_elements_3(nestedlist1))\n    print(common_elements_3(nestedlist2))\n    print(common_elements_4(nestedlist1))\n    print(common_elements_4(nestedlist2))\n    print(common_elements_5(nestedlist1))\n    print(common_elements_5(nestedlist2))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty list and an array for the elements in the nested list.\n    result = []\n    \n    # Loop through the nested list and find the common elements.\n    for nestedlist in nestedlist:\n        # If there is a sublist, then extract the sublist and append to a separate list.\n        if len(nestedlist) > 1:\n            temp = []\n            for i in nestedlist:\n                if i not in temp:\n                    temp.append(i)\n            result.append(temp)\n        \n    # Return the result of the list.\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # TODO: write a function to find the common elements in given nested lists\n    pass"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # https://www.geeksforgeeks.org/python-list-comprehension-and-set-operators/\n    common = set()\n    for i in range(len(nestedlist)):\n        for j in range(i+1,len(nestedlist)):\n            if nestedlist[i] == nestedlist[j] and i!= j:\n                common.add(nestedlist[i])\n                \n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def is_in(item):\n        for i in range(len(nestedlist)):\n            if nestedlist[i] == item:\n                return True\n        return False\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    count = 0\n    for each in nestedlist:\n        if isinstance(each,list):\n            count += common_in_nested_lists(each)\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_ele = set()\n    for nestedlist1 in nestedlist:\n        for nestedlist2 in nestedlist:\n            if nestedlist1 == nestedlist2:\n                common_ele.add(nestedlist1)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) == 0:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        for k,v in item.items():\n            if v == '':\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        for key, value in dict.items():\n            if value == '':\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i.values())\n    if not any(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] is None:\n                empty = False\n    if empty == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i is not None:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        print(\"It's empty!\")\n        exit()\n    else:\n        print(\"Dictionaries are not empty\")\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        for key in dictionary:\n            if dictionary[key] == '':\n                return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for list1_item in list1:\n        if list1_item == {}:\n            return True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_list = []\n    for num in nums:\n        num_list.append(int(num))\n    return num_list[0"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # YOUR CODE HERE\n    if nums == ():\n        return 0\n    else:\n        return int(nums[0]) * nums[1]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i=0\n    for num in nums:\n        i=i*10+num\n    return i\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    while i < len(nums):\n        nums[i] = int(nums[i])\n        i += 1\n    return nums\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return nums[0] * 1000 + nums[1] * 100 + nums[2]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #t = (1, 2, 3, 4, 5, 6, 7, 8)\n    #print(t)\n    #print(type(t))\n    #return tuple(map(lambda x: int(x), t))\n    return tuple(map(int, nums))\n    #return tuple(map(lambda x: int(x) if x.isdigit() else x, nums))\n    \ndef lst_to_string(lst):\n    '''\n    Write a function that takes a list of integers and returns a list with the same order, where each value represents a single line in a new line.\n    '''\n    #t = [1, 2, 3, 4, 5, 6, 7, 8]\n    #print(t)\n    #print(type(t))\n    #return t\n    return \"\\n\".join(map(str, lst))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    output = 0\n    for i in range(len(nums)):\n        output += nums[i] * 10**i\n    return output\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(map(int,nums))\n    return nums[0]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    floated_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            floated_list.append(float(test_list[i][j]))\n    return floated_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # convert each element in the list to float\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_of_floats = []\n    for elements in test_list:\n        try:\n            for element in elements:\n                float(element)\n        except:\n            list_of_floats.append(element)\n    return list_of_floats\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def convert_list_to_float(test_list):\n        '''\n        Write a function that converts all possible convertible elements in a list of lists to floats.\n        '''\n        num_list = []\n        for elem in test_list:\n            for num in elem:\n                num = num.replace(' ', '.')\n                num = float(num)\n                num_list.append(num)\n        num_list.append(len(test_list))\n        return num_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def convert(value, from_list, to_list):\n        '''\n        Convert the value to a list of floats, if possible, using the conversion from_list and to_list,\n        if possible.\n        '''\n        if value in from_list or value in to_list:\n            return value\n        elif from_list:\n            return from_list[0] + convert(value, from_list[1:], to_list)\n        elif to_list:\n            return to_list[0] + convert(value, to_list[1:], from_list)\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return [convert(i, test_list, test_list[-1]) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Input: \n    # test_list = A, B, C, D, E, F\n    # Output:\n    # A_to_F = [[1.0, 1.0, 2.0, 2.0, 3.0, 3.0],\n    #         [1.0, 1.0, 2.0, 2.0, 3.0, 3.0],\n    #         [1.0, 1.0, 2.0, 2.0, 3.0, 3.0],\n    #         [1.0, 1.0, 2.0, 2.0, 3.0, 3.0],\n    #         [1.0, 1.0, 2.0, 2.0, 3.0, 3.0]]\n    # \n    # METHOD:\n    # 1. Loop over every element in test_list.\n    # 2. Convert all possible elements to floats (list)\n    # 3. Return the converted list\n    # \n    # HINT:\n    # 1. Assume all possible elements in test_list are integers.\n    # 2. Assume all possible elements in test_list are floats.\n    # 3. Assume all elements in the input are of the same type.\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if type(test_list) is list:\n        for ele in test_list:\n            for x in ele:\n                x = float(x)\n                test_list.append(x)\n    else:\n        raise ValueError(\"argument must be a list of lists\")\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #Error checking\n    #If not all elements are convertible, an error is thrown\n    if len(test_list) == 0:\n        raise ValueError('Empty list')\n    else:\n        pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if len(item) == 0:\n            continue\n        for i in range(len(item)):\n            item[i] = float(item[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # find the number of elements\n    elements = len(test_list)\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split(' ') \n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == None:\n        return list()\n    else:\n        string = string.split()\n        return list(string)\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.replace(' ', '')\n    return string.split(',')\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [ i.strip().split(' ') for i in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_words = string.split(' ')\n    return list_of_words\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_words = []\n    for i in string.split():\n        list_of_words.append(i.strip())\n    return list_of_words\n    \ndef list_to_string(list_of_words):\n    '''\n    Write a function to convert a list of strings to a string of words.\n    '''\n    new_string = ''\n    for i in range(len(list_of_words)):\n        new_string += list_of_words[i]\n        if i < len(list_of_words) - 1:\n            new_string +=''\n    return new_string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    temp = 0\n    while i <= j:\n        temp = arr[i] + arr[j]\n        if temp > temp:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif temp == temp:\n            return arr[i]\n        else:\n            i += 1\n            j -= 1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return None\n    slow = 0\n    fast = 0\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        if arr[i] == arr[j]:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] < arr[j]:\n            i += 1\n        elif arr[j] < arr[i]:\n            j -= 1\n    if count == 1:\n        return arr[i]\n    elif count == 0:\n        return -1\n    else:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    print(sorted(arr))\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            arr[i-1] = arr[i]\n    print(sorted(arr))\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    h = {}\n    for i in range(len(arr)):\n        h[arr[i]] = 1 + h[arr[i]]\n    for i in range(1, len(arr)):\n        if h[arr[i]] == 1:\n            if arr[i] in h:\n                if arr[i] not in h:\n                    h[arr[i]] = 0\n                h[arr[i]] += 1\n    x = 0\n    for i in h:\n        if h[i] == 1:\n            x = i\n            break\n    return x\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        m = i + (j - i) // 2\n        if arr[m] == arr[m + 1]:\n            j = m - 1\n        else:\n            i = m + 1\n    return arr[j + 1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # sort the array\n    arr = sorted(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    max_i = 0\n    min_i = len(arr) - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    hash_map = {}\n    for element in arr:\n        if element in hash_map:\n            hash_map[element]+=1\n        else:\n            hash_map[element] = 1\n    for key in hash_map:\n        if hash_map[key] == 1:\n            return key\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    idx = 0\n    while idx < len(arr):\n        if arr[idx]!= arr[idx+1]:\n            arr[idx], arr[idx+1] = arr[idx+1], arr[idx]\n            idx += 2\n        else:\n            idx += 1\n    return arr[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    if not list1:\n        return 0\n    elif len(list1)==1:\n        return list1[0][0]\n    elif len(list1)==2:\n        return list1[0][0]*list1[1][0]\n    elif len(list1)==3:\n        return max(list1[0][0]*list1[1][0]*list1[2][0],list1[0][1]*list1[1][1]*list1[2][1])\n    else:\n        p1=p2=1\n        for i in list1:\n            p1,p2=p2,max(p1*i[0],p2*i[1])\n        return p1*p2\n        \nif __name__ == '__main__':\n    \n    list1=[1,2,3]\n    print(\"The maximum product of a given list is\", max_product_tuple(list1))\n    \n    list2=[4,6,8,9]\n    print(\"The maximum product of a given list is\", max_product_tuple(list2))\n    \n    list3=[1,3,5,7,9,10,15,20]\n    print(\"The maximum product of a given list is\", max_product_tuple(list3))\n    \n    "
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for x in list1:\n        for y in list1:\n            if y > x:\n                if max < abs(y - x):\n                    max = abs(y - x)\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][1] > list1[j][1]:\n                prod = list1[i][0] * list1[j][0]\n                if prod > max_prod:\n                    max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #Your code goes here\n    #Time Complexity O(n^2)\n    #Space Complexity O(1)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = list1[0] * list1[1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_num = 0\n    for i in range(len(list1)-1):\n        max_num = max(max_num, list1[i][1] * list1[i+1][1])\n    return max_num\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            lst.append(list1[i][0]*list1[j][1])\n    return max(lst)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 0\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n    \n    "
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    if len(list1) > 0:\n        for i in range(len(list1)):\n            for j in range(i + 1, len(list1)):\n                max_product = max(list1[i] * list1[j], max_product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            try:\n                max_product = max(list1[i] * list1[j], max_product)\n            except:\n                print(\"One of the elements in the list doesn't have a product. Returning 0\")\n                return 0\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for i in range(1, limit+1):\n        if i in amicable:\n            continue\n        for j in range(i+1, limit+1):\n            if i+j in amicable:\n                continue\n            if i*j in amicable:\n                continue\n            amicable.append(i+j)\n            if i!= j:\n                amicable.remove(i)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum=0\n    for i in range(1,limit):\n        is_divisible=True\n        if i%2==0:\n            sum=sum+i\n            is_divisible=False\n        elif i%3==0:\n            sum=sum+i\n            is_divisible=False\n        elif i%5==0:\n            sum=sum+i\n            is_divisible=False\n        elif i%9==0:\n            sum=sum+i\n            is_divisible=False\n        elif i%6==0:\n            sum=sum+i\n            is_divisible=False\n        if is_divisible:\n            print(i)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([1 for i in range(1,limit+1) if i not in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]])\n    "
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_num = [1,1]\n    while sum <= limit:\n        if amicable_num[0] % amicable_num[1] == 0:\n            sum += amicable_num[1]\n            amicable_num[0] += amicable_num[1]\n        else:\n            amicable_num.append(amicable_num[0] * amicable_num[1])\n            amicable_num[1] += amicable_num[1]\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        n = i\n        if i in amicable_numbers:\n            continue\n        for j in range(i + 1, limit + 1):\n            if n in range(i, j):\n                if j == n:\n                    amicable_numbers.append(i * n)\n                elif j % n == 0 and n % j == 0:\n                    amicable_numbers.append(i * n)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_numbers = 0\n    amicable_numbers = set()\n    for n in range(1, limit+1):\n        if n%10 == 0:\n            sum_of_numbers += n\n        else:\n            if n not in amicable_numbers:\n                amicable_numbers.add(n)\n                if n in amicable_numbers:\n                    sum_of_numbers += n\n    return sum_of_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    amicable_numbers_sum = 0\n    if limit < 2:\n        return 0\n    if limit == 2:\n        return 2\n    for i in range(1, limit + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                amicable_numbers.add(j)\n                amicable_numbers_sum += j\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        if i == 1:\n            continue\n        elif i == 2:\n            sum += 1\n            continue\n        elif i % 2 == 0:\n            sum += i\n            continue\n        else:\n            div = i/2\n            sum += div\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_sum = 0\n    \n    # To be modified to a more efficient solution:\n    # Count the amount of divisors, \n    # increment the result, \n    # and add the amount of divisors to the sum. \n    # When a number is divisible by both two numbers, \n    # it has a amicable number.\n    # \n    # Use a loop for recursivity, and if the sum is greater than the limit, \n    # count the amicable numbers, then print the sum. \n    \n    for i in range(1, int(limit)+1):\n        for j in range(1, i+1):\n            if i%j == 0 and i!= j:\n                amicable_numbers.append(i)\n                amicable_sum += i\n                \n    print(amicable_numbers)\n    print(amicable_sum)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        digit = num\n        while digit%2 == 0:\n            digit /= 2\n        if num!= digit:\n            amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        angle = 0\n        return angle\n    if b == 0:\n        angle = -90\n        return angle\n    \n    if abs(a.imag) < abs(b.imag):\n        angle = (b.real * 180) + 90\n        return angle\n    if abs(a.real) < abs(b.real):\n        angle = (a.imag * 180) + 90\n        return angle\n    else:\n        angle = (a.real * 180) + 180 + (b.imag * 180)\n        return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if type(a)!= cmath.cmathd*2 and type(b)!= cmath.cmathd*2:\n        a = cmath.real(a)\n        b = cmath.real(b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c = complex(a,b)\n    c = (a+b)/2\n    angle = cmath.phase(c)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef angle_imag(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.imag(c)\ndef quadrature(n,m):\n    '''\n    Write a function that calculates the nth quadrature.\n    '''\n    # if m>n:\n    #     print(\"Invalid quadrature\")\n    #     return\n    return n*(1+4*(m-n))/(2*m-n)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    # Check to see if the input is a complex number.\n    if type(a) is complex:\n        # Check to see if a is real.\n        if a.imag == 0:\n            # Check to see if b is real.\n            if b.imag == 0:\n                # If both a and b are 0 return an angle of zero.\n                return 0\n            # If both a and b are not 0, then get the real part of a and b.\n            else:\n                return abs(a.real * b.imag) / (a.imag + b.imag)\n        # If a is real, then check if b is imaginary.\n        elif b.imag == 0:\n            # If both a and b are 0 return an angle of 0.\n            return 0\n        # If both a and b are real, then get the imaginary part of a and b.\n        else:\n            return abs(a.real * b.imag) / (a.imag + b.imag)\n    # If it is not a complex number, raise an error.\n    else:\n        raise TypeError('Type must be a complex number.')\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return 0\n    elif a>0 and b==0:\n        return cmath.pi/2\n    elif a<0 and b==0:\n        return -cmath.pi/2\n    elif a==0 and b==0:\n        return 0\n    elif a==0 and b>0:\n        return 2*cmath.pi\n    elif a==0 and b<0:\n        return -2*cmath.pi\n    else:\n        if b!=0:\n            return (b**2-a**2-1)/2*cmath.acos(a/b)\n        else:\n            return 0\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    from math import acos, sin, cos, atan2\n    return acos((b**2 - a**2 + cmath.sqrt(b**2 - 4*a*c))/2)*2*pi\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a[0], a[1])\n    #print(c)\n    delta = cmath.angle(c)\n    #print(delta)\n    return delta\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x=b-a\n    return abs(x.real) + abs(x.imag)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Declare angle\n    angle = cmath.phase(b)-cmath.phase(a)\n    # Reverse the angle\n    angle = angle*-1\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\ndef find_difference(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\ndef binary_to_decimal(binary):\n    '''\n    Write a function to convert a binary string to a decimal number.\n    '''\n    pass\ndef decimal_to_binary(decimal):\n    '''\n    Write a function to convert a decimal number to a binary string.\n    '''\n    pass\ndef binary_to_decimal_with_base(base):\n    '''\n    Write a function to convert a binary number to a decimal number.\n    '''\n    pass\ndef decimal_to_binary_with_base(base):\n    '''\n    Write a function to convert a decimal number to a binary string.\n    '''\n    pass\ndef bin_to_dec(string):\n    '''\n    Write a function to convert a binary string to a decimal number.\n    '''\n    pass\ndef decimal_to_bin(string):\n    '''\n    Write a function to convert a decimal number to a binary string.\n    '''\n    pass\ndef bin_to_dec_with_base(base):\n    '''\n    Write a function to convert a binary number to a decimal number.\n    '''\n    pass\ndef dec_to_bin(string):\n    '''\n    Write a function to convert a decimal number to a binary string.\n    '''\n    pass\ndef dec_to_bin_with_base(base):\n    '''\n    Write a function to convert a decimal number to a binary string.\n    '''\n    pass\ndef binary_to_dec_with_base(base):\n    '''\n    Write a function to convert a binary number to a decimal number.\n    '''\n    pass\ndef decimal_to_binary_with_base(base):\n    '''\n    Write a function to convert a decimal number to a binary string.\n    '''\n    pass\ndef bin_to_dec_with_base(base):\n    '''\n    Write a function to convert a binary number to a decimal number.\n    '''\n    pass\ndef dec_to_bin_with_base(base):\n    '''\n    Write a function to convert a decimal number to a binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    left = 0\n    right = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            left += 1\n        else:\n            right += 1\n    return right - left \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    diff = 0\n    n = len(string)\n    for i in range(n):\n        diff = (diff + 1) if string[i] == '0' else (diff - 1)\n    return diff\n    \ndef find_char(string, char):\n    '''\n    Write a function that returns the index of the first occurrence of char in the given string.\n    '''\n    \n    index = 0\n    n = len(string)\n    for i in range(n):\n        if string[i] == char:\n            index = i\n    return index\n    \ndef substitute_one_to_zero(string):\n    '''\n    Write a function that takes a string and replaces all 1s with 0s.\n    '''\n    \n    char = '0'\n    index = 0\n    n = len(string)\n    for i in range(n):\n        if string[i] == char:\n            index = i\n        elif string[i] == '0':\n            string = string.replace(string[i], '0', 1)\n    return string\n    \ndef remove_dups(string):\n    '''\n    Write a function that removes all duplicates from a given string.\n    '''\n    \n    char = '0'\n    n = len(string)\n    indices = []\n    for i in range(n):\n        if string[i] == char:\n            indices.append(i)\n        elif string[i] == '0':\n            indices.append(i)\n    for i in range(len(indices)):\n        for j in range(i+1, len(indices)):\n            if indices[i]!= indices[j]:\n                indices[i] = indices[j]\n    return ''.join(string[indices[i]:indices[i+1]] for i in range(len(indices)-1))\n    \ndef str2bool(v):\n    '''\n    Convert a string to a boolean, if it is neither a true nor false boolean\n    '''\n    if isinstance(v, bool):\n        return v\n    if v.lower() in ('yes', 'y', 'true', 't', '1', 'enable', 'on'):\n        return True\n    elif v.lower() in ('no', 'n', 'false', 'f', '0', 'disable', 'off'):\n        return False\n    else:\n        raise argparse.ArgumentTypeError('Boolean value expected.')\n    \ndef main(argv):\n    '''\n    The main program\n    '''\n    \n    args = parse_args(argv)\n    \n    if args.debug:\n        logging.basicConfig(level=logging.DEBUG)\n    else:\n        logging.basicConfig(level=logging.INFO)\n    \n    if args.verbose:\n        logging.getLogger().setLevel(logging.DEBUG)\n    else:\n        logging.getLogger().setLevel(logging.INFO)\n    \n    if args.file:\n        file = args.file\n        if not os.path.exists(file):\n            raise argparse.ArgumentTypeError(\"File not found\")\n        with open(file) as f:\n            text = f.read()\n    else:\n        text = sys.stdin.read()\n    \n    if args.debug:\n        if args.verbose:\n            logging.debug(text)\n        else:\n            logging.info(text)\n    else:\n        if args.verbose:\n            logging.info(text)\n        else:\n            logging.info(text)\n    \n    if args.debug:\n        if args.verbose:\n            logging.debug(\"Printing all words:\")\n            for word in text.split():\n                logging.debug(word)\n        else:\n            logging.info(\"Printing all words:\")\n            for word in text.split():\n                logging.info(word)\n    else:\n        if args.verbose:\n            logging.info(\"Printing all words:\")\n            for word in text.split():\n                logging.info(word)\n        else:\n            logging.info(\"Printing all words:\")\n            for word in text.split():\n                logging.info(word)\n    \n    if args.debug:\n        logging.debug(\"Substituting 1s with 0s:\")\n        logging.debug(substitute_one_to_zero(text))\n        logging.debug(\"Removing all repeated characters:\")\n        logging.debug(remove_dups(text))\n    else:\n        logging.info(\"Substituting 1s with 0s:\")\n        logging.info(substitute_one_to_zero(text))\n        logging.info(\"Removing all repeated characters:\")\n        logging.info(remove_dups(text))\n    \n    if args.debug:\n        logging.debug(\"Converting to binary:\")\n        logging.debug(bin(find_length(text)))\n        logging.debug(\"Converting to decimal:\")\n        logging.debug(int(text, 2))\n        logging.debug(int(text, 10))\n    else:\n        logging.info(\"Converting to binary:\")\n        logging.info(bin(find_length(text)))\n        logging.info(int(text, 2))\n        logging.info(int(text, 10))\n    \n    if args.debug:\n        logging.debug(\"Converting to binary:\")\n        logging.debug(bin(find_char(text, '0')+1))\n        logging.debug(bin(find_char(text, '1')+1))\n        logging.debug(bin(find_char(text, '2')+1))\n        logging.debug(bin(find_char(text, '3')+1))\n        logging.debug(bin(find_char(text, '4')+1))\n        logging.debug(bin(find_char(text, '5')+1))\n        logging.debug(bin(find_char(text, '6')+1))\n        logging.debug(bin(find_char(text, '7')+1))\n        logging.debug(bin(find_char(text, '8')+1))\n        logging.debug(bin(find_char(text, '9')+1))\n        logging.debug(bin(find_char(text, '0')+1))\n    else:\n        logging.info(\"Converting to binary:\")\n        logging.info(bin(find_char(text, '0')+1))\n        logging.info(bin(find_char(text, '1')+1))\n        logging.info(bin(find_char(text, '2')+1))\n        logging.info(bin(find_char(text, '3')+1))\n        logging.info(bin(find_char(text, '4')+1))\n        logging.info(bin(find_char(text, '5')+1))\n        logging.info(bin(find_char(text, '6')+1))\n        logging.info(bin(find_char(text, '7')+1))\n        logging.info(bin(find_char(text, '8')+1))\n        logging.info(bin(find_char(text, '9')+1))\n        logging.info(bin(find_char(text, '0')+1))\n    \n    if args.debug:\n        logging.debug(bin(find_char(text, '0')+1))\n    else:\n        logging.info(bin(find_char(text, '0')+1))\n    \n    if args.debug:\n        logging.debug(bin(find_char(text, '1')+1))\n    else:\n        logging.info(bin(find_char(text, '1')+1))\n    \n    if args.debug:\n        logging.debug(bin(find_char(text, '2')+1))\n    else:\n        logging.info(bin(find_char(text, '2')+1))\n    \n    if args.debug:\n        logging.debug(bin(find_char(text, '3')+1))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    num = []\n    for i in range(len(string)):\n        if string[i] == '0':\n            count = count + 1\n        else:\n            count = count - 1\n        num.append(count)\n    num.sort()\n    index = num.index(0)\n    if index == 0:\n        print(\"0s:\",string[index+1:])\n    else:\n        print(\"1s:\",string[index+1:])\n    \nstring = '0111111'\nfind_length(string)"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    i = 0\n    j = 0\n    while i < len(string):\n        if string[i] == '0':\n            count += 1\n            j += 1\n        else:\n            count -= 1\n        i += 1\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n        if string[i] == '1':\n            length -= 1\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # get the length of the string\n    # we'll use the naive method to find the length of the string\n    length = len(string)\n    # iterate over the string\n    for i in range(length):\n        # we'll only use the n_zero and n_one because they are not a substring of the string\n        if string[i] == \"0\":\n            # we'll use this loop to get the max diff\n            j = i\n            # start from the end\n            while j < length - 1:\n                # check if the next character is a 0\n                if string[j + 1] == \"0\":\n                    # if we have found a zero, then we'll now add one to the max diff\n                    if string[j] == \"0\":\n                        j += 1\n                    # otherwise we'll increment the diff\n                    else:\n                        j += 1\n                    # we're done with the length of the string\n                    break\n                # if we've got a 1, then we'll start a new loop for the next character\n                else:\n                    # we'll use this loop to get the max diff\n                    j = j + 1\n        # if it's not a zero, we'll just add the character\n        else:\n            # we'll use this loop to get the max diff\n            j = i\n            # start from the end\n            while j < length - 1:\n                # check if the next character is a 1\n                if string[j + 1] == \"1\":\n                    # if we have found a 1, then we'll now add one to the max diff\n                    if string[j] == \"1\":\n                        j += 1\n                    # otherwise we'll increment the diff\n                    else:\n                        j += 1\n                # if we've got a 0, we'll start a new loop for the next character\n                else:\n                    # we'll use this loop to get the max diff\n                    j = j + 1\n    # now that we've found the length, we'll find the max diff\n    return (j - length + 1)"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    result = 0\n    for i in range(n):\n        result += (string[i] == '0') if i < n - 1 else (string[i] == '1')\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_zeros = 0\n    num_ones = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            num_zeros += 1\n        elif string[i] == '1':\n            num_ones += 1\n    \n    return abs(num_zeros - num_ones)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    lst = [0 for i in range(256)]\n    for c in string: \n        lst[ord(c)-ord('0')] += 1\n    max_diff = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            diff = abs(lst[i] - lst[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n    \ndef remove_duplicates(string):\n    '''\n    Write a function to remove any duplicates from the given string.\n    '''\n    lst = list(string)\n    i=0\n    j=0\n    while i < len(lst):\n        if lst[i] == lst[i+1]:\n            lst.pop(i+1)\n        else:\n            i+=1\n    return \"\".join(lst)\n    \ndef reverse(string):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(string) == 0:\n        return \"\"\n    else:\n        return string[-1] + reverse(string[:-1])\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(string) == 0:\n        return \"\"\n    else:\n        return string[::-1] + reverse_string(string[1:])\n    \ndef count_to_square(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(int(n*(n+1)/2))\n    \ndef count_to_square_number(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1))\n    \ndef count_to_square_number_v1(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str((n+1)/2)\n    \ndef count_to_square_number_v2(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2)\n    \ndef count_to_square_number_v3(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v4(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v5(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v6(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v7(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v8(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v9(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v10(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v11(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v12(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v13(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v14(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v15(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v16(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/2) + str(n*(n+1)/2) + str(n*(n+1)/2) + str((n+1)/2)\n    \ndef count_to_square_number_v17(n):\n    '''\n    Write a function to count the occurrences of number n in a given string.\n    '''\n    return str(n*(n+1)) + str(n*(n+1)/"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    c = 0\n    for i in range(a,b+1):\n        if (i%2==0):\n            c+=i\n        elif(i%2!=0):\n            c=c+i\n    return c\n    \ndef print_sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    c = 0\n    for i in range(a,b+1):\n        if (i%2==0):\n            c+=i\n        elif(i%2!=0):\n            c=c+i\n    print(c)\n    \ndef sum_divisors(n): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    c = 0\n    for i in range(1,int(n**.5)+1):\n        if (n%i==0):\n            if (n//i==i):\n                c+=1\n            else:\n                c=c+i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Your code here\n    if a == 0 or b == 0:\n        return 0\n    elif a < b:\n        return sum(b,a % b)\n    else:\n        return sum(a,b % a)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum=0\n    for i in range(1,b+1):\n        if b%i==0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return (a+b)//2\n    \ndef factorize(num):\n    '''\n    Return the number of factors of a given integer.\n    '''\n    if num==0:\n        return 0\n    return num//sum(factorize(num//i) for i in range(1,num+1))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def common_divisor_of(n):\n        sum = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                sum += i\n        return sum\n    if a>b:\n        return common_divisor_of(b)\n    return common_divisor_of(a)\n    \n    \ndef sum_of_divisors(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def common_divisor_of(n):\n        sum = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                sum += i\n        return sum\n    return sum_of_divisors_of(a,b)\n    \n    \ndef sum_of_divisors_of(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        return sum_of_divisors_of(b,a)\n    return sum_of_divisors_of(a,b)\n    \n    \ndef sum_of_divisors(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum_of_divisors_of(a,b)\n    \n    \ndef common_numbers(a,b): \n    '''\n    Write a python function to find the sum of common numbers.\n    '''\n    return sum_of_numbers_of(a,b)\n    \n    \ndef sum_of_numbers(a,b): \n    '''\n    Write a python function to find the sum of common numbers.\n    '''\n    return sum_of_numbers_of(a,b)\n    \n    \ndef sum_of_numbers_of(a,b): \n    '''\n    Write a python function to find the sum of common numbers.\n    '''\n    return sum_of_numbers_of_of(a,b)\n    \n    \ndef sum_of_numbers_of_of(a,b): \n    '''\n    Write a python function to find the sum of common numbers.\n    '''\n    return sum_of_numbers_of_of_of(a,b)\n    \n    \ndef common_numbers_of(a,b): \n    '''\n    Write a python function to find the sum of common numbers.\n    '''\n    return sum_of_numbers_of_of_of(a,b)\n    \n    \ndef common_numbers_of_of(a,b): \n    '''\n    Write a python function to find the sum of common numbers.\n    '''\n    return common_numbers_of_of(a,b)\n    \n    \ndef common_numbers_of_of_of(a,b): \n    '''\n    Write a python function to find the sum of common numbers.\n    '''\n    return sum_of_numbers_of_of(a,b)\n    \n    \ndef sum_of_primes(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of(a,b)\n    \n    \ndef sum_of_primes_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of_of(a,b)\n    \n    \ndef sum_of_primes_of_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of_of_of(a,b)\n    \n    \ndef sum_of_primes_of_of_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of_of_of_of(a,b)\n    \n    \ndef sum_of_primes_of_of_of_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of_of_of_of(a,b)\n    \n    \ndef sum_of_primes_of_of_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of_of_of_of(a,b)\n    \n    \ndef sum_of_primes_of_of_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of_of_of(a,b)\n    \n    \ndef sum_of_primes_of_of_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of_of_of_of(a,b)\n    \n    \ndef sum_of_primes_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of(a,b)\n    \n    \ndef sum_of_primes(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of(a,b)\n    \n    \ndef sum_of_primes_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of_of(a,b)\n    \n    \ndef sum_of_primes_of_of(a,b): \n    '''\n    Write a python function to find the sum of the primes in a given range.\n    '''\n    return sum_of_primes_of_of(a,b)\n    \n    \ndef max_of_nums(a,b): \n    '''\n    Write a python function to find the maximum of a given range.\n    '''\n    return max_of_nums_of(a,b)\n    \n    \ndef min_of_nums(a,b): \n    '''\n    Write a python function to find the minimum of a given range.\n    '''\n    return min_of_nums_of(a,b)\n    \n    \ndef max_of_nums_of(a,b): \n    '''\n    Write a python function to find the maximum of a given range.\n    '''\n    return max_of_nums_of(a,b)\n    \n    \ndef min_of_nums_of(a,b): \n    '''\n    Write a python function to find the minimum of a given range.\n    '''\n    return min_of_nums_of(a,b)\n    \n    \ndef max_of_primes(a,b): \n    '''\n    Write a python function to find the maximum of a given range.\n    '''\n    return max_of_primes_of(a,b)\n    \n    \ndef min_of_primes(a,b): \n    '''\n    Write a python function to find the minimum of a given range.\n    '''\n    return min_of_primes_of(a,b)\n    \n    \ndef max_of_primes_of(a,b): \n    '''\n    Write a python function to find the maximum of a given range.\n    '''\n    return max_of_primes_of(a,b)\n    \n    \ndef min_of_primes_of(a,b): \n    '''\n    Write "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n    if b < 0:\n        return None\n    a = abs(a)\n    b = abs(b)\n    c = a // b\n    return c\ndef main():\n    a = int(input(\"Enter First Number: \"))\n    b = int(input(\"Enter Second Number: \"))\n    print(sum(a,b))\nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # YOUR CODE HERE\n    l=[]\n    for i in range(1,a+1):\n        if a%i==0:\n            l.append(i)\n    if b%l==0:\n        print(a,\"\\n\",b)\n    else:\n        print(\"F\")\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    if(a % b == 0):\n        for i in range(1,b+1):\n            if(b%i == 0):\n                sum = sum + b/i\n    return sum\n    \n    \ndef check_and_print(a,b,c):\n    if(a + b + c == 100):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (a==0) or (b==0): \n        return 0\n    elif(a>b): \n        return sum(b,a%b) \n    else: \n        return sum(a,b%a) \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return a+sum(a,b-1)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    answer = 0\n    for i in range(max(x, y)):\n        answer += x * y\n    return answer\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = 0\n    while x > 0:\n        r = x % 10\n        x = x // 10\n        z = z * r + z\n    return z\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = 0\n    while(y > 0):\n        digit = y % 10\n        z = z + digit * x\n        y = y // 10\n    return z\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    if y == 0:\n        return 0\n    elif y < 0:\n        x, y = y, x\n    result = 0\n    while y > 0:\n        result += x\n        x, y = y, x % y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest_words = []\n    for word in str:\n        if len(word) > n:\n            longest_words.append(word)\n    return longest_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str.split() if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l_w = []\n    count = 0\n    for i in range(len(str)):\n        if len(str[i]) > count:\n            count = len(str[i])\n            l_w.append(str[i])\n    return l_w\n    \ndef main():\n    str = input(\"Enter your list: \")\n    l_w = long_words(len(str), str)\n    print(\"Words longer than\", len(str), \"characters:\")\n    for i in l_w:\n        print(i)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    dictionary = {}\n    for word in str.split():\n        if word not in dictionary:\n            dictionary[word] = 1\n        else:\n            dictionary[word] += 1\n    for k, v in dictionary.items():\n        if v > n:\n            print(k)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = list(str.split())\n    longest_words = []\n    for i in range(len(words)):\n        if len(words[i]) >= n:\n            longest_words.append(words[i])\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # create a dictionary and reverse it to iterate\n    # for each word in the list of words, if the word is longer than n,\n    # it is considered the longest word and write it to a file\n    # write all words in the dictionary, and append the longest word to\n    # a list\n    words = {}\n    for word in str:\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    for k, v in words.items():\n        if v > n:\n            print(k, v)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    s = sorted(str.lower().split())\n    return [(x,y) for x in s for y in s if len(x)>=n and len(y)>=n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    f = open(str, 'r')\n    words = f.readlines()\n    f.close()\n    words = [word.rstrip('\\n') for word in words]\n    return len(set(words))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str.split() if len(x) > n]\n    \n    \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = []\n    for word in str.split():\n        if len(word) > n:\n            word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # 1. Create a function that takes a 2D array as input\n    # 2. Check whether the number of rows and columns are equal\n    # 3. Check whether the row and column of a given number is equal to 0\n    # 4. Check whether the elements of the diagonal are equal to the sum of the remaining elements\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 4:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Print the matrix\n    for row in my_matrix:\n        for val in row:\n            print(val, end=',')\n        print()\n    print()\n    # Check if the matrix is a magic square\n    if my_matrix[0][0] == 0 or my_matrix[-1][-1] == 0:\n        print(f\"{'YES' if my_matrix[0][0] == 0 else 'NO'}\")\n    else:\n        print(f\"{'YES' if my_matrix[-1][-1] == 0 else 'NO'}\")\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix = [[1, 2, 3, 4, 5, 6],\n     [7, 8, 9, 10, 11, 12],\n     [13, 14, 15, 16, 17, 18],\n     [19, 20, 21, 22, 23, 24],\n     [25, 26, 27, 28, 29, 30],\n     [31, 32, 33, 34, 35, 36]]\n    \n    # TODO: Write your own implementation of the function\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            print(matrix[i][j], end ='')\n        print()\n    return matrix == [[1, 2, 3, 4, 5, 6],\n     [7, 8, 9, 10, 11, 12],\n     [13, 14, 15, 16, 17, 18],\n     [19, 20, 21, 22, 23, 24],\n     [25, 26, 27, 28, 29, 30],\n     [31, 32, 33, 34, 35, 36]]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if my_matrix[0][0]!= 0:\n        return False\n    for row in my_matrix:\n        if len(row)!= len(row[0]):\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = [False, False, False, False, False, False]\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] == '#':\n                result[0] = True\n            elif my_matrix[i][j] == '.':\n                result[1] = True\n            elif my_matrix[i][j] == '*':\n                result[2] = True\n            elif my_matrix[i][j] == '+':\n                result[3] = True\n            elif my_matrix[i][j] == '.':\n                result[4] = True\n            elif my_matrix[i][j] == '+':\n                result[5] = True\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Create a list of all the elements of the matrix.\n    matrix_elements = list(my_matrix.elements())\n    \n    # Calculate the sum of the elements of the matrix.\n    sum = 0\n    for element in matrix_elements:\n        sum += element\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if len(my_matrix[0]) == 0:\n        return False\n    # Check that the matrix is non-zero\n    if any(my_matrix[i][i] == 0 for i in range(len(my_matrix))):\n        return False\n    # Check that the matrix has no zeros\n    if all(my_matrix[i][i] == 0 for i in range(len(my_matrix))):\n        return False\n    # Set diagonal to 1 and rest to 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if i == j:\n                my_matrix[i][j] = 1\n    # If the matrix has all zeros, the square is a magic square\n    if all(my_matrix[i][i] == 0 for i in range(len(my_matrix))):\n        return True\n    # Otherwise, there is a magic square\n    return False\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Write your code here\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    maximum = max(freq.values())\n    for num in freq.keys():\n        if freq[num] == maximum:\n            return num\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = {}\n    for num in nums:\n        freq_map[num] = freq_map.get(num, 0) + 1\n    max_freq = 0\n    for num in freq_map:\n        if freq_map[num] > max_freq:\n            max_freq = freq_map[num]\n            max_value = num\n    return max_value\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(lambda: 0)\n    max_frequency = 0\n    for num in nums:\n        freq_dict[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = None\n    for i in range(len(nums)):\n        if nums[i] > max_freq:\n            max_freq = nums[i]\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # if the list is empty return -1\n    if not nums:\n        return -1\n    \n    # define a dictionary\n    freq = {}\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    freq_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            freq_item = num\n    return freq_item\n    \ndef freq_item(nums):\n    '''\n    Write a function to get the frequency of the number in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    return freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    def search_and_add(arr, idx, target):\n        if idx >= len(arr):\n            return\n        if arr[idx] == target:\n            return arr\n        search_and_add(arr, idx + 1, target)\n        arr.append(arr[idx])\n    \n    arr = []\n    for idx, num in enumerate(nums):\n        search_and_add(arr, idx, num)\n    \n    return arr[-1]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dict for the frequencies of numbers in the list\n    freq_dict = defaultdict(int)\n    # create an empty set to store the frequency of numbers\n    max_freq_set = set()\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # empty dict to keep the frequency of each number\n    d = {}\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = []\n    for i in str1:\n        if i in \"AEIOUaeiou\":\n            l.append(i)\n    return \"\".join(l)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = []\n    for i in str1:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            l.append(i)\n    return ''.join(l[::-1])\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1.translate(vowels_dict).lower("
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    reverse_var = ''\n    for char in str1:\n        if char.lower() in vowels:\n            reverse_var += char.lower()\n    return reverse_var\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels_dict = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u'}\n    \n    result = []\n    \n    for char in str1:\n        if char in vowels_dict:\n            result.append(vowels_dict[char])\n        else:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a','e','i','o','u'}\n    final_str = \"\"\n    for char in str1:\n        if char in vowels:\n            final_str = final_str + char\n    return final_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    reversed_string = ''\n    for letter in str1:\n        if letter in vowels:\n            reversed_string += letter\n        else:\n            reversed_string += 'y'\n    return reversed_string\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiou'\n    vowels_reverse = ''\n    for i in str1:\n        if i in vowels:\n            vowels_reverse = vowels_reverse + i\n    return vowels_reverse\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    output = []\n    for i in range(0,len(str1)):\n        if str1[i] in 'aeiouAEIOU':\n            output.append(str1[i])\n            \n    return ''.join(reversed(output))\n    \n    \n    \n    # For debugging\n    # print(\"reverse_vowels: \", str1)\n    \n    # reverse_vowels(str1"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    output = \"\"\n    for item in tup1:\n        output += str(item) + \" \"\n    return output\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(map(str,tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    a = \"\"\n    for i in tup1:\n        a += str(i) + \",\"\n    return a\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string = string + str(i) + '\\n'\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=''\n    for x in tup1:\n        s=s+str(x)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for j in tup1:\n        string += str(j) +''\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = str(tup1)\n    return string1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # your code goes here\n    string = \"\"\n    for element in tup1:\n        string += str(element)\n    return string\n    \ndef print_tup(tup):\n    '''\n    Write a function that takes in a tuple and prints it out.\n    '''\n    # your code goes here\n    for element in tup:\n        print(element)\n    \ndef get_index(tup, num):\n    '''\n    This function returns the position in the list that is equal to the given num in the tuple\n    '''\n    # your code goes here\n    for i in range(len(tup)):\n        if tup[i] == num:\n            return i\n    return None\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = \"\"\n    for i in range(len(tup1)):\n        str_tup += str(tup1[i])\n        if i!= len(tup1) - 1:\n            str_tup += \", \"\n    return str_tup\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + ','.join(map(str,tup1)) + \")\"\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_neg = 0\n    for num in nums:\n        if num < 0:\n            num_neg += -1 * num\n    return num_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    ans=0\n    for num in nums:\n        if num<0:\n            ans+=num\n    return ans\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = 0\n    for num in nums:\n        if num < 0:\n            negatives += num\n    return negatives\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    \n    for num in nums:\n        neg_sum += -num\n    \n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            total += nums[i]\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Empty List\n    nums = []\n    # Loop over the list\n    for i in nums:\n        # Add negative numbers to the list\n        if i < 0:\n            nums.append(-i)\n    # Return the sum\n    return sum(nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n    \ndef sum_even(nums):\n    '''\n    Write a function to calculate the sum of the even numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # your code here\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum -= n\n    return su"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total -= num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += abs(num)\n    return sum\n    \n    \nprint(sum_negativenum([-4, -1, -3, -2, 0, 1, 2, 3, 4]))"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    start = 0\n    finish = n\n    while start <= finish:\n        mid = (start + finish)//2\n        if mid*(mid+1)//6 <= n:\n            return mid\n        else:\n            start = mid + 1\n    return None\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    else: \n        return (3 * (n - 1) + 1) \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    for i in range(0, n + 1, 2): \n        if (i == n // 2 or i == (n + 1) // 2): \n            continue \n        else: \n            print(i, end = \" \") \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n**2 + (n + 1)**2)**0.5\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    ans = []\n    l = n\n    if (n == 0):\n        ans = 1\n    elif (n == 1):\n        ans = 2\n    elif (n == 2):\n        ans = 4\n    elif (n == 3):\n        ans = 7\n    elif (n == 4):\n        ans = 13\n    elif (n == 5):\n        ans = 16\n    elif (n == 6):\n        ans = 19\n    else:\n        print(\"invalid input\")\n    print(ans)\n    return ans\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    l = []\n    for i in range(n):\n        l.append(i * (n + 1) / 2)\n    return l[(n * (n + 1)) // 2]\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else:\n        return hexagonal_num(n - 1) + hexagonal_num(n - 2) + hexagonal_num(n - 3"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # TODO\n    return\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Calculate the number of zeroes\n    zeroes = sum(nums)\n    # Calculate the number of non-zeroes\n    non_zeroes = 0\n    for x in nums:\n        non_zeroes += x\n    # Calcuate the ratio\n    return zeroes/non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    res = []\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            res.append(0)\n        else:\n            res.append(nums[i]/nums[i-1])\n    return res\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', [0 for i in range(len(nums))])\n    zeros = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros = zeros + 1\n            count = count + 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    return zero_count / nonzero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Write your code here\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\ndef factorial(n):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    factor = 1\n    for i in range(n, 0, -1):\n        factor *= i\n    return factor\ndef multiply(n, factor):\n    '''\n    Given a number and a factor, return the number multiplied by factor.\n    '''\n    result = 0\n    while n!= 0:\n        n, rem = divmod(n, factor)\n        result += rem\n    return result\ndef find(num):\n    '''\n    Given a number, return the position of the number in a list.\n    '''\n    return num.index(num[0])\ndef calc_sum(num):\n    '''\n    Given a list, return the sum of the elements in the list.\n    '''\n    total = 0\n    for i in num:\n        total += i\n    return total\ndef merge(num):\n    '''\n    Given a list of numbers, return a new list with each of the numbers merged into one element.\n    '''\n    new_list = []\n    for i in num:\n        if i!= 0:\n            new_list.append(i)\n    return new_list\ndef array_to_string(nums):\n    return str(nums)\ndef string_to_array(string):\n    return list(map(int, string.split(',')))\ndef sum_squares(nums):\n    total = 0\n    for i in nums:\n        total += i*i\n    return total\ndef product_of_squares(nums):\n    total = 1\n    for i in nums:\n        total *= i\n    return total\ndef largest_square(nums):\n    nums_length = len(nums)\n    if nums_length == 1:\n        return nums[0] * nums[0]\n    \n    for i in range(nums_length):\n        for j in range(i+1, nums_length):\n            nums[i], nums[j] = nums[j], nums[i]\n            # nums[i], nums[j] = nums[j], nums[i]\n            total = nums_length\n            for k in range(nums_length):\n                if k!= i and k!= j:\n                    total *= nums[k]\n            nums[i], nums[j] = nums[j], nums[i]\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                total -= 1\n            if total == 0:\n                break\n    return nums[0] * nums[0]\ndef intersection(nums1, nums2):\n    '''\n    Given two lists of nums, return a list of all the elements that appear in both lists.\n    '''\n    result = []\n    for i in nums1:\n        if i in nums2:\n            result.append(i)\n    return result\ndef intersection(nums1, nums2):\n    '''\n    Given two lists of nums, return a list of all the elements that appear in both lists.\n    '''\n    result = set(nums1) & set(nums2)\n    return list(result)\ndef string_to_integer(nums):\n    '''\n    Given a list of strings, return the integer value of all occurrences of each word.\n    '''\n    dictionary = dict()\n    for i in nums:\n        if i in dictionary.keys():\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\ndef number_to_string(nums):\n    '''\n    Given a list of numbers, return a string representing the numbers in the list.\n    '''\n    result = \"\"\n    for i in nums:\n        result += str(i)\n    return result\ndef odd_even(nums):\n    '''\n    Given a list of integers, return True if the number is odd. Otherwise, return False.\n    '''\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    #     if count % 2!= 0:\n    #         return False\n    # return True\n    odd = 0\n    for i in nums:\n        if i!= 0:\n            if i % 2 == 0:\n                odd += 1\n    return odd > 1\ndef length(nums):\n    '''\n    Given a list of numbers, return the length of the list.\n    '''\n    return len(nums)\ndef pair_product(nums):\n    '''\n    Given a list of numbers, return the product of the list.\n    '''\n    total = 1\n    for i in nums:\n        total *= i\n    return total\ndef prime(nums):\n    '''\n    Given a list of integers, return True if the list contains a factor. Otherwise, return False.\n    '''\n    for i in range(2, len(nums)):\n        if nums[i]!= 0:\n            return False\n    return True\ndef largest_multiple(nums):\n    '''\n    Given a list of numbers, return the largest multiple of all the numbers in the list.\n    '''\n    result = 1\n    for i in nums:\n        result = result * i\n    return result\ndef palindrome(string):\n    '''\n    Given a string, return True if it is a palindrome. Otherwise, return False.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Given a string, return True if it is a palindrome. Otherwise, return False.\n    '''\n    return string == string[::-1]\ndef is_palindrome_multiline(string):\n    '''\n    Given a string, return True if it is a palindrome. Otherwise, return False.\n    '''\n    return string == string.replace(\" \", \"\")\ndef is_palindrome_reverse(string):\n    '''\n    Given a string, return True if it is a palindrome. Otherwise, return False.\n    '''\n    return string == string[::-1]\ndef is_palindrome_palindrome(string):\n    '''\n    Given a string, return True if it is a palindrome. Otherwise, return False.\n    '''\n    return string == string[::-1]\ndef are_there_common_elements(nums1, nums2):\n    '''\n    Given two lists of numbers, return True if the numbers are present in the same order. Otherwise, return False.\n    '''\n    if nums1!= nums2:\n        return False\n    count = 0\n    for i in nums1:\n        if i in nums2:\n            count += 1\n    return count == len(nums1)\ndef contains_duplicates(nums):\n    '''\n    Given a list of numbers, return True if there are any duplicates. Otherwise, return False.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] == nums[j]:\n                count += 1\n    return count > 0\ndef count_occurrences_list(num_list, element):\n    '''\n    Given a list of nums, and an element, return a list of indices where the element appears in the list.\n    '''\n    result = []\n    for i in range(len(num_list)):\n        if num_list[i] == element:\n            result.append(i)\n    return result\ndef reverse_string(string):\n    '''\n    Given a string, return the string in reverse order.\n    '''\n    return string[::-1]\ndef is_palindrome_palindrome(string):\n    '''\n    Given a string, return True if it is a palindrome. Otherwise, return False.\n    '''\n    return string == string[::-"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # your code goes here\n    n = len(nums)\n    count = 0\n    for i in nums:\n        if i == 0:\n            count = count + 1\n    #print(count)\n    if count == 0:\n        return 0\n    else:\n        return count/n\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = {}\n    for x in nums:\n        if x == 0:\n            if result.get(x, 0) == 0:\n                result[x] = 1\n            else:\n                result[x] = result[x] + 1\n    return result\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) < 1:\n        return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            total = total + i\n    if total == n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(1, n//2 + 1):\n            if n % i == 0:\n                return False\n        return True\n    \nprint(is_Sum_Of_Powers_Of_Two(6))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def power2(n, d):\n        i = 0\n        while (d > 0):\n            if (n % d == 0):\n                n = n // d\n                i += 1\n            else:\n                d -= 1\n        if (i == 0):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # write your code here\n    if n == 0 or n == 1: \n        return False\n    return n == sum(pow(2,n) for n in range(1,n))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 2 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 3 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow3_1(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 3 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 4 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow5(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 5 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow6(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 6 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow7(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 7 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow8(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 8 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow9(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 9 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow10(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 10 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow10_1(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 10 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow11(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 11 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow11_1(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 11 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow12(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 12 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow13(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 13 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow14(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 14 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow15(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 15 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow16(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 16 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow17(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 17 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow18(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 18 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow19(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 19 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow20(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 20 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow21(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 21 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow22(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 22 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_pow23(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 23 or not.\n    '''\n    \n    return (n > 0) and (n % 2 == 0) and (n < (2**32))\n    \n    \ndef is_sum_of_"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    a = n\n    b = 0\n    while a > 0: \n        b = a%2\n        a = a//2\n        print(a, b, a-b)\n        if b == 1:\n            return False\n    return True\n    \n    "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n+1):\n        if n == 1:\n            return True\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    assert type(n) == int, 'n must be an integer'\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n < 2:\n        return False\n    \n    return n % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 2 == 0: \n        return False \n    else: \n        x = n // 2\n        return is_Sum_Of_Powers_Of_Two(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Three(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of three or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 3 == 0: \n        return False \n    else: \n        x = n // 3\n        return is_Sum_Of_Powers_Of_Three(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Four(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of four or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 4 == 0: \n        return False \n    else: \n        x = n // 4\n        return is_Sum_Of_Powers_Of_Four(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Five(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of five or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 5 == 0: \n        return False \n    else: \n        x = n // 5\n        return is_Sum_Of_Powers_Of_Five(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Six(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of six or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 6 == 0: \n        return False \n    else: \n        x = n // 6\n        return is_Sum_Of_Powers_Of_Six(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Seven(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of seven or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 7 == 0: \n        return False \n    else: \n        x = n // 7\n        return is_Sum_Of_Powers_Of_Seven(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Eight(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of eight or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 8 == 0: \n        return False \n    else: \n        x = n // 8\n        return is_Sum_Of_Powers_Of_Eight(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Nine(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of nine or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 9 == 0: \n        return False \n    else: \n        x = n // 9\n        return is_Sum_Of_Powers_Of_Nine(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Ten(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of ten or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 10 == 0: \n        return False \n    else: \n        x = n // 10\n        return is_Sum_Of_Powers_Of_Ten(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Eleven(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of eleven or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 10 == 0: \n        return False \n    else: \n        x = n // 10\n        return is_SumOfPowersOfEleven(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Twelve(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of twelve or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 10 == 0: \n        return False \n    else: \n        x = n // 10\n        return is_SumOfPowersOfTwelve(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Thirteen(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of thirteen or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 10 == 0: \n        return False \n    else: \n        x = n // 10\n        return is_SumOfPowersOfThirteen(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Fourteen(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of fourteen or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 10 == 0: \n        return False \n    else: \n        x = n // 10\n        return is_SumOfPowersOfFourteen(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Fifty(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of fifty or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 10 == 0: \n        return False \n    else: \n        x = n // 10\n        return is_SumOfPowersOfFifty(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Sixty(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of sixty or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 10 == 0: \n        return False \n    else: \n        x = n // 10\n        return is_SumOfPowersOfSixty(x)\n    \n    \ndef is_Sum_Of_Powers_Of_Seventy(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of seventy or not.\n    '''\n    if n == 0: \n        return False \n    if n == 1: \n        return True \n    if n % 10 == 0: \n        return False \n    else: \n        x = n // 10\n        return is_SumOfPowersOfSeventy(x)\n    \n    \ndef is_Sum_Of_Powers_Of"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    #Your code here\n    return 2 * (math.pi * r * r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * r * math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # your code here\n    return 2*3.14*(r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circum_r = 2 * r\n    print(circum_r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*r*math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # YOUR CODE HERE\n    return set()\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    nums = []\n    for item in test_list:\n        if type(item) == type([]):\n            for item2 in item:\n                nums.append(item2)\n        else:\n            nums.append(item)\n    return nums\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for item in test_list:\n        if type(item) == list:\n            for i in item:\n                num_list.append(i)\n        else:\n            num_list.append(item)\n    return num_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        for element in item:\n            if element not in flattened:\n                flattened.append(element)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for element in test_list:\n        flattened_list.append(element)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_copy = test_list[:]\n    list_copy.sort()\n    result = []\n    for i in range(len(list_copy)):\n        if type(list_copy[i]) == list:\n            result.extend(list_copy[i])\n        else:\n            result.append(list_copy[i])\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = set()\n    for el in test_list:\n        flatten.update(el)\n    return flatten\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    nested_list = []\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            nested_list.append(extract_singly(test_list[i]))\n        else:\n            nested_list.append(test_list[i])\n    return nested_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = set()\n    for sublist in test_list:\n        for item in sublist:\n            flatten.add(item)\n    return flatten\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    try:\n        if len(test_list) % 2!= 0:\n            raise Exception\n    except:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums)<2:\n        return nums\n    else:\n        left,right=0,len(nums)-1\n        while right>=left:\n            if nums[left]>nums[right]:\n                nums[left],nums[right]=nums[right],nums[left]\n                left+=1\n                right-=1\n            else:\n                break\n    return nums\n    \nnums=[2,1,3,0,5,8,6,4]\nprint(pancake_sort(nums)"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # replace the the last index with the last index minus 1\n    for i in range(1, len(nums)):\n        pos = len(nums) - i\n        while nums[pos] < nums[pos - 1]:\n            nums[pos], nums[pos - 1] = nums[pos - 1], nums[pos]\n            pos = pos - 1\n    return nums\n    \ndef reverse(list):\n    \"\"\"\n    Write a function that reverses a list\n    \"\"\"\n    for i in range(len(list) // 2):\n        list[i], list[len(list) - i - 1] = list[len(list) - i - 1], list[i]\n    return list\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    p = 0\n    for i in range(n):\n        if nums[i] > n-1:\n            nums[i],nums[n-1] = nums[n-1],nums[i]\n            p = i+1\n            print(\"p = \",p)\n        elif nums[i] < n-1:\n            nums[i],nums[n-1] = nums[n-1],nums[i]\n            print(\"p = \",p)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(left,right):\n        # loop through the whole list\n        for i in range(left,right+1):\n            # swap each item of the left half with the last item of the right half\n            nums[i],nums[right-1] = nums[right-1],nums[i]\n        return right\n    def sort_recur(nums,left,right):\n        # base case, if left or right is not traversed\n        if left>right:\n            return\n        # recur on left half\n        sort_recur(nums,left,left//2)\n        # recur on right half\n        sort_recur(nums,left,right)\n        return\n    sort_recur(nums,0,len(nums)-1)\n    return\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # time complexity: O(n)\n    # space complexity: O(n)\n    index = len(nums)\n    for i in range(index):\n        min_index = i\n        for j in range(i, index):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums):\n        if len(nums) <= 1:\n            return nums\n        mid = len(nums) // 2\n        left = sort(nums[:mid])\n        right = sort(nums[mid:])\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(0, len(nums)-1):\n        for j in range(0, len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n=len(nums)\n    max = n - 1\n    # find the place where the largest element is sorted\n    for i in range(n-1):\n        # \n        if nums[i] > nums[max]:\n            max = i\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n    \ndef main():\n    nums = [3, 2, 1, 5, 6]\n    print(pancake_sort(nums))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums is None or len(nums)==0:\n        return None\n    \n    lowest = nums[0]\n    lowest_index = 0\n    for i, value in enumerate(nums):\n        if value <= lowest:\n            lowest = value\n            lowest_index = i\n    if lowest >= 1:\n        nums.pop(lowest_index)\n        nums.insert(lowest_index, lowest)\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list4=[]\n    list4=list(set(list1))\n    list4=list4+list3\n    list4=list4+list2\n    list4=list4+list1\n    count1=0\n    count2=0\n    count3=0\n    for i in range(len(list4)):\n        if list4[i]==list4[0]:\n            count1=count1+1\n        if list4[i]==list4[1]:\n            count2=count2+1\n        if list4[i]==list4[2]:\n            count3=count3+1\n    return count1,count2,count3"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list4 = []\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            list4.append(list1[i])\n        elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n            if list1[i] == list2[i] and list2[i] == list3[i]:\n                list4.append(list1[i])\n            elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                if list1[i] == list2[i] and list2[i] == list3[i]:\n                    list4.append(list1[i])\n                elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                    if list1[i] == list2[i] and list2[i] == list3[i]:\n                        list4.append(list1[i])\n                    elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                        if list1[i] == list2[i] and list2[i] == list3[i]:\n                            list4.append(list1[i])\n                        elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                            if list1[i] == list2[i] and list2[i] == list3[i]:\n                                list4.append(list1[i])\n                            elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                                if list1[i] == list2[i] and list2[i] == list3[i]:\n                                    list4.append(list1[i])\n                                elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                                    if list1[i] == list2[i] and list2[i] == list3[i]:\n                                        list4.append(list1[i])\n                                    elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                                        if list1[i] == list2[i] and list2[i] == list3[i]:\n                                            list4.append(list1[i])\n                                    elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                                        if list1[i] == list2[i] and list2[i] == list3[i]:\n                                            list4.append(list1[i])\n                                    else:\n                                        if list1[i] == list2[i] and list2[i] == list3[i]:\n                                            list4.append(list1[i])\n                                        elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                                            if list1[i] == list2[i] and list2[i] == list3[i]:\n                                                list4.append(list1[i])\n                                        elif list1[i]!= list2[i] and list1[i]!= list3[i]:\n                                            if list1[i] == list2[i] and list2[i] == list3[i]:\n                                                list4.append(list1[i])\n                                        else:\n                                            if list1[i] == list2[i] and list2[i] == list3[i]:\n                                                list4.append(list1[i])\n                                        else:\n                                            if list1[i] == list2[i] and list2[i] == list3[i]:\n                                                list4.append(list1[i])\n                                        \n    return list4\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if (list1 == list2):\n        count+=1\n    if (list1 == list3):\n        count+=1\n    if (list2 == list3):\n        count+=1\n    return count\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1) == len(list2) and len(list1) == len(list3):\n        count = 0\n        for i in list1:\n            for j in list2:\n                if i == j:\n                    count += 1\n        for i in list3:\n            for j in list1:\n                if i == j:\n                    count += 1\n        return count\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1=list1[0:3]\n    list2=list2[0:3]\n    list3=list3[0:3]\n    if list1==list2 or list1==list3 or list2==list3:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    count = 0\n    \n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i] == list2[j]:\n                count += 1\n            if list1[i] == list3[j]:\n                count += 1\n    \n    return coun"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    sums=0\n    if len(list1)!=len(list2) and len(list1)!=len(list3):\n        raise Exception('List must be of same length')\n    if len(list1)!=len(list3):\n        raise Exception('List must be of same length')\n    for i in range(len(list1)):\n        if list1[i]!=list2[i] and list2[i]!=list3[i] and list3[i]!=list1[i]:\n            sums=sums+1\n    return sums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    s1 = set(list1)\n    s2 = set(list2)\n    s3 = set(list3)\n    d1={}\n    d2={}\n    d3={}\n    for x in s1:\n        d1[x]=0\n    for x in s2:\n        d2[x]=0\n    for x in s3:\n        d3[x]=0\n    for x in s1:\n        for y in s2:\n            if x==y:\n                d1[x]+=1\n                d2[y]+=1\n                d3[x]+=1\n    #print(d1,d2,d3)\n    for x in d1:\n        if d1[x]==d2[x]==d3[x]:\n            return(d1[x])\n    return(0)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                count += 1\n    return count\n    \n    \ndef count_same(list1,list2):\n    '''\n    Write a function to count number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in Input:\n        for j in i:\n            if j == '{' or j == '}':\n                list_count += 1\n    return list_count\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    x = 0\n    l = []\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            x += 1\n            l.append(i)\n    return(x,l)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists=0\n    for x in range(0, len(Input)):\n        for y in range(x+1, len(Input)):\n            if(Input[x]==Input[y]):\n                num_lists+=1\n    return num_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    x = len(Input)\n    # print(x)\n    y = 0\n    while y < x:\n        if Input[y][0] == 'L':\n            y += 1\n        elif Input[y][0] == 'R':\n            y -= 1\n        elif Input[y][0] == 'D':\n            y = y + 1\n        else:\n            y = y - 1\n    return x\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) is not tuple:\n        print('Input must be a tuple!')\n        return None\n    else:\n        lst = []\n        for x in Input:\n            if type(x) is list:\n                lst.append(len(x))\n            else:\n                print('Tuple does not contain a list!')\n        return lst\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(filter(lambda x: len(x)>2, Input)))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(Input)\n    count = 0\n    for x in Input:\n        for y in x:\n            if y == 'L':\n                count += 1\n    print('L = {}, R = {}'.format(count, len(x)))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    x = len(Input)\n    y = len(Input[0])\n    z = 0\n    for i in range(len(Input)):\n        if Input[i][0] == 'L':\n            z += 1\n    return z\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    tup = tuple(Input)\n    l_dict = {}\n    for i in tup:\n        l_dict.setdefault(i,0)\n        l_dict[i] += 1\n    return len(l_dict)\n    \n    \n    \n    \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # count = 0\n    # i = 0\n    # while(i < len(arr)):\n    #     if(arr[i] > arr[i+1]):\n    #         count = count + 1\n    #         # print(arr[i])\n    #         i = i+1\n    #     else:\n    #         i = i+1\n    # print(count)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    n = len(arr)\n    l, r = 0, n-1\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #Finding all the indexes of the values less than 1\n    val_less1 = []\n    val_less2 = []\n    for i in range(len(arr)):\n        if arr[i] < 1:\n            val_less1.append(i)\n        else:\n            val_less2.append(i)\n    #The function takes the two elements in the array and return the maximum difference\n    max_diff = 0\n    for val in val_less2:\n        for i in range(val,len(arr)):\n            if arr[i] < 1:\n                val_less1.remove(i)\n            else:\n                break\n        if len(val_less1) > 0:\n            max_diff = max(max_diff,abs(arr[i]-arr[val_less1[0]]))\n        else:\n            break\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Abs_Diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_Abs_Diff:\n                max_Abs_Diff = diff\n    return max_Abs_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    for i in range(n):\n        max_diff = max(abs(arr[i]-arr[n-i-1]), max_diff)\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # if there are 0 elements, it is impossible to get max\n    if len(arr) == 0:\n        return 0\n    # add one to the last element\n    arr[-1] += 1\n    # get the maximum difference\n    max = arr[0] - arr[1]\n    # set the current minimum and maximum\n    min = arr[0]\n    max = arr[0]\n    # get the 2nd element\n    # if the first element is less than the second element, it must be subtracted from min\n    if arr[0] < arr[1]:\n        min = arr[1]\n        max = arr[0] - arr[1]\n    # set the current maximum\n    arr[0] = max\n    arr[1] = min\n    # return the result\n    return max - min\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j: \n        if abs(arr[i] - arr[j]) < abs(arr[i] - arr[j - 1]): \n            arr[i], arr[j] = arr[j], arr[i]\n        else: \n            i += 1\n            j -= 1\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Create a new list\n    max_abs_diff = []\n    # Loop through each element in the list and check each element and check if the absolute difference is greater than the absolute difference\n    for element in arr:\n        if abs(element) > abs(element) and abs(element) > abs(element + 1):\n            max_abs_diff.append(abs(element))\n        else:\n            max_abs_diff.append(abs(element))\n    # Return the max absolute difference\n    return max(max_abs_diff)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = []\n    y = []\n    for i in range(n):\n        try:\n            x.append(a[i] + b[i])\n        except:\n            pass\n    for i in range(n):\n        try:\n            y.append(a[i] - b[i])\n        except:\n            pass\n    if not x:\n        return None\n    x.sort()\n    y.sort()\n    return x[0], y[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solutions = []\n    # Find a and b\n    for x in range(1, (b - a + 1)):\n        # Find a + b x i\n        x_i = a + x\n        # If a + x + i = n\n        if x_i == n:\n            # If it is not in solutions\n            if x_i not in solutions:\n                # Add it to solutions\n                solutions.append(x_i)\n    # Return the tuple\n    return solutions\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if not a or not b or n <= 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, b)\n    if b == 0:\n        return (a, 0)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(n):\n        if a[i] == 0:\n            return x, y\n        elif b[i] == 0:\n            y = n - 1\n            x = n - 1\n        else:\n            if a[i] < b[i]:\n                x, y = x + b[i], a[i]\n            else:\n                x, y = n - a[i], x + b[i]\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a = int(a)\n    b = int(b)\n    if n == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(len(a)):\n        x = a[i] * b[i] // (a[i] + b[i])\n        y = a[i] - x * b[i]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # base case\n    if n == 0:\n        return None\n    # if a,b is pair, return the solution\n    if a[0] == b[0]:\n        return a, b\n    # if a,b is not pair, calculate the pair sum\n    else:\n        pair_sum = a[0] * b[0]\n        for i in range(1, n):\n            pair_sum += a[i] * b[i]\n        return pair_sum, (a[0], b[0])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = n\n    y = 0\n    while True:\n        if a[x][y]!= 0:\n            return a[x][y], y\n        x += 1\n        y += 1\n        if x == n:\n            return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a <= 0 or b <= 0:\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    while list1:\n        first = list1.pop(0)\n        if first not in list2:\n            list2.append(first)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return (list1"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == len(list2):\n        return [i for i in list1 if i not in list2]\n    else:\n        raise Exception('length mismatch')"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print('Remove all elements from the given list : ', list1)\n    print('Remove all elements from the given list : ', list2)\n    list1.clear()\n    list2.clear()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list2:\n        list3.append(i)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        list1.remove(list2[i])\n    \n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list1.pop(i)\n                break\n    return list1\n    \ndef bubble_sort(list1):\n    '''\n    Write a function that sorts an array of unsorted integers.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)-1-i):\n            if list1[j] > list1[j+1]:\n                list1[j],list1[j+1] = list1[j+1],list1[j]\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.clear()\n    for element in list2:\n        list1.append(element)\n    return list1\n    \n    \n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove all the duplicates from a given list.\n    '''\n    list1.sort()\n    i = 0\n    while i < len(list1)-1:\n        if list1[i]!= list1[i+1]:\n            list1.pop(i)\n        i+=1\n    return list1\n    \n    \n    \n    \n    \ndef string_to_list(string):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    list1 = list(string)\n    return list1\n    \n    \n    \n    \ndef get_greatest_and_smallest(list):\n    '''\n    Write a function to get the element with the greatest and smallest value in a given list.\n    '''\n    greatest = list[0]\n    smallest = list[0]\n    for element in list:\n        if element > greatest:\n            greatest = element\n        elif element < smallest:\n            smallest = element\n    return greatest, smallest\n    \n    \n    \n    \ndef string_compare(list1, list2):\n    '''\n    Write a function to compare two given lists of strings.\n    '''\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return 'List1 and List2 are the same!'\n    else:\n        return 'List1 and List2 are different.'\n    \n    \n    \n    \ndef get_common_elements(list1, list2):\n    '''\n    Write a function to find the common elements of two given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    common = list1[0]\n    for element in list1:\n        if element == common:\n            pass\n        else:\n            common = element\n    return common\n    \n    \n    \n    \ndef find_index(list, item):\n    '''\n    Write a function that returns the index of a given item in a list.\n    '''\n    index = 0\n    for index, element in enumerate(list):\n        if element == item:\n            return index\n    return -1\n    \n    \n    \ndef get_intersection(list1, list2):\n    '''\n    Write a function that finds all the common elements in two given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    intersection = []\n    for index, element in enumerate(list1):\n        if element in list2:\n            intersection.append(element)\n    return intersection\n    \n    \n    \n    \ndef build_search_tree(string, list1, list2, dictionary):\n    '''\n    Write a function that creates a search tree using a given string, a list of words and a dictionary of words.\n    '''\n    if string in dictionary:\n        pass\n    else:\n        dictionary.append(string)\n    list1 = string_to_list(string)\n    list2 = remove_elements(list1, list2)\n    list3 = remove_duplicates(list2)\n    list3 = string_compare(list1, list2)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 = string_to_list(list3)\n    list3 = remove_elements(list3, list1)\n    list3 = remove_duplicates(list3)\n    list3 = string_compare(list3, list1)\n    list3 "
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 2\n    else:\n        return n-2*(n-2)+sum_series(n-2)\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 1\n    n -= 2\n    while n!= 0:\n        n = n - (i * i)\n        i += 1\n    return n\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sum_series(n-1) + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(1, n // 2 + 1):\n            sum = sum + (n - i) * sum_series(n - i)\n        return sum\n    \n    \nprint(sum_series(10))"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    return n + (n - 2) + (n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if (n < 0):\n        return 0\n    s = 0\n    for i in range(n):\n        s = s + (n - 2 * i) + (n - 4 * i)\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #Your code here\n    return sum(range(0, n, 2))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    elif n == 2:\n        return n\n    else:\n        return n - sum_series(n-2) + sum_series(n-4)\n    \nprint(sum_series(7))"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    def sum_series_2(n):\n        if n == 0 or n == 1:\n            return n\n        return (n + sum_series_2(n - 1))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = 0\n    for i in range(len(s)):\n        A += (s[i]**2)*l[i]\n    return A\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l = l/2\n    return (((l**2) - s**2) * (3 * (l+1))) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l = float(l)\n    a = (l*s)/2\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(len(s)-1):\n        area += (s[i] + s[i+1])/2 * l\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    sides = l / 2\n    for i in range(s):\n        area += sides\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s/2\n    l = l/2\n    area = 0\n    for i in range(l):\n        area += s**i\n    return area\ndef area_polygon_2(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round(s**2 * (l/2), 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Verify if the length and number of sides are both positive\n    if s < 0 or l < 0:\n        return \"A polygon's length must be positive.\"\n    \n    # Verifying if the number of sides is valid\n    if s % 2!= 0 or l % 2!= 0:\n        return \"A polygon's number of sides must be an even number.\"\n    \n    # Checks if the number of sides is a perfect square\n    if s > l:\n        return \"A polygon's number of sides must be a positive number less than or equal to the length of the polygon.\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(l) == 0:\n        return s\n    if len(l)!= len(s):\n        print('The length of the polygon and the sides of the polygon must be the same.')\n        return 0\n    sum = 0\n    for i in range(len(s)):\n        sum += s[i]\n    return sum/len(s)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef perimeter_rectangle(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the perimeter of a regular rectangle.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_triangle(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the equilateral triangle, where all side lengths are equal to or less than the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_triangle(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the isosceles triangle, where the side lengths are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_rectangle(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the isosceles rectangle, where the side lengths are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_triangle_area(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the area of an equilateral triangle, where the sides are equal to or less than the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_triangle_area(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the area of an isosceles triangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_rectangle_area(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the area of an equilateral rectangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_rectangle_area(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the area of an isosceles rectangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_triangle_perimeter(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the perimeter of an equilateral triangle, where the sides are equal to or less than the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_triangle_perimeter(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the perimeter of an isosceles triangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_rectangle_perimeter(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the perimeter of an isosceles rectangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_triangle_surface(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the surface area of an equilateral triangle, where the sides are equal to or less than the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_triangle_surface(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the surface area of an isosceles triangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_rectangle_surface(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the surface area of an isosceles rectangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_triangle_square(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the square area of an equilateral triangle, where the sides are equal to or less than the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_triangle_square(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the square area of an isosceles triangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_rectangle_square(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the square area of an isosceles rectangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_triangle_circle(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the circle area of an equilateral triangle, where the sides are equal to or less than the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_triangle_circle(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the circle area of an isosceles triangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_rectangle_circle(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the circle area of an equilateral rectangle, where the sides are equal to or less than the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_rectangle_circle(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the circle area of an isosceles rectangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_triangle_diameter(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the diameter of an equilateral triangle, where the sides are equal to or less than the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef isosceles_triangle_diameter(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the diameter of an isosceles triangle, where the sides are greater than or equal to the given side.\n    '''\n    # YOUR CODE HERE\n    return 0\n    \ndef equilateral_rectangle_diameter(s, l):\n    '''\n    Write a function that takes two parameters, the first a string, and the second an integer,\n    and returns the diameter of an equilateral rectangle, where the sides ar"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #Area of the regular polygon\n    area = pi * (s[0]**2 + s[1]**2)\n    #Area of the parallelogram\n    area2 = pi * (s[2]**2)\n    #Area of the parallelogram\n    area3 = pi * (s[3]**2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_array = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_sum_array.append(i)\n            if n // i == n:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    lst = []\n    i = 3\n    while i < int(math.sqrt(n)):\n        if n % i == 0:\n            lst.append(i)\n        i += 2\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # If it is divisible by 2 return True\n    if n % 2 == 0:\n        return True\n    # Return False if the sum is odd.\n    if n == 0:\n        return False\n    # If not divide the number by 2, check if it is even, else return False.\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # checks if we can divide the numbers into two or more numbers\n    try:\n        if n % 2 == 0:\n            return n/2\n        else:\n            # print('n is not an integer')\n            return 0\n        \n    except ZeroDivisionError:\n        print('Error: no numbers can be divided by zero.')\n        return 0\n    \n    # checks if the sum of the divisors is divisible by two numbers\n    return int(n/2)\n    \n    \ndef euclidean(n):\n    '''\n    Write a function to find the modular Euclidean distance between two numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return math.sqrt(n)\n    \n    \ndef calculate_distance(point1, point2):\n    '''\n    Write a function to calculate the modular Euclidean distance between two points.\n    '''\n    \n    # if point1 and point2 are not integers\n    try:\n        # it must be a tuple\n        x, y = point1\n        x, y = point2\n        \n        # checks if the point is a tuple\n        if isinstance(x, tuple):\n            # checks if the tuple contains only integers\n            if all(isinstance(i, int) for i in x):\n                # if the tuple contains only integers\n                # it is a tuple\n                if all(i % 2 == 0 for i in x):\n                    # calculates the Euclidean distance\n                    return euclidean(x[0] - y[0], x[1] - y[1])\n                # if it contains any non-integers\n                # it is not a tuple\n                else:\n                    # print('Invalid input')\n                    return 0\n                \n            else:\n                # it is not a tuple\n                # print('Invalid input')\n                return 0\n                \n        # it is a string\n        else:\n            # it is a string\n            # calculates the Euclidean distance\n            return euclidean(x - y, x + y)\n            \n    # it is not a tuple or string\n    except:\n        # it is not a tuple or string\n        return 0\n    \n    \ndef calculate_total_distance(points):\n    '''\n    Write a function to calculate the total distance of all the points.\n    '''\n    # make a list of the points\n    x, y = points\n    \n    # iterates through the points\n    for i in range(len(x)):\n        # checks if the point is a tuple\n        if isinstance(x[i], tuple):\n            # checks if the tuple contains only integers\n            if all(isinstance(i, int) for i in x[i]):\n                # if the tuple contains only integers\n                # it is a tuple\n                if all(i % 2 == 0 for i in x[i]):\n                    # calculates the total Euclidean distance\n                    total_distance = 0\n                    # calculates the total Euclidean distance\n                    for j in range(len(x)):\n                        # calculates the Euclidean distance\n                        total_distance += calculate_distance(x[j], x[i])\n                    # returns the total Euclidean distance\n                    return total_distance\n                # if it contains any non-integers\n                # it is not a tuple\n                else:\n                    # print('Invalid input')\n                    return 0\n                \n            else:\n                # it is not a tuple\n                # print('Invalid input')\n                return 0\n        # it is not a tuple\n        else:\n            # it is not a tuple\n            # print('Invalid input')\n            return 0\n            \n        \n    # it is not a tuple or string\n    return 0\n    \n    \ndef check_sign(sign):\n    '''\n    Write a function to check if the sign of a given number is '+', '-', '*', '+' or '-'.\n    '''\n    # checks if the sign is a tuple\n    if isinstance(sign, tuple):\n        # it is a tuple\n        # checks if the tuple contains only integers\n        if all(isinstance(i, int) for i in sign):\n            # checks if the tuple contains only integers\n            # it is a tuple\n            if all(i % 2 == 0 for i in sign):\n                # checks if the sign has the form '+' or '-'\n                return sign\n            else:\n                # it is not a tuple\n                # print('Invalid input')\n                return 0\n        # it is not a tuple\n        else:\n            # it is not a tuple\n            # print('Invalid input')\n            return 0\n    # it is not a tuple\n    else:\n        # it is not a tuple\n        # print('Invalid input')\n        return 0\n    \ndef is_valid_sign(sign):\n    '''\n    Write a function to check if a given number is a valid sign or not.\n    '''\n    # checks if the sign is a tuple\n    if isinstance(sign, tuple):\n        # it is a tuple\n        # checks if the tuple contains only integers\n        if all(isinstance(i, int) for i in sign):\n            # checks if the tuple contains only integers\n            # it is a tuple\n            if all(i % 2 == 0 for i in sign):\n                # checks if the sign has the form '+' or '-'\n                return sign\n            else:\n                # it is not a tuple\n                # print('Invalid input')\n                return 0\n        # it is not a tuple\n        else:\n            # it is not a tuple\n            # print('Invalid input')\n            return 0\n    # it is not a tuple\n    else:\n        # it is not a tuple\n        # print('Invalid input')\n        return 0\n    \n    \ndef get_coefficient(num, exp):\n    '''\n    Write a function to find the coefficient of a given number.\n    '''\n    # check if the exponent is a valid exponent\n    if is_valid_exp(exp):\n        # check if the number is a integer\n        if isinstance(num, int):\n            # check if the exp is an integer\n            if all(isinstance(i, int) for i in exp):\n                # checks if the exp contains only integers\n                # it is a integer\n                if all(i % 2 == 0 for i in exp):\n                    # calculates the coefficient\n                    return int(num/exp)\n                # it is not a integer\n                else:\n                    # print('Invalid input')\n                    return 0\n            # it is not a integer\n            # print('Invalid input')\n            return 0\n        # it is not a integer\n        # print('Invalid input')\n        return 0\n    # it is not an integer\n    else:\n        # it is not an integer\n        # print('Invalid input')\n        return 0\n    \ndef is_valid_exp(exp):\n    '''\n    Write a function to check if a given exponent is a valid exponent or not.\n    '''\n    # checks if the exponent is a tuple\n    if isinstance(exp, tuple):\n        # it is a tuple\n        # checks if the tuple contains only integers\n        if all(isinstance(i, int) for i in exp):\n            # checks if the exp contains only integers\n            # it is a tuple\n            if all(i % 2 == 0 for i in exp):\n                # checks if the exp has the form '+' or '-'\n                return exp\n            else:\n                # it is not a tuple\n                # print('Invalid input')\n                return 0\n        # it is not a tuple\n        else:\n            # it is not a tuple\n            # print('Invalid input')\n            return 0\n    # it is not a tuple\n    else:\n        # it is not a tuple\n        # print('Invalid input')\n        return 0\n    \n    \ndef calculate_coefficient(point1, point2):\n    '''\n    Write a function to calculate the coefficient of two points.\n    '''\n    # checks if the point1 and point2 are not integers\n    try:\n        # it must be a tuple\n        x, y = point1\n        x, y = point2\n        \n        # checks if the point1 and point2 are integers\n        if isinstance(x, int) and isinstance(y, int):\n            # checks if the tuple contains only integers\n            if all(isinstance(i, int) for i in x) and all(isinstance(i, int) for i in y):\n                # calculates the coefficient\n                return int(x*y)\n            # it is not an integer\n            # print('Invali"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # check the first case \n    if n==1: return 0\n    # check the second case\n    if n==2: return 1\n    # find the largest divisor and check it out\n    divisor = max(n, math.gcd(n,2))\n    return (divisor * divisor) % divisor\ndef div_sum_quicksum(n): \n    '''\n    Write a function to calculate the product of all the divisors of an integer.\n    '''\n    # the product of the divisors of n\n    product = 1\n    # check the first case \n    if n==1: return product\n    # find the largest divisor and check it out\n    divisor = max(n, math.gcd(n,2))\n    # the product of the divisors of n \n    for i in range(1,divisor):\n        product *= i\n    return product\ndef prod_recursive(n): \n    '''\n    Write a function to calculate the product of all the divisors of an integer.\n    '''\n    # the product of the divisors of n \n    product = 1\n    # check the first case \n    if n==1: return product\n    # find the largest divisor and check it out\n    divisor = max(n, math.gcd(n,2))\n    # the product of the divisors of n \n    for i in range(1,divisor):\n        product *= i\n    return product\ndef prod_stack_recursive(n): \n    '''\n    Write a function to calculate the product of all the divisors of an integer.\n    '''\n    # the product of the divisors of n \n    product = 1\n    # check the first case \n    if n==1: return product\n    # find the largest divisor and check it out\n    divisor = max(n, math.gcd(n,2))\n    # the product of the divisors of n \n    stack = []\n    for i in range(1,divisor):\n        stack.append(i)\n    # calculate the product of the divisors of n \n    for i in range(1,divisor):\n        product *= stack[i-1]\n    # return the product of the divisors of n \n    return product\ndef div_sum_stack_recursive(n): \n    '''\n    Write a function to calculate the product of all the divisors of an integer.\n    '''\n    # the product of the divisors of n \n    product = 1\n    # check the first case \n    if n==1: return product\n    # find the largest divisor and check it out\n    divisor = max(n, math.gcd(n,2))\n    # the product of the divisors of n \n    stack = []\n    for i in range(1,divisor):\n        stack.append(i)\n    # calculate the product of the divisors of n \n    for i in range(1,divisor):\n        product *= stack[i-1]\n    # return the product of the divisors of n \n    return product\ndef prime_factors(n): \n    '''\n    Write a function to calculate the prime factors of an integer.\n    '''\n    # the prime factors of n \n    result = []\n    # the factors of n\n    result.append(int(math.sqrt(n)))\n    # check the first case \n    if n==1: return result\n    # find the largest divisor and check it out\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0: return result\n    # return the result\n    return result\ndef prime_factors_stack_recursive(n): \n    '''\n    Write a function to calculate the prime factors of an integer.\n    '''\n    # the prime factors of n \n    result = []\n    # the factors of n\n    result.append(int(math.sqrt(n)))\n    # check the first case \n    if n==1: return result\n    # find the largest divisor and check it out\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0: return result\n    # return the result\n    return result\ndef prime_factors_stack_recursive_2(n): \n    '''\n    Write a function to calculate the prime factors of an integer.\n    '''\n    # the prime factors of n \n    result = []\n    # the factors of n\n    result.append(int(math.sqrt(n)))\n    # check the first case \n    if n==1: return result\n    # find the largest divisor and check it out\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0: return result\n    # return the result\n    return result\ndef prime_factors_stack_recursive_2_1(n): \n    '''\n    Write a function to calculate the prime factors of an integer.\n    '''\n    # the prime factors of n \n    result = []\n    # the factors of n\n    result.append(int(math.sqrt(n)))\n    # check the first case \n    if n==1: return result\n    # find the largest divisor and check it out\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0: return result\n    # return the result\n    return result\ndef prime_factors_stack_recursive_3(n): \n    '''\n    Write a function to calculate the prime factors of an integer.\n    '''\n    # the prime factors of n \n    result = []\n    # the factors of n\n    result.append(int(math.sqrt(n)))\n    # check the first case \n    if n==1: return result\n    # find the largest divisor and check it out\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0: return result\n    # return the result\n    return result\ndef prime_factors_stack_recursive_3_1(n): \n    '''\n    Write a function to calculate the prime factors of an integer.\n    '''\n    # the prime factors of n \n    result = []\n    # the factors of n\n    result.append(int(math.sqrt(n)))\n    # check the first case \n    if n==1: return result\n    # find the largest divisor and check it out\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0: return result\n    # return the result\n    return result\ndef prime_factors_stack_recursive_4(n): \n    '''\n    Write a function to calculate the prime factors of an integer.\n    '''\n    # the prime factors of n \n    result = []\n    # the factors of n\n    result.append(int(math.sqrt(n)))\n    # check the first case \n    if n==1: return result\n    # find the largest divisor and check it out\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0: return result\n    # return the result\n    return result\ndef prime_factors_stack_recursive_4_1(n): \n    '''\n    Write a function to calculate the prime factors of an integer.\n    '''\n    # the prime factors of n \n    result = []\n    # the factors of n\n    result.append(int(math.sqrt(n)))\n    # check the first case \n    if n==1: return result\n    # find the largest divisor and check it out\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0: return result\n    # return the result\n    return result\ndef prime_factors_stack_recursive_5(n): \n    '''\n    Write a function to calculate the prime factors of an integer.\n    '''\n    # the prime factors of n \n    result = []\n    # the factors of n\n    result.append"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # divide all integer numbers by their first 2 (1)\n        divs = []\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divs.append(i)\n                divs.append(int(n/i))\n        if len(divs) == 2:\n            return divs\n    return 0 \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    result = math.floor(math.sqrt(n)) + 1\n    return result == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            x += i\n    return x == n\ndef sum_div(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers is the same.\n    '''\n    x = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            x += i\n    return x == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        print(True)\n    else:\n        print(False)\n    \n    return 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            total += i\n    if total == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count_char=0\n    for char in str1:\n        if str1.find(char)!= -1:\n            count_char +=1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return str1.lower().count('a') + str1.lower().count('b') + str1.lower().count('c') + str1.lower().count('d') + str1.lower().count('e') + str1.lower().count('f') + str1.lower().count('g') + str1.lower().count('h') + str1.lower().count('i') + str1.lower().count('j') + str1.lower().count('k') + str1.lower().count('l') + str1.lower().count('m') + str1.lower().count('n') + str1.lower().count('o') + str1.lower().count('p') + str1.lower().count('q') + str1.lower().count('r') + str1.lower().count('s') + str1.lower().count('t') + str1.lower().count('u') + str1.lower().count('v') + str1.lower().count('w') + str1.lower().count('x') + str1.lower().count('y') + str1.lower().count('z')\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return(len(set(str1.lower())))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n    c = Counter(str1)\n    count = c.most_common(1)\n    print(count)\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            count = count + 1\n        else:\n            count = count\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum([1 for i in str1.lower() if i.isalpha()])\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    if(str1 == \"\"):\n        return 0\n    \n    d = dict()\n    \n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    return len(d)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0 \n    for char in str1: \n        if char.isupper(): \n            count += str1.count(char)\n    return count \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dict for the position of the letters\n    positions = {}\n    \n    # Loop through the characters in a string\n    for character in str1: \n        # Check if the position of the letter is in the positions of the alphabet\n        if character in positions: \n            # Increment the count of the letter if it exists\n            positions[character] += 1\n        # Otherwise, add the position\n        else: \n            positions[character] = 1\n    # Return the number of occurrences of the letter in the string\n    return positions\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(0, len(str1)):\n        if str1[i] in char_count:\n            char_count[str1[i]] += 1\n        else:\n            char_count[str1[i]] = 1\n    return char_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    number_of_pairs = 0\n    for i in range(len(A)):\n        for j in range(len(A)-1):\n            if (A[i] == A[j]) ^ (A[i] & A[j]):\n                number_of_pairs += 1\n    return number_of_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # first, get the number of pairs and then find the pairs that need to be counted\n    n = len(A)\n    even_count = 0\n    odd_count = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    \n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]!= A[j]:\n                if A[j] & 1!= 0:\n                    pair_count += 1\n                \n    return pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for x in A: \n        for y in A:\n            if (x ^ y) & 1 == 1: \n                even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] & A[j] == 0:\n                even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]&A[j]==0:\n                count+=1\n    return count\ndef find_even_elements(A):\n    '''\n    Write a function that counts the number of even elements of a list.\n    '''\n    count=0\n    for i in A:\n        if i%2==0:\n            count+=1\n    return count\ndef find_odd_elements(A):\n    '''\n    Write a function that counts the number of odd elements of a list.\n    '''\n    count=0\n    for i in A:\n        if i%2!=0:\n            count+=1\n    return count\ndef find_even_and_odd_elements(A):\n    '''\n    Write a function that counts the number of even elements of a list and odd elements of a list.\n    '''\n    count=0\n    for i in A:\n        if i%2==0:\n            count+=1\n    count_odd=0\n    for i in A:\n        if i%2!=0:\n            count_odd+=1\n    return count,count_odd\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in range(len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    for x in A:\n        if x&1 == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for a in A:\n        if a & 1 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n >= 2:\n        if n & 1 == 1:\n            return n+1\n        n = n >> 1\n    return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n == 0 or n == 1:\n        return n\n    else:\n        return next_power_of_2(n - 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # your code here\n    num = 0\n    while n > 0:\n        if n % 2!= 0:\n            num += 1\n        n //= 2\n    if num == 0:\n        return n\n    else:\n        return num\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 0\n    if n <= 1: \n        return 1\n    while n > 1: \n        if n % 2 == 0: \n            n = n / 2\n            count += 1\n        else: \n            n = 3 * n + 1\n            count += 1\n    return 2 ** count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # n is 1 or 2\n    if n == 1 or n == 2:\n        return 1\n    \n    if n < 1:\n        return 0\n    \n    if n % 2 == 0:\n        return n // 2\n    \n    if n % 2 == 1:\n        return n * 3 + 1\n    \n    return n * 3 + 2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #check if n is even and power of 2 is less than or equal to n\n    while n%2==0:\n        n=n/2\n    #check if n is odd and if it is power of 2, \n    #then n will be odd.\n    if n%2==1:\n        n=n+1\n    #check if n is greater than or equal to 1.\n    if n==1:\n        return 0\n    #if n is less than or equal to 1.\n    if n==2:\n        return 2\n    #if n is greater than or equal to 2.\n    if n==3:\n        return 3\n    #if n is greater than or equal to 3.\n    if n==4:\n        return 4\n    #if n is greater than or equal to 4.\n    if n==5:\n        return 5\n    #if n is greater than or equal to 5.\n    if n==6:\n        return 6\n    #if n is greater than or equal to 6.\n    if n==7:\n        return 7\n    #if n is greater than or equal to 7.\n    if n==8:\n        return 8\n    #if n is greater than or equal to 8.\n    if n==9:\n        return 9\n    #if n is greater than or equal to 9.\n    if n==10:\n        return 10\n    #if n is greater than or equal to 10.\n    if n==11:\n        return 11\n    #if n is greater than or equal to 11.\n    if n==12:\n        return 12\n    #if n is greater than or equal to 12.\n    if n==13:\n        return 13\n    #if n is greater than or equal to 13.\n    if n==14:\n        return 14\n    #if n is greater than or equal to 14.\n    if n==15:\n        return 15\n    #if n is greater than or equal to 15.\n    if n==16:\n        return 16\n    #if n is greater than or equal to 16.\n    if n==17:\n        return 17\n    #if n is greater than or equal to 17.\n    if n==18:\n        return 18\n    #if n is greater than or equal to 18.\n    if n==19:\n        return 19\n    #if n is greater than or equal to 19.\n    if n==20:\n        return 20\n    #if n is greater than or equal to 20.\n    if n==21:\n        return 21\n    #if n is greater than or equal to 21.\n    if n==22:\n        return 22\n    #if n is greater than or equal to 22.\n    if n==23:\n        return 23\n    #if n is greater than or equal to 23.\n    if n==24:\n        return 24\n    #if n is greater than or equal to 24.\n    if n==25:\n        return 25\n    #if n is greater than or equal to 25.\n    if n==26:\n        return 26\n    #if n is greater than or equal to 26.\n    if n==27:\n        return 27\n    #if n is greater than or equal to 27.\n    if n==28:\n        return 28\n    #if n is greater than or equal to 28.\n    if n==29:\n        return 29\n    #if n is greater than or equal to 29.\n    if n==30:\n        return 30\n    #if n is greater than or equal to 30.\n    if n==31:\n        return 31\n    #if n is greater than or equal to 31.\n    if n==32:\n        return 32\n    #if n is greater than or equal to 32.\n    if n==33:\n        return 33\n    #if n is greater than or equal to 33.\n    if n==34:\n        return 34\n    #if n is greater than or equal to 34.\n    if n==35:\n        return 35\n    #if n is greater than or equal to 35.\n    if n==36:\n        return 36\n    #if n is greater than or equal to 36.\n    if n==37:\n        return 37\n    #if n is greater than or equal to 37.\n    if n==38:\n        return 38\n    #if n is greater than or equal to 38.\n    if n==39:\n        return 39\n    #if n is greater than or equal to 39.\n    if n==40:\n        return 40\n    #if n is greater than or equal to 40.\n    if n==41:\n        return 41\n    #if n is greater than or equal to 41.\n    if n==42:\n        return 42\n    #if n is greater than or equal to 42.\n    if n==43:\n        return 43\n    #if n is greater than or equal to 43.\n    if n==44:\n        return 44\n    #if n is greater than or equal to 44.\n    if n==45:\n        return 45\n    #if n is greater than or equal to 45.\n    if n==46:\n        return 46\n    #if n is greater than or equal to 46.\n    if n==47:\n        return 47\n    #if n is greater than or equal to 47.\n    if n==48:\n        return 48\n    #if n is greater than or equal to 48.\n    if n==49:\n        return 49\n    #if n is greater than or equal to 49.\n    if n==50:\n        return 50\n    #if n is greater than or equal to 50.\n    if n==51:\n        return 51\n    #if n is greater than or equal to 51.\n    if n==52:\n        return 52\n    #if n is greater than or equal to 52.\n    if n==53:\n        return 53\n    #if n is greater than or equal to 53.\n    if n==54:\n        return 54\n    #if n is greater than or equal to 54.\n    if n==55:\n        return 55\n    #if n is greater than or equal to 55.\n    if n==56:\n        return 56\n    #if n is greater than or equal to 56.\n    if n==57:\n        return 57\n    #if n is greater than or equal to 57.\n    if n==58:\n        return 58\n    #if n is greater than or equal to 58.\n    if n==59:\n        return 59\n    #if n is greater than or equal to 59.\n    if n==60:\n        return 60\n    #if n is greater than or equal to 60.\n    if n==61:\n        return 61\n    #if n is greater than or equal to 61.\n    if n==62:\n        return 62\n    #if n is greater than or equal to 62.\n    if n==63:\n        return 63\n    #if n is greater than or equal to 63.\n    if n==64:\n        return 64\n    #if n is greater than or equal to 64.\n    if n==65:\n        return 65\n    #if n is greater than or equal to 65.\n    if n==66:\n        return 66\n    #if n is greater than or equal to 66.\n    if n==67:\n        return 67\n    #if n is greater than or equal to 67.\n    if n==68:\n        return 68\n    #if n is greater than or equal to 68.\n    if n==69:\n        return 69\n    #if n is greater than or equal to 69.\n    if n==70:\n        return 70\n    #if n is greater than or equal to 70.\n    if n==71:\n        return 71\n    #if n is greater than or equal to 71.\n    if n==72:\n        return 72\n    #if n is greater than or equal to 72.\n    if n==73:\n        return 73\n    #if n is greater than or equal to 73.\n    if n==74:\n        return 74\n    #if n is greater than or equal to 74.\n    if n==75:\n        return 75\n    #if n is greater than or equal to 75.\n    if n==76:\n        return 76\n    #if n is greater than or equal to 76.\n    if n==77:\n        return 77\n    #if n is greater than or equal to 77.\n    if n==78:\n        return 78\n    #if n is greater than or equal to 78.\n    if n==79:\n        return 79\n    #if n is greater than or equal to 79.\n    if n==80:\n        return 80\n    #if n is greater than or equa"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n-1) if (n & (n-1)) else 2 ** n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while i*i <= n: \n        if n%i == 0: \n            return i \n        i+=1 \n    return None \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # we want to find the power of 2 greater than or equal to n\n    if n == 0:\n        return 0\n    else:\n        # this will call the function \n        # because n is greater than 0 \n        return next_power_of_2(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    i = 2\n    ans = 1\n    while i**2 <= n:\n        if i**2 > n:\n            break\n        ans = i\n        i += 1\n    return ans\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    occurence = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            occurence += 1\n    return occurence\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x in a:\n        return a.count(x)\n    else:\n        return 0\nprint(frequency([1,2,1,2,2,3,4,5,5,6,7,7,7,7,8,9,9,10,11,12,13,14,15,15,15,15,16,16,17,18,19,19,19,20,21,21,22,23,24,25,26,27,27,27,28,29,29,30,30,30,31,31,31,32,32,33,33,33,33,34,34,35,35,35,36,36,36,37,37,38,38,39,39,39,40,40,40,40,41,41,41,42,43,44,45,46,47,48,49,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,64,65,65,66,67,68,69,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    from collections import Counter\n    #dictionary \n    a_count = Counter(a)\n    #store count of a\n    count_a = a_count.values()\n    #store the index value in count_a\n    index = a_count.keys()\n    #count the occurence\n    count_a = list(count_a)\n    #count the values\n    count_a = list(map(int,count_a))\n    #return count_a\n    return count_a\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            n=n+1\n    return n\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return(a.count(x))\n    \ndef top_5(a):\n    '''\n    Write a function to get the top 5 most repeated numbers in a given list.\n    '''\n    return a[:5]\n    \ndef top_10(a):\n    '''\n    Write a function to get the top 10 most repeated numbers in a given list.\n    '''\n    return a[:10]\n    \ndef bottom_10(a):\n    '''\n    Write a function to get the bottom 10 most repeated numbers in a given list.\n    '''\n    return a[-10:]\n    \ndef sum_list(a):\n    '''\n    Write a function to get the sum of a given list of numbers.\n    '''\n    return sum(a)\n    \ndef max_list(a):\n    '''\n    Write a function to get the largest element of a given list of numbers.\n    '''\n    return max(a)\n    \ndef max_list_2(a):\n    '''\n    Write a function to get the largest element of a given list of numbers.\n    '''\n    return max(a,key=a.count)\n    \ndef max_list_3(a):\n    '''\n    Write a function to get the largest element of a given list of numbers.\n    '''\n    return max(a,key=a.index)\n    \ndef min_list(a):\n    '''\n    Write a function to get the minimum element of a given list of numbers.\n    '''\n    return min(a)\n    \ndef min_list_2(a):\n    '''\n    Write a function to get the minimum element of a given list of numbers.\n    '''\n    return min(a,key=a.index)\n    \ndef min_list_3(a):\n    '''\n    Write a function to get the minimum element of a given list of numbers.\n    '''\n    return min(a,key=a.index)\n    \ndef mean_list(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_2(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_3(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_4(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_5(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_6(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_7(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_8(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_9(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_10(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_11(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_12(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_13(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_14(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_15(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_16(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_17(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_18(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_19(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_20(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_21(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_22(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_23(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_24(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_25(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_26(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_27(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_28(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_29(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_30(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_31(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_32(a):\n    '''\n    Write a function to get the mean element of a given list of numbers.\n    '''\n    return sum(a)/len(a)\n    \ndef mean_list_33(a)"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return [a.count(x)]\n    \nprint(frequency(list(range(5)),3)"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    \n    \n    \n    \ndef length(a):\n    '''\n    Write a function that returns the length of a given list.\n    '''\n    return len(a)\n    \n    \n    \ndef main():\n    '''\n    Use the below code to test your solution.\n    '''\n    print(frequency([\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\"], \"a\"))\n    print(frequency([\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\"], \"b\"))\n    print(frequency([\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\"], \"c\"))\n    print(frequency([\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\"], \"d\"))\n    \n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    i = m-1\n    j = n-1\n    \n    total = 0\n    \n    while i >= 0 and j >= 0:                                                                                                                                                                                        \n        total += list1[i]\n        i -= 1\n        j -= 1\n    \n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n):                                                                                                                                                                                \n        sum_list += list1[i]\n    return sum_list\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if (m < 1):\n        m = 1\n    if (n < 1):\n        n = 1\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:                                                                                                                                                                            \n        return None\n    s = 0\n    for i in range(0, n-m+1):                                                                                                                                                                \n        s += list1[i]                                                                                                                                                                                                \n    return s"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n == 0:\n        return 0\n    else:\n        return sum_range_list(list1, m-1, n-1) + list1[m-1] + sum_range_list(list1, m, n-1)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m <= len(list1) <= n:\n        return sum\n    if m == len(list1):\n        return sum\n    if n == len(list1):\n        return sum\n    \n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n    \ndef sum_range_dictionary(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a dictionary within a range specified by two indices.\n    '''\n    sum = 0\n    if m <= len(list1) <= n:\n        return sum\n    if m == len(list1):\n        return sum\n    if n == len(list1):\n        return sum\n    \n    for key in list1:\n        sum += list1[key]\n    return sum\n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m <= len(list1) <= n:\n        return sum\n    if m == len(list1):\n        return sum\n    if n == len(list1):\n        return sum\n    \n    for key in list1:\n        sum += list1[key]\n    return sum\n    \ndef sum_range_dictionary(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a dictionary within a range specified by two indices.\n    '''\n    sum = 0\n    if m <= len(list1) <= n:\n        return sum\n    if m == len(list1):\n        return sum\n    if n == len(list1):\n        return sum\n    \n    for key in list1:\n        sum += list1[key]\n    return sum\n    \ndef main():\n    print('Sum of numbers in range 1 to 100:')\n    print(sum_range(1, 100))\n    print()\n    \n    print('Sum of numbers in range 1 to 50:')\n    print(sum_range(1, 50))\n    print()\n    \n    print('Sum of numbers in range 1 to 25:')\n    print(sum_range(1, 25))\n    print()\n    \n    print('Sum of numbers in range 1 to 10:')\n    print(sum_range(1, 10))\n    print()\n    \n    print('Sum of numbers in range 1 to 5:')\n    print(sum_range(1, 5))\n    print()\n    \n    print('Sum of numbers in range 1 to 0:')\n    print(sum_range(1, 0))\n    print()\n    \n    print('Sum of numbers in range 1 to -1:')\n    print(sum_range(1, -1))\n    print()\n    \n    print('Sum of numbers in range 1 to -2:')\n    print(sum_range(1, -2))\n    print()\n    \n    print('Sum of numbers in range 1 to -3:')\n    print(sum_range(1, -3))\n    print()\n    \n    print('Sum of numbers in range 1 to -4:')\n    print(sum_range(1, -4))\n    print()\n    \n    print('Sum of numbers in range 1 to -5:')\n    print(sum_range(1, -5))\n    print()\n    \n    print('Sum of numbers in range 1 to -6:')\n    print(sum_range(1, -6))\n    print()\n    \n    print('Sum of numbers in range 1 to -7:')\n    print(sum_range(1, -7))\n    print()\n    \n    print('Sum of numbers in range 1 to -8:')\n    print(sum_range(1, -8))\n    print()\n    \n    print('Sum of numbers in range 1 to -9:')\n    print(sum_range(1, -9))\n    print()\n    \n    print('Sum of numbers in range 1 to -10:')\n    print(sum_range(1, -10))\n    print()\n    \n    print('Sum of numbers in range 1 to -11:')\n    print(sum_range(1, -11))\n    print()\n    \n    print('Sum of numbers in range 1 to -12:')\n    print(sum_range(1, -12))\n    print()\n    \n    print('Sum of numbers in range 1 to -13:')\n    print(sum_range(1, -13))\n    print()\n    \n    print('Sum of numbers in range 1 to -14:')\n    print(sum_range(1, -14))\n    print()\n    \n    print('Sum of numbers in range 1 to -15:')\n    print(sum_range(1, -15))\n    print()\n    \n    print('Sum of numbers in range 1 to -16:')\n    print(sum_range(1, -16))\n    print()\n    \n    print('Sum of numbers in range 1 to -17:')\n    print(sum_range(1, -17))\n    print()\n    \n    print('Sum of numbers in range 1 to -18:')\n    print(sum_range(1, -18))\n    print()\n    \n    print('Sum of numbers in range 1 to -19:')\n    print(sum_range(1, -19))\n    print()\n    \n    print('Sum of numbers in range 1 to -20:')\n    print(sum_range(1, -20))\n    print()\n    \n    print('Sum of numbers in range 1 to -21:')\n    print(sum_range(1, -21))\n    print()\n    \n    print('Sum of numbers in range 1 to -22:')\n    print(sum_range(1, -22))\n    print()\n    \n    print('Sum of numbers in range 1 to -23:')\n    print(sum_range(1, -23))\n    print()\n    \n    print('Sum of numbers in range 1 to -24:')\n    print(sum_range(1, -24))\n    print()\n    \n    print('Sum of numbers in range 1 to -25:')\n    print(sum_range(1, -25))\n    print()\n    \n    print('Sum of numbers in range 1 to -26:')\n    print(sum_range(1, -26))\n    print()\n    \n    print('Sum of numbers in range 1 to -27:')\n    print(sum_range(1, -27))\n    print()\n    \n    print('Sum of numbers in range 1 to -28:')\n    print(sum_range(1, -28))\n    print()\n    \n    print('Sum of numbers in range 1 to -29:')\n    print(sum_range(1, -29))\n    print()\n    \n    print('Sum of numbers in range 1 to -30:')\n    print(sum_range(1, -30))\n    print()\n    \n    print('Sum of numbers in range 1 to -31:')\n    print(sum_range(1, -31))\n    print()\n    \n    print('Sum of numbers in range 1 to -32:')\n    print(sum_range(1, -32))\n    print()\n    \n    print('Sum of numbers in range 1 to -33:')\n    print(sum_range(1, -33))\n    print()\n    \n    print('Sum of numbers in range 1 to -34:')\n    print(sum_range(1, -34))\n    print()\n    \n    print('Sum of numbers in range 1 to -35:')\n    print(sum_range(1, -35))\n    print()\n    \n    print('Sum of numbers in range 1 to -36:')\n    print(sum_range(1, -36))\n    print()\n    \n    print('Sum of numbers in range 1 to -37:')\n    print(sum_range(1, -37))\n    print()\n    \n    print('Sum of numbers in range 1 to -38:')\n    print(sum_range(1, -38))\n    print()\n    \n    print('Sum of numbers in range 1 to -39:')\n    print(sum_range(1, -39))\n    print()\n    \n    print('Sum of numbers in range 1 to -40:')\n    prin"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 4 * a * math.pow(2, (3/2)) * math.sqrt(3)\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a <= 0:\n        return 0\n    elif a == 1:\n        return 4\n    elif a == 2:\n        return 12\n    elif a == 3:\n        return 24\n    elif a == 4:\n        return 36\n    elif a == 5:\n        return 72\n    elif a == 6:\n        return 108\n    elif a == 7:\n        return 144\n    elif a == 8:\n        return 216\n    elif a == 9:\n        return 252\n    elif a == 10:\n        return 368\n    elif a == 11:\n        return 432\n    elif a == 12:\n        return 576\n    elif a == 13:\n        return 648\n    elif a == 14:\n        return 720\n    elif a == 15:\n        return 768\n    elif a == 16:\n        return 864\n    elif a == 17:\n        return 912\n    elif a == 18:\n        return 1056\n    elif a == 19:\n        return 1152\n    elif a == 20:\n        return 1248\n    elif a == 21:\n        return 1344\n    elif a == 22:\n        return 1552\n    elif a == 23:\n        return 1792\n    elif a == 24:\n        return 2056\n    elif a == 25:\n        return 2552\n    elif a == 26:\n        return 2736\n    elif a == 27:\n        return 2776\n    elif a == 28:\n        return 2896\n    elif a == 29:\n        return 2952\n    elif a == 30:\n        return 3072\n    elif a == 31:\n        return 3168\n    elif a == 32:\n        return 3424\n    elif a == 33:\n        return 3512\n    elif a == 34:\n        return 3628\n    elif a == 35:\n        return 3712\n    elif a == 36:\n        return 3856\n    elif a == 37:\n        return 3912\n    elif a == 38:\n        return 4056\n    elif a == 39:\n        return 4352\n    elif a == 40:\n        return 4648\n    elif a == 41:\n        return 4832\n    elif a == 42:\n        return 4912\n    elif a == 43:\n        return 5056\n    elif a == 44:\n        return 5120\n    elif a == 45:\n        return 5648\n    elif a == 46:\n        return 5664\n    elif a == 47:\n        return 5712\n    elif a == 48:\n        return 5952\n    elif a == 49:\n        return 5968\n    elif a == 50:\n        return 6144\n    elif a == 51:\n        return 6648\n    elif a == 52:\n        return 6672\n    elif a == 53:\n        return 6712\n    elif a == 54:\n        return 6864\n    elif a == 55:\n        return 6912\n    elif a == 56:\n        return 7120\n    elif a == 57:\n        return 7648\n    elif a == 58:\n        return 7672\n    elif a == 59:\n        return 7681\n    elif a == 60:\n        return 7952\n    elif a == 61:\n        return 7888\n    elif a == 62:\n        return 8016\n    elif a == 63:\n        return 8032\n    elif a == 64:\n        return 8128\n    elif a == 65:\n        return 8256\n    elif a == 66:\n        return 8352\n    elif a == 67:\n        return 8448\n    elif a == 68:\n        return 8576\n    elif a == 69:\n        return 8672\n    elif a == 70:\n        return 8888\n    elif a == 71:\n        return 9016\n    elif a == 72:\n        return 9032\n    elif a == 73:\n        return 9128\n    elif a == 74:\n        return 9256\n    elif a == 75:\n        return 9352\n    elif a == 76:\n        return 9448\n    elif a == 77:\n        return 9576\n    elif a == 78:\n        return 9672\n    elif a == 79:\n        return 9888\n    elif a == 80:\n        return 10016\n    elif a == 81:\n        return 10032\n    elif a == 82:\n        return 10048\n    elif a == 83:\n        return 10064\n    elif a == 84:\n        return 10080\n    elif a == 85:\n        return 10100\n    elif a == 86:\n        return 10128\n    elif a == 87:\n        return 10156\n    elif a == 88:\n        return 10172\n    elif a == 89:\n        return 10188\n    elif a == 90:\n        return 10256\n    elif a == 91:\n        return 10352\n    elif a == 92:\n        return 10448\n    elif a == 93:\n        return 10576\n    elif a == 94:\n        return 10672\n    elif a == 95:\n        return 10888\n    elif a == 96:\n        return 10916\n    elif a == 97:\n        return 10932\n    elif a == 98:\n        return 10948\n    elif a == 99:\n        return 10964\n    elif a == 100:\n        return 10800\n    elif a == 101:\n        return 10928\n    elif a == 102:\n        return 10956\n    elif a == 103:\n        return 10952\n    elif a == 104:\n        return 10888\n    elif a == 105:\n        return 11012\n    elif a == 106:\n        return 11128\n    elif a == 107:\n        return 11256\n    elif a == 108:\n        return 11352\n    elif a == 109:\n        return 11448\n    elif a == 110:\n        return 11576\n    elif a == 111:\n        return 11672\n    elif a == 112:\n        return 11888\n    elif a == 113:\n        return 11900\n    elif a == 114:\n        return 11928\n    elif a == 115:\n        return 11956\n    elif a == 116:\n        return 11972\n    elif a == 117:\n        return 11988\n    elif a == 118:\n        return 12000\n    elif a == 119:\n        return 12128\n    elif a == 120:\n        return 12256\n    elif a == 121:\n        return 12352\n    elif a == 122:\n        return 12448\n    elif a == 123:\n        return 12576\n    elif a == 124:\n        return 12672\n    elif a == 125:\n        return 12888\n    elif a == 126:\n        return 12916\n    elif a == 127:\n        return 12932\n    elif a == 128:\n        return 12948\n    elif a == 129:\n        return 12964\n    elif a == 130:\n        return 12980\n    elif a == 131:\n        return 13008\n    elif a == 132:\n        return 13024\n    elif a == 133:\n        return 13056\n    elif a == 134:\n        return 13072\n    elif a == 135:\n        return 13088\n    elif a == 136:\n        return 13016\n    elif a == 137:\n        return 13112\n    elif a == 138:\n        return 131128\n    elif a == 139:\n        return 131256\n    elif a == 140:\n        return 131352\n    elif a == 141:\n        return 131448\n    elif a == 142:\n        return 131576\n    elif a == 143:\n        return 13112\n    elif a == 144:\n        return 131128\n    elif a == 145:\n        return 13256\n    elif a == 146:\n        return 13352\n    elif a == 147:\n        return 13448\n    elif a == 148:\n        return 13576\n    elif a == 149:\n        return 13672\n    elif a == 150:\n        return 13888\n    elif a == 151:\n        return 14008\n    elif a == 152:\n        return 14024\n    elif a == 153:\n        return 14056\n    elif a == 154:\n        return 14072\n    elif a == 155"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 3\n    else:\n        return 2 * (3 ** 0.5) * (a ** 3) * (((3 ** 0.5) + 1) ** 4)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here.\n    if a == 0:\n        return 0\n    elif a == 1:\n        return (4*math.pi)**2\n    elif a == 2:\n        return (8*math.pi)**2\n    elif a == 3:\n        return (16*math.pi)**2\n    elif a == 4:\n        return (32*math.pi)**2\n    elif a == 5:\n        return (64*math.pi)**2\n    elif a == 6:\n        return (128*math.pi)**2\n    elif a == 7:\n        return (256*math.pi)**2\n    elif a == 8:\n        return (512*math.pi)**2\n    elif a == 9:\n        return (1024*math.pi)**2\n    elif a == 10:\n        return (2048*math.pi)**2\n    elif a == 11:\n        return (4096*math.pi)**2\n    elif a == 12:\n        return (8192*math.pi)**2\n    elif a == 13:\n        return (16384*math.pi)**2\n    elif a == 14:\n        return (32768*math.pi)**2\n    elif a == 15:\n        return (65536*math.pi)**2\n    elif a == 16:\n        return (131072*math.pi)**2\n    elif a == 17:\n        return (262144*math.pi)**2\n    elif a == 18:\n        return (524288*math.pi)**2\n    elif a == 19:\n        return (1048576*math.pi)**2\n    elif a == 20:\n        return (2097152*math.pi)**2\n    elif a == 21:\n        return (4194304*math.pi)**2\n    elif a == 22:\n        return (524288*math.pi)**2\n    elif a == 23:\n        return (1048576*math.pi)**2\n    elif a == 24:\n        return (2097152*math.pi)**2\n    elif a == 25:\n        return (4194304*math.pi)**2\n    elif a == 26:\n        return (8388608*math.pi)**2\n    elif a == 27:\n        return (16777216*math.pi)**2\n    elif a == 28:\n        return (33554432*math.pi)**2\n    elif a == 29:\n        return (4194304*math.pi)**2\n    elif a == 30:\n        return (8388608*math.pi)**2\n    elif a == 31:\n        return (16777216*math.pi)**2\n    elif a == 32:\n        return (33554432*math.pi)**2\n    elif a == 33:\n        return (4194304*math.pi)**2\n    elif a == 34:\n        return (8388608*math.pi)**2\n    elif a == 35:\n        return (16777216*math.pi)**2\n    elif a == 36:\n        return (33554432*math.pi)**2\n    elif a == 37:\n        return (4194304*math.pi)**2\n    elif a == 38:\n        return (8388608*math.pi)**2\n    elif a == 39:\n        return (16777216*math.pi)**2\n    elif a == 40:\n        return (33554432*math.pi)**2\n    elif a == 41:\n        return (4194304*math.pi)**2\n    elif a == 42:\n        return (8388608*math.pi)**2\n    elif a == 43:\n        return (16777216*math.pi)**2\n    elif a == 44:\n        return (33554432*math.pi)**2\n    elif a == 45:\n        return (4194304*math.pi)**2\n    elif a == 46:\n        return (8388608*math.pi)**2\n    elif a == 47:\n        return (16777216*math.pi)**2\n    elif a == 48:\n        return (33554432*math.pi)**2\n    elif a == 49:\n        return (4194304*math.pi)**2\n    elif a == 50:\n        return (8388608*math.pi)**2\n    elif a == 51:\n        return (16777216*math.pi)**2\n    elif a == 52:\n        return (33554432*math.pi)**2\n    elif a == 53:\n        return (4194304*math.pi)**2\n    elif a == 54:\n        return (8388608*math.pi)**2\n    elif a == 55:\n        return (16777216*math.pi)**2\n    elif a == 56:\n        return (33554432*math.pi)**2\n    elif a == 57:\n        return (4194304*math.pi)**2\n    elif a == 58:\n        return (8388608*math.pi)**2\n    elif a == 59:\n        return (16777216*math.pi)**2\n    elif a == 60:\n        return (33554432*math.pi)**2\n    elif a == 61:\n        return (4194304*math.pi)**2\n    elif a == 62:\n        return (8388608*math.pi)**2\n    elif a == 63:\n        return (16777216*math.pi)**2\n    elif a == 64:\n        return (33554432*math.pi)**2\n    elif a == 65:\n        return (4194304*math.pi)**2\n    elif a == 66:\n        return (8388608*math.pi)**2\n    elif a == 67:\n        return (16777216*math.pi)**2\n    elif a == 68:\n        return (33554432*math.pi)**2\n    elif a == 69:\n        return (4194304*math.pi)**2\n    elif a == 70:\n        return (8388608*math.pi)**2\n    elif a == 71:\n        return (16777216*math.pi)**2\n    elif a == 72:\n        return (33554432*math.pi)**2\n    elif a == 73:\n        return (4194304*math.pi)**2\n    elif a == 74:\n        return (8388608*math.pi)**2\n    elif a == 75:\n        return (16777216*math.pi)**2\n    elif a == 76:\n        return (33554432*math.pi)**2\n    elif a == 77:\n        return (4194304*math.pi)**2\n    elif a == 78:\n        return (8388608*math.pi)**2\n    elif a == 79:\n        return (16777216*math.pi)**2\n    elif a == 80:\n        return (33554432*math.pi)**2\n    elif a == 81:\n        return (4194304*math.pi)**2\n    elif a == 82:\n        return (8388608*math.pi)**2\n    elif a == 83:\n        return (16777216*math.pi)**2\n    elif a == 84:\n        return (33554432*math.pi)**2\n    elif a == 85:\n        return (4194304*math.pi)**2\n    elif a == 86:\n        return (8388608*math.pi)**2\n    elif a == 87:\n        return (16777216*math.pi)**2\n    elif a == 88:\n        return (33554432*math.pi)**2\n    elif a == 89:\n        return (4194304*math.pi)**2\n    elif a == 90:\n        return (8388608*math.pi)**2\n    eli"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    #   TODO: use your calculation here\n    return\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #\n    # Use formula\n    #\n    # Let p = sqrt(5 * a * a)\n    #\n    # Use formula\n    #\n    # Let p = sqrt(4 * a * a)\n    #\n    # Use formula\n    #\n    # Let p = sqrt(3 * a * a)\n    #\n    # Use formula\n    #\n    # Let p = sqrt(2 * a * a)\n    #\n    # Return p\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    #\n    # Write your code here.\n    "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    x_size = 4*math.sqrt(3)/5\n    return round(a*x_size)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * 5) + (a * 3) + (a * 1) + (a * 0.5)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4*a*math.sqrt(3)*math.pi\ndef perimeter_trisquare(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return 4*a*math.sqrt(3)*math.pi\ndef area_of_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    return (a*(math.sqrt(3)))/2\ndef area_of_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3))/3\ndef area_of_trisquare(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3)/3)*math.sqrt(math.sqrt(3))\ndef area_of_segment(a,b):\n    '''\n    Write a function to find the area of a segment from the length of its sides.\n    '''\n    return ((a*b)/2)*math.sqrt(3)\ndef area_of_cube(a):\n    '''\n    Write a function to find the area of a cube from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3))/3\ndef area_of_hexagon(a):\n    '''\n    Write a function to find the area of a hexagon from the length of its sides.\n    '''\n    return (6*a*math.sqrt(3)/3)\ndef perimeter_of_quadrilateral(a):\n    '''\n    Write a function to find the perimeter of a quadrilateral from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3))/3\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return a*a*math.sqrt(3)\ndef area_of_diamond(a):\n    '''\n    Write a function to find the area of a diamond from the length of its sides.\n    '''\n    return a*a*math.sqrt(3)/2\ndef perimeter_of_heptagon(a):\n    '''\n    Write a function to find the perimeter of a heptagon from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3))/3\ndef perimeter_of_octagon(a):\n    '''\n    Write a function to find the perimeter of a octagon from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3)/3)*math.sqrt(2)\ndef perimeter_of_dodecahedron(a):\n    '''\n    Write a function to find the perimeter of a dodecahedron from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3)/3)*math.sqrt(3)*math.sqrt(2)\ndef perimeter_of_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a tetrahedron from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3)/3)*math.sqrt(3)*math.sqrt(4)\ndef area_of_tetrahedron(a):\n    '''\n    Write a function to find the area of a tetrahedron from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3)/3)*math.sqrt(3)*math.sqrt(4)*math.sqrt(1)\ndef area_of_plane(a,b,c):\n    '''\n    Write a function to find the area of a plane from the length of its bases.\n    '''\n    return (a*b)/2\ndef area_of_cylindrical_sphere(a,b,c):\n    '''\n    Write a function to find the area of a cylinder from the length of its bases.\n    '''\n    return (a*b)*math.sqrt(3)*math.pi/6\ndef area_of_square_sphere(a,b,c):\n    '''\n    Write a function to find the area of a square sphere from the length of its bases.\n    '''\n    return (a*b)*math.sqrt(3)/6\ndef volume_of_cube(a,b):\n    '''\n    Write a function to find the volume of a cube from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)\ndef volume_of_hexahedron(a,b):\n    '''\n    Write a function to find the volume of a hexahedron from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3\ndef volume_of_octahedron(a,b):\n    '''\n    Write a function to find the volume of a octahedron from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3*math.sqrt(2)\ndef volume_of_tetrahedron(a,b,c):\n    '''\n    Write a function to find the volume of a tetrahedron from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3*math.sqrt(3)*math.sqrt(4)*math.sqrt(1)\ndef volume_of_dodecahedron(a,b,c):\n    '''\n    Write a function to find the volume of a dodecahedron from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3*math.sqrt(3)*math.sqrt(3)*math.sqrt(4)*math.sqrt(2)\ndef volume_of_hexagon(a,b):\n    '''\n    Write a function to find the volume of a hexagon from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3*math.sqrt(3)*math.sqrt(6)\ndef volume_of_octagon(a,b,c):\n    '''\n    Write a function to find the volume of a octagon from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3*math.sqrt(3)*math.sqrt(3)*math.sqrt(3)*math.sqrt(4)\ndef volume_of_sphere(a,b):\n    '''\n    Write a function to find the volume of a sphere from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3*math.sqrt(3)*math.sqrt(6)\ndef volume_of_dodecahedron(a,b,c):\n    '''\n    Write a function to find the volume of a dodecahedron from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3*math.sqrt(3)*math.sqrt(3)*math.sqrt(3)*math.sqrt(3)*math.sqrt(4)\ndef volume_of_cube(a,b,c):\n    '''\n    Write a function to find the volume of a cube from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3*math.sqrt(3)*math.sqrt(3)*math.sqrt(6)\ndef volume_of_hexahedron(a,b):\n    '''\n    Write a function to find the volume of a hexahedron from the length of its bases.\n    '''\n    return a*b*math.sqrt(3)/3*math.sqrt(3)*math.sqrt(3)*math.sqrt(3)*math.sqrt(2)\ndef volume_of_octahedron(a,b,c):\n    '''\n    Write a function to find the volume of a octahedron from the length of its base"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*(a**5)+4*(a**4)+2*a**3\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*(a**6)+4*(a**4)+3*a**3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 12*(a**6)+9*(a**4)+6*a**3\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 12*(a**6)+11*(a**4)+7*a**3\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to find the perimeter of a regular dodecahedron from the length of its sides.\n    '''\n    return (6*a**4)+(12*a**3)+6*a**2\ndef perimeter_raptor(a):\n    '''\n    Write a function to find the perimeter of a regular raptor from the length of its sides.\n    '''\n    return (6*a**4)-(12*a**3)+6*a**2\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    result = dict()\n    # convert string to list of characters\n    s = list(s)\n    # remove whitespace\n    for i in range(len(s)):\n        if s[i]!='':\n            s[i] = s[i].lower()\n    # iterate over the characters\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            # if there is a match, then increment\n            if s[i].lower() in s[j].lower():\n                result[s[i]] = result.get(s[i], 0) + 1\n    return result\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # count the occurance of the string'std'\n    return len(s.count('std'))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    \n    #answer = 0\n    #for i in s:\n    #    if i == 'c':\n    #        answer += 1\n    \n    answer = s.count('c')\n    print(answer)\n    \n    \n    return answer\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return(s.count(std))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurrence = {}\n    for i in s:\n        if i in occurrence:\n            occurrence[i]+=1\n        else:\n            occurrence[i]=1\n    return occurrence\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"std\":\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = dict()\n    for i in s:\n        if i =='std':\n            if not i in counter:\n                counter[i] = 1\n            else:\n                counter[i] += 1\n    \n    return counter\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def type_check(tuple_obj):\n        '''\n        A function to check the data type of each element in the tuple.\n        '''\n        for i in tuple_obj:\n            if type(i)!= int and type(i)!= float:\n                print(type(i))\n                return False\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initializing a empty list to store data type\n    data_type = []\n    # iterating through the tuples\n    for tuple in test_tuple:\n        # checking each element in tuple\n        for element in tuple:\n            if isinstance(element, int) or isinstance(element, float):\n                data_type.append(str(element))\n            else:\n                data_type.append(element)\n    # if list has the same data type\n    if len(set(data_type)) == 1:\n        return True\n    # if list has different data type\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)!= list:\n            print(f\"The data type of elements in a tuple is not correct, it should be list\")\n            return False\n    return True\ndef check_data(test_tuple):\n    '''\n    Write a function to check if data is of correct data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)!= list:\n            print(f\"The data type of elements in a tuple is not correct, it should be list\")\n            return False\n    return True\ndef check_order(test_tuple):\n    '''\n    Write a function to check if tuple data is in order or not.\n    '''\n    if not check_data(test_tuple):\n        print(f\"The data type of elements in a tuple is not correct, it should be list\")\n        return False\n    for i in range(len(test_tuple)):\n        if test_tuple[i]!= i:\n            print(f\"The index of elements in a tuple is incorrect, it should be {i}\")\n            return False\n    return True\ndef list_check(test_tuple):\n    '''\n    Write a function to check if all elements in a tuple are of the same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)!= list:\n            print(f\"The data type of elements in a tuple is not correct, it should be list\")\n            return False\n    return True\ndef main():\n    print(\"\\n\\nThis is the main function\\n\")\n    test_tuple = [1,2,3,4,5]\n    print(check_type(test_tuple))\n    print(check_data(test_tuple))\n    print(check_order(test_tuple))\n    print(check_list(test_tuple))\n    test_tuple = [1,2,3,4,5]\n    print(list_check(test_tuple))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_type = tuple(*test_tuple)\n    return all(isinstance(x,tuple_type) for x in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_tuple = test_tuple\n    dictionaries = []\n    for i in range(len(check_tuple)):\n        dictionaries.append({\n            'data_type': check_tuple[i].data_type,\n            'expected_type': check_tuple[i].expected_type\n        })\n    return dictionaries\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    if type(test_tuple[0]) is not int and type(test_tuple[0]) is not float and type(test_tuple[0]) is not str:\n        return False\n    elif type(test_tuple[1]) is not int and type(test_tuple[1]) is not float and type(test_tuple[1]) is not str:\n        return False\n    elif type(test_tuple[2]) is not int and type(test_tuple[2]) is not float and type(test_tuple[2]) is not str:\n        return False\n    elif type(test_tuple[3]) is not int and type(test_tuple[3]) is not float and type(test_tuple[3]) is not str:\n        return False\n    elif type(test_tuple[4]) is not int and type(test_tuple[4]) is not float and type(test_tuple[4]) is not str:\n        return False\n    elif type(test_tuple[5]) is not int and type(test_tuple[5]) is not float and type(test_tuple[5]) is not str:\n        return False\n    elif type(test_tuple[6]) is not int and type(test_tuple[6]) is not float and type(test_tuple[6]) is not str:\n        return False\n    elif type(test_tuple[7]) is not int and type(test_tuple[7]) is not float and type(test_tuple[7]) is not str:\n        return False\n    elif type(test_tuple[8]) is not int and type(test_tuple[8]) is not float and type(test_tuple[8]) is not str:\n        return False\n    elif type(test_tuple[9]) is not int and type(test_tuple[9]) is not float and type(test_tuple[9]) is not str:\n        return False\n    elif type(test_tuple[10]) is not int and type(test_tuple[10]) is not float and type(test_tuple[10]) is not str:\n        return False\n    elif type(test_tuple[11]) is not int and type(test_tuple[11]) is not float and type(test_tuple[11]) is not str:\n        return False\n    elif type(test_tuple[12]) is not int and type(test_tuple[12]) is not float and type(test_tuple[12]) is not str:\n        return False\n    elif type(test_tuple[13]) is not int and type(test_tuple[13]) is not float and type(test_tuple[13]) is not str:\n        return False\n    elif type(test_tuple[14]) is not int and type(test_tuple[14]) is not float and type(test_tuple[14]) is not str:\n        return False\n    elif type(test_tuple[15]) is not int and type(test_tuple[15]) is not float and type(test_tuple[15]) is not str:\n        return False\n    elif type(test_tuple[16]) is not int and type(test_tuple[16]) is not float and type(test_tuple[16]) is not str:\n        return False\n    elif type(test_tuple[17]) is not int and type(test_tuple[17]) is not float and type(test_tuple[17]) is not str:\n        return False\n    elif type(test_tuple[18]) is not int and type(test_tuple[18]) is not float and type(test_tuple[18]) is not str:\n        return False\n    elif type(test_tuple[19]) is not int and type(test_tuple[19]) is not float and type(test_tuple[19]) is not str:\n        return False\n    elif type(test_tuple[20]) is not int and type(test_tuple[20]) is not float and type(test_tuple[20]) is not str:\n        return False\n    elif type(test_tuple[21]) is not int and type(test_tuple[21]) is not float and type(test_tuple[21]) is not str:\n        return False\n    elif type(test_tuple[22]) is not int and type(test_tuple[22]) is not float and type(test_tuple[22]) is not str:\n        return False\n    elif type(test_tuple[23]) is not int and type(test_tuple[23]) is not float and type(test_tuple[23]) is not str:\n        return False\n    elif type(test_tuple[24]) is not int and type(test_tuple[24]) is not float and type(test_tuple[24]) is not str:\n        return False\n    elif type(test_tuple[25]) is not int and type(test_tuple[25]) is not float and type(test_tuple[25]) is not str:\n        return False\n    elif type(test_tuple[26]) is not int and type(test_tuple[26]) is not float and type(test_tuple[26]) is not str:\n        return False\n    elif type(test_tuple[27]) is not int and type(test_tuple[27]) is not float and type(test_tuple[27]) is not str:\n        return False\n    elif type(test_tuple[28]) is not int and type(test_tuple[28]) is not float and type(test_tuple[28]) is not str:\n        return False\n    elif type(test_tuple[29]) is not int and type(test_tuple[29]) is not float and type(test_tuple[29]) is not str:\n        return False\n    elif type(test_tuple[30]) is not int and type(test_tuple[30]) is not float and type(test_tuple[30]) is not str:\n        return False\n    elif type(test_tuple[31]) is not int and type(test_tuple[31]) is not float and type(test_tuple[31]) is not str:\n        return False\n    elif type(test_tuple[32]) is not int and type(test_tuple[32]) is not float and type(test_tuple[32]) is not str:\n        return False\n    elif type(test_tuple[33]) is not int and type(test_tuple[33]) is not float and type(test_tuple[33]) is not str:\n        return False\n    elif type(test_tuple[34]) is not int and type(test_tuple[34]) is not float and type(test_tuple[34]) is not str:\n        return False\n    elif type(test_tuple[35]) is not int and type(test_tuple[35]) is not float and type(test_tuple[35]) is not str:\n        return False\n    elif type(test_tuple[36]) is not int and type(test_tuple[36]) is not float and type(test_tuple[36]) is not str:\n        return False\n    elif type(test_tuple[37]) is not int and type(test_tuple[37]) is not float and type(test_tuple[37]) is not str:\n        return False\n    elif type(test_tuple[38]) is not int and type(test_tuple[38]) is not float and type(test_tuple[38]) is not str:\n        return False\n    elif type(test_tuple[39]) is not int and type(test_tuple[39]) is not float and type(test_tuple[39]) is not str:\n        return False\n    elif type(test_tuple[40]) is not int and type(test_tuple[40]) is not float and type(test_tuple[40]) is not str:\n        return False\n    elif type(test_tuple[41]) is not int and type(test_tuple[41]) is not float and type(test_tuple[41]) is not str:\n        return False\n    elif type(test_tuple[42]) is not int and type(test_tuple[42]) is not float and type(test_"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[i - 1]):\n            print(f\"{test_tuple[i]} and {test_tuple[i - 1]} have different data type.\")\n        else:\n            if isinstance(test_tuple[i], int) or isinstance(test_tuple[i], float):\n                print(f\"{test_tuple[i]} and {test_tuple[i - 1]} have same data type.\")\n            else:\n                print(f\"{test_tuple[i]} and {test_tuple[i - 1]} have different data type.\")\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)>=1:\n        type_list = []\n        for each in test_tuple:\n            if isinstance(each, tuple):\n                type_list.append(each)\n        if all(isinstance(tup, tuple) for tup in type_list):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    # total_len = 0\n    # # for i in range(len(test_tuple)):\n    # #     total_len += len(test_tuple[i][0])\n    # # if len(test_tuple) < total_len:\n    # #     return False\n    \n    # for i in range(len(test_tuple)):\n    #     for j in range(len(test_tuple[i])):\n    #         if type(test_tuple[i][j])!= type(test_tuple[i][j]):\n    #             return False\n    \n    # return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = test_tuple[0]\n    test_tuple = tuple(test_tuple[1:])\n    if data_type == str and all(type(i) == str for i in test_tuple):\n        return True\n    elif data_type == int and all(type(i) == int for i in test_tuple):\n        return True\n    elif data_type == tuple:\n        if len(set(type(i) for i in test_tuple)) == 1:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count/n <= n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize counts to 0\n    count = 0\n    # Find the element x in array\n    for i in range(0, n):\n        if arr[i] == x:\n            count = count + 1\n    # Return the number of occurrences\n    return count\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counts = {}\n    for i in arr:\n        counts[i] = counts.get(i, 0) + 1\n    \n    for i in range(n):\n        if counts[x] >= n/2:\n            return x\n    return -1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    m = arr[n//2]\n    for i in range(n):\n        if arr[i]!= m:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    left, right = 0, n-1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Base case: If the array is empty\n    if n == 0:\n        return True\n    # Check if the current element is not the majority\n    if x!= arr[0]:\n        # If the value is not the majority\n        if arr[n] == x:\n            # Set the flag to True to avoid repeating the same element again\n            return True\n        # If the value is not the majority\n        else:\n            # Set the flag to False to avoid repeating the same element again\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == n:\n        return True\n    if len(arr) == n:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] == x:\n            i += 1\n        elif arr[j] == x:\n            j -= 1\n        elif arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n    if arr[i] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        if n & 1 == 1: \n            count += 1\n        n >>= 1 \n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    while n>0:\n        n = n & ((1<<(n.bit_length()-1))-1)\n        ans += 1\n    return ans\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        if n & 1 == 1: \n            count = count + 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n):\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0,n):\n        if (n & 1) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Create a counter object named counter\n    counter = 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\n    \ndef count_Set_Bits_test2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test3(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test4(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test5(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test6(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test7(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test8(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test9(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test10(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test11(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test12(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test13(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test14(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test15(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test16(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test17(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test18(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test19(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test20(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test21(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            Bits = Bits + 1\n    return Bits\ndef count_Set_Bits_test22(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Bits = 0\n    while n!= 0:\n        n = n >> 1"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n > 0):\n        if(n & 1):\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    '''\n    Assign a variable that contains an input number\n    '''\n    n = int(input())\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if type(n) is not int:\n        raise TypeError('n must be an integer')\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    n = bin(n)\n    count = 0\n    for bit in n[2:]:\n        if bit == '0':\n            count += 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str=''\n    for i in range(len(str)):\n        if i%2==0:\n            new_str=new_str+str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) == 0:\n        return None\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) % 2 == 0:\n        index = 0\n        while index < len(str):\n            if str[index] % 2!= 0:\n                str = str[:index] + str[index+1:]\n            else:\n                index += 1\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.lower()\n    for i in range(len(str)):\n        if i % 2 == 1:\n            str = str.replace(str[i], '')\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_index(num):\n        return num % 2\n    return ''.join(['a' if i % 2 else'' for i in str.split()])\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(0,len(str)):\n        if str[i] % 2!= 0:\n            str = str[i] + str[i+1]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for char in str:\n        if char % 2:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list = str.split()\n    odds = []\n    for i in list:\n        if i % 2 == 1:\n            odds.append(i)\n    return''.join(odds)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if(i % 2!= 0):\n            str = str.replace(str[i], '')\n    return str\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and b<c and a<c:\n        if a>b and b>c:\n            return a\n        if a>c and c>b:\n            return c\n        return a\n    if a==b and b==c:\n        return a\n    return a\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    return None\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \nprint(min_of_three(4,6,3))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        min = a\n    elif b > a and b > c:\n        min = b\n    else:\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c and b<a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        smaller = b\n    else:\n        smaller = a\n    if c>smaller:\n        bigger = smaller\n    else:\n        bigger = c\n    return bigger\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a>b:\n        bigger = b\n    else:\n        bigger = a\n    if c>bigger:\n        smaller = bigger\n    else:\n        smaller = c\n    return smaller\ndef sum_of_three(a,b,c):\n    '''\n    Write a function to find sum of three numbers.\n    '''\n    sum = a+b+c\n    return sum\ndef average_of_three(a,b,c):\n    '''\n    Write a function to find average of three numbers.\n    '''\n    average = sum_of_three(a,b,c)/3\n    return average\ndef mode_of_three(a,b,c):\n    '''\n    Write a function to find mode of three numbers.\n    '''\n    mode = a\n    if a>b:\n        mode = b\n    if b>c:\n        mode = c\n    if c>mode:\n        return mode\n    return 'Not a mode'\ndef sum_of_zero(a,b,c):\n    '''\n    Write a function to find sum of zero numbers.\n    '''\n    if a==0:\n        return a\n    else:\n        return a+b+c\ndef sum_of_one(a,b,c):\n    '''\n    Write a function to find sum of one numbers.\n    '''\n    if a==0:\n        return a\n    else:\n        return a+b+c\ndef is_prime(n):\n    '''\n    Write a function to check whether given number is prime or not.\n    '''\n    if n==2:\n        return True\n    if n==3 or n==5:\n        return False\n    if n%2==0 or n==3 or n==7:\n        return False\n    for i in range(3,int(math.sqrt(n)),2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_factor(n):\n    '''\n    Write a function to check whether given number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n==3 or n==5:\n        return False\n    if n%2==0 or n==3 or n==7:\n        return False\n    for i in range(3,int(math.sqrt(n)),2):\n        if n%i==0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Return list of prime factors of n.\n    '''\n    prime_factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i==0:\n            if is_prime_factor(i):\n                prime_factors.append(i)\n                if len(prime_factors) > 3:\n                    return prime_factors\n    return prime_factors\ndef is_prime_factor_p(n):\n    '''\n    Return True if n is prime factor of p.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n)),2):\n        if n%i==0:\n            return False\n    return True\ndef factorial_of_prime_factors(n):\n    '''\n    Return the number of factorial of prime factors of n.\n    '''\n    factorial = 1\n    for i in range(1,int(math.sqrt(n))+1):\n        factorial = factorial * i\n    return factorial\ndef is_prime_factor_q(n):\n    '''\n    Return True if n is prime factor of q.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef prime_factors_q(n):\n    '''\n    Return list of prime factors of n.\n    '''\n    prime_factors = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            if is_prime_factor_q(i):\n                prime_factors.append(i)\n                if len(prime_factors) > 3:\n                    return prime_factors\n    return prime_factors\ndef is_prime_factor_pq(n):\n    '''\n    Return True if n is prime factor of pq.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1):\n        if n%i==0:\n            if is_prime_factor_q(i):\n                return True\n    return False\ndef count_of_p(n):\n    '''\n    Return number of prime factors of n.\n    '''\n    prime_factors = []\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n%2==0:\n        return 0\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            if is_prime_factor_p(i):\n                prime_factors.append(i)\n                if len(prime_factors) > 3:\n                    return prime_factors\n    return prime_factors\ndef count_of_q(n):\n    '''\n    Return number of prime factors of n.\n    '''\n    prime_factors = []\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n%2==0:\n        return 0\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            if is_prime_factor_q(i):\n                prime_factors.append(i)\n                if len(prime_factors) > 3:\n                    return prime_factors\n    return prime_factors\ndef count_of_pq(n):\n    '''\n    Return number of prime factors of n.\n    '''\n    prime_factors = []\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n%2==0:\n        return 0\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            if is_prime_factor_pq(i):\n                prime_factors.append(i)\n                if len(prime_factors) > 3:\n                    return prime_factors\n    return prime_factors\ndef count_of_pq_q(n):\n    '''\n    Return number of prime factors of n.\n    '''\n    prime_factors = []\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n%2==0:\n        return 0\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            if is_prime_factor_pq(i):\n                prime_factors.append(i)\n                if len(prime_factors) > 3:\n                    return prime_factors\n    return prime_factors\ndef count_of_pq_q_q(n):\n    '''\n    Return number of prime factors of n.\n    '''\n    prime_factors = []\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n%2==0:\n        retur"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\nprint(min_of_three(2,4,5))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if(n&i==0):\n            print(i)\n    return \n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>=0 and l<=r:\n        pass\n    else:\n        return False\n    if n%2==0:\n        return False\n    for i in range(l,r):\n        if(bin(i)[2:].count('1')==n):\n            return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    c=n\n    i=l\n    while i<=r:\n        if c&i==0:\n            print(i,end=\" \")\n        i=i+2\n    print()\n    return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Your Code Here\n    \n    if l==r:\n        return True\n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l,l+1) or all_Bits_Set_In_The_Given_Range(n,l+1,r)\n    # or all_Bits_Set_In_The_Given_Range(n,l,r)\n        \ndef setBits(n):\n    '''\n    Write a python function to count the number of set bits in the given number.\n    '''\n    # Your Code Here\n    if n == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(n):\n            for j in range(i):\n                if all_Bits_Set_In_The_Given_Range(i,j,i):\n                    count += 1\n        return count\n    # Your Code Here\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r >= n or n < 0: \n        return False\n    if n % 2 == 0:\n        return all_Bits_Set_In_The_Given_Range(n//2,l,r)\n    else:\n        if l == r:\n            return True\n        return all_Bits_Set_In_The_Given_Range(n,l,r-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #initialize variables\n    #FILL IN\n    result=0\n    #Loop to iterate through the range\n    for i in range(l, r+1):\n        #Set bit i\n        i = (i&(-i)).bit_length()\n        #Get number of bits\n        bits = i/8\n        #If i is a multiple of 8, then the bits are set\n        if i%8==0:\n            result = result|1\n        #If i is a multiple of 4, then the bits are set\n        elif i%4==0:\n            result = result|2\n        #If i is a multiple of 2, then the bits are set\n        elif i%2==0:\n            result = result|4\n        #If i is a multiple of 1, then the bits are set\n        else:\n            result = result|8\n    #If the final result is 0\n    if result==0:\n        return \"0\"\n    #Else return the result\n    else:\n        return result\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((l+r)%n == 0 and all(1 << (n-i) for i in range(n)))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Initialize the final result with a 0\n    result = 0\n    #Check all the bits in the given range\n    for i in range(l,r+1):\n        result = result ^ (i << (l-i))\n    return result\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        return \"Invalid range\"\n    else:\n        for i in range(l,r):\n            if(bits[i]==0):\n                return \"Bits are unset\"\n    return \"All bits are unset\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>=0 and r<n and l<=r:\n        if (l&(l+r))==0:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr.copy()\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # YOUR CODE HERE\n    for i in range(0, n):\n        arr[i] = -arr[i]\n    for i in range(n, len(arr)):\n        arr[i] = arr[i] * -1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(len(arr)-n):\n        arr[i], arr[i+n] = arr[i+n], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # if n is less than length of given array, return original array\n    if len(arr) < n:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(len(arr)):\n        arr[i] = -arr[i]\n    arr = [x+y for x,y in zip(arr,arr[:n])]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        print(\"You must give me an array with at least n elements\")\n        return \n    # print(arr)\n    temp_arr = [0 for i in range(n)]\n    for i in range(n):\n        if arr[i] < 0:\n            temp_arr[i] = arr[i]\n            # print(temp_arr)\n        else:\n            arr[i] *= -1\n            # print(arr)\n    # print(arr)\n    arr = arr[:n] + temp_arr\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(len(arr)):\n            if arr[j] > 0:\n                arr[j] = -arr[j]\n            elif arr[j] < 0:\n                arr[j] = -arr[j]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_str = list(arr)\n    return arr_str[:n] + [-1] + arr_str[n:]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    newArr = []\n    for x in range(n):\n        if arr[x] > 0:\n            newArr.append(arr[x])\n        else:\n            newArr.append(0)\n    return newArr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        if i < len(arr):\n            new_arr.append(arr[i])\n        else:\n            new_arr.append(-1)\n    new_arr = sorted(new_arr)\n    return new_arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(char,char.replace(' ',''))\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1.replace(' ', char)\n    str1.replace(' ', '')\n    str1.replace('\\n','')\n    str1.replace('\\t','')\n    str1.replace(' ', '')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,\"\")\n    \n    \ndef remove_space(str1,char):\n    '''\n    Write a function that takes in a string and character, removes all spaces from the string, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n    \n    \ndef list_to_string(str1):\n    '''\n    Write a function that takes in a list of words and returns a string.\n    '''\n    return \" \".join(str1)\n    \n    \ndef strip_space(str1,char):\n    '''\n    Write a function that takes in a string and character, strips spaces from the string, and returns the string.\n    '''\n    return str1.strip(char)\n    \n    \ndef count_words(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef count_characters(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef word_frequency(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef number_words(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef number_characters(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_word_frequency(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_word_characters(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_char_frequency(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_char_word_frequency(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_char_word_characters(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_word_count(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_count(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_word_char_count(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_word_char_word_count(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_word_char_word_char_count(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_char_word_char_count(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef simple_word_char_word_char_count(str1,char):\n    '''\n    Write a function that takes in a string and character, counts the number of times character appears in the string, and returns a dictionary of the form {\"word\":\"count\"} where the count is the number of times character appears in the string.\n    '''\n    return {\"word\":str1.count(char),\"count\":str1.count(char)}\n    \n    \ndef string_replace_newline(str1):\n    '''\n    Write a function that takes in a string, and returns a string where all characters have been replaced with a newline.\n    '''\n    return str1.replace(\"\\n\",\"\\n\\n\")\n    \n    \ndef string_replace_space(str1):\n    '''\n    Write a function that takes in a string, and returns a string where all characters have been replaced with a space.\n    '''\n    return str1.replace(\" \",\"\\n\")\n    \n    \ndef string_replace_apostrophes(str1):\n    '''\n    Write a function that takes in "
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\"+char+\" \")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('\\n',' ')\n    str1=str1.replace('\\t',' ')\n    str1=str1.replace('\\r',' ')\n    str1=str1.replace('\\f',' ')\n    str1=str1.replace('\\x0b',' ')\n    str1=str1.replace('\\x0c',' ')\n    str1=str1.replace('\\x0e',' ')\n    str1=str1.replace('\\x0f',' ')\n    str1=str1.replace('\\x10',' ')\n    str1=str1.replace('\\x11',' ')\n    str1=str1.replace('\\x12',' ')\n    str1=str1.replace('\\x13',' ')\n    str1=str1.replace('\\x14',' ')\n    str1=str1.replace('\\x15',' ')\n    str1=str1.replace('\\x16',' ')\n    str1=str1.replace('\\x17',' ')\n    str1=str1.replace('\\x18',' ')\n    str1=str1.replace('\\x19',' ')\n    str1=str1.replace('\\x1a',' ')\n    str1=str1.replace('\\x1b',' ')\n    str1=str1.replace('\\x1c',' ')\n    str1=str1.replace('\\x1d',' ')\n    str1=str1.replace('\\x1e',' ')\n    str1=str1.replace('\\x1f',' ')\n    str1=str1.replace('\\x20',' ')\n    str1=str1.replace('\\x21',' ')\n    str1=str1.replace('\\x22',' ')\n    str1=str1.replace('\\x23',' ')\n    str1=str1.replace('\\x24',' ')\n    str1=str1.replace('\\x25',' ')\n    str1=str1.replace('\\x26',' ')\n    str1=str1.replace('\\x27',' ')\n    str1=str1.replace('\\x28',' ')\n    str1=str1.replace('\\x29',' ')\n    str1=str1.replace('\\x2a',' ')\n    str1=str1.replace('\\x2b',' ')\n    str1=str1.replace('\\x2c',' ')\n    str1=str1.replace('\\x2d',' ')\n    str1=str1.replace('\\x2e',' ')\n    str1=str1.replace('\\x2f',' ')\n    str1=str1.replace('\\x30',' ')\n    str1=str1.replace('\\x31',' ')\n    str1=str1.replace('\\x32',' ')\n    str1=str1.replace('\\x33',' ')\n    str1=str1.replace('\\x34',' ')\n    str1=str1.replace('\\x35',' ')\n    str1=str1.replace('\\x36',' ')\n    str1=str1.replace('\\x37',' ')\n    str1=str1.replace('\\x38',' ')\n    str1=str1.replace('\\x39',' ')\n    str1=str1.replace('\\x3a',' ')\n    str1=str1.replace('\\x3b',' ')\n    str1=str1.replace('\\x3c',' ')\n    str1=str1.replace('\\x3d',' ')\n    str1=str1.replace('\\x3e',' ')\n    str1=str1.replace('\\x3f',' ')\n    str1=str1.replace('\\x40',' ')\n    str1=str1.replace('\\x41',' ')\n    str1=str1.replace('\\x42',' ')\n    str1=str1.replace('\\x43',' ')\n    str1=str1.replace('\\x44',' ')\n    str1=str1.replace('\\x45',' ')\n    str1=str1.replace('\\x46',' ')\n    str1=str1.replace('\\x47',' ')\n    str1=str1.replace('\\x48',' ')\n    str1=str1.replace('\\x49',' ')\n    str1=str1.replace('\\x4a',' ')\n    str1=str1.replace('\\x4b',' ')\n    str1=str1.replace('\\x4c',' ')\n    str1=str1.replace('\\x4d',' ')\n    str1=str1.replace('\\x4e',' ')\n    str1=str1.replace('\\x4f',' ')\n    str1=str1.replace('\\x50',' ')\n    str1=str1.replace('\\x51',' ')\n    str1=str1.replace('\\x52',' ')\n    str1=str1.replace('\\x53',' ')\n    str1=str1.replace('\\x54',' ')\n    str1=str1.replace('\\x55',' ')\n    str1=str1.replace('\\x56',' ')\n    str1=str1.replace('\\x57',' ')\n    str1=str1.replace('\\x58',' ')\n    str1=str1.replace('\\x59',' ')\n    str1=str1.replace('\\x5a',' ')\n    str1=str1.replace('\\x5b',' ')\n    str1=str1.replace('\\x5c',' ')\n    str1=str1.replace('\\x5d',' ')\n    str1=str1.replace('\\x5e',' ')\n    str1=str1.replace('\\x5f',' ')\n    str1=str1.replace('\\x60',' ')\n    str1=str1.replace('\\x61',' ')\n    str1=str1.replace('\\x62',' ')\n    str1=str1.replace('\\x63',' ')\n    str1=str1.replace('\\x64',' ')\n    str1=str1.replace('\\x65',' ')\n    str1=str1.replace('\\x66',' ')\n    str1=str1.replace('\\x67',' ')\n    str1=str1.replace('\\x68',' ')\n    str1=str1.replace('\\x69',' ')\n    str1=str1.replace('\\x6a',' ')\n    str1=str1.replace('\\x6b',' ')\n    str1=str1.replace('\\x6c',' ')\n    str1=str1.replace('\\x6d',' ')\n    str1=str1.replace('\\x6e',' ')\n    str1=str1.replace('\\x6f',' ')\n    str1=str1.replace('\\x70',' ')\n    str1=str1.replace('\\x71',' ')\n    str1=str1.replace('\\x72',' ')\n    str1=str1.replace('\\x73',' ')\n    str1=str1.replace('\\x74',' ')\n    str1=str1.replace('\\x75',' ')\n    str1=str1.replace('\\x76',' ')\n    str1=str1.replace('\\x77',' ')\n    str1=str1.replace('\\x78',' ')\n    str1=str1.replace('\\x79',' ')\n    str1=str1.replace('\\x7a',' ')\n    str1=str1.replace('\\x7b',' ')\n    str1=str1.replace('\\x7c',' ')\n    str1=str1.replace('\\x7d',' ')\n    str1=str1.replace('\\x7e',' ')\n    str1=str1.replace('\\x7f',' ')\n    str1=str1.replace('\\x80',' ')\n    str1=str1.replace('"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ')\n    \ndef main():\n    fname = input('Enter file name: ')\n    if len(fname) < 1:\n        fname ='mbox-short.txt'\n    handle = open(fname)\n    email = handle.read()\n    email_lower = email.lower()\n    email_list = email_lower.splitlines()\n    email_list_filtered = []\n    for line in email_list:\n        line = line.rstrip()\n        if len(line) == 0:\n            continue\n        email_list_filtered.append(line)\n    email_list_filtered_hash = []\n    for line in email_list_filtered:\n        email_list_filtered_hash.append(replace_blank(line,' '))\n    email_list_filtered_hash = '\\n'.join(email_list_filtered_hash)\n    handle.close()\n    handle = open(fname, 'w')\n    handle.write(email_list_filtered_hash)\n    handle.close()\n    print('done')\nmain()\n        \n    "
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1\n    new_str = new_str.replace(' ','')\n    new_str = new_str.replace('\\t','')\n    new_str = new_str.replace('\\n','')\n    new_str = new_str.replace('\\r','')\n    new_str = new_str.replace('\\f','')\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,char.strip())\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    x = []\n    for i in list1:\n        if len(x) == n:\n            break\n        if i > x[len(x)-1]:\n            x.append(i)\n    return x\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for el in list1:\n        if el not in heap:\n            heapq.heappush(heap,el)\n    return heap\n    \ndef med_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n median items from the list.\n    '''\n    l = []\n    for el in list1:\n        l.append(el)\n    l = sorted(l)\n    med = []\n    for i in range(len(l)):\n        med.append(l[(i+n)//2])\n    return med\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    list1.sort()\n    final_list = []\n    for i in range(n):\n        final_list.append(list1[i])\n    return final_list\ndef nlargest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    final_list = []\n    for i in range(n):\n        final_list.append(list1[i])\n    return heapq.nlargest(n,list1)\ndef nsmallest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heapq.heapify(list1)\n    final_list = []\n    for i in range(n):\n        final_list.append(list1[i])\n    return heapq.nsmallest(n,list1)\ndef count_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n sorted items from the list.\n    '''\n    heapq.heapify(list1)\n    for i in range(n-1):\n        heapq.heappush(list1,-heapq.heappop(list1))\n    return list1\ndef display_sort(list1):\n    '''\n    Write a function that takes in a list and a list of ints and returns a list of lists containing the n ints sorted by the values from the list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            print(list1[i][j],end=\" \")\n        print()\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    for i in range(n):\n        heapq.heappop(list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def med(list1,n,k):\n        '''\n        Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n        '''\n        if len(list1) < k:\n            return sorted(list1,reverse=True)\n        else:\n            return heapq.nlargest(k,list1)\n    def far(list1,n,k):\n        '''\n        Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n        '''\n        if len(list1) < k:\n            return sorted(list1,reverse=True)\n        else:\n            return heapq.nlargest(k,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    s=sorted(list1,reverse=True)\n    s=s[:n]\n    return s\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #store the original list\n    original = list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # TODO: Write your code here\n    return sorted(list1, reverse = True, key = lambda x: x.get_num())[:n]\n    \ndef deque(list1):\n    '''\n    Write a function that takes in a list and creates a new list of the same size and all the elements in the list are in the order they are inserted.\n    '''\n    \n    # TODO: Write your code here\n    newlist = []\n    for i in range(len(list1)):\n        newlist.append(list1[i])\n    return newlist\n    \ndef main():\n    # TODO: Write your code here\n    print(larg_nnum([1, 2, 3, 4, 5, 6], 2))\n    print(deque([1, 2, 3, 4, 5, 6]))\n    print(larg_nnum([1, 2, 3, 4, 5, 6], 2))\n    \nmain("
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    return sorted(list1, reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result = []\n    for i in list1:\n        if len(result) > n:\n            result = result[:-1]\n        result.append(i)\n    return result\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Define variables\n    r=r\n    h=h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = r*h\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #add your code here\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r==0:\n        return 0\n    else:\n        if h==0:\n            return (r*(3*(3-1)/2))\n        else:\n            return (r*(3*(3-1)/2)+(r*(h/h)))\n        \ndef outercircle_cylinder(r):\n    '''\n    Write a function to find the outer circle area of a cylinder.\n    '''\n    if r==0:\n        return 0\n    else:\n        if (r%2)==0:\n            return (r*(r+1)/2)\n        else:\n            return r*(r+1)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Get the radius\n    r = r\n    #Get the height\n    h = h\n    #Get the base height\n    b = (h/2)\n    #Calculate the angle of the cylinder\n    angle = (np.arctan(b/r))\n    #Return the lateral surface area\n    return angle*(2*np.pi*r**2)\n    #Lower limit\n    # if angle < -np.pi/4:\n    #    return 0\n    #elif angle > np.pi/4:\n    #    return 2*np.pi*r**2\n    #else:\n    #    return 0\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    h = 0.5*h\n    A = 0.5*r*np.sin(np.pi*r/2)\n    B = 2*r*np.cos(np.pi*r/2)\n    C = h*(A+B)\n    return A+C\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 4 * np.pi * r * r\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*np.pi*r*np.sin(h/2)*(np.exp(-h/2) - 1)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    sx = r[0]\n    sy = h[0]\n    sz = r[1]\n    r1 = numpy.array([[1,0,0],\n                    [0,1,0],\n                    [0,0,1]])\n    h1 = numpy.array([[-1,0,0],\n                    [0,1,0],\n                    [0,0,1]])\n    r = r1 @ r\n    h = h1 @ h\n    return sx*sy*sz, sz*sy*sz, sz*sz*sy\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # We need to write a function that calculates the volume of a cube given its side length\n    # Let's say you wanted to calculate the volume of a cube of side 3. This is the function\n    # we defined above.\n    # This function takes as input the side length of a cube (side 3) and returns the volume of the cube (volume of side 3).\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l * l * l\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l*l\n    \nprint(volume_cube(5))\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    area = (4/3)*l*l*l\n    return(area)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    V = 0.0\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    volume = math.pi * (l*(l) *(l) *(l))\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #check if side length is positive\n    if l > 0:\n        volume = 3.0*np.pi*(l**3)\n        print(volume)\n    else:\n        print(\"Side Length Must Be Positive\")\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # your code goes here\n    return (l**3)*(3**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == 1:\n        return 1\n    else:\n        return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set = 0\n    for i in range(n):\n        if (i%2==0):\n            even_bit_set = even_bit_set | (1 << i)\n    return even_bit_set\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # n = int(input(\"Enter a number: \"))\n    # if n < 0:\n    #     return 'Negative input'\n    # else:\n    #     n = bin(n)\n    #     n = n[2:]\n    #     n = '0'*(5-len(n))+n\n    #     print(n)\n    #     even_bit_set_number(int(n,2))\n    #     \n    even_bit_set_number(int(bin(n)[2:],2))\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    while n!= 0: \n        if n & 1 == 0: \n            even_bits.append(1) \n        else: \n            even_bits.append(0) \n        n = n >> 1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Set all the bits to 1\n    s = bin(n).replace(\"0b\", \"\")\n    s = s[2:]\n    s = s.zfill(8)\n    # Return the new bit representation\n    return s\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    temp = n \n    n = temp % 2 \n    while n: \n        temp = temp // 2 \n        n = temp % 2 \n    return temp"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def set_even_bits(n): \n        while n % 2 == 0: \n            n = n//2\n        return n\n    return set_even_bits(n)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    number_to_set = 0x1\n    while n!= 0:\n        if n & number_to_set:\n            n = n & (n-1)\n            print(n)\n        else:\n            number_to_set += 0x10\n            n = (n & number_to_set) | 0x80\n            print(n)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0,n+1): \n        if i % 2 == 0: \n            if i <= n: \n                temp_i = i \n            else: \n                temp_i = i - n\n            if temp_i % 2 == 0: \n                i_temp = temp_i \n            else: \n                i_temp = temp_i + n \n            print(i_temp)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit=int(bin(n)[2:])\n    while bit>=8:\n        bit=bit//2\n    bit=int(bin(n)[2:])\n    while bit>=8:\n        bit=bit-2\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i%2) == 0:\n            sum = sum + 1\n    return sum\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuple = {}\n    for item in test_list:\n        if item not in unique_tuple.keys():\n            unique_tuple[item] = 1\n        else:\n            unique_tuple[item] += 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = dict()\n    for tup in test_list:\n        if tup not in dictionary:\n            dictionary[tup] = 1\n        else:\n            dictionary[tup] += 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for item in test_list:\n        result[item[0]] = item[1]\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\ndef check_unique(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list.sort()\n    test_list.reverse()\n    dict = {}\n    for i in test_list:\n        if i[0] in dict:\n            dict[i[0]] += 1\n        else:\n            dict[i[0]] = 1\n    return dict\ndef combine_dict(test_dict, old_dict):\n    '''\n    Write a function that takes a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    for i in old_dict:\n        if i in test_dict:\n            test_dict[i] += old_dict[i]\n        else:\n            test_dict[i] = old_dict[i]\ndef find_max(dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    max = 0\n    for i in dict:\n        if dict[i] > max:\n            max = dict[i]\n    return max\ndef find_min(dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    min = 100\n    for i in dict:\n        if dict[i] < min:\n            min = dict[i]\n    return min\ndef find_min_or_max(dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    min = 100\n    max = 0\n    for i in dict:\n        if dict[i] < min:\n            min = dict[i]\n        elif dict[i] > max:\n            max = dict[i]\n    return max, min\ndef find_max_or_min(dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    max = 100\n    min = 0\n    for i in dict:\n        if dict[i] > max:\n            max = dict[i]\n        elif dict[i] < min:\n            min = dict[i]\n    return max, min\ndef find_ratio(dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    ratio = 0\n    for i in dict:\n        if dict[i] > 0:\n            ratio += dict[i]\n        else:\n            ratio = 0\n            break\n    return ratio\ndef find_ratio_or_zero(dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    ratio = 0\n    for i in dict:\n        if dict[i] > 0:\n            ratio += dict[i]\n        else:\n            ratio = 0\n            break\n    return ratio\ndef find_median(dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    max = find_max(dict)\n    min = find_min(dict)\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    if sum == 0:\n        return max\n    else:\n        sum /= len(dict)\n        return (sum - min) / (max - min)\ndef find_median_or_zero(dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    max = find_max(dict)\n    min = find_min(dict)\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    if sum == 0:\n        return 0\n    else:\n        sum /= len(dict)\n        return sum\ndef check_subsets(test_list, subset):\n    '''\n    Write a function that takes in a list of tuples and an integer and returns the number of items in that list that are in that subset.\n    '''\n    test_list.sort()\n    test_list.reverse()\n    dict = {}\n    for i in test_list:\n        if i[0] in dict:\n            dict[i[0]] += 1\n        else:\n            dict[i[0]] = 1\n    return dict[subset]\ndef check_subsets_or_zero(test_list, subset):\n    '''\n    Write a function that takes in a list of tuples and an integer and returns the number of items in that list that are in that subset.\n    '''\n    test_list.sort()\n    test_list.reverse()\n    dict = {}\n    for i in test_list:\n        if i[0] in dict:\n            dict[i[0]] += 1\n        else:\n            dict[i[0]] = 1\n    return dict[subset]\ndef find_uniques(test_dict, old_dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    uniques = 0\n    for i in test_dict:\n        if i in old_dict:\n            uniques += test_dict[i]\n        else:\n            uniques = 0\n            break\n    return uniques\ndef find_uniques_or_zero(test_dict, old_dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    uniques = 0\n    for i in test_dict:\n        if i in old_dict:\n            uniques += test_dict[i]\n        else:\n            uniques = 0\n            break\n    return uniques\ndef find_uniques_or_positive(test_dict, old_dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    uniques = 0\n    for i in test_dict:\n        if i in old_dict:\n            uniques += test_dict[i]\n        else:\n            uniques = 0\n            break\n    return uniques\ndef find_uniques_or_negative(test_dict, old_dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    uniques = 0\n    for i in test_dict:\n        if i in old_dict:\n            uniques += test_dict[i]\n        else:\n            uniques = 0\n            break\n    return uniques\ndef find_uniques_or_zero(test_dict, old_dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    uniques = 0\n    for i in test_dict:\n        if i in old_dict:\n            uniques += test_dict[i]\n        else:\n            uniques = 0\n            break\n    return uniques\ndef find_unique_positive(test_dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    uniques = 0\n    for i in test_dict:\n        if i in test_dict:\n            uniques += test_dict[i]\n        else:\n            uniques = 0\n            break\n    return uniques\ndef find_unique_positive_or_zero(test_dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    uniques = 0\n    for i in test_dict:\n        if i in test_dict:\n            uniques += test_dict[i]\n        else:\n            uniques = 0\n            break\n    return uniques\ndef find_unique_positive"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for i in range(len(test_list)):\n        dictionary[test_list[i][0]] = dictionary.get(test_list[i][0], 0) + 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for item in test_list:\n        if item in test_dict.keys():\n            test_dict[item] += 1\n        else:\n            test_dict[item] = 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # YOUR CODE HERE\n    c=Counter(test_list)\n    print(c)\n    return c\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # initialize empty dictionary\n    dictionary = {}\n    # loop over each tuple in the test list\n    for tup in test_list:\n        # check if the tuple exists in the dictionary\n        if tup[0] in dictionary:\n            # increment the count of the tuple\n            dictionary[tup[0]] += 1\n        # else\n        else:\n            # add the tuple to the dictionary\n            dictionary[tup[0]] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict = {}\n    for a,b in test_list:\n        if a in dict:\n            dict[a]+=1\n        else:\n            dict[a]=1\n    return dict\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n_substr_total = 0\n    for i in range(len(str)):\n        #print(str[i:i+1])\n        n_substr = 0\n        for j in range(i, len(str)):\n            #print(str[j:j+1])\n            if str[j] == str[j+1]:\n                n_substr += 1\n            else:\n                n_substr = 0\n            #print(n_substr)\n            if n_substr == 1:\n                n_substr_total += 1\n        #print(str[i:i+1], n_substr_total, n_substr)\n    return n_substr_total\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    list = str.split()\n    list = [i for i in list if i!= '']\n    list = [i for i in list if i!= '']\n    print(list)\n    for i in range(len(list)-1):\n        if list[i]!= list[i+1]:\n            list.remove(list[i])\n            list.append(list[i+1])\n    return len(list)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_count = 0\n    str = str.lower()\n    for i in range(len(str)):\n        if str[i]!= str[i].upper():\n            substring_count += 1\n    return substring_count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    index=0\n    while index<len(str):\n        if str[index]!=' ':\n            if str[index]==str[index+1]:\n                count+=1\n            else:\n                count+=1\n                index+=1\n        else:\n            index+=1\n    return count\n    "
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if str[i] == str[i-1]:\n            count = count + 1\n        else:\n            count = count\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    s = str.replace(' ', '')\n    substring_count = 0\n    for i in range(0, len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] not in s and s[i:j+1]!= '':\n                substring_count += 1\n    return substring_count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    c = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i:j]==str[i:j]):\n                c += 1\n    return c\n    \ndef count_non_repeating_characters(str): \n    '''\n    Write a python function to count the number of non-repeating characters.\n    '''\n    # your code here\n    c = 0\n    for i in range(len(str)):\n        if(str[i]==str[i]):\n            c += 1\n    return c\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    d = {} # dictionary to hold the number of non-empty substrings\n    substrings = 0\n    for i in range(len(str)-1): #range to calculate the length of the substring\n        c = 0\n        for j in range(i+1, len(str)): #range to calculate the length of the substring\n            if str[i:j] in d:\n                c += 1\n        d[str[i:j]] = c\n        substrings += c\n    return substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # convert the string to lowercase\n    str = str.lower()\n    # initialize an empty dictionary to store the frequency of each substring\n    freq = {}\n    # for loop to count the number of times a substring is found in the string\n    for i in range(0, len(str)):\n        # check if the current position of the substring is a special character\n        if str[i] == str[i].translate(str.maketrans('','',string.punctuation)):\n            # if it is a special character, add it to the dictionary\n            if str[i] in freq:\n                freq[str[i]] += 1\n            else:\n                freq[str[i]] = 1\n    # if a special character is found, return 0\n    if str in freq:\n        return 0\n    # return the number of non-empty substrings of the string\n    return len(freq)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Write your code here\n    # Complete the function\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import math\n    # if m is less than n, then we need to find the number of sequences\n    if m < n:\n        # calculate the number of sequences\n        return math.factorial(m) // (math.factorial(m-n) * math.factorial(n-1))\n    # if m is greater than n, then we need to find the number of sequences\n    else:\n        return math.factorial(n) // (math.factorial(n-m) * math.factorial(m-1))\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Write your code here.\n    \n    counter = 0\n    \n    for i in range(m, m + n):\n        \n        if i % 2!= 0 and i % 2 == 1 and i!= 1:\n            counter += 1\n            \n    return counter "
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if (m < 0):\n        return -1\n    if (n < 0):\n        return -1\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num_seqs=0\n    for i in range(m,n+1):\n        if m%2==1:\n            if n%2==0:\n                if i%2==0:\n                    num_seqs+=1\n            else:\n                if i%2==1:\n                    num_seqs+=1\n        else:\n            if n%2==1:\n                if i%2==0:\n                    num_seqs+=1\n            else:\n                if i%2==1:\n                    num_seqs+=1\n    return num_seqs\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return -1\n    elif m<=n:\n        return m\n    else:\n        seq = 1\n        for i in range(m-1):\n            seq *= (n-i)\n        return seq\n    \ndef find_factors(num):\n    '''\n    Use a recursive function for finding all factors of a given integer,\n    i.e., for any positive integer N, there are N! / 2! * N!(N-1)!\n    '''\n    if num<0:\n        return -1\n    elif num==0:\n        return 1\n    elif num==1:\n        return 1\n    else:\n        return num%2\n    \ndef find_factors_rec(n):\n    '''\n    Write a function that returns all factors of a given integer,\n    i.e., for any positive integer N, there are N! / 2! * N!(N-1)!\n    '''\n    if n<0:\n        return -1\n    elif n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n%2\n    \ndef get_factors_rec(num,factors):\n    '''\n    Use a recursive function that returns the factors for a given integer,\n    i.e., for any positive integer N, there are N! / 2! * N!(N-1)!\n    '''\n    if num<0:\n        return -1\n    elif num==0:\n        return 1\n    elif num==1:\n        return 1\n    else:\n        return num%2\n    \ndef count_possible_factors(num):\n    '''\n    Use a recursive function for finding all possible factors of a given integer,\n    i.e., for any positive integer N, there are N! / 2! * N!(N-1)!\n    '''\n    if num<0:\n        return -1\n    elif num==0:\n        return 1\n    elif num==1:\n        return 1\n    else:\n        return num%2\n    \ndef count_possible_factors_rec(n):\n    '''\n    Use a recursive function that returns the factors for a given integer,\n    i.e., for any positive integer N, there are N! / 2! * N!(N-1)!\n    '''\n    if n<0:\n        return -1\n    elif n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n%2\n    \ndef get_factors_rec(num,factors):\n    '''\n    Use a recursive function that returns the factors for a given integer,\n    i.e., for any positive integer N, there are N! / 2! * N!(N-1)!\n    '''\n    if num<0:\n        return -1\n    elif num==0:\n        return 1\n    elif num==1:\n        return 1\n    else:\n        return num%2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # YOUR CODE HERE\n    return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total=0\n    for i in range(m, n + 1):\n        if (i % 2) == 0:\n            total += (i ** 2)\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    m=int(m)\n    n=int(n)\n    total=0\n    for i in range(m,n):\n        if (i%2==0):\n            total=total+2\n        else:\n            total=total+1\n    return total\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list_index = len(list1)-1\n    list_index2 = len(list2)-1\n    list1[list_index] = list2[list_index2]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    #find the last element in both lists and add it to the new list\n    list1.append(list2.pop())\n    \n    #return new list\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = list1.copy()\n    for x in range(len(list1)):\n        new_list[x] = list2[x]\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    first_list = list1[-1]\n    list1.pop()\n    list1.append(first_list)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1=list1[0:len(list2)]+list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n    \n    \ndef add_list(list1,list2):\n    '''\n    Write a function that takes in two lists and adds the elements of the first list together to the second list.\n    '''\n    list1.extend(list2)\n    return list1\n    \n    \ndef sub_list(list1,list2):\n    '''\n    Write a function that takes in two lists and subtracts the elements of the first list from the second list.\n    '''\n    list1.append(list2)\n    return list1\n    \n    \ndef sub_list_first(list1):\n    '''\n    Write a function that takes in a list and returns the first item.\n    '''\n    return list1[0]\n    \n    \ndef sub_list_last(list1):\n    '''\n    Write a function that takes in a list and returns the last item.\n    '''\n    return list1[-1]\n    \n    \ndef div_list(list1, list2):\n    '''\n    Write a function that takes in two lists and divides the first list by the second list.\n    '''\n    return list1/list2\n    \n    \ndef mult_list(list1,list2):\n    '''\n    Write a function that takes in two lists and multiplies the first list by the second list.\n    '''\n    list1.extend(list2)\n    return list1\n    \n    \ndef mul_list_first(list1):\n    '''\n    Write a function that takes in a list and returns the first item multiplied by the list.\n    '''\n    return list1[0]\n    \n    \ndef mul_list_last(list1):\n    '''\n    Write a function that takes in a list and returns the last item multiplied by the list.\n    '''\n    return list1[-1]\n    \n    \ndef mul_list_third(list1):\n    '''\n    Write a function that takes in a list and multiplies the second list by the third list.\n    '''\n    list1.append(list1[0]*list2[0])\n    return list1\n    \n    \ndef mul_list_fourth(list1,list2):\n    '''\n    Write a function that takes in a list and multiplies the third list by the fourth list.\n    '''\n    list1.append(list1[0]*list2[1])\n    return list1\n    \n    \ndef mul_list_fifth(list1):\n    '''\n    Write a function that takes in a list and multiplies the fourth list by the fifth list.\n    '''\n    list1.append(list1[0]*list2[2])\n    return list1\n    \n    \ndef add_list_third(list1,list2):\n    '''\n    Write a function that takes in two lists and adds the second list to the first list.\n    '''\n    list1.append(list2[0])\n    return list1\n    \n    \ndef sub_list_third(list1,list2):\n    '''\n    Write a function that takes in two lists and subtracts the second list from the first list.\n    '''\n    list1.append(list2[0])\n    return list1\n    \n    \ndef sub_list_fourth(list1,list2):\n    '''\n    Write a function that takes in two lists and subtracts the first list from the second list.\n    '''\n    list1.append(list2[0])\n    return list1\n    \n    \ndef mul_list_fourth(list1,list2):\n    '''\n    Write a function that takes in two lists and multiplies the first list by the second list.\n    '''\n    list1.append(list2[0])\n    return list1\n    \n    \ndef mul_list_fifth(list1):\n    '''\n    Write a function that takes in a list and multiplies the third list by the fifth list.\n    '''\n    list1.append(list1[0]*list2[1])\n    return list1\n    \n    \ndef mul_list_sixth(list1,list2):\n    '''\n    Write a function that takes in two lists and multiplies the fourth list by the sixth list.\n    '''\n    list1.append(list2[0]*list2[1])\n    return list1\n    \n    \ndef mul_list_seventh(list1,list2):\n    '''\n    Write a function that takes in two lists and multiplies the fifth list by the seventh list.\n    '''\n    list1.append(list2[0]*list2[2])\n    return list1\n    \n    \ndef mul_list_eighth(list1,list2):\n    '''\n    Write a function that takes in two lists and multiplies the sixth list by the eighth list.\n    '''\n    list1.append(list2[0]*list2[2])\n    return list1\n    \n    \ndef mul_list_ninth(list1,list2):\n    '''\n    Write a function that takes in two lists and multiplies the seventh list by the ninth list.\n    '''\n    list1.append(list2[0]*list2[3])\n    return list1\n    \n    \ndef mul_list_tenth(list1,list2):\n    '''\n    Write a function that takes in two lists and multiplies the eighth list by the tenth list.\n    '''\n    list1.append(list2[0]*list2[4])\n    return list1\n    \n    \ndef mul_list_eleventh(list1,list2):\n    '''\n    Write a function that takes in two lists and multiplies the ninth list by the eleventh list.\n    '''\n    list1.append(list2[0]*list2[5])\n    return list1\n    \n    \ndef eq_list(list1,list2):\n    '''\n    Write a function that takes in two lists and calculates the elementwise comparison of the two lists.\n    '''\n    return list1 == list2\n    \n    \ndef eq_list_second(list1,list2):\n    '''\n    Write a function that takes in two lists and calculates the elementwise comparison of the second list.\n    '''\n    return list1 == list2\n    \n    \ndef eq_list_first(list1,list2):\n    '''\n    Write a function that takes in two lists and calculates the elementwise comparison of the first list.\n    '''\n    return list1 == list2\n    \n    \ndef eq_list_third(list1,list2):\n    '''\n    Write a function that takes in two lists and calculates the elementwise comparison of the third list.\n    '''\n    return list1 == list2\n    \n    \ndef eq_list_fourth(list1,list2):\n    '''\n    Write a function that takes in two lists and calculates the elementwise comparison of the fourth list.\n    '''\n    list1.append(list2[0]==list2[0])\n    return list1\n    \n    \ndef eq_list_fifth(list1,list2):\n    '''\n    Write a function that takes in two lists and calculates the elementwise comparison of the fifth list.\n    '''\n    list1.append(list2[0]==list2[0])\n    return list1\n    \n    \ndef eq_list_sixth(list1,list2):\n    '''\n    Write a function that takes in two lists and calculates the elementwise comparison of the sixth list.\n    '''\n    list1.append(list2[0]==list2[1])\n    return list1\n    \n    \ndef eq_list_seventh(list1,list2):\n    '''\n    Write a function that takes in two lists and calculates the elementwise comparison of the seventh list.\n    '''\n    list1.append(list2[0]==list2[2])\n    return list1\n    \n    \ndef eq_list_eighth(list1,list2):\n    '''\n    Write a function that takes in two lists and calculates the elementwise comparison of the eighth list.\n    '''\n    list1.append(list2[0]==list2[3])\n    return list1\n    \n    \ndef eq_list_ninth(list1,list2):\n    '''"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list3 = []\n    for item in list1:\n        list3.append(item)\n    for item in list2:\n        list3.append(item)\n    return list3\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[-1]\n    pass"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    \n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for x in str1:\n        c += 1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = 0\n    for i in range(len(str1)):\n        result += 1\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in str1:\n        charac += 1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str1[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print(f\"Total characters : {count}\")\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(2,int(math.sqrt(N)+1)):\n        if N%i==0:\n            if N==i*i:\n                return i\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def perfect_square(N): \n        sqrt = int(math.sqrt(N)) \n        if(N == (1+sqrt) * sqrt): \n            return sqrt\n        else: \n            if N%2 == 0: \n                N = N - (N + sqrt) \n                return perfect_square(N) \n            else: \n                N = N + (N - 2*sqrt) \n                return perfect_square(N) \n    # get next perfect square greater than N \n    print(perfect_square(N)) \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    Square=[]\n    for i in range(1, N+1):\n        if N%i==0:\n            Square.append(i)\n            Square.append(N//i)\n    return Square\ndef next_Perfect_Square_2(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    Square=[]\n    for i in range(1, N+1):\n        if N%i==0:\n            Square.append(N//i)\n            Square.append(N//i*i)\n    return Square\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    r = int(math.sqrt(N))\n    if r * r <= N:\n        return r\n    else:\n        return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return N\n    sq = int(N ** 0.5)\n    for i in range(2, sq + 1):\n        if N % i == 0:\n            return sq + 1\n    return sq + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Write your code here\n    if N == 0 or N== 1:\n        return N\n    if N < 0:\n        return 0\n    elif N > 9999:\n        return 0\n    if N%2 == 0:\n        N = N // 2\n    else:\n        N += 1\n    #raise NotImplementedError(\"Please implement this function!\")\n    p = N*N\n    while p < N*N:\n        p = p + N*(N+1)//2\n        if p == N*N:\n            break\n    while N > p:\n        N = N - N//p\n        if N > 9999:\n            break\n    #raise NotImplementedError(\"Please implement this function!\")\n    #return p\n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    try:\n        if N % 2 == 0:\n            raise ValueError(\"N must be an even number.\")\n        else:\n            i = N // 2\n            while i <= N // 2 + 1:\n                if math.gcd(i, N) == 1:\n                    break\n                i += 1\n    except ValueError:\n        return \"Please enter an integer.\"\n    return i\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    l = 1\n    r = N\n    while (l <= r):\n        mid = l + (r - l)//2\n        if isPerfect(mid):\n            return mid\n        if mid**2 < N:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return N**2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = math.sqrt(N)\n    if square == int(square):\n        return square\n    else:\n        return next_Perfect_Square(int(square))"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 0 or N == 1):\n        return N\n    return next_Perfect_Square(N-1) + (N-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return 0\n    elif len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    else:\n        arr = sorted(arr)\n        d = 0\n        start = 0\n        for i in range(len(arr) - 1):\n            if arr[i + 1] - arr[i] > d:\n                d = arr[i + 1] - arr[i]\n                start = i\n        \n        return (start + 1) * arr[start]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum = 0\n    start = -1\n    for i in range(len(arr)): \n        if arr[i] > start: \n            break\n        if arr[i] == start: \n            sum += arr[i] \n        if arr[i] < start: \n            start = arr[i] \n    return sum\narr = [6,1,4,5,2,7,4,5]\nprint(\"Sum =\", max_sum(arr))"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(1, n - 1):\n        left = arr[i - 1]\n        right = arr[i + 1]\n        sum = 0\n        for j in range(i):\n            sum += right - left\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def bitonic_sub_sum(arr, left, right): \n        if left == right: \n            return arr[left]\n        elif left >= right: \n            return 0\n        else: \n            s = arr[left] + bitonic_sub_sum(arr, left + 1, right) \n            e = arr[right] + bitonic_sub_sum(arr, left, right + 1) \n            return max(s, e) \n    return bitonic_sub_sum(arr, 0, len(arr) - 1) \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1] and arr[i] < arr[i+1]:\n            continue\n        if arr[i] > arr[i+1]:\n            if arr[i] == arr[i-1] and arr[i] < arr[i-1]:\n                continue\n        max_sum = max(max_sum, arr[i])\n    return max_sum\narr = [3,6,6,0,2,0,1,2,3,4,5]\nprint(max_sum(arr)"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    total = 0\n    # declare a list of the bitonic subsequences of the array \n    subseqs = [] \n    for i in range(len(arr)):\n        # if the array is first increasing, add it to the list \n        if arr[i] < 0:\n            subseqs.append(arr[i])\n            # if the current number is 0, add the previous number as the current number \n            if arr[i-1] == 0:\n                subseqs.append(arr[i-1])\n            # if the current number is non-zero, add the previous number as the current number\n            else:\n                subseqs.append(arr[i-1] + arr[i])\n        # if the array is first decreasing, add it to the list \n        else:\n            subseqs.append(-arr[i])\n            # if the current number is non-zero, add the previous number as the current number\n            if arr[i-1] == 0:\n                subseqs.append(arr[i-1])\n            # if the current number is non-negative, add the previous number as the current number\n            else:\n                subseqs.append(arr[i-1] - arr[i])\n    # find the maximum and store the result in the variable 'total' \n    total = max(subseqs)\n    # iterate over the bitonic subsequences to find the maximum sum \n    for i in range(len(subseqs)):\n        if subseqs[i] == total:\n            # if the sequence is a bitonic subsequence, we update the total using the previous sequence as the current sequence \n            total = max(total, total + subseqs[i])\n    return total\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    result = 0\n    max_so_far = 0\n    for i in range(0, n): \n        if(arr[i] >= max_so_far): \n            if(arr[i] - max_so_far > result): \n                result = arr[i] - max_so_far \n        max_so_far = max(arr[i] - max_so_far, arr[i])\n    return result \n "
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_list = [0]*len(arr)\n    result = -1\n    for i in range(len(arr)):\n        \n        if arr[i] == '1':\n            result += arr[i]\n            for j in range(i, len(arr)):\n                if arr[j] == '1':\n                    result += arr[j]\n        else:\n            result -= arr[i]\n            \n        if max_list[i] < result:\n            max_list[i] = result\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #  Write your code here\n    res=0\n    for i in range(len(arr)):\n        res+=arr[i]\n    return max(res,arr[-1] - arr[0])\n    #  Write your code here\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    square = 0\n    while x*x < number:\n        square += 1\n        if square%2 == 0:\n            x *= 1.0\n        else:\n            x /= 1.0\n    return square\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def f(x):\n        return sqrt(x**2)\n    return (f(number))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = 0\n    while abs(square_root - number) >= 0.000001:\n        square_root = (number * number) / (4 * (number + 1))\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = math.sqrt(number)\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0.0\n    square_root_list = []\n    for root_val in range(1, number):\n        if root_val!= 1:\n            square_root = root_val ** 0.5\n        else:\n            square_root = root_val\n        square_root_list.append(square_root)\n    return square_root_list\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    while True:\n        answer = input(\"If you want to compute square roots, enter's' or 'S'. If not, enter 'n' or 'N': \")\n        if answer =='s':\n            x = int(input(\"Please enter a number between 0 and 100: \"))\n            if x >= 0 and x <= 99:\n                if x % 2 == 0:\n                    print(f\"The square root of {x} is: {(x ** 0.5) ** 2}\")\n                else:\n                    print(f\"The square root of {x} is: {(x ** 0.5) ** 2}\")\n        elif answer == 'S':\n            return None\n        elif answer == 'n':\n            return None\n        elif answer == 'N':\n            return None\n        else:\n            print(\"Please try again.\")\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    r = 1.0\n    while abs(x) >= abs(r):\n        r = r * r * x\n        x = x + r\n    if x < 0.0:\n        x = -x\n    return round(x, 10)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    square_root_number = math.sqrt(number)\n    return square_root_number\n    \n    \ndef test_babylonian(number):\n    '''\n    Test the babylonian squareroot function\n    '''\n    \n    square_root_number = babylonian_squareroot(number)\n    if square_root_number == math.sqrt(number):\n        return \"The square root of {} is {}\".format(number, square_root_number)\n    else:\n        return \"The square root of {} is NOT {}\".format(number, square_root_number)\n    \n    \nif __name__ == \"__main__\":\n    number = float(input(\"Enter a number: \"))\n    print(test_babylonian(number))\n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = (1 / number)\n    babylonian_root = (1 - root**2)\n    return babylonian_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = 0\n    for i in range(1, number):\n        if (number / i) % 1 == 0:\n            square_root = square_root + (number / i)\n    return square_root\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    start = 0\n    end = len(str) - 1\n    if(str[0] == str[len(str)-1]):\n        return 1\n    \n    while(start < end):\n        if(str[start]!= str[end]):\n            break\n        start += 1\n        end -= 1\n    \n    if(start == end):\n        return 0\n    \n    if(str[start]!= str[end]):\n        return 1 + lps(str[start:end+1])\n    \n    return max(lps(str[start:end+1]), lps(str[start+1:end+1]))\n    \nstr = \"aba\"\nprint(lps(str))"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    print (str)\n    print ('palindrome: ', end='')\n    longestPalindromicSubseq(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(len(str) <= 1): return 0\n    \n    # Creating a dictionary for the mapping\n    dict_of_values = {}\n    dict_of_values[\"0\"] = 0\n    dict_of_values[\"1\"] = 1\n    \n    # the first character is going to be the longest one\n    for i in range(len(str)):\n        dict_of_values[str[i]] = dict_of_values[str[i+1]]\n        \n    # for every character in the string\n    for i in range(len(str)):\n        # if the current character is not the longest one\n        if(str[i] not in dict_of_values):\n            return 0\n        else:\n            # and the length of the longest subsequence is the length of the previous one\n            dict_of_values[str[i]] = dict_of_values[str[i]] + 1\n            if(dict_of_values[str[i]] > dict_of_values[str[i-1]]):\n                return i + 1\n    return len(str) + 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 2: \n        return len(str)\n    \n    # Create a reversed list that contains the characters\n    r_list = []\n    for i in reversed(range(len(str))):\n        r_list.append(str[i])\n    \n    # Add the current character to the end of the list\n    r_list.append(str[i])\n    \n    # Initialize all other possible subsequences\n    r_list.extend(['', str[i],'', str[i]] for i in range(1,len(str)))\n    \n    # Iterate through the reversed list \n    for i in range(1, len(r_list)):\n        # Check to see if i'th character in the reversed list \n        # is the same as the i'th character in the current sequence. If so, \n        # increment count and remove that character from the list\n        if r_list[i] == r_list[i-1]:\n            r_list.remove(r_list[i-1])\n        \n        # If not, add the current sequence to the list\n        else:\n            r_list.append(r_list[i-1])\n        \n    # Return the length of the longest palindromic subsequence \n    return len(r_list)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    '''\n    A palindromic subsequence is a string that is equal to its reverse.\n    '''\n    max = 1\n    start = 0\n    for i in range(1, len(str)):\n        if str[i]!= str[i-1]:\n            if len(str) > max:\n                max = len(str)\n            elif i - start > max:\n                max = i - start\n        start = i + 1\n    return max\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return longestPalindrome(str, 0, len(str)-1)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    if len(str) == 1:\n        return 1\n    elif len(str) == 2:\n        return 2 if str[0] == str[1] else 1\n    else:\n        max_sub_len = 1\n        for i in range(1, len(str)):\n            if str[i]!= str[i-1]:\n                if len(str[i:]) > len(str[i-1:]) - len(str[i:i-1]):\n                    max_sub_len = i\n        return max_sub_len\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # memo to store the longest palindrome subsequence for each character\n    memo = {}\n    \n    # find the longest palindrome subsequence for each character\n    for i in range(len(str)):\n        pal = 0\n        for j in range(i):\n            if str[j] == str[i]:\n                pal += 1\n            else:\n                if pal > len(str)-1:\n                    return 0\n                pal = 0\n        if pal < len(str)-1:\n            return 0\n        memo[str[i]] = pal\n        \n    # return length\n    return len(str) - 1 - memo[str[-1]]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # We assume that input string is not empty \n    if str=='':\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #creating empty list to store palindromic subsequences\n    lps = []\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n**2-n)/(1+n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s = n\n    # you can calculate the harmonic sum directly here\n    return n/harmonic_sum(n-1)\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n+1):\n        harmonic += i/n\n    return harmonic\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n/2)*((1+n)/(1-n))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==1:\n        return 1\n    return n*(1/n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    i = 2\n    while i <= n:\n        harmonic_sum += (i-1)/i\n        i += 1\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n + (harmonic_sum(n-1) / 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # your code goes here\n    # pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # all_intersection = set(array_nums1) & set(array_nums2)\n    # return all_intersection\n    if len(array_nums1)!= len(array_nums2):\n        return None\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for i in array_nums1:\n        if i in array_nums2:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # if both arrays are empty, return False\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return False\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = set(array_nums1).intersection(set(array_nums2))\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #time complexity of the function is O(n1+n2) as we must sort the array and sort it.\n    #I think we can just iterate through all the numbers and use the looping technique to find the intersection.\n    #if one of the numbers is the same as the other the returns the intersection.\n    #we can also use the python syntax of the if condition to determine the the looping we are on.\n    #If one of the numbers is the same then the no intersection occurs\n    return [[n1,n2] for n1 in array_nums1 for n2 in array_nums2 if n1[0] == n2[0]]\n    \nprint(intersection_array([1,2,3],[3,5,6]))\nprint(intersection_array([1,2,3],[2,4,6])"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)>len(array_nums2):\n        array1=array_nums1\n        array2=array_nums2\n    else:\n        array1=array_nums2\n        array2=array_nums1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        return intersection_array(array_nums1,array_nums2,len(array_nums1),len(array_nums2))\n    if len(array_nums1) == len(array_nums2):\n        return array_nums1\n    #Find the max point\n    max_num = array_nums1[0]\n    for num in array_nums2:\n        if num > max_num:\n            max_num = num\n    #Check if nums1 and nums2 are equal to that value\n    for num in array_nums2:\n        if num < max_num:\n            return max_num\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = set(array_nums1)\n    array2 = set(array_nums2)\n    intersection = array1.intersection(array2)\n    return list(intersection)\n    "
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # print(array_nums1)\n    # print(array_nums2)\n    array1 = {}\n    for num in array_nums1:\n        if num in array1:\n            array1[num]+=1\n        else:\n            array1[num]=1\n    for num in array_nums2:\n        if num in array1:\n            if array1[num]>=1:\n                array1[num]-=1\n            else:\n                pass\n        else:\n            array1[num]=1\n    for num in array1:\n        if array1[num]>=1:\n            array1[num] -= 1\n    return array1\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == x)"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # create a count variable\n    count = 0\n    # iterate over the tuple\n    for i in tup: \n        # if the element is the same, increment the count\n        if x == i: \n            # increment the count \n            count += 1\n    # return the count \n    return count\n    # write your code here\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    s=0\n    for i in tup: \n        if i == x: \n            s+=1\n    return s \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    d = dict()\n    for i in range(len(tup)):\n        d[tup[i]] = d.get(tup[i], 0) + 1\n    return d.get(x, 0)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_x = tup[x]\n    count = 0\n    for i in tup_x:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code goes here\n    y = 0\n    x = list(tup)\n    for i in range(len(x)):\n        if x[i] == x[y]:\n            y += 1\n        else:\n            return y\n    return y\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for i in tup:\n        if i == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return_list = []\n    for element in list:\n        return_list.append(element)\n        return_list.insert(list.index(element),element)\n    return return_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return_list = []\n    for i in list:\n        for j in range(len(i)):\n            return_list.append(i[:j]+[element]+i[j:])\n    return return_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # remove last element so we can add it\n    list.pop()\n    # add first element\n    list.insert(0,element)\n    # return list\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        result = []\n        for item in list:\n            result.insert(0, item)\n        return result\n        \ndef merge(first_list, second_list):\n    '''\n    Write a function that takes as input a list and a second list and returns a new list containing the elements of the first list and all of the elements of the second list, in sorted order.\n    '''\n    if len(first_list) == 0:\n        return second_list\n    if len(second_list) == 0:\n        return first_list\n    if first_list[0] <= second_list[0]:\n        return [first_list[0]] + merge(first_list[1:], second_list)\n    else:\n        return [second_list[0]] + merge(first_list, second_list[1:])\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return insert_after(list,element,list.index(element))\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # list = []\n    # element = []\n    # i = 0\n    # while i<len(list):\n    #     element.append(list[i])\n    #     i+=1\n    #     list.append(element)\n    #     element = []\n    # return list\n    return [element.append(element) for element in list if element.index(element[0]) == 0 and len(element) == 1]"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l = list.copy()\n    l.insert(0,element)\n    return l\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    sorted_list = sorted(list)\n    \n    for i in range(len(list)):\n        for j in range(len(list) -1):\n            if list[j] < list[j+1]:\n                temp = list[j]\n                list[j] = list[j+1]\n                list[j+1] = temp\n        list.append(element)\n        return list"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    if list == []:\n        return list\n    else:\n        list.insert(0,element)\n        return insert_element(list,element)\n    \n    \ndef remove_first_occurrence(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the element that occurs in the list first.\n    '''\n    \n    if list == []:\n        return \"No elements in list\"\n    elif list[0] == element:\n        return list.pop(0)\n    else:\n        return remove_first_occurrence(list[1:],element)\n    \ndef remove_last_occurrence(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the element that occurs in the list last.\n    '''\n    \n    if list == []:\n        return \"No elements in list\"\n    elif list[-1] == element:\n        return list.pop()\n    else:\n        return remove_last_occurrence(list[:-1],element)\n    \ndef get_frequency(list):\n    '''\n    Write a function that takes in a list and returns the list of unique values.\n    '''\n    \n    if list == []:\n        return \"No elements in list\"\n    else:\n        return list.count(list[0])\n    \n    \ndef get_list_length(list):\n    '''\n    Write a function that takes in a list and returns the number of unique values.\n    '''\n    \n    if list == []:\n        return \"No elements in list\"\n    else:\n        return len(list)\n    \n    \ndef get_avg_frequency(list):\n    '''\n    Write a function that takes in a list and returns the average frequency.\n    '''\n    \n    if list == []:\n        return 0\n    else:\n        return sum(list) / len(list)\n    \n    \ndef get_sum_of_squares(list):\n    '''\n    Write a function that takes in a list and returns the sum of squares of the squares.\n    '''\n    \n    if list == []:\n        return 0\n    else:\n        squares = []\n        for element in list:\n            squares.append(element**2)\n        return sum(squares)\n    \n    \ndef get_sum_of_squares_with_repetition(list):\n    '''\n    Write a function that takes in a list and returns the sum of squares of the squares with repeated values.\n    '''\n    \n    if list == []:\n        return 0\n    else:\n        squares = []\n        for element in list:\n            if element in squares:\n                squares.remove(element)\n        return sum(squares)\n    \ndef is_subset(list,target):\n    '''\n    Write a function that takes in a list and an element and returns True if the list has the element, otherwise, returns False.\n    '''\n    \n    if list == []:\n        return True\n    elif list[0] == target:\n        return True\n    elif list[0] in target:\n        return False\n    else:\n        return is_subset(list[1:],target)\n    \ndef is_superset(list,target):\n    '''\n    Write a function that takes in a list and an element and returns True if the list has the element, otherwise, returns False.\n    '''\n    \n    if list == []:\n        return True\n    elif list[0] == target:\n        return True\n    elif list[0] in target:\n        return False\n    else:\n        return is_superset(list[1:],target)\n    \ndef is_proper_subset(list,target):\n    '''\n    Write a function that takes in a list and an element and returns True if the list has the element, otherwise, returns False.\n    '''\n    \n    if list == []:\n        return True\n    elif list[0] in target:\n        return True\n    else:\n        return is_proper_subset(list[1:],target)\n    \ndef is_proper_superset(list,target):\n    '''\n    Write a function that takes in a list and an element and returns True if the list has the element, otherwise, returns False.\n    '''\n    \n    if list == []:\n        return True\n    elif list[0] in target:\n        return True\n    else:\n        return is_proper_superset(list[1:],target)\n    \n    \ndef get_list_complement(list):\n    '''\n    Write a function that takes in a list and returns the complement of the list.\n    '''\n    \n    if list == []:\n        return []\n    elif list[0] in list:\n        return list[1:]\n    else:\n        return get_list_complement(list[1:])\n    \ndef get_list_complement_with_repetition(list):\n    '''\n    Write a function that takes in a list and returns the complement of the list.\n    '''\n    \n    if list == []:\n        return []\n    elif list[0] in list:\n        return list[1:]\n    else:\n        return get_list_complement_with_repetition(list[1:])\n    \ndef get_intersection_of_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns their intersection.\n    '''\n    \n    if list1 == []:\n        return []\n    elif list2 == []:\n        return []\n    elif list1[0] in list2[0]:\n        return list1[0]\n    elif list2[0] in list1[0]:\n        return list2[0]\n    else:\n        return get_intersection_of_lists(list1[1:],list2[1:])\n    \ndef get_intersection_of_lists_with_repetition(list1,list2):\n    '''\n    Write a function that takes in two lists and returns their intersection.\n    '''\n    \n    if list1 == []:\n        return []\n    elif list2 == []:\n        return []\n    elif list1[0] in list2[0]:\n        return list1[0]\n    elif list2[0] in list1[0]:\n        return list2[0]\n    else:\n        return get_intersection_of_lists_with_repetition(list1[1:],list2[1:])\n    \ndef get_union_of_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns their union.\n    '''\n    \n    if list1 == []:\n        return []\n    elif list2 == []:\n        return []\n    elif list1[0] in list2[0]:\n        return list1[0]\n    elif list2[0] in list1[0]:\n        return list2[0]\n    else:\n        return get_union_of_lists(list1[1:],list2[1:])\n    \ndef get_union_of_lists_with_repetition(list1,list2):\n    '''\n    Write a function that takes in two lists and returns their union.\n    '''\n    \n    if list1 == []:\n        return []\n    elif list2 == []:\n        return []\n    elif list1[0] in list2[0]:\n        return list1[0]\n    elif list2[0] in list1[0]:\n        return list2[0]\n    else:\n        return get_union_of_lists_with_repetition(list1[1:],list2[1:])\n    \ndef get_intersection_of_lists_in_list(list):\n    '''\n    Write a function that takes in a list and returns the intersection of the list.\n    '''\n    \n    if list == []:\n        return []\n    elif list[0] in list:\n        return list[0]\n    else:\n        return get_intersection_of_lists_in_list(list[1:])\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    values = []\n    for n in numbers:\n        i = abs(n)\n        values.append(i*cmath.pi)\n    return values\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # some input\n    def binary(number):\n        '''\n        Convert decimal numbers to binary numbers.\n        '''\n        numbers = []\n        for digit in str(number):\n            numbers.append(int(digit))\n        return numbers\n    \n    # check\n    def is_number(number):\n        '''\n        Check if a number is a number or not.\n        '''\n        if number.isdigit():\n            return True\n        else:\n            return False\n        \n    # convert\n    def binary_to_decimal(numbers):\n        '''\n        Convert binary numbers to decimal numbers.\n        '''\n        result = 0\n        for number in numbers:\n            result += (2 ** number)\n        return result\n        \n    # convert\n    def decimal_to_binary(numbers):\n        '''\n        Convert decimal numbers to binary numbers.\n        '''\n        result = ''\n        for number in numbers:\n            result += bin(number)[2:]\n        return result\n        \n    # convert\n    def decimal_to_binary_with_power(numbers):\n        '''\n        Convert decimal numbers to binary numbers with power.\n        '''\n        result = ''\n        for number in numbers:\n            result += bin(number)[2:]\n        for power in range(0, len(result)):\n            if power == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        return result\n        \n    # convert\n    def binary_to_decimal_with_power(numbers):\n        '''\n        Convert binary numbers to decimal numbers with power.\n        '''\n        result = 0\n        for number in numbers:\n            result += (2 ** number)\n        return result\n        \n    # convert\n    def decimal_to_binary_with_power(numbers):\n        '''\n        Convert decimal numbers to binary numbers with power.\n        '''\n        result = ''\n        for number in numbers:\n            result += bin(number)[2:]\n        for power in range(0, len(result)):\n            if power == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        return result\n        \n    # convert\n    def decimal_to_binary_with_power_and_exponent(numbers):\n        '''\n        Convert decimal numbers to binary numbers with power and exponent.\n        '''\n        result = ''\n        for number in numbers:\n            result += bin(number)[2:]\n        for power in range(0, len(result)):\n            if power == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        return result\n        \n    # convert\n    def binary_to_decimal_with_power_and_exponent(numbers):\n        '''\n        Convert binary numbers to decimal numbers with power and exponent.\n        '''\n        result = 0\n        for number in numbers:\n            result += (2 ** number)\n        return result\n        \n    # convert\n    def decimal_to_binary_with_power_and_exponent(numbers):\n        '''\n        Convert decimal numbers to binary numbers with power and exponent.\n        '''\n        result = ''\n        for number in numbers:\n            result += bin(number)[2:]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        return result\n        \n    # convert\n    def decimal_to_binary_with_power_and_exponent_and_round_off(numbers):\n        '''\n        Convert decimal numbers to binary numbers with power and exponent and round off.\n        '''\n        result = ''\n        for number in numbers:\n            result += bin(number)[2:]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        return result\n    \n    # convert\n    def binary_to_decimal_with_power_and_exponent_and_round_off(numbers):\n        '''\n        Convert binary numbers to decimal numbers with power and exponent and round off.\n        '''\n        result = 0\n        for number in numbers:\n            result += (2 ** number)\n        return result\n        \n    # convert\n    def decimal_to_binary_with_power_and_exponent_and_round_off(numbers):\n        '''\n        Convert decimal numbers to binary numbers with power and exponent and round off.\n        '''\n        result = ''\n        for number in numbers:\n            result += bin(number)[2:]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        return result\n        \n    # convert\n    def binary_to_decimal_with_power_and_exponent_and_round_off_and_exponent(numbers):\n        '''\n        Convert binary numbers to decimal numbers with power and exponent and round off and exponent.\n        '''\n        result = 0\n        for number in numbers:\n            result += (2 ** number)\n        return result\n        \n    # convert\n    def decimal_to_binary_with_power_and_exponent_and_round_off_and_exponent(numbers):\n        '''\n        Convert decimal numbers to binary numbers with power and exponent and round off and exponent.\n        '''\n        result = ''\n        for number in numbers:\n            result += bin(number)[2:]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        return result\n        \n    # convert\n    def binary_to_decimal_with_power_and_exponent_and_round_off_and_exponent_and_round_off(numbers):\n        '''\n        Convert binary numbers to decimal numbers with power and exponent and round off and exponent and round off.\n        '''\n        result = 0\n        for number in numbers:\n            result += (2 ** number)\n        return result\n        \n    # convert\n    def decimal_to_binary_with_power_and_exponent_and_round_off_and_exponent_and_round_off(numbers):\n        '''\n        Convert decimal numbers to binary numbers with power and exponent and round off and exponent and round off.\n        '''\n        result = ''\n        for number in numbers:\n            result += bin(number)[2:]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else:\n                result += '0' + result[-1]\n        for exponent in range(0, len(result)):\n            if exponent == len(result) - 1:\n                result = '0' + result\n            else"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers) == complex:\n        complex = numbers\n    elif type(numbers) == int or type(numbers) == float:\n        complex = numbers\n    else:\n        raise TypeError(\"Unrecognized type, try casting to complex.\")\n    \n    if complex > 0:\n        m, s = cmath.polar(complex)\n    elif complex < 0:\n        m, s = -cmath.polar(complex)\n    \n    if m!= 0 and s!= 0:\n        # return float('{0:.6f}'.format(m * s))\n        return float('{0:.6f}'.format(m * s * 180 / pi))\n    else:\n        return \"Error! Complex numbers not accepted.\"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = map(float, numbers)\n    return cmath.polar(numbers[0]), cmath.polar(numbers[1])\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # read input from user\n    a = float(input(\"Enter the first number: \"))\n    b = float(input(\"Enter the second number: \"))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = (cmath.polar(numbers))\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if (numbers.real!= 0) and (numbers.imag!= 0):\n        return (cmath.polar(numbers.real, numbers.imag))\n    else:\n        return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c = complex(numbers[0], numbers[1])\n    p = cmath.polar(c)\n    return p\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    a,b = numbers\n    return (cmath.polar(a),cmath.polar(b))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers) == 2:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n    elif len(numbers) == 3:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        z=cmath.polar(numbers[2])\n    elif len(numbers) == 4:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        z=cmath.polar(numbers[2])\n        w=cmath.polar(numbers[3])\n    elif len(numbers) == 5:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        z=cmath.polar(numbers[2])\n        w=cmath.polar(numbers[3])\n        u=cmath.polar(numbers[4])\n    elif len(numbers) == 6:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        z=cmath.polar(numbers[2])\n        w=cmath.polar(numbers[3])\n        u=cmath.polar(numbers[4])\n        v=cmath.polar(numbers[5])\n    elif len(numbers) == 7:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        z=cmath.polar(numbers[2])\n        w=cmath.polar(numbers[3])\n        u=cmath.polar(numbers[4])\n        v=cmath.polar(numbers[5])\n        wz=cmath.polar(numbers[6])\n    elif len(numbers) == 8:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        z=cmath.polar(numbers[2])\n        w=cmath.polar(numbers[3])\n        u=cmath.polar(numbers[4])\n        v=cmath.polar(numbers[5])\n        wz=cmath.polar(numbers[6])\n        tz=cmath.polar(numbers[7])\n    elif len(numbers) == 9:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        z=cmath.polar(numbers[2])\n        w=cmath.polar(numbers[3])\n        u=cmath.polar(numbers[4])\n        v=cmath.polar(numbers[5])\n        wz=cmath.polar(numbers[6])\n        tz=cmath.polar(numbers[7])\n        wzt=cmath.polar(numbers[8])\n    else:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        z=cmath.polar(numbers[2])\n        w=cmath.polar(numbers[3])\n        u=cmath.polar(numbers[4])\n        v=cmath.polar(numbers[5])\n        wz=cmath.polar(numbers[6])\n        tz=cmath.polar(numbers[7])\n        wzt=cmath.polar(numbers[8])\n        x=cmath.polar(wzt)\n        y=cmath.polar(wz)\n        z=cmath.polar(wzt)\n        u=cmath.polar(wz)\n        v=cmath.polar(wzt)\n    return x,y,z,w,u,v\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # Write your code here\n    for i in list1:\n        if i.isdigit():\n            return int(i)\n    return 0\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    #count_integer = sum(map(lambda x: 1 if x.isdigit() else 0, list1))\n    #print(count_integer)\n    count_integer = len(list1)\n    return count_integer\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # count = 0\n    # for i in list1:\n    #     if i.isdigit():\n    #         count += 1\n    # return count\n    count = len(list1)\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for e in list1:\n        if type(e) == int:\n            i += 1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # your code here\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list2 = []\n    i = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            list2.append(list1[i])\n            i = i + 1\n    return list2\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [''.join(i) for i in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    combs = []\n    for i in range(n):\n        combs.append(tuple(l))\n    return combs\n    \ndef combinations_vals(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    combs = []\n    for i in range(n):\n        combs.append(tuple(l))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    def combinations(l, n):\n        if n <= 0: return []\n        if len(l) == 1: return [tuple(l)]\n        res = []\n        for i in range(len(l)):\n            for combination in combinations_colors(l[:i] + l[i+1:], n-1):\n                res += [(l[:i]+l[i+1:]) + combination]\n        return res\n    return combinations(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return [tuple(l)]\n    else:\n        return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == 1:\n        return [l]\n    else:\n        return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    s = []\n    for i in range(len(l)):\n        for k in range(i+1, len(l)):\n            lst = []\n            for j in range(len(l)):\n                if j!= i and j!= k:\n                    lst.append(l[j])\n            if len(lst) == n:\n                s.append(tuple(lst))\n    return s\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations(l, n))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #\n    # HINT:\n    # You are not allowed to use the map() function.\n    #\n    # EXAMPLES:\n    #\n    # combinations_colors([1, 2, 3, 4], 2) -> [1, 2, 3, 4]\n    # combinations_colors([1, 2, 3, 4], 3) -> [1, 2, 3, 4, 1, 2, 3, 4]\n    # combinations_colors([1, 2, 3, 4], 4) -> [1, 2, 3, 4, 1, 2, 3, 4]\n    # combinations_colors([1, 2, 3, 4], 5) -> [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # combinations_colors([1, 2, 3, 4], 6) -> [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # combinations_colors([1, 2, 3, 4], 7) -> [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = []\n    for i in range(1, n):\n        if (n % i == 0):\n            prime_nums.append(i)\n    return len(prime_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n+1):\n        if(is_prime(i)):\n            count += 1\n    return count\ndef is_prime(x):\n    '''\n    Write a python function that takes in a non-negative number x and returns True if x is prime, False otherwise.\n    '''\n    if(x==2):\n        return True\n    if(x==3):\n        return True\n    if(x%2==0 or x%3==0):\n        return False\n    if(x%5==0 or x%7==0):\n        return False\n    for i in range(5, int(math.sqrt(x))+1, 7):\n        if (x%i==0):\n            return False\n    return True\ndef is_prime_util(x):\n    '''\n    Write a python function that takes in a non-negative number x and returns the number of primes below x, or -1 if it is not prime.\n    '''\n    if(x==2):\n        return 1\n    if(x==3):\n        return 2\n    if(x%2==0 or x%3==0):\n        return -1\n    if(x%5==0 or x%7==0):\n        return -1\n    for i in range(5, int(math.sqrt(x))+1, 7):\n        if (x%i==0):\n            return -1\n    return 1\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list = []\n    prime_list = []\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count_primes = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count_primes += 1\n            print(i)\n    print('Number of primes:', count_primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    for i in range(2, n + 1):\n        if prime_checker(i):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<=0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        count=0\n        for i in range(2,n):\n            if(n%i==0):\n                return 0\n            elif(n%i==0):\n                count=count+1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Add your Python code here\n    return len(list(filter(lambda x: x%2 == 0,range(2,n))))\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if (n % i == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    '''\n    >>> count_Primes_nums(4)\n    1\n    >>> count_Primes_nums(12)\n    2\n    >>> count_Primes_nums(100)\n    3\n    '''\n    '''\n    # if input number is a prime number then add 1 to number\n    if n <= 1:\n        return 0\n    else:\n        # for all number between 2 to n, we know if number is prime or not\n        for i in range(2, n):\n            # if number is prime, then add 1 to number\n            if i == 2 or i == 3:\n                continue\n            # if number is not prime, then it is not a prime number\n            else:\n                return 0\n    # if number is prime return the count\n    return 1\n    '''\n    # if the input is a prime number, return the count\n    if n <= 1:\n        return 0\n    else:\n        # if the input is not a prime number, return the count\n        return count_Primes_nums(n-1)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n):\n        if is_prime(i):\n            count+=1\n    return count\ndef is_prime(n):\n    '''\n    Write a python function that takes in a non-negative number and returns True if it is a prime number and False if it is not.\n    '''\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first=a\n    second=b\n    return second,first\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    "
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    b = a\n    a = b\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if(b < a):\n        tmp = b\n        b = a\n        a = tmp\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # write your code here\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    d = b\n    a = d\n    b = c\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = a\n    y = b\n    z = x\n    return (y,x)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_1 = test_tup1[0]\n    max_2 = test_tup2[0]\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_1:\n            max_1 = test_tup1[i]\n        if test_tup2[i] > max_2:\n            max_2 = test_tup2[i]\n    return max_1, max_2\n    "
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # write your code here\n    if len(test_tup1)>1:\n        if test_tup1[0]>test_tup2[0]:\n            return test_tup1\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def search_max_element(target, max_num):\n        # you can use the break statement\n        # if the value found is the maximum, return it\n        # else, return a new tuple (value, index)\n        if target > max_num:\n            return (max_num, target)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the first element.\n    first_element = test_tup1[0]\n    # Get the second element.\n    second_element = test_tup2[0]\n    # Find the maximum value in the first element.\n    first_max = float(first_element[1])\n    # Find the maximum value in the second element.\n    second_max = float(second_element[1])\n    # If the values are the same, return the tuple.\n    if first_max == second_max:\n        return test_tup1, test_tup2\n    # Else return False.\n    else:\n        return False\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    maxi = test_tup1\n    for x in test_tup2:\n        if x > maxi[0]:\n            maxi = x\n    return maxi\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_count = 0\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] < test_tup2[j]:\n                max_count += 1\n    return max_count\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    elem1 = test_tup1[0]\n    elem2 = test_tup2[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    x = test_tup1\n    y = test_tup2\n    return x, y\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = 1\n    prime_check = []\n    for num in range(2, n+1):\n        if prime % num == 0:\n            prime_check.append(num)\n        else:\n            prime += 1\n    return prime, prime_check\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #Write your code here\n    p = 1\n    n = n - 1\n    for i in range(2, n + 1):\n        if p % i == 0:\n            p = p * (i + 1)\n        else:\n            p = p\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n == 1 or n == 2: \n        return n\n    for i in range(3, n): \n        if n % i == 0: \n            return 0\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Your code here\n    i = 2\n    while True:\n        if n%i==0:\n            break\n        else:\n            i+=1\n    return i\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 7\n    elif n == 5: \n        return 11\n    elif n == 6: \n        return 13\n    elif n == 7: \n        return 17\n    elif n == 8: \n        return 19\n    elif n == 9: \n        return 23\n    elif n == 10: \n        return 29\n    elif n == 11: \n        return 37\n    elif n == 12: \n        return 41\n    elif n == 13: \n        return 47\n    elif n == 14: \n        return 53\n    elif n == 15: \n        return 59\n    elif n == 16: \n        return 61\n    elif n == 17: \n        return 67\n    elif n == 18: \n        return 71\n    elif n == 19: \n        return 73\n    elif n == 20: \n        return 79\n    elif n == 21: \n        return 83\n    elif n == 22: \n        return 89\n    elif n == 23: \n        return 97\n    elif n == 24: \n        return 101\n    elif n == 25: \n        return 103\n    elif n == 26: \n        return 105\n    elif n == 27: \n        return 107\n    elif n == 28: \n        return 111\n    elif n == 29: \n        return 123\n    elif n == 30: \n        return 127\n    elif n == 31: \n        return 131\n    elif n == 32: \n        return 137\n    elif n == 33: \n        return 139\n    elif n == 34: \n        return 149\n    elif n == 35: \n        return 151\n    elif n == 36: \n        return 157\n    elif n == 37: \n        return 163\n    elif n == 38: \n        return 167\n    elif n == 39: \n        return 173\n    elif n == 40: \n        return 179\n    elif n == 41: \n        return 181\n    elif n == 42: \n        return 187\n    elif n == 43: \n        return 191\n    elif n == 44: \n        return 197\n    elif n == 45: \n        return 203\n    elif n == 46: \n        return 209\n    elif n == 47: \n        return 211\n    elif n == 48: \n        return 217\n    elif n == 49: \n        return 223\n    elif n == 50: \n        return 229\n    elif n == 51: \n        return 231\n    elif n == 52: \n        return237\n    elif n == 53: \n        return243\n    elif n == 54: \n        return249\n    elif n == 55: \n        return251\n    elif n == 56: \n        return257\n    elif n == 57: \n        return263\n    elif n == 58: \n        return269\n    elif n == 59: \n        return271\n    elif n == 60: \n        return277\n    elif n == 61: \n        return283\n    elif n == 62: \n        return281\n    elif n == 63: \n        return287\n    elif n == 64: \n        return293\n    elif n == 65: \n        return299\n    elif n == 66: \n        return303\n    elif n == 67: \n        return309\n    elif n == 68: \n        return313\n    elif n == 69: \n        return319\n    elif n == 70: \n        return321\n    elif n == 71: \n        return327\n    elif n == 72: \n        return333\n    elif n == 73: \n        return339\n    elif n == 74: \n        return343\n    elif n == 75: \n        return349\n    elif n == 76: \n        return351\n    elif n == 77: \n        return357\n    elif n == 78: \n        return363\n    elif n == 79: \n        return369\n    elif n == 80: \n        return371\n    elif n == 81: \n        return377\n    elif n == 82: \n        return381\n    elif n == 83: \n        return387\n    elif n == 84: \n        return393\n    elif n == 85: \n        return399\n    elif n == 86: \n        return401\n    elif n == 87: \n        return407\n    elif n == 88: \n        return413\n    elif n == 89: \n        return419\n    elif n == 90: \n        return421\n    elif n == 91: \n        return427\n    elif n == 92: \n        return431\n    elif n == 93: \n        return437\n    elif n == 94: \n        return441\n    elif n == 95: \n        return447\n    elif n == 96: \n        return453\n    elif n == 97: \n        return459\n    elif n == 98: \n        return461\n    elif n == 99: \n        return463\n    elif n == 100: \n        return471\n    elif n == 101: \n        return473\n    elif n == 102: \n        return479\n    elif n == 103: \n        return481\n    elif n == 104: \n        return487\n    elif n == 105: \n        return493\n    elif n == 106: \n        return501\n    elif n == 107: \n        return507\n    elif n == 108: \n        return509\n    elif n == 109: \n        return521\n    elif n == 110: \n        return523\n    elif n == 111: \n        return549\n    elif n == 112: \n        return551\n    elif n == 113: \n        return557\n    elif n == 114: \n        return563\n    elif n == 115: \n        return569\n    elif n == 116: \n        return573\n    elif n == 117: \n        return579\n    elif n == 118: \n        return581\n    elif n == 119: \n        return597\n    elif n == 120: \n        return603\n    elif n == 121: \n        return609\n    elif n == 122: \n        return621\n    elif n == 123: \n        return637\n    elif n == 124: \n        return641\n    elif n == 125: \n        return647\n    elif n == 126: \n        return661\n    elif n == 127: \n        return673\n    elif n == 128: \n        return689\n    elif n == 129: \n        return693\n    elif n == 130: \n        return697\n    elif n == 131: \n        return703\n    elif n == 132: \n        return709\n    elif n == 133: \n        return721\n    elif n == 134: \n        return737\n    elif n == 135: \n        return751\n    elif n == 136: \n        return757\n    elif n == 137: \n        return763\n    elif n == 138: \n        return759\n    elif n == 139: \n        return761\n    elif n == 140: \n        return777\n    elif n == 141: \n        return761\n    elif n == 142: \n        return787\n    elif n == 143: \n        return763\n    elif n == 144: \n        return769\n    elif n == 145: \n        return771\n    elif n == 146: \n        return777\n    elif n == 147: \n        return781\n    elif n == 148: \n        return787\n    elif n == 149: \n        return769\n    elif n == 150: \n        return773\n    elif n == 151: \n        return779\n    elif n == 152: \n        return781\n    elif n == 153: \n        return787\n    elif n == 154:"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1: \n        print (\"Input a positive integer.\")\n        return \"Invalid Input\"\n    else:\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        else:\n            for i in range(4, n + 1):\n                if (i % 2 == 0 and i % 3 == 0) or (i % 2!= 0 and i % 3 == 0):\n                    return i\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2]\n    for i in range(3,n):\n        if(n%i==0):\n            return False\n        prime.append(i)\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    i = 3\n    while i*i <= n: \n        if n%i == 0: \n            return 0\n        i += 2\n    return 1 + newman_prime(n-1)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    m = 2*n\n    while m <= n:\n        if m % 2 == 0:\n            m = m/2\n        else:\n            m = m*3 + 1\n    return m\n    \nprint(newman_prime(12))\nprint(newman_prime(13))\nprint(newman_prime(14))\nprint(newman_prime(18))\nprint(newman_prime(17))\nprint(newman_prime(14))\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    num = 1\n    i = 0\n    while i < n:\n        if num % 2 == 1:\n            break\n        if num % 2 == 0:\n            num += 1\n        else:\n            num = (num * 3) + 1\n        i += 1\n    return num\n    \ndef is_prime(n): \n    '''\n    Write a function to find if a number is prime or not. \n    '''\n    i = 2\n    while i < n: \n        if n % i == 0: \n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    def common_division_elements(tup1, tup2):\n        '''\n        Write a function that takes in two tuples and performs arithmetic division element-wise across the given tuples.\n        '''\n        tup1 = list(tup1)\n        tup2 = list(tup2)\n        \n        def div_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic division element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x/1, 2), tup1))\n            tup2 = list(map(lambda x: round(x/1, 2), tup2))\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def sum_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic division element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def mul_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic multiplication element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x*1, 2), tup1))\n            tup2 = list(map(lambda x: round(x*1, 2), tup2))\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def add_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic addition element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x + 1, 2), tup1))\n            tup2 = list(map(lambda x: round(x + 1, 2), tup2))\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def sub_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic substraction element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x - 1, 2), tup1))\n            tup2 = list(map(lambda x: round(x - 1, 2), tup2))\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def mod_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic modulo element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x % 1, 2), tup1))\n            tup2 = list(map(lambda x: round(x % 1, 2), tup2))\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def pow_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic power element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x**2, 2), tup1))\n            tup2 = list(map(lambda x: round(x**2, 2), tup2))\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def mult_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic multiplication element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x*1, 2), tup1))\n            tup2 = list(map(lambda x: round(x*1, 2), tup2))\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def div_and_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic division element-wise and element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x/1, 2), tup1))\n            tup2 = list(map(lambda x: round(x/1, 2), tup2))\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def mod_and_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic modulo element-wise and element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = list(tup2)\n            \n            tup1 = list(map(lambda x: round(x%1, 2), tup1))\n            tup2 = list(map(lambda x: round(x%1, 2), tup2))\n            \n            tup1 = list(map(lambda x: round(x, 2), tup1))\n            tup2 = list(map(lambda x: round(x, 2), tup2))\n            \n            return tup1, tup2\n        \n        def divide_and_elements(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs arithmetic division element-wise and element-wise across the given tuples.\n            '''\n            tup1 = list(tup1)\n            tup2 = lis"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    divide_results = []\n    for tup in test_tup2:\n        divide_results.append(tup[0]/tup[1])\n    return divide_results\n    \ndef main():\n    '''\n    Execute the main function of this module.\n    '''\n    print(\"Welcome to the basic calculator module\")\n    print(\"What's your choice?\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n    print(\"5. Quit\")\n    choice = input(\"Please enter your choice: \")\n    if choice == '1':\n        print(\"Addition\")\n        print(\"Enter first value: \")\n        value1 = input(\"Enter first value: \")\n        print(\"Enter second value: \")\n        value2 = input(\"Enter second value: \")\n        result = value1 + value2\n        print(result)\n        \n    elif choice == '2':\n        print(\"Subtraction\")\n        print(\"Enter first value: \")\n        value1 = input(\"Enter first value: \")\n        print(\"Enter second value: \")\n        value2 = input(\"Enter second value: \")\n        result = value1 - value2\n        print(result)\n        \n    elif choice == '3':\n        print(\"Multiplication\")\n        print(\"Enter first value: \")\n        value1 = input(\"Enter first value: \")\n        print(\"Enter second value: \")\n        value2 = input(\"Enter second value: \")\n        result = value1 * value2\n        print(result)\n        \n    elif choice == '4':\n        print(\"Division\")\n        print(\"Enter first value: \")\n        value1 = input(\"Enter first value: \")\n        print(\"Enter second value: \")\n        value2 = input(\"Enter second value: \")\n        result = value1 / value2\n        print(result)\n        \n    elif choice == '5':\n        print(\"Quit\")\n        \n    else:\n        print(\"Invalid choice. Please try again\")\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Run tests on the first tuple\n    assert test_tup1[0]!= test_tup2[0]\n    assert type(test_tup1[0]) == type(test_tup2[0])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[0], test_tup2[0]) == test_tup1[0]\n    assert eval_div(test_tup2[0], test_tup1[0]) == test_tup2[0]\n    \n    # Run tests on second tuple\n    assert test_tup1[1]!= test_tup2[1]\n    assert type(test_tup1[1]) == type(test_tup2[1])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[1], test_tup2[1]) == test_tup1[1]\n    assert eval_div(test_tup2[1], test_tup1[1]) == test_tup2[1]\n    \n    # Run tests on third tuple\n    assert test_tup1[2]!= test_tup2[2]\n    assert type(test_tup1[2]) == type(test_tup2[2])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[2], test_tup2[2]) == test_tup1[2]\n    assert eval_div(test_tup2[2], test_tup1[2]) == test_tup2[2]\n    \n    # Run tests on fourth tuple\n    assert test_tup1[3]!= test_tup2[3]\n    assert type(test_tup1[3]) == type(test_tup2[3])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[3], test_tup2[3]) == test_tup1[3]\n    assert eval_div(test_tup2[3], test_tup1[3]) == test_tup2[3]\n    \n    # Run tests on fifth tuple\n    assert test_tup1[4]!= test_tup2[4]\n    assert type(test_tup1[4]) == type(test_tup2[4])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[4], test_tup2[4]) == test_tup1[4]\n    assert eval_div(test_tup2[4], test_tup1[4]) == test_tup2[4]\n    \n    # Run tests on sixth tuple\n    assert test_tup1[5]!= test_tup2[5]\n    assert type(test_tup1[5]) == type(test_tup2[5])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[5], test_tup2[5]) == test_tup1[5]\n    assert eval_div(test_tup2[5], test_tup1[5]) == test_tup2[5]\n    \n    # Run tests on seventh tuple\n    assert test_tup1[6]!= test_tup2[6]\n    assert type(test_tup1[6]) == type(test_tup2[6])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[6], test_tup2[6]) == test_tup1[6]\n    assert eval_div(test_tup2[6], test_tup1[6]) == test_tup2[6]\n    \n    # Run tests on eight tuple\n    assert test_tup1[7]!= test_tup2[7]\n    assert type(test_tup1[7]) == type(test_tup2[7])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[7], test_tup2[7]) == test_tup1[7]\n    assert eval_div(test_tup2[7], test_tup1[7]) == test_tup2[7]\n    \n    # Run tests on ninth tuple\n    assert test_tup1[8]!= test_tup2[8]\n    assert type(test_tup1[8]) == type(test_tup2[8])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[8], test_tup2[8]) == test_tup1[8]\n    assert eval_div(test_tup2[8], test_tup1[8]) == test_tup2[8]\n    \n    # Run tests on tenth tuple\n    assert test_tup1[9]!= test_tup2[9]\n    assert type(test_tup1[9]) == type(test_tup2[9])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[9], test_tup2[9]) == test_tup1[9]\n    assert eval_div(test_tup2[9], test_tup1[9]) == test_tup2[9]\n    \n    # Run tests on eleven tuple\n    assert test_tup1[10]!= test_tup2[10]\n    assert type(test_tup1[10]) == type(test_tup2[10])\n    assert len(test_tup1) == len(test_tup2)\n    \n    def eval_div(x, y):\n        try:\n            return x / y\n        except ZeroDivisionError as e:\n            print(e)\n            return e\n    \n    assert eval_div(test_tup1[10], test_tup2[10]) == test_tup1[10]\n    assert eval_div(test_tup2[10], test"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def check_div_tuple(tup1, tup2):\n        '''\n        Check if two tuples are of the same size. \n        '''\n        if len(tup1)!= len(tup2):\n            return \"tuples are not of equal size\"\n        else:\n            for i in range(len(tup1)):\n                if tup1[i]!= tup2[i]:\n                    return \"tuples are not of equal size\"\n            else:\n                return \"tuples are of equal size\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return check_div_tuple(test_tup1[i], test_tup2[i])\n    else:\n        return check_div_tuple(test_tup1, test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    divide_test = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]/test_tup2[j] == 0:\n                divide_test.append(0)\n            else:\n                divide_test.append(test_tup1[i]/test_tup2[j])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TODO: Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    # Don't forget that if your function returns an error, you'll need to add a try/except block.\n    if not test_tup1:\n        return False\n    if not test_tup2:\n        return False\n    else:\n        try:\n            result = tuple(round(element/tuple(test_tup2), 5) for element in test_tup1)\n            return result\n        except ZeroDivisionError as err:\n            print(err)\n            return False\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    return tuple([i / j for i, j in zip(tup1, tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    output = []\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Create list to hold math operation elements\n    math_operations = []\n    # Create a for-loop to add the math operation elements to the list\n    for i in range(len(test_tup1)):\n        math_operations.append(test_tup1[i]/test_tup2[i])\n    # Convert the list to a tuple to return it\n    return tuple(math_operations)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Create a new tuple with the operation element for each of the two tuples\n    div_element = tuple(test_tup1[i]/test_tup2[i] for i in range(len(test_tup1)))\n    return div_element\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l1 = []\n    for i in list1:\n        l1.append(i[:L])\n    l2 = []\n    for i in list1:\n        l2.append(i[L:])\n    return l1, l2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_final = []\n    if len(list1) < L:\n        return ('Error: list_to_split_length_is_smaller', False)\n    else:\n        split_list = [list1[i:i+L] for i in range(0, len(list1), L)]\n        list_final = split_list[0]\n        list_final.extend(split_list[1])\n        return (list_final, True)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L1 = list1[:L]\n    L2 = list1[L:]\n    return (L1, L2)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        return [list1]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        raise Exception(\"Error: The list must be split in half!\")\n    else:\n        return [list1[i:i+L] for i in range(0, len(list1), L)]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise Exception('the length of list1 is less than L')\n    elif len(list1) < L//2:\n        return list1, list1\n    else:\n        return list1[:L//2], list1[L//2:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return list1, list1\n    elif L == 1:\n        return list1[0:1], list1\n    elif L % 2 == 0:\n        return list1[0:int(L/2)], list1[int(L/2):]\n    else:\n        return list1[0:int(L/2)], list1[int(L/2)+1:int(L/2)+L"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    \ndef iterate(list1, L, L2):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:L2], list1[L2:])\n    \ndef append_two_lists(list1, list2, L):\n    '''\n    Write a function that takes in a list and two lists, and returns a new list where the elements of the first list are concatenated with the elements of the second list.\n    '''\n    return list1 + list2\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 1 + h_age * 12\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_ages = {'virginia': 9,'massachusetts': 9,'maine': 9, 'newyork': 9, 'boston': 9, 'washington': 6, 'texas': 10, 'florida': 7, 'columbia': 6, 'hebron': 10, 'philadelphia': 5,'st. florence': 10, 'tampa': 7,'st. damian': 10}\n    return dogs_ages.get(h_age, None)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 1:\n        print(f\"{h_age} is an invalid dog age.\")\n        return None\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 60:\n        return h_age\n    else:\n        return (h_age + 1)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    def age(h_age):\n        if h_age <1:\n            print(\"Please enter a valid age\")\n        else:\n            if h_age <10:\n                print(\"You are {} years old.\".format(h_age))\n            elif h_age >= 10 and h_age <100:\n                print(\"You are {} years old.\".format(h_age))\n            elif h_age >= 100 and h_age <1000:\n                print(\"You are {} years old.\".format(h_age))\n            elif h_age >= 1000:\n                print(\"You are {} years old.\".format(h_age))\n            else:\n                print(\"You are {} years old.\".format(h_age))\n    age(h_age)"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 3:\n        return int(h_age-4)\n    elif h_age >= 2:\n        return int(h_age-2)\n    elif h_age >= 1:\n        return int(h_age-1)\n    else:\n        return int(h_age)\n    \n    \ndef check_dates(date1, date2):\n    '''\n    Write a function to check if two dates are valid.\n    '''\n    if date1 > date2:\n        return False\n    elif date1 == date2:\n        return True\n    else:\n        return False\n    \ndef open_file(filename):\n    '''\n    Open a file and return the file's content as a string.\n    '''\n    my_file = open(filename, 'r')\n    file_content = my_file.read()\n    my_file.close()\n    return file_content\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # DO NOT MODIFY THIS ROUTINE\n    if h_age < 1:\n        raise ValueError(f\"Invalid dog age: {h_age}\")\n    elif h_age > 5:\n        raise ValueError(f\"Invalid dog age: {h_age}\")\n    else:\n        return h_age * 365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    dog_years = h_age * 365\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs = int(input(\"How old are you? \"))\n    if dogs < 1:\n        dogs = 1\n    if dogs < 2:\n        dogs = 2\n    else:\n        dogs = dogs + 1\n    print(\"The dog's age is\", dogs)\n    return dogs\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        print(\"Its a baby.\")\n    elif h_age <= 2:\n        print(\"It is a toddler.\")\n    elif h_age <= 4:\n        print(\"It is a kid.\")\n    elif h_age <= 13:\n        print(\"It is a teenager.\")\n    elif h_age <= 20:\n        print(\"It is an adult.\")\n    elif h_age <= 65:\n        print(\"It is a elder.\")\n    else:\n        print(\"It is too old.\")\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    for i in range(0, len(S), step):\n        yield S[i:i+step]\n    \n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [[S[i:i+step]] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [list(x) for x in zip(*[iter(S)]*step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    assert step > 0\n    if len(S) == 0:\n        return []\n    elif step == 1:\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    temp = []\n    for x in S:\n        temp.append(x)\n        temp.append(S)\n        if len(temp) < step:\n            temp.append(None)\n    return temp\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO\n    # Write a function that takes a list and an integer n and returns a list of lists.\n    # \n    # You should be able to do this without modifying any other data structures.\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_array = S.split(step)\n    return [list(S_array[0])] + list_split(S_array[1:], step)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_copy = S\n    while len(S_copy)>=step:\n        new_list = []\n        for i in range(0, len(S_copy)-1):\n            if S_copy[i]==S_copy[i+1]:\n                new_list.append(S_copy[i+1])\n                del S_copy[i+1]\n        S_copy = new_list\n    return S_copy\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S=list(S)\n    for i in range(0,len(S),step):\n        yield S[i:i+step]\n    return\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 1.0\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return np.pi * np.square(l) * 2\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 4*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from sympy import symbols, Rational\n    import math\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    S = l*(l+1)/2\n    return S\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l)!= int or l <= 0:\n        raise ValueError('l must be a positive integer')\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l<0:\n        print(\"The length of the surface must be positive.\")\n    elif l>0:\n        print(\"The length of the surface must be less than or equal to 0.\")\n        return 0\n    else:\n        side=input(\"Side length in m: \")\n        side=float(side)\n        return side**2*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    a = math.sqrt(l*l)\n    return a*(0.5*l*l-a*a)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    l = float(l)\n    import numpy as np\n    l = l/2\n    import sympy\n    x = sympy.symbols('x')\n    y = sympy.symbols('y')\n    z = sympy.symbols('z')\n    x1 = x.subs({x: l, y: 0, z: 0}).evalf()\n    x2 = x.subs({x: l, y: 0, z: -l}).evalf()\n    x3 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x4 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x5 = x.subs({x: l, y: -l, z: l}).evalf()\n    x6 = x.subs({x: l, y: l, z: 0}).evalf()\n    x7 = x.subs({x: l, y: l, z: -l}).evalf()\n    x8 = x.subs({x: l, y: l, z: l}).evalf()\n    x9 = x.subs({x: l, y: l, z: -l}).evalf()\n    x10 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x11 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x12 = x.subs({x: l, y: -l, z: l}).evalf()\n    x13 = x.subs({x: l, y: l, z: 0}).evalf()\n    x14 = x.subs({x: l, y: l, z: -l}).evalf()\n    x15 = x.subs({x: l, y: l, z: l}).evalf()\n    x16 = x.subs({x: l, y: l, z: -l}).evalf()\n    x17 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x18 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x19 = x.subs({x: l, y: -l, z: l}).evalf()\n    x20 = x.subs({x: l, y: l, z: 0}).evalf()\n    x21 = x.subs({x: l, y: l, z: -l}).evalf()\n    x22 = x.subs({x: l, y: l, z: l}).evalf()\n    x23 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x24 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x25 = x.subs({x: l, y: -l, z: l}).evalf()\n    x26 = x.subs({x: l, y: l, z: 0}).evalf()\n    x27 = x.subs({x: l, y: l, z: -l}).evalf()\n    x28 = x.subs({x: l, y: l, z: l}).evalf()\n    x29 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x30 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x31 = x.subs({x: l, y: -l, z: l}).evalf()\n    x32 = x.subs({x: l, y: l, z: 0}).evalf()\n    x33 = x.subs({x: l, y: l, z: -l}).evalf()\n    x34 = x.subs({x: l, y: l, z: l}).evalf()\n    x35 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x36 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x37 = x.subs({x: l, y: -l, z: l}).evalf()\n    x38 = x.subs({x: l, y: l, z: 0}).evalf()\n    x39 = x.subs({x: l, y: l, z: -l}).evalf()\n    x40 = x.subs({x: l, y: l, z: l}).evalf()\n    x41 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x42 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x43 = x.subs({x: l, y: -l, z: l}).evalf()\n    x44 = x.subs({x: l, y: l, z: 0}).evalf()\n    x45 = x.subs({x: l, y: l, z: -l}).evalf()\n    x46 = x.subs({x: l, y: l, z: l}).evalf()\n    x47 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x48 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x49 = x.subs({x: l, y: -l, z: l}).evalf()\n    x50 = x.subs({x: l, y: l, z: 0}).evalf()\n    x51 = x.subs({x: l, y: l, z: -l}).evalf()\n    x52 = x.subs({x: l, y: l, z: l}).evalf()\n    x53 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x54 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x55 = x.subs({x: l, y: -l, z: l}).evalf()\n    x56 = x.subs({x: l, y: l, z: 0}).evalf()\n    x57 = x.subs({x: l, y: l, z: -l}).evalf()\n    x58 = x.subs({x: l, y: l, z: l}).evalf()\n    x59 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x60 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x61 = x.subs({x: l, y: -l, z: l}).evalf()\n    x62 = x.subs({x: l, y: l, z: 0}).evalf()\n    x63 = x.subs({x: l, y: l, z: -l}).evalf()\n    x64 = x.subs({x: l, y: l, z: l}).evalf()\n    x65 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x66 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x67 = x.subs({x: l, y: -l, z: l}).evalf()\n    x68 = x.subs({x: l, y: l, z: 0}).evalf()\n    x69 = x.subs({x: l, y: l, z: -l}).evalf()\n    x70 = x.subs({x: l, y: l, z: l}).evalf()\n    x71 = x.subs({x: l, y: -l, z: 0}).evalf()\n    x72 = x.subs({x: l, y: -l, z: -l}).evalf()\n    x73 = x.su"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i ** 2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n    \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**2\n    \n    return sum\n    \ndef cube_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    \n    return sum\n    \ndef number_with_power(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the numbers with the number of times it appears.\n    '''\n    \n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + pow(i,2)\n    \n    return sum\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of all the digits in the number.\n    '''\n    \n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    \n    return sum\n    \ndef palindrome(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a palindrome.\n    '''\n    \n    string = str(n)\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef string_to_int(n):\n    '''\n    Write a python function that takes in a string and returns a number.\n    '''\n    \n    sum = 0\n    for i in range(len(n)):\n        sum = sum + int(n[i])**2\n    \n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_num = 0 \n    square = 0\n    while (n > 0):\n        square = square + n * n\n        n = n - 1\n    return square \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #Hint: Create a for loop (for a value in a collection) to iterate from 1 to a value, and use the fact that:\n    #n is divisible by 3.\n    #n is not divisible by 5, but not by both.\n    #n is not divisible by 7, but also not by 3, but is divisible by both 3 and 5.\n    #n is not divisible by both 7, but also not by both 3 and 5.\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_square = 0\n    for i in range(0,n):\n        sum_square += i ** 2\n    return sum_square\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    print(sum([i ** 2 for i in range(2,n + 1,2)]) )\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n<=0:\n        return None\n    return n*n\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Your code here\n    if n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n<=1:\n        return 0\n    for i in range(2,n):\n        if n%i==0:\n            return i\n    return n-1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # your code goes here\n    i = 0\n    j = 0\n    k = 0\n    if n==1:\n        return 1\n    while j < n:\n        i = i + 1\n        j = j + 1\n        k = k + 1\n        if i == n:\n            return k\n    return 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    numbers = list(range(1, n + 1))\n    for i in range(1, len(numbers)):\n        if i % 2 == 0:\n            numbers[i] = numbers[i] * 2\n    return numbers[-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*(n+1)//2\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 2\n    while i**2 < n:\n        i = i + 1\n    return i\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # your code here\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n==4:\n        return 4\n    elif n==5:\n        return 5\n    elif n==6:\n        return 6\n    elif n==7:\n        return 7\n    elif n==8:\n        return 8\n    elif n==9:\n        return 9\n    elif n==10:\n        return 10\n    elif n==11:\n        return 11\n    elif n==12:\n        return 12\n    elif n==13:\n        return 13\n    elif n==14:\n        return 14\n    elif n==15:\n        return 15\n    elif n==16:\n        return 16\n    elif n==17:\n        return 17\n    elif n==18:\n        return 18\n    elif n==19:\n        return 19\n    elif n==20:\n        return 20\n    elif n==21:\n        return 21\n    elif n==22:\n        return 22\n    elif n==23:\n        return 23\n    elif n==24:\n        return 24\n    elif n==25:\n        return 25\n    elif n==26:\n        return 26\n    elif n==27:\n        return 27\n    elif n==28:\n        return 28\n    elif n==29:\n        return 29\n    elif n==30:\n        return 30\n    elif n==31:\n        return 31\n    elif n==32:\n        return 32\n    elif n==33:\n        return 33\n    elif n==34:\n        return 34\n    elif n==35:\n        return 35\n    elif n==36:\n        return 36\n    elif n==37:\n        return 37\n    elif n==38:\n        return 38\n    elif n==39:\n        return 39\n    elif n==40:\n        return 40\n    elif n==41:\n        return 41\n    elif n==42:\n        return 42\n    elif n==43:\n        return 43\n    elif n==44:\n        return 44\n    elif n==45:\n        return 45\n    elif n==46:\n        return 46\n    elif n==47:\n        return 47\n    elif n==48:\n        return 48\n    elif n==49:\n        return 49\n    elif n==50:\n        return 50\n    elif n==51:\n        return 51\n    elif n==52:\n        return 52\n    elif n==53:\n        return 53\n    elif n==54:\n        return 54\n    elif n==55:\n        return 55\n    elif n==56:\n        return 56\n    elif n==57:\n        return 57\n    elif n==58:\n        return 58\n    elif n==59:\n        return 59\n    elif n==60:\n        return 60\n    elif n==61:\n        return 61\n    elif n==62:\n        return 62\n    elif n==63:\n        return 63\n    elif n==64:\n        return 64\n    elif n==65:\n        return 65\n    elif n==66:\n        return 66\n    elif n==67:\n        return 67\n    elif n==68:\n        return 68\n    elif n==69:\n        return 69\n    elif n==70:\n        return 70\n    elif n==71:\n        return 71\n    elif n==72:\n        return 72\n    elif n==73:\n        return 73\n    elif n==74:\n        return 74\n    elif n==75:\n        return 75\n    elif n==76:\n        return 76\n    elif n==77:\n        return 77\n    elif n==78:\n        return 78\n    elif n==79:\n        return 79\n    elif n==80:\n        return 80\n    elif n==81:\n        return 81\n    elif n==82:\n        return 82\n    elif n==83:\n        return 83\n    elif n==84:\n        return 84\n    elif n==85:\n        return 85\n    elif n==86:\n        return 86\n    elif n==87:\n        return 87\n    elif n==88:\n        return 88\n    elif n==89:\n        return 89\n    elif n==90:\n        return 90\n    elif n==91:\n        return 91\n    elif n==92:\n        return 92\n    elif n==93:\n        return 93\n    elif n==94:\n        return 94\n    elif n==95:\n        return 95\n    elif n==96:\n        return 96\n    elif n==97:\n        return 97\n    elif n==98:\n        return 98\n    elif n==99:\n        return 99\n    elif n==100:\n        return 100\n    elif n==101:\n        return 101\n    elif n==102:\n        return 102\n    elif n==103:\n        return 103\n    elif n==104:\n        return 104\n    elif n==105:\n        return 105\n    elif n==106:\n        return 106\n    elif n==107:\n        return 107\n    elif n==108:\n        return 108\n    elif n==109:\n        return 109\n    elif n==110:\n        return 110\n    elif n==111:\n        return 111\n    elif n==112:\n        return 112\n    elif n==113:\n        return 113\n    elif n==114:\n        return 114\n    elif n==115:\n        return 115\n    elif n==116:\n        return 116\n    elif n==117:\n        return 117\n    elif n==118:\n        return 118\n    elif n==119:\n        return 119\n    elif n==120:\n        return 120\n    elif n==121:\n        return 121\n    elif n==122:\n        return 122\n    elif n==123:\n        return 123\n    elif n==124:\n        return 124\n    elif n==125:\n        return 125\n    elif n==126:\n        return 126\n    elif n==127:\n        return 127\n    elif n==128:\n        return 128\n    elif n==129:\n        return 129\n    elif n==130:\n        return 130\n    elif n==131:\n        return 131\n    elif n==132:\n        return 132\n    elif n==133:\n        return 133\n    elif n==134:\n        return 134\n    elif n==135:\n        return 135\n    elif n==136:\n        return 136\n    elif n==137:\n        return 137\n    elif n==138:\n        return 138\n    elif n==139:\n        return 139\n    elif n==140:\n        return 140\n    elif n==141:\n        return 141\n    elif n==142:\n        return 142\n    elif n==143:\n        return 143\n    elif n==144:\n        return 144\n    elif n==145:\n        return 145\n    elif n==146:\n        return 146\n    elif n==147:\n        return 147\n    elif n==148:\n        return 148\n    elif n==149:\n        return 149\n    elif n==150:\n        return 150\n    elif n==151:\n        return 151\n    elif n==152:\n        return 152\n    elif n==153:\n        return 153\n    elif n==154:\n        return 154\n    elif n==155:\n        return 155\n    elif n==156:\n        return 156\n    elif n==157:\n        return 157\n    elif n==158:\n        return 158\n    elif n==159:\n        return 159\n    elif n==160:\n        return 160\n    elif n==161:\n        return 161\n    elif n==162:\n        return 162\n    elif n==163:\n        return 163\n    elif n==164:\n        return 164\n    elif n==165:\n        return 165\n    elif n==166:\n        return 166\n    elif n==167:\n        return 167\n    elif n==16"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n    import math as m\n    import random\n    import time\n    star_num = 1\n    for i in range(2,n+1):\n        if m.sqrt(i)==m.sqrt(n):\n            star_num += 1\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 1:\n        return n \n    else:\n        return find_star_num(n-1) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 3\n    elif n == 3: return 5\n    else: return 5 + find_star_num(n-1)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == '\\n':\n        return''\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ''.join([c for c in k])\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        k = ord(k)\n    if k < 0 or k >= 256:\n        raise ValueError('Invalid index')\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    # get the ascii value\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is int:\n        assert k > 0, \"The character to be searched is not a positive integer.\"\n        return chr(k)\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is str:\n        return ord(k)\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # TODO: Write your code here\n    \n    return ord(k)\n    \n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 65:\n        return ord(chr(k))\n    else:\n        return k\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum = even_sum + arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for num in arr:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum\n    \narr = [1,2,3,4,5,6]\nprint(sum_even_and_even_index(arr))\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_pos = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_pos.append(i)\n    even_sum = 0\n    for i in even_pos:\n        even_sum += arr[i]\n    print(even_sum)\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    for i in range(0, n):\n        if arr[i] % 2 == 0:\n            continue\n        else:\n            arr[i] = arr[i] + arr[i + 1]\n    return arr[0] + arr[n - 1]\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    evens = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            evens.append(arr[i])\n    sum_evens = 0\n    for i in range(len(evens)):\n        sum_evens += evens[i]\n    return sum_evens\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # create an empty list and populate with all numbers from 0 to len(arr)\n    # initialize the sum to zero\n    sum = 0\n    # iterate through the array\n    for i in range(0, len(arr)):\n        # if the current number is even, add it to the sum\n        # increment the sum\n        if (arr[i] % 2 == 0):\n            sum += arr[i]\n    # return the sum\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            sum+=arr[i]\n    print(sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(even_index for even_index, even_number in enumerate(arr) if even_number % 2 == 0)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    for i in range(1,n+1):\n        even_power_sum = even_power_sum + i**5\n    return(even_power_sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0: \n        return 0\n    else: \n        return (n*(n+1))//2\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code here\n    if n==0:\n        return 0\n    if n<0:\n        return 0\n    else:\n        return n*(even_Power_Sum(n-1))\n    \ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    # your code here\n    if n==0:\n        return 0\n    if n<0:\n        return 0\n    else:\n        return n*(odd_Power_Sum(n-1))\n    \ndef Even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code here\n    if n==0:\n        return 0\n    if n<0:\n        return 0\n    else:\n        return n*(Even_Power_Sum(n-1))\n    \ndef Odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    # your code here\n    if n==0:\n        return 0\n    if n<0:\n        return 0\n    else:\n        return n*(Odd_Power_Sum(n-1))\n    \nprint(even_Power_Sum(5)) # should return 32\nprint(odd_Power_Sum(5)) # should return 11\nprint(Even_Power_Sum(5)) # should return "
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize variables\n    evens = 0\n    squares = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            squares = squares + i**2\n        if squares % 5 == 0:\n            evens = evens + i\n    return evens + squares\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        raise ValueError(\"Input cannot be a negative number\")\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n * (n + 1) / 2\n    else:\n        return n * (n + 1) / 2 * even_Power_Sum(n - 1)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    lst = []\n    num = n\n    while num >= 0:\n        temp = num\n        while temp > 0:\n            res = (temp ** 5)\n            lst.append(res)\n            temp = temp // 10\n        num -= 1\n    return sum(lst)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Your code here\n    # Declare a variable\n    # Set the length of the array to be 5\n    # Set the initial value to 0\n    # For each element in the array\n    #     If the element is even add the element to the variable\n    #     Else, subtract the element from the variable\n    # Return the value of the variable\n    \n    if n < 0: \n        print(\"Error: Numbers must be positive\")\n        return -1\n    if n == 0:\n        return 0\n    for i in range(n):\n        if i % 2 == 0:\n            newArray.append(i*i)\n        else:\n            newArray.append(i*i)\n    evenSum = 0\n    for i in range(0, len(newArray)):\n        if i % 2 == 0:\n            evenSum = newArray[i] + evenSum\n        else:\n            evenSum = newArray[i] - evenSum\n    return evenSum\n        \n        \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Declare a result variable\n    result = 0\n    # Check if n is less than 0\n    if n <= 0:\n        return None\n    # Calculate n's first power\n    for i in range(1, n + 1):\n        # Check if it is a multiple of 5\n        if i % 5 == 0:\n            result += i\n    # Return result\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    import math\n    l = []\n    l = list(range(1, n + 1))\n    sum = 0\n    for i in range(1, len(l)):\n        if l[i] % 2!= 0:\n            l[i] = l[i] ** 3\n            sum += l[i]\n            \n    print(\"The sum of the first {} even numbers that are raised to the fifth power is {}.\".format(n, sum))\n    \n    \neven_Power_Sum(21)"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n==0: \n        return 0\n    else: \n        i = 1\n        sum = 0\n        while n!=1: \n            if n % i == 0: \n                sum += i\n                n = n / i\n                i += 1\n            else: \n                i += 1\n        return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for element in test_list:\n        return_list.append(element[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    front_extract = []\n    rear_extract = []\n    for index in range(len(test_list)):\n        if index % 2 == 0:\n            front_extract.append(test_list[index])\n        else:\n            rear_extract.append(test_list[index])\n    return rear_extract\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    front = []\n    rear = []\n    for tup in test_list:\n        front.append(tup[0])\n        rear.append(tup[1])\n    return front, rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    r_list = []\n    for element in test_list:\n        r_list.append(element[1])\n    return r_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    rear_tuple = list(test_list)\n    for i in rear_tuple:\n        rear.append(i[0])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[2])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for elem in test_list:\n        new_list.append(elem[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[-1])\n    return rear\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(0, len(test_tup2)):\n        new_tup += (test_tup1[i] - test_tup2[i])\n    return(new_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # You can pass the function to the list\n    # you will need to pass it an index for the second tuple.\n    # You will need to pass it as an argument as well.\n    # The return value should be a new tuple with the elements of the first tuple subtracted.\n    new_tup = ()\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    result = (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[1:] - test_tup2[1:]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # define the new tuple by adding the values of the 2 tuples and adding a zeros for the first tuple to the index\n    # use a new tuple to represent the subtraction\n    subtraction_tuple = ()\n    for i in range(len(test_tup1)):\n        subtraction_tuple += (test_tup2[i] - test_tup1[i])\n    return subtraction_tuple\n    \n    "
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1[0] = test_tup1[0]-test_tup2[0]\n    test_tup1[1] = test_tup1[1]-test_tup2[1]\n    test_tup1[2] = test_tup1[2]-test_tup2[2]\n    test_tup1[3] = test_tup1[3]-test_tup2[3]\n    test_tup1[4] = test_tup1[4]-test_tup2[4]\n    test_tup1[5] = test_tup1[5]-test_tup2[5]\n    test_tup1[6] = test_tup1[6]-test_tup2[6]\n    test_tup1[7] = test_tup1[7]-test_tup2[7]\n    test_tup1[8] = test_tup1[8]-test_tup2[8]\n    test_tup1[9] = test_tup1[9]-test_tup2[9]\n    test_tup1[10] = test_tup1[10]-test_tup2[10]\n    return test_tup1\n    \ndef insert_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and inserts the first tuple in the second tuple with the index from the last item of the first tuple.\n    '''\n    test_tup2[0] = test_tup2[0]+test_tup1[0]\n    test_tup2[1] = test_tup2[1]+test_tup1[1]\n    test_tup2[2] = test_tup2[2]+test_tup1[2]\n    test_tup2[3] = test_tup2[3]+test_tup1[3]\n    test_tup2[4] = test_tup2[4]+test_tup1[4]\n    test_tup2[5] = test_tup2[5]+test_tup1[5]\n    test_tup2[6] = test_tup2[6]+test_tup1[6]\n    test_tup2[7] = test_tup2[7]+test_tup1[7]\n    test_tup2[8] = test_tup2[8]+test_tup1[8]\n    test_tup2[9] = test_tup2[9]+test_tup1[9]\n    test_tup2[10] = test_tup2[10]+test_tup1[10]\n    return test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    temp = tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n    return temp\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = test_tup1[:]\n    for i in range(len(test_tup1)):\n        new_tup[i] = test_tup2[i] - test_tup1[i]\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        sub_tuple = []\n        for i in range(len(test_tup1)):\n            sub_tuple.append(test_tup1[i] - test_tup2[i])\n        return tuple(sub_tuple)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    \n    \n    return\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n+1): \n        coeff_sum += 2*i*(2*i-1)\n    return coeff_sum\n    #if n % 2 == 0:\n        #return even_binomial_Coeff_Sum(n)\n    #else:\n        #return 0\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # YOUR CODE HERE\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return even_binomial_Coeff_Sum( n - 1) + even_binomial_Coeff_Sum(n - 2) \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #answer = 0\n    #for i in range(2, n):\n        #if n % i == 0:\n            #answer = answer + int(i/2)\n    #return answer \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(math.factorial(n)/(math.factorial(n-1)*math.factorial(n-2)))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    res = 0\n    # loop for even index binomial coefficient\n    for i in range(n+1): \n        # print(i)\n        res += math.factorial(n-i) * i**2 * math.factorial(n-2*i) // (math.factorial(2*i) * math.factorial(2*i-2) * math.factorial(2*i-3))\n    return res\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert n > 0, \"n must be positive.\"\n    assert n % 2 == 0, \"n must be an even positive integer.\"\n    assert n < 30, \"n must be less than 30.\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    # Base case\n    if n == 0:\n        return 1\n    # Exponential law coefficients\n    if n == 1:\n        return 1\n    # Base case\n    if n == 2:\n        return 1\n    # Check if n is a power of two\n    if n % 2 == 0:\n        sum += even_binomial_Coeff_Sum(n // 2)\n        return sum\n    else:\n        return 0\ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = 0\n    # Base case\n    if n == 0:\n        return 1\n    # Exponential law coefficients\n    if n == 1:\n        return 1\n    # Base case\n    if n == 2:\n        return 1\n    # Check if n is a power of two\n    if n % 2 == 0:\n        sum += odd_binomial_Coeff_Sum(n // 2)\n        return sum\n    else:\n        return 0\ndef binomial(n, k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the sum of n!\n    '''\n    return n * binomial(n-k, k)"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c=0\n    if n==0:\n        c=1\n    elif n==1:\n        c=1\n    else:\n        c=0\n        for i in range(1,n+1):\n            c=c+math.factorial(i)\n    return c\n    \ndef even_binomial_Coeff_Sum_V1(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c=0\n    for i in range(1,n+1):\n        c=c+math.factorial(i)\n    return c\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n <= 1): \n        return 0\n    return n * even_binomial_Coeff_Sum(n - 1)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        print(\"ERROR: Negative number given\")\n        return\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*np.pi\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 4*pi*r*r*h*h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3)*(r**3)*(h**3)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    print(\"volume of cylinder is: \", volume_cylinder(r,h))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=4/3*3.14*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (4*pi*r*h)/3\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #Your code goes here\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=4/3*pi*(r*h)\n    print(volume)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.filter(lambda x: x[n] >= n)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.values()[dict.values() >= n]\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = dict.copy()\n    s = [k for k in d if d[k] >= n]\n    return s\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filtered = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            dict_filtered[key] = dict[key]\n    return dict_filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list = []\n    for key,value in dict.items():\n        if value >= n:\n            list.append(key)\n    return dict.fromkeys(list)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.items()[:n]\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict=dict()\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key]=value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for item in dict:\n        if dict[item]>n:\n            dict[item]=dict[item]+1\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dictionary = dict.copy()\n    for key, value in filtered_dictionary.items():\n        if value >= n:\n            filtered_dictionary[key] = 1\n    return filtered_dictionary\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output=dict.copy()\n    for key in dict:\n        if dict[key]>=n:\n            output[key]=dict[key]\n    return output\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if type(test_tup) is tuple:\n        print(len(test_tup))\n        print(test_tup)\n    else:\n        print('The input is not a tuple')\n        return None\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[counter]:\n            counter = i\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    #\n    # Add your code here\n    #\n    first_element = test_tup[0]\n    count = 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    res=0\n    for i in range(len(test_tup)):\n        if test_tup[i]<=test_tup[i+1]:\n            res+=1\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first = -1\n    count = 0\n    for i in range(0,len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            first = i\n            count += 1\n    return count, first\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    if len(test_tup) == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] >= test_tup[i+1]:\n            count += 1\n    \n    return count\n    "
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if test_tup.index(i)!= 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1 + 1 + 1\n    if n == 3: return 2 + 2\n    if n == 4: return 2 + 2 + 2\n    if n == 5: return 2 + 2 + 2 + 2\n    if n == 6: return 2 + 2 + 2 + 2 + 2\n    if n == 7: return 2 + 2 + 2 + 2 + 2 + 2\n    if n == 8: return 2 + 2 + 2 + 2 + 2 + 2 + 2\n    if n == 9: return 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\n    if n == 10: return 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\n    if n == 11: return 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if(n == 1):\n        return 1\n    if(n == 2):\n        return 2\n    if(n == 3):\n        return 4\n    if(n == 4):\n        return 8\n    if(n == 5):\n        return 16\n    if(n == 6):\n        return 32\n    if(n == 7):\n        return 64\n    if(n == 8):\n        return 128\n    if(n == 9):\n        return 256\n    if(n == 10):\n        return 512\n    if(n == 11):\n        return 1024\n    if(n == 12):\n        return 2048\n    if(n == 13):\n        return 4096\n    if(n == 14):\n        return 8192\n    if(n == 15):\n        return 16384\n    if(n == 16):\n        return 32768\n    if(n == 17):\n        return 65536\n    if(n == 18):\n        return 131072\n    if(n == 19):\n        return 262144\n    if(n == 20):\n        return 524288\n    if(n == 21):\n        return 1048576\n    if(n == 22):\n        return 2097152\n    if(n == 23):\n        return 4194304\n    if(n == 24):\n        return 8388608\n    if(n == 25):\n        return 16777216\n    if(n == 26):\n        return 33554432\n    if(n == 27):\n        return 67108864\n    if(n == 28):\n        return 134217728\n    if(n == 29):\n        return 268435456\n    if(n == 30):\n        return 536870912\n    if(n == 31):\n        return 1073741824\n    if(n == 32):\n        return -2147483648\n    if(n == 33):\n        return -9223372036854775808\n    if(n == 34):\n        return -335567890625\n    if(n == 35):\n        return -1073741824\n    if(n == 36):\n        return -268435456\n    if(n == 37):\n        return -268435456\n    if(n == 38):\n        return -1073741824\n    if(n == 39):\n        return -268435456\n    if(n == 40):\n        return -1073741824\n    if(n == 41):\n        return -268435456\n    if(n == 42):\n        return -1073741824\n    if(n == 43):\n        return -268435456\n    if(n == 44):\n        return -1073741824\n    if(n == 45):\n        return -268435456\n    if(n == 46):\n        return -1073741824\n    if(n == 47):\n        return -268435456\n    if(n == 48):\n        return -1073741824\n    if(n == 49):\n        return -268435456\n    if(n == 50):\n        return -1073741824\n    if(n == 51):\n        return -268435456\n    if(n == 52):\n        return -1073741824\n    if(n == 53):\n        return -268435456\n    if(n == 54):\n        return -1073741824\n    if(n == 55):\n        return -268435456\n    if(n == 56):\n        return -1073741824\n    if(n == 57):\n        return -268435456\n    if(n == 58):\n        return -1073741824\n    if(n == 59):\n        return -268435456\n    if(n == 60):\n        return -1073741824\n    if(n == 61):\n        return -268435456\n    if(n == 62):\n        return -1073741824\n    if(n == 63):\n        return -268435456\n    if(n == 64):\n        return -1073741824\n    if(n == 65):\n        return -268435456\n    if(n == 66):\n        return -1073741824\n    if(n == 67):\n        return -268435456\n    if(n == 68):\n        return -1073741824\n    if(n == 69):\n        return -268435456\n    if(n == 70):\n        return -1073741824\n    if(n == 71):\n        return -268435456\n    if(n == 72):\n        return -1073741824\n    if(n == 73):\n        return -268435456\n    if(n == 74):\n        return -1073741824\n    if(n == 75):\n        return -268435456\n    if(n == 76):\n        return -1073741824\n    if(n == 77):\n        return -268435456\n    if(n == 78):\n        return -1073741824\n    if(n == 79):\n        return -268435456\n    if(n == 80):\n        return -1073741824\n    if(n == 81):\n        return -268435456\n    if(n == 82):\n        return -1073741824\n    if(n == 83):\n        return -268435456\n    if(n == 84):\n        return -1073741824\n    if(n == 85):\n        return -268435456\n    if(n == 86):\n        return -1073741824\n    if(n == 87):\n        return -268435456\n    if(n == 88):\n        return -1073741824\n    if(n == 89):\n        return -268435456\n    if(n == 90):\n        return -1073741824\n    if(n == 91):\n        return -268435456\n    if(n == 92):\n        return -1073741824\n    if(n == 93):\n        return -268435456\n    if(n == 94):\n        return -1073741824\n    if(n == 95):\n        return -268435456\n    if(n == 96):\n        return -1073741824\n    if(n == 97):\n        return -268435456\n    if(n == 98):\n        return -1073741824\n    if(n == 99):\n        return -268435456\n    if(n == 100):\n        return -1073741824\n    if(n == 101):\n        return -268435456\n    if(n == 102):\n        return -1073741824\n    if(n == 103):\n        return -268435456\n    if(n == 104):\n        return -1073741824\n    if(n == 105):\n        return -268435456\n    if(n == 106):\n        return -1073741824\n    if(n == 107):\n        return -268435456\n    if(n == 108):\n        return -1073741824\n    if(n == 109):\n        return -268435456\n    if(n == 110):\n        return -1073741824\n    if(n == 111):\n        return -268435456\n    if(n == 112):\n        return -1073741824\n    if(n == 113):\n        return -268435456\n    if(n == 114):\n        return -1073741824\n    if(n == 115):\n        return -268435456\n    if(n == 116):\n        return -1073741824\n    if(n == 117):\n        return -268435456\n    if(n == 118):\n        return -1073741824\n    if(n == 119):\n        return -268435456\n    if(n == 120):\n        return -1073741824\n    if(n == 121):\n        return -268435456\n    if(n == 122):\n        return -1073741824\n    if(n == 123):\n        return -268435456\n    if(n == 124):\n        return -1073741824\n    if(n == 125):\n        return -268435456\n    if(n == 126):\n        return -1073741824\n    if(n == 127):\n        return -268435456\n    if(n == 128):\n        return -1073741824\n    if(n == 129):\n        return -268435456\n    if(n == 130):\n        return -1073741824\n    if(n == 131):\n        return -2"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # if the number is odd\n    if n % 2 == 1: \n        return n\n    else:\n        # number is even\n        return (n - 1) + (n + 1) \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    while n>0:\n        if n%2==0:\n            n = (n//2)-1\n        else:\n            n = (n//2)+1\n        i = i+1\n    return i\n    #time complexity: O(1)\n    #space complexity: O(1"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base case\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    \n    # recursive case\n    return (is_num_decagonal(n-1) + 2*is_num_decagonal(n-2)) % 10\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return (n - 1) * is_num_decagonal(n-1) + is_num_decagonal(n-2) \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==1:\n        return True\n    elif n==2:\n        return False\n    elif n==3:\n        return True\n    else:\n        for i in range(4,n+1):\n            if n%i==0:\n                return False\n    return True\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n > 2:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    elif n==4:\n        return 3\n    else:\n        return 4\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = True\n    i = 0\n    while a: \n        if n == 2*i + 1: \n            return i \n        elif n < 2*i + 1: \n            return -1 \n        i += 1\n        n -= 2*i \n    return -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if val == item:\n            return (True, i)\n        elif val > item:\n            return (False, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = None\n    for i,elem in enumerate(dlist):\n        if elem == item:\n            pos = i\n            break\n    return (pos!= -1, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n        if dlist[i] > item:\n            return (False, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # 1. Create the index position.\n    index = -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i,e in enumerate(dlist):\n        if e == item:\n            pos = i\n            break\n    return pos, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for index, element in enumerate(dlist):\n        if element == item:\n            position = index\n            break\n    return (position, dlist[position])\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in test_list:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # iterate over the given list\n    for idx in range(0,len(test_list)):\n        # iterate over the list\n        for idy in range(idx+1,len(test_list)):\n            if test_list[idx] == test_list[idy]:\n                # return true\n                return False\n    # return false\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = set(test_list)\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    my_dict = {}\n    for e in test_list:\n        if e in my_dict:\n            return False\n        else:\n            my_dict[e] = 1\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    test_set = set(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for x in test_list:\n        if x in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set = set(test_list)\n    if len(set) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        return True\n    for item in test_list:\n        if item in test_list:\n            pass\n        else:\n            return False\n    return True\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    new_list = []\n    for value in test_list:\n        if value not in new_list:\n            new_list.append(value)\n    return len(new_list) == len(set(new_list))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n=len(nums1)\n    i=0\n    j=0\n    s=[]\n    for a,b in zip(nums1,nums2):\n        if i==0:\n            s.append(a-b)\n            i+=1\n        elif j==0:\n            s.append(b-a)\n            j+=1\n        else:\n            s.append(a-b)\n            i+=1\n            j+=1\n    return s\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    # Steps:\n    # 1. Sort the two lists by the elements in ascending order.\n    # 2. Iterate over the list, if the element is less than the other, remove the element.\n    # 3. If the element is less than the other, keep the element.\n    # 4. The end of the iteration.\n    \n    # return the sorted list (the first element is the smallest, and the last is the largest)\n    \n    def sort_list(nums):\n        nums.sort()\n        return nums\n    \n    nums1.sort()\n    nums2.sort()\n    \n    nums1_sorted = sort_list(nums1)\n    nums2_sorted = sort_list(nums2)\n    \n    # Step 2\n    for i in range(len(nums1)):\n        if nums1[i] < nums2[i]:\n            return nums1[:i] + nums2[i:]\n    \n    # Step 3\n    return nums1[:len(nums1)] + nums2[len(nums1):]\n    \n    \n    # Helper Functions\n    \n    def sum_all(nums):\n        \"\"\"\n        Sum all elements of a list\n        \"\"\"\n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i]\n        return sum\n    \n    def merge_sort(nums):\n        \"\"\"\n        Recursive merge sort, used for sorting a list of integers.\n        \"\"\"\n        def merge_sort_recursive(nums, start, end):\n            if start < end:\n                middle = start + (end - start) // 2\n                merge_sort_recursive(nums, start, middle)\n                merge_sort_recursive(nums, middle + 1, end)\n                merge(nums, start, middle, end)\n        \n        def merge(nums, start, middle, end):\n            left = nums[start:middle + 1]\n            right = nums[middle + 1:end]\n            i = start\n            j = middle\n            count = 0\n            while i < len(left) and j < len(right):\n                if left[i] <= right[j]:\n                    nums[i + j + 1] = left[i]\n                    i += 1\n                else:\n                    nums[i + j + 1] = right[j]\n                    j += 1\n                    count += (len(left) - i)\n            while i < len(left):\n                nums[i + j + 1] = left[i]\n                i += 1\n            while j < len(right):\n                nums[i + j + 1] = right[j]\n                j += 1\n            for i in range(start, end):\n                nums[i] = 0\n                \n        merge_sort_recursive(nums, 0, len(nums) - 1)\n        return nums\n    \n    def print_list(nums):\n        for i in range(len(nums)):\n            print(nums[i], end=' ')\n        print()\n        \n    # Write your code here\n    \n    return merge_sort(nums1) + merge_sort(nums2)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    # your code here\n    #to apply the function\n    #call the function\n    for x in range(len(nums1)):\n        result.append(nums1[x]-nums2[x])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    length=len(nums1)\n    output=[]\n    for i in range(length):\n        output.append(nums1[i]-nums2[i])\n    return output\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Wrong List Size\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return nums1-nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        for i in range(len(nums2)):\n            nums2.remove(nums2[i])\n    elif len(nums1) < len(nums2):\n        for i in range(len(nums1)):\n            nums1.remove(nums1[i])\n    return nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            sub.append(nums1[i]-nums2[j])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l = len(nums1)\n    i,j = 0,0\n    while i<l:\n        l-=1\n        j+=1\n        if i==j:\n            return nums1[i]\n        else:\n            nums1[i],nums1[j] = nums1[j],nums1[i]\n    return 0\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<0:\n        return \"Please enter an integer.\"\n    if type(n)!= int:\n        return \"Please enter an integer.\"\n    if n in digits:\n        return \"Please enter an integer.\"\n    else:\n        return n\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return n<=0\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    number = int(n) \n    sum = 0\n    for i in range(0,number): \n        sum = sum + i\n    if sum >= (number - 1): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def valid_number(n):\n        digit_dict = {1:1,2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,0:1}\n        if n == 0:\n            return False\n        for i in str(n):\n            n = int(i)\n            digit = n % 10\n            if digit not in digit_dict:\n                return False\n            else:\n                digit_dict[digit] = digit_dict[digit] + 1\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def compare(n, digit):\n        \"\"\"\n        Checks whether the frequency of the digit is less than or equal to the digit.\n        \"\"\"\n        if n < 10:\n            return \"Not in range\"\n        else:\n            for i in range(len(digit)):\n                if digit[i]!= n[i]:\n                    return \"Not in range\"\n            return \"in range\"\n    \n    if (n >= 10):\n        print(\"Yes\")\n        return \n    elif (len(n) == 1):\n        print(\"Yes\")\n        return \n    else:\n        print(\"No\")\n        return\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) is not int: \n        raise TypeError(\"The function should take in an integer and return a boolean.\")\n    \n    if n < 0: \n        raise ValueError(\"The function should take in an integer and return a boolean.\")\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [] \n    for char in str(n): \n        digits.append(int(char)) \n    return digits == list(map(int, digits))\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # write your code here\n    num = list(str(n))\n    if len(num)!= len(set(num)):\n        return False\n    else:\n        for i in range(len(num)):\n            if num[i]!= num[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # all_digits = int(n)\n    # return all_digits % 10 == 0\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for el in list:\n        if el!= element:\n            print(\"We have a problem with your code!\")\n            return False\n        else:\n            return True\n    \ndef return_list(list):\n    '''\n    Write a function that returns a list, which consists of the even numbers and their multiples in a user's list.\n    '''\n    return list\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if len(list) == 1:\n        if list[0]!= element:\n            return False\n    else:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n    \ndef is_triangle(list,a,b,c):\n    '''\n    Write a function that checks if a triangle has the sides of the three given sides\n    '''\n    if (check_element(list,a) and check_element(list,b) and check_element(list,c)) :\n        return True\n    return False\n    \ndef triangle_check(list):\n    '''\n    Write a function that takes in a list and checks whether all elements of the list are equal to the given element\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n    \ndef test_triangle(list):\n    '''\n    Write a function that takes in a list and tests for the condition where the list contains all three sides of the triangle\n    '''\n    if is_triangle(list,0,1,2):\n        print(\"triangle\")\n    elif is_triangle(list,1,2,3):\n        print(\"triangle\")\n    elif is_triangle(list,2,3,4):\n        print(\"triangle\")\n    elif is_triangle(list,3,4,5):\n        print(\"triangle\")\n    elif is_triangle(list,0,5,6):\n        print(\"triangle\")\n    else:\n        print(\"not a triangle\")\n    \ntest_triangle(triangle_list)\n    \ndef test_triangle(list):\n    '''\n    Write a function that takes in a list and tests for the condition where the list contains all three sides of the triangle\n    '''\n    if is_triangle(list,0,1,2):\n        print(\"triangle\")\n    elif is_triangle(list,1,2,3):\n        print(\"triangle\")\n    elif is_triangle(list,2,3,4):\n        print(\"triangle\")\n    elif is_triangle(list,3,4,5):\n        print(\"triangle\")\n    elif is_triangle(list,0,5,6):\n        print(\"triangle\")\n    else:\n        print(\"not a triangle\")\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    for i in range(0, len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    is_equal = True\n    for el in list:\n        if el!= element:\n            is_equal = False\n    return is_equal\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = r'(?P<a>A)(?P<b>B)'\n    p = re.compile(regex)\n    return p.search(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search('^[a-b]{2,3}', text) is not None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{2,3}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or five 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{4,5}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{6,7}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by ten 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{10}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_eleven_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{11}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twelve_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{12}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_fifteen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fifteen 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{15}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_sixteen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by sixteen 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{16}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_seventeen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seventeen 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{17}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_eighteen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eighteen 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{18}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_nine_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nineteen 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{19}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twenty_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{20}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twenty_twelve_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{21}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twenty_eleven_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{22}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twenty_eleven_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{23}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twenty_eleven_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{24}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twenty_eleven_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{25}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twenty_eleven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{26}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twenty_eleven_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{27}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{28}\"\n    res = re.search(m, text)\n    if res:\n        return True\n    else:\n        return False\ndef text_match_twelve_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve 'b' characters.\n    '''\n    m = r\"[a-zA-Z0-9A-Z]{29}\"\n    res = re.search(m, text)\n    if res:\n        return Tru"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'^\\s*(\\S*)\\s*\\w*\\s*(\\S*)\\s*\\w*\\s*\\w*\\s*\\w*\\s*$'\n    matched = re.findall(pattern, text)\n    if(matched):\n        return matched[0]\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return text.count(\"a\") >= 2 and text.count(\"b\") >= 3\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 2 or len(text) > 3:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\":\n            return True\n    return False\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or four 'b' characters.\n    '''\n    if len(text) < 2 or len(text) > 4:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\":\n            return True\n    return False\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or five 'b' characters.\n    '''\n    if len(text) < 2 or len(text) > 5:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\":\n            return True\n    return False\ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or six 'b' characters.\n    '''\n    if len(text) < 2 or len(text) > 6:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\" and text[i + 4] == \"b\":\n            return True\n    return False\ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or seven 'b' characters.\n    '''\n    if len(text) < 2 or len(text) > 7:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\" and text[i + 4] == \"b\" and text[i + 5] == \"b\":\n            return True\n    return False\ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or eight 'b' characters.\n    '''\n    if len(text) < 2 or len(text) > 8:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\" and text[i + 4] == \"b\" and text[i + 5] == \"b\" and text[i + 6] == \"b\":\n            return True\n    return False\ndef text_match_three_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    if len(text) < 3 or len(text) > 9:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\":\n            return True\n    return False\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    if len(text) < 3 or len(text) > 9:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\":\n            return True\n    return False\ndef text_match_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    if len(text) < 3 or len(text) > 9:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\":\n            return True\n    return False\ndef text_match_three_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    if len(text) < 3 or len(text) > 9:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\":\n            return True\n    return False\ndef text_match_three_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    if len(text) < 3 or len(text) > 9:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\":\n            return True\n    return False\ndef text_match_three_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    if len(text) < 3 or len(text) > 9:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\":\n            return True\n    return False\ndef text_match_four_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    if len(text) < 4 or len(text) > 9:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\" and text[i + 4] == \"b\":\n            return True\n    return False\ndef text_match_four_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    if len(text) < 4 or len(text) > 9:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\" and text[i + 4] == \"b\":\n            return True\n    return False\ndef text_match_four_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    if len(text) < 4 or len(text) > 9:\n        return False\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i + 1] == \"b\" and text[i + 2] == \"b\" and text[i + 3] == \"b\" and text[i + 4] == \"b\":\n            return True\n    return False\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followe"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(a){2}b')\n    match = pattern.search(text)\n    return match!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # get the original text\n    original_text = re.findall('[a-zA-Z]', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_list= text.split(' ')\n    if len(text_list)<3:\n        return 'not match'\n    for x in range(3):\n        if x!=0 and x!=1:\n            if text_list[x]==text_list[x-1]==text_list[x-2]:\n                return 'not match'\n    return'match'\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    #Initialize the last element\n    sum_of_the_arrays = 0\n    \n    #Repeat the array k times\n    for i in range(0,k):\n        sum_of_the_arrays += a[i]\n        \n    \n    #Store the sum of the repeated elements\n    sum_of_the_arrays = sum_of_the_arrays + a[k-1]\n    \n    #Store the maximum sum of the repeated elements\n    maximum_sum_of_the_arrays = max_sub_array_sum_repeated(a, n, k - 1)\n    \n    return sum_of_the_arrays + maximum_sum_of_the_arrays\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k > n: return 0\n    if k == 0: return 0\n    if a == 0: return 0\n    else:\n        a = max(a, (sum(a)))\n        \n        for i in range(k):\n            # print(f'i: {i}')\n            # print(f'a: {a}')\n            # print(f'a[i]: {a[i]}')\n            a[i] += a[i+1]\n        # print(f'a: {a}')\n        return sum(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Edge cases\n    if k == 0 or n <= 0:\n        return 0\n    if k == 1:\n        return a[n-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # variables\n    max_sum = 0\n    max_k = 0\n    sum = 0\n    # iterate for k times\n    for i in range(k):\n        # add a value to the sum\n        sum = sum + a[i]\n        # add to the maximum sum if sum is larger\n        if sum > max_sum:\n            max_sum = sum\n            max_k = i + 1\n    return max_sum, max_k\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = 0\n    for i in range(n): \n        # get the right subarray sum of this index.\n        j = i + k - 1\n        curr_sum = a[i] + a[i + k] \n        res = max(res, curr_sum)\n        # print(a[i], a[i + k], curr_sum)\n        # if i < j - 1:\n        #     j -= 1\n        # else:\n        #     i += 1\n    return res\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = sum(a)\n    if n == 1:\n        if k == 1:\n            return a[0]\n        return a[0] + max_sub_array_sum_repeated(a[1:], n - 1, k - 1)\n    elif s % k == 0:\n        return a[0] + max_sub_array_sum_repeated(a[1:], n - 1, k)\n    else:\n        return a[0] + max_sub_array_sum_repeated(a[1:], n - 1, k)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a)\n    i = 0\n    sum = 0\n    curr_sum = 0\n    while(i<n):\n        curr_sum += a[i]\n        if curr_sum > 0:\n            sum = max(sum, curr_sum)\n        if k==1:\n            break\n        elif curr_sum >= 0:\n            k -= 1\n            curr_sum = 0\n        i += 1\n    return sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a_sorted = sorted(a)\n    cur_sum = 0\n    max_sub_array_sum_repeated = 0\n    for i in range(len(a)):\n        if cur_sum < 0:\n            cur_sum += a_sorted[i]\n        else:\n            cur_sum += a_sorted[i] * k\n        if cur_sum > max_sub_array_sum_repeated:\n            max_sub_array_sum_repeated = cur_sum\n    return max_sub_array_sum_repeated\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_repeated = 0\n    sum_repeated = 0\n    i = 0\n    while (i < n):\n        sum_repeated = sum_repeated + a[i]\n        if (sum_repeated == k):\n            max_sum_repeated = max(max_sum_repeated,sum_repeated)\n            sum_repeated = 0\n            i += 1\n        else:\n            sum_repeated = sum_repeated - a[i]\n            i += 1\n    return max_sum_repeated\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # a[0] = a[n - 1] = 0\n    # for i in range(n - 1, 0, -1):\n    #     a[i] = max(a[i], a[i - k])\n    #     a[i - 1] += a[i]\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(0,n):\n        sum_of_squares = sum_of_squares + i * i\n    return sum_of_squares\ndef even_sum(n):\n    '''\n    Write a python function returns the sum of even natural numbers from 0 to n (both included).\n    '''\n    sum_of_even = 0\n    for i in range(0,n):\n        sum_of_even = sum_of_even + i\n    return sum_of_even\ndef find_factors(n):\n    '''\n    Write a python function returns the factors of n.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef sum_of_squares(n):\n    '''\n    Write a python function returns the sum of squares of the first n natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1,n+1):\n        sum_of_squares = sum_of_squares + i * i\n    return sum_of_squares\ndef even_sum(n):\n    '''\n    Write a python function returns the sum of even natural numbers from 0 to n (both included).\n    '''\n    sum_of_even = 0\n    for i in range(0,n):\n        sum_of_even = sum_of_even + i\n    return sum_of_even\ndef check_divisibility(n):\n    '''\n    Write a python function returns True if a number n is divisible by both 2 and 3 and False otherwise.\n    '''\n    divisible_by_2 = 0\n    divisible_by_3 = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisible_by_2 = divisible_by_2 + i\n        if n%i == 0 and i%2==0:\n            divisible_by_3 = divisible_by_3 + i\n    if divisible_by_2 == divisible_by_3:\n        return True\n    else:\n        return False\ndef cube_root(n):\n    '''\n    Write a python function returns the cube root of n.\n    '''\n    cub_root = 0\n    i = 1\n    while i**2 <= n:\n        cub_root = cub_root + i\n        i = i + 1\n    return cub_root\ndef cube_root(n):\n    '''\n    Write a python function returns the cube root of n.\n    '''\n    cub_root = 0\n    for i in range(1, n+1):\n        cub_root = cub_root + i**3\n    return cub_root\ndef square_root(n):\n    '''\n    Write a python function returns the square root of n.\n    '''\n    square_root = 0\n    for i in range(1, n+1):\n        square_root = square_root + i**2\n    return square_root\ndef prime_number(n):\n    '''\n    Write a python function returns True if a number is a prime number and False otherwise.\n    '''\n    if n>1:\n        for i in range(2, n):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function returns True if a number is prime and False otherwise.\n    '''\n    if n>1:\n        for i in range(2, n):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\ndef main():\n    print('1.square_Sum of Squares')\n    print('2.even_sum')\n    print('3.check_divisibility')\n    print('4.cube_root')\n    print('5.prime_number')\n    print('6.is_prime')\n    print('7.exit')\n    choice = int(input())\n    while choice!= 7:\n        if choice == 1:\n            n = int(input('Enter a number to find the square of: '))\n            print(square_Sum(n))\n        elif choice == 2:\n            n = int(input('Enter a number to find the even number: '))\n            print(even_sum(n))\n        elif choice == 3:\n            n = int(input('Enter a number to check if a number is divisible by both 2 and 3: '))\n            print(check_divisibility(n))\n        elif choice == 4:\n            n = int(input('Enter a number to find the cube root of: '))\n            print(cube_root(n))\n        elif choice == 5:\n            n = int(input('Enter a number to find the prime number: '))\n            print(prime_number(n))\n        else:\n            print('Invalid choice')\n        choice = int(input('Press 1 to continue to the main menu and 0 to exit: '))\n    print('Thank you for using this program.')\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**2\n        else:\n            pass\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n = n\n    sum = 0\n    # Add all even numbers\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 2\n    return sum\n    \nprint(square_Sum(5)"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x * x for x in range(1, n+1, 2))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(0,n,2):\n        s+=i**2\n    return s\nn=int(input(\"Enter the number:\"))\nprint(square_Sum(n))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def sum(n):\n        return n*n\n    \n    return sum(range(1,n+1))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1, n):\n        if i%2 == 0:\n            result = result + i**2\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + i*i\n    return total\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # TODO: Your code here\n    return max([len(list) for list in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_max = 0\n    for i in range(0,len(list1)):\n        length_max = max(length_max,len(list1[i]))\n    return length_max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    i=1\n    max_length=0\n    for sublist in list1:\n        if len(sublist)>max_length:\n            max_length=len(sublist)\n        i+=1\n    return i\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for list1_index, list1_element in enumerate(list1):\n        if len(list1_element) > max_length:\n            max_length = len(list1_element)\n        if list1_index == len(list1)-1:\n            break\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max_length:\n                max_length = list1[i][j]\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = len(list1)\n    if l == 0:\n        return None\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j]>list1[i][j+1]:\n                list1[i][j],list1[i][j+1]=list1[i][j+1],list1[i][j]\n    return list1\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    myList = []\n    if len(list1) <= 0:\n        return 0\n    else:\n        for i in list1:\n            if len(i) > len(myList):\n                myList = i\n        return len(myList)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for ele in list1:\n        if len(ele) > max:\n            max = len(ele)\n    return max\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return (2*k)//(n-2)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2:\n        return 0\n    elif k <= n:\n        return int(math.factorial(n)/(math.factorial(k) * math.factorial(n-k)))\n    else:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < k:\n        return 0\n    return (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)) % 1000000000\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # init\n    count = 0\n    if n <= k:\n        count = 1\n    \n    # dfs\n    for i in range(1, n+1):\n        for j in range(k):\n            if i == 1:\n                if j == 0 or j == k-1:\n                    count += 1\n            elif i == 2:\n                if j == 0 or j == k-1:\n                    count += 2\n            else:\n                if j == 0 or j == k-1:\n                    count += 1\n    # return\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case\n    if (n == 0 or k == 0):\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2 or k == 2: \n        return 1\n    if n < 2 or k < 2: \n        return 0 \n    if k == 2: \n        return count_no_of_ways(n - 1, k - 1) + count_no_of_ways(n - 1, k) \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 2:\n        return 2\n    else:\n        m = n-k\n        count_of_ways = 0\n        if (n < 2):\n            return 0\n        else:\n            if (n % 2 == 0):\n                return (count_of_ways + count_no_of_ways(n-1, k-1))\n            else:\n                return count_of_ways + count_no_of_ways(n-1, k)\n            "
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 and k == 1:\n        return 1\n    else:\n        ways = 0\n        for i in range(1, n+1):\n            ways += count_no_of_ways(i, k) * count_no_of_ways(n-i, k)\n        return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n    \n    \n    ways = [1] * (n+1)\n    ways[0] = ways[1] = 1\n    ways[1] = ways[2] = 2\n    for i in range(3, n+1):\n        ways[i] = ways[i-1] + ways[i-2]\n        ways[i] %= (10**9 + 7)\n    return ways[-1]\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a = m%10\n    b = n%10\n    if a > b:\n        q = 10**b - b - a + 1\n        return q\n    else:\n        q = 10**a - a + b + 1\n        return q\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        m=round(m)\n        n=round(n)\n    elif n==m:\n        return n\n    elif n<m:\n        n=round(n)\n        m=round(m)\n    \n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    else:\n        return find(n,int(n/m))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    else:\n        return find(n%m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return math.floor(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return m//n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(n)\n    print(m)\n    quot = n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m if n >= 0 else (-1)*(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    while (m > n) :\n        m = m // 10\n        n = n // 10\n    \n    return n\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h<w:\n        return w\n    elif w<h:\n        return h\n    else:\n        return w\ndef otherside_downangle(w,h):\n    '''\n    Write a function to find the third side of a down angled triangle.\n    '''\n    if h<w:\n        return w\n    elif w<h:\n        return h\n    else:\n        return w\ndef n_cross(n,m):\n    '''\n    Write a function to find the value of n cross m.\n    '''\n    if m==0:\n        return n\n    elif m==n:\n        return n\n    else:\n        return n*n-m*m\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==0:\n        return h\n    if h==0:\n        return w\n    if w>h:\n        return 0\n    elif w==h:\n        return w\n    else:\n        return h\n    \n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = math.acos((w**2 + h**2 - (w*h)) / (2*w*h))\n    #print(angle)\n    return angle\ndef outerside_rightangle(w,h):\n    '''\n    Write a function to find the outer angle of a right angled triangle.\n    '''\n    angle = math.acos((w**2 + h**2 - (w*h)) / (2*w*h))\n    #print(angle)\n    return angle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 0.5*math.pi*(w**2+h**2)\ndef side_2_triangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 0.5*math.pi*(w**2+h**2)\ndef side_2_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    return 0.5*math.pi*(w**2+h**2)\ndef side_3_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_2_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_centre(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(w**2+h**2)\ndef side_2_centre(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_centre(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_side_centre(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(w**2+h**2)\ndef side_2_side_centre(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_side_centre(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*math.pi*(w**2+h**2)\ndef side_2_area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return 0.5*math.pi*(w**2+h**2)\ndef side_2_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_diagonal(w,h):\n    '''\n    Write a function to find the diagonal of a triangle.\n    '''\n    return 0.5*math.pi*(w**2+h**2)\ndef side_2_diagonal(w,h):\n    '''\n    Write a function to find the diagonal of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_diagonal(w,h):\n    '''\n    Write a function to find the diagonal of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_side_diagonal(w,h):\n    '''\n    Write a function to find the diagonal of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_2_side_diagonal(w,h):\n    '''\n    Write a function to find the diagonal of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_side_diagonal(w,h):\n    '''\n    Write a function to find the diagonal of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_area_diagonal(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_2_area_diagonal(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_area_diagonal(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_perimeter_diagonal(w,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_2_perimeter_diagonal(w,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_3_perimeter_diagonal(w,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_1_volume_diagonal(w,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 0.5*math.pi*(h**2+w**2)\ndef side_2_volume_diagonal(w,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 0.5*math.pi*"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    theta1 = math.atan(w/h)\n    phi1 = math.asin(h/w)\n    phi1 = math.tau(phi1)\n    phi2 = math.atan((2*h)/w)\n    theta2 = math.asin(h/2)\n    theta3 = math.atan(h/w)\n    theta3 = math.tau(theta3)\n    phi1 = math.asin(h/math.sqrt(2))\n    phi2 = math.asin(h/math.sqrt(3))\n    phi3 = math.atan(h/2)\n    return (phi1,theta1),(phi2,theta2),(phi3,theta3)\ndef otherside_rightangled_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a1,b1 = otherside_rightangle(a,b)\n    a2,b2 = otherside_rightangle(a,c)\n    a3,b3 = otherside_rightangle(b,c)\n    a1 = math.atan(a2[1]/a2[0])\n    b1 = math.asin(a2[0]/a2[1])\n    a2 = math.atan(a3[1]/a3[0])\n    b2 = math.asin(a3[0]/a3[1])\n    a3 = math.atan(b3[1]/b3[0])\n    b3 = math.asin(b3[0]/b3[1])\n    return (a1,b1,a2,b2,a3,b3)\ndef otherside_rightangled_poly(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a1,b1 = otherside_rightangled_triangle(a,b,c)\n    a2,b2 = otherside_rightangled_triangle(a,d,c)\n    a3,b3 = otherside_rightangled_triangle(b,d,c)\n    a1 = math.atan(a2[1]/a2[0])\n    b1 = math.asin(a2[0]/a2[1])\n    a2 = math.atan(a3[1]/a3[0])\n    b2 = math.asin(a3[0]/a3[1])\n    a3 = math.atan(b3[1]/b3[0])\n    b3 = math.asin(b3[0]/b3[1])\n    return (a1,b1,a2,b2,a3,b3)\ndef otherside_rightangled_equilateral_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a1,b1 = otherside_rightangled_triangle(a,b,c)\n    a2,b2 = otherside_rightangled_triangle(a,b,b)\n    a3,b3 = otherside_rightangled_triangle(a,b,a)\n    a1 = math.atan(a2[1]/a2[0])\n    b1 = math.asin(a2[0]/a2[1])\n    a2 = math.atan(a3[1]/a3[0])\n    b2 = math.asin(a3[0]/a3[1])\n    a3 = math.atan(b3[1]/b3[0])\n    b3 = math.asin(b3[0]/b3[1])\n    return (a1,b1,a2,b2,a3,b3)\ndef otherside_rightangled_equilateral_poly(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a1,b1 = otherside_rightangled_poly(a,b,c,d)\n    a2,b2 = otherside_rightangled_poly(a,d,c,b)\n    a3,b3 = otherside_rightangled_poly(a,b,a,d)\n    a1 = math.atan(a2[1]/a2[0])\n    b1 = math.asin(a2[0]/a2[1])\n    a2 = math.atan(a3[1]/a3[0])\n    b2 = math.asin(a3[0]/a3[1])\n    a3 = math.atan(b3[1]/b3[0])\n    b3 = math.asin(b3[0]/b3[1])\n    return (a1,b1,a2,b2,a3,b3)\ndef otherside_rightangled_parabola(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a1,b1 = otherside_rightangled_triangle(a,b,c)\n    a2,b2 = otherside_rightangled_triangle(a,a,b)\n    a3,b3 = otherside_rightangled_triangle(a,b,a)\n    a1 = math.atan(a2[1]/a2[0])\n    b1 = math.asin(a2[0]/a2[1])\n    a2 = math.atan(a3[1]/a3[0])\n    b2 = math.asin(a3[0]/a3[1])\n    a3 = math.atan(b3[1]/b3[0])\n    b3 = math.asin(b3[0]/b3[1])\n    return (a1,b1,a2,b2,a3,b3)\ndef otherside_rightangled_cuboid(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a1,b1,a2,b2,a3,b3 = otherside_rightangled_triangle(a,b,c,d)\n    a4,b4 = otherside_rightangled_equilateral_triangle(a,b,c)\n    a5,b5 = otherside_rightangled_equilateral_triangle(a,b,d)\n    a6,b6 = otherside_rightangled_equilateral_triangle(a,a,b)\n    a7,b7 = otherside_rightangled_equilateral_triangle(a,a,a)\n    a8,b8 = otherside_rightangled_equilateral_triangle(a,a,b)\n    a9,b9 = otherside_rightangled_parabola(a,b,c)\n    a10,b10 = otherside_rightangled_parabola(a,b,d)\n    a11,b11 = otherside_rightangled_parabola(a,b,a)\n    a12,b12 = otherside_rightangled_parabola(a,a,b)\n    a13,b13 = otherside_rightangled_parabola(a,a,a)\n    a14,b14 = otherside_rightangled_parabola(a,a,b)\n    a15,b15 = otherside_rightangled_parabola(a,a,a)\n    return (a1,b1,a2,b2,a3,b3,a4,b4,a5,b5,a6,b6,a7,b7,a8,b8,a9,b9,a10,b10,a11,b11,a12,b12,a13,b13,a14,b14,a15,b15)\ndef otherside_rightangled_square(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a1,b1 = otherside_rightangled_triangle(a,b,b)\n    a2,b2 = otherside_rightangled_triangle(a,b,a)\n    a3,b3 = otherside_rightangled_triangle(a,b,"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a right angled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(120))))/2 + (math.sqrt(2*h/math.tan(math.radians(60))))/2\n    \ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a left angled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(60))))/2 + (math.sqrt(2*h/math.tan(math.radians(120))))/2\n    \ndef otherside_bottomangled(w,h):\n    '''\n    Write a function to find the third side of a bottom angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a bottom angled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(60))))/2 + (math.sqrt(2*h/math.tan(math.radians(120))))/2\n    \ndef otherside_topangled(w,h):\n    '''\n    Write a function to find the third side of a top angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a top angled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(120))))/2 + (math.sqrt(2*h/math.tan(math.radians(60))))/2\n    \ndef otherside_middleangled(w,h):\n    '''\n    Write a function to find the third side of a middle angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a middle angled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(120))))/2 + (math.sqrt(2*h/math.tan(math.radians(60))))/2\n    \ndef otherside_bottomangled_middleangled(w,h):\n    '''\n    Write a function to find the third side of a bottom angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a bottom angled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(120))))/2 + (math.sqrt(2*h/math.tan(math.radians(60))))/2\n    \ndef otherside_topangled_middleangled(w,h):\n    '''\n    Write a function to find the third side of a top angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a top angled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(120))))/2 + (math.sqrt(2*h/math.tan(math.radians(60))))/2\n    \ndef otherside_middleangled_bottomangled(w,h):\n    '''\n    Write a function to find the third side of a middle angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a middleangled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(60))))/2 + (math.sqrt(2*h/math.tan(math.radians(120))))/2\n    \ndef otherside_bottomangled_middleangled(w,h):\n    '''\n    Write a function to find the third side of a bottom angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a bottomangled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(120))))/2 + (math.sqrt(2*h/math.tan(math.radians(60))))/2\n    \ndef otherside_middleangled_bottomangled(w,h):\n    '''\n    Write a function to find the third side of a bottom angled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a bottomangled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(120))))/2 + (math.sqrt(2*h/math.tan(math.radians(60))))/2\n    \ndef otherside_middleangled_middleangled(w,h):\n    '''\n    Write a function to find the third side of a middleangled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a middleangled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(120))))/2 + (math.sqrt(2*h/math.tan(math.radians(60))))/2\n    \ndef otherside_bottomangled_middleangled(w,h):\n    '''\n    Write a function to find the third side of a bottomangled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a bottomangled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(60))))/2 + (math.sqrt(2*h/math.tan(math.radians(120))))/2\n    \ndef otherside_bottomangled_middleangled(w,h):\n    '''\n    Write a function to find the third side of a bottomangled triangle.\n    '''\n    # your code here\n    '''\n    Note:\n    1. The formula to find the third side of a bottomangled triangle is as follows:\n        A = 2*(w/2) + (h/2)\n    \n    Where A is the base of the triangle.\n    '''\n    return (math.sqrt(2*w/math.tan(math.radians(60))))/2 + (math.sqrt(2*h/math.tan(math.radians"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = h/2\n    b = h/2\n    c = a*math.cos(math.pi*w/180)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # using math\n    a = w/2\n    b = h/2\n    c = math.sqrt(a**2 + b**2)\n    s = math.sqrt(b**2 - a**2)\n    # using pi\n    # s = math.sqrt(c**2 - b**2)\n    # using two sides theorem\n    phi = math.acos((c**2 - s**2) / (2*b*c))\n    phi1 = math.acos((s**2 - a**2) / (2*b*c))\n    phi2 = math.acos((c**2 - s**2) / (2*a*c))\n    phi3 = math.acos((s**2 - a**2) / (2*a*c))\n    # print(phi, phi1, phi2, phi3)\n    x = ((b**2 - a**2) * math.sin(phi) + (a**2 - b**2) * math.cos(phi)) / (2*b*c)\n    y = ((-b**2 + (a**2 - b**2) * math.sin(phi)) * math.sin(phi) + (a**2 - b**2) * math.cos(phi)) / (2*a*c)\n    z = ((-b**2 + (a**2 - b**2) * math.sin(phi)) * math.cos(phi) + (b**2 - a**2) * math.sin(phi)) / (2*a*c)\n    # print(x,y,z)\n    return x, y, z\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        return (w-h)/2\n    else:\n        return (h-w)/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return ((w/3)*math.sqrt(w*h))/math.sqrt(2*h)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    max_ind = 0\n    for i in range(0,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n            max_ind = i\n    return max_ind\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = listval[0]\n    for x in listval:\n        if x > maximum:\n            maximum = x\n    return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n            index = i\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val=listval[0]\n    for ele in listval:\n        if ele>max_val:\n            max_val=ele\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    print('Checking for maximum value: ', end='')\n    print('max val: ', end='')\n    for el in listval:\n        print(el,'', end='')\n    if len(listval) > 0:\n        print('\\nMax: ', end='')\n        for el in listval:\n            if el > max_val(listval):\n                print(el)\n    else:\n        print('None')\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Write your code here.\n    return max(listval)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0 or number == 1:\n        return 0\n    elif number == 2:\n        return 1\n    elif number == 3:\n        return 2\n    else:\n        count = 0\n        for i in range(4, number + 1, 2):\n            if number % i == 0:\n                count += i\n        return count\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        i = 1\n        while i <= number:\n            if number % i == 0:\n                return number + sum_div(number - i)\n            i += 1\n        return number\n        "
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1,number+1):\n        if number%i == 0:\n            sum_div += i\n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            divisors.append(divisor)\n    sum = 0\n    for divisor in divisors:\n        sum += divisor\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum += i\n            if i == number//i:\n                sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_ = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_ += i\n    return sum_\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    elif number == 3:\n        return 3\n    elif number == 4:\n        return 4\n    elif number == 5:\n        return 5\n    elif number == 6:\n        return 6\n    elif number == 7:\n        return 7\n    elif number == 8:\n        return 8\n    elif number == 9:\n        return 9\n    elif number == 10:\n        return 10\n    elif number == 11:\n        return 11\n    elif number == 12:\n        return 12\n    elif number == 13:\n        return 13\n    elif number == 14:\n        return 14\n    elif number == 15:\n        return 15\n    elif number == 16:\n        return 16\n    elif number == 17:\n        return 17\n    elif number == 18:\n        return 18\n    elif number == 19:\n        return 19\n    elif number == 20:\n        return 20\n    elif number == 21:\n        return 21\n    elif number == 22:\n        return 22\n    elif number == 23:\n        return 23\n    elif number == 24:\n        return 24\n    elif number == 25:\n        return 25\n    elif number == 26:\n        return 26\n    elif number == 27:\n        return 27\n    elif number == 28:\n        return 28\n    elif number == 29:\n        return 29\n    elif number == 30:\n        return 30\n    elif number == 31:\n        return 31\n    elif number == 32:\n        return 32\n    elif number == 33:\n        return 33\n    elif number == 34:\n        return 34\n    elif number == 35:\n        return 35\n    elif number == 36:\n        return 36\n    elif number == 37:\n        return 37\n    elif number == 38:\n        return 38\n    elif number == 39:\n        return 39\n    elif number == 40:\n        return 40\n    elif number == 41:\n        return 41\n    elif number == 42:\n        return 42\n    elif number == 43:\n        return 43\n    elif number == 44:\n        return 44\n    elif number == 45:\n        return 45\n    elif number == 46:\n        return 46\n    elif number == 47:\n        return 47\n    elif number == 48:\n        return 48\n    elif number == 49:\n        return 49\n    elif number == 50:\n        return 50\n    elif number == 51:\n        return 51\n    elif number == 52:\n        return 52\n    elif number == 53:\n        return 53\n    elif number == 54:\n        return 54\n    elif number == 55:\n        return 55\n    elif number == 56:\n        return 56\n    elif number == 57:\n        return 57\n    elif number == 58:\n        return 58\n    elif number == 59:\n        return 59\n    elif number == 60:\n        return 60\n    elif number == 61:\n        return 61\n    elif number == 62:\n        return 62\n    elif number == 63:\n        return 63\n    elif number == 64:\n        return 64\n    elif number == 65:\n        return 65\n    elif number == 66:\n        return 66\n    elif number == 67:\n        return 67\n    elif number == 68:\n        return 68\n    elif number == 69:\n        return 69\n    elif number == 70:\n        return 70\n    elif number == 71:\n        return 71\n    elif number == 72:\n        return 72\n    elif number == 73:\n        return 73\n    elif number == 74:\n        return 74\n    elif number == 75:\n        return 75\n    elif number == 76:\n        return 76\n    elif number == 77:\n        return 77\n    elif number == 78:\n        return 78\n    elif number == 79:\n        return 79\n    elif number == 80:\n        return 80\n    elif number == 81:\n        return 81\n    elif number == 82:\n        return 82\n    elif number == 83:\n        return 83\n    elif number == 84:\n        return 84\n    elif number == 85:\n        return 85\n    elif number == 86:\n        return 86\n    elif number == 87:\n        return 87\n    elif number == 88:\n        return 88\n    elif number == 89:\n        return 89\n    elif number == 90:\n        return 90\n    elif number == 91:\n        return 91\n    elif number == 92:\n        return 92\n    elif number == 93:\n        return 93\n    elif number == 94:\n        return 94\n    elif number == 95:\n        return 95\n    elif number == 96:\n        return 96\n    elif number == 97:\n        return 97\n    elif number == 98:\n        return 98\n    elif number == 99:\n        return 99\n    elif number == 100:\n        return 100\n    elif number == 101:\n        return 101\n    elif number == 102:\n        return 102\n    elif number == 103:\n        return 103\n    elif number == 104:\n        return 104\n    elif number == 105:\n        return 105\n    elif number == 106:\n        return 106\n    elif number == 107:\n        return 107\n    elif number == 108:\n        return 108\n    elif number == 109:\n        return 109\n    elif number == 110:\n        return 110\n    elif number == 111:\n        return 111\n    elif number == 112:\n        return 112\n    elif number == 113:\n        return 113\n    elif number == 114:\n        return 114\n    elif number == 115:\n        return 115\n    elif number == 116:\n        return 116\n    elif number == 117:\n        return 117\n    elif number == 118:\n        return 118\n    elif number == 119:\n        return 119\n    elif number == 120:\n        return 120\n    elif number == 121:\n        return 121\n    elif number == 122:\n        return 122\n    elif number == 123:\n        return 123\n    elif number == 124:\n        return 124\n    elif number == 125:\n        return 125\n    elif number == 126:\n        return 126\n    elif number == 127:\n        return 127\n    elif number == 128:\n        return 128\n    elif number == 129:\n        return 129\n    elif number == 130:\n        return 130\n    elif number == 131:\n        return 131\n    elif number == 132:\n        return 132\n    elif number == 133:\n        return 133\n    elif number == 134:\n        return 134\n    elif number == 135:\n        return 135\n    elif number == 136:\n        return 136\n    elif number == 137:\n        return 137\n    elif number == 138:\n        return 138\n    elif number == 139:\n        return 139\n    elif number == 140:\n        return 140\n    elif number == 141:\n        return 141\n    elif number == 142:\n        return 142\n    elif number == 143:\n        return 143\n    elif number == 144:\n        return 144\n    elif number == 145:\n        return 145\n    elif number == 146:\n        return 146\n    elif number == 147:\n        return 147\n    elif number == 148:\n        return 148\n    elif number == 149:\n        return 149\n    elif number == 150:\n        return 150\n    elif number == 151:\n        return 151\n    elif number == 152:\n        return 152\n    elif number == 153:\n        return 153\n    elif number == 154:\n        return 154\n    elif number == 155:\n        return 155\n    elif number == 156:\n        return 156\n    elif number == 157:\n        return 157\n    elif number == 158:\n        return 158\n    elif number == 159:\n        return 159\n    elif number == 160:\n        return 160\n    elif number == 161:\n        return 161\n    elif number == 162:\n        return 162\n    elif number == 163:\n        return 163\n    elif number == 164:\n        return 164\n    elif number == 165:\n        return 165\n    elif number == 166:\n        return 166\n    elif number == 167:\n        return 16"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def main():\n        try:\n            print(sum(range(1, int(number) + 1)))\n        except ValueError:\n            print('Please enter a number')\n    main()\nsum_div(int(input(\"Please enter a number:\"))"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 2:\n        return len(arr)\n    else:\n        mid = len(arr)//2\n        l = arr[:mid]\n        r = arr[mid:]\n        l_count = get_Inv_Count(l)\n        r_count = get_Inv_Count(r)\n        return (mid + (l_count-r_count))\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in arr:\n        inv += 1\n        if i <= 0:\n            break\n        if i % 2 == 0:\n            if arr[inv] > arr[inv - 1]:\n                inv += 1\n        else:\n            if arr[inv] > arr[inv - 1] and arr[inv] < arr[inv + 1]:\n                inv += 1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    ans=0\n    for i in range(0, n):\n        if arr[i]>arr[i+1]:\n            ans+=1\n    return ans\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i = 0\n    j = len(arr) - 1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr == []: \n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count_inv = 0\n    for i in range(len(arr)):\n        count_inv += arr[i]\n        if arr[i]!= arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n            count_inv += arr[i]\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)): \n        if arr[i]<arr[i-1]: \n            count += 1\n        else: \n            if count>1: \n                arr[i-1], arr[i] = arr[i], arr[i-1] \n    print(count)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    size = len(arr)\n    inv_count = 0\n    for i in range(size):\n        for j in range(i, size):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr) - 1): \n        Inv_Count += get_Inv(arr, i) \n        Inv_Count += get_Inv(arr, i + 1)\n    return Inv_Count\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [i for l in list1 for i in flatten_list(l)]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # your code goes here\n    # need to do something else here.\n    # this is a single list.\n    if len(list1) == 0:\n        return []\n    else:\n        # return the flat list from the list.\n        # concatenate the flattened list\n        # from the other list to the new list\n        # and return it.\n        if isinstance(list1, list):\n            return flatten_list(list1[0]) + flatten_list(list1[1:])\n        else:\n            return [list1]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            l.append(list1[i][j])\n    return l\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # For each item in the given list, take the same as the item,\n    # combine the list item with the next item\n    \n    #return a single list with the items from the nested list\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) is list:\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n    \n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # i=0\n    # while i<len(list1):\n    #     j=0\n    #     while j<len(list1[i]):\n    #         print(list1[i][j])\n    #         j=j+1\n    #     i=i+1\n    \n    return list(map(flatten_list,list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for item in list1:\n        if type(item) is list:\n            output.extend(flatten_list(item))\n        else:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    if list1[0] == []:\n        return list1\n    else:\n        new_list = []\n        for x in list1:\n            if isinstance(x, list):\n                new_list.extend(flatten_list(x))\n            else:\n                new_list.append(x)\n        return new_list\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_tup = []\n    for tup in stdata:\n        tup_sum = sum(tup)\n        if tup_sum > 0:\n            max_aggregate_tup.append(tup_sum)\n    return max(max_aggregate_tup)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = []\n    for i in stdata:\n        if i:\n            data.append(i)\n    return max(data)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    l = []\n    for t in stdata:\n        l.append(t[0])\n    return max(l)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def find_max_aggregate(stdata):\n        '''\n        Write your code here.\n        '''\n        aggregate = 0\n        for tup in stdata:\n            if tup[1] > aggregate:\n                aggregate = tup[1]\n        return aggregate\n    \n    return find_max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the max aggregate\n    agg_dict = defaultdict(float)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxaggregate = 0\n    for i in stdata:\n        i[1] = i[1]/stdata[-1][1]\n        if i[1] > maxaggregate:\n            maxaggregate = i[1]\n    return maxaggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate=0\n    for d in stdata:\n        if d[1]>max_aggregate:\n            max_aggregate=d[1]\n    return max_aggregate\ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    mean_aggregate=0\n    for d in stdata:\n        mean_aggregate+=d[1]\n    return mean_aggregate/len(stdata)\ndef lcs_aggregate(d1,d2):\n    '''\n    Write a function to calculate the LCS length between two strings.\n    '''\n    lcs_length=0\n    for i in range(min(len(d1),len(d2))):\n        if d1[i]==d2[i]:\n            lcs_length+=1\n    return lcs_length\ndef non_repeated_letters(s):\n    '''\n    Write a function to count the number of occurrences of each letter in a string.\n    '''\n    count=defaultdict(int)\n    for i in range(len(s)):\n        if s[i] not in count:\n            count[s[i]]+=1\n        else:\n            count[s[i]]+=1\n            count[s[i]]+=1\n    return count\ndef unique_letters(s):\n    '''\n    Write a function to count the number of occurrences of each letter in a string.\n    '''\n    count={}\n    for i in s:\n        if i in count:\n            count[i]+=1\n        else:\n            count[i]=1\n    return count\ndef frequency_table(d):\n    '''\n    Write a function that takes in a dictionary and returns a list of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_table=[]\n    for key in d:\n        frequency_table.append((key,d[key]))\n    return frequency_table\ndef dictionary_of_frequency_table(d):\n    '''\n    Write a function that takes in a dictionary and returns a list of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_table=[]\n    for key in d:\n        frequency_table.append((key,d[key]))\n    return frequency_table\ndef list_of_dictionary(l):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary of tuples.\n    '''\n    mydict={}\n    for i in range(len(l)):\n        key=l[i][0]\n        value=l[i][1]\n        mydict[key]=value\n    return mydict\ndef frequency_of_dictionary_of_tuples(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_table=frequency_table(d)\n    frequency_dict=frequency_table_to_dict(frequency_table)\n    return frequency_dict\ndef frequency_of_tuples_in_dictionary(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_dict=frequency_of_dictionary_of_tuples(d)\n    return frequency_dict\ndef frequency_of_dictionary(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_dict=frequency_of_dictionary_of_tuples(d)\n    frequency_dict.pop('0')\n    frequency_dict.pop('1')\n    frequency_dict.pop('2')\n    return frequency_dict\ndef dictionary_of_frequency_of_tuples(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_dict=frequency_of_dictionary_of_tuples(d)\n    return frequency_dict\ndef dictionary_of_frequency_table(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_table=frequency_table(d)\n    frequency_dict=frequency_of_dictionary_of_tuples(d)\n    return frequency_dict\ndef dictionary_of_tuples_of_frequency_table(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_dict=frequency_of_dictionary_of_tuples(d)\n    frequency_dict.pop('0')\n    frequency_dict.pop('1')\n    frequency_dict.pop('2')\n    return frequency_dict\ndef frequency_of_dictionary(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_dict=frequency_of_dictionary_of_tuples(d)\n    return frequency_dict\ndef dictionary_of_frequency_of_dictionary(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_dict=frequency_of_dictionary_of_tuples(d)\n    frequency_dict.pop('0')\n    frequency_dict.pop('1')\n    frequency_dict.pop('2')\n    return frequency_dict\ndef frequency_of_dictionary_of_tuples(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of tuples with the frequency\n    of each key in the dictionary.\n    '''\n    frequency_dict=frequency_of_dictionary_of_tuples(d)\n    frequency_dict.pop('0')\n    frequency_dict.pop('1')\n    frequency_dict.pop('2')\n    return frequency_dict\ndef max_dict(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the maximum key value pair from the dictionary.\n    '''\n    max_dict={}\n    for i in d:\n        max_dict[i]=max(d[i],max_dict.get(i,0))\n    return max_dict\ndef min_dict(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the minimum key value pair from the dictionary.\n    '''\n    min_dict={}\n    for i in d:\n        min_dict[i]=min(d[i],min_dict.get(i,0))\n    return min_dict\ndef average_dict(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the average key value pair from the dictionary.\n    '''\n    avg_dict={}\n    for i in d:\n        avg_dict[i]=round((d[i]+0.000001)/2,2)\n    return avg_dict\ndef max_and_min_from_dictionary(d):\n    '''\n    Write a function that takes in a dictionary and returns the maximum and minimum keys from the dictionary.\n    '''\n    max_min=max(d.keys())\n    return max_min,max(d.values())\ndef copy_dictionary(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the maximum key value pair from the dictionary.\n    '''\n    return d.copy()\ndef dict_from_dictionary(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the maximum key value pair from the dictionary.\n    '''\n    return {k:v for k,v in d.items()}\ndef dict_of_tuples_from_dictionary(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the maximum key value pair from the dictionary.\n    '''\n    return {k:d[k] for k in d}\ndef dict_of_tuples_from_dictionary_new(d):\n    '''"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregated = 0\n    max_aggregate = []\n    for tup in stdata:\n        if tup[1] > aggregated:\n            aggregated = tup[1]\n            max_aggregate = tup\n    return aggregated, max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    for i in range(len(stdata)):\n        agg = 0\n        for j in range(i, len(stdata)):\n            agg += stdata[j][1]\n        if agg > max_aggregate_list[0]:\n            max_aggregate_list = [agg, stdata[i][1]]\n    return max_aggregate_list[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \"\"\"\n    To check if an item is a tuple.\n    \"\"\"\n    if isinstance(stdata, tuple):\n        return max(stdata)\n    else:\n        return stdata\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    m = 0\n    for i in range(n):\n        m = (m+1) & (1 << (n-i-1))\n        if m == 0: return 0\n    return m\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n=int(n)\n    if n==0:\n        return 0\n    if n<=1:\n        return 0\n    else:\n        count=0\n        while n>0:\n            if n%2==0:\n                count+=1\n                n=n//2\n            else:\n                n=n//2+1\n        return count\n        \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = n-1\n    def count_binary_seq(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            val = (n&1)\n            ret = count_binary_seq(n-1) + count_binary_seq(n-2)\n            return val + ret\n    print(count_binary_seq(n))\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    N=n\n    if n<=0:\n        return 0\n    \n    # Initialize count\n    count = 0\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    c = 0\n    for i in range(2,n+1):\n        c += int(bin(i).replace('0b',''))\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    while n > 0:\n        if (n & 1) == 1:\n            count += 1\n        n >>= 1\n    return count\n        "
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_of_first_n_bits = 0\n    sum_of_last_n_bits = 0\n    for i in range(1, n+1):\n        sum_of_first_n_bits += i & 1\n        sum_of_last_n_bits += (i & (n-1))\n    return sum_of_first_n_bits == sum_of_last_n_bits\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = []\n    for i in range(0, n):\n        bin_list = []\n        for j in range(0, n):\n            if i - j >= 0 and bin_list.count(1) < (n - i):\n                bin_list.append(1)\n            elif i - j == -1 and bin_list.count(0) < (n - i):\n                bin_list.append(0)\n            else:\n                bin_list.append(0)\n        res.append(bin_list)\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    s = []\n    for i in range(2**(n-1)):\n        sum = 0\n        while i:\n            sum += bin(i)[2:]\n            i >>= 1\n        if sum == n:\n            s.append(len(bin(i)[2:]))\n    return s\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        res = 1\n        for i in range(n): \n            res = res * 2 + (n - i - 1) \n        return res \n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    if type(d) is dict:\n        for k,v in d.items():\n            if type(v) is dict:\n                depth += dict_depth(v)\n            elif type(v) is list:\n                depth += max(dict_depth(l) for l in v)\n        return depth\n    else:\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Create a dictionary and populate it with the available keys\n    # and the values in their respective dictionary keys.\n    d = dict(d)\n    # Create a dictionary that will contain the values from the dictionary of dictionaries\n    d = dict([(d[k], k) for k in d])\n    # Set all the keys of the dictionary to be lists of the keys of the dictionary\n    for k, v in d.items():\n        d[k] = list(v)\n    # The maximum number of keys\n    max_keys = len(d)\n    # The maximum number of values\n    max_values = len(d[list(d)[0]])\n    # The depth of the dictionary\n    depth = 1\n    # The amount of keys found\n    keys_found = 0\n    # The amount of values found\n    values_found = 0\n    # For each of the keys in the dictionary\n    for keys in d:\n        # If the keys have a value\n        if type(d[keys]) == dict:\n            # Loop through each item of the dictionary\n            for k in d[keys]:\n                # If the keys have a value, increase the depth by 1\n                if type(d[keys][k]) == dict:\n                    depth += 1\n                    # If the key has already been found, only increment the amount of keys and values found\n                    if keys in d[keys]:\n                        keys_found += 1\n                    # If the key has not been found, add the key and value to the dictionary\n                    else:\n                        d[keys][k] = keys\n                        d[keys][list(d)[0]] = list(d[keys][k])\n                        d[keys] = dict()\n                        d[keys][list(d)[0]] = keys\n                # If the keys have not a value, add the key and value to the dictionary\n                else:\n                    d[keys] = keys\n                    d[keys][list(d)[0]] = keys\n                    d[keys][list(d)[0]] = keys\n        # If the keys are integers\n        elif type(d[keys]) == int:\n            # If the keys have a value, increase the depth by 1\n            if type(d[keys]) == int:\n                depth += 1\n                # If the key has already been found, only increment the amount of keys and values found\n                if keys in d:\n                    keys_found += 1\n                # If the key has not been found, add the key and value to the dictionary\n                else:\n                    d[keys] = keys\n                    d[keys] = keys\n                    d[keys] = keys\n        # If the keys are strings\n        elif type(d[keys]) == str:\n            # If the keys have a value, increase the depth by 1\n            if type(d[keys]) == str:\n                depth += 1\n                # If the key has already been found, only increment the amount of keys and values found\n                if keys in d:\n                    keys_found += 1\n                # If the key has not been found, add the key and value to the dictionary\n                else:\n                    d[keys] = keys\n                    d[keys] = keys\n                    d[keys] = keys\n    # Return the depth\n    return depth, keys_found, values_found\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 0\n    else:\n        return 1 + max([dict_depth(i) for i in d.keys()])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return sys.getsizeof(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d_depth = dict()\n    for k,v in d.items():\n        if isinstance(v,dict):\n            d_depth[k] = dict_depth(v)\n        else:\n            d_depth[k] = 1\n    return len(d_depth)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    while (not d.is_empty()) and (d.get_item()[1] < depth):\n        depth += 1\n        d.next_item()\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        depth += 1\n        if type(value) == dict:\n            depth += dict_depth(value)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    depth = 0\n    for k in d:\n        depth += 1 + dict_depth(d[k])\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def _dict_depth(d):\n        if not d:\n            return None\n        elif not d:\n            return 0\n        else:\n            l = []\n            for k,v in d.items():\n                l.append(_dict_depth(v))\n            if l.__len__() == 1:\n                return l[0]\n            else:\n                return l[0] + l[1]\n    return _dict_depth(d)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        rot = rotations[i]\n        s = ranges[i]\n        if rot < s :\n            return arr[i]\n        rotations[i] += s\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    if(ranges[0] < r and ranges[1] >= r and rotations == 0):\n        return arr[index]\n    elif(ranges[0] < r and ranges[1] < r and rotations > 0):\n        for i in range(0,rotations):\n            arr[index] = arr[index] + arr[ranges[0]]\n            ranges[0] -= 1\n        arr[index] = arr[index] + arr[ranges[1]]\n        ranges[1] += 1\n        return find_Element(arr,ranges,rotations-1,index)\n    elif(ranges[0] < r and ranges[1] >= r and rotations == -1):\n        for i in range(ranges[0],ranges[1]):\n            arr[index] = arr[index] + arr[i]\n            ranges[0] += 1\n        return arr[index]\n    elif(ranges[0] < r and ranges[1] < r and rotations == -1):\n        for i in range(ranges[0],ranges[1]):\n            arr[index] = arr[index] + arr[i]\n            ranges[1] -= 1\n        arr[index] = arr[index] + arr[ranges[0]]\n        ranges[0] -= 1\n        return find_Element(arr,ranges,rotations,index)\n    elif(ranges[0] < r and ranges[1] < r and rotations == 1):\n        for i in range(ranges[0],ranges[1]):\n            arr[index] = arr[index] + arr[i]\n            ranges[0] += 1\n        return arr[index]\n    elif(ranges[0] < r and ranges[1] > r and rotations == -1):\n        for i in range(ranges[0],ranges[1]):\n            arr[index] = arr[index] + arr[i]\n            ranges[1] += 1\n        arr[index] = arr[index] + arr[ranges[0]]\n        ranges[0] -= 1\n        return find_Element(arr,ranges,rotations,index)\n    elif(ranges[0] < r and ranges[1] > r and rotations == 1):\n        for i in range(ranges[0],ranges[1]):\n            arr[index] = arr[index] + arr[i]\n            ranges[1] -= 1\n        arr[index] = arr[index] + arr[ranges[0]]\n        ranges[0] += 1\n        return find_Element(arr,ranges,rotations,index)\n    else:\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # checking whether the given index is inside the range\n    if (index >= len(ranges)):\n        return -1\n    if (ranges[index] < ranges[index - 1]) :\n        # we have to rotate, otherwise we will be returning false\n        if (rotations == 1):\n            return arr[ranges[index]]\n        # if it is a rotation, we need to return the starting index\n        elif (rotations == -1) :\n            return arr[ranges[index - 1]]\n    # otherwise, we can return the array\n    else :\n        return arr[ranges[index - 1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # base case\n    if index == 0 :\n        return arr[index]\n    \n    # if element is found in the range it is not rotated any further\n    if (index-1 >=0) and (ranges[index] - ranges[index-1] <= arr[index] - arr[index-1]) :\n        return arr[index]\n    \n    # if element is not found in the range it is rotated\n    if (index - 1 < 0) :\n        return find_Element(arr,ranges,rotations,index-1)\n    \n    # if the element is found in the range it is rotated\n    return find_Element(arr,ranges,rotations,index-1) + ranges[index-1] + arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(arr[index] == ranges[rotations]):\n        return arr[index]\n    elif(arr[index] > ranges[rotations]):\n        return find_Element(arr,ranges,rotations+1,index)\n    else:\n        return find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # rotation 1\n    for i in range(len(ranges)) :\n        if ranges[i] <= index and index < ranges[i+1] :\n            return arr[ranges[i]:ranges[i+1]]\n        \n    # rotation 2\n    return arr[ranges[index]:ranges[index+1]]\n    "
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)):\n        if ranges[i] <= index <= ranges[i+1]:\n            index = i\n            break\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index < len(ranges)) : \n        for i in range(len(ranges)):\n            if ranges[i][0] <= r <= ranges[i][1]:\n                rotations[i] = 1\n        \n        return find_Element(arr,ranges,rotations,index+1)\n    else : \n        return arr[index] \n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0], words[-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    try:\n        return words[0],words[-1]\n    except IndexError:\n        return words[0],None\ndef end_withp(words):\n    '''\n    Write a function to return the last word from a list of words.\n    '''\n    try:\n        return words[-1]\n    except IndexError:\n        return words[-1]\ndef letter_count(words):\n    '''\n    Write a function to return the number of letters in a list of words.\n    '''\n    return len(words)\ndef type_of_word(words):\n    '''\n    Write a function to return the type of a word.\n    '''\n    return''.join(words).casefold()\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\ndef start_withoutp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'w'.\n    '''\n    for word in words:\n        if word[0] == 'w':\n            return word\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    for word in words:\n        if word[-1] == 'p':\n            return word\ndef end_withoutp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'w'.\n    '''\n    for word in words:\n        if word[-1] == 'w':\n            return word\ndef get_punct(text):\n    '''\n    Function that returns a list of the punctuations and non-punctuations (no 'p' or 'w') from a string.\n    '''\n    text = text.strip()\n    punct = []\n    for i in text:\n        if i not in '\" \"!`!?':\n            punct.append(i)\n    return punct\ndef get_symbols(text):\n    '''\n    Function that returns a list of the words in a string that are in the alphabet\n    '''\n    text = text.strip()\n    symbols = []\n    for i in text:\n        symbols.append(i.lower())\n    return symbols\ndef get_word_list(words):\n    '''\n    Function that returns a list of all words in a string that are in the alphabet.\n    '''\n    word_list = []\n    for word in words:\n        word_list.append(word)\n    return word_list\ndef is_word(word, word_list):\n    '''\n    Function that checks if the word is in a word list.\n    '''\n    for word in word_list:\n        if word == word:\n            return True\n    return False\ndef word_length(words):\n    '''\n    Function that returns the length of a word.\n    '''\n    if len(words) == 0:\n        return 0\n    elif len(words) == 1:\n        return len(words[0])\n    elif len(words) == 2:\n        return len(words[0] + words[1])\n    else:\n        return len(words[0] + words[1]) + len(words[0] + words[2])\ndef longest_word(words):\n    '''\n    Function that returns the word with the longest length of a word.\n    '''\n    if len(words) == 0:\n        return None\n    elif len(words) == 1:\n        return words[0]\n    elif len(words) == 2:\n        return words[0] + words[1]\n    else:\n        words_len = []\n        for word in words:\n            words_len.append(len(word))\n        words_len = sorted(words_len, reverse=True)\n        return words[words_len[0]]\ndef first_word(words):\n    '''\n    Function that returns the first word of a word list.\n    '''\n    if len(words) == 0:\n        return None\n    elif len(words) == 1:\n        return words[0]\n    elif len(words) == 2:\n        return words[0]\n    else:\n        return words[0] + words[1]\ndef length_of_longest_word(words):\n    '''\n    Function that returns the length of the longest word in a list.\n    '''\n    if len(words) == 0:\n        return 0\n    elif len(words) == 1:\n        return len(words[0])\n    elif len(words) == 2:\n        return len(words[0] + words[1])\n    else:\n        longest_word = words[0]\n        for word in words:\n            if word[0] > longest_word[0]:\n                longest_word = word\n        return longest_word[0]\ndef word_checker(word, word_list):\n    '''\n    Function that checks if a word is a substring of a word list.\n    '''\n    for word in word_list:\n        if word in word:\n            return True\n    return False\ndef all_words_in_list(word_list):\n    '''\n    Function that returns all words in a word list.\n    '''\n    return [word for word in word_list if len(word) > 1]\ndef remove_punctuation(text):\n    '''\n    Function that removes punctuation from a string.\n    '''\n    text = text.strip()\n    for i in range(len(text)):\n        if text[i] not in get_punct(text):\n            text = text[:i] + text[i + 1:]\n    return text\ndef word_length_checker(text):\n    '''\n    Function that checks if a word length is less than 4 or greater than 16.\n    '''\n    if len(text) > 16 or len(text) < 4:\n        return False\n    else:\n        return True\ndef length_checker(text):\n    '''\n    Function that checks if the length of a word is less than or greater than 4 or greater than 16.\n    '''\n    if len(text) < 4 or len(text) > 16:\n        return False\n    else:\n        return True\ndef is_end(word, word_list):\n    '''\n    Function that checks if the word is ending with a letter in a word list.\n    '''\n    for word in word_list:\n        if word.endswith(word[:-1]):\n            return True\n    return False\ndef get_end(text):\n    '''\n    Function that returns the end of a word.\n    '''\n    if len(text) == 0:\n        return None\n    elif text.endswith('.'):\n        return text[:-1]\n    elif text.endswith('?'):\n        return text[:-1]\n    elif len(text) == 1:\n        return text[0]\n    elif len(text) == 2:\n        return text[0] + text[1]\n    elif len(text) == 3:\n        return text[0] + text[1] + text[2]\n    elif len(text) == 4:\n        return text[0] + text[1] + text[2] + text[3]\n    elif len(text) == 5:\n        return text[0] + text[1] + text[2] + text[3] + text[4]\n    else:\n        return text[0] + text[1] + text[2] + text[3] + text[4] + text[5]\ndef is_start(word, word_list):\n    '''\n    Function that checks if a word is starting with a letter in a word list.\n    '''\n    for word in word_list:\n        if word.startswith(word[:-1]):\n            return True\n    return False\ndef get_start(text):\n    '''\n    Function that returns the start of a word.\n    '''\n    if len(text) == 0:\n        return None\n    elif text.startswith('.'):\n        return text[1:]\n    elif text.startswith('?'):\n        return text[1:]\n    elif len(text) == 1:\n        return text[0]\n    elif len(text) == 2:\n        return text[0] + text[1]\n    elif len(text) == 3:\n        return text[0] + text[1] + text[2]\n    elif len(text) == 4:\n        return text[0] + text[1] + text[2] + text[3]\n    elif len(text) == 5:\n        return text[0] + text[1] + text[2] + text[3] + text[4]\n    else:\n        return text[0] + text[1] + text[2] + text[3] + text[4] + text[5]\ndef is_extend(word, word_list):\n    '''\n    Function that checks if a wor"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # write your code here\n    w=[]\n    for i in range(len(words)):\n        if words[i] == 'p':\n            w.append(words[i])\n    return w\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start = re.findall(r'^p\\W*', words)[0]\n    if start == None:\n        return \"\", \"\", False\n    else:\n        return start, words[start-1], True\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = \"\"\n    for word in words:\n        if word[0] == \"p\":\n            p = word\n            return p\n    return p\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = \"\"\n    for word in words:\n        if word[-1] == \"p\":\n            p = word\n            return p\n    return p\ndef start_withpp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = \"\"\n    for word in words:\n        if word[0] == \"p\":\n            p = word\n            return p\n    return p\ndef end_withpp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = \"\"\n    for word in words:\n        if word[-1] == \"p\":\n            p = word\n            return p\n    return p\ndef start_withppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = \"\"\n    for word in words:\n        if word[0] == \"p\":\n            p = word\n            return p\n    return p\ndef end_withppp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = \"\"\n    for word in words:\n        if word[-1] == \"p\":\n            p = word\n            return p\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^[p]')\n    return pattern.findall(words)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # first word is the letter p\n    p_word = ''\n    # second word is the letter p\n    p_word2 = ''\n    \n    for word in words:\n        if word[0] == 'p':\n            p_word += word[1:]\n            p_word2 += word[0] + word[1:]\n        else:\n            p_word += word\n            p_word2 += word\n            \n    return p_word, p_word2\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for w in words:\n        if w[0] == 'p':\n            return w\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, 'p'\n    return word, 'n'\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    for word in words:\n        if word.endswith('p'):\n            return word, 'p'\n    return word, 'n'\ndef has_p(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word begins with 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return True\n    return False\ndef find_p(words, p):\n    '''\n    Given a list of words and a word to look for, return the first word that begins with 'p'.\n    '''\n    for word in words:\n        if word.startswith(p):\n            return word\n    return 'n'\ndef find_n(words, n):\n    '''\n    Given a list of words and a word to look for, return the first word that does not\n    begin with 'n'.\n    '''\n    for word in words:\n        if not word.startswith('n'):\n            return word\n    return 'n'\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    for word in words:\n        if word.startswith('n'):\n            return word, 'n'\n    return word, 'n'\ndef end_withn(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word ends with 'n'.\n    '''\n    for word in words:\n        if word.endswith('n'):\n            return True\n    return False\ndef has_n(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word does not begin with 'n'.\n    '''\n    for word in words:\n        if not word.startswith('n'):\n            return False\n    return True\ndef find_n(words, n):\n    '''\n    Given a list of words and a word to look for, return the first word that does not\n    begin with 'n'.\n    '''\n    for word in words:\n        if not word.startswith('n'):\n            return word\n    return 'n'\ndef find_p(words, p):\n    '''\n    Given a list of words and a word to look for, return the first word that does not\n    begin with 'p'.\n    '''\n    for word in words:\n        if not word.startswith('p'):\n            return word\n    return 'n'\ndef start_withp_n(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, 'p'\n    return word, 'n'\ndef end_withp_n(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word ends with 'p'.\n    '''\n    for word in words:\n        if word.endswith('p'):\n            return True\n    return False\ndef has_p_n(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word does not begin with 'p'.\n    '''\n    for word in words:\n        if not word.startswith('p'):\n            return False\n    return True\ndef find_p_n(words, p):\n    '''\n    Given a list of words and a word to look for, return the first word that does not\n    begin with 'n'.\n    '''\n    for word in words:\n        if not word.startswith('n'):\n            return word\n    return 'n'\ndef start_withn_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, 'p'\n    return word, 'n'\ndef end_withn_p(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word ends with 'p'.\n    '''\n    for word in words:\n        if word.endswith('p'):\n            return True\n    return False\ndef has_p_n(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word does not begin with 'p'.\n    '''\n    for word in words:\n        if not word.startswith('p'):\n            return False\n    return True\ndef find_p_n(words, p):\n    '''\n    Given a list of words and a word to look for, return the first word that does not\n    begin with 'n'.\n    '''\n    for word in words:\n        if not word.startswith('n'):\n            return word\n    return 'n'\ndef start_withp_n_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    a word to look for, return the first word that does not begin with 'n'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, 'p'\n    return word, 'n'\ndef end_withp_n_p(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word does not begin with 'n'.\n    '''\n    for word in words:\n        if not word.startswith('n'):\n            return False\n    return True\ndef has_p_n_p(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word does not begin with 'n' and also the first word does not start with 'p'.\n    '''\n    for word in words:\n        if not word.startswith('n'):\n            if not word.startswith('p'):\n                return False\n    return True\ndef find_p_n_p(words, p):\n    '''\n    Given a list of words and a word to look for, return the first word that does not\n    begin with 'n'.\n    '''\n    for word in words:\n        if not word.startswith('n'):\n            if not word.startswith('p'):\n                return word\n    return 'n'\ndef start_withn_p_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n' and\n    a word to look for, return the first word that does not begin with 'p'.\n    '''\n    for word in words:\n        if word.startswith('n'):\n            return word, 'n'\n    return word, 'p'\ndef end_withp_n_p(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word does not end with 'p'.\n    '''\n    for word in words:\n        if word.endswith('p'):\n            return True\n    return False\ndef has_p_n_p(words):\n    '''\n    Write a function that takes a list of words and returns a boolean that indicates whether\n    any word does not end with 'n'.\n    '''\n    for word in words:\n        if not word.endswith('n'):\n            return False\n    return True\ndef find_p_n_p(words, p):\n    '''\n    Given a list of words and a word to look for, return the first word that does not\n    begin with 'n' and also the first word does not end with 'p'.\n    '''\n    for word in words:\n        if not word.startswith('n'):\n            if not word.startswith('p'):\n            "
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if k == 0:\n        return a[index]\n    if index == n:\n        return a[n - 1]\n    if a[index] > a[index - k]:\n        a[index] = a[index - k] + max_sum_increasing_subseq(a, n - 1, index - 1, k)\n    if a[index] > a[index - 1]:\n        a[index] = a[index - 1] + max_sum_increasing_subseq(a, n - 1, index - 1, k - 1)\n    return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= index:\n        return 0\n    if index == n - 1:\n        return a[n-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index] < k:\n        return -1\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # TODO: complete this function\n    if index == n:\n        return k\n    if k == 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = [0 for _ in range(n+1)]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    j = index\n    while j < n:\n        max_sum = max(max_sum, a[j] + max_sum_increasing_subseq(a, n, j + 1, k) + a[j])\n        j = j + 1\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix = [0 for _ in range(n)]\n    prefix[index] = a[index]\n    for i in range(1, n):\n        prefix[i] = prefix[i-1] + a[i]\n    for i in range(index, n):\n        prefix[i] = max(prefix[i-k] + a[i], prefix[i-1])\n    return prefix[n-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # you may reuse the same array index without any special modifications\n    if n < 0 or index < 0:\n        return 0\n    if n == 0:\n        return a[index]\n    if index == 0:\n        return a[index] + k\n    # base case\n    if a[index] < a[index - 1]:\n        return a[index] + max_sum_increasing_subseq(a, n - 1, index - 1, k)\n    else:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    if k == n:\n        return sum(a)\n    res = -math.inf\n    for i in range(index, n+1):\n        if a[i] > a[index] and a[i] + max_sum_increasing_subseq(a, i+1, index, k) > res:\n            res = a[i] + max_sum_increasing_subseq(a, i+1, index, k)\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return sum(a[:index])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    n=len(tuplex)\n    d={}\n    for i in range(n):\n        d[tuplex[i]]=tuplex[i]\n    return d\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    s=[]\n    if m==n:\n        s.append(tuplex[m])\n        return s\n    \n    elif m>n:\n        for i in range(0,m-n+1):\n            s.append(tuplex[m+i])\n        for i in range(0,n):\n            s.append(tuplex[n+i])\n    \n    else:\n        for i in range(0,m-n+1):\n            s.append(tuplex[m+i])\n        for i in range(0,n):\n            s.append(tuplex[n+i])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m, n = m, n\n    for i in range(len(tuplex)):\n        if(tuplex[i][0]!=m and tuplex[i][0]!=n and tuplex[i][1]!=m and tuplex[i][1]!=n):\n            return tuplex\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c = []\n    for i in range(m):\n        c.append([])\n        for j in range(n):\n            c[i].append(tuplex[i][j])\n    return c\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    if m == 0:\n        return 0\n    elif m == 1:\n        return tuplex[n][0]\n    elif n == m:\n        return tuplex[0][0]\n    elif m > n:\n        return colon_tuplex(tuplex,m-1,n)\n    else:\n        return colon_tuplex(tuplex,m,n-1)\n    \n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(0,n):\n        tuplex[i][m] = int(tuplex[i][m])\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex=[]\n    for i in range(0,len(tuplex)):\n        if(i%2==0):\n            colon_tuplex.append(tuplex[i][n])\n        else:\n            colon_tuplex.append(tuplex[i][0])\n    return colon_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    import time\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    if len(tuplex)>=n:\n        for i in range(n):\n            if tuplex[i]=='*':\n                colon.append(tuplex[i])\n            elif tuplex[i]=='#':\n                colon.append('*')\n            elif tuplex[i]=='_':\n                colon.append('_')\n            else:\n                colon.append(tuplex[i])\n    else:\n        for i in range(n):\n            colon.append(tuplex[i])\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    d = {}\n    # do not change the order of the tuples\n    for i in range(0,len(tuplex)):\n        t = tuplex[i]\n        s = '{'\n        for j in range(0,len(t)):\n            if j == 0:\n                s = s + t[j]\n            elif j == len(t)-1:\n                s = s + t[j] + ', '\n            else:\n                s = s + t[j] + ', '\n        s = s + '}'\n        d[i] = s\n    return d\n    \ndef check_split(string):\n    '''\n    Check if a string is in a split.\n    '''\n    # no split found\n    if string[0]!='':\n        return False\n    # string split\n    lst = list(string)\n    # begin a new string\n    new = ''\n    # check for each character\n    for i in range(1,len(lst)):\n        # if character is not'',\n        #  append character\n        if lst[i]!='':\n            new += lst[i]\n    return new == string\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factors_list = []\n    for i in range(len(nums1)):\n        if N % nums1[i] == 0:\n            factors_list.append(nums1[i])\n            N = N // nums1[i]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #initialize an empty list\n    products = []\n    #for loop through each of the lists\n    for i in range(N):\n        #for loop through each number in the second list\n        for j in range(N):\n            #if the product is less than the largest number in first list\n            if (j+1) < i:\n                #append the product of the two lists in a new list\n                products.append(nums1[i] * nums2[j] )\n    return max(products)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    x=0\n    y=0\n    x_max=0\n    y_max=0\n    max_product=0\n    for i in range(0,len(nums1)):\n        for j in range(0,len(nums2)):\n            if x==i and y==j:\n                continue\n            if x>N or y>N:\n                break\n            if nums1[i]*nums2[j]>max_product:\n                max_product=nums1[i]*nums2[j]\n                x=i\n                y=j\n            if x_max<nums1[i]*nums2[j]:\n                x_max=nums1[i]*nums2[j]\n            if y_max<nums1[j]*nums2[i]:\n                y_max=nums1[j]*nums2[i]\n    return max_product,x_max,y_max\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    x = sorted(nums1,reverse=True)\n    y = sorted(nums2,reverse=True)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # make a copy of both lists so we don't have to worry about the order of the lists\n    nums1_copy = copy.deepcopy(nums1)\n    nums2_copy = copy.deepcopy(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factors = []\n    for i in range(N):\n        factors.append([])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def helper(num1, num2, n, m):\n        if n == 0:\n            return 0\n        if m == 0:\n            return 1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # get the indices and values of nums1 and nums2\n    indices1, values1 = find_indices(nums1, N)\n    indices2, values2 = find_indices(nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Write your code here\n    if len(nums1) < N:\n        nums1, nums2 = nums2, nums1\n    nums1_sum = 0\n    nums2_sum = 0\n    nums1_max = []\n    nums2_max = []\n    for i in range(len(nums1)):\n        nums1_sum += nums1[i]\n        nums2_sum += nums2[i]\n        if nums1_sum > nums2_sum:\n            nums1_max.append(nums1[i])\n            nums1_sum -= nums1[i]\n        elif nums1_sum < nums2_sum:\n            nums2_max.append(nums2[i])\n            nums2_sum -= nums2[i]\n    if nums1_sum == 0 and nums2_sum == 0:\n        return nums2\n    if nums1_max == nums2_max:\n        return nums1_max\n    else:\n        return nums2_max\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not N:\n        return [0, 0]\n    result = [0] * N\n    max_product = 0\n    for i in range(N):\n        for j in range(N):\n            result[i] += nums1[i] * nums2[j]\n            if nums1[i] * nums2[j] > max_product:\n                max_product = nums1[i] * nums2[j]\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    if a<b:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n    \ndef sum(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    if(a==b):\n        return a\n    else:\n        return (a+b)\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    if(a==b):\n        return a\n    else:\n        return (a+b)/2\n    \ndef check(a,b,c):\n    '''\n    Write a python function to check if an input is a valid number.\n    '''\n    if(a<b or b<c or a>b or b>c):\n        return False\n    else:\n        return True\n    \ndef eval():\n    '''\n    Write a python function to evaluate an expression in our language.\n    '''\n    a=int(input(\"Enter the first number: \"))\n    b=int(input(\"Enter the second number: \"))\n    if(check(a,b,0)):\n        print(\"Is a number\")\n    else:\n        print(\"Is not a number\")\n    \n    c=int(input(\"Enter the first number: \"))\n    d=int(input(\"Enter the second number: \"))\n    if(check(c,d,0)):\n        print(\"Is a number\")\n    else:\n        print(\"Is not a number\")\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    if (a==b):\n        return (a+b)/2\n    else:\n        return (a+b)/2\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        maximum=a\n        return maximum\n    elif a==b:\n        maximum=a\n        return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef sum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a + b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        a,b=b,a\n    if(b==0):\n        return a\n    return b"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # define the empty string\n    empty_str = ''\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_list = [char for char in str1]\n    return tuple(char_list)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1 = []\n    l = len(str1)\n    for i in range(l):\n        tup1.append(str1[i])\n    return tuple(tup1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    i = 0\n    t = []\n    for x in str1:\n        if i == 0:\n            t.append(x)\n        if i == 1:\n            t.append(x)\n        else:\n            t.append(str(i))\n        i += 1\n    return tuple(t)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = []\n    for char in str1:\n        if char!='':\n            result.append(char)\n        else:\n            break\n    return tuple(result)\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(\"'\",\"\").replace(\"-\",\"\")\n    a = str1.split(\" \")\n    t = tuple(a)\n    return t\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & ~1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= ~(1 << n.bit_length())\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 1 == 1:\n        n = n | 1\n    else:\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(1 << n.bit_length())\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 1 << n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n >= 0, \"the value is not between 0 and 2^32 - 1\"\n    assert n <= 2**32 - 1, \"the value is not an integer between 0 and 2^32 - 1\"\n    assert n!= 0, \"the value is not set\"\n    assert n < (2**32 - 1), \"the value is already set\"\n    \n    n = n | 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = int(n)\n    x = n & 0x1\n    if x == 0:\n        print(\"1\")\n        return\n    else:\n        print(\"0\")\n        return\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for _ in range(n): \n        # find the number of bits\n        n_bits = n & (n-1) \n        # set the left most bit to one\n        n &= (1 << n_bits) - 1 \n        # check if the bit was unset\n        if n == 0:\n            return n_bits \n    # no more bits to write\n    return 0 \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if(n & 1):\n        n |= 0x1\n    else:\n        n |= 0x0\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Set a default value if no value is set. \n    if not n.bit_length():\n        n = 1\n    else:\n        n = 1 << n.bit_length()\n    # Calculate the bit length of the integer.\n    length = n.bit_length()\n    # If the bit length is zero, just return.\n    if length == 0:\n        return n\n    # If the bit length is not zero, set the bit.\n    else:\n        n = n & (n - 1)\n        return n\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * (r ** 2)\n    v = (4 * math.pi * (r ** 3)) / 3\n    return area * v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h/2*math.pi\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi*(r**2)*h\n    return vol\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    area = 2*(math.pi*r*h)\n    return area\ndef length_cone(r,h):\n    '''\n    Write a function to find the length of a cone.\n    '''\n    l = 2*math.pi*r*h\n    return l\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return 4 * pi * r * h / 3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3)*(math.pi*(r**3))*(h**3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r**3)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*math.pow(r,2)*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    a = r * h\n    b = math.sqrt(a*a - r*r)\n    return b\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return h*math.pi*r**2*(1-math.cos(math.radians(45)))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round((4*math.pi*r*h)**3,2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    s = [] \n    for i in range(2,n+1): \n        if n % i == 0: \n            s.append(i) \n    if s[0] < s[1]: \n        return s[0] \n    else: \n        return s[1] \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<=1:\n        return n\n    else:\n        return highest_Power_of_2(n//2)+1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        raise ValueError(\"invalid input\")\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n * highest_Power_of_2(n - 1)) / math.pow(2, (n - 1))\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    l = n\n    while l < n:\n        l = l*2\n    return l\ndef modular_inverse(a, n):\n    '''\n    Find the modular inverse of a modulo n.\n    '''\n    assert 0<= a < n \n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    else:\n        u = a // n\n        return modular_inverse(a - (u*n), n)\ndef is_prime(n):\n    '''\n    Checks whether a given integer is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef main():\n    '''\n    Given an integer n, this function calculates it's modulo power.\n    '''\n    print(modular_inverse(highest_Power_of_2(int(input())), 10**9))\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return highest_Power_of_2(n-1)**2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    if n % 2 == 0:\n        return highest_Power_of_2(n//2)\n    else:\n        return highest_Power_of_2(n*3)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0\n    power_of_2 = 1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        k = n % 2\n        if k == 0:\n            return highest_Power_of_2(n//2)\n        else:\n            return highest_Power_of_2(n//2) + k\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n<=0):\n        return \"Please enter a positive integer\"\n    else:\n        if(n%2==0):\n            return n//2\n        else:\n            return (n//2)**2\n    \n    \n    "
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return n*highest_Power_of_2(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 3\n    elif n == 3: return 5\n    else:\n        return (find_lucas(n//3) + 3 * find_lucas(n//2))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(n+1, 1, -1):\n        if i == 1:\n            return i\n        if i % 2 == 0:\n            return i\n        if i % 2 == 1:\n            return i*i + i\n    \ndef lucas_number(n):\n    '''\n    Write a function to determine then'th lucas number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 0\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Python \"traverses\" a tree, starting from the root.\n    # If we know the starting position, we can set the root of the tree\n    # to be the position we just made.\n    def find_lucas(root, n):\n        if root is None:\n            return n\n        else:\n            if root.left is not None:\n                left = find_lucas(root.left, n)\n            else:\n                left = n\n            if root.right is not None:\n                right = find_lucas(root.right, n)\n            else:\n                right = n\n            return left + right\n    return find_lucas(root, n)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = n * (n+1) // 2\n    while x > 0:\n        if x % 2 == 1:\n            return x\n        x //= 2\n    return None\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #n = int(n)\n    #if n == 1:\n    #    print(1)\n    #    return\n    #if n == 0:\n    #    print(0)\n    #    return\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0: \n        return 0 \n    if n==1: \n        return 1 \n    return (find_lucas(n-1) + find_lucas(n-2)) \nprint(find_lucas(7))\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        if isinstance(item, str):\n            item = list_[item]\n        if isinstance(item, list):\n            add_string(item, string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string not in list_:\n        list_.append(string)\n        return list_\n    else:\n        list_ = list_[0:list_.index(string)]\n        list_ += add_string(list_[list_.index(string):], string)\n        return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_.append(element)\n    # write\n    print(' '.join(list_))\n    # read\n    #print(list_)\n    print(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for element in list_:\n        element = element.replace('{', '{{').replace('}', '}}')\n        element = element.replace('{', '{{').replace('}', '}}')\n        element = element.replace('\"', '{{').replace('\"', '}}')\n        element = element.replace(\"'\", '{{').replace(\"'\", '}}')\n        element = element.replace(\"'\", '{{').replace(\"'\", '}}')\n        element = element.replace(\",\", \" {{\").replace(\",\", \"}}\")\n        element = element.replace(\"=\", \" {{\").replace(\"=\", \"}}\")\n        element = element.replace(\"'\", \" {{\").replace(\"'\", \"}}\")\n        element = element.replace(\"\\\"\", \" {{\").replace(\"\\\"\", \"}}\")\n        element = element.replace(\"'\", \" {{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\\'', \"{{\").replace('\\'', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\",\", \"{{\").replace(\",\", \"}}\")\n        element = element.replace(\"=\", \"{{\").replace(\"=\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"\\\"\", \"{{\").replace(\"\\\"\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\",\", \"{{\").replace(\",\", \"}}\")\n        element = element.replace(\"=\", \"{{\").replace(\"=\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"\\\"\", \"{{\").replace(\"\\\"\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"\\\"\", \"{{\").replace(\"\\\"\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\\'', \"{{\").replace('\\'', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"\\\"\", \"{{\").replace(\"\\\"\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace(\"'\", \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace('\"', \"{{\").replace('\"', \"}}\")\n        element = element.replace(\"'\", \"{{\").replace('\"', \"}}\""
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.replace(string, str(i+1))\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    output = ''\n    for char in list_:\n        output += char\n        if char == string:\n            output += '\\n'\n    return output\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(string) == 1:\n        list_.append(string)\n    else:\n        first_part = string[0]\n        if first_part == '{':\n            substring = string[1]\n            if substring == '}':\n                pass\n            else:\n                list_.append(substring)\n        else:\n            list_.append(list_)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for el in list_:\n        el = el.strip()\n        if el!= '':\n            result = str(string) +'' + el\n            list_.append(result)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Your code here\n    string_list = string.split(',')\n    for i in range(len(string_list)):\n        list_[i] = list_[i].strip()\n        list_[i] = list_[i].split(' ')\n        list_[i] = [float(x) for x in list_[i]]\n    return list_\n    \ndef main():\n    '''\n    Write your code here\n    '''\n    # read in the data\n    data = []\n    with open('data_solvers/data.txt', 'r') as f:\n        for line in f:\n            line = line.strip()\n            line = line.split(' ')\n            data.append([float(x) for x in line])\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {\n        'first': convert_list_dictionary(l1, l2, l3),\n        '2nd': convert_list_dictionary(l1, l3, l2),\n        '3rd': convert_list_dictionary(l2, l3, l1),\n    }\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = str(l1)\n    l2 = str(l2)\n    l3 = str(l3)\n    l1 = eval(l1)\n    l2 = eval(l2)\n    l3 = eval(l3)\n    l1_dict = dict(l1)\n    l2_dict = dict(l2)\n    l3_dict = dict(l3)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = dict()\n    i = 0\n    while i < len(l1):\n        j = 0\n        while j < len(l2):\n            result_dict[l1[i]] = dict()\n            if l3[i][j] == '1':\n                result_dict[l1[i]][l2[j]] = '1'\n            elif l3[i][j] == '0':\n                result_dict[l1[i]][l2[j]] = '0'\n            j += 1\n        i += 1\n    return result_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for i in l1:\n        if l2[0] in i:\n            if l2[1] in i:\n                if l2[2] in i:\n                    if l2[3] in i:\n                        if l2[4] in i:\n                            if l2[5] in i:\n                                dict1[l1[0]] = {}\n                                dict1[l1[0]]['name'] = l2[0]\n                                dict1[l1[0]]['country'] = l2[1]\n                                dict1[l1[0]]['state'] = l2[2]\n                                dict1[l1[0]]['town'] = l2[3]\n                                dict1[l1[0]]['zip'] = l2[4]\n                                dict1[l1[0]]['email'] = l2[5]\n                                if l3[0] in i:\n                                    dict1[l1[0]]['phone'] = l3[0]\n                                break\n                else:\n                    dict1[l1[0]] = {}\n                    dict1[l1[0]]['name'] = l2[0]\n                    dict1[l1[0]]['country'] = l2[1]\n                    dict1[l1[0]]['state'] = l2[2]\n                    dict1[l1[0]]['town'] = l2[3]\n                    dict1[l1[0]]['zip'] = l2[4]\n                    dict1[l1[0]]['email'] = l2[5]\n                    if l3[0] in i:\n                        dict1[l1[0]]['phone'] = l3[0]\n                    break\n            else:\n                dict1[l1[0]] = {}\n                dict1[l1[0]]['name'] = l2[0]\n                dict1[l1[0]]['country'] = l2[1]\n                dict1[l1[0]]['state'] = l2[2]\n                dict1[l1[0]]['town'] = l2[3]\n                dict1[l1[0]]['zip'] = l2[4]\n                dict1[l1[0]]['email'] = l2[5]\n                if l3[0] in i:\n                    dict1[l1[0]]['phone'] = l3[0]\n                break\n    return dict1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        for j in l2:\n            d1[i] = j\n    for i in l3:\n        d1[i] = l1\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out = {}\n    for i in l1:\n        if isinstance(i, (str, unicode)):\n            i = [i]\n        elif not isinstance(i, list):\n            i = [i]\n        for j in i:\n            if isinstance(j, (str, unicode)):\n                j = [j]\n            elif not isinstance(j, list):\n                j = [j]\n            for k in j:\n                if not out.get(k):\n                    out[k] = {}\n                if not out[k].get(i.index(j)):\n                    out[k][i.index(j)] = []\n                out[k][i.index(j)].append(k)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for key, value in zip(l1, l2):\n        d[key] = value\n    for key, value in zip(l3, l2):\n        d[key] = value\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    d = {}\n    # Iterate over each item in the list.\n    # If the item is a list, convert each item in the list to a dictionary.\n    for item in l1:\n        # If the item is not a list, add the item to the dictionary and continue.\n        if type(item)!= list:\n            d[item] = 1\n        # If the item is a list, convert the items in the list to dictionaries.\n        else:\n            for i in item:\n                d[i] = 1\n    # Iterate over each item in the list.\n    # If the item is a list, convert the item to a dictionary.\n    for item in l2:\n        # If the item is not a list, add the item to the dictionary and continue.\n        if type(item)!= list:\n            d[item] = 1\n        # If the item is a list, convert the items in the list to dictionaries.\n        else:\n            for i in item:\n                d[i] = 1\n    # Iterate over each item in the list.\n    # If the item is a list, convert the item to a dictionary.\n    for item in l3:\n        # If the item is not a list, add the item to the dictionary and continue.\n        if type(item)!= list:\n            d[item] = 1\n        # If the item is a list, convert the items in the list to dictionaries.\n        else:\n            for i in item:\n                d[i] = 1\n    # Return the dictionary\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if not l1 or not l2 or not l3:\n        return None\n    r = {\n    }\n    if len(l1)!= len(l2):\n        print(\"Error: length of lists should be equal.\")\n        return None\n    for i in range(len(l1)):\n        r[l1[i]] = l2[i]\n    return r\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict()\n    d2 = dict()\n    d3 = dict()\n    l4 = list()\n    for i in l1:\n        d1[i] = dict()\n        d2[i] = dict()\n        for j in l2:\n            d2[i][j] = dict()\n            d3[i][j] = dict()\n    for i in l2:\n        l4.append(i)\n    for i in l3:\n        d1[i] = l4\n    return d1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f_n_d_n = [ (f(n/2) + f(n/3) + f(n/4) + f(n/5)) for n in range(1, n+1)]\n    max_f = f_n_d_n[0]\n    for i in range(1, len(f_n_d_n)):\n        if f_n_d_n[i] > max_f:\n            max_f = f_n_d_n[i]\n    return max_f\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return n\n    elif n==2:\n        return (n/2)\n    else:\n        if n%2:\n            return (max(f(n/2), f(n/3), f(n/4), f(n/5)))\n        else:\n            return (n/2)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #getting the denominator\n    denominator = 2*n\n    #handling the cases\n    if denominator < 10:\n        return float('inf')\n    if denominator == 10:\n        return float('inf')\n    if denominator % 10 == 1:\n        return 0\n    else:\n        return float('inf')\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    num_of_sums = 0\n    max_sum = 0\n    \n    for n in range(1,n):\n        num_of_sums += 1\n        max_sum += (f(n) + f(n/2) + f(n/3) + f(n/4) + f(n/5))\n        \n    return max_sum / num_of_sums\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (n + 1)/3 + (n + 2)/3 + (n + 3)/3 + (n + 4)/3 + (n + 5)/3\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n*2\n    else:\n        return n*(n*2)+max(n*3,n*4,n*5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = 1\n    s = 0\n    while n!= 0:\n        f = n % 2\n        if n % 3 == 0 and n % 4 == 0 and n % 5 == 0:\n            s = s + (f + 1) * (f + 2)\n            n = n // 2\n        elif n % 3 == 0:\n            s = s + (f + 1) * (f + 2)\n            n = n // 3\n        elif n % 4 == 0:\n            s = s + (f + 1) * (f + 3)\n            n = n // 4\n        elif n % 5 == 0:\n            s = s + (f + 1) * (f + 4)\n            n = n // 5\n    return s\ndef get_fibonacci_series (max):\n    '''\n    Return the first n fibonacci numbers of max.\n    '''\n    n = 0\n    fibonacci_list = [0, 1]\n    while fibonacci_list[-1] < max:\n        n += 1\n        fibonacci_list.append(n)\n    return fibonacci_list\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    ans = f(n)\n    if ans == 0:\n        ans = n\n    if ans == 1:\n        ans = n**2\n    if ans == 2:\n        ans = n**3\n    if ans == 3:\n        ans = n**4\n    if ans == 4:\n        ans = n**5\n    if ans == 5:\n        ans = n**6\n    return ans\ndef f (n):\n    '''\n    Function that takes the given number and returns the maximum sum possible.\n    '''\n    return get_max_sum (n)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list.sort()\n    return len(input_list[-1])\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return 0\n    else:\n        return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list)\n    for i in range(len(input_list)):\n        if len(str(input_list[i])) > max_length:\n            max_length = len(str(input_list[i]))\n            max_length_list = input_list[i]\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError\n    max_len = -1\n    for element in input_list:\n        if len(element) > max_len:\n            max_len = len(element)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return sorted(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum_length = 0\n    for i in input_list:\n        if len(i)>maximum_length:\n            maximum_length = len(i)\n    return maximum_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = input_list[0]\n    for value in input_list:\n        if value > max:\n            max = value\n    return max\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for value in test_tup:\n        if value in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for elem in test_tup:\n        if elem in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a new tuple to make sure only unique elements are in the list\n    # Loop through the new tuple and remove duplicate elements\n    # If there are duplicate elements, just print the number of duplicates\n    t = []\n    for i in test_tup:\n        if i not in t:\n            t.append(i)\n        else:\n            print(i, end=\",\")\n    print()\n    print(\"{} duplicate elements\".format(len(t)-t.count(i)))\n    if len(t)==len(set(t)):\n        print(\"All elements are unique\")\n    else:\n        print(\"Some elements are duplicate\")\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    flag = False\n    \n    # check for duplicates\n    if len(set(test_tup)) == len(test_tup):\n        flag = True\n    return flag\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup_without_duplicates = []\n    for element in test_tup:\n        if element not in tup_without_duplicates:\n            tup_without_duplicates.append(element)\n    return len(tup_without_duplicates) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup:\n        for i in test_tup:\n            if test_tup.count(i)>1:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    from collections import Counter\n    print('check_distinct')\n    if type(test_tup)!= tuple:\n        raise TypeError('The tuple is not a tuple')\n    print(test_tup)\n    #if type(test_tup) == tuple:\n    print(Counter(test_tup))\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup_new = []\n    for x in test_tup:\n        if x not in test_tup_new:\n            test_tup_new.append(x)\n    return test_tup_new\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    first_non_repeating_index = \"\"\n    for key, value in char_count.items():\n        if value == 1:\n            first_non_repeating_index = key\n            break\n    return first_non_repeating_index\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count_dic = {} # initializing an empty dictionary\n    for char in str1: # iterating through a given string\n        if char in count_dic: # checking if char in dict is present\n            count_dic[char] += 1 # incrementing the char count\n        else: # if not\n            count_dic[char] = 1 # incrementing char count\n    # iterating through the dict.\n    for i, val in enumerate(count_dic.values()): # iterating through the values\n        if val == 1: # if the char count is 1, then return the first character\n            return char # return the char\n    else: # return none if the char count is 0\n        return None # return none if the char count is 0\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1.find(str1.find(str1[0])+1) + 1 #we know the first character is 0th index\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # define the function\n    def function_to_find_the_first_non_repeating_character(str1):\n        # first create a hashmap\n        # as hashmap stores the frequency of the character in a given string\n        # for example, if an character occurs at string 1, it has the frequency of 1\n        # then it's the hashmap value\n        # key = current character\n        # value = frequency of that character\n        # store the hashmap key and value in hashmap\n        hashmap = {}\n        for character in str1:\n            if character not in hashmap:\n                hashmap[character] = 1\n            else:\n                hashmap[character] += 1\n        # find the first non-repeating character\n        # find the first non-repeating character in hashmap\n        for i in range(len(hashmap)):\n            if hashmap[i] == 1:\n                return i\n        # return none\n    return function_to_find_the_first_non_repeating_character(str1)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # Initializing an empty array to store the repeated characters\n    repeated_chars = []\n    \n    # Iterating through the string\n    for i in str1:\n        # If the string contains only one character\n        if str1.count(i) == 1:\n            repeated_chars.append(i)\n    \n    # Check if there is only one repeated character\n    if len(repeated_chars) == 1:\n        return repeated_chars[0]\n    else:\n        # If there are more than one character with a repeated character\n        # Use the first non-repeating character as an index\n        # and check if the string doesn't contain another character with the same repeated index.\n        # If so, return the first non-repeating character\n        return repeated_chars[str1.index(repeated_chars[0])]\n    "
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # simple approach\n    return str1[0] if str1.count(str1[0]) == 1 else None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dic = {}\n    for i in str1:\n        if i not in dic:\n            dic[i] = 0\n        else:\n            dic[i] = dic[i] + 1\n    first_non = ''\n    for i in dic:\n        if dic[i] == 1:\n            first_non = i\n            break\n    return first_non\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    from collections import Counter\n    cnt_a = Counter(str1)\n    max_value = max(cnt_a.values())\n    for k,v in cnt_a.items():\n        if v == max_value:\n            return k\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Loop through characters in the string and count how many times they are found.\n    for i in range(len(str1)):\n        if str1[i]==str1[i-1]:\n            count=count+1\n    #If count==0 then return the character. \n    if count==0:\n        return str1[i]\n    else:\n        return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    check = re.search( regex, string )\n    if check:\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if len(string) == 0:\n        return \" \"\n    if string[0] == string[-1]:\n        return \" \"\n    return re.findall(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # test if string starts with a character, not with other characters\n    if string[0] == 'a':\n        if string[-1]!= 'a':\n            return False\n        else:\n            return True\n    else:\n        if string[-1]!= 'a':\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string_re = re.findall(regex, string)\n    if string_re!= []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return False\n    elif string[0]!= string[-1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^([a-z]).*\\1$'\n    m = re.search(regex, string)\n    if m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('a'):\n        return string.endswith('z')\n    else:\n        return string.startswith('a')\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if isinstance(string, str):\n        for character in string:\n            if (not re.search(regex, character)):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.lower()\n    regrex = re.compile(r'^([a-z])([a-z])([a-z])([a-z])$')\n    regrex1 = re.compile(r'^([a-z])([a-z])([a-z])([a-z])([a-z])$')\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n    \ndef get_first_and_last_char(string): \n    '''\n    Write a function to get the first and last character of a string.\n    '''\n    return re.match(regex,string)[0],re.match(regex,string)[1]\n    \ndef get_text_from_line(line): \n    '''\n    Write a function to get all the words in the given line.\n    '''\n    return re.findall(r'\\w+',line)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # your code here\n    if (len(a) == 3) and (len(b) == 3) and (len(c) == 3):\n        # a,b,c\n        # find median of all three numbers\n        return (a+b+c)/3\n    else:\n        return None\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) >= 2 and len(b) >= 2 and len(c) >= 2:\n        if a[0] < a[1] < a[2] < b[0] < b[1] < b[2]:\n            if a[0] > b[0] and a[0] > c[0] and a[1] > c[1] and a[1] > c[2]:\n                return a[0]\n            elif b[0] > a[0] and b[0] > c[0] and b[1] > c[1] and b[1] > c[2]:\n                return b[0]\n            elif c[0] > a[0] and c[0] > b[0] and c[1] > a[1] and c[1] > a[2]:\n                return c[0]\n            else:\n                return c[1]\n        else:\n            return c[2]\n    else:\n        return c[2]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) < 3:\n        return None\n    sorted_a = sorted(a)\n    if len(sorted_a) % 2 == 0:\n        median_a = (sorted_a[len(sorted_a)//2-1] + sorted_a[len(sorted_a)//2])/2\n    else:\n        median_a = sorted_a[len(sorted_a)//2]\n    sorted_b = sorted(b)\n    if len(sorted_b) % 2 == 0:\n        median_b = (sorted_b[len(sorted_b)//2-1] + sorted_b[len(sorted_b)//2])/2\n    else:\n        median_b = sorted_b[len(sorted_b)//2]\n    sorted_c = sorted(c)\n    if len(sorted_c) % 2 == 0:\n        median_c = (sorted_c[len(sorted_c)//2-1] + sorted_c[len(sorted_c)//2])/2\n    else:\n        median_c = sorted_c[len(sorted_c)//2]\n    \n    if median_a < median_b:\n        return median_a\n    elif median_a > median_b:\n        return median_b\n    else:\n        return median_c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # get the three numbers\n    numbers = a,b,c\n    # find the median of numbers\n    return (numbers[0] + numbers[1])/2\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a > b and a > c):\n        return a\n    elif (b > a and b > c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    c = sorted(a,reverse=True)\n    if c[len(c)//2]<=c[len(c)//2+1]:\n        x = c[len(c)//2]\n    else:\n        x = c[len(c)//2+1]\n    if b<x<=c[len(c)//2]:\n        y = b\n    else:\n        y = c[len(c)//2]\n    median = (x+y)/2\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median_val = (a+b+c)//3\n    return median_val\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    assert len(a) < 3, 'Invalid Input'\n    assert len(b) < 3, 'Invalid Input'\n    assert len(c) < 3, 'Invalid Input'\n    \n    assert len(a)==3, 'Invalid Input'\n    assert len(b)==3, 'Invalid Input'\n    assert len(c)==3, 'Invalid Input'\n    \n    max_val=max(a)\n    min_val=min(b)\n    median_val=0\n    \n    if (max_val+min_val)%2==0:\n        median_val= (max_val+min_val)//2\n    else:\n        median_val= (max_val+min_val)//2+1\n    \n    return median_val\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0:\n        return None\n    if len(b) == 0:\n        return None\n    if len(c) == 0:\n        return None\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += num\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += num\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for number in nums:\n        digits.append(str(number))\n    \n    sum = 0\n    for digit in digits:\n        sum += int(digit)\n    \n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def new(nums):\n        return sum([int(d) for d in str(nums)])\n    return sum(map(new, nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for x in nums:\n        s += x\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    sum_n = 0\n    for i in nums:\n        sum_n = sum_n + int(i)\n    return sum_n\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (test_tup1[0], test_tup1[1])\n    test_tup2 = (test_tup2[0], test_tup2[1])\n    \n    return(sorted(set(test_tup1) ^ set(test_tup2)))\n    \n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    tup = []\n    tup.append(test_tup1[0] ^ test_tup1[1])\n    tup.append(test_tup1[0] ^ test_tup2[1])\n    tup.append(test_tup1[1] ^ test_tup2[0])\n    tup.append(test_tup2[1] ^ test_tup1[0])\n    return tup\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if test_tup1 == () and test_tup2 == () :\n        return ()\n    else:\n        return tuple((bitwise_xor(t1,t2) for t1,t2 in zip(test_tup1,test_tup2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Make a copy of the list of tuples\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    # Iterate through each number in the two lists and add the xor number to the tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the new list of tuples\n    return tuple(test_tup1)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # create an empty 2d array and populate it with zeros\n    arr = np.zeros((len(test_tup1), len(test_tup2)), dtype=int)\n    # iterate over the rows\n    for row in range(len(test_tup1)):\n        # iterate over the columns\n        for col in range(len(test_tup2)):\n            # set the (row, col) value to the 2nd argument of the operand tuple\n            arr[row, col] = (test_tup1[row] ^ test_tup2[col])\n    return arr\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check the dimensions of both tuples.\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both test tuples must have the same number of elements.\")\n        return\n    # If the lengths are not the same, then use the length of the smaller tuples.\n    if len(test_tup1) < len(test_tup2):\n        smaller_tup = test_tup2\n    else:\n        smaller_tup = test_tup1\n    # Check whether the first tuple has the same number of elements as the second tuple.\n    if len(test_tup1)!= len(smaller_tup):\n        print(\"Error: The two tuples must have the same number of elements.\")\n        return\n    # Initialize the result variable.\n    result = []\n    # Initialize the length of the smaller tuple.\n    length_of_smaller_tup = len(smaller_tup)\n    # Loop through the smaller tuple.\n    for i in range(length_of_smaller_tup):\n        # Initialize the result variable.\n        result_element = 0\n        # Initialize the remainder of the second tuple.\n        remainder = 0\n        # Loop through the corresponding tuples.\n        for j in range(len(test_tup1)):\n            # If the corresponding element in the corresponding tuple is different, then update the result variable.\n            if test_tup1[j]!= smaller_tup[i]:\n                result_element += test_tup1[j]\n            # If the corresponding element is zero, then add the remainder of the corresponding element to the result variable.\n            if test_tup1[j] == 0:\n                remainder += test_tup1[j]\n        # If the remainder is equal to the remainder of the second tuple, then add it to the result variable.\n        if remainder == 0:\n            result_element += remainder\n            # If the remainder is not zero, then add it to the remainder of the second tuple.\n            if remainder!= 0:\n                result.append(remainder)\n        # If the remainder is zero, then remove it from the second tuple.\n        else:\n            result.append(result_element)\n    # Return the result.\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_res = [value for value in test_tup1 for index, value in enumerate(test_tup2) if value!= test_tup1[index]]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Cannot perform xor on tuples of different size\")\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #print(\"test\", test_tup1)\n    #print(\"test2\", test_tup2)\n    #print(\"test 3\", test_tup1[0] + test_tup2[0])\n    #print(\"test 4\", test_tup1[1] + test_tup2[1])\n    #print(\"test 5\", test_tup1[2] + test_tup2[2])\n    #print(\"test 6\", test_tup1[3] + test_tup2[3])\n    #print(\"test 7\", test_tup1[4] + test_tup2[4])\n    #print(\"test 8\", test_tup1[5] + test_tup2[5])\n    #print(\"test 9\", test_tup1[6] + test_tup2[6])\n    #print(\"test 10\", test_tup1[7] + test_tup2[7])\n    #print(\"test 11\", test_tup1[8] + test_tup2[8])\n    #print(\"test 12\", test_tup1[9] + test_tup2[9])\n    #print(\"test 13\", test_tup1[10] + test_tup2[10])\n    #print(\"test 14\", test_tup1[11] + test_tup2[11])\n    #print(\"test 15\", test_tup1[12] + test_tup2[12])\n    #print(\"test 16\", test_tup1[13] + test_tup2[13])\n    #print(\"test 17\", test_tup1[14] + test_tup2[14])\n    #print(\"test 18\", test_tup1[15] + test_tup2[15])\n    #print(\"test 19\", test_tup1[16] + test_tup2[16])\n    #print(\"test 20\", test_tup1[17] + test_tup2[17])\n    #print(\"test 21\", test_tup1[18] + test_tup2[18])\n    #print(\"test 22\", test_tup1[19] + test_tup2[19])\n    #print(\"test 23\", test_tup1[20] + test_tup2[20])\n    #print(\"test 24\", test_tup1[21] + test_tup2[21])\n    #print(\"test 25\", test_tup1[22] + test_tup2[22])\n    #print(\"test 26\", test_tup1[23] + test_tup2[23])\n    #print(\"test 27\", test_tup1[24] + test_tup2[24])\n    #print(\"test 28\", test_tup1[25] + test_tup2[25])\n    #print(\"test 29\", test_tup1[26] + test_tup2[26])\n    #print(\"test 30\", test_tup1[27] + test_tup2[27])\n    #print(\"test 31\", test_tup1[28] + test_tup2[28])\n    #print(\"test 32\", test_tup1[29] + test_tup2[29])\n    #print(\"test 33\", test_tup1[30] + test_tup2[30])\n    #print(\"test 34\", test_tup1[31] + test_tup2[31])\n    #print(\"test 35\", test_tup1[32] + test_tup2[32])\n    #print(\"test 36\", test_tup1[33] + test_tup2[33])\n    #print(\"test 37\", test_tup1[34] + test_tup2[34])\n    #print(\"test 38\", test_tup1[35] + test_tup2[35])\n    #print(\"test 39\", test_tup1[36] + test_tup2[36])\n    #print(\"test 40\", test_tup1[37] + test_tup2[37])\n    #print(\"test 41\", test_tup1[38] + test_tup2[38])\n    #print(\"test 42\", test_tup1[39] + test_tup2[39])\n    #print(\"test 43\", test_tup1[40] + test_tup2[40])\n    #print(\"test 44\", test_tup1[41] + test_tup2[41])\n    #print(\"test 45\", test_tup1[42] + test_tup2[42])\n    #print(\"test 46\", test_tup1[43] + test_tup2[43])\n    #print(\"test 47\", test_tup1[44] + test_tup2[44])\n    #print(\"test 48\", test_tup1[45] + test_tup2[45])\n    #print(\"test 49\", test_tup1[46] + test_tup2[46])\n    #print(\"test 50\", test_tup1[47] + test_tup2[47])\n    #print(\"test 51\", test_tup1[48] + test_tup2[48])\n    #print(\"test 52\", test_tup1[49] + test_tup2[49])\n    #print(\"test 53\", test_tup1[50] + test_tup2[50])\n    #print(\"test 54\", test_tup1[51] + test_tup2[51])\n    #print(\"test 55\", test_tup1[52] + test_tup2[52])\n    #print(\"test 56\", test_tup1[53] + test_tup2[53])\n    #print(\"test 57\", test_tup1[54] + test_tup2[54])\n    #print(\"test 58\", test_tup1[55] + test_tup2[55])\n    #print(\"test 59\", test_tup1[56] + test_tup2[56])\n    #print(\"test 60\", test_tup1[57] + test_tup2[57])\n    #print(\"test 61\", test_tup1[58] + test_tup2[58])\n    #print(\"test 62\", test_tup1[59] + test_tup2[59])\n    #print(\"test 63\", test_tup1[60] + test_tup2[60])\n    #print(\"test 64\", test_tup1[61] + test_tup2[61])\n    #print(\"test 65\", test_tup1[62] + test_tup2[62])\n    #print(\"test 66\", test_tup1[63] + test_tup2[63])\n    #print(\"test 67\", test_tup1[64] + test_tup2[64])\n    #print(\"test 68\", test_tup1[65] + test_tup2[65])\n    #print(\"test 69\", test_tup1[66] + test_tup2[66])\n    #print(\"test 70\", test_tup1[67] + test_tup2[67])\n    #print(\"test 71\", test_tup1[68] + test_tup2[68])\n    #print(\"test 72\", test_tup1[69] + test_tup2[69])\n    #print(\"test 73\", test_tup1[70] + test_tup2[70])\n    #print(\"test 74\", test_tup1[71] + test_tup2[71])\n    #print(\"test 75\", test_tup1[72] + test_tup2[72])\n    #print(\"test 76\", test_tup1[73] + test_tup2[73])\n    #print(\"test 77\", test_tup1[74] + test_tup2[74])\n    #print(\"test 78\", test_tup1[75] + test_tup2[75])\n    #print(\"test 79\", test_tup1[76] + test_tup2[76])\n    #print(\"test 80\", test_tup1[77] + test_tup2[77])\n    #print(\"test 81\", test_tup1[78] + test_tup2[7"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    \n    n1 = len(test_tup1)\n    n2 = len(test_tup2)\n    \n    # if the len is 1, return it\n    if n1 == 1:\n        if n2 == 1:\n            return test_tup1[0] ^ test_tup2[0]\n        elif n2 == 2:\n            return test_tup1[0] ^ test_tup2[0] ^ test_tup2[1]\n        else:\n            return test_tup1[0] ^ test_tup2[0] ^ test_tup2[1] ^ test_tup2[2]\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    frequency = {}\n    for i in test_list:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n    \n    \ndef group_users(user_list):\n    '''\n    Write a function to group users based on the frequency of their friends.\n    '''\n    \n    grouped_list = []\n    for i in user_list:\n        for j in user_list:\n            if i!= j:\n                if i in frequency and j in frequency:\n                    if frequency[i] > frequency[j]:\n                        grouped_list.append((i,j))\n    return grouped_list\n    \n    \ndef pick_friends(grouped_list):\n    '''\n    Write a function to pick friends based on the frequency of their friends.\n    '''\n    \n    groups = []\n    for i in range(len(grouped_list)):\n        users = grouped_list[i][0]\n        if users not in groups:\n            groups.append(users)\n    return groups\n    \n    \ndef merge_data(grouped_list):\n    '''\n    Write a function to merge the list of dictionaries into a single dictionary.\n    '''\n    \n    merged_list = []\n    for i in range(len(grouped_list)):\n        merged_list.append(grouped_list[i][1])\n    return merged_list\n    \n    \ndef get_freq(dict_list):\n    '''\n    Write a function to get the frequency of a list of dictionaries.\n    '''\n    \n    frequency = {}\n    for i in dict_list:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n    \n    \ndef count_unique_users(test_list):\n    '''\n    Write a function to count the number of unique users in a list of dictionaries.\n    '''\n    \n    total_users = 0\n    for i in test_list:\n        total_users += 1\n    return total_users\n    \n    \ndef get_ordered_dict(test_list):\n    '''\n    Write a function to order a dictionary by the values in the dictionary.\n    '''\n    \n    dict_list = []\n    for i in test_list:\n        dict_list.append(i)\n    return dict_list\n    \n    \ndef get_total_users(test_list):\n    '''\n    Write a function to get the total number of users in a given list.\n    '''\n    \n    total_users = 0\n    for i in test_list:\n        total_users += 1\n    return total_users\n    \n    \ndef group_data(dict_list, group_name):\n    '''\n    Write a function to group a list of dictionaries based on a given group.\n    '''\n    \n    groups = []\n    for i in dict_list:\n        for j in dict_list:\n            if i == j:\n                groups.append(i)\n    \n    new_groups = []\n    for i in groups:\n        for j in groups:\n            if i!= j:\n                if i in frequency and j in frequency:\n                    if frequency[i] > frequency[j]:\n                        new_groups.append((i,j))\n                    \n    return new_groups\n    \n    \ndef top_users(grouped_list, group_name):\n    '''\n    Write a function to find the most popular and least common users in the group.\n    '''\n    \n    user_list = []\n    for i in grouped_list:\n        for j in grouped_list:\n            if i == j:\n                user_list.append(i)\n    \n    user_list.sort(key=lambda i: frequency[i], reverse=True)\n    most_common_users = user_list[0:10]\n    least_common_users = user_list[-10:]\n    \n    return most_common_users, least_common_users\n    \n    \ndef user_list(test_list):\n    '''\n    Write a function to get the unique users in the given list.\n    '''\n    \n    user_list = []\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                user_list.append(i)\n    return user_list\n    \n    \ndef user_list_order(test_list):\n    '''\n    Write a function to get the most common and least common users in the given list.\n    '''\n    \n    user_list = []\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                user_list.append(i)\n    \n    user_list.sort(key=lambda i: frequency[i], reverse=True)\n    most_common_users = user_list[0:10]\n    least_common_users = user_list[-10:]\n    \n    return most_common_users, least_common_users\n    \n    \ndef user_list_frequency(test_list):\n    '''\n    Write a function to get the frequency of a list of dictionaries.\n    '''\n    \n    user_list = []\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                user_list.append(i)\n    \n    frequency = {}\n    for i in user_list:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n    \n    \ndef data_filter(test_list):\n    '''\n    Write a function to filter a list of dictionaries by the values in the dictionary.\n    '''\n    \n    new_list = []\n    for i in test_list:\n        if i in dict_list:\n            new_list.append(i)\n    return new_list\n    \n    \ndef get_dict_keys(test_list):\n    '''\n    Write a function to get a list of keys for each dictionary in the given list.\n    '''\n    \n    dict_list = []\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                dict_list.append(i)\n    return dict_list\n    \n    \ndef top_common_users(test_list, group_name):\n    '''\n    Write a function to find the most common and least common users in the group.\n    '''\n    \n    user_list = []\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                user_list.append(i)\n    user_list.sort(key=lambda i: frequency[i], reverse=True)\n    most_common_users = user_list[0:10]\n    least_common_users = user_list[-10:]\n    \n    return most_common_users, least_common_users\n    \n    \ndef popular_users(test_list, group_name):\n    '''\n    Write a function to get the most popular and least common users in the given list.\n    '''\n    \n    user_list = []\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                user_list.append(i)\n    user_list.sort(key=lambda i: frequency[i], reverse=True)\n    most_common_users = user_list[0:10]\n    least_common_users = user_list[-10:]\n    \n    return most_common_users, least_common_users\n    \n    \ndef popular_users_frequency(test_list):\n    '''\n    Write a function to get the frequency of a list of dictionaries.\n    '''\n    \n    user_list = []\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                user_list.append(i)\n    frequency = {}\n    for i in user_list:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n    \n    \ndef get_dict_values(test_list):\n    '''\n    Write a function to get a list of values for each dictionary in the given list.\n    '''\n    "
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    freq_dict = {}\n    for i in test_list:\n        if i[1] not in freq_dict:\n            freq_dict[i[1]] = 1\n        else:\n            freq_dict[i[1]] += 1\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    #import pdb; pdb.set_trace()\n    count=0\n    for element in test_list:\n        if element in element_count:\n            count+=1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for x in test_list:\n        if x[1] not in x[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    result = 0\n    for test in test_list:\n        result = result + len(test)\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count_dict = dict()\n    for i in test_list:\n        if i[0] in count_dict:\n            count_dict[i[0]] += 1\n        else:\n            count_dict[i[0]] = 1\n    \n    return count_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    freq = Counter(test_list)\n    freq = sorted(freq.items())\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for x in test_list:\n        freq.append(test_list.count(x))\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # keep only unique values from the list\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('Addition of Tuple1 :', test_tup1)\n    print('Addition of Tuple2 :', test_tup2)\n    return 1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    def index_wise_add(test_tup1, test_tup2):\n        '''\n        Add two tuples.\n        '''\n        \n        def append_list(test_list, test_tup):\n            '''\n            Append the tuple.\n            '''\n            \n            test_list.append(test_tup)\n            \n        \n        def remove_list(test_list, test_tup):\n            '''\n            Remove the tuple.\n            '''\n            \n            test_list.remove(test_tup)\n            \n        \n        def convert_tuples(test_list, test_tup):\n            '''\n            Convert tuple to a list and remove the tuple.\n            '''\n            \n            test_list.remove(test_tup)\n            \n        \n        def merge_list(test_list, test_tup):\n            '''\n            Merge two lists and add tuples.\n            '''\n            \n            test_tuple = test_list.pop()\n            append_list(test_list, test_tuple)\n            \n        \n        def remove_tuple(test_list, test_tup):\n            '''\n            Remove the tuple from the list.\n            '''\n            \n            test_list.remove(test_tup)\n            \n        \n        test_tup1 = test_tup2[0]\n        test_tup2 = test_tup2[1]\n        \n        append_list(test_list1, test_tup1)\n        append_list(test_list2, test_tup2)\n        \n        remove_list(test_list1, test_tup1)\n        remove_list(test_list2, test_tup2)\n        \n        convert_tuples(test_list1, test_tup1)\n        convert_tuples(test_list2, test_tup2)\n        \n        merge_list(test_list1, test_tup1)\n        merge_list(test_list2, test_tup2)\n        \n        remove_tuple(test_list1, test_tup1)\n        remove_tuple(test_list2, test_tup2)\n        \n        \n    #Populate the first list from the second\n    test_tup1 = test_tup2[0]\n    test_tup2 = test_tup2[1]\n    \n    append_list(test_list1, test_tup1)\n    append_list(test_list2, test_tup2)\n    \n    remove_list(test_list1, test_tup1)\n    remove_list(test_list2, test_tup2)\n    \n    convert_tuples(test_list1, test_tup1)\n    convert_tuples(test_list2, test_tup2)\n    \n    merge_list(test_list1, test_tup1)\n    merge_list(test_list2, test_tup2)\n    \n    remove_tuple(test_list1, test_tup1)\n    remove_tuple(test_list2, test_tup2)\n    \n    return test_list1, test_list2\n    "
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_test_tup1 = test_tup1[0] + test_tup1[1]\n    nested_test_tup2 = test_tup2[0] + test_tup2[1]\n    print(nested_test_tup1)\n    print(nested_test_tup2)\n    return nested_test_tup1, nested_test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def tuples_to_add(test_tup, test_tup_2):\n        '''\n        write a function that takes two nested tuples and returns the tuple sum of the two tuples.\n        '''\n        def sum_of_tuples(t1, t2):\n            '''\n            Write a function that takes two tuples and returns the sum of the two tuples.\n            '''\n            if t1[0] == t2[0]:\n                return t1[1] + t2[1]\n            else:\n                return None\n        return tuple(map(sum_of_tuples, test_tup, test_tup_2))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    a = list(test_tup1)\n    b = list(test_tup2)\n    c = []\n    index = 0\n    for i in range(0, len(a)):\n        c.append(a[i])\n        c.append(b[i])\n        index = index + 1\n    return c\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    x = 0\n    y = 0\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            x = x + test_tup1[i][j]\n            y = y + test_tup2[i][j]\n    return(x,y)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tup = test_tup1\n    i = 0\n    j = 0\n    #loop over the list\n    while i < len(nested_tup) and j < len(nested_tup[0]):\n        #if the tuples are of the same type\n        if isinstance(nested_tup[i], tuple):\n            #add the tuple elements\n            nested_tup[i] = tuple(nested_tup[i]) + tuple(nested_tup[j])\n            #increment the i\n            i += 1\n        #if the tuples are of different types\n        else:\n            #if it's a list, add to it\n            if isinstance(nested_tup[i], list):\n                #add the elements to the list\n                nested_tup[i] = tuple(nested_tup[i]) + tuple(nested_tup[j])\n                #increment the i\n                j += 1\n            #if the tuples are of different types, add to the list\n            else:\n                #add the elements to the list\n                nested_tup[i] = nested_tup[i] + nested_tup[j]\n                #increment the i\n                j += 1\n        i += 1\n    #return the result of the addition\n    return tuple(nested_tup)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(0,len(test_tup1)):\n        for j in range(0,len(test_tup2[i])):\n            test_tup2[i][j] += test_tup1[i][j]\n    return test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #if not isinstance(test_tup1, tuple):\n    #    raise TypeError('tuple required')\n    #if not isinstance(test_tup2, tuple):\n    #    raise TypeError('tuple required')\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Length of tuples should be the same')\n    return tuple([tuple(t) for t in zip(test_tup1, test_tup2)])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    if b<a:\n        return b\n    \n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        small=a\n        small=small+b\n        return(small)\n    else:\n        small=b\n        small=small+a\n        return(small)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if len(a) > len(b):\n        return a[0]\n    elif len(b) > len(a):\n        return b[0]\n    else:\n        return float('inf')\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b > a:\n        a,b=b,a\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        small = a\n        big = b\n    else:\n        small = b\n        big = a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min=a\n    if b<a:\n        min=a\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min_ = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i] < a[j]:\n                min_ = a[j]\n    return min_\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a>b:\n        return a\n    else:\n        return b\ndef mean(a,b):   \n    '''\n    Write a python function to find the mean of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef variance(a,b):   \n    '''\n    Write a python function to find the variance of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef standarddeviation(a,b):   \n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a>b:\n        return a\n    else:\n        return b\ndef zscore(a,b):   \n    '''\n    Write a python function to find the z-score of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef rsquare(a,b):   \n    '''\n    Write a python function to find the r-squared of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef correlation(a,b):   \n    '''\n    Write a python function to find the correlation of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef sumofsquared(a,b):   \n    '''\n    Write a python function to find the sum of squared numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef sumofsquares(a,b):   \n    '''\n    Write a python function to find the sum of squared numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef stdev(a,b):   \n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef stddev(a,b):   \n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef stdev(a,b):   \n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef stddev(a,b):   \n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\ndef samplenormal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef meannormal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef meannormal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef samplesquarenormal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef variance_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef variance_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef stdev_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef stdev_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef stdev_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef stdev_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef stdev_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef stdev_squared_normal(a,b):   \n    '''\n    Write a python function to sample a squared normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_normal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_normal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_normal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_normal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_normal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_normal(a,b):   \n    '''\n    Write a python function to sample a normal distribution with mean a, standard deviation b.\n    '''\n    return stats.norm.rvs(a,b)\ndef mean_normal(a,b):   \n    ''"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # find minimum\n    minimum = a\n    if b>a:\n        minimum = b\n    return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return minimum(a,b-1)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #print(\"tuplex is\",tuplex,\"\\n\", \"tuple1 is\",tuple1)\n    if type(tuplex) == type(tuple1):\n        try:\n            check_tuplex(tuplex[0],tuple1[0])\n            #print(\"True\")\n        except IndexError:\n            print(\"IndexError\")\n        except Exception:\n            print(\"Exception\")\n        else:\n            print(\"False\")\n        finally:\n            return True\n    else:\n        print(\"Exception\")\n        return False\n    \n    \ntuplex = (1,2,3,4)\ntuple1 = (1,2,3,4)\ncheck_tuplex(tuplex,tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuple1[i] == tuplex[i]:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True\n    else: \n        return False\n    \ndef check_tuple(tuple1,tuple2): \n    '''\n    Write a function to check whether one element is within a tuple.\n    '''\n    if tuple1 in tuple2: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex) is not tuple:\n        print(f'{tuplex} is not a tuple')\n        return False\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            print(f'{tuplex}[{i}] is {tuplex[i]}')\n            return True\n    print('{} is not in tuple'.format(tuplex))\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0, len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #Your code here\n    if tuple1 in tuplex:\n        return True\n    return False\n    \ntuple1 = ('one','two','three','four','five')\ntuple2 = (1,2,'three',3)\ntuple3 = (\"hello\",\"hey\",\"hi\")\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex, tuple):\n        return tuplex[0] in tuplex and check_tuplex(tuplex[1:],tuple1)\n    else:\n        return tuplex in tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check if the first element is in the tuple \n    if tuplex[0] in tuple1:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        if len(tuplex) == len(tuple1): \n            for i in tuplex: \n                if i in tuple1: \n                    return True\n            return False\n        else: \n            return False\n    except: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex = tuple(tuplex)\n    except TypeError:\n        return False\n    try:\n        tuple1 = tuple(tuple1)\n    except TypeError:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x < 0): \n        return \"Invalid input\"\n    elif (x % 2) == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd = []\n    for i in range(1,x+1):\n        if (i % 2) == 0:\n            odd.append(i)\n    if len(odd)!= 1:\n        return odd\n    else:\n        return odd[0]\ndef find_Even(x): \n    '''\n    Write a python function to find whether the parity of a given number is even.\n    '''\n    even = []\n    for i in range(1,x+1):\n        if (i % 2) == 1:\n            even.append(i)\n    if len(even)!= 1:\n        return even\n    else:\n        return even[0]\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Write your code here\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # To take input from user\n    while True:\n        try: \n            value = int(input(\"Enter a number: \"))\n            break\n        except ValueError:\n            print(\"The input must be a number.\")\n    \n    # Run code for calculation\n    if value % 2 == 1:\n        print(\"The value is odd.\")\n    else:\n        print(\"The value is even.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # your code here\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = str(x) \n    count = 0\n    for i in range(len(x)):\n        count = count+int(x[i])\n    if count % 2!= 0: \n        print(\"Even\") \n    else: \n        print(\"Odd\") \n    return \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Test\n    # 1. Define a variable called x. \n    # 2. Iterate through the variable x. \n    # 3. Compare the value of x with the value of '4'. \n    # 4. If the value of x is odd, return true, else, false. \n    if x % 2 == 0: \n        print(\"True\") \n    else: \n        print(\"False\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x == 0): \n        return 0\n    elif (x % 2 == 0): \n        return 1\n    else: \n        return 0\n    "
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Your code here\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return format(n,'0>8>2>1>3>4>5>6>7>8>9>0>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>1>8>2>3>4>5>6>7>8>9>"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    for i in range(len(str(n))-1):\n        if int(str(n)[i]) > int(str(n)[i+1]):\n            print(\"Invalid input:\",n)\n            return\n        n = n[:i] + str(int(n[i]) + 1) + n[i+1:]\n    print(\"Valid input:\",n)\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = list(map(str, str(n)))\n    arr[1], arr[2], arr[0], arr[3] = arr[3], arr[0], arr[1], arr[2]\n    return \"\".join(arr)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = []\n    for i in str(n):\n        arr.append(int(i))\n    arr.reverse()\n    return arr\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    max = 0\n    for i in range(1,10):\n        if i > max:\n            max = i\n    for i in range(1,max+1):\n        if n%i==0:\n            n//=i\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def bigger(s):\n        if len(s) == 1:\n            return s[0]\n        else:\n            first = bigger(s[0])\n            second = bigger(s[1:])\n            return first+second[1:] if first[0] == '1' else second+first[1:]\n    if n == 0:\n        return []\n    else:\n        return bigger(str(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # your code goes here\n    if n == 0:\n        return 0\n    else:\n        return n+rearrange_bigger(n-1)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = int(''.join([str(int(i)**3) for i in str(n)]))\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # create the list of digits in the given number\n    digits = [i for i in str(n)]\n    \n    # create a list of digits after the last digit\n    digits_after_last = digits[-1::-1]\n    \n    # check if the last digit is 0\n    if len(digits_after_last) == 1:\n        digits_after_last.append(0)\n        \n    # create a list of digits after the last digit\n    digits_after_last_sorted = digits_after_last[::-1]\n    \n    # create a list of digits in the number after the first digit\n    digits_after_first = digits[1::]\n    \n    # join the digits after the first digit to the digits after the last digit\n    digits = digits_after_first + digits_after_last_sorted\n    \n    # remove the last number\n    digits.pop()\n    \n    # convert the list to a string\n    digits_string = ''.join(digits)\n    \n    # return the result\n    return digits_string\n    \n    "
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(number):\n        if number == 0:\n            return [1,0]\n        result = []\n        result.append(0)\n        while number!= 0:\n            digit = number % 10\n            result.append(digit)\n            number //= 10\n        result.append(0)\n        result.reverse()\n        return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if not nums1 or not nums2 or not k:\n        return 0\n    pairs = []\n    heapq.heapify(pairs)\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return len(pairs)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j))\n    count = 0\n    while heap:\n        n1, n2 = heapq.heappop(heap)\n        if count < k:\n            for i in range(n1, n2 + 1):\n                if i not in nums1 and i not in nums2:\n                    count += 1\n        else:\n            for i in range(n1, n2 + 1):\n                if i not in nums1 and i not in nums2:\n                    return [n1, n2]\n            break\n    return [n1, n2]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Write your code here.\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i]**2, i))\n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j]**2, j))\n    output = []\n    while len(output) < k:\n        # print(heap)\n        # print(len(heap))\n        if len(heap) > 0:\n            smallest_pair = heapq.heappop(heap)\n            if smallest_pair[1] == len(nums1):\n                output.append((nums1[smallest_pair[0]], smallest_pair[0]))\n            else:\n                output.append((nums2[smallest_pair[0]], smallest_pair[0]))\n        else:\n            return output\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # print(nums1[i] * nums2[j])\n            if nums1[i] * nums2[j] <= k:\n                # print(nums1[i] * nums2[j])\n                heapq.heappush(heap, [nums1[i] * nums2[j], i, j])\n    \n    # print(heap)\n    return len(heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    output = []\n    for i in range(len(nums1)):\n        if nums1[i] > nums2[i] and len(output) < k:\n            output.append((nums1[i], nums2[i]))\n    return output\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr1 = set(nums1)\n    arr2 = set(nums2)\n    h1 = []\n    h2 = []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_pair_index = []\n    smallest_pair = []\n    result = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and i!= j:\n                smallest_pair.append([nums1[i], nums2[j]])\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 and len(nums2) == 0:\n        return []\n    if len(nums1) == 0:\n        return [[1,1]]\n    if len(nums2) == 0:\n        return [[1,1]]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # all the pairs between first array\n    # k=1, nums1=[3,1,4,1,5,2], nums2=[2,3,4,5,6,7]\n    if k == 1:\n        return heappush(heapq.merge(nums1, nums2), (0, 0))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            min_product = list1[i][1] * list1[j][1]\n            if min_product < list1[i][0] * list1[j][0]:\n                min_product = list1[i][0] * list1[j][0]\n                \n    return min_product\n    \ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    '''\n    max_product = None\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            max_product = list1[i][1] * list1[j][1]\n            if max_product > list1[i][0] * list1[j][0]:\n                max_product = list1[i][0] * list1[j][0]\n    return max_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # check if the given list has 1 or 2 elements\n    if len(list1)==1 or len(list1)==2:\n        return list1[0]\n    \n    # get the current minimum\n    currentMin = list1[0]\n    \n    # iterate through each of the 2 tuples\n    for i in range(len(list1)):\n        \n        # get the first tuple\n        firstTuple = list1[i]\n        \n        # get the second tuple\n        secondTuple = list1[i+1]\n        \n        # compare the current min with the minimum of both tuples\n        if firstTuple[0]<currentMin[0] or secondTuple[0]<currentMin[0]:\n            currentMin = firstTuple\n            \n        if firstTuple[1]<currentMin[1] or secondTuple[1]<currentMin[1]:\n            currentMin = secondTuple\n            \n    return currentMin\n    \ndef min_product_tuple_method_2(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # check if the given list has 1 or 2 elements\n    if len(list1)==1 or len(list1)==2:\n        return list1[0]\n    \n    # get the current minimum\n    currentMin = list1[0]\n    \n    # iterate through each of the 2 tuples\n    for i in range(len(list1)):\n        \n        # get the first tuple\n        firstTuple = list1[i]\n        \n        # get the second tuple\n        secondTuple = list1[i+1]\n        \n        # compare the current min with the minimum of both tuples\n        if firstTuple[0]<currentMin[0] or secondTuple[0]<currentMin[0]:\n            currentMin = firstTuple\n            \n        if firstTuple[1]<currentMin[1] or secondTuple[1]<currentMin[1]:\n            currentMin = secondTuple\n            \n    return currentMin\n        \ndef min_product_tuple_method_3(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # check if the given list has 1 or 2 elements\n    if len(list1)==1 or len(list1)==2:\n        return list1[0]\n    \n    # get the current minimum\n    currentMin = list1[0]\n    \n    # iterate through each of the 2 tuples\n    for i in range(len(list1)):\n        \n        # get the first tuple\n        firstTuple = list1[i]\n        \n        # get the second tuple\n        secondTuple = list1[i+1]\n        \n        # compare the current min with the minimum of both tuples\n        if firstTuple[0]<currentMin[0] or secondTuple[0]<currentMin[0]:\n            currentMin = firstTuple\n            \n        if firstTuple[1]<currentMin[1] or secondTuple[1]<currentMin[1]:\n            currentMin = secondTuple\n            \n    return currentMin\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            min_product=max(list1[i][1]*list1[j][1],min_product)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = int(sys.maxsize)\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = (list1[i][0] * list1[j][0])\n            if product < minimum:\n                minimum = product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if list1 == []:\n        return None\n    for i in range(0, len(list1)-1):\n        for j in range(i+1, len(list1)):\n            p1 = list1[i]\n            p2 = list1[j]\n            \n            if p1[0] > p2[0]:\n                list1[i], list1[j] = list1[j], list1[i]\n            \n            elif p1[1] > p2[1]:\n                list1[i], list1[j] = list1[j], list1[i]\n            \n            elif p1[0] == p2[0] and p1[1] == p2[1]:\n                return list1[i], list1[j]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            min = list1[i][0] * list1[j][0] + min\n            \n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return list1[0] * list1[0]\n    if len(list1) == 2:\n        return list1[0] * list1[1]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] * list1[j] < min(list1[i],list1[j]):\n                min_product_tuple = (list1[i],list1[j])\n    return min_product_tuple[0] * min_product_tuple[1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)<=1:\n        return list1[0][0]\n    p=list1[0]\n    for i in range(1,len(list1)):\n        if list1[i][0]<p[0]*p[1]:\n            p=list1[i]\n        elif list1[i][0]>p[0]*p[1]:\n            p=list1[i]\n    return p[0]*p[1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = float('inf')\n    min_pos = (-1, -1)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][0]\n            pos = list1[i][1] * list1[j][1]\n            if prod < min_prod and pos < min_pos:\n                min_prod = prod\n                min_pos = pos\n    return min_prod, min_pos\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = []\n    for x in list1:\n        for y in list1:\n            if x[0] < y[0] and x[1] < y[1]:\n                min_product.append(x)\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #Initialize minval to 0, minimum value\n    minval = 0\n    #Loop through the list and compare the value to the minval\n    for val in listval:\n        #if the value is less than the minval\n        if val < minval:\n            #set the minval to val\n            minval = val\n    #return the minval\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # find the min value in the list\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n    "
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    minval = min(listval)\n    for i in range(len(listval)):\n        if listval[i] == minval:\n            return i\n    return None\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # base case\n    if len(listval) == 1:\n        return listval[0]\n    # recursion\n    min_val_1 = min_val(listval[1:])\n    min_val_2 = listval[0]\n    for i in listval[1:]:\n        # if listval[i] > min_val_1 then min_val_1 = listval[i]\n        if i > min_val_1:\n            min_val_1 = i\n    # if listval[0] > min_val_2 then min_val_2 = listval[0]\n    if min_val_1 > min_val_2:\n        min_val_2 = min_val_1\n    return min_val_2\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # If list is empty, return -1\n    if len(listval) == 0:\n        return -1\n    # If list is not empty, find the smallest value\n    else:\n        return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    try:\n        return max(listval)\n    except:\n        return None\n    "
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for x in range(1, len(listval)):\n        if listval[x] < min_val:\n            min_val = listval[x]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # find the minimum value in the list\n    min = listval[0]\n    for i in range(0, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return(min)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest=sys.maxsize\n    for item in listval:\n        if item<smallest:\n            smallest=item\n    return smallest\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Code here\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = []\n    result = \"\"\n    for w in word.split():\n        if w.isupper():\n            result += w.lower()\n            result += \"_\"\n        else:\n            result += w.capitalize()\n            result += \"_\"\n    return result.strip(\"_\")\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r' \\1_\\2', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", word).lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(\"(.)([a-z][A-Z][a-z])\", r\"\\1_\\2\", word).lower()\ndef is_chinese_character(character):\n    '''\n    Determine if the given character is a Chinese character.\n    '''\n    return character in '\\u4e00-\\u9fff'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    p = r'([A-Z][a-z]+)\\.([A-Z][a-z]+)'\n    m = re.findall(p, word)\n    word = word.split('.')\n    # print(word)\n    word = map(str.capitalize, word)\n    # print(word)\n    word = ''.join(word)\n    word = re.sub(p, r'\\1_\\2', word)\n    return word.strip()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #example: snake_to_camel(\"hello\") --> hello\n    return re.sub(r'(?=[A-Z])', '_', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return word\n    camel_word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_word).lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word == '':\n        return word\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\ndef is_email(email):\n    '''\n    Check if the given email is a valid email address\n    '''\n    regex = '^(([a-z0-9]([-_!.,()/&+=~`{|}])*[.])*[a-z0-9]([-_!.,()/&+=~`{|}])*[.])*\\.[a-z]{2,15})@(([a-z0-9]([-_!.,()/&+=~`{|}])*[.])*[a-z0-9]([-_!.,()/&+=~`{|}])*[.])*\\.[a-z]{2,15})([a-z0-9]([-_!.,()/&+=~`{|}])*[.])*[a-z0-9]([-_!.,()/&+=~`{|}])*[.])*$'\n    return bool(re.match(regex, email))\ndef email_address_valid(email):\n    '''\n    Check if the given email address is valid\n    '''\n    if is_email(email):\n        return True\n    return False\ndef phone_number_valid(phone):\n    '''\n    Check if the given phone number is valid\n    '''\n    phone_number_pattern = '^(\\d{3})[-_]\\d{3}[-_]\\d{4}$'\n    return bool(re.match(phone_number_pattern, phone))\ndef valid_email(email):\n    '''\n    Check if the given email address is valid\n    '''\n    if email_address_valid(email):\n        return True\n    return False\ndef valid_phone(phone):\n    '''\n    Check if the given phone number is valid\n    '''\n    if phone_number_valid(phone):\n        return True\n    return False\ndef is_valid_name(name):\n    '''\n    Check if the given name is valid\n    '''\n    if name.isalnum():\n        return True\n    return False\ndef is_valid_email(email):\n    '''\n    Check if the given email address is valid\n    '''\n    if valid_email(email):\n        return True\n    return False\ndef is_valid_phone(phone):\n    '''\n    Check if the given phone number is valid\n    '''\n    if phone_number_valid(phone):\n        return True\n    return False\ndef is_valid_name(name):\n    '''\n    Check if the given name is valid\n    '''\n    if name.isalnum():\n        return True\n    return False\ndef is_valid_ip(ip):\n    '''\n    Check if the given ip address is valid\n    '''\n    return ip_is_valid(ip)\ndef ip_is_valid(ip):\n    '''\n    Check if the given ip address is valid\n    '''\n    try:\n        valid_ip = int(ip)\n        if valid_ip <= 0 or valid_ip > 255:\n            return False\n        else:\n            return True\n    except:\n        return False\ndef is_valid_phonenumber(phone):\n    '''\n    Check if the given phone number is valid\n    '''\n    if phone_number_valid(phone):\n        return True\n    return False\ndef is_valid_name(name):\n    '''\n    Check if the given name is valid\n    '''\n    if name.isalnum():\n        return True\n    return False\ndef is_valid_email(email):\n    '''\n    Check if the given email address is valid\n    '''\n    if valid_email(email):\n        return True\n    return False\ndef is_valid_phone(phone):\n    '''\n    Check if the given phone number is valid\n    '''\n    if phone_number_valid(phone):\n        return True\n    return False\ndef get_email_attributes(line):\n    '''\n    Return the email, name, address and phone from the given line\n    '''\n    email = None\n    name = None\n    address = None\n    phone = None\n    if line.count(\"<h1>\") > 0:\n        name = line.split(\"<h1>\")[1].split(\"</h1>\")[0]\n    elif line.count(\"<h2>\") > 0:\n        name = line.split(\"<h2>\")[1].split(\"</h2>\")[0]\n    else:\n        name = \"\"\n    if line.count(\"<a\") > 0:\n        address = line.split(\"<a\")[1].split(\"</a>\")[0]\n    elif line.count(\"<i>\") > 0:\n        address = line.split(\"<i>\")[1].split(\"</i>\")[0]\n    elif line.count(\"<p\") > 0:\n        address = line.split(\"<p>\")[1].split(\"</p>\")[0]\n    else:\n        address = \"\"\n    if line.count(\"<a href=\") > 0:\n        phone = line.split(\"<a href=\")[1].split(\"</a>\")[0]\n    elif line.count(\"<i>\") > 0:\n        phone = line.split(\"<i>\")[1].split(\"</i>\")[0]\n    else:\n        phone = \"\"\n    return email, name, address, phone\ndef get_name_and_address(line):\n    '''\n    Return the name and address from the given line\n    '''\n    name = line.split(\"<h2>\")[0].split(\"</h2>\")[0]\n    address = line.split(\"<p>\")[0].split(\"</p>\")[0]\n    return name, address\ndef get_phone_and_address(line):\n    '''\n    Return the phone number and address from the given line\n    '''\n    phone = line.split(\"<i>\")[0].split(\"</i>\")[0]\n    address = line.split(\"<p>\")[0].split(\"</p>\")[0]\n    return phone, address\ndef get_full_name(line):\n    '''\n    Return the full name from the given line\n    '''\n    name = line.split(\"<h2>\")[0].split(\"</h2>\")[0]\n    return name\ndef get_email(line):\n    '''\n    Return the email from the given line\n    '''\n    email = line.split(\"<a href=\")[1].split(\"</a>\")[0]\n    return email\ndef get_phone(line):\n    '''\n    Return the phone number from the given line\n    '''\n    phone = line.split(\"<i>\")[1].split(\"</i>\")[0]\n    return phone\ndef get_full_address(line):\n    '''\n    Return the full address from the given line\n    '''\n    address = line.split(\"<p>\")[0].split(\"</p>\")[0]\n    return address\ndef get_first_name(line):\n    '''\n    Return the first name from the given line\n    '''\n    name = line.split(\"<h2>\")[0].split(\"</h2>\")[0]\n    return name\ndef get_last_name(line):\n    '''\n    Return the last name from the given line\n    '''\n    name = line.split(\"<h2>\")[0].split(\"</h2>\")[0]\n    return name\ndef get_phone_number(line):\n    '''\n    Return the phone number from the given line\n    '''\n    phone = line.split(\"<i"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if(word == \"\"):\n        return \"\"\n    if(word == \"A\"):\n        return \"a\"\n    if(word == \"and\"):\n        return \"and\"\n    if(word == \"are\"):\n        return \"are\"\n    if(word == \"as\"):\n        return \"as\"\n    if(word == \"at\"):\n        return \"at\"\n    if(word == \"at\"):\n        return \"at\"\n    if(word == \"at\"):\n        return \"at\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"because\"):\n        return \"because\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return \"being\"\n    if(word == \"be\"):\n        return \"be\"\n    if(word == \"been\"):\n        return \"been\"\n    if(word == \"being\"):\n        return "
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # initialize the camelCase\n    camelCase = ''\n    # Iterate through the word to get the first letter only.\n    # Assume the word contains only capital letters, so just remove any other characters except one.\n    # Write this to a variable.\n    # Use Regex to convert to camelCase\n    for i in range(len(word)):\n        if word[i].islower() == True:\n            camelCase = camelCase + word[i].upper() +''\n        elif word[i].islower() == False:\n            camelCase = camelCase + word[i] +''\n    return camelCase.lstrip()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert all the non-alphanumeric characters to upper case\n    return re.sub(r'[^A-Za-z0-9]+', '', word).upper()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1=[]\n    for i in l:\n        if i%2!=0:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    # create an empty list\n    odd_list = []\n    \n    # iterate through the list\n    for i in range(len(l)):\n        \n        # if it is an even number\n        if(l[i]%2 == 0):\n            \n            # append it to the list\n            odd_list.append(l[i])\n            \n    # return the list\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Your code here\n    # pass\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 1:\n        return\n    if l[0] % 2 == 0:\n        l.remove(l[0])\n    return remove_odd(l)\n    \ndef do_sort(l, func):\n    '''\n    Write a python function to sort a list.\n    '''\n    for i in range(len(l)):\n        l[i] = func(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \ndef sum_all(l):\n    '''\n    Write a python function to get the sum of all numbers in a given list.\n    '''\n    return sum(l)\n    \ndef odd_count(l):\n    '''\n    Write a python function to get the number of odd numbers in a given list.\n    '''\n    return len(list(filter(lambda x: x % 2!= 0, l)))\n    \ndef even_count(l):\n    '''\n    Write a python function to get the number of even numbers in a given list.\n    '''\n    return len(list(filter(lambda x: x % 2 == 0, l)))\n    \ndef max_count(l):\n    '''\n    Write a python function to get the max number of numbers in a given list.\n    '''\n    return max(l)\n    \ndef min_count(l):\n    '''\n    Write a python function to get the min number of numbers in a given list.\n    '''\n    return min(l)\n    \ndef sum_even(l):\n    '''\n    Write a python function to get the sum of even numbers in a given list.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 0, l)))\n    \ndef sum_odd(l):\n    '''\n    Write a python function to get the sum of odd numbers in a given list.\n    '''\n    return sum(list(filter(lambda x: x % 2!= 0, l)))\n    \ndef print_all(l):\n    '''\n    Write a python function to print all numbers in a given list.\n    '''\n    print(list(map(lambda x: str(x), l)))\n    \ndef print_even(l):\n    '''\n    Write a python function to print even numbers in a given list.\n    '''\n    print(list(filter(lambda x: x % 2 == 0, l)))\n    \ndef print_odd(l):\n    '''\n    Write a python function to print odd numbers in a given list.\n    '''\n    print(list(filter(lambda x: x % 2!= 0, l)))\n    \ndef print_max(l):\n    '''\n    Write a python function to get the max number of numbers in a given list.\n    '''\n    print(max(l))\n    \ndef print_min(l):\n    '''\n    Write a python function to get the min number of numbers in a given list.\n    '''\n    print(min(l))\n    \ndef print_sum_even(l):\n    '''\n    Write a python function to get the sum of even numbers in a given list.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 0, l)))\n    \ndef print_sum_odd(l):\n    '''\n    Write a python function to get the sum of odd numbers in a given list.\n    '''\n    return sum(list(filter(lambda x: x % 2!= 0, l)))\n    \ndef print_sum_even_odd(l):\n    '''\n    Write a python function to get the sum of even numbers in a given list.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 0, filter(lambda x: x % 2!= 0, l))))\n    \ndef print_count_even(l):\n    '''\n    Write a python function to get the number of even numbers in a given list.\n    '''\n    return len(list(filter(lambda x: x % 2 == 0, l)))\n    \ndef print_count_odd(l):\n    '''\n    Write a python function to get the number of odd numbers in a given list.\n    '''\n    return len(list(filter(lambda x: x % 2!= 0, l)))\n    \ndef print_count_even_odd(l):\n    '''\n    Write a python function to get the number of even numbers in a given list.\n    '''\n    return len(list(filter(lambda x: x % 2 == 0, filter(lambda x: x % 2!= 0, l))))\n    \ndef print_sum_all(l):\n    '''\n    Write a python function to get the sum of all numbers in a given list.\n    '''\n    print(sum_all(l))\n    \ndef print_odd_count(l):\n    '''\n    Write a python function to get the number of odd numbers in a given list.\n    '''\n    return odd_count(l)\n    \ndef print_even_count(l):\n    '''\n    Write a python function to get the number of even numbers in a given list.\n    '''\n    return even_count(l)\n    \ndef print_max_count(l):\n    '''\n    Write a python function to get the max number of numbers in a given list.\n    '''\n    return max_count(l)\n    \ndef print_min_count(l):\n    '''\n    Write a python function to get the min number of numbers in a given list.\n    '''\n    return min_count(l)\n    \ndef print_sum_even_odd(l):\n    '''\n    Write a python function to get the sum of even numbers in a given list.\n    '''\n    return sum_even_odd(l)\n    \ndef print_sum_odd_even(l):\n    '''\n    Write a python function to get the sum of odd numbers in a given list.\n    '''\n    return sum_odd_even(l)\n    \ndef print_sum_all_odd_even(l):\n    '''\n    Write a python function to get the sum of all numbers in a given list.\n    '''\n    print(sum_all(l))\n    \ndef print_odd_count_even_odd(l):\n    '''\n    Write a python function to get the number of odd numbers in a given list.\n    '''\n    return odd_count_even_odd(l)\n    \ndef print_even_count_odd_even(l):\n    '''\n    Write a python function to get the number of even numbers in a given list.\n    '''\n    return even_count_odd_even(l)\n    \ndef print_all_odd_even_odd(l):\n    '''\n    Write a python function to get all odd numbers in a given list.\n    '''\n    print(list(filter(lambda x: x % 2!= 0, l)))\n    \ndef print_all_odd_even_odd(l):\n    '''\n    Write a python function to get all odd numbers in a given list.\n    '''\n    print(list(filter(lambda x: x % 2 == 0, l)))\n    \ndef print_all_odd_even_odd(l):\n    '''\n    Write a python function to get all odd numbers in a given list.\n    '''\n    print(list(filter(lambda x: x % 2 == 0, filter(lambda x: x % 2!= 0, l))))\n    \ndef print_even_count_all_odd_even_odd(l):\n    '''\n    Write a python function to get the number of even numbers in a given list.\n    '''\n    print(list(filter(lambda x: x % 2 == 0, filter(lambda x: x % 2!= 0, l))))\n    \ndef print_all_odd_even_odd_all_odd_even(l):\n    '''\n    Write a python function to get all odd numbers in a given list.\n    '''\n    print(list(filter(lambda x: x % 2 == 0, filter(lambda x: x % 2!= 0, l))))\n    \ndef print_all_odd_even_odd_all_odd_even(l):\n    '''\n    Write a python function to get all odd numbers in a given list.\n    '''\n    print(list(filter(lambda x: x % 2 == 0, filter(lambda x: x % 2!= 0, l))))\n    \ndef print_odd_count_all_odd_even_odd(l):\n    '''\n    Write a python function to get the number of odd numbers in a given list.\n    '''\n    print(odd_count_all_odd_even(l))\n    \ndef print"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l=l[::2]\n    for i in l:\n        if i%2==1:\n            l.remove(i)\n    return l\n    \n        \ndef main():\n    '''\n    This is a main function for the program\n    '''\n    #l=[]\n    l=list(map(int,input('enter a list ').split()))\n    remove_odd(l)\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l[i] = l[i] % 2\n    return l\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            l[i] = l[i] % 2\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    for i in l:\n        if i % 2!= 0:\n            l2.append(i)\n    return l2\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n        else:\n            pass\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = []\n    for element in list1:\n        nth_element.append(element[n])\n    return nth_element\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    x = list1[n-1]\n    return x\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!=len(list2):\n        return False\n    return len([value for value in list1 if value in list2])==len(list1)\ndef reverse_str(str):\n    '''\n    Write a python function that will reverse the string using the reversed() function.\n    '''\n    return str[::-1]\n    \ndef mult_list(list1, list2):\n    '''\n    Write a python function to multiply two list together.\n    '''\n    temp=0\n    for i in range(len(list1)):\n        temp += list1[i]*list2[i]\n    return temp\n    \ndef find_even(list):\n    '''\n    Write a python function to find the even numbers in a list.\n    '''\n    return [i for i in list if i%2==0]\ndef find_odd(list):\n    '''\n    Write a python function to find the odd numbers in a list.\n    '''\n    return [i for i in list if i%2!=0]\ndef find_prime(list):\n    '''\n    Write a python function to find the prime numbers in a list.\n    '''\n    return [i for i in list if i!=1]\ndef is_prime(num):\n    '''\n    Write a python function to check whether the number is a prime number or not.\n    '''\n    for i in range(2, num):\n        if num%i==0:\n            return False\n    return True\ndef sum_of_prime_factors(n):\n    '''\n    Write a python function to calculate the sum of all the prime numbers less than or equal to number n.\n    '''\n    return sum([i for i in range(n) if is_prime(i)])\ndef is_prime_factors(n):\n    '''\n    Write a python function to calculate the sum of all the prime numbers lesser than or equal to number n.\n    '''\n    return sum([i for i in range(1, n+1) if is_prime(i)])\ndef average(list):\n    '''\n    Write a python function to calculate the average of a list of numbers.\n    '''\n    sum=0\n    for i in list:\n        sum+=i\n    return sum/len(list)\ndef sum_all(list):\n    '''\n    Write a python function to calculate the sum of all the numbers in a list.\n    '''\n    return sum(list)\ndef student_grades(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades.\n    '''\n    return average(student_list)\n    \ndef sum_all_grades(student_list):\n    '''\n    Write a python function to calculate the sum of all the grades in a list.\n    '''\n    return sum(student_list)\n    \ndef student_grades_with_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades.\n    '''\n    return sum_all_grades(student_list)/len(student_list)\n    \ndef student_grades_and_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades and its corresponding grades.\n    '''\n    return sum_all_grades(student_list)/len(student_list)\n    \ndef student_grades_and_average_without_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades and its corresponding grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef highest_grades_and_average(student_list):\n    '''\n    Write a python function to calculate the highest grades and their corresponding grades in a list.\n    '''\n    return max(student_list, key=student_list.count)\n    \ndef highest_grades_and_average_without_highest(student_list):\n    '''\n    Write a python function to calculate the highest grades and their corresponding grades in a list.\n    '''\n    return max(student_list, key=lambda item: student_list.count(item))\n    \ndef highest_grades(student_list):\n    '''\n    Write a python function to calculate the highest grades and their corresponding grades in a list.\n    '''\n    return max(student_list, key=student_list.count)\n    \ndef highest_grades_and_average_without_highest(student_list):\n    '''\n    Write a python function to calculate the highest grades and their corresponding grades in a list.\n    '''\n    return max(student_list, key=student_list.count)\n    \ndef grade_a(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_a_without_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades without considering the average of the grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_b(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_b_without_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades without considering the average of the grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_c(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_c_without_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades without considering the average of the grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_d(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_d_without_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades without considering the average of the grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_e(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_e_without_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades without considering the average of the grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_f(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_f_without_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades without considering the average of the grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_g(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef grade_g_without_average(student_list):\n    '''\n    Write a python function to calculate the average of a list of grades without considering the average of the grades.\n    '''\n    return sum(student_list)/len(student_list)\n    \ndef highest_grades_and_average(student_list):\n    '''\n    Write a python function to calculate the highest grades and their corresponding grades in a list.\n    '''\n    return max(student_list, key=student_list.count)\n    \ndef highest_grades_and_average_without_highest(student_list):\n    '''\n    Write a python function to calculate the highest grades and their corresponding grades in a list."
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlaps=0\n    for i in range(len(list1)-1):\n        if list1[i]!=list1[i+1]:\n            overlaps+=1\n    return overlaps>0\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # O(n2)\n    # O(n)\n    # O(1)\n    # O(1)\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if list1==list2 else False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    try:\n        a=0\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i]==list2[j]:\n                    a+=1\n        return a>=1\n    except:\n        return False\n    \ndef main():\n    '''\n    Write a python function to find out whether a given string contains a given substring.\n    '''\n    list1=[1,2,3,4,5,6,7]\n    list2=[3,4,5,6,7,8,9]\n    print(overlapping(list1,list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    # For loop for over the elements in the list\n    for value in list1:\n        # For loop for over the elements in the list\n        for other_value in list2:\n            # Condition to determine if the value is present in the list\n            if value == other_value:\n                # print the value from the list\n                print(value)\n                # Break\n                break\n        else:\n            # If not present in the list\n            print(\"Value not present in the list\")\n            # Break\n            break\n    # If list is not empty\n    if list1!= []:\n        # For loop to print all elements in the list\n        for value in list1:\n            # Condition to determine if the element is present in the list\n            if value not in list2:\n                # Print the element from the list\n                print(value)\n    # If list is empty\n    else:\n        # print the list\n        print(list1)\n        # Break\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    '''\n    print(\"Here's the sample sequence:\")\n    print(list1)\n    print(\"\\nHere's the sample sequence:\")\n    print(list2)\n    '''\n    if len(list1) < len(list2):\n        # If the list has less than the length of list2, return false\n        return False\n    if list2[0] < list1[0]:\n        # If the list has 1st element less than the first element, return false\n        return False\n    # If the list has 1st element less than the second element, return false\n    if list1[0] < list2[0]:\n        # If the list has 2nd element less than the first element, return false\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            return False\n        \n    return True\n    \ndef in_order(list1):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    '''\n    print(\"Here's the sample sequence:\")\n    print(list1)\n    print(\"\\nHere's the sample sequence:\")\n    print(list1)\n    '''\n    # if the list has less than the length of list1, return false\n    if len(list1) < len(list1):\n        # If the list has less than the length of list1, return false\n        return False\n    \n    if len(list1) == len(list1):\n        # If the list has 1st element less than the first element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the second element, return false\n        return False\n    \n    # If the list has 1st element less than the third element, return false\n    if len(list1) < len(list1):\n        # If the list has 1st element less than the fourth element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the fifth element, return false\n        return False\n    \n    return True\n    \ndef post_order(list1):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    '''\n    print(\"Here's the sample sequence:\")\n    print(list1)\n    print(\"\\nHere's the sample sequence:\")\n    print(list1)\n    '''\n    # if the list has less than the length of list1, return false\n    if len(list1) < len(list1):\n        # If the list has less than the length of list1, return false\n        return False\n    \n    if len(list1) == len(list1):\n        # If the list has 1st element less than the first element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the second element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the third element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the fourth element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the fifth element, return false\n        return False\n    \n    return True\n    \ndef level_order(list1):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    '''\n    print(\"Here's the sample sequence:\")\n    print(list1)\n    print(\"\\nHere's the sample sequence:\")\n    print(list1)\n    '''\n    # if the list has less than the length of list1, return false\n    if len(list1) < len(list1):\n        # If the list has less than the length of list1, return false\n        return False\n    \n    if len(list1) == len(list1):\n        # If the list has 1st element less than the first element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the second element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the third element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the fourth element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the fifth element, return false\n        return False\n    \n    if len(list1) < len(list1):\n        # If the list has 1st element less than the sixth element, return false\n        return False\n    \n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = [int(x) for x in list1]\n    list2 = [int(x) for x in list2]\n    for item in list1:\n        for i in list2:\n            if item==i:\n                return item\n    return 'False'\n    #return any(x in list1 for x in list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)==0 or len(list2)==0:\n        return False\n    else:\n        if list1[0] in list2:\n            return True\n        else:\n            return False\n    \n    \nprint(overlapping(['a','b','c'],['a','b','a']))\nprint(overlapping(['a','b','c'],['a','b','d']))\nprint(overlapping(['a','b','c'],['a','b','d']))\n    "
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = True\n    for i in range(len(list1)-1):\n        if list1[i]!=list1[i+1]:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i] * arr[j] > arr[i] * arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    return max(arr)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod=arr[0]\n    for i in arr[1:]:\n        prod=i*max_prod\n        if prod>max_prod:\n            max_prod=prod\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    num = len(arr)\n    min_val = arr[0]\n    max_val = arr[0]\n    #for each item in the array, get the value of the maximum\n    for x in range(1,num):\n        if arr[x] > max_val:\n            max_val = arr[x]\n        elif arr[x] < min_val:\n            min_val = arr[x]\n    #for every item in the array, calculate the product\n    for y in range(1,num):\n        arr[y] = arr[y]*max_val\n        arr[y] = arr[y]/max_val\n    for y in range(num):\n        if arr[y] > max_val:\n            max_val = arr[y]\n        elif arr[y] < min_val:\n            min_val = arr[y]\n    return (max_val,min_val)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #for sorting the given array\n    arr.sort()\n    #initializing the output array\n    output = []\n    # initializing the maximum product\n    max_product = arr[0]\n    # looping through the array\n    for i in range(len(arr)):\n        # storing the product of the two elements\n        product = arr[i] * arr[i]\n        # if the product is larger than the max product\n        if product > max_product:\n            # update max_product\n            max_product = product\n    # return the tuple with the max product\n    return (max_product, arr.index(max_product))\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    p_arr = []\n    p = []\n    for i in range(len(arr)):\n        p_arr.append(arr[i])\n        if i >= 1:\n            p.append(arr[i] * p_arr[i - 1])\n        else:\n            p.append(p_arr[i - 1])\n    return sorted(p)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    max_Product = arr[0] * arr[0]\n    for i in range(1,n):\n        max_Product = max(max_Product, arr[i] * arr[i])\n    return [max_Product, max_Product]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    max_idx = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_product:\n                max_product = prod\n                max_idx = i\n                idx = j\n    return max_idx, max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if(arr[i]*arr[j]>arr[i]*arr[j-1]):\n                return(arr[i],arr[j])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    #loop through array to find first and last index of pair\n    for i in range(n):\n        for j in range(i+1,n):\n            #find the product between i and j\n            p = arr[i] * arr[j]\n            #check for max product\n            if(p > arr[i]*arr[j]):\n                arr[i],arr[j] = arr[j],arr[i]\n    return arr\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    from heapq import heapify, heappop\n    heapify(arr)\n    for i in range(len(arr)):\n        heappush(arr, -heappop(arr) + heappop(arr))\n    return arr\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # get unique elements in a list\n    unique_list = []\n    for i in range(len(Input)):\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_list = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if (i==j):\n                continue\n            elif Input[i]==Input[j]:\n                continue\n            else:\n                new_list.append(Input[i])\n    return new_list\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    assert len(Input)>0, \"No elements given\"\n    # sort tuple in descending order\n    Input.sort(key=lambda x: -x[0])\n    for i in range(len(Input)-1):\n        if Input[i][0] == Input[i+1][0]:\n            return Input[i][1], Input[i+1][1]\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_First=[]\n    for i in Input:\n        Common_First.append(i[0])\n    return Common_First\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = list(map(tuple, Input))\n    for i in range(len(List)):\n        if List[i] not in List[0:i]:\n            List.pop(i)\n    return List[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output = []\n    output.append(Input[0][0])\n    for i in range(1, len(Input)):\n        if (len(set(Output))) == len(set(Output)):\n            output = []\n            break\n        elif Output[i] == Output[i - 1]:\n            output.append(Output[i])\n    return output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #iterate through the list, find the first element of a tuple and add it to the list\n    #record this for the group so we can print the results later\n    common = []\n    for i in range(len(Input)):\n        if i!= len(Input)-1:\n            if Input[i][0] == Input[i+1][0]:\n                common.append(Input[i][0])\n        else:\n            if Input[i][0] == Input[0][0]:\n                common.append(Input[i][0])\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    First_element = None\n    Second_element = None\n    for element in Input:\n        if First_element == None:\n            First_element = element\n        elif Second_element == None:\n            Second_element = element\n        elif First_element == Second_element:\n            return element\n        elif First_element!= Second_element:\n            return None\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in range(len(Input)): \n        if Input[i][1] == Input[0][1]:\n            Input[i] = (Input[0][0], Input[i][1])\n    return Input\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in range(len(lst)): \n        if lst[i] > max(lst[i + 1:]): \n            max = lst[i] \n    return max \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst:\n        return max(lst)\n    else:\n        return -1\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxLen = 0 \n    for i in lst:\n        if len(i)>maxLen:\n            maxLen = len(i)\n    return maxLen \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    i = 0\n    while(i < len(lst)):\n        if lst[i] > lst[i+1]:\n            lst[i],lst[i+1] = lst[i+1],lst[i]\n        i += 1\n    return lst\n    \nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    lst = Find_Max(lst)\n    print(lst"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst: \n        max = lst[0] \n        for el in lst: \n            if el > max: \n                max = el \n        return max \n    else: \n        return 0"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst: \n        if i > max: \n            max = i\n    return max\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    total = 0\n    # loop through the list\n    for x in list1:\n        # if number is odd\n        if x % 2 == 1:\n            # add the number to the list\n            rounded_list.append(x)\n            # add the total to the total\n            total += x\n            # if the length of the list is even print the sum\n            if len(list1) % 2 == 0:\n                print(f'{total}')\n                total = 0\n            # if the length of the list is odd, print the sum\n            else:\n                print(f'{total}')\n                total = 0\n        # if number is even\n        else:\n            # add the number to the list\n            rounded_list.append(x)\n            # add the total to the total\n            total += x\n            # if the length of the list is even print the sum\n            if len(list1) % 2 == 0:\n                print(f'{total}')\n                total = 0\n            # if the length of the list is odd, print the sum\n            else:\n                print(f'{total}')\n                total = 0\n    print(f'The list is {list1}')\n    print(f'The total sum is {total}')\n    \n    \nlist1 = [1, 2, 3, 4, 5]\nround_and_sum(list1)"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([float(num) for num in list1])\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    total_length = len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = list(map(int, list1))\n    list1 = list(map(lambda x: round(x,2), list1))\n    return sum(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_ = 0\n    for i in range(len(list1)):\n        sum_ += list1[i]\n    return sum_ * len(list1)\n    \ndef main():\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    print(round_and_sum(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_list = []\n    for i in list1:\n        total = round(i*len(list1),2)\n        total_list.append(total)\n    print(total_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Write your code here\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_num = 1\n    for i in list1:\n        round_num = round_num + 1\n        total = 0\n        for j in range(round_num):\n            total = total + i\n        print(round_num, total)\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            count += i\n    return count\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    print(sum)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # check if it is a number and is positive\n    if not type(n) == int or n < 0:\n        raise TypeError(\"n must be an integer\")\n    # make sure the number is not negative\n    if n < 0:\n        raise ValueError(\"n must be an integer greater than or equal to zero\")\n    \n    # initialize a list of first n even numbers\n    even_numbers = list(range(1, n+1, 2))\n    \n    # initialize a sum variable\n    sum = 0\n    \n    # iterate through the even numbers\n    for n in even_numbers:\n        # add the sum of the even numbers together\n        sum += n\n        # print a message to the console\n        print(\"Sum =\", sum)\n    # return the sum\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    if n%2==0: \n        return n*n*n\n    else: \n        return n*(n+1)*(n+2)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    num = 0\n    if n % 2 == 0:\n        print(\"This number is even\")\n        num = (n**3)\n    else:\n        print(\"This number is odd\")\n        num = (n**3) + (n**2)\n    print(num)\n    return num\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result=[]\n    if n<0:\n        print(\"Error, natural numbers must be positive\")\n        return 0\n    for i in range(1,n+1):\n        x=1\n        while x<=i:\n            x=x*x\n            result.append(x)\n        return sum(result)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum = sum + i\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for num in range(1,n+1):\n        cube_sum = cube_sum + num*(num**2)\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for num in range(1,n+1):\n        sum=sum+num**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += i * i * i\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup += (test_tup[i])\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if type(test_tup) is tuple:\n        return tuple(map(lambda x: x + test_tup[0], test_tup[1:]))\n    else:\n        return (test_tup[0] + test_tup[1:])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #Create empty tuples\n    list_tuple=[]\n    #Use a for loop to iterate through each element of a tuple\n    for i in range(len(test_tup)):\n        #Add each element of a tuple to a list\n        list_tuple.append(test_tup[i])\n    #Return the concatenation of each element of a tuple\n    return tuple(list_tuple)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = test_tup[0]\n    return ', '.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # If tuple is empty, just return the tuple\n    if len(test_tup) < 2:\n        return tuple(test_tup)\n    else:\n        # If tuple contains more than 2 items, convert the last item to a tuple,\n        # and return it.\n        if len(test_tup) > 2:\n            return tuple([test_tup[0], test_tup[1], test_tup[2]])\n        else:\n            # If tuple contains one item, return it\n            return tuple([test_tup[0]])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # concat = test_tup[0] + test_tup[1] + test_tup[2] + test_tup[3]\n    concat = str(test_tup[0]) + str(test_tup[1]) + str(test_tup[2]) + str(test_tup[3])\n    return(concat)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    print(f\"Concatenating tuple: {test_tup}\")\n    return tuple([_ + ','for _ in test_tup])\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '|'.join(map(str, test_tup))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print('Find Average Of Cubes: ')\n    for i in range(1, n+1):\n        print(i, 'X', i**2, '=', i**3)\n    return (i**3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n + 1):\n        cubes.append(i * i * i)\n    return sum(cubes) / (len(cubes) * 3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    ans=[]\n    for i in range(1,n+1):\n        ans.append(i**3)\n    print(ans)\n    return sum(ans)/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = int(n)\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    print(cubes)\n    return sum(cubes) / len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    i = 1\n    while(i <= n):\n        total += i\n        i += 1\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    return sum(cubes)/len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print('Using Python find_Average_Of_Cube function')\n    A = 0\n    for i in range(1, n+1):\n        A = A + i**3\n    print(A/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    a=[]\n    for i in range(1, n + 1):\n        a.append(i * i * i)\n    sum=0\n    for i in a:\n        sum=sum+i\n    ave=sum/n\n    return ave\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num_list = []\n    for i in range(n):\n        num_list.append(i**3)\n    \n    average = sum(num_list)/n\n    print(\"Average of cubes of first {} natural numbers is {}\".format(n, average))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = []\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        if string.startswith('Rear'):\n            rear_index.append(test_tuple.index(string))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    r_elements = []\n    for string in test_tuple:\n        r_elements.append(string[-1])\n    return r_elements\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for index, value in enumerate(test_tuple):\n        if value[0] == 'r':\n            return index\n    return -"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for element in test_tuple:\n        if element[-1]!='':\n            rear_index_elements.append(element[-1])\n    return rear_index_elements\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    assert len(test_tuple) % 2 == 1\n    assert isinstance(test_tuple[0], str), \"The first element of the tuple must be a string.\"\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = list(test_tuple)\n    rear = []\n    rear.append(test_tuple[0])\n    for element in test_tuple[1:]:\n        rear.append(element)\n    return tuple(rear)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i][-1] == '{':\n            test_tuple[i] = test_tuple[i][:-1]\n        elif test_tuple[i][-1] == '}':\n            test_tuple[i] = test_tuple[i][:-1]\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    a = test_tuple[0]\n    b = test_tuple[1]\n    c = test_tuple[2]\n    d = test_tuple[3]\n    e = test_tuple[4]\n    f = test_tuple[5]\n    g = test_tuple[6]\n    h = test_tuple[7]\n    i = test_tuple[8]\n    j = test_tuple[9]\n    k = test_tuple[10]\n    l = test_tuple[11]\n    m = test_tuple[12]\n    n = test_tuple[13]\n    o = test_tuple[14]\n    p = test_tuple[15]\n    q = test_tuple[16]\n    r = test_tuple[17]\n    s = test_tuple[18]\n    t = test_tuple[19]\n    u = test_tuple[20]\n    v = test_tuple[21]\n    w = test_tuple[22]\n    x = test_tuple[23]\n    y = test_tuple[24]\n    z = test_tuple[25]\n    a = a[0:len(a):]\n    b = b[0:len(b):]\n    c = c[0:len(c):]\n    d = d[0:len(d):]\n    e = e[0:len(e):]\n    f = f[0:len(f):]\n    g = g[0:len(g):]\n    h = h[0:len(h):]\n    i = i[0:len(i):]\n    j = j[0:len(j):]\n    k = k[0:len(k):]\n    l = l[0:len(l):]\n    m = m[0:len(m):]\n    n = n[0:len(n):]\n    o = o[0:len(o):]\n    p = p[0:len(p):]\n    q = q[0:len(q):]\n    r = r[0:len(r):]\n    s = s[0:len(s):]\n    t = t[0:len(t):]\n    u = u[0:len(u):]\n    v = v[0:len(v):]\n    w = w[0:len(w):]\n    x = x[0:len(x):]\n    y = y[0:len(y):]\n    z = z[0:len(z):]\n    a = a[0:len(a):]\n    b = b[0:len(b):]\n    c = c[0:len(c):]\n    d = d[0:len(d):]\n    e = e[0:len(e):]\n    f = f[0:len(f):]\n    g = g[0:len(g):]\n    h = h[0:len(h):]\n    i = i[0:len(i):]\n    j = j[0:len(j):]\n    k = k[0:len(k):]\n    l = l[0:len(l):]\n    m = m[0:len(m):]\n    n = n[0:len(n):]\n    o = o[0:len(o):]\n    p = p[0:len(p):]\n    q = q[0:len(q):]\n    r = r[0:len(r):]\n    s = s[0:len(s):]\n    t = t[0:len(t):]\n    u = u[0:len(u):]\n    v = v[0:len(v):]\n    w = w[0:len(w):]\n    x = x[0:len(x):]\n    y = y[0:len(y):]\n    z = z[0:len(z):]\n    a = a[0:len(a):]\n    b = b[0:len(b):]\n    c = c[0:len(c):]\n    d = d[0:len(d):]\n    e = e[0:len(e):]\n    f = f[0:len(f):]\n    g = g[0:len(g):]\n    h = h[0:len(h):]\n    i = i[0:len(i):]\n    j = j[0:len(j):]\n    k = k[0:len(k):]\n    l = l[0:len(l):]\n    m = m[0:len(m):]\n    n = n[0:len(n):]\n    o = o[0:len(o):]\n    p = p[0:len(p):]\n    q = q[0:len(q):]\n    r = r[0:len(r):]\n    s = s[0:len(s):]\n    t = t[0:len(t):]\n    u = u[0:len(u):]\n    v = v[0:len(v):]\n    w = w[0:len(w):]\n    x = x[0:len(x):]\n    y = y[0:len(y):]\n    z = z[0:len(z):]\n    a = a[0:len(a):]\n    b = b[0:len(b):]\n    c = c[0:len(c):]\n    d = d[0:len(d):]\n    e = e[0:len(e):]\n    f = f[0:len(f):]\n    g = g[0:len(g):]\n    h = h[0:len(h):]\n    i = i[0:len(i):]\n    j = j[0:len(j):]\n    k = k[0:len(k):]\n    l = l[0:len(l):]\n    m = m[0:len(m):]\n    n = n[0:len(n):]\n    o = o[0:len(o):]\n    p = p[0:len(p):]\n    q = q[0:len(q):]\n    r = r[0:len(r):]\n    s = s[0:len(s):]\n    t = t[0:len(t):]\n    u = u[0:len(u):]\n    v = v[0:len(v):]\n    w = w[0:len(w):]\n    x = x[0:len(x):]\n    y = y[0:len(y):]\n    z = z[0:len(z):]\n    a = a[0:len(a):]\n    b = b[0:len(b):]\n    c = c[0:len(c):]\n    d = d[0:len(d):]\n    e = e[0:len(e):]\n    f = f[0:len(f):]\n    g = g[0:len(g):]\n    h = h[0:len(h):]\n    i = i[0:len(i):]\n    j = j[0:len(j):]\n    k = k[0:len(k):]\n    l = l[0:len(l):]\n    m = m[0:len(m):]\n    n = n[0:len(n):]\n    o = o[0:len(o):]\n    p = p[0:len(p):]\n    q = q[0:len(q):]\n    r = r[0:len(r):]\n    s = s[0:len(s):]\n    t = t[0:len(t):]\n    u = u[0:len(u):]\n    v = v[0:len(v):]\n    w = w[0:len(w):]\n    x = x[0:len(x):]\n    y = y[0:len(y):]\n    z = z[0:len(z):]\n    a = a[0:len(a):]\n    b = b[0:len(b):]\n    c = c["
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[3]\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in list1:\n        if(i == x):\n            c += 1\n    return c\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    # if the list is empty, return 0\n    if len(list1) == 0:\n        return 0\n    \n    # create an empty array to store the count\n    count = []\n    # iterate through the list and create a count of every element in it\n    for item in list1:\n        if item == x:\n            count.append(list1.count(item))\n    # return the count\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    x = list(x)\n    \n    for sublist in list1:\n        if list(sublist).count(x) > 0:\n            print(f\"Found {list(sublist).count(x)} element in sublist {x}\")\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if sublist[x] == \"True\": \n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    # Your code here\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if(list1[i]==x):\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i][x] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            filtered_nums.append(num)\n    return filtered_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    l = list(nums)\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l[i] = l[i] // 2\n    return [x for x in l if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums.sort()\n    odd = []\n    for i in nums:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            filtered_nums.append(num)\n    return filtered_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums_odd=[]\n    for num in nums:\n        if num%2!=0:\n            nums_odd.append(num)\n    return nums_odd\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    new_list = []\n    for num in nums:\n        if num % 2 == 1:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #This function accepts a list as a parameter and return a list with odd numbers removed\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    res=[]\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            res.append(nums[i])\n    return res\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n    \ndef run():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    oddnums = filter_oddnumbers(nums)\n    print(oddnums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        return dt\n    else:\n        return '{}-{}-{}'.format(dt[0:4], dt[4:6], dt[6:8])\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = dt\n    new_dt = new_dt.split('-')\n    for i in range(len(new_dt)):\n        new_dt[i] = re.split('/', new_dt[i])\n        if len(new_dt[i]) == 2:\n            new_dt[i] = new_dt[i][0] + '/' + new_dt[i][1] + '-' + new_dt[i][2]\n    return '-'.join(new_dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    p = re.compile(r'^\\d{4}-\\d{2}-\\d{2}$')\n    d = dt.split('-')\n    if len(d)!= 3:\n        raise ValueError('Wrong date format')\n    if not p.match(d[0]):\n        raise ValueError('Wrong date format')\n    if not p.match(d[1]):\n        raise ValueError('Wrong date format')\n    if not p.match(d[2]):\n        raise ValueError('Wrong date format')\n    dd = d[0]\n    mm = d[1]\n    yy = d[2]\n    if len(dd) == 2:\n        dd = '0' + dd\n    if len(mm) == 2:\n        mm = '0' + mm\n    if len(yy) == 2:\n        yy = '0' + yy\n    if len(yy) == 4:\n        yy = '0' + yy\n    return dd + mm + yy\n    \ndef change_date_year(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    p = re.compile(r'^\\d{4}-\\d{2}-\\d{2}$')\n    d = dt.split('-')\n    if len(d)!= 3:\n        raise ValueError('Wrong date format')\n    if not p.match(d[0]):\n        raise ValueError('Wrong date format')\n    if not p.match(d[1]):\n        raise ValueError('Wrong date format')\n    if not p.match(d[2]):\n        raise ValueError('Wrong date format')\n    dd = d[0]\n    mm = d[1]\n    yy = d[2]\n    if len(dd) == 2:\n        dd = '0' + dd\n    if len(mm) == 2:\n        mm = '0' + mm\n    if len(yy) == 2:\n        yy = '0' + yy\n    if len(yy) == 4:\n        yy = '0' + yy\n    return dd + mm + yy\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # We can split the date into the yyyy, mm, and dd.\n    # This might be confusing, but it'll work.\n    date = dt.split('-')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt[0:2]=='19':\n        dt = '0'+dt[2:4] + '-' + dt[4:6] + '-' + dt[6:8]\n    elif dt[0:2]=='20':\n        dt = '0'+dt[2:4] + '-' + dt[4:6] + '-' + dt[6:8] + '0'\n    else:\n        dt = '0'+dt[2:4] + '-' + dt[4:6] + '-' + dt[6:8]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.search(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    if match is None:\n        raise Exception(\"Wrong date format!\")\n    year, month, day = match.group(1), match.group(2), match.group(3)\n    date = \"0\" + day + \"-\" + month + \"-\" + year\n    return date\n    \ndef format_date(dt):\n    '''\n    Write a function to format a date of dd-mm-yyyy format to yyyy-mm-dd format.\n    '''\n    date = change_date_format(dt)\n    return date + \".md\"\n    \ndef format_count_date(dt):\n    '''\n    Write a function to format a date of dd-mm-yyyy format to yyyy-mm-dd format.\n    '''\n    date = change_date_format(dt)\n    return date + \".xlsx\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_list = []\n    day = int(dt.split('-')[0])\n    month = int(dt.split('-')[1])\n    year = int(dt.split('-')[2])\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt=dt.replace(\"-\",\"\")\n    dt=dt.replace(\"(\",\"\")\n    dt=dt.replace(\")\",\"\")\n    dt=dt.replace(\" \",\"\")\n    dt=dt.split(\"-\")\n    dd=dt[0]\n    mm=dt[1]\n    yy=dt[2]\n    return(dd+\"-\"+mm+\"-\"+yy)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match_date = re.match(r'(\\d\\d)-(\\d\\d)-(\\d\\d)', dt)\n    if match_date:\n        year, month, day = match_date.groups()\n        year = int(year)\n        month = int(month)\n        day = int(day)\n        dt = f'{year}-{month}-{day}'\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(dt)\n    return dt.replace('-', '-')\ndef create_table(s):\n    '''\n    Write a function to create a table of all the entities in a given text.\n    '''\n    t = []\n    t.append(['id', 'title', 'description', 'url', 'title_raw', 'url_raw'])\n    t.append(['id', 'title', 'description', 'url', 'title_raw', 'url_raw'])\n    for i in s:\n        t.append(i)\n    return t\ndef save_table(t, filename):\n    '''\n    Write a function to save the table to a file.\n    '''\n    t = t[: len(t) - 1]\n    with open(filename, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(t)\ndef check_title(title):\n    '''\n    Write a function to check if a title is present.\n    '''\n    return title.strip()!= ''\ndef is_url(url):\n    '''\n    Write a function to check if a url is present.\n    '''\n    return url.strip()!= ''\ndef is_title(title):\n    '''\n    Write a function to check if a title is present.\n    '''\n    return title.strip()!= ''\ndef get_title(title):\n    '''\n    Write a function to get the title of a page.\n    '''\n    print(title)\n    return title.strip()\ndef get_description(description):\n    '''\n    Write a function to get the description of a page.\n    '''\n    print(description)\n    return description.strip()\ndef get_url(url):\n    '''\n    Write a function to get the url of a page.\n    '''\n    print(url)\n    return url.strip()\ndef get_url_raw(url):\n    '''\n    Write a function to get the raw url of a page.\n    '''\n    print(url)\n    return url\ndef get_title_raw(title):\n    '''\n    Write a function to get the raw title of a page.\n    '''\n    print(title)\n    return title\ndef get_description_raw(description):\n    '''\n    Write a function to get the raw description of a page.\n    '''\n    print(description)\n    return description\ndef get_title_format(title):\n    '''\n    Write a function to get the format of a title.\n    '''\n    print(title)\n    return title\ndef get_description_format(description):\n    '''\n    Write a function to get the format of a description.\n    '''\n    print(description)\n    return description\ndef get_url_format(url):\n    '''\n    Write a function to get the format of a url.\n    '''\n    print(url)\n    return url\ndef get_url_raw_format(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_title_raw_format(title):\n    '''\n    Write a function to get the raw format of a title.\n    '''\n    print(title)\n    return title\ndef get_description_raw_format(description):\n    '''\n    Write a function to get the raw format of a description.\n    '''\n    print(description)\n    return description\ndef get_url_format_raw(url):\n    '''\n    Write a function to get the format of a url.\n    '''\n    print(url)\n    return url\ndef get_url_raw_format_raw(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_title_format_raw(title):\n    '''\n    Write a function to get the format of a title.\n    '''\n    print(title)\n    return title\ndef get_description_format_raw(description):\n    '''\n    Write a function to get the format of a description.\n    '''\n    print(description)\n    return description\ndef get_url_format_raw_raw(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_title_format_raw_raw(title):\n    '''\n    Write a function to get the raw format of a title.\n    '''\n    print(title)\n    return title\ndef get_description_format_raw_raw(description):\n    '''\n    Write a function to get the raw format of a description.\n    '''\n    print(description)\n    return description\ndef get_url_format_raw_raw_raw(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_title_raw_raw_raw(title):\n    '''\n    Write a function to get the raw format of a title.\n    '''\n    print(title)\n    return title\ndef get_description_raw_raw_raw(description):\n    '''\n    Write a function to get the raw format of a description.\n    '''\n    print(description)\n    return description\ndef get_title_raw_raw_raw(title):\n    '''\n    Write a function to get the raw format of a title.\n    '''\n    print(title)\n    return title\ndef get_description_raw_raw_raw(description):\n    '''\n    Write a function to get the raw format of a description.\n    '''\n    print(description)\n    return description\ndef get_url_raw_raw_raw(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_url_raw_raw_raw(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_title_raw_raw_raw(title):\n    '''\n    Write a function to get the raw format of a title.\n    '''\n    print(title)\n    return title\ndef get_description_raw_raw_raw(description):\n    '''\n    Write a function to get the raw format of a description.\n    '''\n    print(description)\n    return description\ndef get_url_raw_raw_raw(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_url_raw_raw_raw(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_title_format_raw_raw(title):\n    '''\n    Write a function to get the format of a title.\n    '''\n    print(title)\n    return title\ndef get_description_format_raw_raw(description):\n    '''\n    Write a function to get the format of a description.\n    '''\n    print(description)\n    return description\ndef get_url_format_raw_raw_raw(url):\n    '''\n    Write a function to get the format of a url.\n    '''\n    print(url)\n    return url\ndef get_url_raw_raw_raw_raw(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_title_raw_raw_raw_raw(title):\n    '''\n    Write a function to get the raw format of a title.\n    '''\n    print(title)\n    return title\ndef get_description_raw_raw_raw_raw(description):\n    '''\n    Write a function to get the raw format of a description.\n    '''\n    print(description)\n    return description\ndef get_url_raw_raw_raw_raw(url):\n    '''\n    Write a function to get the raw format of a url.\n    '''\n    print(url)\n    return url\ndef get_url_raw_raw_raw_raw(url):"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Write your code here\n    print(my_list)\n    n = len(my_list)\n    print(\"Array before sorting:\")\n    print(my_list)\n    print(\"Array after sorting:\")\n    print(my_list)\n    i = 0\n    while i < n - 1:\n        j = i\n        while j > 0:\n            if my_list[j] < my_list[j - 1]:\n                my_list[j], my_list[j - 1] = my_list[j - 1], my_list[j]\n                j -= 1\n            j -= 1\n        i += 1\n        print(my_list)\n    print(\"Array after sorting:\")\n    print(my_list)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n    while gap >= 1:\n        for i in range(gap, len(my_list)):\n            value = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > value:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = value\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap >= 1:\n        for i in range(gap, n):\n            j = i\n            while my_list[j] < my_list[i] and j >= gap:\n                j = j - gap\n            my_list[j], my_list[i] = my_list[i], my_list[j]\n        gap = gap - 1\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    for i in range(n-1):\n        for j in range(n-i-1):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # print(\"shell sort\",my_list)\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Write your code here.\n    l = len(my_list)\n    # The loop runs the size of the list\n    for i in range(l):\n        for j in range(0, l-i-1):\n            # We are keeping the index values of the left half, the right half\n            # and index of the middle half\n            if j % 2 == 0:\n                # We are using the middle half\n                temp = my_list[j]\n                # We are using the left half\n                my_list[j] = my_list[j+1]\n                # We are using the right half\n                my_list[j+1] = temp\n            else:\n                # We are using the right half\n                temp = my_list[j]\n                # We are using the left half\n                my_list[j] = my_list[j-1]\n                # We are using the right half\n                my_list[j-1] = temp\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for iter_num in range(0, len(my_list), 1):\n        for start_index in range(iter_num, len(my_list), 1):\n            for index in range(start_index, len(my_list), 1):\n                if my_list[index] > my_list[index + 1]:\n                    temp = my_list[index]\n                    my_list[index] = my_list[index + 1]\n                    my_list[index + 1] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def bubble_sort(my_list, first_index, last_index):\n        '''\n        Write a function to sort the given array by using shell sort.\n        '''\n        for i in range(first_index, last_index):\n            if my_list[i] > my_list[i+1]:\n                my_list[i], my_list[i+1] = my_list[i+1], my_list[i]\n    \n    def shell_sort(my_list):\n        '''\n        Write a function to sort the given array by using shell sort.\n        '''\n        index = 1\n        while index < len(my_list):\n            for j in range(index, len(my_list)):\n                if my_list[j] > my_list[j-1]:\n                    my_list[j], my_list[j-1] = my_list[j-1], my_list[j]\n            index += 1\n    \n    def merge_sort(my_list):\n        '''\n        Write a function to sort the given array by using merge sort.\n        '''\n        def sort_core(my_list, first_index, last_index):\n            '''\n            Write a function to sort the given array by using merge sort.\n            '''\n            if first_index < last_index:\n                pivot_index = partition(my_list, first_index, last_index)\n                sort_core(my_list, first_index, pivot_index)\n                sort_core(my_list, pivot_index+1, last_index)\n        \n        def partition(my_list, first_index, last_index):\n            '''\n            Write a function to sort the given array by using merge sort.\n            '''\n            pivot = my_list[last_index]\n            my_list[first_index], my_list[last_index] = my_list[last_index], my_list[first_index]\n            i = first_index\n            j = last_index - 1\n            while i < j:\n                if my_list[i] < pivot:\n                    my_list[i+1] = my_list[i]\n                    i += 1\n                else:\n                    my_list[j] = my_list[j]\n                    j -= 1\n            my_list[first_index] = pivot\n            return j\n        \n        sort_core(my_list, 0, len(my_list)-1)\n    \n    my_list = [10, 7, 5, 9, 8, 6]\n    bubble_sort(my_list)\n    print(my_list)\n    \n    my_list = [15, 10, 5, 15, 8, 5, 4, 10]\n    shell_sort(my_list)\n    print(my_list)\n    \n    my_list = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n    merge_sort(my_list)\n    print(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n    while gap >= 1:\n        for i in range(gap,len(my_list)):\n            temp = my_list[i]\n            j = i\n            while my_list[j-gap] > temp and j >= gap:\n                my_list[j] = my_list[j-gap]\n                j-= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] or test_tup1[1], test_tup2[0] or test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The given tuples must be of equal length.\")\n    return test_tup1[0] and test_tup2[0] and test_tup1[1] and test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = test_tup1 + test_tup2\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # your code goes here\n    result = test_tup1.__and__(test_tup2)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a_tuple = test_tup1[0]\n    b_tuple = test_tup2[0]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #Remove any values that are not of type tuple\n    #E.g. (1,2,3) and (4,5,6)\n    test_tup1 = tuple(filter(lambda x: x is not None, test_tup1))\n    test_tup2 = tuple(filter(lambda x: x is not None, test_tup2))\n    #Extract the elements of tuples\n    extracted_test_tup1 = list(test_tup1)\n    extracted_test_tup2 = list(test_tup2)\n    #Remove the tuples that are not of type tuple\n    extracted_test_tup1 = tuple(filter(lambda x: x is not None, extracted_test_tup1))\n    extracted_test_tup2 = tuple(filter(lambda x: x is not None, extracted_test_tup2))\n    #Return the tuple that has the elements of both tuples\n    return extracted_test_tup1, extracted_test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup = test_tup1 + test_tup2\n    return tup\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'tuples are not equal'\n    res_list = []\n    for index in range(len(test_tup1)):\n        res_list.append(test_tup1[index] + test_tup2[index])\n    return res_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = []\n    for x in test_tup1:\n        for y in test_tup2:\n            res.append(x + y)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def find_directrix(a, b, c):\n        x1 = (-b + np.sqrt(b*b - 4*a*c)) / (2*a)\n        x2 = (-b - np.sqrt(b*b - 4*a*c)) / (2*a)\n        return np.array([x1, x2])\n    return find_directrix(a, b, c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = float(a)\n    x2 = float(b)\n    x3 = float(c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola(x, y, z):\n        '''\n        Computation of a parabola\n        '''\n        return (1/2)*(y-z**2)*(1-x**2)+2*x*(y-z**2)*(1-x**2)\n    return parabola(x, y, z)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a+b*(c**2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*b)/(a**2 + c**2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def direct_eval(x):\n        return (a*x**2 + b*x + c)\n    def parabola_eval(x):\n        return (a*x**2 + c)\n    return (direct_eval, parabola_eval)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if type(a)!= int or type(b)!= int or type(c)!= int:\n        return 'Please enter the coordinates for a, b, and c respectively'\n    \n    a_square = (a * a)\n    b_square = (b * b)\n    c_square = (c * c)\n    \n    if (a_square + b_square == c_square):\n        print('Parabola is parallel to the line')\n    elif (b_square + a_square == c_square):\n        print('Parabola is parallel to the line')\n    elif (a_square == c_square):\n        print('Parabola is not parallel to the line')\n    else:\n        print('Parabola is not parallel to the line')\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((b*b-4*a*c)**0.5)/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola_directrix(a, b, c): \n        parabola_x = ((b**2)*(c**2)) - (a*c) \n        return parabola_x\n    if a == 0 and b == 0:\n        if c == 0:\n            return 0\n        else:\n            return parabola_directrix(a, b, c) \n    else:\n        x1 = (parabola_directrix(a, b, c) / (b**2)) \n        x2 = (parabola_directrix(a, b, c - x1) / (b**2)) \n        x3 = (parabola_directrix(a, b, c + x1) / (b**2)) \n        return (x1, x2, x3) \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # You have to write your code here\n    x = (b**2 - (4*a*c))/(2*a)\n    y = ((b**2 - x**2)**2) - 4*a*c\n    return x,y\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = True\n    for item in list1:\n        if item in list2:\n            common = False\n        else:\n            common = True\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return (len(list1)!= len(list2)) and any(item in list2 for item in list1)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # make a copy of both lists\n    list1Copy = list1\n    list2Copy = list2\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    if len(list1) == len(list2):\n        common = True\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # your code here\n    if len(list1) == len(list2):\n        for i in list1:\n            if i in list2:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Write your code here\n    list1_set = set(list1)\n    list2_set = set(list2)\n    common_element = list1_set.intersection(list2_set)\n    if len(common_element)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element_list = []\n    for el in list1:\n        for x in list2:\n            if el == x:\n                common_element_list.append(el)\n    return len(common_element_list)!= 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        return list1 == list2\n    else:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1+base2>=height:\n        return base1+base2\n    elif base1>base2:\n        return base2+base1\n    else:\n        return base1+base2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_x = [float(x) for x in base1.split(',')]\n    base2_x = [float(x) for x in base2.split(',')]\n    \n    median = 0.0\n    \n    for i in range(len(base1_x)):\n        median += base1_x[i]*(base2_x[i] - base1_x[i])\n    \n    return median/2.0\n    \ndef median_trapezium_c(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_x = [float(x) for x in base1.split(',')]\n    base2_x = [float(x) for x in base2.split(',')]\n    \n    median = 0.0\n    \n    for i in range(len(base1_x)):\n        median += base1_x[i]*(base2_x[i] - base1_x[i])\n    \n    return median/2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #store the trapezium lengths\n    l_trapezium = [ base1, base2 ]\n    for i in range(1, height + 1):\n        #find the next triangular height\n        tri = base2 + (i - 1) / 2\n        #add all the trapezium lengths together\n        l_trapezium.append( l_trapezium[i-1] + tri )\n    #find the median\n    return sum(l_trapezium[-1]) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = median_trapezium(base1,mid,height)\n    mid = median_trapezium(mid,base2,height)\n    return (top + mid) / 2\n    \ndef sum_trapezium(base1,base2,height):\n    '''\n    Write a function to find the sum of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    top = sum_trapezium(base1,base2,height)\n    mid = sum_trapezium(base1,mid,height)\n    return top + mid\n    \ndef count_trapezium(base1,base2,height):\n    '''\n    Write a function to find the count of a trapezium.\n    '''\n    if base1 == base2:\n        return 1\n    mid = (base1 + base2) // 2\n    top = count_trapezium(base1,mid,height)\n    mid = count_trapezium(mid,base2,height)\n    return top + mid\n    \ndef add_trapezium(base1,base2,height):\n    '''\n    Write a function to calculate the sum of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = add_trapezium(base1,mid,height)\n    mid = add_trapezium(mid,base2,height)\n    return top + mid\n    \ndef sub_trapezium(base1,base2,height):\n    '''\n    Write a function to calculate the sum of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = sub_trapezium(base1,mid,height)\n    mid = sub_trapezium(mid,base2,height)\n    return top + mid\n    \ndef length_trapezium(base1,base2,height):\n    '''\n    Write a function to calculate the length of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = length_trapezium(base1,mid,height)\n    mid = length_trapezium(mid,base2,height)\n    return top + mid\n    \ndef area_trapezium(base1,base2,height):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = area_trapezium(base1,mid,height)\n    mid = area_trapezium(mid,base2,height)\n    return top + mid\n    \ndef perimeter_trapezium(base1,base2,height):\n    '''\n    Write a function to calculate the perimeter of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = perimeter_trapezium(base1,mid,height)\n    mid = perimeter_trapezium(mid,base2,height)\n    return top + mid\n    \ndef area_trapezium_sum(base1,base2,height):\n    '''\n    Write a function to calculate the sum of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    top = area_trapezium_sum(base1,mid,height)\n    mid = area_trapezium_sum(mid,base2,height)\n    return top + mid\n    \ndef perimeter_trapezium_sum(base1,base2,height):\n    '''\n    Write a function to calculate the sum of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    top = perimeter_trapezium_sum(base1,mid,height)\n    mid = perimeter_trapezium_sum(mid,base2,height)\n    return top + mid\n    \ndef area_trapezium_count(base1,base2,height):\n    '''\n    Write a function to calculate the count of a trapezium.\n    '''\n    if base1 == base2:\n        return 1\n    mid = (base1 + base2) // 2\n    top = area_trapezium_count(base1,mid,height)\n    mid = area_trapezium_count(mid,base2,height)\n    return top + mid\n    \ndef perimeter_trapezium_count(base1,base2,height):\n    '''\n    Write a function to calculate the count of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = perimeter_trapezium_count(base1,mid,height)\n    mid = perimeter_trapezium_count(mid,base2,height)\n    return top + mid\n    \ndef perimeter_trapezium_count_sum(base1,base2,height):\n    '''\n    Write a function to calculate the sum of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = perimeter_trapezium_count_sum(base1,mid,height)\n    mid = perimeter_trapezium_count_sum(mid,base2,height)\n    return top + mid\n    \ndef perimeter_trapezium_count_sum_sum(base1,base2,height):\n    '''\n    Write a function to calculate the sum of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    top = perimeter_trapezium_count_sum_sum(base1,mid,height)\n    mid = perimeter_trapezium_count_sum_sum(mid,base2,height)\n    return top + mid\n    \ndef perimeter_trapezium_count_sum_sum_sum(base1,base2,height):\n    '''\n    Write a function to calculate the sum of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    top = perimeter_trapezium_count_sum_sum_sum(base1,mid,height)\n    mid = perimeter_trapezium_count_sum_sum_sum(mid,base2,height)\n    top = perimeter_trapezium_count_sum_sum_sum(mid,base1,height)\n    return top + mid\n    \ndef length_trapezium_count_sum_sum(base1,base2,height):\n    '''\n    Write a function to calculate the length of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = length_trapezium_count_sum_sum(base1,mid,height)\n    mid = length_trapezium_count_sum_sum(mid,base2,height)\n    return top + mid\n    \ndef perimeter_trapezium_count_sum_sum_sum(base1,base2,height):\n    '''\n    Write a function to calculate the perimeter of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = perimeter_trapezium_count_sum_sum(base1,mid,height)\n    mid = perimeter_trapezium_count_sum_sum(mid,base2,height)\n    top = perimeter_trapezium_count_sum_sum(base1,base2,height)\n    return top + mid\n    \ndef perimeter_trapezium_count_sum_sum_sum(base1,base2,height):\n    '''\n    Write a function to calculate the sum of a trapezium.\n    '''\n    if base1 == base2:\n        return height\n    mid = (base1 + base2) // 2\n    top = perimeter_trapezium_count_sum_sum_sum(base1,mid,height)\n    mid = perimeter_trapezium_count_sum_sum_sum(mid,base2,height)"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<base2:\n        base = base1\n        height = height/2\n    else:\n        base = base2\n        height = height/2\n    #define base and height\n    base_height = base-height\n    height_height = height*height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Base case\n    if height == 0 or (base1==base2):\n        return height\n    elif height < base1 or height < base2:\n        return 0\n    else:\n        return base1 + (base2-base1) / 2 + ((height-base1)/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    left_length=0\n    right_length=0\n    total_length=0\n    for i in range(height):\n        if i==0:\n            left_length=base1\n            right_length=base2\n        elif i==height-1:\n            left_length=base1+base2\n            right_length=base1+base2+left_length\n        else:\n            left_length=base1+base2+min(base1,base2)\n            right_length=base1+base2+max(base1,base2)\n        total_length+=left_length+right_length\n    return total_length/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        if n==2:\n            return 0.5*(base1+base2)\n        if n==3:\n            return 0.25*(base1+base2)\n        return trapezium(n-1) + trapezium(n-2) + trapezium(n-3)\n    \n    if trapezium(1)==base1 or trapezium(2)==base1 or trapezium(3)==base1:\n        return base1\n    return trapezium(4)\n    \n    \ndef median_trapezium_bis(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        if n==2:\n            return 0.5*(base1+base2)\n        return trapezium(n-1) + trapezium(n-2)\n    \n    if trapezium(1)==base1 or trapezium(2)==base1 or trapezium(3)==base1:\n        return base1\n    return trapezium(4)\n    \n    \ndef median_trapezium_s(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        if n==2:\n            return 0.5*(base1+base2)\n        return trapezium(n-1) + trapezium(n-2)\n    \n    if trapezium(1)==base1 or trapezium(2)==base1 or trapezium(3)==base1:\n        return base1\n    return trapezium(4)\n    \n    \ndef median_trapezium_m(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        if n==2:\n            return 0.5*(base1+base2)\n        return trapezium(n-1) + trapezium(n-2)\n    \n    if trapezium(1)==base1 or trapezium(2)==base1 or trapezium(3)==base1:\n        return base1\n    return trapezium(4)\n    \n    \n    \ndef median_trapezium_b(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        if n==2:\n            return 0.5*(base1+base2)\n        return trapezium(n-1) + trapezium(n-2)\n    \n    if trapezium(1)==base1 or trapezium(2)==base1 or trapezium(3)==base1:\n        return base1\n    return trapezium(4)\n    \n    \ndef median_trapezium_h(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        if n==2:\n            return 0.5*(base1+base2)\n        return trapezium(n-1) + trapezium(n-2)\n    \n    if trapezium(1)==base1 or trapezium(2)==base1 or trapezium(3)==base1:\n        return base1\n    return trapezium(4)\n    \n    \ndef median_trapezium_i(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        if n==2:\n            return 0.5*(base1+base2)\n        return trapezium(n-1) + trapezium(n-2)\n    \n    if trapezium(1)==base1 or trapezium(2)==base1 or trapezium(3)==base1:\n        return base1\n    return trapezium(4)\n    \n    \ndef median_trapezium_j(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        if n==2:\n            return 0.5*(base1+base2)\n        return trapezium(n-1) + trapezium(n-2)\n    \n    if trapezium(1)==base1 or trapezium(2)==base1 or trapezium(3)==base1:\n        return base1\n    return trapezium(4)\n    \n    \ndef median_trapezium_k(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        if n==2:\n            return 0.5*(base1+base2)\n        return trapezium(n-1) + trapezium(n-2)\n    \n    if trapezium(1)==base1 or trapezium(2)==base1 or trapezium(3)==base1:\n        return base1\n    return trapezium(4)\n    \n    \ndef median_trapezium_l(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base2>base1+height:\n        return base1\n    if base2<base1:\n        return base2\n    if base2==base1:\n        return 0.5*(base1+base2)\n    \n    def trapezium(n):\n        if n<2:\n            return n\n        i"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = height(base1)\n    base2 = height(base2)\n    if base1 == base2:\n        return height(base1)\n    elif base2 == 0 or base2 == base1:\n        return 0\n    elif base1 < base2:\n        return (base1+base2)/2\n    else:\n        return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # base1\n    first_base = int(base1)\n    # base2\n    second_base = int(base2)\n    # height\n    height_2 = int(height)\n    # base\n    base = first_base\n    # height\n    height = height_2\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1 and arr[0] == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return \"Number cannot be zero\"\n    else:\n        if arr[0] > number:\n            return \"The number\"\n        else:\n            for i in range(1, len(arr)):\n                if arr[i] > number:\n                    return f\"{number} is greater than\"\n            else:\n                return \"Number not found\"\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return False\n    if number == arr[0]:\n        return True\n    if number > arr[1]:\n        return True\n    if number > arr[2]:\n        return True\n    if number > arr[3]:\n        return True\n    if number > arr[4]:\n        return True\n    if number > arr[5]:\n        return True\n    if number > arr[6]:\n        return True\n    if number > arr[7]:\n        return True\n    if number > arr[8]:\n        return True\n    if number > arr[9]:\n        return True\n    if number > arr[10]:\n        return True\n    if number > arr[11]:\n        return True\n    if number > arr[12]:\n        return True\n    if number > arr[13]:\n        return True\n    if number > arr[14]:\n        return True\n    if number > arr[15]:\n        return True\n    if number > arr[16]:\n        return True\n    if number > arr[17]:\n        return True\n    if number > arr[18]:\n        return True\n    if number > arr[19]:\n        return True\n    if number > arr[20]:\n        return True\n    if number > arr[21]:\n        return True\n    if number > arr[22]:\n        return True\n    if number > arr[23]:\n        return True\n    if number > arr[24]:\n        return True\n    if number > arr[25]:\n        return True\n    if number > arr[26]:\n        return True\n    if number > arr[27]:\n        return True\n    if number > arr[28]:\n        return True\n    if number > arr[29]:\n        return True\n    if number > arr[30]:\n        return True\n    if number > arr[31]:\n        return True\n    if number > arr[32]:\n        return True\n    if number > arr[33]:\n        return True\n    if number > arr[34]:\n        return True\n    if number > arr[35]:\n        return True\n    if number > arr[36]:\n        return True\n    if number > arr[37]:\n        return True\n    if number > arr[38]:\n        return True\n    if number > arr[39]:\n        return True\n    if number > arr[40]:\n        return True\n    if number > arr[41]:\n        return True\n    if number > arr[42]:\n        return True\n    if number > arr[43]:\n        return True\n    if number > arr[44]:\n        return True\n    if number > arr[45]:\n        return True\n    if number > arr[46]:\n        return True\n    if number > arr[47]:\n        return True\n    if number > arr[48]:\n        return True\n    if number > arr[49]:\n        return True\n    if number > arr[50]:\n        return True\n    if number > arr[51]:\n        return True\n    if number > arr[52]:\n        return True\n    if number > arr[53]:\n        return True\n    if number > arr[54]:\n        return True\n    if number > arr[55]:\n        return True\n    if number > arr[56]:\n        return True\n    if number > arr[57]:\n        return True\n    if number > arr[58]:\n        return True\n    if number > arr[59]:\n        return True\n    if number > arr[60]:\n        return True\n    if number > arr[61]:\n        return True\n    if number > arr[62]:\n        return True\n    if number > arr[63]:\n        return True\n    if number > arr[64]:\n        return True\n    if number > arr[65]:\n        return True\n    if number > arr[66]:\n        return True\n    if number > arr[67]:\n        return True\n    if number > arr[68]:\n        return True\n    if number > arr[69]:\n        return True\n    if number > arr[70]:\n        return True\n    if number > arr[71]:\n        return True\n    if number > arr[72]:\n        return True\n    if number > arr[73]:\n        return True\n    if number > arr[74]:\n        return True\n    if number > arr[75]:\n        return True\n    if number > arr[76]:\n        return True\n    if number > arr[77]:\n        return True\n    if number > arr[78]:\n        return True\n    if number > arr[79]:\n        return True\n    if number > arr[80]:\n        return True\n    if number > arr[81]:\n        return True\n    if number > arr[82]:\n        return True\n    if number > arr[83]:\n        return True\n    if number > arr[84]:\n        return True\n    if number > arr[85]:\n        return True\n    if number > arr[86]:\n        return True\n    if number > arr[87]:\n        return True\n    if number > arr[88]:\n        return True\n    if number > arr[89]:\n        return True\n    if number > arr[90]:\n        return True\n    if number > arr[91]:\n        return True\n    if number > arr[92]:\n        return True\n    if number > arr[93]:\n        return True\n    if number > arr[94]:\n        return True\n    if number > arr[95]:\n        return True\n    if number > arr[96]:\n        return True\n    if number > arr[97]:\n        return True\n    if number > arr[98]:\n        return True\n    if number > arr[99]:\n        return True\n    if number > arr[100]:\n        return True\n    if number > arr[101]:\n        return True\n    if number > arr[102]:\n        return True\n    if number > arr[103]:\n        return True\n    if number > arr[104]:\n        return True\n    if number > arr[105]:\n        return True\n    if number > arr[106]:\n        return True\n    if number > arr[107]:\n        return True\n    if number > arr[108]:\n        return True\n    if number > arr[109]:\n        return True\n    if number > arr[110]:\n        return True\n    if number > arr[111]:\n        return True\n    if number > arr[112]:\n        return True\n    if number > arr[113]:\n        return True\n    if number > arr[114]:\n        return True\n    if number > arr[115]:\n        return True\n    if number > arr[116]:\n        return True\n    if number > arr[117]:\n        return True\n    if number > arr[118]:\n        return True\n    if number > arr[119]:\n        return True\n    if number > arr[120]:\n        return True\n    if number > arr[121]:\n        return True\n    if number > arr[122]:\n        return True\n    if number > arr[123]:\n        return True\n    if number > arr[124]:\n        return True\n    if number > arr[125]:\n        return True\n    if number > arr[126]:\n        return True\n    if number > arr[127]:\n        return True\n    if number > arr[128]:\n        return True\n    if number > arr[129]:\n        return True\n    if number > arr[130]:\n        return True\n    if number > arr[131]:\n        return True\n    if number > arr[132]:\n        return True\n    if number > arr[133]:\n        return True\n    if number > arr[134]:\n        return True\n    if number > arr[135]:\n        return True\n    if number > arr[136]:\n        return True\n    if number > arr[137]:\n        return True\n    if number > arr[138]:\n        return True\n    if number > arr[139]:\n        return True\n    if number > arr[140]:\n        return True\n    if number > arr[141]:\n        return True\n    if number > arr[142]:\n        return True\n    if number > arr[143]:\n        return True\n    if number > arr[144]:\n        return True\n    if number > arr[145]:\n        return True\n    if number > arr[146]:\n        return True\n    if number > arr[147]:\n        return True\n    if number > arr[148]:\n        return True\n    if number > arr[149]:\n        return True\n    if number > arr[150]:\n        return True\n    if number > arr[151]:\n        return True\n    if number > arr[152]:\n        return True\n    if number > ar"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    if arr[0] > number:\n        return False\n    for i in range(1,len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    elif number > arr[0]:\n        return False\n    elif arr[len(arr) - 1] == number:\n        return True\n    else:\n        return check_greater(arr[1:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[number] > number:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) < 1:\n        return False\n    if arr[0] > number:\n        return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr_copy = arr.copy()\n    for element in arr:\n        if element > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    if arr[-1] < number < arr[0]:\n        return True\n    else:\n        return check_greater(arr[1:], number)\n    \ndef check_less(arr, number):\n    '''\n    Write a function to check whether the entered number is less than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    if arr[0] > number > arr[-1]:\n        return True\n    else:\n        return check_less(arr[1:], number)\n    \ndef check_equal(arr, number):\n    '''\n    Write a function to check whether the entered number is equal to the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    if arr[-1] == number:\n        return True\n    else:\n        return check_equal(arr[:-1], number)\n    \ndef main():\n    num = int(input(\"Enter the number to check if it is greater than or less than the element : \"))\n    print(\"Check is\", check_greater(num, num))\n    print(\"Check is\", check_less(num, num))\n    print(\"Check is\", check_equal(num, num))\n    \nmain()"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub(r'[a-zA-Z0-9]', 'a', text)\n    pattern = re.compile(r'[a-zA-Z0-9]')\n    return pattern.search(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #print(text)\n    m = re.search(r'\\w*\\d*\\b', text) #finds matches based on the word and number\n    if m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # test cases\n    # test cases\n    # test cases\n    # test cases\n    # test cases\n    text_list = list(text)\n    text_list = text_list[:len(text_list)-1] # only the last one, not the first\n    text_list = text_list + text_list # this allows the length to be less than the length of the string\n    # determine if it's one or more b's, and return the appropriate ones\n    if text_list[len(text_list)-1] == 'b':\n        return 1\n    if text_list[len(text_list)-1] == 't':\n        return 2\n    return 0\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Remove the parentheses\n    text = re.sub(\"\\(.*\\)\", \"\", text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"([A-Z][a-z]+) b\"\n    matcher = re.match(pattern, text)\n    return matcher.group(1)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    p = re.compile(\"^[a-zA-Z][a-zA-Z_]*[bB]$\")\n    matches = p.finditer(text)\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # get rid of all the extra spaces\n    text = text.strip()\n    # get rid of single-character backspaces\n    text = text.replace(' ', '')\n    # test to see if it's a string with single characters\n    if not text:\n        return False\n    # test to see if it's the only character\n    if len(text) == 1:\n        return text in 'ab'\n    # check if a string has a couple of a's\n    if text[0] == 'a' and text[-1] == 'a':\n        # get rid of the first two characters\n        text = text[1:-1]\n    # check if it's a word\n    if not text.isalpha():\n        return False\n    # check if it's a number\n    if '.' in text:\n        return False\n    # check if it's a letter\n    if text.isupper():\n        return False\n    # check if it's a symbol, only a, b, c, or d\n    for i in text:\n        if not (i.isalpha() or i.isdigit() or i in '!?'):\n            return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(b)?(\\s+)(\\w+)')\n    match = pattern.search(text)\n    return(match)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_one_count = 0\n    for b in text:\n        if b == 'a' or b == 'b' or b == 'A' or b == 'B':\n            match_one_count += 1\n    return match_one_count > 0\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #validate\n    if not text:\n        return False\n    if not isinstance(text, str):\n        return False\n    for c in text:\n        if c == 'a' or c == 'A':\n            return True\n    return False\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    digit = n % 10\n    return digit"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n    \nprint(lastDigit(1234))\nprint(lastDigit(45678))\nprint(lastDigit(12345))\nprint(lastDigit(25))\nprint(lastDigit(0))\nprint(lastDigit(0x3B5)"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n % 10 == 0 :\n        return n // 10\n    else :\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    if n % 10!= 0 :\n        n = n / 10\n    if n % 10 == 0 :\n        n = int(n)\n        if n > 9 :\n            return 10 - n\n        else :\n            return n\n    return int(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lastDigit = 0\n    while n!= 0 :\n        lastDigit = n % 10\n        n = n // 10\n    return lastDigit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return last_Digit(n//10) + n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    if n == 0 :\n        return 0\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lst = []\n    \n    for i in range(0,len(str(n))) :\n        lst.append(str(n)[-i-1])\n    lst.append(str(n)[-1])\n    return int(lst[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    digits = []\n    for i in str(n) :\n        digits.append(int(i))\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for n in list1:\n        if n < 0:\n            neg_list.append(n)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for element in list1:\n        if element < 0:\n            neg.append(element)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    if list1!= None:\n        neg = []\n        for i in list1:\n            neg.append(-i)\n        return neg\n    else:\n        return None\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    list1=list1[::-1]\n    for i in list1:\n        if i < 0:\n            list2.append(-i)\n        else:\n            pass\n    return list2\n    #pass\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    def neg_nos_aux(list1):\n        '''\n        Write a python function to return the negative numbers in a list.\n        '''\n        if len(list1) == 0:\n            return []\n        neg_nos = []\n        for i in range(len(list1)):\n            if list1[i] < 0:\n                neg_nos.append(list1[i])\n        return neg_nos\n    return neg_nos_aux(list1)\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    final_list = []\n    for i in list1:\n        final_list.append(-i)\n    return final_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        neg.append(-i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(-i)\n        else:\n            list2.append(i)\n    return list2\n    \n    \ndef add_minus(list1):\n    '''\n    Write a python function to add the minus numbers in a list.\n    '''\n    list3 = []\n    for i in list1:\n        if i < 0:\n            list3.append(-i)\n        else:\n            list3.append(i)\n    return list3\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    n=0\n    for i in list1:\n        n=n*-1\n    return n\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1)<2:\n        return str1\n    else:\n        return str1[1::2]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    l = []\n    c = 0\n    for i in str1:\n        if i % 2!= 0:\n            l.append(i)\n        else:\n            c += 1\n    print(l)\n    print(c)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) <= 1:\n        return str1\n    new_str = ''\n    temp_str = ''\n    for i in str1:\n        if i % 2!= 0:\n            temp_str += i\n        else:\n            new_str += temp_str\n            temp_str = ''\n    new_str += temp_str\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 == '':\n        return str1\n    else:\n        if str1[0] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            str1 = str1[1:]\n            return remove_odd(str1)\n        elif str1[-1] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            str1 = str1[:-1]\n            return remove_odd(str1)\n        else:\n            return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    str1_index = []\n    for i in range(len(str1)):\n        if str1[i]%2!= 0:\n            str1_index.append(i)\n    for i in str1_index:\n        str1 = str1[:i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) == 0:\n        return \"\"\n    if len(str1) == 1:\n        return str1[0]\n    \n    lst = []\n    for i in range(len(str1)):\n        if i % 2 == 1:\n            lst.append(str1[i])\n    \n    return ''.join(lst)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1==None or str1==\"\":\n        return \"\"\n    else:\n        str1=str1.replace(\" \",\"\")\n        new_str=[]\n        for char in str1:\n            if char%2==0:\n                new_str.append(char)\n        return \"\".join(new_str)\n        \n        \n        "
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # dictionary to store the frequency\n    freq = {}\n    \n    # converting the string to lowercase\n    str1 = str1.lower()\n    \n    # iterate through the string\n    for char in str1:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n            \n    # iterate through the dictionary\n    for char in freq:\n        if freq[char] % 2!= 0:\n            freq[char] -= 1\n            \n    # return the modified string\n    return ''.join(char for char in str1 if char not in freq"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s_list = []\n    for i in range(len(str1)):\n        if i % 2!= 0:\n            s_list.append(str1[i])\n        else:\n            continue\n    s_list = ''.join(s_list)\n    return s_list\n    \ndef main():\n    '''\n    Main function for this task.\n    '''\n    str1 = str(input(\"Enter the string: \"))\n    print(\"\\nRemoved characters in the string: \\n\",remove_odd(str1))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = ''\n    str1 = str1.lower()\n    for i in str1:\n        if i % 2!= 0:\n            new_string = new_string + i\n    return new_string\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = set()\n    for test in test_list:\n        bidirectional.add(tuple(test[:2]))\n    \n    return len(bidirectional)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # count pairs of bidirectional tuples in the test list\n    count = 0\n    for index, elem in enumerate(test_list):\n        if elem == test_list[index + 1]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Output: 9 (a,b)\n    output = 0\n    # Iterate over the test_list\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] > test_list[j][0]:\n                output += 1\n    return output\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    bids = {}\n    for i in range(len(test_list)):\n        key = test_list[i][0]\n        if key not in bids:\n            bids[key] = set()\n        if test_list[i][1] not in bids[key]:\n            bids[key].add(test_list[i][1])\n    \n    count = 0\n    for bid in bids.values():\n        if len(bid) >= 2:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for elem in test_list:\n        if elem[0]!= elem[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        for j in test_list[i:]:\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_bid = 0\n    for element in test_list:\n        if element[1] == \"b\":\n            count_bid += 1\n        elif element[1] == \"b'\":\n            count_bid += 1\n            count_bid += 1\n        elif element[1] == \"b'd\":\n            count_bid += 1\n            count_bid += 1\n        elif element[1] == \"b'd'\":\n            count_bid += 1\n            count_bid += 1\n    return count_bid\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Store the count of bidirectional pairs.\n    bidirectional_count = {}\n    # Loop through the test list.\n    for i in range(len(test_list)):\n        # Check if the string in the test list is of the correct format.\n        if len(test_list[i]) == 3:\n            # If not then print an error message.\n            if test_list[i] not in bidirectional_count:\n                bidirectional_count[test_list[i]] = 0\n            # If the string is of the correct format then add it to the count.\n            else:\n                bidirectional_count[test_list[i]] += 1\n        # If it is then check if the string in the test list is of the correct format.\n        elif len(test_list[i]) == 2:\n            # If not then print an error message.\n            if test_list[i] not in bidirectional_count:\n                bidirectional_count[test_list[i]] = 0\n            # If the string is of the correct format then add it to the count.\n            else:\n                bidirectional_count[test_list[i]] += 1\n    # Return the bidirectional count.\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #return count_tuple_pairs(test_list)\n    return count_tuple_pairs(test_list, test_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        count += len(i)\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y:x+y,L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #create a list of lists of the form [[x,y], [x,y],...]\n    #iterate through each item in list (one at a time)\n    #add to a single integer\n    #create a list of lists of the form [[x,y], [x,y],...]\n    #iterate through each item in list (one at a time)\n    #add to a single integer\n    #create a list of lists of the form [[x,y], [x,y],...]\n    #iterate through each item in list (one at a time)\n    #add to a single integer\n    #create a list of lists of the form [[x,y], [x,y],...]\n    #iterate through each item in list (one at a time)\n    #add to a single integer\n    #create a list of lists of the form [[x,y], [x,y],...]\n    #iterate through each item in list (one at a time)\n    #add to a single integer\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + multiple_to_single(L[1:])\n        \nprint(multiple_to_single([1,2,3,4]))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L)==0:\n        return 0\n    elif len(L)==1:\n        return L[0]\n    elif len(L)==2:\n        return L[0]+L[1]\n    else:\n        return L[0]+L[1]+L[2]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # TODO: Write your code here\n    L2 = []\n    for i in L:\n        L2.append(i)\n    return sum(L2)"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join_list(L):\n        if len(L) == 1:\n            return L[0]\n        else:\n            return L[0] + join_list(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i = 0\n    while i < len(L):\n        yield sum(L[:i]) + L[i]\n        i += 1\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x + y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #Your code here\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = [\"adjectives\", \"adverbs\", \"imperfect\", \"neuter\", \"possessive\", \"proper\", \"singular\", \"translational\", \"verb\"]\n    regex = r'''(?x)\n        (?:'[^a-z]*\\')|(?P<adverb>a)\n        (?:'(?:[^a-z]|\\')*')\n    '''\n    adverb = \"\"\n    pos = []\n    adverb_pos = []\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return''.join(\n        text.split(' ')[:2]\n    ).split(' ')[0]\n    \ndef find_adverb_position_and_mentions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return''.join(\n        text.split(' ')[:2]\n    ).split(' ')[0]\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    result = re.findall(r'(\\b\\w+\\b)?(\\d+|\\b\\d+|[a-z]+)', text)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find the first adverb\n    # find the second adverb\n    # find the third adverb\n    adverb_positions = []\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # create a regexp to find adverbs\n    adverbs = 'e|er|er|ae|er|a'\n    # extract the first adverb\n    adverb = re.findall(r'(?=[ae\u00e9])', text)[0]\n    # extract the rest of the sentences\n    sents = re.findall(r'(?=.*s)(?=.*ns)', text)\n    # create a dictionary where the values are the indexes of the sentences\n    dict_sentences = {}\n    for i, sent in enumerate(sents):\n        # find all of the adverbs in the sentence\n        adverbs_in_sent = re.findall(r'(?=[ae\u00e9])', sent)\n        # for each adverb in the sentence:\n        for adverb in adverbs_in_sent:\n            # create a new sentence by splicing adverb\n            new_sent = adverb + sent\n            # find the first position of the adverb\n            position = re.findall(adverbs, new_sent)\n            # create a new dictionary entry\n            if position:\n                new_dict_entry = {'sent':i, 'index':position[0]}\n                dict_sentences[new_dict_entry['sent']] = new_dict_entry\n    # return the dictionary of sentences\n    return dict_sentences\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    for i in range(0,len(text),3):\n        if text[i+1] == 'a' and text[i+2] == 'i' and text[i+3] == 'e':\n            adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    for i in range(len(text)):\n        # if the next character is an adverb, then it is the first one and it's in the first position\n        if text[i].isupper():\n            if text[i+1].isupper() and i<len(text)-1:\n                return i, i\n    return len(text), -1\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    search_obj = re.search(r'[a-zA-Z]{2,}[\u0430-\u044f,]',text)\n    if search_obj:\n        return True\n    return False\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def get_adverb_position(sentence):\n        '''\n        Given a sentence, return the position of the adverb and its position.\n        '''\n        sentence_ = sentence.split(' ')\n        for idx, word in enumerate(sentence_):\n            if re.search('([^\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09a3\\u09"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Your code here\n    return(sum(l*(l+1)**2))\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = (l**3) + 4*l*l*(l+1)*(l+2)\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def surfacearea_side(a,b,c):\n        '''\n        Write a function to find the surface area of a cube of a given size.\n        '''\n        def area(a,b,c):\n            '''\n            Write a function to find the surface area of a cube of a given size.\n            '''\n            if a+b+c > 4:\n                return f\"Error: the length of each side of a cube is between {a},{b} and {c}.\"\n            return a*b*c\n        return area(a,b,c)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*(l*l*l)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0.0\n    area = (4.0 * l) * (4.0 * l)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    \n    l = math.sqrt(l)\n    l = round(l, 2)\n    l = abs(l)\n    \n    if l < 1:\n        return 'Cannot find a surface area of a cube whose sides are smaller than 1'\n    \n    if l == 1:\n        return round(1/3, 2)\n    \n    return round(2 * l * math.pi * (l ** 3), 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = (3*l**2) - (3*l)*(l**3)\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l[0]*l[1]*l[2])\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area=l*l*l\n    print('The surface area of a cube of size',l,'is',area,'units!')\n    \ndef surfacearea_rectangle(b):\n    '''\n    Write a function that computes the surface area of a rectangle.\n    '''\n    area=b*b\n    print('The surface area of a rectangle of size',b,'is',area,'units!')\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in nums:\n        if i > 0:\n            sum += 1\n    \n    return sum/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    result = 0\n    for i in nums:\n        if i > 0:\n            result += 1\n    return result\ndef average(nums):\n    '''\n    Write a function to find the average of an array of numbers.\n    '''\n    average = 0\n    for i in nums:\n        average += i\n    return average/len(nums)\ndef find_quartiles(nums):\n    '''\n    Write a function to find the quartiles of an array of numbers.\n    '''\n    q1 = nums[0]\n    q2 = nums[0]\n    q3 = nums[0]\n    q4 = nums[0]\n    for i in nums:\n        if i > q1:\n            q1 = i\n        elif i > q2:\n            q2 = i\n        elif i > q3:\n            q3 = i\n        elif i > q4:\n            q4 = i\n    return [q1, q2, q3, q4]\ndef minimum(nums):\n    '''\n    Write a function to find the minimum of an array of numbers.\n    '''\n    minimum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] < minimum:\n            minimum = nums[i]\n    return minimum\ndef maximum(nums):\n    '''\n    Write a function to find the maximum of an array of numbers.\n    '''\n    maximum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\ndef average_and_minimum(nums):\n    '''\n    Write a function to find the average and minimum of an array of numbers.\n    '''\n    average = 0\n    minimum = 0\n    for i in nums:\n        if i > 0:\n            average += i\n        elif i < 0:\n            minimum += i\n    return [average/len(nums), minimum/len(nums)]\ndef median(nums):\n    '''\n    Write a function to find the median of an array of numbers.\n    '''\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return nums[len(nums)/2]\n    else:\n        return nums[len(nums)/2 - 1]\ndef mode(nums):\n    '''\n    Write a function to find the mode of an array of numbers.\n    '''\n    count = nums.count(nums[0])\n    if count == 1:\n        return nums[0]\n    else:\n        return nums[count//2]\ndef mode_and_mode(nums):\n    '''\n    Write a function to find the mode and mode of an array of numbers.\n    '''\n    mode = 0\n    modes = [0,0,0]\n    count = nums.count(nums[0])\n    if count == 1:\n        mode = nums[0]\n        modes[0] = nums[0]\n        modes[1] = nums[0]\n        modes[2] = nums[0]\n    else:\n        for i in range(len(nums)):\n            if nums[i] == nums[0]:\n                continue\n            else:\n                count = nums.count(nums[i])\n                if count == 1:\n                    mode = nums[i]\n                    modes[0] = nums[i]\n                    modes[1] = nums[i]\n                    modes[2] = nums[i]\n                else:\n                    modes[0] = nums[i]\n                    modes[1] = nums[i]\n                    modes[2] = nums[i]\n                    modes[0] = modes[1]\n                    modes[1] = modes[2]\n                    modes[2] = modes[0]\n    return modes\ndef mode_and_mode_and_mode(nums):\n    '''\n    Write a function to find the mode and mode and mode and mode of an array of numbers.\n    '''\n    mode = 0\n    modes = [0,0,0]\n    count = nums.count(nums[0])\n    if count == 1:\n        mode = nums[0]\n        modes[0] = nums[0]\n        modes[1] = nums[0]\n        modes[2] = nums[0]\n    else:\n        for i in range(len(nums)):\n            if nums[i] == nums[0]:\n                continue\n            else:\n                count = nums.count(nums[i])\n                if count == 1:\n                    mode = nums[i]\n                    modes[0] = nums[i]\n                    modes[1] = nums[i]\n                    modes[2] = nums[i]\n                else:\n                    modes[0] = nums[i]\n                    modes[1] = nums[i]\n                    modes[2] = nums[i]\n                    modes[0] = modes[1]\n                    modes[1] = modes[2]\n                    modes[2] = modes[0]\n    return modes\ndef mode_and_mode_and_mode_and_mode(nums):\n    '''\n    Write a function to find the mode and mode and mode and mode and mode and mode of an array of numbers.\n    '''\n    mode = 0\n    modes = [0,0,0]\n    count = nums.count(nums[0])\n    if count == 1:\n        mode = nums[0]\n        modes[0] = nums[0]\n        modes[1] = nums[0]\n        modes[2] = nums[0]\n    else:\n        for i in range(len(nums)):\n            if nums[i] == nums[0]:\n                continue\n            else:\n                count = nums.count(nums[i])\n                if count == 1:\n                    mode = nums[i]\n                    modes[0] = nums[i]\n                    modes[1] = nums[i]\n                    modes[2] = nums[i]\n                else:\n                    modes[0] = nums[i]\n                    modes[1] = nums[i]\n                    modes[2] = nums[i]\n                    modes[0] = modes[1]\n                    modes[1] = modes[2]\n                    modes[2] = modes[0]\n    return modes\ndef mode_and_mode_and_mode_and_mode_and_mode_and_mode(nums):\n    '''\n    Write a function to find the mode and mode and mode and mode and mode and mode and mode and mode and mode and mode and mode and mode and mode and mode and mode and mode and mode and mode and mode.\n    '''\n    mode = 0\n    modes = [0,0,0,0]\n    count = nums.count(nums[0])\n    if count == 1:\n        mode = nums[0]\n        modes[0] = nums[0]\n        modes[1] = nums[0]\n        modes[2] = nums[0]\n        modes[3] = nums[0]\n    else:\n        for i in range(len(nums)):\n            if nums[i] == nums[0]:\n                continue\n            else:\n                count = nums.count(nums[i])\n                if count == 1:\n                    mode = nums[i]\n                    modes[0] = nums[i]\n                    modes[1] = nums[i]\n                    modes[2] = nums[i]\n                    modes[3] = nums[i]\n                else:\n                    modes[0] = nums[i]\n                    modes[1] = nums[i]\n                    modes[2] = nums[i]\n                    modes[3] = nums[i]\n                    modes[0] = modes[1]\n                    modes[1] = modes[2]\n                    modes[2] = modes[3]\n                    modes[3"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            count += 1\n    return count/len(nums)\ndef sum_of_positive(nums):\n    '''\n    Write a function to find the sum of positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            sum += nums[i]\n    return sum\ndef sum_of_negative(nums):\n    '''\n    Write a function to find the sum of negative numbers in an array of integers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\ndef sum_of_all(nums):\n    '''\n    Write a function to find the sum of all positive and negative numbers in an array of integers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            sum += nums[i]\n    return sum\ndef sum_of_all_positive(nums):\n    '''\n    Write a function to find the sum of all positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            sum += nums[i]\n    return sum\ndef count_of_all(nums):\n    '''\n    Write a function to find the count of all numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        count += nums[i]\n    return count\ndef product_of_all_positive(nums):\n    '''\n    Write a function to find the product of all positive numbers in an array of integers.\n    '''\n    prod = 1\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            prod *= nums[i]\n    return prod\ndef product_of_all_negative(nums):\n    '''\n    Write a function to find the product of all negative numbers in an array of integers.\n    '''\n    prod = 1\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            prod *= nums[i]\n    return prod\ndef product_of_all_all(nums):\n    '''\n    Write a function to find the product of all numbers in an array of integers.\n    '''\n    prod = 1\n    for i in range(len(nums)):\n        prod *= nums[i]\n    return prod\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    def positive_count(nums):\n        '''\n        Function to calculate the ration of positive numbers in an array of integers.\n        '''\n        positives = 0\n        negative = 0\n        for i in nums:\n            if i >= 0:\n                positives += 1\n            else:\n                negative += 1\n        return negatives/positives\n    return positive_count(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1\n    a = 1\n    for i in nums:\n        a *= i\n    return a/sum(nums)\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1\n    a = 1\n    for i in nums:\n        a *= i\n    return a/sum(nums)\ndef average_count(nums):\n    '''\n    Write a function to find the ration of positive and negative numbers in an array of integers.\n    '''\n    a = len(nums)\n    if a == 0:\n        return 0\n    return a/max(nums)\ndef highest_count(nums):\n    '''\n    Write a function to find the highest count in a list of integers.\n    '''\n    a = max(nums)\n    return a\ndef lowest_count(nums):\n    '''\n    Write a function to find the lowest count in a list of integers.\n    '''\n    a = min(nums)\n    return a\ndef get_number_of_unique(nums):\n    '''\n    Write a function to find the number of unique numbers in a list of integers.\n    '''\n    a = len(set(nums))\n    return a\ndef find_all_positive(nums):\n    '''\n    Write a function to find all positive numbers in an array of integers.\n    '''\n    a = positive_count(nums)\n    return a\ndef find_all_negative(nums):\n    '''\n    Write a function to find all negative numbers in an array of integers.\n    '''\n    a = negative_count(nums)\n    return a\ndef find_all_average(nums):\n    '''\n    Write a function to find all average numbers in an array of integers.\n    '''\n    a = average_count(nums)\n    return a\ndef find_all_highest(nums):\n    '''\n    Write a function to find all highest numbers in an array of integers.\n    '''\n    a = highest_count(nums)\n    return a\ndef find_all_lowest(nums):\n    '''\n    Write a function to find all lowest numbers in an array of integers.\n    '''\n    a = lowest_count(nums)\n    return a\ndef find_all_num_in_list(nums):\n    '''\n    Write a function to find all numbers in a list of integers.\n    '''\n    a = get_number_of_unique(nums)\n    return a\ndef find_all_even(nums):\n    '''\n    Write a function to find all even numbers in an array of integers.\n    '''\n    a = [x for x in nums if x % 2 == 0]\n    return a\ndef find_all_odd(nums):\n    '''\n    Write a function to find all odd numbers in an array of integers.\n    '''\n    a = [x for x in nums if x % 2 == 1]\n    return a\ndef find_all_string(nums):\n    '''\n    Write a function to find all strings in an array of integers.\n    '''\n    a = [str(x) for x in nums]\n    return a\ndef find_all_list(nums):\n    '''\n    Write a function to find all lists in an array of integers.\n    '''\n    a = [int(x) for x in nums]\n    return a\ndef find_all_list_of_string(nums):\n    '''\n    Write a function to find all lists of strings in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_list(nums):\n    '''\n    Write a function to find all lists of lists in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append(i.split())\n    return a\ndef find_all_list_of_string_of_list(nums):\n    '''\n    Write a function to find all lists of strings and of lists in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_string_of_list_of_string(nums):\n    '''\n    Write a function to find all lists of strings and of lists and of lists and of strings in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_list_of_string(nums):\n    '''\n    Write a function to find all lists of lists and of lists and of strings and of strings in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_string_of_list_of_string(nums):\n    '''\n    Write a function to find all lists of strings and of lists and of strings and of strings and of strings in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_string_of_list_of_string_of_string(nums):\n    '''\n    Write a function to find all lists of strings and of lists and of strings and of strings and of strings and of strings and of strings and of strings in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_list_of_string_of_string_of_string(nums):\n    '''\n    Write a function to find all lists of strings and of lists and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_list_of_string_of_string_of_string(nums):\n    '''\n    Write a function to find all lists of strings and of lists and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_list_of_string_of_string_of_string_of_string(nums):\n    '''\n    Write a function to find all lists of strings and of lists and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_string_of_list_of_string_of_string_of_string(nums):\n    '''\n    Write a function to find all lists of strings and of lists and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings and of strings in an array of integers.\n    '''\n    a = []\n    for i in nums:\n        a.append([str(x) for x in nums])\n    return a\ndef find_all_list_of_list_of_string_of_list_of_string_of_string"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_arr = []\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            num_arr.append(nums[i])\n    num_arr.sort()\n    return num_arr\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    arr=array(nums)\n    c=0\n    for i in arr:\n        if i<0:\n            c=c+1\n    return c\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return int(len(nums)/2)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Your code here\n    val = sum(map(int, nums))\n    # print(val)\n    return int(val) / int(sum(map(int, nums)))\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    output = []\n    for ele in list1:\n        if ele < 0:\n            output.append(ele)\n    return max(output)\n    "
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_n = -999\n    for num in list1:\n        if num < 0:\n            if num > max_n:\n                max_n = num\n    return max_n\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg=0\n    for i in list1:\n        if i < 0:\n            largest_neg = i\n            break\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_index = -1\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_index = i\n            break\n    return list1[neg_index]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for num in list1:\n        if num < 0:\n            return num\n    return -1\n        \ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    for num in list1:\n        if num > 0:\n            return num\n    return -1\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result\n    \n    \n    # def largest_neg(list1):\n        \n    #     result = []\n    #     for i in list1:\n    #         if i < 0:\n    #             result.append(i)\n    #     return result\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    return min(list1)\n \ndef average_price(list1): \n    '''\n    Write a python function to find the average price of the given list of items.\n    '''\n    return sum(list1)/len(list1)\n \ndef largest_and_smallest(list1): \n    '''\n    Write a python function to find the largest and the smallest items in the given list.\n    '''\n    if len(list1) > 1: \n        largest = largest_neg(list1) \n        smallest = smallest_neg(list1) \n    else: \n        largest = list1[0] \n        smallest = list1[0] \n    return largest, smallest\n \ndef get_average(list1): \n    '''\n    Write a python function to get the average price of the given list of items.\n    '''\n    return average_price(list1)\n \ndef calculate_total_price(list1): \n    '''\n    Write a python function to find the total price of the given list.\n    '''\n    return sum(list1)\n \ndef main(): \n    '''\n    This program will ask the user to enter the number of items, \n    which will be used to calculate the total amount, \n    the total price and the average price of the list.\n    '''\n    num_of_items = int(input(\"How many items will be in the list? \"))\n \n    # Get the list of items\n    list_of_items = []\n    for i in range(0, num_of_items): \n        item = int(input(\"Item \" + str(i+1) + \": \"))\n        list_of_items.append(item) \n \n    # calculate the total amount\n    total = calculate_total_price(list_of_items) \n \n    # calculate the average amount\n    average = get_average(list_of_items) \n \n    # create a new list\n    new_list = [] \n \n    # add the items in new_list\n    for item in list_of_items: \n        new_list.append(item) \n \n    # calculate the greatest and the smallest items\n    # (according to the list)\n    print(\"Greatest and smallest items are: \")\n    print(\"The number of largest negative items: \" + str(largest_neg(new_list)))\n    print(\"The number of smallest negative items: \" + str(smallest_neg(new_list)))\n \n    # print the average\n    print(\"The average price is: \" + str(average))\n \nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    positive_list = []\n    negative_list = []\n    for i in list1:\n        if i > 0:\n            positive_list.append(i)\n        elif i < 0:\n            negative_list.append(i)\n    if len(positive_list) > len(negative_list):\n        return positive_list\n    else:\n        return negative_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for t in test_list:\n        while t:\n            t = t[1:]\n        if len(t) == K:\n            test_list.remove(t)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    while len(test_list) > K:\n        test_list.pop(0)\n    while len(test_list) < K:\n        test_list.insert(0, (0, 0))\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(filter(None, map(lambda x: x[:K], test_list)))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print(test_list)\n    for tuple_index in range(0, len(test_list)):\n        test_list.pop(tuple_index)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Case 1\n    if type(test_list) == tuple:\n        return list(filter(None, map(trim_tuple, test_list, range(K))))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0, len(test_list), K):\n        test_list[i] = test_list[i][1:]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        if type(i) == tuple:\n            new_list.append(i[0:K])\n            new_list.append(i[K:])\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list = list(test_list)\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            test_list[i], test_list[j] = test_list[j], test_list[i]\n    return tuple(test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for item in test_list:\n        if len(item) > K:\n            item = item[0:K]\n        new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"\\nindex_multiplication(test_tup1, test_tup2):\")\n    print(test_tup1, \"*\", test_tup2)\n    print(\"\\nindex_multiplication(test_tup1, test_tup2):\")\n    print(test_tup2, \"*\", test_tup1)\n    print(\"\\nindex_multiplication(test_tup1, test_tup2):\")\n    print(test_tup2, \"*\", test_tup1)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    total = 0\n    for i in range(len(test_tup1)):\n        total += test_tup1[i] * test_tup2[i]\n    return total\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print('-' * 50)\n    print('Index Muliplication of tuple elements in the given two tuples')\n    print('-' * 50)\n    print(f'Tuple 1: {test_tup1}')\n    print(f'Tuple 2: {test_tup2}')\n    print('-' * 50)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = [1, 2, 3]\n    test_tup3.extend(test_tup1)\n    test_tup3.extend(test_tup2)\n    test_tup3.extend(test_tup1)\n    test_tup3.extend(test_tup2)\n    return tuple(map(lambda x: x*x, test_tup3))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # your code goes here\n    return\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #create a tuple of test_tup1\n    test_tuple1 = tuple(test_tup1)\n    #create a tuple of test_tup2\n    test_tuple2 = tuple(test_tup2)\n    #create a tuple of the result\n    result = []\n    #loop through both tuples and check if the indexes are equal\n    for index, ele in enumerate(test_tuple1):\n        #append the element of the tuple to the result\n        result.append(ele * test_tuple2[index])\n    #return the result of the multiplication\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    for index in range(len(test_tup1)):\n        result += test_tup1[index] * test_tup2[index]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # TODO: Write your code here\n    sum = 0\n    for i in range(len(test_tup1)):\n        sum = sum + test_tup1[i]*test_tup2[i]\n    return sum\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur = 0\n    for i in range(len(lst)):\n        if tup[i] in lst:\n            occur += 1\n    return occur\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if lst==None:\n        return 0\n    else:\n        count = 0\n        for i in lst:\n            count+=1\n            if i in tup:\n                tup.remove(i)\n        return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence = Counter(lst)\n    return occurrence[tup]\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if lst is None: \n        return 0 \n    else: \n        cnt = 0\n        for i in lst: \n            if tup.count(i) == 1: \n                cnt += 1\n        return cnt \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    for key in tup: \n        counter[key] = counter[key]+1\n    return counter\ndef reverse_iteration(lst):\n    '''\n    Write a python function to reverse the elements of a list.\n    '''\n    counter = Counter(lst)\n    for key, count in counter.items():\n        lst.remove(key)\n        lst.insert(0, key)\n        lst.append(count)\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    return c.most_common(tup[1])\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(lst)): \n        if tup[i] in lst: \n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # your code goes here\n    occurence = 0\n    for i in tup: \n        occurence += 1\n    occurence = lst.count(occurence)\n    return occurence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #initializing empty list \n    lst_unique = [] \n    #iterate over list \n    for i in lst: \n        #if element not in lst_unique, add it to empty list \n        if i not in lst_unique: \n            lst_unique.append(i) \n    #count occurence of all elements \n    occurence_count = Counter(lst_unique) \n    #print(occurence_count) \n    return(occurence_count) \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dic = {}\n    for ele in tup:\n        count_dic[ele] = tup.count(ele)\n    return count_dic\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [num**3 for num in nums]\n    return [num**3 for num in cube]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]*3*3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube(n):\n        return n*n*n\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes=[]\n    for i in range(len(nums)):\n        cubes.append(nums[i]*nums[i]*nums[i])\n    return cubes\n    #cube_nums([1,3,8,9,27,120,27,80,27,80,27,80])\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_dict = {\n        0 : 0,\n        1 : 1,\n        2 : 4,\n        3 : 9,\n        4 : 16,\n        5 : 25,\n        6 : 36,\n        7 : 49,\n        8 : 64,\n        9 : 81,\n        10 : 100,\n        11 : 121,\n        12 : 144,\n        13 : 169,\n        14 : 196,\n        15 : 225,\n        16 : 256,\n        17 : 289,\n        18 : 324,\n        19 : 333,\n        20 : 436,\n        21 : 513,\n        22 : 626,\n        23 : 721,\n        24 : 852,\n        25 : 899,\n        26 : 1064,\n        27 : 1153,\n        28 : 1274,\n        29 : 1361,\n        30 : 1478,\n        31 : 1595,\n        32 : 1697,\n        33 : 1794,\n        34 : 1875,\n        35 : 1970,\n        36 : 1976,\n        37 : 2080,\n        38 : 2197,\n        39 : 2224,\n        40 : 2303,\n        41 : 2476,\n        42 : 2584,\n        43 : 2654,\n        44 : 2862,\n        45 : 3040,\n        46 : 3117,\n        47 : 3233,\n        48 : 3300,\n        49 : 3434,\n        50 : 3544,\n        51 : 3744,\n        52 : 3912,\n        53 : 4083,\n        54 : 4216,\n        55 : 4349,\n        56 : 4433,\n        57 : 4492,\n        58 : 4536,\n        59 : 4614,\n        60 : 4732,\n        61 : 4811,\n        62 : 5089,\n        63 : 5152,\n        64 : 5299,\n        65 : 5443,\n        66 : 5480,\n        67 : 5649,\n        68 : 5633,\n        69 : 5715,\n        70 : 5807,\n        71 : 5832,\n        72 : 5890,\n        73 : 5927,\n        74 : 6009,\n        75 : 6280,\n        76 : 6555,\n        77 : 6705,\n        78 : 6712,\n        79 : 6781,\n        80 : 6858,\n        81 : 6938,\n        82 : 7023,\n        83 : 7128,\n        84 : 7443,\n        85 : 7668,\n        86 : 7745,\n        87 : 7842,\n        88 : 7909,\n        89 : 8044,\n        90 : 8043,\n        91 : 8576,\n        92 : 8990,\n        93 : 9152,\n        94 : 9390,\n        95 : 9544,\n        96 : 9680,\n        97 : 9744,\n        98 : 9872,\n        99 : 9952,\n        100 : 9982,\n        101 : 10016,\n        102 : 10142,\n        103 : 10198,\n        104 : 10244,\n        105 : 10559,\n        106 : 10567,\n        107 : 10952,\n        108 : 10873,\n        109 : 10950,\n        110 : 11018,\n        111 : 11376,\n        112 : 11698,\n        113 : 11884,\n        114 : 11960,\n        115 : 12054,\n        116 : 12188,\n        117 : 12458,\n        118 : 12762,\n        119 : 13361,\n        120 : 13602,\n        121 : 14081,\n        122 : 14188,\n        123 : 14488,\n        124 : 14544,\n        125 : 14612,\n        126 : 14660,\n        127 : 14710,\n        128 : 14780,\n        129 : 14852,\n        130 : 15002,\n        131 : 15383,\n        132 : 15426,\n        133 : 15647,\n        134 : 15762,\n        135 : 16081,\n        136 : 16488,\n        137 : 16998,\n        138 : 17040,\n        139 : 17300,\n        140 : 17489,\n        141 : 17996,\n        142 : 18188,\n        143 : 18478,\n        144 : 18465,\n        145 : 18532,\n        146 : 18580,\n        147 : 18862,\n        148 : 19684,\n        149 : 20097,\n        150 : 20368,\n        151 : 20702,\n        152 : 21213,\n        153 : 22019,\n        154 : 22230,\n        155 : 22489,\n        156 : 22674,\n        157 : 22842,\n        158 : 22923,\n        159 : 23074,\n        160 : 23600,\n        161 : 24353,\n        162 : 25114,\n        163 : 25779,\n        164 : 26017,\n        165 : 26452,\n        166 : 26778,\n        167 : 27062,\n        168 : 27099,\n        169 : 27135,\n        170 : 27474,\n        171 : 27770,\n        172 : 27906,\n        173 : 27982,\n        174 : 28110,\n        175 : 28259,\n        176 : 28483,\n        177 : 28993,\n        178 : 29440,\n        179 : 29648,\n        180 : 30032,\n        181 : 30249,\n        182 : 30585,\n        183 : 31080,\n        184 : 31995,\n        185 : 33008,\n        186 : 33223,\n        187 : 33379,\n        188 : 33943,\n        189 : 34860,\n        190 : 35123,\n        191 : 35370,\n        192 : 36151,\n        193 : 36288,\n        194 : 37003,\n        195 : 37175,\n        196 : 37407,\n        197 : 37427,\n        198 : 37700,\n        199 : 37932,\n        200 : 38088,\n        201 : 38720,\n        202 : 38877,\n        203 : 39163,\n        204 : 39587,\n        205 : 40110,\n        206 : 40160,\n        207 : 40217,\n        208 : 40447,\n        209 : 40677,\n        210 : 40994,\n        211 : 41128,\n        212 : 42015,\n        213 : 42463,\n        214 : 43110,\n        215 : 43943,\n        216 : 44719,\n        217 : 45010,\n        218 : 45324,\n        219 : 45649,\n        220 : 46204,\n        221 : 46454,\n        222 : 46870,\n        223 : 47627,\n        224 : 48000,\n        225 : 48299,\n        226 : 48499,\n        227 : 49158,\n        228 : 49423,\n        229 : 49591,\n        230 : 50020,\n        231 : 50051,\n        232 : 50108,\n        233 : 50163,\n        234 : 50240,\n        235 : 50429,\n        236 : 50606,\n        237 : 50830,\n        238 : 51199,\n        239 : 51584,\n        240 : 51772,\n        241 : 51937,\n        242 : 52481,\n        243 : 53303,\n        244 : 53424,\n        245 : 53740,\n        246 : 53949,\n        247 : 54171,\n        248 : 54368,\n        249 : 55018,\n        250 : 55482,\n        251 : 56011,\n        252 : 56358,\n        253 : 56704,\n        254 : 56941,\n        255 : 57464,\n        256 : 59530,\n        257 : 59452,\n        258 : 60055,\n        259 : 60516,\n        260 : 60644,\n        261 : 61801,\n        262 : 62446,\n        263 : 63110,\n        264 : 63944,\n        265 : 64251,\n        266 : 64648,\n        267 : 65868,\n        268 : 67434,\n        269 : 69370,\n        270 : 69003,\n        271 : 69538,\n        272 : 70222,\n        273 : 70498,\n        274 : 71413,\n        275 : 72282,\n        276 : 73424,\n        277 : 74439,\n        278 : 75112,\n        279 : 75896,\n        280 : 77322,\n        281 : 77474,\n        282 : 78018,\n        283 : 78371,\n        284 "
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube_helper(nums):\n        if len(nums) == 1:\n            return nums[0]*nums[0]*nums[0]\n        else:\n            return nums[0]**3 + 3*(nums[1]**3) + nums[2]**3\n    return map(cube_helper, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    s_cubes = []\n    for x in range(0, len(nums)):\n        if nums[x]**3 < len(nums):\n            s_cubes.append(nums[x]**3)\n        else:\n            s_cubes.append(nums[x]**3 - len(nums))\n    return s_cubes\n    \n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [c**3 for c in nums]\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = [ num ** 3 for num in nums]\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    cube_list.append(nums[0]**3)\n    cube_list.append(nums[0]**2)\n    cube_list.append(nums[0]**1)\n    cube_list.append(nums[0]**0)\n    return cube_list\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1,n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=1: \n        return n\n    else: \n        return n*cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0: \n        return 0\n    elif n%2==0: \n        return n+cal_sum(n//2)\n    else: \n        return n+cal_sum(3*n+1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(0, n+1):\n        total += i\n    return total\ndef add(n):\n    '''\n    Write a function to add one number to the list. \n    '''\n    nums.append(n)\n    return nums\ndef get_numbers(n):\n    '''\n    Write a function that takes a list of numbers as an argument and returns a new list with even numbers in the first position and odd numbers in the second position.\n    '''\n    newList = []\n    for i in range(0, n):\n        if i % 2 == 0:\n            newList.append(i)\n    return newList\ndef get_even_numbers(n):\n    '''\n    Write a function that takes a list of numbers and returns a new list that contains all the even numbers from the original list.\n    '''\n    newList = []\n    for i in range(0, n):\n        if i % 2 == 0:\n            newList.append(i)\n    return newList\ndef get_odd_numbers(n):\n    '''\n    Write a function that takes a list of numbers and returns a new list that contains all the odd numbers from the original list.\n    '''\n    newList = []\n    for i in range(0, n):\n        if i % 2!= 0:\n            newList.append(i)\n    return newList\ndef even_odd_numbers(n):\n    '''\n    Write a function that takes a list of numbers and returns a new list that contains all the even numbers from the original list and odd numbers from the original list.\n    '''\n    newList = []\n    for i in range(0, n):\n        if i % 2 == 0:\n            newList.append(i)\n        if i % 2!= 0:\n            newList.append(i)\n    return newList\ndef delete(n):\n    '''\n    Write a function that takes a list as an argument and returns a new list with the even numbers from the first position and all the odd numbers from the second position.\n    '''\n    newList = []\n    for i in range(0, n):\n        if i % 2 == 0:\n            newList.append(i)\n    return newList\ndef reverse(n):\n    '''\n    Write a function that takes a list of numbers as an argument and returns a new list that contains all the even numbers from the first position, the odd numbers from the second position, and all the even and odd numbers from the original list.\n    '''\n    newList = []\n    for i in range(0, n):\n        if i % 2 == 0:\n            newList.append(i)\n    for i in range(0, len(newList)):\n        if i % 2 == 0:\n            newList[i] = newList[i] * 2\n    return newList\ndef main():\n    n = int(input(\"Enter the number of elements to create a list: \"))\n    print(\"The list: \")\n    print(nums)\n    if n <= 1:\n        print(\"\\tNo values in the list\")\n    elif n == 2:\n        print(\"\\tFirst value is 2\")\n    elif n == 3:\n        print(\"\\tFirst value is 3\")\n    elif n == 4:\n        print(\"\\tFirst value is 4\")\n    elif n == 5:\n        print(\"\\tFirst value is 5\")\n    elif n == 6:\n        print(\"\\tFirst value is 6\")\n    elif n == 7:\n        print(\"\\tFirst value is 7\")\n    elif n == 8:\n        print(\"\\tFirst value is 8\")\n    elif n == 9:\n        print(\"\\tFirst value is 9\")\n    elif n == 10:\n        print(\"\\tFirst value is 10\")\n    elif n == 11:\n        print(\"\\tFirst value is 11\")\n    elif n == 12:\n        print(\"\\tFirst value is 12\")\n    elif n == 13:\n        print(\"\\tFirst value is 13\")\n    elif n == 14:\n        print(\"\\tFirst value is 14\")\n    elif n == 15:\n        print(\"\\tFirst value is 15\")\n    elif n == 16:\n        print(\"\\tFirst value is 16\")\n    elif n == 17:\n        print(\"\\tFirst value is 17\")\n    elif n == 18:\n        print(\"\\tFirst value is 18\")\n    elif n == 19:\n        print(\"\\tFirst value is 19\")\n    elif n == 20:\n        print(\"\\tFirst value is 20\")\n    elif n == 21:\n        print(\"\\tFirst value is 21\")\n    elif n == 22:\n        print(\"\\tFirst value is 22\")\n    elif n == 23:\n        print(\"\\tFirst value is 23\")\n    elif n == 24:\n        print(\"\\tFirst value is 24\")\n    elif n == 25:\n        print(\"\\tFirst value is 25\")\n    elif n == 26:\n        print(\"\\tFirst value is 26\")\n    elif n == 27:\n        print(\"\\tFirst value is 27\")\n    elif n == 28:\n        print(\"\\tFirst value is 28\")\n    elif n == 29:\n        print(\"\\tFirst value is 29\")\n    elif n == 30:\n        print(\"\\tFirst value is 30\")\n    elif n == 31:\n        print(\"\\tFirst value is 31\")\n    elif n == 32:\n        print(\"\\tFirst value is 32\")\n    elif n == 33:\n        print(\"\\tFirst value is 33\")\n    elif n == 34:\n        print(\"\\tFirst value is 34\")\n    elif n == 35:\n        print(\"\\tFirst value is 35\")\n    elif n == 36:\n        print(\"\\tFirst value is 36\")\n    elif n == 37:\n        print(\"\\tFirst value is 37\")\n    elif n == 38:\n        print(\"\\tFirst value is 38\")\n    elif n == 39:\n        print(\"\\tFirst value is 39\")\n    elif n == 40:\n        print(\"\\tFirst value is 40\")\n    elif n == 41:\n        print(\"\\tFirst value is 41\")\n    elif n == 42:\n        print(\"\\tFirst value is 42\")\n    elif n == 43:\n        print(\"\\tFirst value is 43\")\n    elif n == 44:\n        print(\"\\tFirst value is 44\")\n    elif n == 45:\n        print(\"\\tFirst value is 45\")\n    elif n == 46:\n        print(\"\\tFirst value is 46\")\n    elif n == 47:\n        print(\"\\tFirst value is 47\")\n    elif n == 48:\n        print(\"\\tFirst value is 48\")\n    elif n == 49:\n        print(\"\\tFirst value is 49\")\n    elif n == 50:\n        print(\"\\tFirst value is 50\")\n    elif n == 51:\n        print(\"\\tFirst value is 51\")\n    elif n == 52:\n        print(\"\\tFirst value is 52\")\n    elif n == 53:\n        print(\"\\tFirst value is 53\")\n    elif n == 54:\n        print(\"\\tFirst value is 54\")\n    elif n == 55:\n        print(\"\\tFirst value is 55\")\n    elif n == 56:\n        print(\"\\tFirst value is 56\")\n    elif n == 57:\n        print(\"\\tFirst value is 57\")\n    elif n == 58:\n        print(\"\\tFirst value is 58\")\n    elif n == 59:\n        print(\"\\tFirst value is 59\")\n    elif n == 60:\n        print(\"\\tFirst value is 60\")\n    elif n == 61:\n        print(\"\\tFirst value is 61\")\n    elif n == 62:\n        print(\"\\tFirst value is 62\")\n    elif n == 63:\n        print(\"\\tFirst value is 63\")\n    elif n == 64:\n        print(\"\\tFirst value is 64\")\n    elif n == 65:\n        print(\"\\tFirst value is 65\")\n    elif n == 66:\n        print(\"\\tFirst value is 66\")\n    elif n == 67:\n        print(\"\\tFirst value is 67\")\n    elif n == 68:\n        print(\"\\tFirst value is 68\")\n    elif n == 69:\n        prin"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n+1): \n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum \ndef insert_list(elements, e):\n    '''\n    Write a function to insert e at the end of a list.\n    '''\n    elements.append(e)\ndef sort_asc(elements):\n    '''\n    Write a function to sort a list of elements by ascending order.\n    '''\n    for i in range(len(elements)):\n        for j in range(0,len(elements)-i-1):\n            if elements[j] > elements[j+1]:\n                temp = elements[j]\n                elements[j] = elements[j+1]\n                elements[j+1] = temp\n    return elements\ndef sort_desc(elements):\n    '''\n    Write a function to sort a list of elements by descending order.\n    '''\n    for i in range(len(elements)):\n        for j in range(len(elements)-i-1):\n            if elements[j] < elements[j+1]:\n                temp = elements[j]\n                elements[j] = elements[j+1]\n                elements[j+1] = temp\n    return elements\ndef merge_sort(elements, left_index, right_index):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    mid = (left_index + right_index) // 2\n    if left_index < mid:\n        sort_asc(elements[left_index:mid+1])\n        sort_asc(elements[mid+1:right_index])\n        sort_asc(elements[right_index:len(elements)])\n    elif right_index < mid:\n        sort_desc(elements[left_index:mid+1])\n        sort_desc(elements[mid+1:right_index])\n        sort_desc(elements[right_index:len(elements)])\n    elif left_index == mid:\n        sort_desc(elements[left_index:right_index])\n    return elements\ndef sort_by_count(elements,count):\n    '''\n    Write a function to sort a list of elements by counting.\n    '''\n    for i in range(len(elements)):\n        count = count + 1\n        for j in range(len(elements)):\n            if elements[j] == elements[i] and count > 1:\n                temp = elements[j]\n                elements[j] = elements[i]\n                elements[i] = temp\n                count = count - 1\n    return elements\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str)):\n        for j in range(l):\n            if str[i] == str[j]:\n                return str[i]\n            \n    return \"No Match\"\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in l:\n        l.remove(i)\n    return l\n    \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = ''\n    for i in range(0, l):\n        if len(str[i]) > 0:\n            res = res + str[i]\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i=0\n    j=0\n    k=0\n    for string in str:\n        if (i < l):\n            if (string == '\\n'):\n                j+=1\n                i+=1\n            else:\n                k+=1\n                i+=1\n        else:\n            break\n    if (k==0):\n        return ['']\n    else:\n        return list(str[j:k+1])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str is None:\n        return None\n    elif type(str) is not list:\n        return str\n    else:\n        for i in range(len(str)):\n            if len(str[i])>l:\n                return str[i]\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = list(map(lambda x: x.replace('\\n',''), str))\n    # for i in l:\n    #     print(i)\n    s = ''\n    for i in range(len(l)):\n        if len(l[i]) > s:\n            s = len(l[i])\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start_idx = l.index(str)\n    if len(str) - start_idx >= min_len:\n        return str[start_idx:start_idx+min_len]\n    else:\n        return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return \"\".join(str[i:i+l])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return(str[:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return ''.join(str[i:i+l] for i in range(0, len(str), l))\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # regex = re.compile(\"(?: )|(?<= )|(\\n)\")\n    # return regex.sub(' ',text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.strip()\n    text3 = text2.replace(\" \",\"\")\n    return text3\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # create an empty string \n    result = ''\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('^\\s+', '', text1).strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(' +','', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = \"\"\n    for i in text1:\n        if i!='':\n            text += i\n        else:\n            text +=''\n    return text\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from the given string.\n    '''\n    text = text.replace('.',' ').replace(',','').replace('!', '').replace('?', '').replace('\"', '').replace(':', '').replace(';', '').replace(')', '').replace('}', '').replace(']', '').replace('}', '').replace('\u201c', '').replace('\u201d', '').replace('\u2014','')\n    \n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace the white space with a new line\n    text1 = text1.replace('\\n', '\\n')\n    # Remove the whitespace\n    text1 = text1.replace(' ', '')\n    # Remove the new line\n    text1 = text1.replace('\\n', '')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    text3 = text2.replace(\"&\", \" and \")\n    text4 = text3.replace(\"!\", \" that \")\n    text5 = text4.replace(\"?\", \" in \")\n    text6 = text5.replace(\" '\", \" in \")\n    text7 = text6.replace(\"'\", \" in \")\n    text8 = text7.replace(\"?\", \" about \")\n    text9 = text8.replace(\"!\", \"!\")\n    text10 = text9.replace(\"&\", \" and \")\n    text11 = text10.replace(\"!\", \"!\")\n    text12 = text11.replace(\"'\", \" in \")\n    text13 = text12.replace(\"'\", \" in \")\n    text14 = text13.replace(\"?\", \" about \")\n    text15 = text14.replace(\"!\", \"!\")\n    text16 = text15.replace(\"&\", \" and \")\n    text17 = text16.replace(\"!\", \"!\")\n    text18 = text17.replace(\"'\", \" in \")\n    text19 = text18.replace(\"'\", \" in \")\n    text20 = text19.replace(\"?\", \" about \")\n    text21 = text20.replace(\"!\", \"!\")\n    text22 = text21.replace(\"'\", \" in \")\n    text23 = text22.replace(\"'\", \" in \")\n    text24 = text23.replace(\"?\", \" about \")\n    text25 = text24.replace(\"!\", \"!\")\n    text26 = text25.replace(\"&\", \" and \")\n    text27 = text26.replace(\"!\", \"!\")\n    text28 = text27.replace(\"'\", \" in \")\n    text29 = text28.replace(\"'\", \" in \")\n    text30 = text29.replace(\"?\", \" about \")\n    text31 = text30.replace(\"!\", \"!\")\n    text32 = text31.replace(\"'\", \" in \")\n    text33 = text32.replace(\"'\", \" in \")\n    text34 = text33.replace(\"?\", \" about \")\n    text35 = text34.replace(\"!\", \"!\")\n    text36 = text35.replace(\"'\", \" in \")\n    text37 = text36.replace(\"'\", \" in \")\n    text38 = text37.replace(\"?\", \" about \")\n    text39 = text38.replace(\"!\", \"!\")\n    text40 = text39.replace(\"'\", \" in \")\n    text41 = text40.replace(\"'\", \" in \")\n    text42 = text41.replace(\"?\", \" about \")\n    text43 = text42.replace(\"!\", \"!\")\n    text44 = text43.replace(\"'\", \" in \")\n    text45 = text44.replace(\"'\", \" in \")\n    text46 = text45.replace(\"?\", \" about \")\n    text47 = text46.replace(\"!\", \"!\")\n    text48 = text47.replace(\"'\", \" in \")\n    text49 = text48.replace(\"'\", \" in \")\n    text50 = text49.replace(\"?\", \" about \")\n    text51 = text50.replace(\"!\", \"!\")\n    text52 = text51.replace(\"'\", \" in \")\n    text53 = text52.replace(\"'\", \" in \")\n    text54 = text53.replace(\"?\", \" about \")\n    text55 = text54.replace(\"!\", \"!\")\n    text56 = text55.replace(\"'\", \" in \")\n    text57 = text56.replace(\"'\", \" in \")\n    text58 = text57.replace(\"?\", \" about \")\n    text59 = text58.replace(\"!\", \"!\")\n    text60 = text59.replace(\"'\", \" in \")\n    text61 = text60.replace(\"'\", \" in \")\n    text62 = text61.replace(\"?\", \" about \")\n    text63 = text62.replace(\"!\", \"!\")\n    text64 = text63.replace(\"'\", \" in \")\n    text65 = text64.replace(\"'\", \" in \")\n    text66 = text65.replace(\"?\", \" about \")\n    text67 = text66.replace(\"!\", \"!\")\n    text68 = text67.replace(\"'\", \" in \")\n    text69 = text68.replace(\"'\", \" in \")\n    text70 = text69.replace(\"?\", \" about \")\n    text71 = text70.replace(\"!\", \"!\")\n    text72 = text71.replace(\"'\", \" in \")\n    text73 = text72.replace(\"'\", \" in \")\n    text74 = text73.replace(\"?\", \" about \")\n    text75 = text74.replace(\"!\", \"!\")\n    text76 = text75.replace(\"'\", \" in \")\n    text77 = text76.replace(\"'\", \" in \")\n    text78 = text77.replace(\"?\", \" about \")\n    text79 = text78.replace(\"!\", \"!\")\n    text80 = text79.replace(\"'\", \" in \")\n    text81 = text80.replace(\"'\", \" in \")\n    text82 = text81.replace(\"?\", \" about \")\n    text83 = text82.replace(\"!\", \"!\")\n    text84 = text83.replace(\"'\", \" in \")\n    text85 = text84.replace(\"'\", \" in \")\n    text86 = text85.replace(\"?\", \" about \")\n    text87 = text86.replace(\"!\", \"!\")\n    text88 = text87.replace(\"'\", \" in \")\n    text89 = text88.replace(\"'\", \" in \")\n    text90 = text89.replace(\"?\", \" about \")\n    text91 = text90.replace(\"!\", \"!\")\n    text92 = text91.replace(\"'\", \" in \")\n    text93 = text92.replace(\"'\", \" in \")\n    text94 = text93.replace(\"?\", \" about \")\n    text95 = text94.replace(\"!\", \"!\")\n    text96 = text95.replace(\"'\", \" in \")\n    text97 = text96.replace(\"'\", \" in \")\n    text98 = text97.replace(\"?\", \" about \")\n    text99 = text98.replace(\"!\", \"!\")\n    text100 = text99.replace(\"'\", \" in \")\n    text101 = text100.replace(\"'\", \" in \")\n    text102 = text101.replace(\"?\", \" about \")\n    text103 = text102.replace(\"!\", \"!\")\n    text104 = text103.replace(\"'\", \" in \")\n    text105 = text104.replace(\"'\", \" in \")\n    text106 = text105.replace(\"?\", \" about \")\n    text107 = text106.replace(\"!\", \"!\")\n    text108 = text107.replace(\"'\", \" in \")\n    text109 = text108.replace(\"'\", \" in \")\n    text110 = text109.replace(\"?\", \" about \")\n    text111 = text110.replace(\"!\", \"!\")\n    text112 = text111.replace(\"'\", \" in \")\n    text113 = text112.replace(\"'\", \" in \")\n    text114 = text113.replace(\"?\", \" about \")\n    text115 = text114.replace(\"!\", \"!\")\n    text116 = text115.replace(\"'\", \" in \")\n    text117 = text116.replace(\"'\", \" in \")\n    text118 = text117.replace(\"?\", \" about \")\n    text119 = text118.replace(\"!\", \"!\")\n    text120 = text119.replace(\"'\", \" in \")\n    text121 = text120.replace(\"'\", \" in \")\n    text122 = text121.replace(\"?\", \" about \")\n    text123 = text122.replace(\"!\", \"!\")\n    text124 = text123.replace(\"'\", \" in \")\n    text125 = text124.replace(\"'\", \" in \")\n    text126 = text125.replace(\"?\", \" about \")\n    text127 = text126.replace(\"!\", \"!\")\n    text128 = text127.replace(\"'\", \" in \")\n    text129 = text128.replace(\"'\", \" in \")\n    text130 = text129.replace(\"?\", \" about \")\n    text131 = text130.replac"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = ''\n    for element in text1:\n        if(re.match(r'\\s+', element)):\n            text2 = text2 + element.strip() +''\n        else:\n            text2 = text2 + element.strip()\n    return text2.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if type(text1) is not str:\n        raise TypeError(\"Input must be of type string.\")\n    text1 = text1.replace(' ', '').replace('\\n', '')\n    text1 = text1.replace('  ', '').replace('\\t', '')\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount: \n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    # If the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    # If the sale amount is less than the actual cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount==actual_cost:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    elif actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost - sale_amount\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # get sale amount \n    sale_amount = sale_amount * (1 + actual_cost)\n    \n    if sale_amount < 100000:\n        return sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    #raise NotImplementedError()\n    \n    return 0.5 * (actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost*sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, math.ceil(math.sqrt(n))) :\n        if n % i == 0 :\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 2\n    factors = 0\n    while i <= n :\n        if n % i == 0 :\n            factors += i\n            if i == 2 :\n                print(n, \"is an even number.\")\n            i += 1\n        else :\n            print(n, \"is not an even number.\")\n            return \"error\"\n    print(\"The sum of the even factors is\", factors)\n    return \"done\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 : \n            sum += i\n            if n // i == i : \n                sum += sumofFactors(n//i)\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors=[]\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            factors.append(i)\n            n=n/i\n        else:\n            i+=1\n    if n!=1:\n        factors.append(int(n))\n    return sum(factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    def isprime(n) : \n        if n == 2 or n == 3 : return 1\n        if n % 2 == 0 or n % 3 == 0 : return 0\n        if n % 2 == 1 or n % 3 == 1 : return 0\n        for i in range(5, int(math.sqrt(n)) + 1, 6) :\n            if n % i == 0 or n % (i + 2) == 0 : return 0\n        return 1\n    sum = 0\n    for i in range(2, n) :\n        if isprime(i) == 1 :\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 2\n    factors = [] \n    while i < n : \n        if n % i == 0 : \n            factors.append(i) \n            factors.append(n//i) \n            break\n        i += 1\n    if len(factors) == 1 : \n        return factors[0] \n    else : \n        return 0 \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : return 0\n    else:\n        sum = 0\n        for i in range(1,int(math.sqrt(n))+1) :\n            if n%i == 0:\n                sum += i\n        if sum == n : return sum\n        else: return sumofFactors(n-sum)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while n!= 0:\n        if n % 2 == 0:\n            sum += n\n        n //= 2\n    return sum\ndef main():\n    '''\n    Write a python function to determine if a given number is a prime number.\n    '''\n    testCase = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    for i in testCase:\n        assert (is_prime(i)), \"is_prime function returned false for number {}\".format(i)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    f = []\n    n = abs(n)\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n % i == 0:\n            f.append(i)\n    if len(f) == 2:\n        return f[0]*f[0]+f[1]*f[1]\n    else:\n        return 0\n    \ndef main() :\n    '''\n    Take number as input.\n    '''\n    n = int(input(\"Enter a number : \"))\n    result = sumofFactors(n)\n    if result == 0:\n        print(\"Factors of the given number are : \")\n    else :\n        print(\"The sum of the even factors of the given number is : \")\n        print(result)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 0 :\n        return 0\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_regex = re.compile(r'z')\n    match = word_regex.search(text)\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\bz\\b'\n    regex = re.compile(pattern)\n    match = regex.findall(text)\n    if match!= None:\n        return match[0]\n    else:\n        return text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Find all characters that are z\n    match_list = []\n    for i in range(len(text)):\n        if text[i] == 'z' or text[i] == 'Z':\n            match_list.append(text[i])\n    # print(match_list)\n    # Find all characters that are not z\n    not_match_list = []\n    for i in range(len(text)):\n        if text[i] not in match_list:\n            not_match_list.append(text[i])\n    # print(not_match_list)\n    # print(\"The word after removing 'z' and 'Z' is:\", \"\".join(not_match_list))\n    # print(\"The word after removing 'z' is:\", \"\".join(match_list))\n    return \"\".join(not_match_list)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def inner(word):\n        if word == 'z':\n            return True\n        else:\n            return False\n    result = map(inner, text)\n    return list(result)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile(r'(z)(?=[A-Z])')\n    return regex.match(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_lower = text.lower()\n    pattern_1 = r\"z\"\n    pattern_2 = r\"[\\w]+\"\n    pattern = re.compile(pattern_1,re.IGNORECASE)\n    result = re.findall(pattern,text_lower)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words= text.split()\n    #print(words)\n    #print(len(words))\n    #print(words[0:3])\n    zs = 'z'\n    #print(zs)\n    for word in words:\n        if word[0:1] == zs:\n            return word\n    return 'wordz not found'\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    if 'z' in text:\n        return text\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match_z = re.findall(r'\\bz\\b',text)\n    return match_z\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile('\\w+z\\b')\n    match = regex.findall(text)\n    return match\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2<1 or monthnum2>12:\n        return False\n    if monthnum2==1 or monthnum2==2:\n        if monthnum2==1 and day_in_month(1,31,monthnum2):\n            return True\n        elif monthnum2==2 and day_in_month(1,31,monthnum2):\n            return True\n        else:\n            return False\n    elif monthnum2==3 or monthnum2==4:\n        if monthnum2==3 and day_in_month(1,31,monthnum2):\n            return True\n        elif monthnum2==4 and day_in_month(1,31,monthnum2):\n            return True\n        else:\n            return False\n    elif monthnum2==5 or monthnum2==6:\n        if monthnum2==5 and day_in_month(1,31,monthnum2):\n            return True\n        elif monthnum2==6 and day_in_month(1,31,monthnum2):\n            return True\n        else:\n            return False\n    elif monthnum2==7 or monthnum2==8:\n        if monthnum2==7 and day_in_month(1,31,monthnum2):\n            return True\n        elif monthnum2==8 and day_in_month(1,31,monthnum2):\n            return True\n        else:\n            return False\n    elif monthnum2==9 or monthnum2==10:\n        if monthnum2==9 and day_in_month(1,31,monthnum2):\n            return True\n        elif monthnum2==10 and day_in_month(1,31,monthnum2):\n            return True\n        else:\n            return False\n    elif monthnum2==11 or monthnum2==12:\n        if monthnum2==11 and day_in_month(1,31,monthnum2):\n            return True\n        elif monthnum2==12 and day_in_month(1,31,monthnum2):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Incorrect month number!\"\n    elif monthnum2 == 1 or monthnum2 == 2:\n        return \"January\"\n    elif monthnum2 == 3 or monthnum2 == 4 or monthnum2 == 5:\n        return \"February\"\n    elif monthnum2 == 6 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 9 or monthnum2 == 10 or monthnum2 == 11:\n        return \"March\"\n    elif monthnum2 == 12:\n        return \"April\"\n    else:\n        return \"Incorrect month number!\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Incorrect month number.\"\n    elif (monthnum2 == 1 and 31<=monthnum2) or (monthnum2==2 and 29<=monthnum2):\n        return \"Invalid month number.\"\n    elif (monthnum2 == 2 and 28<=monthnum2) or (monthnum2==3 and 31<=monthnum2):\n        return \"Invalid month number.\"\n    else:\n        return \"Valid month number.\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 == 31):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        int(monthnum2)\n        if int(monthnum2) > 12:\n            return f\"{monthnum2} is not in the month\"\n        elif int(monthnum2) == 1:\n            return \"1st\"\n        else:\n            return \"0th\"\n    except:\n        return \"invalid month number\"\n    \ndef check_numb_number(numb2):\n    '''\n    Write a function to check whether the given number contains more than 7 digits or not.\n    '''\n    try:\n        int(numb2)\n        if int(numb2) > 10:\n            return f\"{numb2} is not in the number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid number\"\n    \ndef check_pref_number(pref2):\n    '''\n    Write a function to check whether the given pref. number contains more than 9 digits or not.\n    '''\n    try:\n        int(pref2)\n        if int(pref2) > 9:\n            return f\"{pref2} is not in the number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid pref. number\"\n    \ndef check_stock_number(stock2):\n    '''\n    Write a function to check whether the given stock number contains more than 9 digits or not.\n    '''\n    try:\n        int(stock2)\n        if int(stock2) > 9:\n            return f\"{stock2} is not in the number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid stock number\"\n    \ndef check_price(price2):\n    '''\n    Write a function to check whether the given price number contains more than 5 digits or not.\n    '''\n    try:\n        int(price2)\n        if int(price2) > 5:\n            return f\"{price2} is not in the number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid price number\"\n    \ndef check_price_number(price2):\n    '''\n    Write a function to check whether the given price number contains more than 5 digits or not.\n    '''\n    try:\n        int(price2)\n        if int(price2) > 5:\n            return f\"{price2} is not in the number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid price number\"\n    \ndef check_total(number2):\n    '''\n    Write a function to check whether the given number contains more than 6 digits or not.\n    '''\n    try:\n        int(number2)\n        if int(number2) > 6:\n            return f\"{number2} is not in the number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid number\"\n    \ndef check_total_number(number2):\n    '''\n    Write a function to check whether the given number contains more than 6 digits or not.\n    '''\n    try:\n        int(number2)\n        if int(number2) > 6:\n            return f\"{number2} is not in the number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid number\"\n    \ndef check_name_string(name_string):\n    '''\n    Write a function to check whether the given name string contains more than 9 digits or not.\n    '''\n    try:\n        int(name_string)\n        if int(name_string) > 9:\n            return f\"{name_string} is not in the name\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid name string\"\n    \ndef check_email_string(email_string):\n    '''\n    Write a function to check whether the given email string contains more than 6 characters or not.\n    '''\n    try:\n        int(email_string)\n        if len(email_string) > 6:\n            return f\"{email_string} is not in the email\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid email string\"\n    \ndef check_city_string(city_string):\n    '''\n    Write a function to check whether the given city string contains more than 6 characters or not.\n    '''\n    try:\n        int(city_string)\n        if len(city_string) > 6:\n            return f\"{city_string} is not in the city\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid city string\"\n    \ndef check_store_number(store_number):\n    '''\n    Write a function to check whether the given store number contains more than 9 digits or not.\n    '''\n    try:\n        int(store_number)\n        if int(store_number) > 9:\n            return f\"{store_number} is not in the store\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid store number\"\n    \ndef check_store_name(store_name):\n    '''\n    Write a function to check whether the given store name contains more than 9 digits or not.\n    '''\n    try:\n        int(store_name)\n        if int(store_name) > 9:\n            return f\"{store_name} is not in the store\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid store name\"\n    \ndef check_phone_number(phone_number):\n    '''\n    Write a function to check whether the given phone number contains more than 6 digits or not.\n    '''\n    try:\n        int(phone_number)\n        if int(phone_number) > 6:\n            return f\"{phone_number} is not in the phone number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid phone number\"\n    \ndef check_phone_string(phone_string):\n    '''\n    Write a function to check whether the given phone string contains more than 6 characters or not.\n    '''\n    try:\n        int(phone_string)\n        if len(phone_string) > 6:\n            return f\"{phone_string} is not in the phone number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid phone string\"\n    \ndef check_mobile_number(mobile_number):\n    '''\n    Write a function to check whether the given mobile number contains more than 9 digits or not.\n    '''\n    try:\n        int(mobile_number)\n        if int(mobile_number) > 9:\n            return f\"{mobile_number} is not in the mobile number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid mobile number\"\n    \ndef check_mobile_string(mobile_string):\n    '''\n    Write a function to check whether the given mobile string contains more than 9 digits or not.\n    '''\n    try:\n        int(mobile_string)\n        if len(mobile_string) > 9:\n            return f\"{mobile_string} is not in the mobile number\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid mobile string\"\n    \ndef check_job_function(job_function):\n    '''\n    Write a function to check whether the given job function contains more than 4 digits or not.\n    '''\n    try:\n        int(job_function)\n        if int(job_function) > 4:\n            return f\"{job_function} is not in the job function\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid job function\"\n    \ndef check_hiring_time(hiring_time):\n    '''\n    Write a function to check whether the given hiring time contains more than 5 digits or not.\n    '''\n    try:\n        int(hiring_time)\n        if int(hiring_time) > 5:\n            return f\"{hiring_time} is not in the hiring time\"\n        else:\n            return \"0\"\n    except:\n        return \"invalid hiring time\"\n    \ndef check_work_place(work_place):\n    '''\n    Write a function to check whether the given work place contains more than 4 digits or not.\n    '''\n    try:\n        int"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not isinstance(monthnum2,int):\n        return False\n    if not monthnum2 in range(1,13):\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 0 < monthnum2 < 13:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 2:\n        return 'yes'\n    else:\n        return 'no'\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for element in stringlist:\n        reversedlist.append(element[::-1])\n    return reversedlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate over the list\n    for i in range(len(stringlist)):\n        # iterate backwards through the string values\n        for j in range(i, len(stringlist)):\n            # swap the elements\n            stringlist[i], stringlist[j] = stringlist[j], stringlist[i]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #Your code here\n    s = str()\n    for i in range(len(stringlist)):\n        s += stringlist[i]\n    print(s)\n    s = s[::-1]\n    print(s)\n    return s\n    \ndef reverse_string_recursive(string):\n    '''\n    Write a function to reverse a string recursively.\n    '''\n    #Your code here\n    if len(string) <= 1:\n        return string\n    return string[::-1] + reverse_string_recursive(string[1:])\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    #remove spaces from both left and right\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i].replace(\" \", \"\")\n    \n    #concatenate strings from left\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i] + stringlist[i+1]\n        \n    return stringlist\n        \ndef convert_to_list_of_dicts(filename):\n    '''\n    Write a function that reads a JSON file and returns a list of dictionaries.\n    '''\n    \n    #create empty dictionary to store data\n    data_dict = {}\n    \n    #read JSON file and convert it to dictionary\n    with open(filename) as file:\n        data = json.load(file)\n        \n    #convert string to list of lists\n    for p in data:\n        for q in data[p]:\n            #ignore empty lists\n            if q:\n                #append each value to dictionary\n                data_dict[q] = p + \" \" + q + \" \" + q\n                \n    #convert dictionary to list of lists\n    return data_dict\n        \ndef get_n_th_element_from_dict(dictionary, n):\n    '''\n    Take a dictionary of values and return the nth element.\n    '''\n    \n    return dictionary[list(dictionary.keys())[n-1]]\n        \ndef merge_dicts_in_list(dict1, dict2):\n    '''\n    Take two dictionaries and return a dictionary containing the contents of each.\n    '''\n    \n    return dict1.update(dict2)\n    \ndef get_all_values_of_dict(dict1):\n    '''\n    Take a dictionary and return the values of all keys as a list.\n    '''\n    \n    return list(dict1.values())\n        \ndef get_all_values_of_list(list):\n    '''\n    Take a list and return the values of all keys as a list.\n    '''\n    \n    return list(set(list))\n    \ndef get_all_values_of_string(string):\n    '''\n    Take a string and return the values of all keys as a list.\n    '''\n    \n    return list(set(string.split()))\n    \ndef get_all_values_of_dict_of_string(dict, string):\n    '''\n    Take a dictionary and a string and return the values of all keys as a list.\n    '''\n    \n    return list(set(dict.get(string, [])))\n    \ndef get_all_values_of_list_of_string(list, string):\n    '''\n    Take a list and a string and return the values of all keys as a list.\n    '''\n    \n    return list(set(string.split()))\n    \ndef get_all_values_of_string_of_dict(dict, string):\n    '''\n    Take a dictionary and a string and return the values of all keys as a list.\n    '''\n    \n    return list(set(dict.get(string, [])))\n    \ndef get_all_values_of_list_of_string_of_dict(list, string):\n    '''\n    Take a list and a string and return the values of all keys as a list.\n    '''\n    \n    return list(set(string.split()))\n    \ndef convert_keys_to_lowercase(dict):\n    '''\n    Take a dictionary and convert keys to lowercase.\n    '''\n    \n    return dict.copy()\n    \ndef convert_keys_to_uppercase(dict):\n    '''\n    Take a dictionary and convert keys to uppercase.\n    '''\n    \n    return dict.copy()\n    \ndef get_all_values_of_string_of_dict_in_list(string, dictionary):\n    '''\n    Take a string and a dictionary and return the values of all keys as a list.\n    '''\n    \n    return list(set(string.split()).intersection(set(dictionary.values())))\n    \ndef get_all_values_of_string_of_dict_in_list_of_string(string, dictionary):\n    '''\n    Take a string and a dictionary and return the values of all keys as a list.\n    '''\n    \n    return list(set(string.split()).intersection(set(dictionary.values())))\n    \ndef get_all_values_of_list_of_string_of_dict_in_list(list, dictionary):\n    '''\n    Take a list and a dictionary and return the values of all keys as a list.\n    '''\n    \n    return list(set(string.split()).intersection(set(dictionary.values())))\n    \ndef get_all_values_of_list_of_string_of_dict_in_list_of_string(list, dictionary):\n    '''\n    Take a list and a dictionary and return the values of all keys as a list.\n    '''\n    \n    return list(set(string.split()).intersection(set(dictionary.values())))\n    \ndef get_all_values_of_string_of_dict_in_list_of_string_of_dict(string, dictionary):\n    '''\n    Take a string and a dictionary and return the values of all keys as a list.\n    '''\n    \n    return list(set(string.split()).intersection(set(dictionary.values())))\n    \ndef get_all_values_of_string_of_dict_in_list_of_string_of_dict(string, dictionary):\n    '''\n    Take a string and a dictionary and return the values of all keys as a list.\n    '''\n    \n    return list(set(string.split()).intersection(set(dictionary.values())))\n    \ndef get_all_values_of_dict_in_list_of_string_of_dict(dictionary, string):\n    '''\n    Take a dictionary and a string and return the values of all keys as a list.\n    '''\n    \n    return list(set(dictionary.values()).intersection(set(string.split())))\n    \ndef get_all_values_of_dict_in_list_of_string_of_dict(dictionary, string):\n    '''\n    Take a dictionary and a string and return the values of all keys as a list.\n    '''\n    \n    return list(set(dictionary.values()).intersection(set(string.split())))\n    \ndef convert_keys_to_lowercase_and_uppercase(dict):\n    '''\n    Take a dictionary and convert keys to lowercase and uppercase.\n    '''\n    \n    return dict.copy()\n    \ndef convert_keys_to_lowercase_and_uppercase_and_string(dict):\n    '''\n    Take a dictionary and convert keys to lowercase and uppercase and string.\n    '''\n    \n    return dict.copy()\n    \ndef convert_keys_to_lowercase_and_uppercase_and_list(dict):\n    '''\n    Take a dictionary and convert keys to lowercase and uppercase and string.\n    '''\n    \n    return dict.copy()\n    \ndef convert_keys_to_lowercase_and_uppercase_and_list_of_string(dict):\n    '''\n    Take a dictionary and convert keys to lowercase and uppercase and string.\n    '''\n    \n    return dict.copy()\n    \ndef convert_keys_to_lowercase_and_uppercase_and_list_of_dict(dict):\n    '''\n    Take a dictionary and convert keys to lowercase and uppercase and string.\n    '''\n    \n    return dict.copy()\n    \ndef convert_keys_to_lowercase_and_uppercase_and_list_of_dict_in_list(dict):\n    '''\n    Take a dictionary and convert keys to lowercase and uppercase and string.\n    '''\n    \n    return dict.copy()\n    \ndef convert_keys_to_lowercase_and_uppercase_and_list_of_dict_in_list_of_string(dict):\n    '''\n    Take a dictionary and convert keys to lowercase and uppercase and string.\n    '''\n    \n    return dict.copy()\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    start = 0\n    end = len(stringlist)-1\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n        start = i+1\n        end = start+len(stringlist[i])\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # make a new list called reversed\n    reversedlist = []\n    \n    # make a reverse list\n    for value in stringlist:\n        reversedlist.append(value[::-1])\n        \n    # return the new list\n    return reversedlist\n        \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    for i in range(len(stringlist)):\n        for j in range(len(stringlist)-1,i, -1):\n            print(stringlist[j], end=\"\")\n        print("
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for element in stringlist:\n        newlist.append(element[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    print(lst)\n    # Python code to find the minimum length of a list of numbers\n    i = 0\n    min_len = len(lst)\n    for j in range(len(lst)):\n        if lst[j] < lst[i]:\n            i = j\n    min_len = lst[i]\n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return lst[0:len(lst)]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    # Pick the middle value\n    mid = int(n/2)\n    # Find the mid value in the list \n    mid = lst[mid]\n    # Assign the second middle value to the variable \n    for i in range(0, mid+1):\n        for j in range(0, n-i):\n            if lst[j+i] < mid:\n                mid = lst[j+i]\n                break\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in lst:\n        for j in range(i + 1, len(lst)):\n            if lst[j] < lst[i]:\n                lst[i], lst[j] = lst[j], lst[i] \n    print(lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum_len = 0\n    for i in range(len(lst)):\n        if lst[i] >= minimum_len:\n            minimum_len = lst[i]\n    return minimum_len\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return None\n    min_index = 0\n    for i in range(1,len(lst)):\n        if lst[i] < lst[min_index]:\n            min_index = i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst) - 1): \n        if len(lst[i]) < len(lst[i+1]): \n            return lst[i] \n    return -1\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = []\n    for i in range(len(lst)):\n        min_lst.append(min(lst[i:len(lst)]))\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = []\n    for i in range(len(lst)):\n        lst.append(min(lst[i+1:]))\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) < 2:\n        return lst\n    # find the the first element of the list\n    smallest = lst[0]\n    # find the second element of the list\n    larger = lst[1]\n    # iterate over the list and find the minimum length\n    for i in range(2,len(lst)):\n        if lst[i] < smaller:\n            smallest = lst[i]\n        elif lst[i] > larger:\n            larger = lst[i]\n    return smaller, larger\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #calculate the area\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"Enter the length and width of rectangle: \")\n    l=int(input())\n    print(\"Enter the width: \")\n    w=int(input())\n    print(\"Enter the length: \")\n    l=int(input())\n    print(\"Enter the area of rectangle: \")\n    area=l*w\n    print(\"The area of rectangle is: \",area)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"Rectangle Area: \" + str(l * b))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'([a-z])([A-Z])', r' \\1', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    str3 = str(str2)\n    if re.search(r'[a-z]', str3):\n        str4 = ''\n        for i in str3:\n            if i == 'z':\n                str4 += 'a'\n            elif i == 'A':\n                str4 += 'a'\n            elif i == 'B':\n                str4 += 'b'\n            elif i == 'C':\n                str4 += 'c'\n            elif i == 'D':\n                str4 += 'd'\n            elif i == 'E':\n                str4 += 'e'\n            elif i == 'F':\n                str4 += 'f'\n            elif i == 'G':\n                str4 += 'g'\n            elif i == 'H':\n                str4 += 'h'\n            elif i == 'I':\n                str4 += 'i'\n            elif i == 'J':\n                str4 += 'j'\n            elif i == 'K':\n                str4 += 'k'\n            elif i == 'L':\n                str4 += 'l'\n            elif i == 'M':\n                str4 +='m'\n            elif i == 'N':\n                str4 += 'n'\n            elif i == 'O':\n                str4 += 'o'\n            elif i == 'P':\n                str4 += 'p'\n            elif i == 'Q':\n                str4 += 'q'\n            elif i == 'R':\n                str4 += 'r'\n            elif i == 'S':\n                str4 +='s'\n            elif i == 'T':\n                str4 += 't'\n            elif i == 'U':\n                str4 += 'u'\n            elif i == 'V':\n                str4 += 'v'\n            elif i == 'W':\n                str4 += 'w'\n            elif i == 'X':\n                str4 += 'x'\n            elif i == 'Y':\n                str4 += 'y'\n            elif i == 'Z':\n                str4 += 'z'\n            else:\n                str4 += i\n        return str4\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = []\n    for s in str1:\n        if s.isupper() == True:\n            s = s.lower()\n            if len(s) > 1:\n                if s[1] == '.':\n                    s = s[:-1]\n                result.append(s)\n            else:\n                result.append(s)\n        else:\n            result.append(s)\n    return ''.join(result)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # if the string has a special character\n    if '-' in str1:\n        # split the string\n        str1_splitted = str1.split('-')\n        # loop through the splitted string\n        for i in range(len(str1_splitted)):\n            # get the index of the upper_case substring\n            i_upper = str1_splitted[i].find('U')\n            # if there is a substring upper_case, just return the remaining substring\n            if i_upper!= -1:\n                str1_splitted[i] = str1_splitted[i][:i_upper]\n        str1 = ''.join(str1_splitted)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    new_str1 = ''\n    for char in str1:\n        if char in '.,?':\n            new_str1 = new_str1 + char\n    return new_str1\ndef get_first_character(str1):\n    '''\n    Write a function to get the first character of a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if i == 0:\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef remove_period(str1):\n    '''\n    Write a function to remove period from a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef remove_asterisk(str1):\n    '''\n    Write a function to remove asterisk from a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i] == '*':\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef remove_upper(str1):\n    '''\n    Write a function to remove uppercase characters from a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef remove_punct(str1):\n    '''\n    Write a function to remove punctuation marks from a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i] not in '!;-_?\u2014'\"':\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_digit(str1):\n    '''\n    Write a function to check if a given string is a digit.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_special_char(str1):\n    '''\n    Write a function to check if a given string is a special character.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_lower(str1):\n    '''\n    Write a function to check if a given string is lowercase.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_upper(str1):\n    '''\n    Write a function to check if a given string is uppercase.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_digits(str1):\n    '''\n    Write a function to check if a given string is digits.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_period(str1):\n    '''\n    Write a function to check if a given string is a period.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_asterisk(str1):\n    '''\n    Write a function to check if a given string is an asterisk.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i] == '*':\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_digit_special_char(str1):\n    '''\n    Write a function to check if a given string is a digit special character.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_special_char_special_char(str1):\n    '''\n    Write a function to check if a given string is a special character special character.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i] in '!.;-_?\u2014'\"':\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef is_first_character(str1):\n    '''\n    Write a function to check if a given string is the first character.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef get_index_of_second_char(str1):\n    '''\n    Write a function to get the index of the second character of a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            new_str1 = new_str1 + str1[i]\n    return int(new_str1[1:])\ndef remove_first_and_last_char(str1):\n    '''\n    Write a function to remove all the first and last characters from a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef remove_first_char(str1):\n    '''\n    Write a function to remove the first character from a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef remove_last_char(str1):\n    '''\n    Write a function to remove the last character from a given string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            new_str1 = new_str1 + str1[i]\n    return new_str1\ndef remove_digit(str1):\n    '''\n    Write a function to remove the digit from a given string.\n    '''\n    new_str1 = ''"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # get number of uppercase characters\n    cnt = 0\n    for i in str1:\n        if i.isupper():\n            cnt += 1\n    # remove uppercase characters\n    for i in range(cnt):\n        str1 = str1.replace(str1[i], \"\")\n    return str1\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # get number of lowercase characters\n    cnt = 0\n    for i in str1:\n        if i.islower():\n            cnt += 1\n    # remove lowercase characters\n    for i in range(cnt):\n        str1 = str1.replace(str1[i], \"\")\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove any numeric characters from a given string.\n    '''\n    # get number of digits\n    cnt = 0\n    for i in str1:\n        if i.isdigit():\n            cnt += 1\n    # remove digits\n    for i in range(cnt):\n        str1 = str1.replace(str1[i], \"\")\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove any punctuation from a given string.\n    '''\n    # get number of punctuation characters\n    cnt = 0\n    for i in str1:\n        if i in '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~':\n            cnt += 1\n    # remove punctuation\n    for i in range(cnt):\n        str1 = str1.replace(str1[i], \"\")\n    return str1\ndef split(str1):\n    '''\n    Split a given string into a list of substrings.\n    '''\n    # get number of characters\n    cnt = 0\n    for i in str1:\n        if i.isalnum():\n            cnt += 1\n    # split the string\n    return str1[:cnt]\ndef split_list(str1):\n    '''\n    Split a given string into a list of substrings.\n    '''\n    # get number of characters\n    cnt = 0\n    for i in str1:\n        if i.isalnum():\n            cnt += 1\n    # split the string\n    return str1[:cnt]\ndef count_substr(str1):\n    '''\n    Write a function to count the number of substrings in a given string.\n    '''\n    # get number of substrings\n    cnt = 0\n    str1 = str1.lower()\n    for i in range(len(str1) - 1):\n        if str1[i:i+2].isalnum():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = r'[A-Z]'\n    result = re.sub(regex, '', str1)\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(.)\\1+'\n    return re.sub(pattern, r'\\1', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # iterate over string to find each character\n    for char in str1:\n        # if char is an uppercase character, remove it\n        if char.isupper():\n            # remove char\n            str1 = str1.replace(char, '')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = re.sub(r'[A-Z]', r'', str1)\n    return new_str\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n    return lst1\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for x in lst:\n        print(x[0])\n        \ndef main():\n    '''\n    This program takes the path to a folder containing a set of images from\n    Imagenet and runs it through the Extract function.\n    '''\n    path = input(\"Enter the path to your dataset: \")\n    if not os.path.exists(path):\n        print(\"Unable to find path: \" + path)\n        sys.exit()\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 1: return lst[0]\n    else: \n        return lst[0][0]\n    \ndef main(): \n    ''' \n    You have to implement your own main function.\n    '''\n    lst = [1, 2, 3, 4, 5, 6] \n    print(Extract(lst))\n    print(Extract(['a', 'b', 'c']))\n    print(Extract(lst))\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    print(lst[0])\n    print('\\n')\n    return lst[0]\n    "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst.sort()\n    lst.insert(0,lst.pop(0))\n    print(lst)\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = sorted(lst, key = lambda x: x[0])\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0:\n        print('empty')\n        return 0\n    elif len(lst) == 1:\n        print(lst[0][0])\n        return lst[0][0]\n    elif len(lst) == 2:\n        print(lst[0][0])\n        print(lst[1][0])\n        return lst[0][0]\n    else:\n        print(lst[0])\n        for i in range(0, len(lst)):\n            print(lst[i][0])\n        return lst[0][0]\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case = 0\n    for char in str:\n        if char.isupper():\n            upper_case += 1\n    return upper_case\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if str == '':\n        return 0\n    else:\n        s = 0\n        for i in str:\n            if i == i.upper():\n                s += 1\n        return s\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Method 1: Python script to calculate the upper case count.\n    '''\n    Original string : 'BELOQURBNNNNNNNNNQRNNN'\n    Count the number of upper case characters in the given string:\n    output : 3\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr = ctr + 1\n    print(f'The number of uppercase characters is {ctr}')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    new_string = \"\"\n    for i in str:\n        if i.isupper():\n            new_string = new_string + i.upper()\n    print(new_string)\n    return new_string\n    # write a function that returns the count of uppercase characters in a given string\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # your code goes here\n    upper_count=0\n    for char in str:\n        if char.isupper():\n            upper_count+=1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    '''\n    print(\"***** LOWER COUNTING *****\")\n    print(\"\\t\\t\",str)\n    lower_ctr = 0\n    for i in str:\n        if i.isupper():\n            lower_ctr += 1\n    print(\"\\t\\t\\t\",lower_ctr)\n    '''\n    print(\"***** UPPER COUNTING *****\")\n    upper_ctr = 0\n    for i in str:\n        if i.isupper():\n            upper_ctr += 1\n    print(\"\\t\\t\\t\",upper_ctr)\n    print(str)\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if type(str)==str:\n        upper_case = 0\n        for i in str:\n            if i.isupper():\n                upper_case += 1\n        return upper_case\n    else:\n        return 0\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        res.extend([list1[j] for j in range(i, len(list1))])\n    return res\n    "
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = ['A','B','C']\n    res = []\n    for i in list1:\n        for j in list2:\n            res.append(i+j)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]+list1[j] in list1:\n                print(list1[i],list1[j])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = len(list1)\n    if l < 2:\n        raise ValueError('List must contain at least two elements')\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in list1:\n        combinations.append(list(i))\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        output = []\n        for el in list1:\n            for e in combinations_list(list1[1:]):\n                output.append([el] + e)\n        return output\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1[0]]\n    else:\n        return [list1[0], list1[1]] + combinations_list(list1[2:])\n    \ndef combinations_dict(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    if len(dict1) == 0:\n        return []\n    elif len(dict1) == 1:\n        return [dict1[0]]\n    else:\n        return [dict1[0], dict1[1]] + combinations_dict(dict1[2:])\n    \ndef numbers_dict(dict1):\n    '''\n    Write a function that takes a dictionary and creates a new dictionary that has the keys in the\n    list, and the values are the counts.\n    '''\n    if len(dict1) == 0:\n        return {}\n    elif len(dict1) == 1:\n        return dict1\n    else:\n        return {dict1[0] + \" \" + str(dict1[1]): dict1[1]} + numbers_dict(dict1[2:])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1[0]]\n    else:\n        return list(itertools.combinations(list1, len(list1)-1))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    combinations = []\n    for i in range(n):\n        combinations.append([list1[i]])\n    for j in range(1, n):\n        for k in combinations:\n            j.append(list1[j[-1]])\n            combinations.append(k+list1[j[-1]])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in list1:\n        for j in range(1,len(i)+1):\n            if j > len(i):\n                list2.append(i)\n                break\n            else:\n                list2.append(i[:j])\n    return list2\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_max_product = 1\n    for i in range(1, len(arr)):\n        current_max_product *= arr[i]\n        if current_max_product > max_product:\n            max_product = current_max_product\n        \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    length = len(arr)\n    if length == 1:\n        return arr\n    \n    max_prod = arr[0]\n    for i in range(1, length):\n        cur_prod = arr[i] * arr[i - 1]\n        max_prod = max(max_prod, cur_prod)\n    \n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_value = -float(\"inf\")\n    \n    subarray_product = 1\n    \n    for i in range(1, len(arr)):\n        subarray_product = arr[i] * subarray_product\n        max_value = max(max_value, subarray_product)\n    \n    return max_value\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_index_arr = []\n    max_index_subarr_product = []\n    max_sub_arr = []\n    for i in range(len(arr)):\n        current_max = 0\n        current_index_arr = []\n        for j in range(i, len(arr)):\n            current_max = max(current_max, arr[j])\n            current_index_arr.append(j)\n        if current_max not in max_index_arr:\n            max_index_arr.append(current_max)\n        if len(current_index_arr) > len(max_index_arr):\n            max_index_subarr_product = current_index_arr\n    return max_index_arr, max_index_subarr_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_product = arr[0]\n    start = 1\n    max_product_length = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            start = i + 1\n        if arr[i] < max_product:\n            max_product_length = i - start + 1\n    return max_product_length\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Find the maximum sum of a subsequence of array\n    # [1,2,3,4,5,6] [4,2,1,1,1,1] [1,2,3,4,5,6]\n    # If there is a subarray of length 1, return its maximum sum\n    # If there are more than one, return the maximum sum of the subsequences\n    # of size 2.\n    # If there is no subarray of length 2, return the maximum sum of the subarray\n    # of size 1.\n    def max_subarray_product(arr):\n        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] + arr[1]\n        return max(arr[0] * max_subarray_product(arr[1:]), max_subarray_product(arr[:2]))\n    \n    # Method 2, so we have to recurse\n    # If there is a subsequence of size 2, we return its maximum sum\n    # If there is no subsequence, return the maximum sum of the subarray of size 1\n    # If the subsequence is 1, we return the sum of the subsequence of size 2\n    # If the subsequence is 0, we return the sum of the subsequence of size 1\n    def max_subarray_product(arr):\n        if len(arr) == 1 or len(arr) == 2:\n            return arr[0]\n        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] + arr[1]\n        return max(arr[0] * max_subarray_product(arr[1:]), max_subarray_product(arr[:2]))\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    subarray_size = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if(arr[i] > 0 and arr[j] > 0):\n                product = arr[i] * arr[j]\n                if(product > max_product):\n                    max_product = product\n                    subarray_size = j - i + 1\n    return (max_product, subarray_size)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0] * max_subarray_product(arr[1:]), arr[0] * arr[1])\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_max = arr[0]\n    for i in range(1,len(arr)):\n        current_max = arr[i]*current_max\n        if current_max > max_product:\n            max_product = current_max\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    current_product = 1\n    for n in arr:\n        if n > 0:\n            current_product *= n\n            max_product = max(current_product, max_product)\n    return max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # if all values are same, return True\n    if len(dict) == n:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if key in n:\n            if key not in n[key]:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if type(dict[key]) is dict:\n            if dict[key]!= n:\n                return False\n        elif type(dict[key]) is list:\n            if n!= dict[key]:\n                return False\n        elif dict[key]!= n:\n            return False\n    return True\n    \ndef find_key(dictionary, key):\n    '''\n    Find the index of the key.\n    '''\n    for i, v in enumerate(dictionary):\n        if v == key:\n            return i\n    return -1\n    \ndef create_sorted_dictionary(dictionary):\n    '''\n    Create a sorted dictionary.\n    '''\n    sorted_dictionary = {}\n    for key, value in dictionary.items():\n        if check_value(sorted_dictionary, key):\n            sorted_dictionary[key] = sorted(value)\n        else:\n            sorted_dictionary[key] = value\n    return sorted_dictionary\n        \ndef remove_nth_value(dictionary, n):\n    '''\n    Remove a value at the n-th position.\n    '''\n    try:\n        del dictionary[n]\n    except KeyError:\n        pass\n    return dictionary\n        \ndef write_to_csv(filename, dictionary):\n    '''\n    Write dictionary to a csv file.\n    '''\n    with open(filename, 'w', newline='') as f:\n        for key, value in dictionary.items():\n            for i in range(len(value)):\n                f.write(key + ',')\n                f.write(value[i] + ',')\n            f.write('\\n')\n            \ndef read_from_csv(filename):\n    '''\n    Read dictionary from a csv file.\n    '''\n    with open(filename, 'r') as f:\n        dictionary = {}\n        for line in f:\n            line = line.split(',')\n            key, value = line[:2]\n            dictionary[key] = value.split(',')\n    return dictionary"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n < 1:\n        return \"List must be positive integers.\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    for k in dict.keys():\n        if dict[k]!= n:\n            return False\n    return True\n    \ndef make_dict(filename):\n    '''\n    Read file and convert each line to a dictionary.\n    '''\n    \n    dict_list = []\n    file = open(filename, \"r\")\n    \n    for line in file:\n        dict_dict = {}\n        line = line.rstrip().split(\",\")\n        if len(line) == 0:\n            continue\n        for word in line:\n            word = word.rstrip()\n            if word not in dict_dict:\n                dict_dict[word] = 1\n            else:\n                dict_dict[word] += 1\n                \n        if len(dict_dict) == 1:\n            dict_list.append(dict_dict)\n        else:\n            for key, value in dict_dict.items():\n                if key not in dict_list[-1]:\n                    dict_list.append({key:value})\n                else:\n                    dict_list[-1][key] += value\n                    \n    return dict_list\n    \ndef dict_to_list(dict_list):\n    '''\n    Write a function that converts a dictionary to a list.\n    '''\n    \n    output_list = []\n    for d in dict_list:\n        for k in d.keys():\n            output_list.append(d[k])\n            \n    return output_list\n    \ndef main():\n    '''\n    Main function that calls the functions.\n    '''\n    \n    file_name = input(\"Enter the name of the file: \")\n    \n    if os.path.isfile(file_name):\n        filename = file_name\n    else:\n        print(\"File doesn't exist\")\n        quit()\n    \n    dict_list = make_dict(filename)\n    if check_value(dict_list, 0):\n        for dict in dict_list:\n            print(dict)\n    else:\n        print(\"Problem\")\n        \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if dict[i][j]!= dict[i][i]:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if type(dict[key])!= dict or len(dict[key])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_dict = dict.values()\n    value_set = set(value_dict)\n    value_dict = list(value_set)\n    for value in value_dict:\n        if n.count(value) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[i] == dict[i+1] for i in range(len(dict)-1))\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if dict[i]!= dict[i+1]:\n            print('Value in dictionary not the same. Check if it is correct')\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for i in dict1.items():\n        new_dict[i[0]] = i[1]\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key in dict1.keys():\n        if len(key.split()) == 1:\n            if dict1[key] == 0:\n                dict2[key] = None\n            elif dict1[key] == 1:\n                dict2[key] = None\n        else:\n            dict2[key] = None\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.clear()\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i,j in dict1.items():\n        if len(j) == 0:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if len(dict1[i]) == 0:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) == 0:\n        return dict1\n    else:\n        return {key:value for key,value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # your code goes here\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in range(len(dict1)):\n        if dict1[i] == \"\":\n            dict1.pop(i)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = 1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    def run(arr, n):\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            if arr[0]*arr[1] > arr[1]*arr[0]:\n                return arr[0]*arr[1]\n            else:\n                return arr[1]*arr[0]\n        if arr[0]*arr[1] > arr[1]*arr[0]:\n            return run(arr[1:], n-1)\n        else:\n            return run(arr[:n-1], n-1)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return arr[0]\n    dp = [[None] * (len(arr) + 1) for _ in range(len(arr))]\n    dp[0][0] = arr[0]\n    for i in range(1, len(arr) + 1):\n        dp[i][0] = arr[i - 1] * arr[i]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr)):\n            dp[i][j] = max(arr[i] * dp[i - 1][j], arr[j] * dp[i][j - 1])\n    return dp[-1][-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_arr = arr[0]\n    for i in range(1, len(arr)):\n        temp_arr = arr[i]\n        temp_max = arr[0]\n        for j in range(len(arr)):\n            if arr[j] < temp_max:\n                temp_max = arr[j]\n            elif arr[j] > temp_max:\n                temp_max = arr[j]\n        \n        if temp_max > max_arr:\n            max_arr = temp_max\n    return max_arr\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i-1])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    res = []\n    for i in range(len(arr) - 1):\n        temp = arr[i] * arr[i+1]\n        res.append(temp)\n    return max(res)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 1\n    for i in range(1, len(arr)):\n        result *= arr[i]\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float(\"-inf\")\n    for num in arr:\n        for n in range(1, num+1):\n            if n < num:\n                max_product = max(max_product, n*n)\n    return max_produc"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    possible_product = 1\n    for i in range(1, len(arr)):\n        possible_product *= arr[i]\n        \n    return possible_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[0] * arr[1]\n    \n    else:\n        dp = [0] * n\n        dp[0] = arr[0]\n        for i in range(1, n):\n            dp[i] = arr[i] * max(dp[i-1], dp[i-2])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    temp = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            temp.append(test_tup[i]+test_tup[j])\n    return temp\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_list = []\n    for i in test_tup:\n        if i[0] > 0 and i[0] > 0:\n            test_list.append((i[0]-1,i[1]))\n        if i[1] > 0 and i[1] > 0:\n            test_list.append((i[0],i[1]-1))\n    test_list = sorted(test_list)\n    return test_list\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    first = test_tup[0]\n    second = test_tup[1]\n    tup_num = 0\n    for k in range(len(test_tup) - 1):\n        tup_num += first[k] + second[k]\n    return tup_num\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        # print(test_tup[i])\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #todo: Implement the code here\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (tup[0] + tup[1], tup[0] - tup[1])\n    \n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(lambda x,y: x + y, test_tup[0], test_tup[1]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test = list(test_tup)\n    for i in range(1,len(test)):\n        test[i-1] = test[i] + test[i-1]\n    return test\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod_n = n % len(arr)\n    remainder = arr[mod_n]\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]*i\n    return sum % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod * i % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # write your code here\n    if n == 0:\n        return arr[0]\n    else:\n        return arr[n-1] * find_remainder(arr, n-1)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = []\n    for i in range(len(arr)):\n        remainder.append(arr[i] * (i + 1))\n    return list(dict.fromkeys(remainder))\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, len(arr)):\n        product *= arr[i]\n    product %= n\n    return product\ndef test_find_remainder():\n    assert find_remainder([1,2,3], 3) == 1\n    assert find_remainder([1,2,3], 4) == 3\n    assert find_remainder([1,2,3], 5) == 6\n    assert find_remainder([1,2,3], 1) == 1\n    assert find_remainder([1,2,3], 2) == 2\n    assert find_remainder([1,2,3], 3) == 1\n    assert find_remainder([1,2,3], 4) == 3\n    assert find_remainder([1,2,3], 5) == 6\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find_remainder([1,2,3], 1) == 2\n    assert find_remainder([1,2,3], 2) == 3\n    assert find_remainder([1,2,3], 3) == 4\n    assert find_remainder([1,2,3], 4) == 6\n    assert find_remainder([1,2,3], 5) == 1\n    assert find"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return (1+sum(arr[n-1::-1])) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    mod = n * n\n    i = 0\n    while (i < len(arr)):\n        if (i % mod == 0):\n            return arr[i]\n        i += 1\n    return -1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return arr[0]*arr[1]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    i = 0\n    result = 0\n    while i < len(arr):\n        result = result * arr[i]\n        i += 1\n    result %= n\n    return result\n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    temp = 0\n    count = 0\n    for i in l: \n        if i > temp: \n            count = count + 1\n        temp = i\n    return count == 1\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l):\n        j = i+1\n        while j < len(l):\n            if l[i] > l[j]:\n                return True\n            j = j+1\n        i = i+1\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if (i == 0) or (l[i-1] == l[i]):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if type(l) is not list:\n        raise TypeError('l must be a list')\n    if len(l) < 2:\n        raise ValueError('l must contain at least 2 numbers')\n    list_consecutive = []\n    for i in l:\n        if i not in list_consecutive:\n            list_consecutive.append(i)\n    return list_consecutive\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # define a list of numbers\n    l_check = list(range(0,100))\n    \n    # check if the list contains consecutive numbers\n    consecutive = 0\n    \n    # if the list has not yet been calculated\n    if len(l_check)!= 100:\n        # initialize an empty list \n        consecutive_list = []\n    \n    # if the list has been calculated\n    else: \n        # if the list is already a sorted list\n        if l_check.sort() == l_check:\n            # initialize an empty list \n            consecutive_list = []\n        # if the list is unsorted\n        else:\n            # initialize a list with the elements \n            # of the unsorted list \n            consecutive_list = l_check\n            # if the list has not been sorted yet \n            if len(consecutive_list)!= 100: \n                # initialize an empty list \n                consecutive_list = []\n        \n    # iterate through the list of numbers \n    # and add the current number to the previous \n    # number until it finds a consecutive number \n    for num in l_check:\n        # check if the previous number \n        # is in the list of numbers \n        if consecutive_list[0] == num: \n            # if the current number is not \n            # the last number in the list \n            if num!= consecutive_list[-1]: \n                # add the current number \n                consecutive_list.append(num)\n        # if the previous number \n        # is not in the list of numbers \n        elif consecutive_list[0]!= num: \n            # initialize an empty list \n            consecutive_list = []\n    \n    # return the final list of numbers \n    return(consecutive_list)\n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    elif len(l) == 1:\n        return False\n    else:\n        # check if the last element is the same as the first element\n        if l[-1] == l[0]:\n            if len(l) > 2:\n                if l[-2] == l[-1]:\n                    if len(l) > 3:\n                        if l[-3] == l[-2]:\n                            return True\n            else:\n                return True\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0:\n        return False\n    if l[0]>=l[1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    else:\n        if l[0] == l[1] and len(l) == 2:\n            if l[0]!= l[1]:\n                return True\n            else:\n                return False\n        else:\n            return False\n        \ndef check_Even(l): \n    '''\n    Write a python function to check whether the given list contains even numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    else:\n        if l[0] == l[1] and len(l) == 2:\n            if l[0] % 2 == 0 and l[0]!= l[1]:\n                return True\n            else:\n                return False\n        else:\n            return False\n        \ndef check_Odd(l): \n    '''\n    Write a python function to check whether the given list contains odd numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    else:\n        if l[0] == l[1] and len(l) == 2:\n            if l[0] % 2 == 1 and l[0]!= l[1]:\n                return True\n            else:\n                return False\n        else:\n            return False\n        \ndef check_NotOdd(l): \n    '''\n    Write a python function to check whether the given list contains not odd numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    else:\n        if l[0] == l[1] and len(l) == 2:\n            if l[0] % 2!= 1 and l[0]!= l[1]:\n                return True\n            else:\n                return False\n        else:\n            return False\n        \ndef check_Prime(l): \n    '''\n    Write a python function to check whether the given list contains prime numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    else:\n        for i in range(2, int(len(l)/2)):\n            if l[i] == 0:\n                return False\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for x in range(len(l)): \n        if l[x] - l[x-1] == 1: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    a = []\n    for i in l: \n        if i % 10!= 0: \n            a.append(i) \n    return len(a) == len(set(a))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    inter_tuple = ()\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            if test_list1[i] not in inter_tuple:\n                inter_tuple = test_list1[i]\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersected_tuple = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersected_tuple.append(test_list1[i])\n    return intersected_tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Check for equality\n    if test_list1[0] == test_list2[0]:\n        return test_list1[0]\n    # Check for the order\n    if len(test_list1) == len(test_list2):\n        # Sort the two lists\n        test_list1.sort()\n        test_list2.sort()\n        # Check if first list is already sorted\n        if test_list1[0] < test_list2[0]:\n            return tuple_intersection(test_list2, test_list1)\n        # Check if second list is already sorted\n        elif test_list1[-1] > test_list2[-1]:\n            return tuple_intersection(test_list1, test_list2[:-1])\n        else:\n            return tuple_intersection(test_list1[:-1], test_list2[-1:])\n    else:\n        # Check if first list is already sorted\n        if test_list1[0] < test_list2[0]:\n            return tuple_intersection(test_list2, test_list1[:-1])\n        # Check if second list is already sorted\n        elif test_list1[-1] > test_list2[-1]:\n            return tuple_intersection(test_list1[:-1], test_list2[-1:])\n        else:\n            # First list is already sorted\n            if test_list1[-1] < test_list2[-1]:\n                return tuple_intersection(test_list1[:-1], test_list2[-1:])\n            # Second list is already sorted\n            elif test_list1[0] > test_list2[0]:\n                return tuple_intersection(test_list1[:-1], test_list2[:-1])\n            # First list is already sorted\n            else:\n                return tuple_intersection(test_list1[0], test_list2[-1:])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    t1 = tuple(test_list1)\n    t2 = tuple(test_list2)\n    common_elements = {}\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) > len(test_list2):\n        return tuple(test_list1)\n    elif len(test_list2) > len(test_list1):\n        return tuple(test_list2)\n    elif len(test_list1) == len(test_list2):\n        intersection = []\n        for x,y in zip(test_list1,test_list2):\n            if x in test_list1 and y in test_list2:\n                intersection.append(x)\n                intersection.append(y)\n        return tuple(intersection)\n    else:\n        raise NotImplementedError(\"The given list of tuples is not intersecting.\")\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    i,j = 0,0\n    intersection = ()\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for element in test_list1:\n        if element in test_list2:\n            intersection_list.append(element)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    intersection = []\n    \n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection.append(test_list1[i])\n    \n    return tuple(intersection)\n    \n    "
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # your code here\n    return ()\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    i = 0\n    j = 0\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # keep track of index and string\n    i = 0\n    s = 0\n    # loop through string\n    while i < len(str1):\n        # if it is a letter, update index and string\n        if str1[i] in string.ascii_letters:\n            s = s + 1\n            str1 = str1[:s] + newch + str1[s+1:]\n        # if it is a symbol, update index and string\n        elif str1[i] in string.punctuation:\n            s = s + 1\n            str1 = str1[:s] + newch + str1[s+1:]\n        # if it is not a letter or a symbol, keep adding it to the string\n        else:\n            s = s + 1\n            str1 = str1[:s] + newch + str1[s:]\n        # check if we've reached the end of string\n        if i == len(str1) - 1:\n            str1 = str1[:s] + newch + str1[s:]\n        # increment index and string\n        i = i + 1\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,'')\n    str2 = str2.replace(newch,'')\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Write your code here.\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                str1=str1.replace(ch,newch,1)\n            elif str1[i].islower():\n                str1=str1.replace(ch,newch,1)\n            else:\n                str1=str1.replace(ch,newch,1)\n            #if i==0:\n            #    str1=str1.replace(ch,newch,1)\n    return str1\n    \nprint(replace_char(\"aa#a\",'A', 'z')"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if(str1[i] == ch):\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    print(str1, ch)\n    str2 = str1.replace(ch,newch)\n    print(str2)\n    return str2\n    \nprint(replace_char(\"artagethree\", \"i\", \"y\"))\nprint(replace_char(\"printi\", \"s\", \"y\")"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return ''.join([str1[i] if str1[i]!= newch else ch for i in range(len(str1))])\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    a=list(str1)\n    for i in range(len(a)):\n        if a[i]==ch:\n            a[i]=newch\n    return ''.join(a)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,''.join(newch))\n    return str2\n    \ndef replace_char_at(str1,index,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,''.join(newch),index)\n    return str2\n    \ndef replace_char_at_end(str1,index,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1[:index] + newch + str1[index:]\n    return str2\n    \ndef replace_all_char(str1,ch,newch):\n    '''\n    Write a function to replace all characters in a string.\n    '''\n    str2 = \"\"\n    for c in ch:\n        str2 += newch\n    return str2\n    \ndef is_alphanum_str(str1):\n    '''\n    Test if a string is alphanumeric.\n    '''\n    for c in str1:\n        if not c.isalpha():\n            return False\n    return True\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch if newch.isalpha() else ch if ch.isalpha() else str1\n    "
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_1 = dict(Counter(dict1.values()))\n    \n    return [value for (value, count) in dict_1.items() if count == 1]\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # TODO: use a custom key function to sort by key\n    #key = lambda x: x[1]\n    sorted_dict = dict()\n    for key, value in dict1.items():\n        sorted_dict[value] = key\n    #print(sorted_dict)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda item: item[1])\n    #print(sorted_dict)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict=dict()\n    for item in dict1:\n        new_dict[item]=dict1[item]\n    new_dict=sorted(new_dict.items(), key=lambda x:x[1],reverse=True)\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    dict1_sorted=dict(sorted(dict1.items(),key=lambda item: item[1],reverse=True))\n    return dict1_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # print(dict1)\n    for i in dict1:\n        # print(i)\n        if type(dict1[i]) is dict:\n            # print(\"Type 1\")\n            sort_counter(dict1[i])\n        else:\n            # print(\"Type 2\")\n            dict1[i] = sorted(dict1[i])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2=dict1.copy()\n    counts=Counter(dict1.values())\n    for key in dict1:\n        dict2[key]=counts[key]\n        dict2[counts[key]]=key\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    n = len(dict1)\n    for i in range(n):\n        dict1[i] = Counter(dict1[i]).most_common()\n        dict1[i] = dict1[i][::-1]\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] > nums[1]:\n        return nums[0] + big_sum(nums[1:])\n    return nums[0] + big_sum(nums[1:])\n    \n    \nprint(big_sum([10,20,30,40,50,60,70,80,90])"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n        elif i < min:\n            min = i\n    return max + min\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    sum = max(max_val, min_val)\n    print(\"Maximum value in the given array is\",sum)\n    \n    for i in range(len(nums)):\n        sum = max(sum, nums[i])\n        sum = min(sum, nums[i])\n    \n    print(\"Minimum value in the given array is\", sum)\n    \nbig_sum([3,6,1,9,10,5])\n    "
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = max(nums) + min(nums)\n    return result\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_num = 0\n    small_num = 0\n    for i in nums:\n        if i < 0:\n            big_num += i\n        elif i > 0:\n            small_num += i\n    return big_num, small_num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    big_sum = 0\n    small_sum = 0\n    if n == 0:\n        return 0\n    else:\n        for i in range(n):\n            big_sum += nums[i]\n        for i in range(n-1,-1,-1):\n            small_sum += nums[i]\n        return max(big_sum,small_sum)\n    \n    \n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables\n    max_value = -1000000000\n    smallest_value = 999999999\n    largest_value = 0\n    # Find max value\n    for num in nums:\n        if num > largest_value:\n            largest_value = num\n        # Find smallest value\n        elif num < smallest_value:\n            smallest_value = num\n    # Return answer\n    return max_value + smallest_value\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # if len(nums) == 0:\n    #     return 0\n    # else:\n    #     n = max(nums)\n    #     if n < nums[0]:\n    #         return n\n    #     else:\n    #         return n + big_sum(nums[1:])\n    #     # find max and min in nums and return it\n    #     return max(nums) + min(nums[1:])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # YOUR CODE HERE\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join(i.lower() for i in str1.split(' '))\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    \n    new_str = []\n    for i in str1:\n        if i.lower() not in new_str:\n            new_str.append(i.lower())\n    return new_str\n    \n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    \n    new_str = []\n    for i in str1:\n        if i not in ['.', ',', ':', '!', '?', ';', ':', ':', ';', ';', ':', ';', ':', ';', ':', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', ';', "
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r\"[a-z]\")\n    return pattern.sub(\"\", str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'([a-z])([A-Z])', r'\\1_\\2', str1).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = ''\n    for char in str1:\n        if char.lower() not in 'abcdefghijklmnopqrstuvwxyz':\n            res += char\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # WRITE YOUR CODE HERE\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all white spaces from a given string.\n    '''\n    pattern = re.compile(r'^\\s')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    pattern = re.compile(r'\\b\\d+\\b')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    pattern = re.compile(r'[~!@#$%^&*()\\(\\)_+=[]{};:,.<>/?|`]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_symbols(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9#!$%&+,/:;=?@~\\\\|-]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9-]+')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    pattern = re.compile(r'\\d+')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_upper_case(str1):\n    '''\n    Write a function to remove all upper case letters from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_numbers_upper_case(str1):\n    '''\n    Write a function to remove all numbers from upper case letters from a given string.\n    '''\n    pattern = re.compile(r'\\b\\d+\\b')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_tokens(str1):\n    '''\n    Write a function to remove all tokens from a given string.\n    '''\n    pattern = re.compile(r'[.,;:!()?`~!@#$%^&*()_+-=<>,.:;,\"''?/\\\\]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_end_of_sentence(str1):\n    '''\n    Write a function to remove the end of a sentence from a given string.\n    '''\n    pattern = re.compile(r'\\n')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9_\\s!;]+')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9_\\s!$%&*+-]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_symbols(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9_]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    pattern = re.compile(r'\\d+')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_punctuation_upper_case(str1):\n    '''\n    Write a function to remove all punctuation from upper case letters from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_digits_upper_case(str1):\n    '''\n    Write a function to remove all digits from upper case letters from a given string.\n    '''\n    pattern = re.compile(r'\\d+')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_tokens_upper_case(str1):\n    '''\n    Write a function to remove all tokens from upper case letters from a given string.\n    '''\n    pattern = re.compile(r'[.,;:!()?`~!@#$%^&*()_+-=<>,.:;\",\"''?/\\\\]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_end_of_sentence_upper_case(str1):\n    '''\n    Write a function to remove the end of a sentence from upper case letters from a given string.\n    '''\n    pattern = re.compile(r'\\n')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_punctuation_lower_case(str1):\n    '''\n    Write a function to remove all punctuation from lower case letters from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9_\\s!$%&*+-]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_special_chars_lower_case(str1):\n    '''\n    Write a function to remove all special characters from lower case letters from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9_\\s!$%&*+-]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_digits_lower_case(str1):\n    '''\n    Write a function to remove all digits from lower case letters from a given string.\n    '''\n    pattern = re.compile(r'\\d+')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_punctuation_lower_case(str1):\n    '''\n    Write a function to remove all punctuation from lower case letters from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9_]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_digits_lower_case(str1):\n    '''\n    Write a function to remove all digits from lower case letters from a given string.\n    '''\n    pattern = re.compile(r'\\d+')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_punctuation_special_chars(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9_!$%&*+-]')\n    str1 = re.sub(pattern,'',str1)\n    return str1\ndef remove_special"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # pattern = r'[A-Z]'\n    pattern = r'[a-z]'\n    # get the regular expression\n    regex = re.compile(pattern, re.IGNORECASE)\n    # print(regex)\n    # find all the match groups\n    str2 = regex.findall(str1)\n    # print(str2)\n    return str2\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Fill in the condition\n    # ***** YOUR CODE HERE *****\n    if n >= 0 :\n        while n!= 0 :\n            n = n // 10\n            # print(n)\n            # print(n % 10)\n    else :\n        n = -1\n        while n == -1 :\n            n = n // 10\n            # print(n)\n            # print(n % 10)\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    import math\n    first = math.floor(n/10)\n    return first\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = n\n    while num > 0:\n        num //= 10\n        return num\n        "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0 :\n        return 0\n    while n>0 :\n        n=n//10\n        if n==0 :\n            break\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n < 10:\n        return n\n    \n    n = n % 10\n    return first_Digit(n // 10) + (n % 10)\n    \n    \n    \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n < 10:\n        return n\n    \n    n = n % 10\n    return second_Digit(n // 10) + (n % 10)\n    \n    \n    \ndef sumDigits(n) :\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n < 10:\n        return n\n    \n    return sumDigits(n // 10) + (n % 10)\n    \n    \n    \ndef productDigits(n) :\n    '''\n    Write a python function to find the product of the digits of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n < 10:\n        return n\n    \n    return productDigits(n // 10) * (n % 10)\n    \n    \n    \n    \ndef divisors(n) :\n    '''\n    Write a python function to find the divisors of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n < 10:\n        return n\n    \n    return divisors(n // 10) + divisors(n % 10)\n    \n    \n    \ndef is_prime(n) :\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n    \n    \ndef countPrimes(n) :\n    '''\n    Write a python function to count all primes up to a given limit.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 2:\n        for i in range(4, n):\n            if is_prime(i) == 1:\n                for j in range(i, n, 2):\n                    if is_prime(j) == 1:\n                        return 3\n                    \n        return 0\n    \n    return 0\n    \n    \n    \n    \ndef is_lcm(n) :\n    '''\n    Write a python function to determine if a given number is a Lcm number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 1\n    \n    if n == 3:\n        return 2\n    \n    if n == 4:\n        return 6\n    \n    if n > 4:\n        for i in range(5, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n    \n    \ndef is_prime_number(n) :\n    '''\n    Write a python function to determine if a given number is prime number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 2:\n        for i in range(4, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n    \n    \n    \ndef is_prime_number_inclusive(n):\n    '''\n    Write a python function to determine if a given number is prime number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 2:\n        for i in range(4, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n    \n    \n    \ndef is_prime_number_lower(n) :\n    '''\n    Write a python function to determine if a given number is prime number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 2:\n        for i in range(4, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n    \n    \n    \ndef is_prime_number_upper(n) :\n    '''\n    Write a python function to determine if a given number is prime number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 2:\n        for i in range(4, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n    \n    \ndef is_prime_number_upper_and_lower(n) :\n    '''\n    Write a python function to determine if a given number is prime number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 2:\n        for i in range(4, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n    \n    \ndef is_prime_number_upper_and_lower_or_upper(n) :\n    '''\n    Write a python function to determine if a given number is prime number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 2:\n        for i in range(4, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n    \n    \n    \ndef is_prime_number_with_divisors(n):\n    '''\n    Write a python function to determine if a given number is prime number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 2:\n        for i in range(4, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n    \n    \ndef is_prime_number_with_divisors_or_upper(n):\n    '''\n    Write a python function to determine if a given number is prime number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n > 2:\n        for i in range(4, n):\n            if n % i == 0:\n                return 0\n        \n        return 1\n    \n    return 0\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digits = []\n    while(n):\n        digits.append(n%10)\n        n = n//10\n    return digits[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    l=[]\n    if n>0:\n        for i in range(1,n+1):\n            l.append(i)\n        if n>1:\n            l.append(n%10)\n    return l[0]"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    l = []\n    n = str(n)\n    n = n[0]\n    for i in n:\n        if i.isdigit():\n            l.append(i)\n    s = \"\".join(l)\n    return int(s)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n%10\n    \n    # OR\n    \n    # last part \n    \n    # def first_Digit(n):\n        # return int(n)%10\n        # if n < 10 :\n            # return n\n        # else :\n            # return n%10\n        # return int(n%10)\n            # if n < 10 :\n                # return n\n            # else :\n                # return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if list == None:\n        return\n    else:\n        odd_list = []\n        for element in list:\n            if element % 2 == 0:\n                odd_list.append(element)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    #pass\n    #list.sort()\n    #return [ i for i in list if i % 2 == 1]\n    return list[::2]\n    #for i in list:\n        #if i % 2 == 0:\n            #return [i]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Your code here\n    odd_list = []\n    for x in list:\n        if x % 2!= 0:\n            odd_list.append(x)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    lst = list[:]\n    odd = []\n    for i in range(0,len(lst)):\n        if lst[i]%2!= 0:\n            odd.append(lst[i])\n    return odd\ndef Count(list):\n    '''\n    Write a python function which takes a list and returns the count of elements whose sum is odd.\n    '''\n    lst = list[:]\n    count = 0\n    for i in lst:\n        count+=lst.count(i)\n    return count\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = [] \n    \n    for i in list: \n        if i % 2 == 1: \n            odds.append(i) \n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [n for n in list if n % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2 == 1:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    evens = []\n    odds = []\n    for x in list:\n        if x%2!= 0:\n            odds.append(x)\n        else:\n            evens.append(x)\n    return odds,evens\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2!= 0:\n            odd.append(i)\n    return odd \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        a += i ** 3\n    return a\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum = sum + pow(i,3)\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n**3-sum(range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    for x in range(1,n+1):\n        total += x **3\n    return total\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    cubes=[]\n    \n    for i in range(1,n+1):\n        cubes.append(i**3)\n    \n    sum=0\n    for i in range(0,len(cubes)):\n        sum=sum+cubes[i]\n        \n    return sum\n    \n    #pass\n    \n    #test case\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n==0 :\n        print(0)\n    else :\n        sum=0\n        for i in range(1,n+1) :\n            sum+=i**3\n        print(sum-sum**3)\n    \ndifference(6)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 1 :\n        return 0\n    if n == 2 :\n        return 1\n    if n == 3 :\n        return 1\n    if n == 4 :\n        return 4\n    if n == 5 :\n        return 25\n    if n == 6 :\n        return 36\n    if n == 7 :\n        return 49\n    if n == 8 :\n        return 64\n    if n == 9 :\n        return 81\n    if n == 10 :\n        return 100\n    if n == 11 :\n        return 121\n    if n == 12 :\n        return 144\n    if n == 13 :\n        return 169\n    if n == 14 :\n        return 196\n    if n == 15 :\n        return 231\n    if n == 16 :\n        return 256\n    if n == 17 :\n        return 329\n    if n == 18 :\n        return 366\n    if n == 19 :\n        return 441\n    if n == 20 :\n        return 521\n    if n == 21 :\n        return 671\n    if n == 22 :\n        return 729\n    if n == 23 :\n        return 825\n    if n == 24 :\n        return 923\n    if n == 25 :\n        return 1009\n    if n == 26 :\n        return 1151\n    if n == 27 :\n        return 1271\n    if n == 28 :\n        return 1473\n    if n == 29 :\n        return 1771\n    if n == 30 :\n        return 1968\n    if n == 31 :\n        return 2307\n    if n == 32 :\n        return 2539\n    if n == 33 :\n        return 3371\n    if n == 34 :\n        return 3941\n    if n == 35 :\n        return 4607\n    if n == 36 :\n        return 5425\n    if n == 37 :\n        return 6451\n    if n == 38 :\n        return 7381\n    if n == 39 :\n        return 8203\n    if n == 40 :\n        return 10041\n    if n == 41 :\n        return 11365\n    if n == 42 :\n        return 12471\n    if n == 43 :\n        return 13483\n    if n == 44 :\n        return 14751\n    if n == 45 :\n        return 16683\n    if n == 46 :\n        return 17803\n    if n == 47 :\n        return 18387\n    if n == 48 :\n        return 19231\n    if n == 49 :\n        return 22031\n    if n == 50 :\n        return 22951\n    if n == 51 :\n        return 24683\n    if n == 52 :\n        return 25641\n    if n == 53 :\n        return 27481\n    if n == 54 :\n        return 28691\n    if n == 55 :\n        return 29451\n    if n == 56 :\n        return 30341\n    if n == 57 :\n        return 3457\n    if n == 58 :\n        return 37001\n    if n == 59 :\n        return 38155\n    if n == 60 :\n        return 3991\n    if n == 61 :\n        return 4777\n    if n == 62 :\n        return 5077\n    if n == 63 :\n        return 5331\n    if n == 64 :\n        return 5699\n    if n == 65 :\n        return 6641\n    if n == 66 :\n        return 7229\n    if n == 67 :\n        return 8239\n    if n == 68 :\n        return 9041\n    if n == 69 :\n        return 11365\n    if n == 70 :\n        return 12471\n    if n == 71 :\n        return 13483\n    if n == 72 :\n        return 14751\n    if n == 73 :\n        return 15683\n    if n == 74 :\n        return 16683\n    if n == 75 :\n        return 17803\n    if n == 76 :\n        return 18387\n    if n == 77 :\n        return 19231\n    if n == 78 :\n        return 22031\n    if n == 79 :\n        return 22951\n    if n == 80 :\n        return 24683\n    if n == 81 :\n        return 25641\n    if n == 82 :\n        return 27481\n    if n == 83 :\n        return 28691\n    if n == 84 :\n        return 29451\n    if n == 85 :\n        return 30341\n    if n == 86 :\n        return 3457\n    if n == 87 :\n        return 37001\n    if n == 88 :\n        return 38155\n    if n == 89 :\n        return 3991\n    if n == 90 :\n        return 4777\n    if n == 91 :\n        return 5077\n    if n == 92 :\n        return 5331\n    if n == 93 :\n        return 5699\n    if n == 94 :\n        return 6641\n    if n == 95 :\n        return 7229\n    if n == 96 :\n        return 8239\n    if n == 97 :\n        return 9041\n    if n == 98 :\n        return 11365\n    if n == 99 :\n        return 12471\n    if n == 100 :\n        return 13483\n    if n == 101 :\n        return 14751\n    if n == 102 :\n        return 15683\n    if n == 103 :\n        return 16683\n    if n == 104 :\n        return 17803\n    if n == 105 :\n        return 18387\n    if n == 106 :\n        return 19231\n    if n == 107 :\n        return 22031\n    if n == 108 :\n        return 22951\n    if n == 109 :\n        return 24683\n    if n == 110 :\n        return 25641\n    if n == 111 :\n        return 27481\n    if n == 112 :\n        return 28691\n    if n == 113 :\n        return 29451\n    if n == 114 :\n        return 30341\n    if n == 115 :\n        return 3457\n    if n == 116 :\n        return 37001\n    if n == 117 :\n        return 38155\n    if n == 118 :\n        return 3991\n    if n == 119 :\n        return 4777\n    if n == 120 :\n        return 5077\n    if n == 121 :\n        return 5331\n    if n == 122 :\n        return 5699\n    if n == 123 :\n        return 6641\n    if n == 124 :\n        return 7229\n    if n == 125 :\n        return 8239\n    if n == 126 :\n        return 9041\n    if n == 127 :\n        return 11365\n    if n == 128 :\n        return 12471\n    if n == 129 :\n        return 13483\n    if n == 130 :\n        return 14751\n    if n == 131 :\n        return 15683\n    if n == 132 :\n        return 16683\n    if n == 133 :\n        return 17803\n    if n == 134 :\n        return 18387\n    if n == 135 :\n        return 19231\n    if n == 136 :\n        return 22031\n    if n == 137 :\n        return 22951\n    if n == 138 :\n        return 24683\n    if n == 139 :\n        return 25641\n    if n == 140 :\n        return 27481\n    if n == 141 :\n        return 28691\n    if n == 142 :\n        return 29451\n    if n == 143 :\n        return 30341\n    if n == 144 :\n        return 3457\n    if n == 145 :\n        return 37001\n    if n == 146 :\n        return 38155\n    if n == 147 :\n        return 3991\n    if n == 148 :\n        return 4777\n    if n == 149 :\n        return 5077\n    if n == 150 :\n        return 5331\n    if n == 151 :\n        return 5699\n    if n == 152 :\n        return 6641\n    if n == 153 :\n        return 7229\n    if n == 154 :\n        return 8239\n    if n == 155 :\n        return 9041\n    if n == 156 :\n        return 11365\n    if n == 157 :\n        return 12471\n    if n == 158 :\n        return 13483\n    if n == 159 :\n        return 14751\n    if n == 160 :\n        return 15683\n    if n == 161 :\n        return 16683\n    if n == 162 :\n        return 17803\n    if n == 163 :\n        return 18387\n    if n == 164 :\n        return 19231\n    if n == 165 :\n        return 22031\n    if n == 166 :\n        return 22951\n    if n == 167 :\n        return 24683\n    if n == 168 :\n        return 25641\n    if n ="
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for n in range(1,n+1):\n        sum = sum + (n**3)\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(\"Difference between cubes\")\n    first_num = int(input(\"Enter the first number : \"))\n    sum_num = int(input(\"Enter the sum of cubes : \"))\n    total_num = first_num + sum_num\n    total_num = total_num ** 3\n    print(\"The total : \", total_num)\n    return total_num\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    count = 0\n    for x in range(0,n):\n        count = count + (x**3)\n    return count \n    "
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    N = len(A)\n    count = 0\n    for i in range(N-1) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] == 0 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-2) : \n        for j in range(i+1,N-1) : \n            if A[i]^A[j]!=A[i]^A[j+1] : \n                count += 1 \n    return count\n    \ndef main() : \n    '''\n    Write a Python function that takes two numbers as parameters, and \n    returns the number of pairs of whose xor value is odd.\n    '''\n    A, N = map(int, input().split())\n    print(find_Odd_Pair(A,N))\n    \nif __name__ == \"__main__\" : \n    main("
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        if A[i]==0:\n            continue\n        if A[i]&1!=1:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Your code here\n    count=0\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]==N:\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if(A==0) :\n        return 0\n    elif(N==0) :\n        return 0\n    elif (A&N==0) :\n        return 1 + find_Odd_Pair(A>>1,N>>1)\n    else :\n        return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor = 0\n    xor = 0\n    for i in range(N) :\n        xor = xor ^ A[i]\n    if xor & 1 == 1 : \n        print(\"{0} pairs of {1} are odd\".format(xor,N))\n        return 1\n    else : \n        print(\"{0} pairs of {1} are not odd\".format(xor,N))\n        return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    lst = []\n    \n    for i in range(N) : \n        lst.append(A[i]^N)\n    \n    lst_1 = []\n    for i in range(N) : \n        if A[i] == N : \n            lst_1.append(i)\n    \n    cnt = 0 \n    for i in range(len(lst)) :\n        if lst[i] in lst_1 :\n            cnt += 1\n    \n    return cnt \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Counter = 0\n    for i in range(N):\n        if A[i] & 1 == 1:\n            Counter = Counter + 1\n    return Counter\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count=0\n    \n    for i in range(1,N+1) : \n        if( A[i-1] == A[i] or A[i]==A[N] ) : \n            count += 1\n        if (A[i-1] == A[i] and A[N] == A[i]) : \n            count +=1\n            \n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Cnt = 0\n    if N%2 == 0 : \n        for i in range(1,N) : \n            if A[i]!= A[i+1] : \n                Cnt += 1\n        \n    else : \n        for i in range(0,N) : \n            if A[i]!= A[i+1] : \n                Cnt += 1\n        \n    return Cnt \n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.replace('a', '_')\n    string = string.replace('A', '_')\n    string = string.replace('b', 'B')\n    string = string.replace('B', '_')\n    string = string.replace('C', 'c')\n    string = string.replace('c', 'c')\n    string = string.replace('d', 'D')\n    string = string.replace('D', '_')\n    string = string.replace('e', 'E')\n    string = string.replace('E', '_')\n    string = string.replace('f', 'F')\n    string = string.replace('F', '_')\n    string = string.replace('g', 'G')\n    string = string.replace('G', '_')\n    string = string.replace('h', 'H')\n    string = string.replace('H', '_')\n    string = string.replace('i', 'I')\n    string = string.replace('I', '_')\n    string = string.replace('j', 'J')\n    string = string.replace('J', '_')\n    string = string.replace('k', 'K')\n    string = string.replace('K', '_')\n    string = string.replace('l', 'L')\n    string = string.replace('L', '_')\n    string = string.replace('m', 'M')\n    string = string.replace('M', '_')\n    string = string.replace('n', 'N')\n    string = string.replace('N', '_')\n    string = string.replace('o', 'O')\n    string = string.replace('O', '_')\n    string = string.replace('p', 'P')\n    string = string.replace('P', '_')\n    string = string.replace('q', 'Q')\n    string = string.replace('Q', '_')\n    string = string.replace('r', 'R')\n    string = string.replace('R', '_')\n    string = string.replace('s', 'S')\n    string = string.replace('S', '_')\n    string = string.replace('t', 'T')\n    string = string.replace('T', '_')\n    string = string.replace('u', 'U')\n    string = string.replace('U', '_')\n    string = string.replace('v', 'V')\n    string = string.replace('V', '_')\n    string = string.replace('w', 'W')\n    string = string.replace('W', '_')\n    string = string.replace('x', 'X')\n    string = string.replace('X', '_')\n    string = string.replace('y', 'Y')\n    string = string.replace('Y', '_')\n    string = string.replace('z', 'Z')\n    string = string.replace('Z', '_')\n    return string.title()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string==' ':\n        return '_ '\n    if string[0].isupper():\n        return 'x '\n    else:\n        return 'x '\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle_case(s):\n        ''' Toggle a case character '''\n        if s.islower():\n            return \"Lower\"\n        elif s.isupper():\n            return \"Upper\"\n        elif s.isdigit():\n            return \"Number\"\n        elif s.isspace():\n            return \"Space\"\n        else:\n            return \"Character\"\n    return toggle_case(string.strip())"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    text = string.lower()\n    for char in text:\n        if char.isalpha():\n            text = text.replace(char, char.upper())\n    return text\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    s = ''\n    for c in string:\n        if c.islower():\n            s = s + c.upper()\n        else:\n            s = s + c.lower()\n    return s\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return ''\n    else:\n        return string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        else:\n            result += ch.lower()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = string.lower()\n    for char in new_string:\n        if char.islower():\n            new_string = new_string.replace(char,'')\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Solution: make all the characters lowercase\n    #\n    # Time  : O(n)\n    # Space: O(n)\n    \n    def toggle_lower(string):\n        for ch in string:\n            if ord(ch) >= ord('a') and ord(ch) <= ord('z'):\n                string = string.replace(ch, 'A')\n            elif ord(ch) >= ord('A') and ord(ch) <= ord('Z'):\n                string = string.replace(ch, 'Z')\n        return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    count = 0\n    string = list(string)\n    while count < len(string):\n        if string[count].isupper():\n            string[count] = string[count].lower()\n        elif string[count].islower():\n            string[count] = string[count].upper()\n        count += 1\n    return \"\".join(string)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        n1, n2 = n2, n1\n    return abs(n1 - n2) % 10\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(9):\n        diff += abs(n1 - n2)\n        n1, n2 = n2, n1 % 10\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(0, n1):\n        if n1 % 10 == n2 % 10:\n            diff += 10**i\n        else:\n            diff += int(n1 % 10) - int(n2 % 10)\n        print(diff)\n        \n    return diff\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1!= n2:\n        return 10 * abs(n1 - n2)\n    else:\n        return 0\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(str(n1))):\n        digit_sum = 0\n        for j in range(len(str(n2))):\n            digit_sum += (ord(str(n1)[i]) - ord(str(n2)[j])) * 10 ** (j - i)\n        sum += digit_sum\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1-n2\n    return int(sum(map(abs,diff)))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return ((n1 + n2) - (n1 * n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Solution 1: Use a dictionary, n_to_diff, to store the number of digits in each\n    # of the two numbers.\n    # e.g. {9: 8, 5: 1}.\n    # e.g. {9: 3, 6: 4}.\n    # return the sum of the difference of digit numbers in the numbers\n    # in the dictionary\n    \n    if n1 == 0 or n2 == 0:\n        return 0\n    \n    n1_dict = {}\n    n2_dict = {}\n    \n    for i in range(10):\n        if i < 9:\n            n1_dict[i] = 1\n        else:\n            n1_dict[i] = n1 % 10\n            n1 = n1 // 10\n        \n        if i < 9:\n            n2_dict[i] = 1\n        else:\n            n2_dict[i] = n2 % 10\n            n2 = n2 // 10\n    \n    n1_sum = n1_dict[9]\n    n2_sum = n2_dict[9]\n    \n    n1_diff = n_to_diff(n1_sum, n1)\n    n2_diff = n_to_diff(n2_sum, n2)\n    \n    if n1_diff == n2_diff:\n        return n1_sum - n2_sum\n    else:\n        return abs(n1_sum - n2_sum)\n    \ndef digit_distance_matrix(n, k):\n    '''\n    Write a python function to find the sum of the per-digit difference between two numbers.\n    '''\n    # Solution 2: Use a dictionary, n_to_diff, to store the number of digits in each\n    # of the two numbers.\n    # e.g. {9: 8, 5: 1}.\n    # e.g. {9: 3, 6: 4}.\n    # return the sum of the difference of digit numbers in the matrix.\n    \n    if k == 0:\n        return 0\n    \n    m = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # initialize with the given matrix\n    for i in range(1, n + 1):\n        m[i][0] = 0\n        \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j >= 9:\n                m[i][j] = 0\n            else:\n                m[i][j] = m[i - 1][j] - m[i - 1][j - k] + m[i - 1][j - 1] - m[i - 1][j]\n                \n    return m[n][n]\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for num in range(n1 + 1):\n        if num == 0:\n            continue\n        sum_diff += int(str(n2)[-1 - num]) - int(str(n2)[-1 - num - 1])\n    return sum_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    l = []\n    \n    if len(a) == 0:\n        return 0\n    \n    for i in range(size):\n        l.append(a[i])\n    \n    for i in range(size-1):\n        if a[i+1] <= a[i]:\n            for j in range(i+1,size):\n                l.append(a[j])\n        else:\n            l.append(a[i+1])\n    \n    return max(l)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    end = 0\n    temp_sum = 0\n    while end < size:\n        if a[start] + a[end] > temp_sum:\n            max_sum = temp_sum\n            temp_sum = a[start] + a[end]\n            start += 1\n            end += 1\n        else:\n            start += 1\n            end += 1\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return sum(a[:size])\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_index = 0\n    max_sum = 0\n    for i in range(1, size):\n        if a[i] > a[max_index]:\n            max_index = i\n            max_sum = a[i]\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_sum = 0\n    i = 0\n    while i < size:\n        if a[i] > 0:\n            a[i] = a[i] - 1\n            if a[i] == 0:\n                sub_sum += 1\n            i += 1\n        else:\n            i += 1\n    return sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    \n    for i in range(size):\n        if current_sum > 0:\n            current_sum += a[i]\n        else:\n            current_sum = a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    def sub_array(a, n):\n        '''\n        Return the sum of the smallest contiguous sublist of size n in the given list\n        '''\n        max_sum = 0\n        for i in range(0,n):\n            cur_sum = 0\n            for j in range(i, n):\n                if a[j] > cur_sum:\n                    cur_sum = a[j]\n            max_sum += cur_sum\n        return max_sum\n    \n    # Initialize values for the sums\n    sub_sum = [0 for i in range(size)]\n    for i in range(0,size):\n        sub_sum[i] = 0\n    # Calculate the sums\n    for i in range(0,size):\n        for j in range(0,size):\n            if i > 0:\n                sub_sum[j] += a[i]\n            else:\n                sub_sum[j] += a[j]\n    # Return the sum\n    return sub_array(sub_sum, size)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_array_sum = 0\n    for i in range(0, size):\n        sub_array_sum = sub_array_sum + a[i]\n    return sub_array_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    sum = 0\n    # Start at the head node\n    i = 0\n    while i < size:\n        \n        # Find next node of maximum\n        sum += a[i]\n        i += 1\n        # If a[i] is greater than sum of sublist, pop\n        # from sublist and update\n        if sum > sum:\n            sum = a[i]\n    \n    return sum\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    return tup1 | tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # var1 = len(test_tup1)\n    # var2 = len(test_tup2)\n    # if var1 == var2:\n    #     return list(sorted(list(set(test_tup1) | set(test_tup2))))\n    # elif var1 > var2:\n    #     for i in range(var2, len(test_tup2)):\n    #         test_tup2[i] = test_tup2[i] + test_tup2[i]\n    #     return list(sorted(list(set(test_tup1) | set(test_tup2))))\n    # else:\n    #     for i in range(var1, len(test_tup1)):\n    #         test_tup1[i] = test_tup1[i] + test_tup1[i]\n    #     return list(sorted(list(set(test_tup1) | set(test_tup2))))\n    \n    return list(sorted(list(set(test_tup1) | set(test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    def calculate_elements(test_tup1, test_tup2):\n        '''\n        Find the total value of all elements of the tuples,\n        then return the maximum value of all elements.\n        '''\n        return tuple(test_tup1 + test_tup2)\n    return tuple(sorted(set(calculate_elements(test_tup1, test_tup2) for test_tup2 in test_tup2 for test_tup1 in test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1, test_tup2 = list(test_tup1), list(test_tup2)\n    if len(test_tup1)!= len(test_tup2):\n        return \"Invalid inputs\"\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n    union_tup = set_tup1.union(set_tup2)\n    return sorted(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(test_tup1) + sorted(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        tup1 = test_tup1\n        tup2 = test_tup2\n    else:\n        tup1 = test_tup2\n        tup2 = test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #Convert tuples to list\n    list1 = []\n    list2 = []\n    for elem in test_tup1:\n        list1.append(elem)\n    for elem in test_tup2:\n        list2.append(elem)\n    \n    #Create a set of unique elements\n    unique_elements = set(list1 + list2)\n    #print(unique_elements)\n    #Sort the unique elements\n    unique_elements = sorted(unique_elements)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # sort tuples to ensure they are in order\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    # if the two lists are empty then output will be None\n    if test_tup1 == [] or test_tup2 == []:\n        return None\n    # declare output array\n    output = []\n    # recursively loop through each of the elements in both lists and add them to output array\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                output.append(test_tup1[i])\n            # if element of the two lists is not in the output array then append it to the output array\n            else:\n                output.append(test_tup1[i])\n                output.append(test_tup2[j])\n                break\n    return sorted(output)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    if test_tup1[0] > test_tup2[0]:\n        return union_elements(test_tup2, test_tup1)\n    elif test_tup1[0] < test_tup2[0]:\n        return union_elements(test_tup1, test_tup2)\n    else:\n        return test_tup"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    temp = []\n    i = 0\n    j = 0\n    temp.extend(test_tup1)\n    temp.extend(test_tup2)\n    temp.sort()\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > longest:\n            longest = len(lst[i])\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return 1\n    else:\n        return Find_Max_Length(lst[:-1]) + 1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_length = 0\n    max_lst = []\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    length_list = []\n    for i in range(0, len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] == lst[j]:\n                length_list.append(lst[i])\n        if len(length_list) > max_length:\n            max_length = len(length_list)\n        length_list = []\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize length of sublists\n    length_list = []\n    \n    # find the length of sublist from the beginning to the end\n    for i in range(len(lst)):\n        length_list.append(len(lst[i]))\n    \n    # find the max length\n    return max(length_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    max_sub_list = []\n    for i in range(0, len(lst)):\n        sub_list = []\n        for j in range(i, len(lst)):\n            sub_list.append(lst[j])\n        if(len(set(sub_list)) > max_length):\n            max_length = len(set(sub_list))\n            max_sub_list = sub_list\n    return max_length, max_sub_list\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length = 0\n    \n    # Traverse from the end\n    for i in range(len(lst) -1, -1, -1):\n        # If the sublist is longer than the longest\n        if len(lst[i]) > longest_length:\n            longest_length = len(lst[i])\n        # Go to the next element in the list\n        else:\n            continue\n    # Return the longest sublist\n    return longest_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # create a blank list\n    ans = []\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    num_lst = []\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            num_lst = i\n    return max_len, num_lst\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        length = 0\n        for i in range(1, len(lst)):\n            if lst[i-1] == lst[i]:\n                length = length + 1\n            else:\n                length = max(length, Find_Max_Length(lst[i:i+length]))\n        return length\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'\\(([^)]*)\\)'\n    result = re.findall(regex, text)\n    if len(result) == 0:\n        return ''\n    return ','.join(result)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(\",\",\".\")\n    text = text.replace(\":\",\".\")\n    text = text.replace(\"\u201c\",\".\")\n    text = text.replace(\"\u201d\",\".\")\n    text = text.replace(\"-\",\".\")\n    text = text.replace(\"(\",\".\")\n    text = text.replace(\")\",\".\")\n    text = text.replace(\"[\",\".\")\n    text = text.replace(\"]\",\".\")\n    text = text.replace(\"`\",\".\")\n    text = text.replace(\"\\\"\",\".\")\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # use regular expressions to find all values between quotes and store as\n    # a list\n    values = re.findall(r'\"([^\"]*)\"', text)\n    # loop through the values list\n    for value in values:\n        # replace '\"' with \"\n        value = value.replace('\"', \"\")\n        # add value to a string\n        text = text.replace(value, '\"')\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    reg = '^(\\s+|\\n)*(?:[\\\"].+?[\\\"])'\n    return re.findall(reg, text, flags=re.MULTILINE)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        return text.split('\\\"')[1]\n    except:\n        print(text)\n        return ''\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #take the string and search for '\\'\n    pattern = re.compile('(?<![^a-zA-Z])\\'(?![a-zA-Z])')\n    #extract all the values in the string\n    values = pattern.findall(text)\n    values = filter(None, values)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return [re.findall(pattern, text.replace('\"', ''))[0]]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Check if the text contains a quotation mark, if it is add it to the value list\n    # if not, add a space.\n    if text.count(\"\u201c\")!= 0 or text.count(\"\u201d\")!= 0:\n        text = text.replace(\"\u201c\", \"\u2019\")\n        text = text.replace(\"\u201d\", \"\")\n    text = re.sub(\"(\\'[^\\']*)\", r\" \\1 \", text)\n    text = text.replace(\"\\'\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\" \", \"\")\n    text = text.replace(\"\\t\", \"\")\n    text = text.replace(\"\\n\", \"\")\n    text = text.replace(\"\\r\", \"\")\n    # Return a string of the values (case sensitive)\n    return text.upper()\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    value = ''\n    for char in text:\n        if char in {'\"', \"'\"}:\n            value += char\n    return value\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile('[\\'\"]([^\"\\']*)[\\'\"]')\n    values = p.findall(text)\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0 \n    for i in arr: \n        if i == 0: \n            counter += 1\n        else: \n            break\n    return counter\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n): \n        for j in range(n): \n            if arr[i]!=arr[j] and arr[i]!=arr[j]:\n                if arr[i]>arr[j]: \n                    count+=1\n    return count\ndef get_unordered_pairs(arr): \n    '''\n    Returns the unordered pairs in a given array.\n    '''\n    count=0\n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]: \n                count+=1\n    return count\ndef get_ordered_pairs(arr): \n    '''\n    Returns the unordered pairs in a given array.\n    '''\n    count=0\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            if arr[i]<arr[j]: \n                count+=1\n    return count\ndef main(): \n    # To run the program \n    arr=input('Enter Input Array: ').split() \n    n=int(input('Enter the Size of the Array: ')) \n    # Function call to the print function\n    arr=sorted(list(map(int,arr))) \n    print(\"Unordered Pairs: \",count_Pairs(arr,n)) \n    print(\"Ordered Pairs: \",get_ordered_pairs(arr)) \n    print(\"Unordered Pairs with the minimum possible value: \",get_unordered_pairs(arr)) \nif __name__==\"__main__\":\n    main() "
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # your code goes here\n    pairs=[]\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j] and arr.count(arr[i])==1:\n                pairs.append(arr[i])\n    return len(pairs)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Create an empty list to hold the counts\n    pairs=[]\n    # Loop through the list and count the number of pairs\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            # If the numbers are equal\n            if arr[i]==arr[j]:\n                # Add a pair to the count\n                pairs.append([i,j])\n    # return the number of pairs\n    return len(pairs)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    m = len(arr)\n    res = 0\n    for i in range(m):\n        for j in range(i,m):\n            if arr[i] == arr[j] and (arr[i]!= arr[j] or i + 1 == m or j - 1 >= 0):\n                res += 1\n    return res"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        if n%2==0:\n            return 0\n        else:\n            d={}\n            for i in range(0,n):\n                if arr[i] not in d:\n                    d[arr[i]]=0\n                    d[arr[i]]+=1\n                else:\n                    d[arr[i]]+=1\n                    d[arr[i]]+=1\n            return d[0]*d[1]\narr=[1,2,2,3,2,3,4,5,2,6,4,7]\nprint(count_Pairs(arr,len(arr))"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    lst=arr\n    lst.sort()\n    n=n-1\n    k=0\n    for i in range(0,len(lst)-1):\n        if lst[i]!=lst[i+1]:\n            k=k+1\n    return k\ndef remove_dup(arr):\n    '''\n    Write a python function which takes a list of integers and removes duplicates from a list of integers.\n    '''\n    lst=arr\n    lst.sort()\n    for i in range(0,len(lst)-1):\n        if lst[i]==lst[i+1]:\n            lst.pop(i+1)\n    return lst\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]==arr[j]):\n                cnt+=1\n    return cnt\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt = 0\n    for i in range(n):\n        for j in range(i):\n            if (arr[i]!= arr[j]) and (arr[i]!= arr[n-1-j]):\n                break\n            if i!= j:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    char_split = []\n    for char in word: \n        char_split.append(char)\n    return char_split\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    char_list = []\n    for char in word:\n        if char =='':\n            char_list.append(' ')\n        elif char in string.punctuation:\n            char_list.append(char)\n    return char_list\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    a = word.split()\n    return a\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    res = ''\n    for c in word:\n        res += c\n        if c =='':\n            res +=''\n    return res\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    splitted = list()\n    for char in word: \n        if char!= word[-1]: \n            splitted.append(char)\n        else: \n            splitted.append(char + word[1])\n    return splitted\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [i for i in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if type(n)!= int:\n        return f\"{type(n)}\"\n    if type(n) == int and n >= 0:\n        return int(str(n)[::-1])\n    else:\n        return f\"{type(n)}\"\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n%10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    #create a list of the digits\n    digit_list = []\n    for i in str(n):\n        digit_list.append(int(i))\n    #find the sum\n    sum = 0\n    for i in digit_list:\n        sum += i\n    return sum\n    \ndef is_prime(n):\n    '''\n    Takes a non-negative integer and returns True if it is prime,\n    False otherwise.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    \n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    for i in range(5, int(math.sqrt(n) + 1), 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        \n    return True\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return sum_digits(n//10) + n%10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    import operator\n    return sum(int(i) for i in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        return (list1[0] < list1[1]) and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        index = 0\n        while index < len(list1) - 1:\n            if list1[index] > list1[index + 1]:\n                return False\n            index += 1\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return False\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == []:\n        return False\n    if len(list1) == 1:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)-i-1):\n            if list1[j] > list1[j+1]:\n                temp = list1[j]\n                list1[j] = list1[j+1]\n                list1[j+1] = temp\n    return list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Your code here\n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    return True\n    "
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] < list1[-1]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({\"apples\": 0, \"oranges\": 0, \"pears\": 0, \"bananas\": 0})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    d = []\n    for i in range(length):\n        d.append({})\n    return d\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for x in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return list()\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    if length >= 0:\n        empty_list = []\n        for i in range(length):\n            empty_list.append({})\n        return empty_list\n    else:\n        print(\"Error! Input is negative\")\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    for i in range(length):\n        list.append({})\n    return list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [[] for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists(list1):\n        '''\n        Sort each sublist of strings in a given list of lists.\n        '''\n        i = 0\n        j = len(list1) - 1\n        while i < j:\n            if list1[i] < list1[j]:\n                list1[i], list1[j] = list1[j], list1[i]\n            i += 1\n            j -= 1\n        return list1\n    return sort_sublists(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Base Case\n    if len(list1) <= 1:\n        return list1\n    \n    # Recursive Case\n    return sort_sublists(list1[0:len(list1)//2]) + [list1[len(list1)//2]] + sort_sublists(list1[len(list1)//2:])\n    \n    \ndef sort_sublists_recursive(list1):\n    '''\n    Write a recursive function to sort each sublist of strings in a given list of lists.\n    '''\n    # Base Case\n    if len(list1) <= 1:\n        return list1\n    \n    # Recursive Case\n    return sort_sublists_recursive(list1[0:len(list1)//2]) + [list1[len(list1)//2]] + sort_sublists_recursive(list1[len(list1)//2:])\n    \n    "
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_lists = []\n    for sublist in list1:\n        sorted_lists.append(sorted(sublist))\n    return sorted_lists\n    \n    \ndef sum_of_all_even_numbers(list_of_numbers):\n    '''\n    Find the sum of all even numbers in a given list.\n    '''\n    even_numbers = []\n    for number in list_of_numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return sum(even_numbers)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list1[0])==0:\n        return []\n    if len(list1[0][0])==0:\n        return []\n    if len(list1[0][0][0])==0:\n        return []\n    if len(list1[0][0][0][0])==0:\n        return []\n    if len(list1[0][0][0][0][0])==0:\n        return []\n    if len(list1[0][0][0][0][0][0])==0:\n        return []\n    for index in range(len(list1[0])):\n        for list1 in list1:\n            if list1[index]==\"\":\n                list1.append(list1[0])\n                list1.remove(list1[0])\n                break\n    list1.sort(key=lambda x: (x.split(\" \")))\n    list1=sorted(list1,key=lambda x: (x.split(\" \")))\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Sort each sublist of strings in a given list of lists\n    #Use the sorted method to sort the sublists.\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # your code here\n    def merge_sort(list1, start, end):\n        if start < end:\n            mid = (start + end) // 2\n            merge_sort(list1, start, mid)\n            merge_sort(list1, mid + 1, end)\n            merge(list1, start, mid, end)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_list = list1\n    sub_list.sort(key=lambda x: len(x), reverse=False)\n    return sub_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = [[]]\n    for i in range(len(list1)):\n        sublists.append(list1[i])\n    # print(sublists)\n    i = 0\n    while i < len(list1):\n        # print(sublists[i])\n        j = i+1\n        while j < len(list1):\n            # print(sublists[j])\n            if sublists[i].lower() == sublists[j].lower():\n                sublists[j] = sublists[j].replace(sublists[i], sublists[j].title(), 1)\n                # print(sublists[j])\n                # print(sublists[j].lower())\n            j+=1\n        i+=1\n    # print(sublists)\n    return sublists\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists_by_len(list1):\n        '''\n        Write a function to sort each sublist of strings in a given list of lists.\n        '''\n        for i in range(len(list1)):\n            for j in range(len(list1[i])):\n                list1[i][j] = len(list1[i][j])\n        return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    set_nums = set(nums)\n    return list(set_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return [num for num in nums if nums.count(num)==1]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # if empty return\n    if not nums:\n        return []\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    from collections import Counter\n    nums = sorted(nums)\n    res = []\n    for i in range(len(nums)):\n        if nums[i] not in res:\n            res.append(nums[i])\n    return res\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dict_nums = {}\n    for num in nums:\n        if num not in dict_nums:\n            dict_nums[num] = 1\n        else:\n            dict_nums[num] += 1\n    for key in dict_nums:\n        if dict_nums[key] > 1:\n            nums.remove(key)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    # Create an empty list to store the values in.\n    # Save the numbers in a variable called unique_nums.\n    # For each element in the list, we must check if it is unique. If it is, we append it to unique_nums.\n    # If it is not unique, we append the previous element with a 1.\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        else:\n            unique_nums.append(1)\n            \n    return unique_nums\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Step 1: Convert the list to a tuple\n    # Create a new list containing all unique numbers from the original list\n    # Remove the duplicate numbers\n    new_nums = list(set(nums))\n    # Return the new list\n    return new_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = set(nums)\n    return list(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # your code goes here\n    l = []\n    for i in range(len(nums)):\n        if nums[i] not in l:\n            l.append(nums[i])\n    return l\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    set_nums = set(nums)\n    result = []\n    for i in range(len(nums)):\n        if nums[i] not in result:\n            result.append(nums[i])\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 0\n    for number in list_data:\n        if number not in list_data:\n            product += number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    num_of_items = {}\n    for i in list_data:\n        num_of_items[i] = 1\n    return sum(num_of_items.values())\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_product = 0\n    for i in range(len(list_data)):\n        total_product += list_data[i]\n    return total_product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = {}\n    for item in list_data:\n        if item not in result:\n            result[item] = 1\n        else:\n            result[item] += 1\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    products = {}\n    for num in list_data:\n        if num in products.keys():\n            products[num] += 1\n        else:\n            products[num] = 1\n    return products\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_list = []\n    for num in list_data:\n        product_list.append(num)\n    list_data = product_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return sum(set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    output = []\n    for i in range(0, len(list_data)):\n        for j in range(0, len(list_data)):\n            if i == j:\n                output.append(list_data[i])\n    return sum(output)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #write your code here\n    return list_data[0]*list_data[1]*list_data[2]*list_data[3]*list_data[4]*list_data[5]*list_data[6]*list_data[7]*list_data[8]\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4/3*np.pi*r**2*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*np.pi*r**2*h**2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*pi*(r**2)*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r**2) * (4/3) * (np.pi * h**3)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r**2)*h\ndef surfacearea_sphere(r):\n    '''\n    Write a function that finds the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*r*h\ndef volume_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(4/3)*r**3\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface=h**2*(4*np.pi*r**2)\n    print(surface)\n    return surface\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.1415926535897931\n    a = 0.5*h*r**2\n    return (h*a)/2*(3.141592653589793*(r**3 + (h*a)**2) + pi*(h*a)**4)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3)*np.pi*(r**3)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 3.14*r*h*r\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r*h)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    arr = []\n    for i in range(len(A)): \n        for j in range(len(B)): \n            arr.append(A[i]==B[j])\n    return arr\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == len(B) : \n        for i in range(0,len(A)): \n            if A[i]!= B[i] and A[i] in B: \n                return False\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    s = set(A) & set(B)\n    if len(s)==len(A): return True\n    else: return False\n    return False\ndef create_empty_list():\n    '''\n    Create an empty list \n    '''\n    a = []\n    return a\ndef remove_dup(A):\n    '''\n    Remove duplicate elements from list.\n    '''\n    b = []\n    if isinstance(A,list):\n        for i in A:\n            if i not in b:\n                b.append(i)\n    return b\ndef check_dup_or_not(A):\n    '''\n    Check if list is a sublist of another list.\n    '''\n    if isinstance(A,list):\n        for i in A:\n            if i in A:\n                return False\n    return True\ndef to_list(A):\n    '''\n    Convert list to string.\n    '''\n    s = str(A)\n    return s\ndef hash_function(A,D):\n    '''\n    Calculate hash of list of numbers.\n    '''\n    h = 0\n    for i in A:\n        h = h*D + i\n    return h\ndef double_hash_function(A,D):\n    '''\n    Double hash of list of numbers.\n    '''\n    h = 0\n    for i in A:\n        h = h*D + i\n    return h\ndef remove_zero(A):\n    '''\n    Remove elements with all elements equal to 0.\n    '''\n    b = []\n    for i in A:\n        if i!=0:\n            b.append(i)\n    return b\ndef delete_duplicates(A):\n    '''\n    Remove duplicate elements.\n    '''\n    b = []\n    for i in A:\n        if i not in b:\n            b.append(i)\n    return b\ndef delete_dup(A):\n    '''\n    Remove duplicate elements.\n    '''\n    b = []\n    for i in A:\n        if i not in b:\n            b.append(i)\n    return b\ndef count_elements(A):\n    '''\n    Count the number of elements of list.\n    '''\n    c = 0\n    for i in A:\n        c+=1\n    return c\ndef count_duplicates(A):\n    '''\n    Count the number of elements of list.\n    '''\n    c = 0\n    for i in A:\n        if i!=i:\n            c+=1\n    return c\ndef count_dup(A):\n    '''\n    Count the number of elements of list.\n    '''\n    c = 0\n    for i in A:\n        if i not in A:\n            c+=1\n    return c\ndef count_common(A,B):\n    '''\n    Count the common elements of list A and list B.\n    '''\n    c = 0\n    for i in A:\n        for j in B:\n            if i==j:\n                c+=1\n    return c\ndef count_elements_by_loop(A):\n    '''\n    Count the number of elements of list by loop.\n    '''\n    c = 0\n    for i in A:\n        for j in range(0,len(A)):\n            if A[j]==i:\n                c+=1\n    return c\ndef sum_of_numbers(A):\n    '''\n    Calculate sum of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i\n    return c\ndef add_and_sub(A,B):\n    '''\n    Add two list and return sum of list.\n    '''\n    c = 0\n    for i in A:\n        c+=i\n    for j in B:\n        c-=j\n    return c\ndef get_max(A):\n    '''\n    Get max of list of numbers.\n    '''\n    if len(A)==0:\n        return 0\n    else:\n        return A[0]\ndef get_min(A):\n    '''\n    Get min of list of numbers.\n    '''\n    if len(A)==0:\n        return 0\n    else:\n        return A[0]\ndef get_sum(A):\n    '''\n    Get sum of list of numbers.\n    '''\n    if len(A)==0:\n        return 0\n    else:\n        return A[0]+A[1]\ndef get_mean(A):\n    '''\n    Get mean of list of numbers.\n    '''\n    if len(A)==0:\n        return 0\n    else:\n        return float(sum(A))/len(A)\ndef get_variance(A):\n    '''\n    Get variance of list of numbers.\n    '''\n    s = 0\n    for i in A:\n        s+=i*i\n    return float(s)/len(A)\ndef get_std(A):\n    '''\n    Get standard deviation of list of numbers.\n    '''\n    s = 0\n    for i in A:\n        s+=i*i\n    return float(math.sqrt(s/len(A)))\ndef get_sum_of_squares(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i\n    return c\ndef get_sum_of_squares_of_numbers(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i\n    return c\ndef get_sum_of_squares_of_numbers_2(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i\n    return c\ndef get_sum_of_squares_of_numbers_3(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i*i\n    return c\ndef get_sum_of_squares_of_numbers_4(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i*i*i\n    return c\ndef get_sum_of_squares_of_numbers_5(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i*i*i*i\n    return c\ndef get_sum_of_squares_of_numbers_6(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i*i*i*i\n    return c\ndef get_sum_of_squares_of_numbers_7(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i*i*i*i\n    return c\ndef get_sum_of_squares_of_numbers_8(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i*i*i*i\n    return c\ndef get_sum_of_squares_of_numbers_9(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i*i*i*i\n    return c\ndef get_sum_of_squares_of_numbers_10(A):\n    '''\n    Calculate sum of squares of list of numbers.\n    '''\n    c = 0\n    for i in A:\n        c+=i*i*i*i*i\n    return c\ndef get_sum_o"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A==B\ndef compare_arrays(A,B):\n    '''\n    Write a python function to compare two arrays.\n    '''\n    for i in range(len(A)):\n        if not A[i]==B[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    if len(B) < len(A):\n        return False\n    if len(A) == len(B):\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if B[i] in A[:len(A) - i - 1]:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==len(B):\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A: return True\n    else: return False\n    "
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    B.sort()\n    for x in A:\n        if B == A:\n            return True\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n<0:\n        return -1\n    else:\n        return n%10+last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(n) \n    if n <= 0: \n        print(\"Error: Input must be greater than 0\") \n        return \n    fact = 1\n    for i in range(1, n + 1): \n        fact = fact * i \n    return fact \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        return 'Your number is negative'\n    else: \n        x = 1\n        while n!= 0: \n            n = n % 10 \n            x = x * n \n        return x \n    \ndef main(): \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    print ('Enter the number:')\n    n = int(input()) \n    result = factorial(n) \n    print ('Factorial of {} is: {}'.format(n, result)) \n    print ('Factorial of {} is: {}'.format(n, factorial(n))) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while (n > 0): \n        n = n // 10\n    if n == 0: \n        return 0\n    else: \n        return 1\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if n < 0:\n            return -1\n        else:\n            return n%10 + last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    lastDigitFactorial = 1\n    for i in range(1, n):\n        lastDigitFactorial = lastDigitFactorial * i\n    return lastDigitFactorial\n    \ndef decimal_to_binary(d):\n    '''\n    Write a python function that converts a decimal number to binary.\n    '''\n    \n    binary = ''\n    while d!= 0:\n        if d % 2 == 1:\n            binary = binary + '1'\n        else:\n            binary = binary + '0'\n        d = int(d / 2)\n    return binary\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return n % 10 + last_Digit_Factorial(n // 10)\n    \n    \ndef Fibonacci_Factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return Fibonacci_Factorial(n-1) + Fibonacci_Factorial(n-2)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # create a variable for the factorial of the number\n    factorial = 1\n    # check if the number is negative, if so, multiply the factorial of the number by -1\n    if n < 0:\n        factorial *= -1\n        n *= -1\n    # call the factorial for all the digits\n    for i in range(1, n + 1):\n        factorial = factorial * i\n    # return the last digit of the factorial\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n > 0:\n        fact = fact * n \n        n -= 1 \n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count = n % 10\n        n = n // 10\n    return count\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = list()\n    length = len(list1[0])\n    for i in range(length):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l1 = list1[0]\n    l2 = list1[1]\n    l3 = list1[2]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    sorted_list = []\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i:i+2] for i in range(0, len(list1), 2)] + [list2[i:i+2] for i in range(0, len(list2), 2)] + [list3[i:i+2] for i in range(0, len(list3), 2)]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1,list2,list3 = list1[:len(list1)//2],list1[len(list1)//2:],list1[len(list1)//2+1:]\n    list2,list3,list1 = list2[:len(list2)//2],list2[len(list2)//2:],list2[len(list2)//2+1:]\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    final_list = []\n    while i < len(list1):\n        final_list.append(list1[i])\n        i = i+1\n    while i < len(list2):\n        final_list.append(list2[i])\n        i = i+1\n    while i < len(list3):\n        final_list.append(list3[i])\n        i = i+1\n    return final_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    i = j = k = 0\n    \n    \n    list1_len = len(list1)\n    list2_len = len(list2)\n    list3_len = len(list3)\n    \n    # join the lists\n    while i < list1_len and j < list2_len and k < list3_len:\n        \n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            list1[i] = list1[j]\n            j += 1\n            \n            \n        if list2[i] < list1[j] and list2[i] < list3[k]:\n            list2[i] = list2[j]\n            j += 1\n            \n        if list3[i] < list1[j] and list3[i] < list2[k]:\n            list3[i] = list3[j]\n            j += 1\n            \n        if k < list3_len:\n            k += 1\n        i += 1\n    return list1 + list2 + list3\n    \n    \n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #base case\n    if len(list1)==0 or len(list2)==0 or len(list3)==0:\n        return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [[list1[0],list1[1],list1[2]],[list1[3],list1[0],list1[2]],[list1[4],list1[1],list1[3]]]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for tup in (test_tup1, test_tup2):\n        dissimilar.extend(tup[1:])\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup_of_dissimilar = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            tup_of_dissimilar.append(test_tup1[i])\n    \n    return tup_of_dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_1 = []\n    dissimilar_2 = []\n    dissimilar_3 = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i!= j:\n                if (i, j) not in dissimilar_1:\n                    dissimilar_1.append((i, j))\n                if (j, i) not in dissimilar_2:\n                    dissimilar_2.append((j, i))\n                if (i, j) not in dissimilar_3:\n                    dissimilar_3.append((i, j))\n    return dissimilar_1, dissimilar_2, dissimilar_3\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst = list(test_tup1) + list(test_tup2)\n    lst = set(lst)\n    return lst\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1.__len__() == 2:\n        if test_tup2.__len__() == 2:\n            return [test_tup1[0], test_tup2[1]]\n        elif test_tup2.__len__() == 1:\n            return [test_tup1[0], test_tup2[0]]\n        elif test_tup2.__len__() == 0:\n            return []\n    if test_tup1.__len__() == 1:\n        if test_tup2.__len__() == 1:\n            return [test_tup1[0]]\n        elif test_tup2.__len__() == 2:\n            return [test_tup1[0], test_tup2[1]]\n        elif test_tup2.__len__() == 0:\n            return []\n    if test_tup1.__len__() == 0:\n        if test_tup2.__len__() == 1:\n            return [test_tup1[0]]\n        elif test_tup2.__len__() == 2:\n            return [test_tup1[0], test_tup2[1]]\n        elif test_tup2.__len__() == 0:\n            return []\n    if test_tup2.__len__() == 2:\n        if test_tup1.__len__() == 1:\n            return [test_tup1[0]]\n        elif test_tup1.__len__() == 2:\n            return [test_tup1[0], test_tup2[1]]\n        elif test_tup1.__len__() == 0:\n            return []\n        \n    raise ValueError(\"Two tuples have not exactly two elements.\")\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a_tup = test_tup1\n    b_tup = test_tup2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        print('The type of the 1st argument is not tuple')\n        return\n    if type(test_tup2)!= tuple:\n        print('The type of the 2nd argument is not tuple')\n        return\n    if len(test_tup1)!= len(test_tup2):\n        print('The length of the 1st tuple is not equal to the 2nd tuple')\n        return\n    c = 0\n    d = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            c = c + 1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            d = d + 1\n    if c == 0:\n        print('The elements are not different in the given 2 tuples')\n    elif d == 0:\n        print('The elements are not different in the given 2 tuples')\n    else:\n        print(f'The total number of similar elements in the given 2 tuples are: {c}, {d}')\n    \ndef find_dissimilar_1(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given 2 tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        print('The type of the 1st argument is not tuple')\n        return\n    if type(test_tup2)!= tuple:\n        print('The type of the 2nd argument is not tuple')\n        return\n    if len(test_tup1)!= len(test_tup2):\n        print('The length of the 1st tuple is not equal to the 2nd tuple')\n        return\n    c = 0\n    d = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            c = c + 1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            d = d + 1\n    if c == 0:\n        print('The elements are not different in the given 2 tuples')\n    elif d == 0:\n        print('The elements are not different in the given 2 tuples')\n    else:\n        print(f'The total number of similar elements in the given 2 tuples are: {c}, {d}')\n    \ndef find_dissimilar_2(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given 2 tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        print('The type of the 1st argument is not tuple')\n        return\n    if type(test_tup2)!= tuple:\n        print('The type of the 2nd argument is not tuple')\n        return\n    if len(test_tup1)!= len(test_tup2):\n        print('The length of the 1st tuple is not equal to the 2nd tuple')\n        return\n    c = 0\n    d = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            c = c + 1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            d = d + 1\n    if c == 0:\n        print('The elements are not different in the given 2 tuples')\n    elif d == 0:\n        print('The elements are not different in the given 2 tuples')\n    else:\n        print(f'The total number of similar elements in the given 2 tuples are: {c}, {d}')\n    \ndef find_dissimilar_3(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given 2 tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        print('The type of the 1st argument is not tuple')\n        return\n    if type(test_tup2)!= tuple:\n        print('The type of the 2nd argument is not tuple')\n        return\n    if len(test_tup1)!= len(test_tup2):\n        print('The length of the 1st tuple is not equal to the 2nd tuple')\n        return\n    c = 0\n    d = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            c = c + 1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            d = d + 1\n    if c == 0:\n        print('The elements are not different in the given 2 tuples')\n    elif d == 0:\n        print('The elements are not different in the given 2 tuples')\n    else:\n        print(f'The total number of similar elements in the given 2 tuples are: {c}, {d}')\n    \ndef find_dissimilar_4(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given 2 tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        print('The type of the 1st argument is not tuple')\n        return\n    if type(test_tup2)!= tuple:\n        print('The type of the 2nd argument is not tuple')\n        return\n    if len(test_tup1)!= len(test_tup2):\n        print('The length of the 1st tuple is not equal to the 2nd tuple')\n        return\n    c = 0\n    d = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            c = c + 1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            d = d + 1\n    if c == 0:\n        print('The elements are not different in the given 2 tuples')\n    elif d == 0:\n        print('The elements are not different in the given 2 tuples')\n    else:\n        print(f'The total number of similar elements in the given 2 tuples are: {c}, {d}')\n    \ndef find_dissimilar_5(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given 2 tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        print('The type of the 1st argument is not tuple')\n        return\n    if type(test_tup2)!= tuple:\n        print('The type of the 2nd argument is not tuple')\n        return\n    if len(test_tup1)!= len(test_tup2):\n        print('The length of the 1st tuple is not equal to the 2nd tuple')\n        return\n    c = 0\n    d = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            c = c + 1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            d = d + 1\n    if c == 0:\n        print('The elements are not different in the given 2 tuples')\n    elif d == 0:\n        print('The elements are not different in the given 2 tuples')\n    else:\n        print(f'The total number of similar elements in the given 2 tuples are: {c}, {d}')\n    \ndef find_dissimilar_6(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given 2 tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        prin"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    num = 0\n    i = 0\n    j = 0\n    lst1 = []\n    lst2 = []\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i][0] == test_tup2[j][0]:\n            if test_tup1[i][1] == test_tup2[j][1]:\n                num += 1\n            else:\n                lst1.append(test_tup1[i])\n                lst2.append(test_tup2[j])\n                i += 1\n                j += 1\n        else:\n            if test_tup1[i][1] == test_tup2[j][1]:\n                num += 1\n            else:\n                lst1.append(test_tup1[i])\n                lst2.append(test_tup2[j])\n                i += 1\n                j += 1\n    if num!= 0:\n        for k in range(len(lst1)):\n            print(lst1[k], lst2[k], sep=', ')\n    return num\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = [x for x in test_tuple if x%2==0]\n    even_list.extend(test_tuple)\n    even_list.extend([x for x in test_tuple if x%2!=0])\n    if even_fnc(even_list, even_list[::-1]) == True:\n        return even_list[::-1]\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even = []\n    odd = []\n    for i in test_tuple:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    even_tuple = tuple(even)\n    odd_tuple = tuple(odd)\n    even_fnc(even_tuple, odd_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_count = 0\n    odd_count = 0\n    list_ = []\n    for i in test_tuple:\n        if i%2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    for i in range(len(test_tuple)):\n        if test_tuple[i]%2 == 0:\n            even_count -= 1\n        else:\n            odd_count -= 1\n    if even_count == 0:\n        for i in test_tuple:\n            if i%2 == 0:\n                list_.append(i)\n    if odd_count == 0:\n        for i in test_tuple:\n            if i%2!= 0:\n                list_.append(i)\n    even_ele = even_fnc(list_)\n    return even_ele\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n    return tuple(map(even_fnc,test_tuple))\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_fnc(test_tuple)\n    return tuple(map(odd_fnc,test_tuple))\n    \ndef last_second(test_tuple):\n    '''\n    Write a function to return the tuple of tuples of the last two elements of the tuple.\n    '''\n    return tuple(map(last_second, test_tuple))\n    \ndef first_second(test_tuple):\n    '''\n    Write a function to return the tuple of tuples of the first two elements of the tuple.\n    '''\n    return tuple(map(first_second, test_tuple))\n    \ndef first_ele(test_tuple, first_fnc):\n    '''\n    Write a function to remove first elements of the tuple.\n    '''\n    return tuple(map(first_fnc, test_tuple))\n    \ndef last_ele(test_tuple, last_fnc):\n    '''\n    Write a function to remove last elements of the tuple.\n    '''\n    return tuple(map(last_fnc, test_tuple))\n    \ndef mfloat(test_tuple, flt_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(flt_fnc, test_tuple))\n    \ndef ints(test_tuple, int_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(int_fnc, test_tuple))\n    \ndef tuples(test_tuple, tuple_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(tuple_fnc, test_tuple))\n    \ndef str_values(test_tuple, str_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(str_fnc, test_tuple))\n    \ndef keys(test_tuple, key_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(key_fnc, test_tuple))\n    \ndef values(test_tuple, value_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(value_fnc, test_tuple))\n    \ndef dict(test_tuple, dict_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(dict_fnc, test_tuple))\n    \ndef list(test_tuple, list_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(list_fnc, test_tuple))\n    \ndef tuple(test_tuple, tuple_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(tuple_fnc, test_tuple))\n    \ndef dict_values(test_tuple, dict_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(dict_fnc, test_tuple))\n    \ndef key(test_tuple, key_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(key_fnc, test_tuple))\n    \ndef key_values(test_tuple, key_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(key_fnc, test_tuple))\n    \ndef key_values_tuple(test_tuple, key_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(key_fnc, test_tuple))\n    \ndef values_tuple(test_tuple, value_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(value_fnc, test_tuple))\n    \ndef value_values(test_tuple, value_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(value_fnc, test_tuple))\n    \ndef value_values_tuple(test_tuple, value_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(value_fnc, test_tuple))\n    \ndef dict_values_tuple(test_tuple, dict_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(dict_fnc, test_tuple))\n    \ndef list_values_tuple(test_tuple, list_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(list_fnc, test_tuple))\n    \ndef set_values(test_tuple, set_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(set_fnc, test_tuple))\n    \ndef set_values_tuple(test_tuple, set_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(set_fnc, test_tuple))\n    \ndef set_key(test_tuple, set_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(set_fnc, test_tuple))\n    \ndef set_key_tuple(test_tuple, set_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(set_fnc, test_tuple))\n    \ndef set_value(test_tuple, set_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(set_fnc, test_tuple))\n    \ndef set_value_tuple(test_tuple, set_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(set_fnc, test_tuple))\n    \ndef dict_values_tuple(test_tuple, dict_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(dict_fnc, test_tuple))\n    \ndef list_values_tuple(test_tuple, list_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tuple(map(list_fnc, test_tuple))\n    \ndef dict_values_tuple(test_tuple, dict_fnc):\n    '''\n    Write a function to return the tuple of tuples of the elements of the tuple.\n    '''\n    return tupl"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    lst = list(test_tuple)\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            lst[i] = 0\n    return tuple(lst)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[::2]\n    even_tuple = tuple([even_fnc(item, even_fnc) for item in even_tuple])\n    test_tuple = tuple([item for item in test_tuple if item not in even_tuple])\n    test_tuple = tuple(even_tuple)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tuple = test_tuple\n    tuple[0] = tuple[0] % 2\n    tuple[0] = even_fnc(tuple[0])\n    tuple[1] = tuple[1] % 2\n    tuple[1] = even_fnc(tuple[1])\n    return tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if i%2 == 0:\n            even_list.append(i)\n    even_list = tuple(even_list)\n    even_fnc(even_list)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #initialize the result\n    result = 0\n    #initialize the base value\n    base = s\n    #loop through the pyramid to find the height\n    for i in range(b):\n        #add the height of the pyramid\n        result += base\n        #increase base by base\n        base += base\n    #return result\n    return result\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # base\n    base = s\n    # height\n    h = base\n    # get the width of the base and height \n    w = s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def bound_square_pyramid(b,s):\n        '''\n        Write a python function to find the boundary of a square pyramid with a given base edge and height.\n        '''\n        if b == 0:\n            return 0\n        elif s == 0:\n            return b*b\n        else:\n            return (b*b - s*s) + (bound_square_pyramid(b-1,s) + bound_square_pyramid(b-1,s-b))\n    return bound_square_pyramid(b,s)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h = b\n    while (s > 0):\n        s -= 1\n        h += 1\n        print(\"The base edge of the pyramid is at: \", b)\n        print(\"The height of the pyramid is at: \", h)\n    print(\"The surface area of the pyramid is: \", h**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"\\nSurface Area:\")\n    print(\"Base:\", b)\n    print(\"Height:\", s)\n    return (b * s) / 2\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # your code goes here\n    print('\\n')\n    print('------------------------------------')\n    print('The area of the pyramid is', b*s,'.')\n    print('\\n')\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (b**2) + (s**2)\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if(s<=0):\n        print(\"The height of the pyramid must be greater than or equal to 0\")\n    elif(s>=0 and s<=1):\n        print(\"The height of the pyramid must be less than or equal to 1\")\n    elif(s>1):\n        print(\"The height of the pyramid must be less than or equal to 2\")\n    elif(s<2):\n        print(\"The height of the pyramid must be greater than or equal to 3\")\n    else:\n        print(\"The area of the square pyramid is:\", (4*b)/3)\n        \nsurface_Area(2,3)\nsurface_Area(5,4)\nsurface_Area(6,5)\nsurface_Area(8,6)\nsurface_Area(7,8"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print('\\n-- Square Pyramid of a Square Pyramid with a height of',s,'--')\n    for i in range(1,s):\n        print(i,end=\" \")\n    print()\n    for i in range(1,s-1):\n        print(i,end=\" \")\n    print()\n    for i in range(1,s+1):\n        print(i,end=\" \")\n    print()\n    print('-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    for i in range(1,s):\n        print(i,end=\" \")\n    print()\n    for i in range(1,s-1):\n        print(i,end=\" \")\n    print()\n    for i in range(1,s+1):\n        print(i,end=\" \")\n    print()\n    \n    \n    print('\\n-- End of Square Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Square Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    for i in range(s,0,-1):\n        print(i,end=\" \")\n    print()\n    \n    print('\\n-- End of Pyramid --')\n    print()\n    for i in range"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)!= 0:\n        for i in dict1.values():\n            if type(i)!= dict:\n                return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for k,v in dict1.items():\n        if v == '':\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.values() == []:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if not dict1[key]:\n            return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if type(dict1) == dict:\n        return \"dict is empty\"\n    else:\n        return \"dict is not empty\"\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num==0:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = len(num)\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num==0:\n        return 1\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    elif num==3:\n        return 1\n    elif num==4:\n        return 2\n    elif num==5:\n        return 5\n    elif num==6:\n        return 8\n    elif num==7:\n        return 10\n    elif num==8:\n        return 50\n    elif num==9:\n        return 100\n    elif num==10:\n        return 1000\n    else:\n        return catalan_number(num-1)+catalan_number(num-2)\n        \ndef solution(n):\n    return int(str(catalan_number(n)))"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    return int(num ** (1/2))\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    else:\n        return num * catalan_number(num - 1)\n        \n    \ndef number_of_progression(n,r):\n    '''\n    This function returns the number of progression of n numbers from 0 to r.\n    '''\n    if n > r:\n        return 0\n    elif n < r:\n        return number_of_progression(n,r-1)\n        \n    else:\n        return number_of_progression(n-1,r) + number_of_progression(n-r,r)\n        \n    \n    \ndef fibonacci(n):\n    '''\n    This function returns the nth fibonacci number.\n    '''\n    if n < 2:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef fizzbuzz(n):\n    '''\n    This function returns the nth fizzbuzz number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return \"Fizz\"\n    elif n < 5:\n        return \"Buzz\"\n    else:\n        return n\n    \n    \ndef fibonacci_series(n):\n    '''\n    This function returns the nth Fibonacci number series.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return \"Fibonacci series of 2, 3 and 5 is: \"+ str(n)\n    elif n < 5:\n        return fibonacci_series(n-1) + fibonacci_series(n-2) + fibonacci_series(n-3)\n    else:\n        return fibonacci_series(n-1)\n    \n    \ndef first_prime_number(n):\n    '''\n    This function returns the nth prime number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return 2\n    elif n < 5:\n        return 3\n    elif n < 7:\n        return 5\n    elif n < 11:\n        return 7\n    else:\n        return 11\n    \n    \ndef prime_numbers(n):\n    '''\n    This function returns the prime numbers.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return [2,3]\n    elif n < 5:\n        return [2,3,5]\n    elif n < 7:\n        return [2,3,5,7]\n    elif n < 11:\n        return [2,3,5,7,11]\n    else:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n        \n    \n    \ndef is_prime(n):\n    '''\n    This function returns True if n is prime and False otherwise.\n    '''\n    if n < 2:\n        return n == 1\n    elif n < 3:\n        return n == 2\n    elif n < 5:\n        return n == 3\n    elif n < 7:\n        return n == 5\n    elif n < 11:\n        return n == 7\n    else:\n        return n == 11\n    \n    \ndef square_root(n):\n    '''\n    This function returns the square root of the nth number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return 1\n    elif n < 5:\n        return 2\n    elif n < 7:\n        return 3\n    elif n < 11:\n        return 4\n    else:\n        return 6\n    \n    \ndef sqrt(n):\n    '''\n    This function returns the square root of the nth number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return 1\n    elif n < 5:\n        return 2\n    elif n < 7:\n        return 3\n    elif n < 11:\n        return 4\n    else:\n        return 6\n    \n    \ndef square(n):\n    '''\n    This function returns the square of the nth number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return 1\n    elif n < 5:\n        return 2\n    elif n < 7:\n        return 3\n    elif n < 11:\n        return 4\n    else:\n        return 6\n    \n    \ndef product(n):\n    '''\n    This function returns the product of the nth number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return 1\n    elif n < 5:\n        return 2\n    elif n < 7:\n        return 3\n    elif n < 11:\n        return 4\n    else:\n        return 6\n    \n    \ndef fibonacci_recursive(n):\n    '''\n    This function returns the nth fibonacci number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return 1\n    elif n < 5:\n        return 2\n    elif n < 7:\n        return 3\n    elif n < 11:\n        return 4\n    else:\n        return 5\n    \n    \ndef prime_recursive(n):\n    '''\n    This function returns the nth prime number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return 1\n    elif n < 5:\n        return 2\n    elif n < 7:\n        return 3\n    elif n < 11:\n        return 4\n    else:\n        return 5\n    \n    \n    \ndef prime_factors(n):\n    '''\n    This function returns the factors of the nth prime number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return 1\n    elif n < 5:\n        return 2\n    elif n < 7:\n        return 3\n    elif n < 11:\n        return 4\n    else:\n        return 5\n    \n    \ndef prime_recursive(n):\n    '''\n    This function returns the nth prime number.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return 1\n    elif n < 5:\n        return 2\n    elif n < 7:\n        return 3\n    elif n < 11:\n        return 4\n    else:\n        return 5\n    \n    \n    \ndef sum_series(n,a):\n    '''\n    This function returns the nth sum series.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return a\n    elif n < 5:\n        return a + a + a\n    elif n < 7:\n        return a + a + a + a + a\n    elif n < 11:\n        return a + a + a + a + a + a + a + a + a + a\n    else:\n        return a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    \n    \ndef sum_series_recursive(n,a):\n    '''\n    This function returns the nth sum series.\n    '''\n    if n < 2:\n        return n\n    elif n < 3:\n        return a\n    elif n < 5:\n        return a + a + a\n    elif n < 7:\n        return a + a + a + a\n    elif n < 11:\n        return a + a + a + a + a + a + a + a\n    else:\n        return a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    \n    \ndef sum_series_recursive_factors(n,a):\n    '''\n    This function returns the nth sum series.\n    '''\n    if n < 2:\n        return "
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    a = 1\n    x = 2\n    sum = 0\n    while a <= num:\n        sum = a*x\n        x = x+1\n        a = sum\n        \n    return sum\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 1\n    if num % 2 == 0:\n        return 1 + catalan_number(num - 1)\n    else:\n        return (catalan_number(num - 1) + 1) + catalan_number(num - 2)\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # for i in range(num + 1):\n    #     print(catalan_number(i))\n    # print()\n    # print('(catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('(catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('catalan_number(%d)' % num, end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print('  ', end=\" \")\n    # for i in range(num + 1):\n    #     print(i, end=\" \")\n    # print()\n    # print("
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def first_catalan(n):\n        '''\n        Use a recursive formula to find the nth catalan number.\n        '''\n        if n==1:\n            return 1\n        else:\n            return first_catalan(n-1) + first_catalan(n-1)\n    if num==1:\n        return 1\n    else:\n        return first_catalan(num-1)+first_catalan(num-1)\n    \nif __name__=='__main__':\n    num=int(input())\n    print(catalan_number(num))\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = 1\n    for n in range(1, num+1):\n        res *= (n-1)\n    return res\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if text[i].endswith(\"ly\"):\n            adverbs.append(text[i].replace(\"ly\", \"\"))\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    new_text = text.replace(\"\\n\",\"\").replace(\"\\t\",\"\").replace(\"\\r\",\"\")\n    positions = []\n    for i in range(len(new_text)-1,len(new_text)):\n        if(new_text[i]==' '):\n            positions.append(i)\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    output = []\n    for i in range(len(text)):\n        if text[i] == \"l\" and i!= len(text)-1:\n            output.append(text[i+1])\n    return output\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = [a for a in text.split(' ') if a.endswith('ly')]\n    if adverbs == []:\n        print(f'There are no adverbs in the given string {text}')\n    else:\n        print(f'The adverbs in the given string are {adverbs}')\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'[a-z]*ly$')\n    text = regex.sub('', text)\n    regex = re.compile(r'[a-z]*ly$')\n    text = regex.sub('ly', text)\n    regex = re.compile(r'[a-z]*ly$')\n    text = regex.sub('ly', text)\n    regex = re.compile(r'ly$')\n    text = regex.sub('ly', text)\n    text = regex.sub(r'ly', text)\n    regex = re.compile(r'ly')\n    text = regex.sub('ly', text)\n    regex = re.compile(r'ly$')\n    text = regex.sub('ly', text)\n    regex = re.compile(r'ly$')\n    text = regex.sub('ly', text)\n    text = regex.sub(r'ly', text)\n    text = regex.sub(r'ly$', text)\n    return text\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = {}\n    adverbs['ly'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['lure'] = [m.start() for m in re.finditer('lure', text)]\n    adverbs['or'] = [m.start() for m in re.finditer('or', text)]\n    adverbs['zoo'] = [m.start() for m in re.finditer('zoo', text)]\n    adverbs['ly', 'lure', 'or', 'zoo'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x'] = [m.start() for m in re.finditer('ly', text)]\n    adverbs['ly', 'lure', 'or', 'zoo', 'l', 'r','s', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', "
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'ly', text)\n    if adverbs:\n        adverb_positions = []\n        for adverb in adverbs:\n            adverb_positions.append(text.index(adverb))\n        return adverb_positions\n    else:\n        return []\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    x = re.findall('ly|lyable|ly|lyable', text)\n    for i in range(len(x)):\n        if 'ly' in x[i]:\n            x[i] = 'ly'\n            break\n    pos = 0\n    for i in range(len(x)):\n        if x[i] in ['ly', 'lyable']:\n            pos = i\n            break\n    return x[pos], pos\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    abbr_pattern = re.compile(r'[a-z]+ly')\n    abbr_pat = abbr_pattern.findall(text)\n    abbr_pat.remove('')\n    abbr_pat = list(filter(lambda x:x!='' and not x.isupper(),abbr_pat))\n    abbr_pat = list(filter(lambda x:x.isupper(),abbr_pat))\n    for i in abbr_pat:\n        if i.startswith('ly'):\n            i = i.replace('ly','')\n    return abbr_pat\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with sno and its positions in a given string.\n    '''\n    noun_pattern = re.compile(r'[a-z]+a\\w+')\n    noun_pat = noun_pattern.findall(text)\n    noun_pat.remove('')\n    noun_pat = list(filter(lambda x:x!='' and not x.isupper(),noun_pat))\n    noun_pat = list(filter(lambda x:x.isupper(),noun_pat))\n    for i in noun_pat:\n        if i.startswith('sno'):\n            i = i.replace('sno','')\n    return noun_pat\ndef find_preposition(text):\n    '''\n    Write a function to find the first preposition ending with pre and its positions in a given string.\n    '''\n    pre_pattern = re.compile(r'[a-z]+pre')\n    pre_pat = pre_pattern.findall(text)\n    pre_pat.remove('')\n    pre_pat = list(filter(lambda x:x!='' and not x.isupper(),pre_pat))\n    pre_pat = list(filter(lambda x:x.isupper(),pre_pat))\n    for i in pre_pat:\n        if i.startswith('pre'):\n            i = i.replace('pre','')\n    return pre_pat\ndef find_quantifiers(text):\n    '''\n    Write a function to find the first quantifier ending with qi and its positions in a given string.\n    '''\n    quant_pattern = re.compile(r'[a-z]+qi')\n    quant_pat = quant_pattern.findall(text)\n    quant_pat.remove('')\n    quant_pat = list(filter(lambda x:x!='' and not x.isupper(),quant_pat))\n    quant_pat = list(filter(lambda x:x.isupper(),quant_pat))\n    for i in quant_pat:\n        if i.startswith('qi'):\n            i = i.replace('qi','')\n    return quant_pat\ndef find_numeric_pattern(text):\n    '''\n    Write a function to find the first numeric pattern ending with num and its positions in a given string.\n    '''\n    num_pattern = re.compile(r'[0-9]+')\n    num_pat = num_pattern.findall(text)\n    num_pat.remove('')\n    num_pat = list(filter(lambda x:x!='' and not x.isupper(),num_pat))\n    num_pat = list(filter(lambda x:x.isupper(),num_pat))\n    for i in num_pat:\n        if i.startswith('num'):\n            i = i.replace('num','')\n    return num_pat\ndef find_quantifier_pattern(text):\n    '''\n    Write a function to find the first quantifier pattern ending with qp and its positions in a given string.\n    '''\n    quant_pattern = re.compile(r'[a-z]+qp')\n    quant_pat = quant_pattern.findall(text)\n    quant_pat.remove('')\n    quant_pat = list(filter(lambda x:x!='' and not x.isupper(),quant_pat))\n    quant_pat = list(filter(lambda x:x.isupper(),quant_pat))\n    for i in quant_pat:\n        if i.startswith('qp'):\n            i = i.replace('qp','')\n    return quant_pat\ndef find_adverb_pattern(text):\n    '''\n    Write a function to find the first adverb ending with d and its positions in a given string.\n    '''\n    adverb_pattern = re.compile(r'[a-z]+d')\n    adverb_pat = adverb_pattern.findall(text)\n    adverb_pat.remove('')\n    adverb_pat = list(filter(lambda x:x!='' and not x.isupper(),adverb_pat))\n    adverb_pat = list(filter(lambda x:x.isupper(),adverb_pat))\n    for i in adverb_pat:\n        if i.startswith('d'):\n            i = i.replace('d','')\n    return adverb_pat\ndef find_adj_pattern(text):\n    '''\n    Write a function to find the first adjacency ending with aad and its positions in a given string.\n    '''\n    adverb_pattern = re.compile(r'[a-z]+aad')\n    adverb_pat = adverb_pattern.findall(text)\n    adverb_pat.remove('')\n    adverb_pat = list(filter(lambda x:x!='' and not x.isupper(),adverb_pat))\n    adverb_pat = list(filter(lambda x:x.isupper(),adverb_pat))\n    for i in adverb_pat:\n        if i.startswith('aad'):\n            i = i.replace('aad','')\n    return adverb_pat\ndef find_noun_pattern(text):\n    '''\n    Write a function to find the first noun ending with no and its positions in a given string.\n    '''\n    noun_pattern = re.compile(r'[a-z]+n')\n    noun_pat = noun_pattern.findall(text)\n    noun_pat.remove('')\n    noun_pat = list(filter(lambda x:x!='' and not x.isupper(),noun_pat))\n    noun_pat = list(filter(lambda x:x.isupper(),noun_pat))\n    for i in noun_pat:\n        if i.startswith('n'):\n            i = i.replace('n','')\n    return noun_pat\ndef find_verb_pattern(text):\n    '''\n    Write a function to find the first verb ending with v and its positions in a given string.\n    '''\n    verb_pattern = re.compile(r'[a-z]+v')\n    verb_pat = verb_pattern.findall(text)\n    verb_pat.remove('')\n    verb_pat = list(filter(lambda x:x!='' and not x.isupper(),verb_pat))\n    verb_pat = list(filter(lambda x:x.isupper(),verb_pat))\n    for i in verb_pat:\n        if i.startswith('v'):\n            i = i.replace('v','')\n    return verb_pat\ndef find_quantifier_pattern(text):\n    '''\n    Write a function to find the first quantifier pattern ending with qr and its positions in a given string.\n    '''\n    quant_pattern = re.compile(r'[a-z]+qr')\n    quant_pat = quant_pattern.findall(text)\n    quant_pat.remove('')\n    quant_pat = list(filter(lambda x:x!='' and not x.isupper(),quant_pat))\n    quant_pat = list(filter(lambda x:x.isupper(),quant_pat))\n    for i in quant_pat:\n        if i.startswith('qr'):\n            i = i.replace('qr','')\n    return quant_pat\ndef find_adverb_pattern(text):\n    '''\n    Write a function to find the first adverb ending with aaa and its positions in a given string.\n    '''\n    adverb_pattern = re.compile(r'[a-z]+aa')\n    adverb"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # declare a variable to store the first adverb ending\n    n = 0\n    adverb = []\n    # loop through the string and check if there are any adverb ending\n    # next, if there is, add it to the list \n    for char in text:\n        if char == 'ly':\n            n = n + 1\n            if n > 0:\n                adverb.append(text[n:n + 1])\n    # return the adverb list \n    return adverb\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_heap = []\n    expensive_items = []\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n_most_expensive=heapq.nlargest(n, items, key=itemgetter(1))\n    print(n_most_expensive)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # TODO: Write your code here\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item[1],item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    if n==1:\n        return items[0]\n    \n    for i in items:\n        if i not in heap:\n            heapq.heappush(heap,[-i[1],i])\n        else:\n            heapq.heappushpop(heap,[-heapq.heappop(heap)[1],-heapq.heappop(heap)[1]])\n    return heap[0]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h=[]\n    for i in items:\n        h.append([i[1],i[0]])\n    h.sort(key=lambda x: x[0])\n    if len(h) < n:\n        return None\n    return h[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0 or not items:\n        return []\n    # initialize the heap\n    heapq.heapify(items)\n    # Iterate through the dataset and find the n most expensive items\n    top_k_items = heapq.nlargest(n,items,key=itemgetter(1))\n    # return the top n items\n    return top_k_items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][2],items[i][0],items[i][1]))\n    k = 1\n    while len(heap)!= n:\n        if heap[0][1] >= heap[k-1][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        else:\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        k += 1\n    return heap\ndef an_efficient(items,n):\n    '''\n    Given an input dataset and the number of items, return a dataset of items that are the n smallest items in the dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][2],items[i][0],items[i][1]))\n    k = 1\n    while len(heap)!= n:\n        if heap[0][1] >= heap[k-1][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        else:\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        k += 1\n    return heap\ndef two_efficient(items,n):\n    '''\n    Given an input dataset and the number of items, return a dataset of items that are the n smallest items in the dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][2],items[i][0],items[i][1]))\n    k = 1\n    while len(heap)!= n:\n        if heap[0][1] >= heap[k-1][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        else:\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        k += 1\n    return heap\ndef three_efficient(items,n):\n    '''\n    Given an input dataset and the number of items, return a dataset of items that are the n smallest items in the dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][2],items[i][0],items[i][1]))\n    k = 1\n    while len(heap)!= n:\n        if heap[0][1] >= heap[k-1][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        else:\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        k += 1\n    return heap\ndef four_efficient(items,n):\n    '''\n    Given an input dataset and the number of items, return a dataset of items that are the n smallest items in the dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][2],items[i][0],items[i][1]))\n    k = 1\n    while len(heap)!= n:\n        if heap[0][1] >= heap[k-1][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        else:\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        k += 1\n    return heap\ndef five_efficient(items,n):\n    '''\n    Given an input dataset and the number of items, return a dataset of items that are the n smallest items in the dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][2],items[i][0],items[i][1]))\n    k = 1\n    while len(heap)!= n:\n        if heap[0][1] >= heap[k-1][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        else:\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        k += 1\n    return heap\ndef six_efficient(items,n):\n    '''\n    Given an input dataset and the number of items, return a dataset of items that are the n smallest items in the dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][2],items[i][0],items[i][1]))\n    k = 1\n    while len(heap)!= n:\n        if heap[0][1] >= heap[k-1][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        else:\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        k += 1\n    return heap\ndef seven_efficient(items,n):\n    '''\n    Given an input dataset and the number of items, return a dataset of items that are the n smallest items in the dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][2],items[i][0],items[i][1]))\n    k = 1\n    while len(heap)!= n:\n        if heap[0][1] >= heap[k-1][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        else:\n            heapq.heappush(heap,(heap[k-1][2],heap[k-1][0],heap[k-1][1]))\n        k += 1\n    return heap\ndef eight_efficient(items,n):\n    '''\n    Given an input dataset and the number of items, return a dataset of items that are the n smallest items in the dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][2],items[i][0],items[i][1]))\n    k = 1\n    while len(heap)!= n:\n        if heap[0][1] >= heap[k-1][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(heap[k"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = [x for x in items]\n    return heapq.nlargest(n,heap)\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[-item[1],item])\n    return heapq.nlargest(n,heap)\ndef n_most_expensive(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for i, item in enumerate(items):\n        heapq.heappush(heap,(-item[1],i))\n    return heapq.nlargest(n,heap)\ndef n_least_expensive(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for i, item in enumerate(items):\n        heapq.heappush(heap,[item[1],i])\n    return heapq.nsmallest(n,heap)\ndef first_n_expensive(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for i, item in enumerate(items):\n        heapq.heappush(heap,[item[1],i])\n    return heapq.nlargest(n,heap)\ndef first_n_least_expensive(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for i, item in enumerate(items):\n        heapq.heappush(heap,[item[1],i])\n    return heapq.nsmallest(n,heap)\ndef median(items,n):\n    '''\n    Write a function to find the median of a given dataset.\n    '''\n    items.sort()\n    if len(items)%2 == 0:\n        return (items[len(items)/2] + items[(len(items)/2)-1])/2\n    else:\n        return items[len(items)/2]\ndef max_median(items,n):\n    '''\n    Write a function to find the n largest items in a given dataset.\n    '''\n    items.sort()\n    return (items[0],len(items))\ndef min_median(items,n):\n    '''\n    Write a function to find the n smallest items in a given dataset.\n    '''\n    items.sort()\n    return (items[-1],len(items))\ndef top_k(items,k):\n    '''\n    Write a function to find the n largest items in a given dataset.\n    '''\n    items.sort()\n    return items[-k:]\ndef top_k_reverse(items,k):\n    '''\n    Write a function to find the n least most items in a given dataset.\n    '''\n    items.sort(reverse=True)\n    return items[-k:]\ndef top_k_reverse2(items,k):\n    '''\n    Write a function to find the n least most items in a given dataset.\n    '''\n    items.sort(reverse=True)\n    return items[-k:]\ndef item_count(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nlargest(n,heap)\ndef remove_item(items,item):\n    '''\n    Write a function to remove an item from a given dataset.\n    '''\n    i=0\n    while i<len(items):\n        if items[i][0] == item:\n            items[i] = items[i][1:]\n            break\n        i+=1\n    return items\ndef find_all_item(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nlargest(n,heap)\ndef item_count_2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nlargest(n,heap)\ndef find_all_item2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nlargest(n,heap)\ndef top_k_2(items,k):\n    '''\n    Write a function to find the n least most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nsmallest(k,heap)\ndef top_k_2_reverse(items,k):\n    '''\n    Write a function to find the n least most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nsmallest(k,heap)\ndef top_k_reverse_2(items,k):\n    '''\n    Write a function to find the n least most expensive items in a given dataset.\n    '''\n    items.sort(reverse=True)\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nsmallest(k,heap)\ndef min_item_2(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nsmallest(n,heap)\ndef min_item_2_reverse(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nsmallest(n,heap)\ndef top_k_reverse_2_2(items,k):\n    '''\n    Write a function to find the n least most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nlargest(k,heap)\ndef top_k_reverse_2_2_reverse(items,k):\n    '''\n    Write a function to find the n least most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item])\n    return heapq.nlargest(k,heap)\ndef top_k_reverse_2_2_2(items,k):\n    '''\n    Write a function to find the n least most expensive items in a given dataset.\n    '''\n    items.sort()\n    heap = []\n    for ite"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    k = len(items)\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (items[i][1], i))\n    while k:\n        value = heapq.heappop(heap)[1]\n        n -= 1\n        print(f\"{n} is the most expensive item: {items[value][0]}\")\n        for i in range(len(items)):\n            if items[i][0] < items[value][0]:\n                heapq.heappush(heap, (items[i][1], i))\n        k -= 1\n    if n < 0:\n        print(\"No more items to store in this dataset.\")\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n: ]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    \n    # Write your code here.\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, n):\n        l.append(l[i])\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0,len(l),n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = []\n    for i in range(n):\n        a.append(l[i])\n    return a\n    \ndef reverse(l, n):\n    '''\n    Write a python function to reverse a list of number using looping.\n    '''\n    for i in range(n):\n        l[i] = l[i][::-1]\n    return l\n    \ndef main():\n    l1 = [2, 4, 5, 7, 11, 13, 16]\n    n = len(l1)\n    l2 = split_Arr(l1, n)\n    print(l2)\n    print(reverse(l2, n))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    p = l[0:n]\n    q = l[n:]\n    p.insert(0, l[0])\n    q.insert(0, l[0])\n    return p, q\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in listx:\n        tup += (i,)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for i in listx:\n        t += (i,)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = ()\n    for x in listx:\n        tuple_list += (x,)\n    return tuple_list\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    result = tuple(listx)\n    return result\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = min = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] < max:\n            max = nums[i]\n        if nums[i] > min:\n            min = nums[i]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n=len(nums)\n    diff=nums[n-1]-nums[0]\n    for i in range(1,n):\n        if diff>nums[i]:\n            diff=nums[i]-nums[i-1]\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest - largest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # how many elements are in the list\n    l = len(nums)\n    # iterate through the list \n    for i in range(l):\n        # find the minimum and maximum value\n        min = nums[0]\n        max = nums[0]\n        for j in range(l):\n            if nums[j] > nums[i]:\n                max = nums[j]\n            if nums[j] < nums[i]:\n                min = nums[j]\n        if max!= min:\n            return max - min \n    return max - min"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return 0\n    elif len(nums) == 1:\n        return abs(nums[0]-nums[0])\n    else:\n        small = max(nums[0], nums[1])\n        big = min(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            if nums[i] < small:\n                small = nums[i]\n            if nums[i] > big:\n                big = nums[i]\n        return abs(small-big)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    def check(x):\n        return x > x[-1]\n    return sorted(set(map(lambda x: min(x) - max(x), nums)))\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = sorted(nums, reverse=True)\n    return a[1] - a[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Time Complexity - O(n)\n    # Space Complexity - O(1)\n    diff = {}\n    for i in range(len(nums)):\n        diff[i] = nums[i] - min(nums[i:])\n        if i in diff:\n            return diff[i]\n    return 0\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n    if a > b:\n        a,b = b,a\n    for i in range(1,b+1):\n        if i**2 == b**2 + a:\n            if i not in perfect_squares(b,i):\n                perfect_squares.append(i)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b < a:\n        a, b = b, a\n    result = []\n    for i in range(a,b):\n        if i**2 == i:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return [a]\n    elif a == 0:\n        return [b]\n    elif a == b:\n        return []\n    elif a < b:\n        return perfect_squares(b, a-1) + perfect_squares(a-1, b-1)\n    else:\n        return perfect_squares(a, b-1) + perfect_squares(a-1, b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    s = 0\n    for i in range(2, b):\n        if a**2 + i**2 == b**2:\n            s += 1\n    if s == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square = []\n    for i in range(b):\n        if pow(a, 2) == pow(b, 2) and pow(a, 2)!= 0:\n            square.append(a**2)\n        else:\n            square.append(a)\n    return square\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if(a<b):\n        return perfect_squares(b, a)\n    \n    if(a==b):\n        return [a]\n    \n    if(b%a==0):\n        return perfect_squares(a, b//a)\n    else:\n        return perfect_squares(a, b+1)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print(f\"perfect_squares({a}, {b})\")\n    if not is_perfect(a, b):\n        print(\"The given numbers are not perfect squares.\")\n        return\n    print(\"The given numbers are perfect squares.\")\n    \n    sq_a = perfect_squares_aux(a, b)\n    sq_b = perfect_squares_aux(a, b)\n    if sq_a is sq_b:\n        print(\"The given numbers are both perfect squares.\")\n    else:\n        print(f\"The given numbers are not perfect squares.\")\n        \n    print(f\"perfect_squares_aux({a}, {b}): {sq_a}\\nperfect_squares_aux({a}, {b}): {sq_b}\")\n    \ndef perfect_squares_aux(a, b):\n    if a == b:\n        print(\"The given numbers are both perfect squares.\")\n        return 2 * perfect_squares_aux(a, b)\n    elif a > b:\n        return perfect_squares_aux(a - 1, b)\n    elif a < b:\n        return perfect_squares_aux(a + 1, b)\n    \ndef main():\n    print(\"The program is starting...\")\n    input_a = float(input(\"Input the first value: \"))\n    input_b = float(input(\"Input the second value: \"))\n    \n    perfect_squares(input_a, input_b)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a, b = abs(a), abs(b)\n    if a == b:\n        return [a]\n    if a == 0 or b == 0:\n        return []\n    i = 0\n    while a!= b:\n        if a % 2 == 0 and b % 2 == 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2 == 1 and b % 2 == 1:\n            a = a // 2\n            b = b // 2\n        elif a % 2!= 0 and b % 2!= 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2!= 0 and b % 2 == 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2 == 0 and b % 2 == 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2!= 0 and b % 2 == 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2 == 0 and b % 2!= 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2 == 0 and b % 2 == 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2!= 0 and b % 2 == 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2!= 0 and b % 2 == 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2 == 0 and b % 2 == 0:\n            a = a // 2\n            b = b // 2\n        else:\n            print(a, b)\n            i = i + 1\n    return [a] * (i)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [(i, j) for i in range(b) for j in range(a) if abs(i - j) == abs(i) and abs(i - j) == abs(i - b) + 1]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #convert polar to rectangular coordinates\n    rad=cmath.polar(x,y)\n    xr=rad[0]\n    yr=rad[1]\n    return xr,yr\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.acos(complex(x,y))\n    phi = cmath.asin(complex(x,y))\n    p = complex(x,y)\n    return p, theta, phi\ndef find_angle_between_two_points(p,q):\n    '''\n    Return the angle between two points as a float.\n    '''\n    theta1, phi1 = polar_rect(p[0], p[1])\n    theta2, phi2 = polar_rect(q[0], q[1])\n    return abs(theta1 - theta2) * 180 / math.pi\ndef find_angle_between_two_lines(l1,l2):\n    '''\n    Return the angle between two lines as a float.\n    '''\n    x = l1[0]\n    y = l1[1]\n    z = l1[2]\n    x2 = l2[0]\n    y2 = l2[1]\n    z2 = l2[2]\n    angle = abs(y2 - y2) * 180 / math.pi\n    if (z2 - z)!= 0:\n        angle = (180 - angle) * math.pi / 180\n    angle = (180 - angle) * math.pi / 180\n    angle = 180 - angle\n    angle = 180 - angle\n    angle = 180 - angle\n    angle = 180 - angle\n    angle = 180 - angle\n    return angle\ndef find_angle_between_two_lines_2(l1,l2):\n    '''\n    Return the angle between two lines as a float.\n    '''\n    x1 = l1[0]\n    y1 = l1[1]\n    z1 = l1[2]\n    x2 = l2[0]\n    y2 = l2[1]\n    z2 = l2[2]\n    x1 = x1\n    y1 = y1\n    z1 = z1\n    x2 = x2\n    y2 = y2\n    z2 = z2\n    x = abs(x2 - x1)\n    y = abs(y2 - y1)\n    z = abs(z2 - z1)\n    angle = math.atan(y / x)\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 180 / math.pi * angle\n    angle = 18"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = sqrt(x**2 + y**2)\n    theta = cmath.acos(y/r)\n    phi = cmath.asin(x/r)\n    return r, theta, phi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    s = x*x + y*y\n    if s >= 0:\n        r = cmath.rect(cmath.pi*s)\n        #print('r is', r.real, r.imag)\n        return r\n    else:\n        return None\ndef polar_rect_to_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    s = x*x + y*y\n    if s >= 0:\n        r = cmath.rect(cmath.pi*s)\n        #print('r is', r.real, r.imag)\n        return r.real, r.imag\n    else:\n        return None\ndef cartesian_to_polar_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.rect(cmath.pi*x)\n    #print('r is', r.real, r.imag)\n    return r.real, r.imag\ndef Cartesian_to_Cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.rect(cmath.pi*x)\n    #print('r is', r.real, r.imag)\n    return r.real, r.imag\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # initialise variables\n    dx = 0.0\n    dy = 0.0\n    x_center = 0.0\n    y_center = 0.0\n    x_radius = 0.0\n    y_radius = 0.0\n    # calculate coordinates of the centre of the sphere\n    x_center = x/2.0\n    y_center = y/2.0\n    x_radius = (x/2.0)**2.0\n    y_radius = (y/2.0)**2.0\n    # calculate polar coordinates of the center of the sphere\n    dx = x_radius * cmath.sqrt(2.0) * cmath.cos(cmath.radians(90-x_center))\n    dy = y_radius * cmath.sqrt(2.0) * cmath.sin(cmath.radians(90-y_center))\n    # calculate the lengths of each of the points on the sphere\n    return dx,dy\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x**2 + y**2;\n    x2 = complex(cmath.sqrt(a))\n    y2 = complex(1/cmath.sqrt(a))\n    return complex(x2 * y2,x2 * y)\ndef polar_rect_to_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_rect(x,y)\n    phi = cmath.phase(r)\n    return complex(cmath.polar(phi,x,y))\ndef complex_to_polar(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    r = polar_rect(x,y)\n    phi = cmath.phase(r)\n    return complex(x,y,phi)\ndef complex_to_polar_rect(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    r = polar_rect(x,y)\n    phi = cmath.phase(r)\n    return complex(x,y,phi)\ndef polar_to_complex(r,phi):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    x = complex(cmath.cos(phi)*r, cmath.sin(phi)*r)\n    y = complex(cmath.cos(phi), -cmath.sin(phi))\n    return x,y\ndef complex_to_polar_rect(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    r = polar_rect(x,y)\n    phi = cmath.phase(r)\n    return complex(x,y,phi)\ndef complex_to_polar(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    r = complex_to_polar_rect(x,y)\n    phi = complex_to_polar_rect(x,y)\n    return complex(x,y,phi)\ndef polar_to_complex(r,phi):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    x = complex(cmath.cos(phi)*r, cmath.sin(phi)*r)\n    y = complex(cmath.cos(phi), -cmath.sin(phi))\n    return x,y\ndef complex_to_polar(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    r = complex_to_polar(x,y)\n    phi = complex_to_polar_rect(x,y)\n    return complex(x,y,phi)\ndef rect_to_polar(r,phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = complex(r,0)\n    y = complex(r,0)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef polar_to_rect(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = complex(r,0)\n    y = complex(r,0)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef polar_to_rect_rect(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex_to_polar(r,phi)\n    phi = cmath.phase(r)\n    return complex(r,phi)\ndef complex_to_rect(x,y):\n    '''\n    Write a function to convert complex numbers to rectangular coordinates.\n    '''\n    x = complex(x)\n    y = complex(y)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef rect_to_complex(r,phi):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers.\n    '''\n    x = complex(r,0)\n    y = complex(r,0)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef polar_to_rect(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex_to_polar(r,phi)\n    phi = cmath.phase(r)\n    return complex(r,phi)\ndef rect_to_polar(r,phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = complex_to_polar(r,phi)\n    phi = cmath.phase(r)\n    return complex(r,phi)\ndef polar_to_rect(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex_to_polar(r,phi)\n    phi = cmath.phase(r)\n    return complex(r,phi)\ndef polar_to_polar_rect(r,phi):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    r = complex_to_polar(r,phi)\n    phi = cmath.phase(r)\n    return complex(r,phi,phi)\ndef polar_to_polar_rect(r,phi):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    r = complex_to_polar(r,phi)\n    phi = cmath.phase(r)\n    return complex(r,phi)\ndef complex_to_rect_rect(x,y):\n    '''\n    Write a function to convert complex numbers to rectangular coordinates.\n    '''\n    x = complex(x)\n    y = complex(y)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef rect_to_polar_rect(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    x = complex(x)\n    y = complex(y)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef polar_to_complex_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    x = complex(x)\n    y = complex(y)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef complex_to_polar_rect(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    x = complex(x)\n    y = complex(y)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef polar_to_rect_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = complex(x)\n    y = complex(y)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef polar_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = complex_to_polar(x,y)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef complex_to_polar_rect(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    x = complex_to_polar(x,y)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef rect_to_complex_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers.\n    '''\n    x = complex(x)\n    y = complex(y)\n    phi = cmath.phase(x)\n    return complex(x,y,phi)\ndef complex_to_rect(x,y):\n    '''\n    Write a function to convert complex numbers to rectangular coordinates.\n    '''\n    x = complex_to_polar(x,"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(x)\n    phi = cmath.phase(y)\n    if phi > 0.9*cmath.pi:\n        phi = phi - cmath.pi\n        x *= -1\n        y *= -1\n    elif phi < -0.9*cmath.pi:\n        phi = phi + cmath.pi\n        x *= -1\n        y *= -1\n    if x > 0:\n        x *= -1\n    if y > 0:\n        y *= -1\n    if x < 0:\n        x *= -1\n    if y < 0:\n        y *= -1\n    return x,y,phi\n    \ndef polar_rect_x(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(x)\n    phi = cmath.phase(y)\n    if phi > 0.9*cmath.pi:\n        phi = phi - cmath.pi\n        x *= -1\n        y *= -1\n    elif phi < -0.9*cmath.pi:\n        phi = phi + cmath.pi\n        x *= -1\n        y *= -1\n    if x > 0:\n        x *= -1\n    if y > 0:\n        y *= -1\n    if x < 0:\n        x *= -1\n    if y < 0:\n        y *= -1\n    return x,y,phi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.acos(x/r)\n    lam = cmath.asin(y/r)\n    return [r, phi, lam]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.pi/180,y*math.pi/180\ndef polar_translate(x,y):\n    '''\n    Write a function to translate polar coordinates to rectangular coordinates.\n    '''\n    cx = x*math.cos(math.radians(y))-x*math.sin(math.radians(y))\n    cy = x*math.sin(math.radians(y))+y*math.cos(math.radians(y))\n    return cx,cy\ndef polar_rotate(x,y,angle):\n    '''\n    Write a function to rotate polar coordinates around an axis.\n    '''\n    angle *= 180/math.pi\n    x,y = polar_translate(x,y)\n    return x,y-math.sin(angle)*math.cos(angle)+math.sin(angle)*math.sin(angle)*math.cos(angle),y-math.cos(angle)*math.cos(angle)+math.cos(angle)*math.sin(angle)*math.sin(angle)\ndef polar_map(x,y):\n    '''\n    Write a function to convert polar coordinates to map coordinates.\n    '''\n    a = cmath.sqrt(pow(x,2)+pow(y,2))\n    b = 2*(x*x+y*y)\n    c = math.sqrt(b)\n    return (a/c,b/c)\ndef polar_integrate(polar):\n    '''\n    Write a function to integrate a polar coordinate system.\n    '''\n    return polar_translate(polar[0]+polar[1]/2,0)\ndef polar_map_add(polar1,polar2):\n    '''\n    Write a function to add polar coordinates of two map coordinates.\n    '''\n    return polar_map(polar1[0]+polar2[0],polar1[1]+polar2[1])\ndef polar_map_intersect(polar1,polar2):\n    '''\n    Write a function to intersect two polar coordinates of two map coordinates.\n    '''\n    return polar_map_add(polar_map(polar1[0],polar2[0]),polar_map_add(polar1[1],polar2[1]))\ndef polar_map_normalize(polar):\n    '''\n    Write a function to normalize polar coordinates.\n    '''\n    return (cmath.sqrt(pow(polar[0],2)+pow(polar[1],2)),-cmath.sqrt(pow(polar[0],2)+pow(polar[1],2)))/2\ndef polar_map_projection(polar1,polar2):\n    '''\n    Write a function to project polar coordinates to map coordinates.\n    '''\n    return polar_map_normalize(polar_map_add(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1])))\ndef polar_map_normalize_intersect(polar1,polar2):\n    '''\n    Write a function to normalize polar coordinates.\n    '''\n    return polar_map_normalize(polar_map_intersect(polar1,polar2))\ndef polar_map_normalize_projection(polar1,polar2):\n    '''\n    Write a function to project polar coordinates to map coordinates.\n    '''\n    return polar_map_normalize_intersect(polar_map_projection(polar1,polar2))\ndef polar_map_normalize_proj(polar):\n    '''\n    Write a function to normalize polar coordinates.\n    '''\n    return polar_map_normalize_intersect(polar_map(polar[0],polar[1]),polar_map(polar[0],polar[1]))\ndef polar_projection_normalize(polar):\n    '''\n    Write a function to normalize polar coordinates.\n    '''\n    return polar_map_projection(polar_map_normalize(polar),polar_map_normalize(polar))\ndef polar_normalize_projection(polar):\n    '''\n    Write a function to normalize polar coordinates.\n    '''\n    return polar_map_normalize_projection(polar_map(polar[0],polar[1]))\ndef polar_normalize_proj(polar):\n    '''\n    Write a function to normalize polar coordinates.\n    '''\n    return polar_map_normalize_projection(polar_map(polar[0],polar[1]))\ndef polar_map_projection_normalize(polar1,polar2):\n    '''\n    Write a function to normalize polar coordinates.\n    '''\n    return polar_map_normalize_projection(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1]))\ndef polar_map_projection_normalize_intersect(polar1,polar2):\n    '''\n    Write a function to normalize polar coordinates.\n    '''\n    return polar_map_normalize_projection(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1]))\ndef polar_map_projection_normalize_projection(polar1,polar2):\n    '''\n    Write a function to normalize polar coordinates.\n    '''\n    return polar_map_normalize_projection(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1]))\ndef polar_intersect(polar1,polar2):\n    '''\n    Write a function to get the intersection of two polar coordinates.\n    '''\n    return polar_projection_normalize_intersect(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1]))\ndef polar_projection_intersect(polar1,polar2):\n    '''\n    Write a function to get the intersection of two polar coordinates.\n    '''\n    return polar_map_projection_normalize_intersect(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1]))\ndef polar_projection_intersect_normalize(polar1,polar2):\n    '''\n    Write a function to get the intersection of two polar coordinates.\n    '''\n    return polar_map_projection_normalize_intersect(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1]))\ndef polar_map_intersect_normalize(polar1,polar2):\n    '''\n    Write a function to get the intersection of two polar coordinates.\n    '''\n    return polar_map_projection_normalize_intersect(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1]))\ndef polar_normalize_intersect_projection(polar1,polar2):\n    '''\n    Write a function to get the intersection of two polar coordinates.\n    '''\n    return polar_map_normalize_intersect(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1]))\ndef polar_normalize_intersect_projection_normalize(polar1,polar2):\n    '''\n    Write a function to get the intersection of two polar coordinates.\n    '''\n    return polar_map_normalize_intersect(polar_map(polar1[0],polar1[1]),polar_map(polar2[0],polar2[1]))\ndef polar_map_intersect_proj(polar1,polar2):\n    '''\n    Write a function to get the intersection of two polar coordinates.\n    '''\n    return polar_map_normalize_intersect(polar_map(polar1[0],polar1["
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.sort()\n    return newList\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)-1): \n        newList[i], newList[len(newList)-1] = newList[len(newList)-1], newList[i]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #TODO: Write your code here\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # code here\n    temp = newList.pop()\n    newList.insert(0,temp)\n    temp = newList.pop()\n    newList.insert(0,temp)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[:1] + newList[-1:]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList)==1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.append(newList.pop())\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList \n    \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    lst = newList\n    \n    if len(lst)>2:\n        for i in range(len(lst)-2):\n            lst[i],lst[i+1] = lst[i+1],lst[i]\n        \n    return lst\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    print('The binomial coefficients of n = '+str(n)+', k = '+str(k))\n    return(n+k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #create lists of n and k such that n is odd and k is even\n    n,k = list(n), list(k)\n    #store the sum of all the binomial co-efficients as a list\n    #use a list comprehension to iterate through each element and append to the sum\n    n = [i+j for i,j in zip(n,k)]\n    #convert to a list of tuples by looping through each tuple\n    #get the number of tuples and check to see if its even\n    while (n and n[-1]%2):\n        n.pop()\n    #if the last element in the list is odd, then return the sum of the tuples and all the odd numbers\n    if n:\n        return n[-1]\n    #return the sum of all the odd numbers\n    return sum(n)\n    \ndef n_lcm(a,b):\n    '''\n    Write a python function to find the least common multiple.\n    '''\n    #if a and b are both greater than the number of digits of a and b, then the function should return 0\n    if a > b:\n        return 0\n    #find the GCD of the two numbers\n    gcd = max(a,b)\n    while gcd % a!= 0 or gcd % b!= 0:\n        gcd = max(gcd,min(a,b)//2)\n    return gcd\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (i*(k**i))\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert n >= 1\n    assert k >= 1\n    k -= 1\n    for i in range(n): \n        if (k <= 0):\n            return 1\n        else:\n            k -= 1\n            value = binomial_Coeff(n-i,k)\n            if (i == 0):\n                n -= 1\n            else:\n                value += value\n    return value\n    \ndef binomial(n,k):\n    '''\n    Write a python function to calculate the product of n binomial coefficients.\n    '''\n    assert n >= 1\n    assert k >= 1\n    k -= 1\n    sum = 1\n    for i in range(n): \n        sum *= binomial_Coeff(n-i,k)\n    return sum\n    "
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (binomial_Coeff(n-i,k) * i)\n    return sum\ndef average(values):\n    '''\n    Write a python function to find the average value of a list of values.\n    '''\n    return sum(values)/len(values)\ndef binomial_Coeff_test():\n    print(\"{}\".format(binomial_Coeff(6,2)))\n    print(\"{}\".format(binomial_Coeff(6,3)))\n    print(\"{}\".format(binomial_Coeff(6,4)))\n    print(\"{}\".format(binomial_Coeff(6,5)))\n    print(\"{}\".format(binomial_Coeff(6,6)))\ndef test_binomial_Coeff():\n    assert binomial_Coeff(6,2)==0.0\n    assert binomial_Coeff(6,3)==1.0\n    assert binomial_Coeff(6,4)==1.0\n    assert binomial_Coeff(6,5)==1.0\n    assert binomial_Coeff(6,6)==1.0\n    print('Test for binomial_Coeff passed.')\n    \ndef sigmoid(x):\n    '''\n    Write a python function to calculate the sigmoid of a value.\n    '''\n    if x <= 0.0:\n        return 0.0\n    elif x >= 1.0:\n        return 1.0\n    else:\n        return 1/(1+math.exp(-x))\ndef sigmoid_test():\n    assert sigmoid(0.0)==0.0\n    assert sigmoid(1.0)==1.0\n    assert sigmoid(2.0)==0.5\n    assert sigmoid(3.0)==0.3\n    assert sigmoid(4.0)==0.25\n    print('Test for sigmoid passed.')\n    \ndef cross_entropy(Y,yhat):\n    '''\n    Write a python function to calculate the cross entropy of a given output and\n    the label.\n    '''\n    if Y.ndim > 1:\n        assert Y.shape[1] == yhat.shape[1]\n        return -sum([np.log(yhat[i]*np.log(Y[i,:])) for i in range(yhat.shape[0])])/yhat.shape[0]\n    else:\n        assert Y.shape == yhat.shape\n        return -np.log(yhat)\ndef cross_entropy_test():\n    assert cross_entropy(np.array([1,2,3]),np.array([0.5,0.6,0.7]))==0.147055\n    print('Test for cross entropy passed.')\n    \ndef softmax(X):\n    '''\n    Write a python function to calculate the softmax of a value.\n    '''\n    return np.exp(X)/np.sum(np.exp(X))\ndef softmax_test():\n    assert softmax(np.array([[1,2,3],[1,2,3]]))==np.array([[0.5,0.5],[0.5,0.5]])\n    print('Test for softmax passed.')\ndef mse_test():\n    assert mse(np.array([[1,2,3],[1,2,3]]),np.array([[1,2,3],[1,2,3]]))==0.0\n    print('Test for mse passed.')\ndef mse_test2():\n    assert mse(np.array([[1,2,3],[1,2,3]]),np.array([[1.5,2.5,3.5],[1.5,2.5,3.5]]))==0.0\n    print('Test for mse passed.')\ndef mse_test3():\n    assert mse(np.array([[1,2,3],[1,2,3]]),np.array([[2,2,2],[2,2,2]]))==0.0\n    print('Test for mse passed.')\n    \ndef error_test():\n    assert error(np.array([[1,2,3],[1,2,3]]),np.array([[1,2,3],[1,2,3]]))==0.0\n    print('Test for error passed.')\ndef reg_test():\n    assert reg(np.array([[1,2,3],[1,2,3]]),np.array([[1,2,3],[1,2,3]]))==0.0\n    print('Test for reg passed.')\ndef bce_test():\n    assert bce(np.array([[1,2,3],[1,2,3]]),np.array([[1,1,1],[1,1,1]]))==0.0\n    print('Test for bce passed.')\ndef bce_test2():\n    assert bce(np.array([[1,2,3],[1,2,3]]),np.array([[1,1,1],[1,1,1]]))==0.0\n    print('Test for bce passed.')\n    \ndef bce_test3():\n    assert bce(np.array([[1,2,3],[1,2,3]]),np.array([[1,2,3],[1,2,3]]))==0.0\n    print('Test for bce passed.')\n    \ndef soft_max(X):\n    '''\n    Write a python function to calculate the softmax of a value.\n    '''\n    return np.exp(X)/np.sum(np.exp(X))\ndef soft_max_test():\n    assert soft_max(np.array([[1,2,3],[1,2,3]]))==np.array([[0.33,0.5,0.5],[0.25,0.75,0.25]])\n    print('Test for soft max passed.')\ndef log_softmax(X):\n    '''\n    Write a python function to calculate the logarithm of the softmax of a value.\n    '''\n    return np.log(soft_max(X))\ndef log_softmax_test():\n    assert log_softmax(np.array([[1,2,3],[1,2,3]]))==np.log(soft_max(np.array([[1,2,3],[1,2,3]])))\n    print('Test for log softmax passed.')\ndef soft_sigmoid(X):\n    '''\n    Write a python function to calculate the soft sigmoid of a value.\n    '''\n    return np.exp(-X)/(1+np.exp(-X))\ndef soft_sigmoid_test():\n    assert soft_sigmoid(0.0)==0.0\n    assert soft_sigmoid(1.0)==0.5\n    assert soft_sigmoid(2.0)==1.0\n    assert soft_sigmoid(3.0)==1.0\n    assert soft_sigmoid(4.0)==1.0\n    print('Test for soft sigmoid passed.')\n    \ndef activation_test():\n    assert activation(np.array([[1,2,3],[1,2,3]]),np.array([[1,2,3],[1,2,3]]))==np.array([[0.9,0.8,0.7],[0.7,0.5,0.3]])\n    print('Test for activation passed.')\n    \ndef activation_test2():\n    assert activation(np.array([[1,2,3],[1,2,3]]),np.array([[1,2,3],[1,2,3]]))==np.array([[0.2,0.3,0.5],[0.7,0.5,0.7]])\n    print('Test for activation passed.')\n    \ndef soft_activation_test():\n    assert soft_activation(np.array([[1,2,3],[1,2,3]]),np.array([[1,2,3],[1,2,3]]))==np.array([[0.9,0.8,0.7],[0.7,0"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 0\n    for i in range(n+1):\n        res += i*(k**i)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0\n    for i in range(1,k+1):\n        total += n*(n-1)**i/(i*(i-1))\n    return total\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for n_i in range(0,n):\n        if n_i == 0 or n_i == k:\n            result += 1\n        else:\n            result += (n_i - 1) * (n_i - 2) * binomial_Coeff(n-1,k-1)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial_coeff(n,k):\n        coeff = [0]*(n+1)\n        for i in range(1,n+1):\n            coeff[i] = k//i*coeff[i-1]\n            k %= i\n        return coeff\n    return binomial_coeff(n,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial_coeff(n,k):\n        if k==0:\n            return 1\n        elif k==1:\n            return n\n        else:\n            return binomial_coeff(n,k-1)*n\n    return binomial_coeff(n,k)\ndef binomial_coeff_r(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)//(n-k)\ndef binomial_coeff_l(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)/(n-k)\ndef binomial_coeff_l_incr(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_l(n,k)\ndef binomial_coeff_r_incr(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)-binomial_coeff_r(n,k)\ndef binomial_coeff_r_incr_l(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_r_incr(n,k)\ndef binomial_coeff_r_incr_l_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff_r_incr(n,k)/binomial_coeff_r(n,k)-binomial_coeff_l_incr(n,k)\ndef binomial_coeff_l_incr_r(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_l(n,k)\ndef binomial_coeff_l_incr_r(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_l(n,k)\ndef binomial_coeff_l_incr_r_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_l_incr(n,k)/binomial_coeff_r(n,k)\ndef binomial_coeff_l_incr_r_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_l_incr(n,k)/binomial_coeff_r_incr(n,k)\ndef binomial_coeff_r_incr_l_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_r_incr(n,k)/binomial_coeff_l(n,k)\ndef binomial_coeff_r_incr_l_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_r_incr(n,k)/binomial_coeff_l(n,k)\ndef binomial_coeff_r_incr_l(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_r_incr(n,k)\ndef binomial_coeff_r_incr_l_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_r_incr(n,k)/binomial_coeff_l(n,k)\ndef binomial_coeff_l_incr_r_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)-binomial_coeff_l_incr(n,k)/binomial_coeff_r(n,k)\ndef binomial_coeff_l_incr_r_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)-binomial_coeff_l_incr(n,k)/binomial_coeff_r(n,k)\ndef binomial_coeff_r_incr_l_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)-binomial_coeff_r_incr(n,k)/binomial_coeff_l(n,k)\ndef binomial_coeff_r_incr_l_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)-binomial_coeff_r_incr(n,k)/binomial_coeff_l(n,k)\ndef binomial_coeff_r_incr_l(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_r_incr(n,k)\ndef binomial_coeff_r_incr_l(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_r_incr(n,k)\ndef binomial_coeff_r_incr_l_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_r_incr(n,k)/binomial_coeff_l(n,k)\ndef binomial_coeff_l_incr_r_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_l_incr(n,k)/binomial_coeff_r(n,k)\ndef binomial_coeff_l_incr_r_inv(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)+binomial_coeff_l_incr(n,k)/binomial_coeff_r(n,k)\ndef binomial_coeff_l_incr_r(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    # Find all instances of a 0-9\n    zero_reg = re.compile('^[0-9]{1,3}$')\n    \n    # Check that there is a zero\n    if not zero_reg.match(ip):\n        return ip\n    \n    # Remove leading zeroes\n    ip = re.sub(zero_reg,'',ip)\n    \n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(ip[0]=='0'):\n        return ip\n    else:\n        return ip.split('.')[0]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.strip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = ip\n    new_ip = new_ip.replace('.', '')\n    new_ip = new_ip.replace('/', '')\n    new_ip = new_ip.replace(' ', '')\n    if len(new_ip) == 0:\n        return ip\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    sub_pattern = r'^[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}'\n    pattern = re.compile(sub_pattern)\n    ip_list = [x for x in ip.split('.') if x]\n    result = '.'.join(ip_list)\n    result = re.sub(pattern, '', result)\n    return result\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not ip:\n        return ip\n    if ip[0] == '.':\n        return ip\n    else:\n        prefix = ip[0]\n        count = 1\n        while count < len(ip):\n            if ip[0] == '0':\n                ip = ip[1:]\n            else:\n                break\n            count = count + 1\n    return ip[:len(ip)]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_parts = ip.split('.')\n    ip_parts = ip_parts[:-1]\n    return '.'.join(ip_parts)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip)==0:\n        return ip\n    ip=ip[1:]\n    if len(ip)==0:\n        return ip\n    if ip[0]!='0':\n        return ip\n    i=len(ip)-1\n    while ip[i]=='0':\n        i-=1\n    return ip[:i]\ndef ip_to_add(ip):\n    '''\n    Write a function to convert an ip address to its base 3 base 4 version (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return '-'.join(ip.split('.'))\ndef ip_to_bin(ip):\n    '''\n    Convert an ip address to its base 3 base 4 version (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=3)\ndef ip_to_dec(ip):\n    '''\n    Convert an ip address to its base 3 base 4 version (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=3)\ndef ip_to_bin_with_prefix(ip, prefix):\n    '''\n    Convert an ip address to its base 3 base 4 version (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return ip[:len(ip)//len(prefix)+1]+prefix\ndef get_prefix(ip):\n    '''\n    Write a function to return the number of bits from the base 3 prefix for a base 2 ip address (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=3)\ndef get_ip(binip):\n    '''\n    Write a function to return the first two hex digits from the base 2 prefix for a base 2 ip address (i.e., ->>-254)\n    '''\n    return binip[:2]\ndef convert_prefix(ip, prefix, base=3):\n    '''\n    Write a function to return the number of bits from the base 2 prefix for a base 2 ip address (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=base)\ndef get_ip_prefix(ip, prefix, base=3):\n    '''\n    Write a function to return the number of bits from the base 2 prefix for a base 2 ip address (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return ip[:2]\ndef convert_prefix_to_bin(prefix, base=3):\n    '''\n    Convert a prefix (i.e., ->>-254) to a base 3 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(prefix)\n    return int(ip,base=base)\ndef get_prefix_bin(prefix, base=3):\n    '''\n    Convert a prefix (i.e., ->>-254) to a base 3 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(prefix)\n    return int(ip,base=base)\ndef convert_bin_to_prefix(binip, base=3):\n    '''\n    Convert a base 3 prefix (i.e., ->>-254) to a base 2 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(binip)\n    return int(ip,base=base)\ndef convert_bin_to_ip(binip, base=3):\n    '''\n    Convert a base 3 prefix (i.e., ->>-254) to a base 2 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(binip)\n    return int(ip,base=base)\ndef convert_ip_to_bin(ip, base=3):\n    '''\n    Convert an ip address (i.e., ->>-254) to a base 3 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=base)\ndef get_ip_bin(ip, base=3):\n    '''\n    Convert an ip address (i.e., ->>-254) to a base 3 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=base)\ndef get_ip_prefix(ip, base=3):\n    '''\n    Convert an ip address (i.e., ->>-254) to a base 3 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=base)\ndef convert_ip_bin_to_bin(ip, base=3):\n    '''\n    Convert an ip address (i.e., ->>-254) to a base 3 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=base)\ndef get_bin_ip_prefix(ip, base=3):\n    '''\n    Convert an ip address (i.e., ->>-254) to a base 3 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=base)\ndef get_ip_prefix_bin(ip, base=3):\n    '''\n    Convert an ip address (i.e., ->>-254) to a base 3 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(ip)\n    return int(ip,base=base)\ndef convert_bin_to_prefix_bin(binip, base=3):\n    '''\n    Convert a base 3 prefix (i.e., ->>-254) to a base 2 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(binip)\n    return int(ip,base=base)\ndef convert_bin_to_ip_bin(binip, base=3):\n    '''\n    Convert a base 3 prefix (i.e., ->>-254) to a base 2 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(binip)\n    return int(ip,base=base)\ndef convert_ip_bin_to_bin(binip, base=3):\n    '''\n    Convert a base 3 prefix (i.e., ->>-254) to a base 2 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(binip)\n    return int(ip,base=base)\ndef convert_bin_to_prefix_bin(binip, base=3):\n    '''\n    Convert a base 3 prefix (i.e., ->>-254) to a base 2 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(binip)\n    return int(ip,base=base)\ndef convert_ip_bin_to_ip_bin(binip, base=3):\n    '''\n    Convert a base 3 prefix (i.e., ->>-254) to a base 2 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(binip)\n    return int(ip,base=base)\ndef convert_ip_bin_to_prefix_bin(binip, base=3):\n    '''\n    Convert a base 3 prefix (i.e., ->>-254) to a base 2 prefix (i.e., ->>-254)\n    '''\n    ip=removezero_ip(binip)\n    return int(ip,base=base)\ndef add_zero_ip(ip):\n    '''\n    Write a function to add zero bytes (i.e., ->>-0) to the end of an ip address.\n    '''\n    ip=removezero_ip(ip)\n    return '0'*(int(len(ip)/2)-len(ip))+ip\ndef add_zero_prefix(prefix):\n    '"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip[0] == '0':\n        return ip[1:]\n    else:\n        return ip\n    # your code goes here\ndef removeallzero(ip):\n    '''\n    Remove all the zeroes in an ip address.\n    '''\n    if ip[0] == '0':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef remove_duplicate_ip(ip):\n    '''\n    Remove duplicate ip addresses.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef remove_duplicate_ip_ip(ip,ip_list):\n    '''\n    Remove duplicate ip addresses in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_number_of_ip(ip):\n    '''\n    Remove the numbers in an ip address.\n    '''\n    if ip[0] == '.':\n        return ''\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format(ip):\n    '''\n    Remove leading zeroes in an ip address.\n    '''\n    if ip[0] == '0':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_ip(ip):\n    '''\n    Remove the numbers in an ip address.\n    '''\n    if ip[0] == '0':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers in an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip(ip):\n    '''\n    Remove the numbers in an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers in an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef remove_first_zeros(ip):\n    '''\n    Remove the first zero from an ip address.\n    '''\n    if ip[0] == '0':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef remove_all_zeros(ip):\n    '''\n    Remove all the zeroes from an ip address.\n    '''\n    if ip[0] == '0':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_with_numbers(ip):\n    '''\n    Remove the numbers from an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_with_numbers_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_with_numbers_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_with_numbers_multi_ip(ip):\n    '''\n    Remove the numbers from an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_with_numbers_multi_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_with_numbers_multi_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers(ip):\n    '''\n    Remove the numbers from an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_multi_ip(ip):\n    '''\n    Remove the numbers from an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_multi_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_multi_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address in a list.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_multi_ip_ip(ip):\n    '''\n    Remove the numbers from an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_multi_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_multi_ip_ip(ip,ip_list):\n    '''\n    Remove the numbers from an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_multi_ip_ip(ip):\n    '''\n    Remove the numbers from an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_multi_ip_ip(ip):\n    '''\n    Remove the numbers from an ip address.\n    '''\n    if ip[0] == '.':\n        return ip\n    else:\n        return ip\n    # your code goes here\ndef get_ip_format_multi_ip_with_numbers_multi_ip_ip(ip):\n    '''\n    Remove the numbers from an ip address.\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i=0\n    while i < len(list1) - 2:\n        if list1[i] % 2 == 0:\n            list1[i] += 1\n        else:\n            list1[i] += 1\n        i+=1\n    return list1\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if i % 2 == 0:\n            count += 1\n    if count == 0:\n        return list1\n    else:\n        return list1[0:count] + list1[count::]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #Write your code here\n    if len(list1) % 2 == 0:\n        return list1[::2]\n    return list1[1::2]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    j = 0\n    sum = 0\n    while i < len(list1):\n        sum += list1[i]\n        if i % 2 == 0:\n            if list1[i] % 2!= 0:\n                sum -= list1[i]\n            j += 1\n        else:\n            if list1[i] % 2!= 0:\n                sum += list1[i]\n            i += 1\n        if i >= j:\n            break\n    return sum\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1[0]\n    mid = len(list1)//2\n    if list1[mid] % 2 == 0:\n        print(list1[mid])\n        return list1[mid]\n    else:\n        print(list1[mid])\n        print(list1[mid+1])\n        return list1[mid+1]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_diff = []\n    for item in list1:\n        if list1.index(item) % 2 == 0:\n            list_diff.append(item)\n        else:\n            list_diff.append(item)\n    return list_diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return odd, even\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    odd_numbers = []\n    even_odd = list1[::2]\n    odd_numbers = list1[1::2]\n    print('Even numbers:', even_odd)\n    print('Odd numbers:', odd_numbers)\n    return(sum(even_odd)) - sum(odd_numbers)"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    odd_list = []\n    even_list = []\n    for i in range(len(list1)):\n        if i % 2!= 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    \n    return odd_list, even_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # O(n) = n log(n)\n    # O(1) = n\n    def minSwaps(str1,str2) :\n        m = len(str1)\n        n = len(str2)\n        # l = 0\n        # r = 0\n        # while l < m and r < n :\n        #     if str1[l]!= str2[r]:\n        #         if str1[l] < str2[r]:\n        #             r = r + 1\n        #         else:\n        #             l = l + 1\n        #     else:\n        #         if r < n:\n        #             r = r + 1\n        #         else:\n        #             l = l + 1\n        # return l\n        if m < n :\n            return 0\n        if m == n :\n            return m\n        elif m > n :\n            return m - n\n    return minSwaps(str1,str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    #string to int dictionary\n    char_d = {'0':0, '1':1}\n    \n    # integer to string dictionary\n    char_s = {'0':'0','1':'1'}\n    \n    # creating a result object\n    result = 0\n    \n    # iterating through string\n    for i in range(len(str1)):\n        # check if current char is '0'\n        if str1[i] == '0':\n            # swapping if current char is '0'\n            if str2[i] == '0':\n                # zero swaps\n                result += char_d[str1[i]]\n                # '0' becomes '1'\n                result += char_d['1']\n            else:\n                # one swap\n                result += char_s[str2[i]]\n                # '1' becomes '0'\n                result += char_s['0']\n        else:\n            # current char is '1'\n            result += char_d['1']\n            # zero swaps\n            result += char_d['0']\n    return resul"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    size_str = len(str1)\n    if size_str == 1: \n        return -1\n    elif size_str == 2: \n        if str1 == str2: \n            return 0\n        return 1\n    size = 0\n    str1_len = len(str1)\n    str2_len = len(str2)\n    if str1_len == str2_len: \n        for i in range(size_str - 1): \n            if str1[i]!= str2[i]: \n                break\n        for j in range(size_str - 1, size_str - 1 - i - 1, -1): \n            if str1[j] == str2[j]: \n                str1 = str1[:j] + str2[j + 1:] \n                str2 = str2[:j] + str1[j + 1:] \n                size += 1\n                break\n        return size\n    else: \n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(0,len(str1)-1):\n        for j in range(i+1,len(str1)):\n            if str1[i]==str1[j] :\n                count+=1\n    return count\n    \nprint(min_Swaps(str1,str2)"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    #case 1:\n    if str1[0] == str2[0]:\n        if str1[1] == str2[1]:\n            print('1')\n        elif str1[1] == '1':\n            print('2')\n        else:\n            print('3')\n    else :\n        print('Error')\n    #case 2:\n    if str1[0]!= str2[0]:\n        if str1[1] == str2[1]:\n            print('1')\n        elif str1[1] == '1':\n            print('2')\n        else:\n            print('3')\n    else:\n        print('Error')\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    count = 0\n    n = len(str1)\n    \n    for i in range(n) : \n        if str1[i]!= str2[i] : \n            count += 1\n            \n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2): \n        return -1 \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    temp = 0\n    for i in range(len(tuple_list)):\n        temp += len(tuple_list[i])\n    return temp\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += len(i) + 1\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for value in tuple_list:\n        size += len(str(value))\n    return size\n    \ndef check_for_duplicates(tuple_list):\n    '''\n    Write a function to check if the given tuple is a duplicate.\n    '''\n    \n    for i in tuple_list:\n        if tuple_list.count(i) > 1:\n            return True\n        \n    return False\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum(len(i) for i in tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (len(tuple_list) * 8)\ndef tuple_copy(tuple_list):\n    '''\n    Write a function to get a copy of a tuple.\n    '''\n    return tuple(tuple_list)\ndef tuple_mul(tuple_list):\n    '''\n    Write a function to multiply a tuple.\n    '''\n    return tuple_list\ndef tuple_len(tuple_list):\n    '''\n    Write a function to find the length in bytes of the given tuple.\n    '''\n    return tuple_size(tuple_list)\ndef tuple_first(tuple_list):\n    '''\n    Write a function to get the first element of a tuple.\n    '''\n    return tuple_list[0]\ndef tuple_last(tuple_list):\n    '''\n    Write a function to get the last element of a tuple.\n    '''\n    return tuple_list[-1]\ndef tuple_index(tuple_list, idx):\n    '''\n    Write a function to get the first element of a tuple.\n    '''\n    return tuple_list[idx]\ndef tuple_extend(tuple_list, other):\n    '''\n    Write a function to add another tuple to a tuple.\n    '''\n    tuple_list.extend(other)\ndef tuple_insert(tuple_list, idx, value):\n    '''\n    Write a function to insert a tuple at a specific index.\n    '''\n    tuple_list.insert(idx, value)\ndef tuple_pop(tuple_list, idx):\n    '''\n    Write a function to remove a tuple from a tuple.\n    '''\n    tuple_list.pop(idx)\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple_list.reverse()\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple_list.sort()\ndef tuple_count(tuple_list, value):\n    '''\n    Write a function to count how many elements in a tuple are equal.\n    '''\n    return tuple_size(tuple_list) == tuple_len(tuple_list)\ndef tuple_is_empty(tuple_list):\n    '''\n    Write a function to determine if a tuple is empty.\n    '''\n    return tuple_empty(tuple_list)\ndef tuple_is_full(tuple_list):\n    '''\n    Write a function to determine if a tuple is full.\n    '''\n    return tuple_full(tuple_list)\ndef tuple_empty(tuple_list):\n    '''\n    Write a function to determine if a tuple is empty.\n    '''\n    return tuple_size(tuple_list) == 0\ndef tuple_full(tuple_list):\n    '''\n    Write a function to determine if a tuple is full.\n    '''\n    return tuple_size(tuple_list) >= tuple_len(tuple_list)\ndef tuple_sum(tuple_list):\n    '''\n    Write a function to sum a tuple.\n    '''\n    return tuple_mul(tuple_list)\ndef tuple_sub(tuple_list):\n    '''\n    Write a function to subtract a tuple.\n    '''\n    return tuple_mul(tuple_list, -1)\ndef tuple_mul(tuple_list, scalar):\n    '''\n    Write a function to multiply a tuple by a scalar.\n    '''\n    return tuple_mul(tuple_list, scalar)\ndef tuple_div(tuple_list, scalar):\n    '''\n    Write a function to divide a tuple by a scalar.\n    '''\n    return tuple_div(tuple_list, scalar)\ndef tuple_concat(tuple_list):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    return tuple_mul(tuple_list, 1)\ndef tuple_len(tuple_list):\n    '''\n    Write a function to get the length in bytes of the given tuple.\n    '''\n    return tuple_size(tuple_list)\ndef tuple_getitem(tuple_list, idx):\n    '''\n    Write a function to get a specified item of a tuple.\n    '''\n    return tuple_list[idx]\ndef tuple_remove(tuple_list, value):\n    '''\n    Write a function to remove a tuple.\n    '''\n    tuple_list.remove(value)\ndef tuple_clear(tuple_list):\n    '''\n    Write a function to clear a tuple.\n    '''\n    tuple_list.clear()\ndef tuple_get(tuple_list, idx):\n    '''\n    Write a function to get a specified item of a tuple.\n    '''\n    return tuple_getitem(tuple_list, idx)\ndef tuple_setitem(tuple_list, idx, value):\n    '''\n    Write a function to set a specified item of a tuple.\n    '''\n    tuple_list[idx] = value\ndef tuple_setitem(tuple_list, idx, value):\n    '''\n    Write a function to set a specified item of a tuple.\n    '''\n    tuple_setitem(tuple_list, idx, value)\ndef tuple_popitem(tuple_list):\n    '''\n    Write a function to remove the last item of a tuple.\n    '''\n    tuple_list.popitem()\ndef tuple_iter(tuple_list):\n    '''\n    Write a function to iterate through a tuple.\n    '''\n    tuple_list.__iter__()\ndef tuple_print(tuple_list):\n    '''\n    Write a function to print a tuple.\n    '''\n    tuple_list.__repr__()\ndef tuple_getitem_list(tuple_list, idx):\n    '''\n    Write a function to get a specified item of a tuple.\n    '''\n    return tuple_get(tuple_list, idx)\ndef tuple_setitem_list(tuple_list, idx, value):\n    '''\n    Write a function to set a specified item of a tuple.\n    '''\n    tuple_setitem(tuple_list, idx, value)\ndef tuple_setitem_list(tuple_list, idx, value):\n    '''\n    Write a function to set a specified item of a tuple.\n    '''\n    tuple_setitem(tuple_list, idx, value)\ndef tuple_setitem_list(tuple_list, idx, value):\n    '''\n    Write a function to set a specified item of a tuple.\n    '''\n    tuple_setitem(tuple_list, idx, value)\ndef tuple_get_list(tuple_list):\n    '''\n    Write a function to get a list of tuples.\n    '''\n    return tuple_get(tuple_list, 0)\ndef tuple_sort_list(tuple_list):\n    '''\n    Write a function to sort a list.\n    '''\n    tuple_list.sort()\ndef tuple_sort_list_idx(tuple_list):\n    '''\n    Write a function to sort a list.\n    '''\n    tuple_list.sort(key = tuple_getitem)\ndef tuple_sort_idx_list(tuple_list):\n    '''\n    Write a function to sort a list.\n    '''\n    tuple_list.sort(key = tuple_getitem)\ndef tuple_sort_idx_list_idx(tuple_list):\n    '''\n    Write a function to sort a list.\n    '''\n    tuple_list.sort(key = tuple_getitem)\ndef tuple_sort_idx_list_idx_list(tuple_list):\n    '''\n    Write a function to sort a list.\n    '''\n    tuple_list.sort(key = tuple_getitem)\n    tuple_list.sort(key = tuple_getitem)\ndef tuple_reverse_list(tuple_list):\n    '''\n    Write a function to revers"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr2):\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_index = 0\n    arr2_index = 0\n    result = -1\n    while True:\n        arr1_index += 1\n        if arr1[arr1_index] < arr2[arr2_index]:\n            result += 1\n            arr1_index += 1\n            arr2_index += 1\n        else:\n            arr2_index += 1\n            arr1_index += 1\n        if arr1_index == arr2_index:\n            break\n    return result\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # two pointers:\n    # if k is negative, assume element is last element\n    # if k is 0, assume first element\n    #\n    # base cases:\n    # 1) if k is a valid k:\n    #   return arr1[k]\n    # 2) if k is a negative, return first element\n    #\n    # notice the sorted array is not in increasing order\n    # since the first element can be smaller than the last element\n    # this is the case when k is positive\n    if k < 0:\n        return arr1[0]\n    if k > len(arr2) - 1:\n        return arr2[-1]\n    \n    # kth element\n    # 1. sort arr1\n    # 2. sort arr2\n    # 3. index in arr2\n    # 4. return arr2[index]\n    \n    return find_kth_rec(arr1, arr2, k - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # First, we check if the array are sorted\n    if not arr1 or not arr2:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == arr2:\n        return arr1\n    else:\n        return find_kth(arr1[(k-1):], arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Time complexity: O(log(n))\n    # Space complexity: O(1)\n    \n    start_index = arr1[0]\n    end_index = arr1[-1]\n    index_of_kth = (arr1[k] - start_index) / (end_index - start_index)\n    return index_of_kth\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_index = -1\n    arr2_index = -1\n    arr1_index, arr2_index = find_kth_of_first_element(arr1, arr2, arr1_index, arr2_index)\n    if arr1_index > arr2_index:\n        arr1_index, arr2_index = arr2_index, arr1_index\n    return arr1[arr1_index], arr2[arr2_index]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # if k not in arr1 or k not in arr2:\n    #     return -1\n    # else:\n    #     return kth_element(arr1, arr2, k)\n    #     print(arr1, arr2)\n    # return -1\n    #     return kth_element(arr1, arr2, k)\n    # return -1\n    # return arr1[(k + arr1.size) % arr1.size]\n    return kth_element(arr1, arr2, k)\n    # return arr2[arr2.index(kth_element(arr1, arr2, k))]\n    return arr2[arr2.index(kth_element(arr1, arr2, k))]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find where kth element is\n    low, high = 0, len(arr1)-1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr1[mid] == arr2[k-1]:\n            return arr1[mid]\n        elif arr1[mid] < arr2[k-1]:\n            low = mid+1\n        else:\n            high = mid - 1\n    return arr1[-1]\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    while num!= 0:\n        dig = num % 10\n        sum = sum + (dig ** 3)\n        num = num // 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    for digit in str(number):\n        count += int(digit)**len(str(number))\n    if count == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = 0\n    num = number\n    temp += 1\n    while num!= 0:\n        temp = num%10\n        num = num//10\n        temp+=1\n    if temp == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    num = number\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    power = 1\n    while power < number:\n        sum += power\n        power += 1\n    for i in range(1,number+1):\n        if sum == i:\n            return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_list = []\n    for i in str(number):\n        num_list.append(int(i))\n    result = 0\n    count = 0\n    for i in num_list:\n        result = result + i ** 3\n        count += 1\n        if result == number:\n            return '{} is armstrong number'.format(number)\n        else:\n            return '{} is not armstrong number'.format(number)"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_list = list(map(int, str(number)))\n    sum_of_digits = 0\n    for i in range(len(num_list)):\n        sum_of_digits += int(num_list[i])\n        if i!= len(num_list) - 1:\n            if sum_of_digits == number:\n                return 'Armstrong'\n    return 'Not Armstrong'\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_digits = 0\n    for i in str(number):\n        sum_of_digits += int(i)\n    return sum_of_digits == number\n    \ndef narcissistic_number(number):\n    '''\n    Write a function that returns whether the number is a narcissistic number or not.\n    '''\n    return sum(int(i) ** 3 for i in str(number)) == number\n    \ndef prime_factors(number):\n    '''\n    Write a function that returns the list of prime factors for a given number.\n    '''\n    return [i for i in range(2, number) if number % i == 0]\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    '''\n    1. make a variable number\n    2. initialize a count\n    3. initialize the number\n    4. if the number is not a perfect square number\n        4.1. check if the number is perfect square number\n            4.2. if the number is perfect square number\n                4.2.1. if it is a perfect square number return true\n                    4.2.2. if it is not a perfect square number return false\n    '''\n    '''\n    you can use the same function to test if the number is a perfect square\n    '''\n    number = int(number)\n    number_1 = number\n    while number_1 > 0:\n        remainder = number % 10\n        number = number // 10\n        while remainder % 10 == remainder:\n            remainder = remainder // 10\n    if number == number_1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = str(number)\n    count = 0\n    for i in range(len(s)):\n        count += int(s[i]) ** len(s)\n    if count == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Write your code here.\n    if number == 0:\n        return 0\n    else:\n        return sum_average(number - 1) + number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(0, number):\n        total += i\n    average = total / number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    numbers = []\n    for i in range(1, number + 1):\n        numbers.append(i)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += int(input(\"Enter number: \"))\n    print(total/number)\n    return total/number\nprint(sum_average(5))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if len(number) < 1:\n        return 0\n    elif len(number) == 1:\n        return number[0]\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum = sum + i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(number) / len(number)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += i\n    average = total / number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #Your code here\n    \n    total = 0\n    for i in range(0, number):\n        total += i\n    average = total / number\n    print('Sum:', total)\n    print('Average:', average)\n    \n    return total, average\n    \nif __name__ == '__main__':\n    sum_average(7)\n    sum_average(4)\n    sum_average(5)\n    sum_average(7"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    \n    for i in range(number):\n        n = int(input(\"enter a number: \"))\n        sum += n\n        \n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0):\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(n,\"is an even number.\")\n    else:\n        print(n,\"is not an even number.\")\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True \n    else : \n        return False \ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True \n    else : \n        return False \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n % 2 == 1: \n        return True \n    else : \n        return False \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n % 2 == 1: \n        return True \n    else : \n        return False \ndef is_Zero(n) : \n    '''\n    Write a python function to check whether the given number is zero or not.\n    '''\n    if n == 0 : \n        return True \n    else : \n        return False \ndef is_Zero(n) : \n    '''\n    Write a python function to check whether the given number is zero or not.\n    '''\n    if n == 0: \n        return True \n    else : \n        return False \ndef is_One(n) : \n    '''\n    Write a python function to check whether the given number is one or not.\n    '''\n    if n == 1: \n        return True \n    else : \n        return False \ndef is_One(n) : \n    '''\n    Write a python function to check whether the given number is one or not.\n    '''\n    if n == 1: \n        return True \n    else : \n        return False \ndef is_Three(n) : \n    '''\n    Write a python function to check whether the given number is three or not.\n    '''\n    if n == 3: \n        return True \n    else : \n        return False \ndef is_Three(n) : \n    '''\n    Write a python function to check whether the given number is three or not.\n    '''\n    if n == 3: \n        return True \n    else : \n        return False \ndef is_Four(n) : \n    '''\n    Write a python function to check whether the given number is four or not.\n    '''\n    if n == 4: \n        return True \n    else : \n        return False \ndef is_Four(n) : \n    '''\n    Write a python function to check whether the given number is four or not.\n    '''\n    if n == 4: \n        return True \n    else : \n        return False \ndef is_Five(n) : \n    '''\n    Write a python function to check whether the given number is five or not.\n    '''\n    if n == 5: \n        return True \n    else : \n        return False \ndef is_Five(n) : \n    '''\n    Write a python function to check whether the given number is five or not.\n    '''\n    if n == 5: \n        return True \n    else : \n        return False \ndef is_Six(n) : \n    '''\n    Write a python function to check whether the given number is six or not.\n    '''\n    if n == 6: \n        return True \n    else : \n        return False \ndef is_Six(n) : \n    '''\n    Write a python function to check whether the given number is six or not.\n    '''\n    if n == 6: \n        return True \n    else : \n        return False \ndef is_Seven(n) : \n    '''\n    Write a python function to check whether the given number is seven or not.\n    '''\n    if n == 7: \n        return True \n    else : \n        return False \ndef is_Seven(n) : \n    '''\n    Write a python function to check whether the given number is seven or not.\n    '''\n    if n == 7: \n        return True \n    else : \n        return False \ndef is_Eight(n) : \n    '''\n    Write a python function to check whether the given number is eight or not.\n    '''\n    if n == 8: \n        return True \n    else : \n        return False \ndef is_Eight(n) : \n    '''\n    Write a python function to check whether the given number is eight or not.\n    '''\n    if n == 8: \n        return True \n    else : \n        return False \ndef is_Nine(n) : \n    '''\n    Write a python function to check whether the given number is nine or not.\n    '''\n    if n == 9: \n        return True \n    else : \n        return False \ndef is_Nine(n) : \n    '''\n    Write a python function to check whether the given number is nine or not.\n    '''\n    if n == 9: \n        return True \n    else : \n        return False \ndef is_Ten(n) : \n    '''\n    Write a python function to check whether the given number is ten or not.\n    '''\n    if n == 10: \n        return True \n    else : \n        return False \ndef is_Ten(n) : \n    '''\n    Write a python function to check whether the given number is ten or not.\n    '''\n    if n == 10: \n        return True \n    else : \n        return False \ndef is_Eleven(n) : \n    '''\n    Write a python function to check whether the given number is eleven or not.\n    '''\n    if n == 11: \n        return True \n    else : \n        return False \ndef is_Eleven(n) : \n    '''\n    Write a python function to check whether the given number is eleven or not.\n    '''\n    if n == 11: \n        return True \n    else : \n        return False \ndef is_Twelve(n) : \n    '''\n    Write a python function to check whether the given number is twelve or not.\n    '''\n    if n == 12: \n        return True \n    else : \n        return False \ndef is_Twelve(n) : \n    '''\n    Write a python function to check whether the given number is twelve or not.\n    '''\n    if n == 12: \n        return True \n    else : \n        return False \ndef is_Thirteen(n) : \n    '''\n    Write a python function to check whether the given number is thirteen or not.\n    '''\n    if n == 13: \n        return True \n    else : \n        return False \ndef is_Thirteen(n) : \n    '''\n    Write a python function to check whether the given number is thirteen or not.\n    '''\n    if n == 13: \n        return True \n    else : \n        return False \ndef is_Fourteen(n) : \n    '''\n    Write a python function to check whether the given number is fourteen or not.\n    '''\n    if n == 14: \n        return True \n    else : \n        return False \ndef is_Fourteen(n) : \n    '''\n    Write a python function to check whether the given number is fourteen or not.\n    '''\n    if n == 14: \n        return True \n    else : \n        return False \ndef is_Fifteen(n) : \n    '''\n    Write a python function to check whether the given number is fifteen or not.\n    '''\n    if n == 15: \n        return True \n    else : \n        return False \ndef is_Fifteen(n) : \n    '''\n    Write a python function to check whether the given number is fifteen or not.\n    '''\n    if n == 15: \n        return True \n    else : \n        return False \ndef is_Sixteen(n) : \n    '''\n    Write a python function to check whether the given number is sixteen or not.\n    '''\n    if n == 16: \n        return True \n    else : \n        retur"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n    \n    \n    #Write your function here\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n % 2!= 0 : \n        return True\n    else : \n        return False\ndef calculate_factorial(n) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1) : \n        factorial *= i\n    return factorial\ndef factorial(n) :\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef calculator(a,b) :\n    '''\n    Write a python function to calculate the sum of two numbers using math module.\n    '''\n    return str(math.add(a,b))\n    \ndef addition(n, a) : \n    '''\n    Write a python function to calculate the sum of two numbers using math module.\n    '''\n    return str(math.add(n, a))\ndef subtraction(n, a) : \n    '''\n    Write a python function to calculate the sum of two numbers using math module.\n    '''\n    return str(math.sub(n, a))\ndef multiplication(n, a) : \n    '''\n    Write a python function to calculate the sum of two numbers using math module.\n    '''\n    return str(math.mul(n, a))\ndef division(n, a) : \n    '''\n    Write a python function to calculate the sum of two numbers using math module.\n    '''\n    return str(math.div(n, a))\ndef square(n) : \n    '''\n    Write a python function to calculate the square of a given number using math module.\n    '''\n    return str(math.sqrt(n))\ndef squareroot(n) : \n    '''\n    Write a python function to calculate the square root of a given number using math module.\n    '''\n    return str(math.sqrt(n))\ndef remainder(n, a) : \n    '''\n    Write a python function to calculate the remainder of a given number using math module.\n    '''\n    return str(math.remainder(n, a))\ndef sum(n, a) : \n    '''\n    Write a python function to calculate the sum of two numbers using math module.\n    '''\n    return str(math.add(n, a))\ndef subtract(n, a) : \n    '''\n    Write a python function to calculate the sum of two numbers using math module.\n    '''\n    return str(math.sub(n, a))\ndef mul(n, a) : \n    '''\n    Write a python function to calculate the sum of two numbers using math module.\n    '''\n    return str(math.mul(n, a))\ndef divide(n, a) : \n    '''\n    Write a python function to calculate the sum of two numbers using math module.\n    '''\n    return str(math.div(n, a))\ndef square(n) : \n    '''\n    Write a python function to calculate the square of a given number using math module.\n    '''\n    return str(math.sqrt(n))\ndef squareroot(n) : \n    '''\n    Write a python function to calculate the square root of a given number using math module.\n    '''\n    return str(math.sqrt(n))\ndef mod(n, a) : \n    '''\n    Write a python function to calculate the remainder of a given number using math module.\n    '''\n    return str(math.remainder(n, a))\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    if n == n[::-1] :\n        return True\n    else : \n        return False\ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of a given number using math module.\n    '''\n    return str(math.factorial(n))\ndef factorial_recursive(n) : \n    '''\n    Write a python function to calculate the factorial of a given number using math module.\n    '''\n    if n == 1 : \n        return n\n    return n * factorial_recursive(n-1)\ndef gcd(n, a) : \n    '''\n    Write a python function to calculate the greatest common divisor of two given numbers using math module.\n    '''\n    if n == 0: \n        return a\n    return gcd(n % a, a)\ndef mod_inverse(n, a) : \n    '''\n    Write a python function to calculate the modular multiplicative inverse of a given number using math module.\n    '''\n    if n == 1 : \n        return 0\n    return mod_inverse(n%a,a)\ndef mod_add(n, a) : \n    '''\n    Write a python function to calculate the modular addition of two given numbers using math module.\n    '''\n    return str(math.add(a,n))\ndef mod_mul(n, a) : \n    '''\n    Write a python function to calculate the modular multiplication of two given numbers using math module.\n    '''\n    return str(math.mul(a,n))\ndef mod_div(n, a) : \n    '''\n    Write a python function to calculate the modular division of two given numbers using math module.\n    '''\n    return str(math.div(a,n))\ndef mod_sqrt(n) : \n    '''\n    Write a python function to calculate the modular square root of a given number using math module.\n    '''\n    return str(math.sqrt(n))\ndef mod_inverse(n, a) : \n    '''\n    Write a python function to calculate the modular multiplicative inverse of a given number using math module.\n    '''\n    if n == 1: \n        return 0\n    return mod_inverse(n%a,a)\ndef mod_add(n, a) : \n    '''\n    Write a python function to calculate the modular addition of two given numbers using math module.\n    '''\n    return str(math.add(a,n))\ndef mod_mul(n, a) : \n    '''\n    Write a python function to calculate the modular multiplication of two given numbers using math module.\n    '''\n    return str(math.mul(a,n))\ndef mod_div(n, a) : \n    '''\n    Write a python function to calculate the modular division of two given numbers using math module.\n    '''\n    return str(math.div(a,n))\ndef mod_sqrt(n) : \n    '''\n    Write a python function to calculate the modular square root of a given number using math module.\n    '''\n    return str(math.sqrt(n))\ndef mod_inverse(n, a) : \n    '''\n    Write a python function to calculate the modular multiplicative inverse of a given number using math module.\n    '''\n    if n == 1: \n        return 0\n    return mod_inverse(n%a,a)\ndef mod_add(n, a) : \n    '''\n    Write a python function to calculate the modular addition of two given numbers using math module.\n    '''\n    return str(math.add(a,n))\ndef mod_mul(n, a) : \n    '''\n    Write a python function to calculate the modular multiplication of two given numbers using math module.\n    '''\n    return str(math.mul(a,n))\ndef mod_div(n, a) : \n    '''\n    Write a python function to calculate the modular division of two given numbers using math module.\n    '''\n    return str(math.div(a,n))\ndef mod_sqrt(n) : \n    '''\n    Write a python function to calculate the modular square root of a given number using math module.\n    '''\n    return str(math.sqrt(n))\ndef mod_i"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code here\n    return str1.find(str1[0])\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return \" \"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # make a dictionary with the frequency of each character\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    dict1 = {'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'H':0,'I':0,'J':0,'K':0,'L':0,'M':0,'N':0,'O':0,'P':0,'Q':0,'R':0,'S':0,'T':0,'U':0,'V':0,'W':0,'X':0,'Y':0,'Z':0}\n    for char in str1:\n        dict1[char] += 1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = {}\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = dict()\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in list(count.values()):\n        if i == 1:\n            return i\n    \nif __name__ == '__main__':\n    # Check correctness\n    str1 = 'abcde'\n    res = first_repeated_char(str1)\n    print(f'First Repeated char: {res}')\n    str1 = 'aabb'\n    res = first_repeated_char(str1)\n    print(f'First Repeated char: {res}')\n    str1 = 'abcabc'\n    res = first_repeated_char(str1)\n    print(f'First Repeated char: {res}')\n    str1 = 'abcdef'\n    res = first_repeated_char(str1)\n    print(f'First Repeated char: {res}'"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return ''.join(set(str1) & set(str1.lower()))\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    l = len(str1)\n    if l==0:\n        return -1\n    elif l==1:\n        return 0\n    else:\n        return str1[0]\n    \nprint(first_repeated_char('abc'))\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count_char=dict()\n    for ch in str1:\n        if ch in count_char:\n            count_char[ch] += 1\n        else:\n            count_char[ch]=1\n    for key in count_char:\n        if count_char[key] == 1:\n            return key\n    return \"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # complete the function\n    # complete the function\n    first_repeated = ''\n    first_repeated = str1[0]\n    if len(str1) > 1:\n        for i in str1[1:]:\n            if str1.count(i) > 1:\n                first_repeated = i\n    return first_repeated\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucas = [i for i in range(n)]\n    for i in lucas:\n        if i<n:\n            if lucas[i]+1>n:\n                lucas[i]+1\n            else:\n                lucas[i]+=1\n    return lucas\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if i<=4:\n            lucid.append(i)\n        else:\n            if len(lucid)<n:\n                lucid.append(i)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            lucids.append(i)\n        else:\n            if i == int(i/2):\n                lucids.append(i)\n    return lucids\n    \ndef get_minimum_ludic(n):\n    '''\n    Write a function to get all ludic numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            ludic.append(i)\n        else:\n            if i == int(i/2):\n                ludic.append(i)\n    return min(ludic)\n    \ndef get_ludic(n):\n    '''\n    Write a function to get all lucids numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            lucids.append(i)\n        else:\n            if i == int(i/2):\n                lucids.append(i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        raise Exception('Must provide a positive integer')\n    if n < 5:\n        return n\n    d = {}\n    for i in range(4, n+1):\n        if i%10 in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    return sum(d.values())\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        return []\n    ludic = []\n    for i in range(1, n+1):\n        if i < 100:\n            ludic.append(i)\n        elif i % 5 == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def luc(n):\n        if n == 1 or n == 0:\n            return 1\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    sol=[]\n    for i in range(1,n+1):\n        if i<=n:\n            sol.append(i)\n    return sol\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc = list(range(1, n + 1))\n    for i in luc:\n        if i % 2 == 1:\n            if i < 5:\n                print(i, end=' ')\n            else:\n                print(i, end=',')\n        else:\n            print(i, end=',')\n        print()\n    print()\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1,n+1):\n        if i<=7:\n            ludic_list.append(i)\n        else:\n            ludic_list.append(i-7)\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i <= n:\n            ludic.append(i)\n        else:\n            break\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(list(reversed(s.split())))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    r_s = list(s.split(\" \"))\n    r_s.reverse()\n    return \" \".join(r_s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0: return s\n    elif len(s) == 1: return s[0].upper() + s[1:]\n    else: return s[0] + reverse_words(s[1:])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word_list = s.split()\n    reverse_word_list = []\n    for word in word_list:\n        reverse_word_list.append(word[::-1])\n    return''.join(reverse_word_list)"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    return''.join(word for word in s.split()).lower()\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    import re\n    regex = r'(\\w+)'\n    words = re.findall(regex, s)\n    for word in words:\n        first_word = word[0].upper()\n        if first_word == 'A':\n            return s[::-1].replace(word, word.upper())\n        else:\n            return s[::-1].replace(word, word.lower())\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #loop through each word\n    new_word = \"\"\n    for i in range(0, len(s)):\n        #if the word ends with a space\n        if s[i] == \" \":\n            #append the word to the end of the string\n            new_word += s[i]\n        #if it has a space, then it is a new word\n        else:\n            #append the current word to the end of the string\n            new_word += s[i] + \" \"\n    #return the result\n    return new_word\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # your code goes here\n    # check if the string is empty or not\n    if s == \"\":\n        return \"\"\n    # return the string as a list in reverse order\n    # if s is not empty\n    # use reversed string to reverse the elements in string\n    s = s.split()\n    s = \"\".join(reversed(s))\n    return s\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    rev=''\n    for i in range(len(s)):\n        rev = rev + s[i]\n        if i!= len(s)-1:\n            rev = rev +''\n    return rev\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def swap(s, n1, n2):\n        s = s.split(' ')\n        s[n1], s[n2] = s[n2], s[n1]\n        return''.join(s)\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num<=1:\n        return False\n    if num==2 or num==3:\n        return True\n    if num%2==0 or num%3==0:\n        return False\n    i=5\n    while i*i<=num:\n        if num%i==0 or num%(i+2)==0:\n            return False\n        i+=6\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    #base case\n    if num == 2 or num == 3:\n        return True\n    #check if the given number is divisible by itself\n    if (num % 2 == 0) or (num % 3 == 0):\n        return False\n    #check if the given number is divisible by any number other than 2 and 3\n    return prime_num(num // 2) and not prime_num(num // 3)\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Define a check function for prime numbers.\n    def check(x):\n        if x == 1 or x == 2:\n            return False\n        if x%2 == 0 or x%3 == 0:\n            return False\n        for i in range(5, int(x**0.5)+1, 6):\n            if x%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Corner cases\n    if num <= 2:\n        return False\n    if num == 2:\n        return True\n    if num <= 5:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==1:\n        return False\n    \n    if num==2:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    #if is_prime_num is a boolean, then return True\n    is_prime_num = True\n    \n    #for every number in a list (1, 2, 3, etc)\n    for num in range(2, num):\n        \n        #if the number is divisible by any number in the list, then it is not prime\n        if num % num_list[num]!= 0:\n            is_prime_num = False\n            \n    #return the boolean\n    return is_prime_num\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n        \ndef test_prime_num():\n    '''\n    Test the function defined above.\n    '''\n    assert prime_num(10) == True\n    assert prime_num(0) == True\n    assert prime_num(1) == False\n    assert prime_num(4) == True\n    assert prime_num(99) == True\n    assert prime_num(9.9) == True\n    assert prime_num(1000) == True\n    assert prime_num(4.3) == False\n    assert prime_num(13.2) == True\n    assert prime_num(5) == False\n    assert prime_num(101) == False\n    assert prime_num(100.0) == False\n    assert prime_num(100.5) == False\n    assert prime_num(9.999) == False\n    assert prime_num(9.9999999999999998) == False\n    assert prime_num(99999999999999999998) == False\n    assert prime_num(9999999999999999978) == False\n    assert prime_num(9999999999999999973) == False\n    assert prime_num(9999999999999999973.0) == False\n    assert prime_num(9999999999999999973.0001) == False\n    assert prime_num(9999999999999999973.9999999) == False\n    assert prime_num(9999999999999999973.9999999.000001) == False\n    assert prime_num(9999999999999999973.9999999.999999999) == False\n    assert prime_num(9999999999999999973.9999999.999999999.9999999) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # if num is 0 or 1:\n    if num == 0 or num == 1:\n        return False\n    # if num is 2 or 3:\n    if num == 2 or num == 3:\n        return True\n    # if num is 2, 3 or 5:\n    if num == 2 or num == 3 or num == 5:\n        return True\n    # if num is less than 2 or 3:\n    if num < 2 or num < 3:\n        return False\n    # if num is 2, 3, or 5 and less than 11:\n    if num < 10 or num > 110:\n        return False\n    # if num is 10:\n    if num == 10:\n        return True\n    # if num is 11:\n    if num == 11:\n        return True\n    # if num is > 101:\n    if num > 100:\n        return False\n    # if num > 100 and num < 101:\n    if num > 100 and num < 101:\n        return True\n    # if num is 10,11 or 101:\n    if num == 10 or num == 11:\n        return True\n    # if num is 101 or 10:\n    if num == 101 or num == 10:\n        return False\n    # if num is greater than 1:\n    if num > 1:\n        return True\n    # if num is 0:\n    if num == 0:\n        return False\n    # return false\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 3.14159\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0 or degree is None:\n        return 0.0\n    else:\n        return degree * (180.0 / math.pi)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians\ndef dist_2d(lat1, lon1, lat2, lon2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    lat1 = radian_degree(lat1)\n    lon1 = radian_degree(lon1)\n    lat2 = radian_degree(lat2)\n    lon2 = radian_degree(lon2)\n    dist = math.sqrt((lat2 - lat1)**2 + (lon2 - lon1)**2)\n    return dist\ndef get_latitude(longitude):\n    '''\n    Return latitude from longitude.\n    '''\n    latitude = math.radians(longitude)\n    return latitude\ndef get_longitude(latitude):\n    '''\n    Return longitude from latitude.\n    '''\n    longitude = math.degrees(latitude)\n    return longitude\ndef get_degree(latitude, longitude):\n    '''\n    Return latitude and longitude in degrees.\n    '''\n    latitude = radian_degree(latitude)\n    longitude = radian_degree(longitude)\n    return latitude, longitude\ndef get_degree_2d(lat, lon):\n    '''\n    Return latitude and longitude in degrees.\n    '''\n    latitude = radian_degree(lat)\n    lon = radian_degree(lon)\n    return latitude, lon\ndef lat_lon_to_degree(lat_lon, units='rad'):\n    '''\n    Return latitude and longitude in degrees.\n    '''\n    latitude = lat_lon[0]\n    lon = lat_lon[1]\n    if units == 'rad':\n        return radian_degree(latitude), radian_degree(lon)\n    elif units == 'deg':\n        return radian_degree(latitude), radian_degree(lon) * 180 / math.pi\ndef lat_lon_to_degree_2d(lat_lon, units='rad'):\n    '''\n    Return latitude and longitude in degrees.\n    '''\n    latitude = lat_lon[0]\n    lon = lat_lon[1]\n    if units == 'rad':\n        return radian_degree(latitude), radian_degree(lon)\n    elif units == 'deg':\n        return radian_degree(latitude), radian_degree(lon) * 180 / math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree *(math.pi)/180\n    return degree\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    start = result.start()\n    end = result.end()\n    return start, end, result.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    start = 0\n    end = len(text)\n    matching = regex.findall(text)\n    if matching:\n        start, end = matching[0]\n    return start, end, len(matching), start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #    ---    ---    ---    ---\n    #    ---    ---    ---    ---\n    #    ---    ---    ---    ---\n    #    ---    ---    ---    ---\n    #    ---    ---    ---    ---\n    #    ---    ---    ---    ---\n    #    ---    ---    ---    ---\n    #    ---    ---    ---    ---\n    #    ---    ---    ---    ---\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        start, end = match.span()\n        return text[start:end], start, end\n    return None, 0, len(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text, re.MULTILINE)\n    start = 0\n    end = len(text)-1\n    #print(result)\n    for match in result:\n        start = match[0]\n        end = match[1]\n        #print(start, end)\n        if start >= end:\n            start = end\n            end = len(text)-1\n            #print(start, end)\n    return result, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    result = re.search(pattern, text)\n    start = result.start()\n    end = result.end()\n    return text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_re = re.compile(pattern)\n    result = pattern_re.findall(text)\n    return result\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.findall(pattern, text)\n    return match\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    start = match.start()\n    end = match.end()\n    return start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # search for a pattern in the text\n    matches = re.findall(pattern, text)\n    # if there are matches\n    if len(matches) > 0:\n        # if there is a match\n        if len(matches[0]) > 0:\n            # if the regex matches, get the last match and return it\n            matches_last = matches[len(matches)-1]\n            return matches_last, len(matches_last), len(matches_last) - 1\n        # otherwise, return None\n        else:\n            # otherwise, just return None\n            return None\n    # otherwise, return None\n    else:\n        return None\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n<=1: \n        return n \n    nth_bell_number = (n-1) * (n-2) \n    return nth_bell_number "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    # Number of steps required to reach the nth-brood\n    steps = int(math.log(n, 3)) + 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n > 1: \n        for i in range(n-1): \n            print(i+1, end ='') \n        print(n) \n        n = n - 1 \n    else: \n        print(n) \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = int(n)\n    def BinarySearch(l, r, n):\n        while l <= r:\n            mid = l + (r - l) // 2\n            if n < mid:\n                r = mid - 1\n            elif n > mid:\n                l = mid + 1\n            else:\n                return mid\n        return -1\n    return BinarySearch(0, n, n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    result = []\n    for i in range(2,n+1):\n        result.append(i)\n    for i in range(len(result)):\n        if(result[i] % 2 == 0):\n            result[i] = result[i] // 2\n        else:\n            result[i] = 3 * result[i] + 1\n    return result[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    fib = [0,1]\n    for i in range(1,n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    a = int(input(\"Enter a number: \"))\n    i = 1\n    while(i <= n):\n        print(\"%d) %d\" %(i,a), end = \" \")\n        i += 1\n    print(\"\\nThe nth number is\",end=\" \")\n    return (a)"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #Write your code here\n    if n<=0: \n        return 0\n    if n==1: \n        return 1\n    if n%2==0: \n        return bell_Number(n//2) + bell_Number(n//2)\n    if n%3==0: \n        return bell_Number(n//3) + bell_Number(n//3) + bell_Number(n//3)\n    else: \n        return (bell_Number(n//3)+bell_Number(n//3)+bell_Number(n//3))+bell_Number(n//3)\n    return"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int(math.factorial(n))\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [list1[i] for i in range(len(list1)) if i!= L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L==None or len(list1)==0:\n        return None\n    elif len(list1)==1:\n        return list1\n    else:\n        return remove_kth_element(list1[:L//2], L) + remove_kth_element(list1[L//2:], L)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # replace this with your code\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L1 = []\n    for i in range(0, len(list1)):\n        if i < L:\n            L1.append(list1[i])\n    return L1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if not list1:\n        return []\n    \n    if not L:\n        return []\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    kth = L[-1]\n    list1.pop(-1)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1)\n    return_list = []\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list()\n    for i in range(len(list1)):\n        if i < L:\n            list2.append(list1[i])\n        else:\n            break\n    return list2\n        "
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    i = 0\n    while (i < N):\n        j = 0\n        max_value = -100\n        while (j < N):\n            if test_list[i][j] > max_value:\n                max_value = test_list[i][j]\n            j = j + 1\n        i = i + 1\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    return test_list[n-1][n-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_column = []\n    for j in range(len(test_list)):\n        row = test_list[j]\n        for i in range(len(row)):\n            if i==0:\n                temp = row[0]\n                row[i] = temp\n            if i==len(row)-1:\n                temp = row[len(row)-1]\n                row[len(row)-1] = temp\n            if row[i] > temp:\n                temp = row[i]\n                row[i] = temp\n        max_of_column.append(row[0])\n    return max_of_column\n    \ntest_list1 = [[1,2,3],[4,5,6],[7,8,9]]\nprint(max_of_nth(test_list1,2))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_ = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        max_ = max(max_, test_list[i][N-1])\n    return max_\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return test_list[0][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[:N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key = lambda x : x[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    assert(type(test_list) == list)\n    assert(len(test_list) > 0)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list)==1:\n        return test_list[0][N-1]\n    else:\n        return max_of_nth(test_list[0], N-1) + test_list[0][N-1]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = []\n    for l in lst:\n        l = list(l)\n        l[0], l[1] = l[1], l[0]\n        lst.append(tuple(l))\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if(len(lst) == 0):\n        return []\n    else:\n        newLst = []\n        for i in range(len(lst)):\n            newLst.append(lst[i][0])\n        return newLst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    answer = []\n    \n    for i in lst:\n        for j in i:\n            answer.append(j)\n    return answer"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[0][0],lst[1][1]] for lst in zip(*lst)]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    mid = len(lst)//2\n    return merge(lst[:mid]) + [lst[mid]] + merge(lst[mid+1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2 = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == 1:\n                lst2.append([lst[i][0], lst[i][1]])\n    return lst2\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # YOUR CODE HERE\n    if len(lst) == 0:\n        return []\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) > 1:\n        # create two empty lists\n        a = []\n        b = []\n        # convert sublists to lists\n        for i in range(len(lst)):\n            a.append(lst[i][0])\n            b.append(lst[i][1])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    output = []\n    for i in lst:\n        output.append(i[:1] + i[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    for i in range(len(lst)):\n        lst[i].sort()\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0]])\n        result.append([lst[i][1]])\n    return result\ndef flatten(lst):\n    '''\n    Write a python function which takes a list, and returns a new list where all elements in the original list have been flattened into single elements.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.extend(lst[i])\n    return result\ndef count_odd(lst):\n    '''\n    Write a python function which takes a list, and returns a list where the odd numbers appear in the same order as the original list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            result.append(lst[i])\n    return result\ndef is_leap(year):\n    '''\n    Write a python function which takes a year, and returns True if the year is a leap year and False if it is not.\n    '''\n    result = False\n    if year % 400 == 0 or (year % 4 == 0 and year % 100!= 0):\n        result = True\n    if result == False:\n        result = year % 4 == 0 and year % 100!= 0\n    return result\ndef is_power_of_two(n):\n    '''\n    Write a python function which takes an integer n and returns True if it is a power of two and False if not.\n    '''\n    result = False\n    if n == 0:\n        result = True\n    elif n & (n - 1) == 0:\n        result = True\n    return result\ndef reverse(lst):\n    '''\n    Write a python function which takes a list and returns a new list where the elements in the original list have been reversed.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[len(lst) - i - 1])\n    return result\ndef max_even(lst):\n    '''\n    Write a python function which takes a list and returns the maximum even number.\n    '''\n    result = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            result.append(lst[i])\n    return max(result)\ndef count_even(lst):\n    '''\n    Write a python function which takes a list and returns the number of even numbers in the list.\n    '''\n    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            result += 1\n    return result\ndef fibonacci(n):\n    '''\n    Write a python function which takes an integer n and returns the nth Fibonacci number.\n    '''\n    result = []\n    a = 0\n    b = 1\n    if n <= 1:\n        return n\n    else:\n        for i in range(n-1):\n            a, b = b, a + b\n            result.append(b)\n        return result[-1]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    test_list_array = []\n    for element in test_list:\n        test_list_array.append(element)\n    test_list_array.append(0)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for val in test_list:\n        cummulative_sum += val\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for element in test_list:\n        cummulative_sum += element\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = 0\n    for value in test_list:\n        cummulative += value\n    return cummulative\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # COMPLETE THIS FUNCTION\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for item in test_list:\n        for i in range(0, len(item)):\n            cumulative_sum.append(item[i])\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for x in test_list:\n        cum_sum += x\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return reduce(lambda x, y: x + y, test_list, 0)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_sum = 0\n    for el in nums:\n        tuple_sum += el\n    return [el/len(nums) for el in tuple_sum]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    from functools import reduce\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for n in nums:\n        total.append(sum(n)/len(n))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # convert tuples to list\n    list1 = [tuple(i) for i in nums]\n    # get sum of each tuple\n    sum = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            sum += list1[i][j]\n    \n    # convert list to string\n    string = ','.join([str(i) for i in list1])\n    \n    # return average\n    return (sum/len(list1))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg_list.append(round(sum(nums[i])/len(nums[i]),2))\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in range(len(nums)):\n        total.append(nums[i][0])\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    \n    for num in nums:\n        for i in num:\n            total.append(i)\n    \n    return total\n    \n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums = list(nums)\n    total = 0\n    for element in nums:\n        total += element\n    return total/len(nums)\n    \n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    list_average = []\n    \n    for i in nums:\n        for x in i:\n            list_average.append(x)\n            \n    return list_averag"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        t = (sum(i)/len(i))\n        avg_list.append(t)\n    return avg_list\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # list of values of first tuple\n    tuple_1 = test_tup1[:]\n    # list of values of second tuple\n    tuple_2 = test_tup2[:]\n    # list of values of all elements of both tuples\n    tuple_3 = test_tup1 + test_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # TODO: use the tuple to test if the tuple and tuple is the same length and a modulo\n    if len(test_tup1)!= len(test_tup2):\n        return 'Modulo of tuples should be same length'\n    else:\n        return tuple(modulo_elementwise(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1_1 = test_tup1[0] % test_tup1[1]\n    test_tup1_2 = test_tup1[0] % test_tup1[2]\n    test_tup1_3 = test_tup1[0] % test_tup1[3]\n    test_tup1_4 = test_tup1[0] % test_tup1[4]\n    test_tup1_5 = test_tup1[0] % test_tup1[5]\n    test_tup1_6 = test_tup1[0] % test_tup1[6]\n    test_tup1_7 = test_tup1[0] % test_tup1[7]\n    test_tup1_8 = test_tup1[0] % test_tup1[8]\n    test_tup1_9 = test_tup1[0] % test_tup1[9]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tuple1 = tuple(test_tup1)\n    tuple2 = tuple(test_tup2)\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] % tuple2[i]\n    return tuple1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tup1 = tuple([x % y for x in test_tup1 for y in test_tup2])\n    mod_tup2 = tuple([x % y for x in test_tup2 for y in test_tup1])\n    mod_tup3 = tuple([x % y for x in test_tup1 for y in test_tup2])\n    mod_tup4 = tuple([x % y for x in test_tup2 for y in test_tup1])\n    print(mod_tup1)\n    print(mod_tup2)\n    print(mod_tup3)\n    print(mod_tup4)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuple sizes do not match\"\n    elif len(test_tup1) == 0:\n        return \"tuple is empty\"\n    else:\n        mod_list = [num % 2 for num in test_tup1]\n        mod_tup = tuple(mod_list)\n        return mod_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(test_tup1[i] % test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # write your code here\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n        return tuple(test_tup1)\n    else:\n        raise Exception('Tuple does not have the same length')\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Tuple size must match'\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    assert len(tup1) == len(tup2), 'Tuple size must match'\n    assert tup1[0] % tup2[0] == 0, 'First element in tuple must be a multiple of the second'\n    assert tup1[-1] % tup2[-1] == 0, 'Last element in tuple must be a multiple of the second'\n    return tup1, tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # test_tup1 = (1,2,3)\n    # test_tup2 = (4,5,6)\n    # mod = tuple_modulo(test_tup1, test_tup2)\n    # print(mod)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #your code here\n    import numpy as np\n    global N\n    N = len(d)\n    m, n = np.meshgrid(range(N), range(N))\n    Jumps = np.zeros((N, N))\n    Jumps[m, n] = np.ones(N)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    elif steps == 0: \n        return 0\n    else: \n        return min_Jumps(steps - 1, d - 1) + min_Jumps(steps - 1, d) \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def map(x,y):\n        return(x-1, y-1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from collections import defaultdict\n    n = len(steps)\n    min_jump = n\n    if steps[d][0] == 0:\n        min_jump = 0\n        return min_jump\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from collections import deque\n    queue = deque([(0, 0)])\n    visited = set()\n    while queue:\n        x, y = queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if (nx, ny) not in visited:\n                visited.add((nx, ny))\n                if (nx, ny) == d:\n                    return steps\n                queue.append((nx, ny))\n    return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Add your code here\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    x = 0\n    y = 0\n    count = 0\n    \n    while x < d[0] and y < d[1]:\n        \n        if (steps - x) == y:\n            count += 1\n            x += 1\n        \n        elif (steps - x) > y:\n            count += 1\n            y -= 1\n            \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize the jump count\n    jumpCount = 0\n    \n    # Find a length that reaches the point on the grid\n    while d[0][0]!= 0:\n        \n        # Count the jumps until the point reaches the point on the grid\n        while not (d[0][0] == 0):\n            jumpCount = jumpCount + 1\n            d[0][0] = d[0][0] - 1\n        \n        # if you reached the end of the row\n        if d[0][0]!= 0:\n            jumpCount = jumpCount + 1\n            d[0][0] = d[0][0] - 1\n        \n        # if you reached the end of the column\n        if d[0][0]!= 0:\n            jumpCount = jumpCount + 1\n            d[0][0] = d[0][0] - 1\n    \n    # Return the number of jumps required\n    return jumpCount\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return steps == d + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    for i in range(d, len(steps)-d):\n        if steps[i+d] == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    def nested(nums,depth):\n        if depth == len(nums):\n            return nums\n        else:\n            return [nested(nums[depth],depth+1)] + nested(nums[depth+1:],depth+1)\n    \n    return nested(nums1,0)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if(len(nums1)!=len(nums2)):\n        return 'Input and Output should be same size'\n    else:\n        i=0\n        n=0\n        list1=[]\n        list2=[]\n        while(i<len(nums1)):\n            for j in range(len(nums1)):\n                if(nums1[j]==nums2[i]):\n                    list1.append(nums1[j])\n                    i=i+1\n                    n=n+1\n                    break\n        while(n>=len(nums2)):\n            for j in range(len(nums1)):\n                if(nums2[j]==nums1[i]):\n                    list2.append(nums2[j])\n                    i=i+1\n                    n=n+1\n                    break\n        return list1+list2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l1 = nums1.copy()\n    l2 = nums2.copy()\n    l1.sort()\n    l2.sort()\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #return [ (elem1/elem2) for elem1,elem2 in zip(nums1,nums2)]\n    return [ (i/j) for i,j in zip(nums1,nums2) ]\n    #divided list \n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Your code goes here\n    #convert both lists to integers\n    nums1=list(map(int,nums1))\n    nums2=list(map(int,nums2))\n    #divide the two lists by their values\n    nums1=list(map(lambda x:x/nums1[0],nums1))\n    nums2=list(map(lambda x:x/nums2[0],nums2))\n    return nums1,nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in nums1:\n        if i in nums2:\n            result.append(i)\n    return result\n    \ndef merge_lists(nums1,nums2):\n    '''\n    Write a function that merges two lists element wise.\n    '''\n    result = []\n    for i in range(0,len(nums1)):\n        for j in range(i+1,len(nums1)):\n            if nums1[i] > nums1[j] and nums2[i] > nums2[j]:\n                result.append(nums1[i])\n                result.append(nums2[j])\n                break\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums2)==0:\n        return []\n    \n    for i in range(len(nums2)):\n        nums2[i]=int(nums2[i])\n        \n    if nums1[0]!=nums2[0]:\n        return [nums1,nums2]\n    \n    else:\n        return list(zip(*(zip(*nums1),*nums2)))\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i=0\n    j=0\n    k=0\n    while i<len(nums1):\n        while j<len(nums2):\n            if nums1[i]==nums2[j]:\n                nums1[i],nums2[j]=nums2[j],nums1[i]\n                j=j+1\n            j=j+1\n        i=i+1\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # print(nums1,nums2)\n    l1=len(nums1)\n    l2=len(nums2)\n    i=0\n    j=0\n    if l1<l2:\n        return \"The lenght of the list is less than the length of the other list\"\n    else:\n        while i<l1 and j<l2:\n            if nums1[i]==nums2[j]:\n                j+=1\n                i+=1\n            else:\n                if nums1[i]<nums2[j]:\n                    j+=1\n                    i+=1\n                else:\n                    i+=1\n        if i==l1 and j==l2:\n            return True\n        else:\n            return False\n        \n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = test_str.split(\",\")\n    for i in range(len(num)):\n        num[i] = int(num[i])\n    return \",\".join(map(str, num))\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Your code here\n    res = \"\"\n    temp = \"\"\n    for i in test_str:\n        if i.isdigit():\n            temp += i\n        else:\n            res += i\n            if temp:\n                res += str(int(temp) + 1)\n                temp = \"\"\n    if temp:\n        res += str(int(temp) + 1)\n    return res\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = []\n    # check if num is not empty\n    if len(test_str) == 0:\n        return result\n    # start with 0\n    num = 0\n    # loop over all numbers\n    while num < len(test_str):\n        # check if number is not at the end of string\n        if test_str[num]!= \" \":\n            # add number to result\n            result.append(test_str[num])\n            # increment number of indices\n            num += 1\n        # increment number\n        num += 1\n    # return result\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return_str = ''\n    for num in test_str:\n        if num.isnumeric():\n            return_str += str(num)\n        else:\n            return_str += num\n    return return_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace('.'"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    while i < len(test_str):\n        if test_str[i] == '0':\n            test_str = test_str[:i] + '1' + test_str[i+1:]\n        else:\n            test_str = test_str[:i] + '0' + test_str[i+1:]\n        i += 1\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Write your code here\n    result = []\n    for num in test_str:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # your code goes here\n    return\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    test_str = test_str.replace(' ', '')\n    answer = ''\n    for i in range(len(test_str)):\n        answer += test_str[i]\n    return answer\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #Your code here\n    l=0\n    while l<len(a):\n        c=0\n        for i in a:\n            if i%a[c]==0:\n                c+=1\n        if c<len(a):\n            l+=1\n    return l\n    \na=[1,2,3,4,5]\nprint(largest_subset(a)"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if a==[]:\n        return 0\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i]%a[j]==0:\n                break\n        else:\n            return len(a)-1\n    return len(a)\n    "
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    i = 0\n    j = 1\n    max_subset = 0\n    s = list(set(a))\n    \n    while(j<len(a)):\n        if a[i] % s[j] == 0:\n            if len(a[i]) > max_subset:\n                max_subset = len(a[i])\n            i = i+1\n            j = j+1\n        else:\n            j = j+1\n    return max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subset = []\n    for i in range(len(a)):\n        subset.append(a[i])\n        for j in range(i+1, len(a)):\n            if a[j] % subset[i] == 0 and a[j] not in subset:\n                subset.append(a[j])\n    return len(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    d = {}\n    for i in a:\n        d[i] = 0\n    for i in a:\n        if i in d:\n            d[i] += 1\n    m = max(d.values())\n    for i in d:\n        if d[i] == m:\n            return i, a.count(i)\n    return None\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subset = []\n    max_subset = []\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = 0\n    curr = 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n <= 1:\n        return n\n    max_length = 0\n    curr_length = 1\n    for i in range(n):\n        if a[i] > curr_length:\n            curr_length = a[i]\n        if curr_length > max_length:\n            max_length = curr_length\n        curr_length += 1\n    return max_length\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Time - O(n**2)\n    # Space - O(1)\n    # where n is the length of the list and o(n) is the number of elements in the list\n    def largest_subset_length(a, n):\n        if n == 0 or n == 1:\n            return n\n        \n        # We find the maximum value in all the possible values\n        max_val = a[0]\n        for i in range(1, n):\n            max_val = max(max_val, a[i])\n        \n        # All possible values for a are divided by the maximum value\n        divider = n // max_val\n        \n        # We keep the original value and then we check if the value is divisible\n        for i in range(divider):\n            a[i] = a[i] / max_val\n            \n        # We return the value\n        return largest_subset_length(a, n-divider)\n    \n    return largest_subset_length(a, len(a))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    N=len(a)\n    dp=[[0]*N for i in range(N)]\n    for i in range(N):\n        for j in range(i,N):\n            if a[i]%a[j]==0:\n                dp[i][j]=1+dp[i][j-1]\n            else:\n                dp[i][j]=max(dp[i][j-1],dp[i][j])\n    return max(dp[N-1])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    #print(l1, l2)\n    if l1 == 0:\n        return 0\n    elif l2 == 0:\n        return 0\n    else:\n        if l1 == l2:\n            return (arr1[n//2] + arr2[n//2]) / 2\n        else:\n            if n % 2 == 0:\n                #print(l1, l2)\n                return (arr1[n//2] + arr2[n//2]) / 2\n            else:\n                #print(l1, l2)\n                return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n % 2) == 0:\n        return (arr1[int((n-1)/2)] + arr2[int((n-1)/2)])/2\n    else:\n        return arr1[int(n/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #get the middle value\n    mid = len(arr1)//2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1_sorted = sorted(arr1, reverse=True)\n    arr2_sorted = sorted(arr2, reverse=True)\n    n = len(arr1)\n    \n    if n%2 == 0:\n        middle = int((n + 1)/2)\n        if middle == 0:\n            return arr1_sorted[middle]\n        elif middle == 1:\n            return arr2_sorted[middle-1]\n        else:\n            return (arr1_sorted[middle-1]+arr1_sorted[middle])/2\n    else:\n        middle = int((n + 1)/2)\n        if middle == 0:\n            return arr2_sorted[middle]\n        elif middle == 1:\n            return arr1_sorted[middle]\n        else:\n            return (arr2_sorted[middle] + arr1_sorted[middle-1])/2\n        \n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0:\n        return -1\n    if len(arr2) == 0:\n        return -1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        return find_median(arr2, arr1, n)\n    elif len(arr1) == len(arr2):\n        return find_median(arr1, arr2, n)\n    else:\n        return None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    elif n == 2:\n        return arr1[0] if arr1[0] < arr2[0] else arr2[0]\n    else:\n        n1, n2 = n//2, n//2\n        m1, m2 = get_median(arr1[:n1], arr2[:n2], n1), get_median(arr1[:n1], arr2[:n2], n2)\n        m = (m1 + m2) // 2\n        return m if m1 == m2 else m1 if m1 == m2 else m2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr1[0]\n    return get_median(arr1[0:n // 2], arr2[0:n // 2], n // 2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return -1\n    arr1.sort()\n    arr2.sort()\n    return (arr1[len(arr1) // 2] + arr2[len(arr2) // 2]) / 2\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.sort()\n    nums.reverse()\n    res = [0]*n\n    for i in range(0,len(nums)):\n        res[i] = nums[i]**n\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # if n > len(nums):\n    #     return None\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(num,n) for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for i in range(len(nums)):\n        power *= nums[i]\n        nums[i] = power\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # code here\n    x = [1]*n\n    return [x[i]**n for i in range(n)]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    num_list=[]\n    for i in range(len(nums)):\n        num_list.append(nums[i]**(len(nums)-1-i))\n    return num_list\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0 or n > len(nums):\n        return []\n    if n == 1:\n        return nums\n    elif n == 2:\n        return [2, 3]\n    elif n % 2 == 0:\n        # This is to avoid using too much memory\n        return [2 * n, 3 * n]\n    else:\n        return [n * n, n * n + 1]\n    \ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_palindrome(n):\n    \"\"\"\n    Return whether n is palindrome.\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = [1]*len(nums)\n    for i in range(len(nums)):\n        power[i] = nums[i]**n\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # First n-1 terms of a sum are for the 2nd power of the original list.\n    return [num**2 for num in nums]\n    \nn = int(input())\nnums = list(map(int,input().split()))\nprint(nth_nums(nums,n))"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def pow(num, n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return num\n        return pow(num, n-1)\n    \n    result = []\n    for i in range(len(nums)):\n        result.append(pow(nums[i], n))\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) > 0:\n        return string.upper()\n    else:\n        return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Method not implemented')\n    return True\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    #raise NotImplementedError\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper() == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    swap = newList[0]\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    \ndef insertion_sort(newList):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(1,len(newList)):\n        key = newList[i]\n        j = i-1\n        while j>=0 and key < newList[j]:\n            newList[j+1] = newList[j]\n            j-=1\n        newList[j+1] = key\n        \n    return newList\n    \ndef bubble_sort(newList):\n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    for i in range(len(newList)-1,0,-1):\n        for j in range(i):\n            if newList[j] > newList[j+1]:\n                swap(newList[j],newList[j+1])\n                \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"swap_List: \")\n    new_list = newList[:len(newList)//2] + newList[len(newList)//2:]\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop(0)\n    newList.pop()\n    newList.append(newList[0])\n    newList.append(newList[-1])\n    return newList\n    \n    \nif __name__ == \"__main__\":\n    '''\n    Example:\n    \n    Input:\n    [\"CSC148\",\"DSA\"]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(len(newList)-1):\n        temp = newList[i]\n        newList[i] = newList[i+1]\n        newList[i+1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    swap = newList[0]\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return swap\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"The list must contain at least 2 elements\")\n        return None\n    else:\n        i = 0\n        j = 1\n        while i < len(newList) and j < len(newList):\n            newList[i], newList[j] = newList[j], newList[i]\n            i += 1\n            j += 1\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"The first element in the list is: \", newList[0])\n    print(\"The last element in the list is: \", newList[-1])\n    \n    for i in range(len(newList) - 1):\n        temp = newList[i]\n        newList[i] = newList[i + 1]\n        newList[i + 1] = temp\n    \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(newList)\n    for i in range(0, len(newList)): \n        item = newList[i] \n        newList[i] = newList[len(newList) - 1 - i] \n        newList[len(newList) - 1 - i] = item \n        print(newList)\n    return newList\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(0,len(newList)):\n        temp = newList[i]\n        newList[i]=newList[len(newList)-1]\n        newList[len(newList)-1]=temp\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r > 0 :\n        a = (4 * r) / 3\n        b = (1/3) * (1 + (r ** 2))\n        c = -(r)\n        area = (b*c) ** (1/2)\n        return area\n    else :\n        return 0"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    #Your code here\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #declare variables\n    side1 = 0\n    side2 = 0\n    side3 = 0\n    p = 0.5\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r < 0) :\n        print(\"A is negative\")\n        return\n    elif (r == 0) :\n        print(\"A is zero\")\n        return\n    elif (r == 0.5) :\n        print(\"A is zero\")\n        return\n    else :\n        d = 0\n        for i in range (1, r) :\n            if r%(i) == 0 :\n                d = d + r/i\n        if d < r/2 :\n            print(\"A is smaller than a/2\")\n        else :\n            print(\"A is bigger than a/2\")\n            return\n        area = r**2 * (4/3 - ((r**2 + (r**2) - 4*r*(r**2))**0.5))\n        print(\"The area of the triangle is : \" + str(area))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    import math\n    # assuming the square root of the square root of 2 is sqrt(2).\n    # You can use the sqrt function to get the square root of 2.\n    # If your formula is greater than 2, you will get an error message.\n    # If your formula is less than 2, you will get an error message.\n    # For example: if your formula is 1, you will get an error message.\n    # If your formula is negative, you will get an error message.\n    # If your formula is 0, you will get an error message.\n    # If your formula is perfect square, you will get an error message.\n    # If your formula is circle, you will get an error message.\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define triangle area function\n    def triangle_area(r) :\n        # Check if r is less than 0\n        if r <= 0 :\n            return 0\n        # Calculate area of triangle using formula\n        area = (r ** 2) * math.sqrt(1 - (r ** 2) + (2 * r * math.sqrt(1 - (r ** 2))))\n        # Return area of triangle\n        return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return round(math.sqrt(r**2-4*r*math.cos(math.pi/2-2*math.pi/3)-4),2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)*3.14\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import sqrt\n    def area(r) :  \n        '''\n        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        return r*r*3.141592653589793\n    def area(r) :\n        '''\n        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def side(r) :\n        '''\n        Write a python function to find the side of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        return r*r\n    def side(r) :\n        '''\n        Write a python function to find the side of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def height(r) :\n        '''\n        Write a python function to find the height of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        return 2*(r*r)\n    def height(r) :\n        '''\n        Write a python function to find the height of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def volume(r) :\n        '''\n        Write a python function to find the volume of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        return 4*pi*r*r\n    def volume(r) :\n        '''\n        Write a python function to find the volume of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def solid(r) :\n        '''\n        Write a python function to find the solidness of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        return r*r*3.141592653589793\n    def solid(r) :\n        '''\n        Write a python function to find the solidness of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def diameter(r) :\n        '''\n        Write a python function to find the diameter of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        return (r*r*3.141592653589793)**(1/2)\n    def diameter(r) :\n        '''\n        Write a python function to find the diameter of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def radius(r) :\n        '''\n        Write a python function to find the radius of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def vol(r) :\n        '''\n        Write a python function to find the volume of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        return (3.141592653589793*r*r*3.141592653589793)**(1/3)\n    def vol(r) :\n        '''\n        Write a python function to find the volume of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def volume_factor(r) :\n        '''\n        Write a python function to find the volume of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def solid_factor(r) :\n        '''\n        Write a python function to find the solidness of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def solid_factor(r) :\n        '''\n        Write a python function to find the solidness of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        from math import pi\n        if r>1 :\n            return r*r*3.141592653589793\n        else :\n            return 0\n    def main() :\n        '''\n        This is the main function of the program.\n        '''\n        print(\"Choose a number for the area or side:\")\n        print(\"A: Area of a triangle with a given radius\")\n        print(\"S: Side of a triangle\")\n        print(\"H: Height of a triangle\")\n        print(\"V: Volume of a triangle\")\n        print(\"S: Solidness of a triangle\")\n        print(\"D: Diameter of a triangle\")\n        print(\"R: Radius of a triangle\")\n        choice = input(\"Please choose a number:\")\n        if choice == 'A' or choice == 'a':\n            print(\"The area of the triangle is\", area(float(input(\"Please enter a radius: \"))))\n        elif choice == 'S' or choice =='s':\n            print(\"The area of the triangle is\", side(float(input(\"Please enter a radius: \"))))\n        elif choice == 'H' or choice == 'h':\n            print(\"The height of the triangle is\", height(float(input(\"Please enter a radius: \"))))\n        elif choice == 'V' or choice == 'v':\n            print(\"The volume of the triangle is\", volume(float(input(\"Please enter a radius: \"))))\n        elif choice == 'S' or choice =='s':\n            print(\"The solidness of the triangle is\", solid(float(input(\"Please enter a radius: \"))))\n        elif choice == 'D' or choice == 'd':\n            print(\"The diameter of the triangle is\", diameter(float(input(\"Please enter a radius: \"))))\n        elif choice == 'R' or choice == 'r':\n            print(\"The radius of the triangle is\", radius(float(input(\"Please enter a radius: \"))))\n        elif choice == 'V' or choice == 'v':\n            print(\"The volume of the triangle is\", vol(float(input(\"Please enter a radius: \"))))\n        elif choice == 'S' or choice =='s':\n            print(\"The solidness of the triangle is\", solid_factor(float(input(\"Please enter a radius: \"))))\n        elif choice == 'D' or choice == 'd':\n            print(\"The diameter of the triangle is\", diameter_factor(float(input(\"Please enter a radius: \"))))\n        else:\n            print(\"Please choose a number from A, S, H, V or S or D.\")\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end == 0:\n        return None\n    if start < end:\n        mid = (start + end) // 2\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start < 0:\n        start = 0\n    if end is None:\n        end = len(array) - 1\n    if end < 0:\n        end = len(array) - 1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    while(start<=end):\n        mid = start+(end-start)//2\n        if array[mid] > 0:\n            if array[mid] > mid+1:\n                return mid\n            if array[mid] == 0:\n                array[mid] = -1\n                array[mid+1] = -1\n                mid += 1\n                array[mid] == 1\n                array[mid-1] == 1\n                mid -= 1\n                end = mid\n            else:\n                mid += 1\n                end = mid\n        else:\n            if array[mid] == 0:\n                array[mid] = mid\n                array[mid-1] = mid\n                mid += 1\n                array[mid] == 1\n                array[mid+1] == 1\n                mid += 1\n                array[mid] == 0\n                end = mid\n            else:\n                end = mid\n    return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    while start < end:\n        mid = (start + end)//2\n        if array[mid] == mid:\n            end = mid\n        else:\n            start = mid+1\n    return array[start]\n    # Time complexity = O(n)\n    # Space complexity = O(1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    left = start\n    right = end\n    while left<right:\n        if array[left] + array[right] > array[right] - array[left]:\n            right-=1\n        elif array[left] + array[right]<= array[right] - array[left]:\n            left+=1\n        else:\n            return array[right]\n    return array[left]\ndef find_First_Missing_in_Sorted_Array(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted array.\n    '''\n    if end is None:\n        end = len(array)\n    \n    left = start\n    right = end\n    while left<right:\n        if array[left] + array[right] > array[right] - array[left]:\n            right-=1\n        elif array[left] + array[right]<= array[right] - array[left]:\n            left+=1\n        else:\n            return array[right]\n    return array[right]"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    i=start\n    j=end\n    while i<=j:\n        print(i,j)\n        if array[j]<array[j-1]:\n            array[i],array[j]=array[j],array[i]\n            i+=1\n            j-=1\n        else:\n            j-=1\n    return array[i]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end:\n        return start\n    if end is None:\n        end = len(array) - 1\n    if end - start < len(array):\n        return find_First_Missing(array,start,end)\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid + 1,end)\ndef modInverse(a, n):\n    if a < n:\n        return 0\n    if a % n == 0:\n        return 1\n    if a % n!= 0:\n        return 0\n    # find gcd\n    gcd = a//n\n    while gcd < n:\n        a, n = n, a % n\n        gcd = a//n\n    # find remainder\n    rem = a % n\n    while rem:\n        a = n\n        n = rem\n        rem = a//n\n    # find g\n    g = n\n    while g > 1:\n        a = n\n        n = a//g\n        a = a%n\n    if a == 1:\n        return g\n    else:\n        return g*n\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start >= end:\n        return -1\n    elif start==end:\n        if array[start]<=end:\n            return start\n        else:\n            return end\n    elif array[start]<array[start+1]:\n        return find_First_Missing(array,start,start+1)\n    elif array[start+1]<array[start]:\n        return find_First_Missing(array,start+1,end)\n    elif array[start]<=array[start+1]:\n        return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Write your code here\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for letter in string:\n        if letter =='':\n            new_string += '%20'\n        else:\n            new_string += letter\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    string = string.replace('  ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # TODO: Write your code here\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n    \n    \ndef print_even(list):\n    '''\n    Write a python function to print even numbers from a list of numbers.\n    '''\n    for i in list:\n        if i%2==0:\n            print(i, end=\" \")\n    print(\"\")\n    \n    \ndef print_odd(list):\n    '''\n    Write a python function to print odd numbers from a list of numbers.\n    '''\n    for i in list:\n        if i%2!=0:\n            print(i, end=\" \")\n    print(\"\")\n    \n    \ndef list_of_even_odd(list):\n    '''\n    Write a python function to print even and odd numbers from a list of numbers.\n    '''\n    for i in list:\n        if i%2==0:\n            print(i, end=\" \")\n    print(\"\")\n    \n    \ndef even_numbers(list):\n    '''\n    Write a python function to print even numbers from a list of numbers.\n    '''\n    for i in list:\n        if i%2==0:\n            print(i, end=\" \")\n    print(\"\")\n    \n    \ndef odd_numbers(list):\n    '''\n    Write a python function to print odd numbers from a list of numbers.\n    '''\n    for i in list:\n        if i%2!=0:\n            print(i, end=\" \")\n    print(\"\")\n    \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for element in list: \n        if element%2 == 0:\n            even_numbers.append(element)\n    print(even_numbers)\n    \n    \ndef Addition(a,b): \n    '''\n    Write a python function to add two numbers.\n    '''\n    addition = a + b\n    print(addition)\n    \n    \ndef Subtraction(a,b): \n    '''\n    Write a python function to subtract two numbers.\n    '''\n    subtraction = a - b\n    print(subtraction)\n    \n    \ndef Multiplication(a,b): \n    '''\n    Write a python function to multiply two numbers.\n    '''\n    multiplication = a * b\n    print(multiplication)\n    \n    \ndef Division(a,b): \n    '''\n    Write a python function to divide two numbers.\n    '''\n    division = a / b\n    print(division)\n    \n    \ndef Square(a): \n    '''\n    Write a python function to square two numbers.\n    '''\n    square = a ** 2\n    print(square)\n    \n    \ndef Square_Root(a): \n    '''\n    Write a python function to square a number.\n    '''\n    sqroot = a ** 0.5\n    print(sqroot)\n    \n    \ndef Average(a,b): \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    average = (a + b) / 2\n    print(average)\n    \n    \ndef Square_Root_of_Squares(a): \n    '''\n    Write a python function to find the square root of a number.\n    '''\n    sqroot = a ** 0.5\n    print(sqroot)\n    \n    \ndef Square_of_Squares(a): \n    '''\n    Write a python function to find the square of a number.\n    '''\n    square = a ** 2\n    print(square)\n    \n    \ndef Sum_of_Squares(a,b): \n    '''\n    Write a python function to find the sum of squares of two numbers.\n    '''\n    sum = a + b\n    print(sum)\n    \n    \ndef Cube_of_Cube(a): \n    '''\n    Write a python function to find the cube of a number.\n    '''\n    cube = a ** 3\n    print(cube)\n    \n    \ndef Cube_of_Cube_2(a): \n    '''\n    Write a python function to find the cube of a number.\n    '''\n    cube = a ** 3\n    print(cube)\n    \n    \ndef Count_of_Sum(a,b): \n    '''\n    Write a python function to find the number of sums of two numbers.\n    '''\n    sum = a + b\n    print(sum)\n    \n    \ndef Sum_of_Squares_Recursive(a,b): \n    '''\n    Write a python function to find the sum of squares of two numbers.\n    '''\n    if a == b: \n        print(a)\n        return a\n    else: \n        return a + b\n    \n    \ndef Square_of_Squares_Recursive(a,b): \n    '''\n    Write a python function to find the square of a number.\n    '''\n    if a == b: \n        print(a)\n        return a\n    else: \n        return a + b\n    \n    \ndef Squared_Squares(a,b): \n    '''\n    Write a python function to find the squared squares of two numbers.\n    '''\n    square = a ** 2\n    square_of_squares = a * b\n    print(square_of_squares)\n    \n    \ndef Sum_of_Squares_Iterative(a,b): \n    '''\n    Write a python function to find the sum of squares of two numbers.\n    '''\n    sum = 0\n    for i in range(a,b+1):\n        sum = sum + i\n    print(sum)\n    \n    \ndef Square_of_Squares_Iterative(a,b): \n    '''\n    Write a python function to find the square of a number.\n    '''\n    square = a ** 2\n    square_of_squares = a * b\n    print(square_of_squares)\n    \n    \ndef Square_of_Squares_Recursive(a,b): \n    '''\n    Write a python function to find the square of a number.\n    '''\n    if a == b: \n        print(a)\n        return a\n    else: \n        return a + b\n    \n    \ndef Squared_Squares_Recursive(a,b): \n    '''\n    Write a python function to find the squared squares of two numbers.\n    '''\n    if a == b: \n        print(a)\n        return a\n    else: \n        return a + b\n    \n    \ndef Cube_of_Cube_Iterative(a,b): \n    '''\n    Write a python function to find the cube of a number.\n    '''\n    cube = a ** 3\n    cube_of_cube = a ** 3\n    print(cube_of_cube)\n    \n    \ndef Cube_of_Cube_Recursive(a,b): \n    '''\n    Write a python function to find the cube of a number.\n    '''\n    if a == b: \n        print(a)\n        return a\n    else: \n        return a + b\n    \n    \ndef Count_of_Sum_Iterative(a,b): \n    '''\n    Write a python function to find the number of sums of two numbers.\n    '''\n    sum = a + b\n    print(sum)\n    \n    \ndef Sum_of_Squares_Iterative(a,b): \n    '''\n    Write a python function to find the sum of squares of two numbers.\n    '''\n    sum = 0\n    for i in range(a,b+1):\n        sum = sum + i\n    print(sum)\n    \n    \ndef Square_of_Squares_Iterative(a,b): \n    '''\n    Write a python function to find the square of a number.\n    '''\n    square = a ** 2\n    square_of_squares = a * b\n    print(square_of_squares)\n    \n    \ndef Sum_of_Squares_Recursive(a,b): \n    '''\n    Write a python function to find the sum of squares of two numbers.\n    '''\n    sum = 0\n    for i in range(a,b+1):\n        sum = sum + i\n    print(sum)\n    \n    \ndef Square_of_Squares_Recursive(a,b): \n    '''\n    Write a python function to find the square of a number.\n    '''\n    square = a ** 2\n    square_of_squares = a * b\n    print(square_of_squares)\n    \n    \ndef Square_of_Squares_Recursive(a,b): \n    '''\n    Write a python function to find the square of a number.\n    '''\n    square = a ** 2\n    square_of_squares = a * b\n    print(square_of_squares)\n    \n    \ndef Cube_of_Cube_Recursive(a,b): \n    '''\n    Write a python function to find the cube of a number.\n    '''\n    cube = a ** 3\n    cube_of_cube = a ** 3\n    print(cube_of_cube)\n    \n    \ndef Cube_of_Cube_Recursive(a,b): \n    '''\n    Write a python function to find the cube of a number.\n    '''\n    if a == b: \n        print(a)\n        return a\n    else: \n        return a + b\n    \n    \ndef Sum_of_Squares_Recursive(a,b): \n    '''\n    Write a python function to find the sum of squares of two numbers.\n    '''\n    sum = a + b\n    print(sum)\n    \n    \ndef Square_of_Squares_Recursive(a,b): \n    '''\n    Write a python function to find the square of a number"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    res = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            res.append(list[i])\n    return res\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in range(len(list)): \n        if list[i] % 2 == 0: \n            list[i], list[i + 1] = list[i + 1], list[i] \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(even)\n    print(odd)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for n in list:\n        if n % 2 == 0:\n            even_numbers.append(n)\n        else:\n            odd_numbers.append(n)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    num_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            num_list.append(list[i])\n    print(num_list)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Even_nums = []\n    for i in range(len(list)): \n        if list[i] % 2 == 0: \n            Even_nums.append(list[i]) \n    return Even_nums\n    \n    \ndef even(list):\n    '''\n    Write a python function to find the even numbers from a list of numbers.\n    '''\n    Even_nums = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            Even_nums.append(list[i])\n    return Even_nums\n    \n    \ndef odd(list):\n    '''\n    Write a python function to find the even numbers from a list of numbers.\n    '''\n    Even_nums = []\n    for i in range(len(list)):\n        if list[i] % 2 == 1:\n            Even_nums.append(list[i])\n    return Even_nums\n    \n    \ndef Odd_even(list):\n    '''\n    Write a python function to find the even numbers from a list of numbers.\n    '''\n    Even_nums = []\n    for i in range(len(list)):\n        if list[i] % 2 == 1:\n            Even_nums.append(list[i])\n    return Even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list =[]\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not ele in sub: \n        sub.append(ele) \n    if ele[0] < ele[1]: \n        adjac(ele[0], sub) \n    elif ele[0] > ele[1]: \n        adjac(ele[1], sub) \n    return sub \ndef find(sub, ele, sub2): \n    '''\n    Find all the coordinates in the given sub, that are adjacent to the given ele.\n    '''\n    ans = [] \n    for i in sub: \n        if i not in sub2: \n            sub2.append(i) \n        if i == ele: \n            ans.append(i) \n    return ans \ndef union(sub, sub2): \n    '''\n    Remove all the adjacent coordinates of two sub.\n    '''\n    adjacent = adjac(sub, sub2) \n    sub2.extend(adjacent) \n    return sub2 \ndef build(n, sub, sub2): \n    '''\n    Build a sub using the adjacent coordinate pairs of the sub.\n    '''\n    sub2.extend(find(sub, n, sub)) \n    sub2.extend(find(sub2, n, sub2)) \n    return sub2 \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return sub\n    else:\n        for i in range(0,len(ele)):\n            for j in range(0,len(ele)):\n                if j>i and ele[i]!=ele[j] and ele[j] not in sub:\n                    sub.append(ele[j])\n                    adjac(ele[j],sub)\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not ele in sub:\n        sub.append(ele)\n    if len(ele) == 1:\n        return ele\n    else:\n        if ele[0] >= 0 and ele[1] >= 0 and ele[0] < len(sub) and ele[1] < len(sub):\n            return adjac(sub[ele[0] + 1], sub) + sub[ele[1]]\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0: \n        return ele\n    else: \n        x = ele[0]\n        y = ele[1]\n        z = ele[2]\n        return sub+[(x+1,y,z), (x-1,y,z), (x,y-1,z), (x,y+1,z), (x,y,z-1), (x,y,z+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    try:\n        if ele[0] < ele[1]:\n            sub.append([ele[0] + 1, ele[1]])\n            return adjac(ele, sub)\n        elif ele[0] > ele[1]:\n            sub.append([ele[0] - 1, ele[1]])\n            return adjac(ele, sub)\n        elif ele[1] < ele[0]:\n            sub.append([ele[1] + 1, ele[0]])\n            return adjac(ele, sub)\n        elif ele[1] > ele[0]:\n            sub.append([ele[1] - 1, ele[0]])\n            return adjac(ele, sub)\n    except IndexError:\n        return []\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele + sub[::-1] if (len(sub)>0) else ele\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        sub.append(ele)\n    else:\n        for i in sub:\n            adjac(i, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return None\n    elif ele not in map:\n        return None\n    else:\n        sub.append(ele)\n        if len(sub) == 1:\n            return sub\n        else:\n            return adjac(sub[-1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    result = []\n    if type(ele) == int:\n        for x in range(-1, ele):\n            for y in range(-1, ele):\n                result.append((x+1, y+1))\n    elif type(ele) == tuple:\n        x = ele[0]\n        y = ele[1]\n        result.append((x+1, y+1))\n        result.append((x-1, y+1))\n        result.append((x+1, y-1))\n        result.append((x-1, y-1))\n        result.append((x+1, y-1))\n    return result\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[0] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[2] == ele[1] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[2] == ele[1] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[2] == ele[1] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[2] == ele[1] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[2] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[2] == ele[1] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[2] == ele[1] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[2] == ele[1] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[0] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[2] == ele[1] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[2] == ele[1] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[2] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[2] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[2] == ele[1] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[2] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[2] == ele[1] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[0] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[2] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[2] == ele[1] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[0] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[0] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[0] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[2] == ele[1] == ele[0] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[1] == ele[0] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        sub.append(ele)\n        return adjac(ele, sub)\n    elif ele[0] == ele[1] == ele[2] == 0:\n        su"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('.', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # iterate over text\n    for i in range(len(text)):\n        # if the char at i is whitespace\n        if text[i] =='':\n            # if whitespace is at the end\n            if i < len(text) - 1:\n                # if it is not at the end\n                if text[i + 1]!='':\n                    # write the char at i to the end\n                    text = text[:i] + '_' + text[i + 1:]\n        # if char at i is not whitespace\n        else:\n            # if not at the end\n            if i < len(text) - 1:\n                # write the char at i to the end\n                text = text[:i] + '_' + text[i + 1:]\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    text = text.replace(' ','_')\n    text = text.replace('.','_')\n    text = text.replace(':','_')\n    text = text.replace('-','_')\n    text = text.replace('!','_')\n    text = text.replace('?','_')\n    text = text.replace('@','_')\n    text = text.replace('&','_')\n    text = text.replace('$','_')\n    text = text.replace('%','_')\n    text = text.replace('^','_')\n    text = text.replace('_','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return re.sub(r'\\s+','_',text)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n','').replace('\\t','_').replace('\\r','').replace('\\v','')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # 1st solution:\n    # text = text.replace(\" \",\"_\")\n    # text = text.replace(\"  \",\"_\")\n    # text = text.replace(\"    \",\"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n    return re.sub(' +', '_', text).replace(' ', '_')\n    \n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('\\t','_')\n    text = text.replace('\\n','_')\n    text = text.replace('\\r','_')\n    text = text.replace('\\v','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ', '_')\n    text = text.replace('  ', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Remove tabs and spaces\n    text = text.replace('\\t', '')\n    text = text.replace('\\n', '')\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            del num_list[i]\n        else:\n            i = i + 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    try:\n        for num in num_list:\n            if num == 0:\n                num_list.remove(num)\n                num_list.insert(0,0)\n                num_list.append(0)\n        return num_list\n    except:\n        return 'The list is invalid!'\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            num_list.pop(index)\n            num_list.append(0)\n            \ndef find_duplicates(arr):\n    '''\n    Write a function that returns all the duplicates in the given array.\n    The function should return only those items with duplicate numbers,\n    even if they are not unique. Duplicate numbers must be separated by\n    spaces.\n    '''\n    \n    new_list = []\n    for i in range(len(arr)):\n        if arr[i] not in new_list:\n            new_list.append(arr[i])\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    for num in num_list:\n        if num!= 0:\n            zero_list.append(num)\n    return zero_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    print(num_list)\n    while True:\n        for num in num_list:\n            if num == 0:\n                num_list.remove(num)\n                num_list.append(0)\n        if len(num_list) == 0:\n            break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for x in range(len(num_list)):\n        if num_list[x]!= 0:\n            num_list[x] = 0\n            break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    list_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(list_index)\n            num_list.append(0)\n            list_index += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #Store the length of the list\n    length = len(num_list)\n    #for i in range(length):\n    #    if num_list[i] == 0:\n    #        #Write a print statement to move all 0s to the end of the list\n    #        num_list.pop(i)\n    #        num_list.append(0)\n    #    else:\n    #        pass\n    \n    #print(num_list)\n    \n    #s = sum(num_list)\n    #print(s)\n    #print(len(num_list))\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while num_list:\n        num_list[-1] = 0\n        num_list.pop(-1)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+n]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pair_sum=0\n    for i in range(n) : \n        pair_sum+=arr[i]^arr[i+1]\n    return pair_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    a = 0\n    for i in range(n):\n        a = a ^ arr[i]\n    return a\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]^arr[i+1]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0 \n    for i in range(n) : \n        for j in range(i+1,n) : \n            if arr[i] == arr[j] : \n                sum += 1 \n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # XOR the two numbers\n    total = 0\n    for i in range(0,n) :\n        total = total ^ arr[i]\n        \n    return total\n    \ndef pair_xor_Sum2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR the two numbers\n    total = 0\n    for i in range(0,n) :\n        total = total ^ arr[i]\n        \n    return total\n    \ndef pair_xor_Ss(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(0,n) :\n        total = total ^ arr[i]\n        \n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum=sum+arr[i]^arr[j]\n    return sum\n    \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # Initialize sum of xor of all pairs of numbers\n    sum = 0\n    \n    # For loop to calculate sum of pairs\n    for i in range(0,n-2) :\n        sum = sum ^ arr[i]\n        \n    # Return sum of xor of all pairs\n    return sum\n    \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    temp = 0\n    for i in range(n) :\n        for j in range(i,n) :\n            temp = temp ^ arr[i] ^ arr[j]\n    return temp\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # define the value of the sum\n    s = 0\n    # define the array \n    array = [[0 for x in range(n)] for x in range(n)]\n    # the array is initialized to zero\n    for i in range(n):\n        for j in range(n):\n            array[i][j] = arr[i][j]\n    # find the xor and add them to the sum\n    for i in range(n):\n        for j in range(i+1,n):\n            s = s ^ array[i][j]\n    # return the sum\n    return s\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for element in iterable:\n        heapq.heappush(hq, element)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for element in iterable:\n        hq.heappush(h, element)\n    \n    # hq.heapify(h)\n    # print(h)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        hq.heappushpop(iterable, iterable[i])\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        for j in range(len(iterable) - 1 - i):\n            if iterable[j] > iterable[j + 1]:\n                temp = iterable[j]\n                iterable[j] = iterable[j + 1]\n                iterable[j + 1] = temp\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x:x[1])\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sorted_list = []\n    for i in range(len(iterable)):\n        heapq.heapify(sorted_list)\n        heapq.heappush(sorted_list, iterable[i])\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Python uses [] for empty list\n    if iterable == []:\n        return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #this is the largest number\n    largest = max(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)//2-1, -1, -1):\n        hq.heapify(iterable)\n        for j in range(i, 0, -1):\n            if iterable[j] < hq.heappop(iterable):\n                break\n            hq.heapreplace(iterable, iterable[j])\n        else:\n            return iterable\n    hq.heapify(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        heapq.heapify(iterable)\n        yield heapq.heappop(iterable)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Your code here\n    profit=actual_cost*sale_amount\n    loss=actual_cost*sale_amount*0.01\n    if profit>loss:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for x in range(len(actual_cost)):\n        if actual_cost[x] < sale_amount:\n            print('The cost of the product with id', x,'is less than or equal to the sale amount')\n            return False\n    print('The cost of the product with id',x,'is less than or equal to the sale amount')\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # If the amount is not larger than the expected cost, then there is no profit\n    if actual_cost < sale_amount:\n        return True\n    # If the amount is larger than the expected cost, then there is no profit\n    elif actual_cost > sale_amount:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    loss = actual_cost - sale_amount\n    profit = actual_cost - loss\n    if loss < 0:\n        print(\"Sorry! The given sale amount has no profit\")\n    else:\n        print(f\"Profit = {profit}.\")\n    if profit < 0:\n        print(f\"The given sale amount has no profit\")\n    else:\n        print(\"Profit =\", profit)\n    if loss < 0:\n        print(\"Sorry! The given sale amount has no profit\")\n    else:\n        print(\"Loss =\", loss)\n    #pass\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return not actual_cost and sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # TODO: Add your code here\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = 0\n    if actual_cost >= sale_amount:\n        return profit_loss\n    else:\n        for i in range(len(sale_amount)):\n            if actual_cost > sale_amount[i] and actual_cost <= sale_amount[i]:\n                profit_loss = profit_loss + sale_amount[i] - actual_cost\n                return profit_loss\n    return profit_loss\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        profit = sale_amount - actual_cost\n        return profit\n    else:\n        loss = actual_cost - sale_amount\n        return loss\n    \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the number of days needed to calculate the profit/loss\n    days = int(actual_cost / sale_amount)\n    # Check if the profit/loss is greater than 0 \n    # If it is, it will return True\n    # Else it will return False\n    return days > 0\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 9.0 + (9.0/5.0) * (v/22.0) - 0.6215 * (v**0.16) - 0.4275 * (v**0.17)\n    return round(w, 2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    h = v/3.6\n    c = (9.0/5.0) + (5.0/9.0) * (h - 0.62)\n    wc = 0.62 - 0.5 * math.log(((h - 0.5) / (h - c)), 1.42857142857143)\n    return round(wc,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        print(\"Wind chill index is \" + str(math.floor((v/0.3)*100)))\n    else:\n        print(\"Wind chill index is \" + str(math.ceil((v/0.3)*100)))\n    \ndef wind_chill_old(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return (v*100)+(((v/0.3)*100)+(((v/0.3)*100)+((v/0.3)*100)))\n    \ndef wind_chill_iterative(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n    \ndef wind_chill_manual(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        print(\"Wind chill index is \" + str(math.floor((v/0.3)*100)))\n    else:\n        print(\"Wind chill index is \" + str(math.ceil((v/0.3)*100)))\n    \ndef wind_chill_manual_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n    \ndef wind_chill_iterative_manual(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \ndef wind_chill_iterative_manual_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \ndef wind_chill_iterative_manual_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \ndef wind_chill_iterative_manual_one_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \ndef wind_chill_iterative_manual_one_one_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \n    \ndef wind_chill_manual_one_one_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \n    \ndef wind_chill_manual_one_one_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \ndef wind_chill_iterative_manual_one_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \n    \ndef wind_chill_iterative_manual_one_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \n    \ndef wind_chill_iterative_manual_one_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \n        \ndef wind_chill_iterative_manual_one_one_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \n        \ndef wind_chill_manual_one_one_one_one_one(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.ceil((v/0.3)*100)\n    if c >= 100:\n        print(\"Wind chill index is \" + str(c))\n    else:\n        print(\"Wind chill index is \" + str(c+100))\n        \n        \ndef wind_chill_iterative_manual_one_one_one_one_one(v,t):\n    ''"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Wind chill index formula\n    #v = wind speed in km/h\n    #t = temperature in celsius\n    #wind chill is the formula based on v and t\n    if v < 0:\n        wind_chill = -20.65\n    elif v < 1250:\n        wind_chill = 15.10\n    elif v < 2000:\n        wind_chill = 17.70\n    elif v < 3000:\n        wind_chill = 20.90\n    elif v < 6000:\n        wind_chill = 25.15\n    elif v < 7000:\n        wind_chill = 27.35\n    elif v < 10000:\n        wind_chill = 28.30\n    elif v < 14000:\n        wind_chill = 30.50\n    elif v < 20000:\n        wind_chill = 34.70\n    else:\n        wind_chill = 40.0\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    temp = float(t)\n    wind_chill = v*(9/5)+32\n    wind_chill = math.log(wind_chill,10)\n    wind_chill = math.log10(wind_chill,10)\n    wind_chill = wind_chill * (9/5) + 32\n    return wind_chill\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Calculate the wind chill\n    chill = ((9 * v * math.log(v) + 16) / (9 * v + 1)) + 40\n    #Convert the wind chill to an integer\n    chill = int(chill)\n    #Calculate the temperature\n    temp = math.tan((9 * v + 16) / (9 * v + 1))\n    #Return the wind chill index\n    return chill,temp\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #v = wind_velocity\n    #t = temperature in celsius\n    if not v or not t:\n        return 0.0\n    \n    # assume the wind speed is in km/h\n    # assume the temperature is in celsius\n    wind_velocity = v * 3.6 # assume the wind speed is in km/h\n    wind_temperature = t # assume the temperature is in celsius\n    \n    # calculate the wind chill\n    wind_chill = wind_temperature - (wind_temperature * math.log(1.0 + wind_velocity / 3.6))\n    \n    # return the wind chill\n    return wind_chill\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # takes wind velocity and temperature and returns the wind chill index.\n    wind_chill_index = 0.0\n    if wind_chill_index < -50.0:\n        wind_chill_index = -50.0\n    if wind_chill_index > 110.0:\n        wind_chill_index = 110.0\n    \n    # takes wind speed and temperature and calculates the wind chill index for the given temperature.\n    wind_chill_index = (v/3.6) * (9.0 + (t*9.0)) / 5.0\n    # if wind_chill_index is less than -20.0\n    # wind_chill_index = -20.0\n    # if wind_chill_index is greater than 50.0\n    # wind_chill_index = 50.0\n    \n    return wind_chill_index\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    u = 0.6215 + 0.6215 * (v/101.325)\n    w = (u - 0.6215) * math.log(u - 0.6215, 10)\n    w = (u + 0.6215) * math.log(u + 0.6215, 10)\n    w = (u - 0.6215) * math.log(u - 0.6215, 10)\n    w = -1 * (w - math.log(t - 273.15))\n    return w\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((v**(1/2)) + ((t+273.15)/(v**(1/2))),2)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create a variable for the string of names\n    string_of_names = ''.join(sample_names)\n    # Get the list of letters from the string\n    letters = list(string_of_names)\n    # Loop through the letters of the string, excluding the first letter\n    # Return the length of the letters\n    for index, letter in enumerate(letters):\n        if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':\n            del letters[index]\n    # Return the letters\n    return ''.join(letters)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].islower():\n            sum += len(name)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names.sort()\n    names_length = len(sample_names)\n    n = 0\n    new_names = []\n    for name in sample_names:\n        if name[0].islower():\n            n += 1\n            if n > 3:\n                break\n        else:\n            n += 1\n            if n > 3:\n                break\n    for name in sample_names:\n        new_name = name[0:n]\n        new_names.append(new_name)\n    return new_names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [name.lower().strip() for name in sample_names]\n    return sum([len(name) for name in sample_names if name.startswith('a')])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].islower():\n            sum = sum + len(name)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = []\n    for sample in sample_names:\n        if sample[0].islower():\n            name_list.append(sample)\n    return len(name_list)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = 0\n    for name in sample_names:\n        if name.lower()[0].islower():\n            n += len(name)\n    return n\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for name in sample_names:\n        if name[0]!= 'a':\n            total += len(name)\n    return total\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # For loop to iterate through the list of names and sum the length of the names\n    for name in sample_names:\n        if name.startswith('a'):\n            # Append the length of the names to the list\n            sample_names.append(len(name))\n    # Return the list of names\n    return sample_names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    i = 0\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            sample_names.remove(sample_names[i])\n    return len(sample_names)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    clean_list = []\n    new_string = ''\n    for x in items:\n        if x == '(':\n            new_string += x\n        elif x == ')':\n            if len(new_string) > 0:\n                new_string = new_string[:-1]\n            else:\n                clean_list.append(new_string)\n                new_string = ''\n    return clean_list\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pass\ndef remove_punctuation(items):\n    '''\n    Write a function to remove the punctuation from a string.\n    '''\n    pass\ndef remove_digits(items):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    pass\ndef remove_whitespace(items):\n    '''\n    Write a function to remove whitespace from a string.\n    '''\n    pass\ndef remove_punctuation_and_digits(items):\n    '''\n    Write a function to remove punctuation and digits from a string.\n    '''\n    pass\ndef remove_digits_and_whitespace(items):\n    '''\n    Write a function to remove digits and whitespace from a string.\n    '''\n    pass\ndef remove_stopwords(items):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    pass\ndef remove_title(items):\n    '''\n    Write a function to remove title from a string.\n    '''\n    pass\ndef remove_title_and_punctuation(items):\n    '''\n    Write a function to remove title and punctuation from a string.\n    '''\n    pass\ndef remove_number(items):\n    '''\n    Write a function to remove number from a string.\n    '''\n    pass\ndef remove_month(items):\n    '''\n    Write a function to remove month from a string.\n    '''\n    pass\ndef remove_date(items):\n    '''\n    Write a function to remove date from a string.\n    '''\n    pass\ndef remove_country(items):\n    '''\n    Write a function to remove country from a string.\n    '''\n    pass\ndef remove_city(items):\n    '''\n    Write a function to remove city from a string.\n    '''\n    pass\ndef remove_other_char(items):\n    '''\n    Write a function to remove other character from a string.\n    '''\n    pass\ndef remove_other_char_and_punctuation(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_digits(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_whitespace(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_stopwords(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_digits(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_whitespace(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_stopwords(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_title(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits_and_whitespace(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits_and_whitespace_and_title(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits_and_whitespace_and_title(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits_and_whitespace_and_title(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits_and_whitespace_and_title(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits_and_whitespace_and_title(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits_and_whitespace_and_title(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits_and_whitespace_and_title_and_punctuation_and_digits(items):\n    '''\n    Write a function to remove punctuation and other character from a string.\n    '''\n    pass\ndef remove_other_char_and"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    start = 0\n    end = 0\n    for i, item in enumerate(items):\n        if item == '(':\n            if start == 0:\n                start = i\n            end = i\n        elif item == ')':\n            if end!= 0:\n                result.append((start, end))\n                start = 0\n                end = 0\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i] == '(':\n            items[i] = ''\n        else:\n            items[i] = items[i][1:-1]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return \"\".join(items).strip(\"()\").split(\"(\")\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'(?<=[^()])(?=[^()])')\n    res = []\n    for x in items:\n        if x.strip():\n            if regex.findall(x):\n                res.append(x)\n        elif x.strip():\n            res.append(x)\n    return res\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Your code goes here\n    new_str = ''\n    for item in items:\n        item = re.sub(r'\\([^)]*\\)', '', item)\n        item = re.sub(r'\\([^)]*\\)|\\[|\\]', '', item)\n        item = re.sub(r'\\([^)]*\\)|\\[|\\]|\\{|\\}', '', item)\n        item = re.sub(r'\\(|\\)|\\)|\\[|\\]', '', item)\n        item = re.sub(r'\\,|\\)|\\)|\\[|\\]|\\{|\\}', '', item)\n        item = re.sub(r'\\{|\\)|\\)|\\(|\\)|\\}', '', item)\n        item = re.sub(r'\\{|\\)|\\)|\\(|\\)|\\}', '', item)\n        item = re.sub(r'\\{', '', item)\n        item = re.sub(r'\\}', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\?|\\||\\||\\|', '', item)\n        item = re.sub(r'\\?|\\||\\||\\|', '', item)\n        item = re.sub(r'\\?|\\||\\||\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\)|\\||\\||\\|', '', item)\n        item = re.sub(r'\\)|\\||\\||\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = re.sub(r'\\|', '', item)\n        item = r"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    clean_string = ''\n    for item in items:\n        if item[-1] == '(':\n            item = item[:-1]\n        if item == ')':\n            clean_string = clean_string + '('\n        else:\n            clean_string = clean_string + item\n    return clean_string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) > 0:\n        return items[0][0:-1] + remove_parenthesis(items[1:])\n    else:\n        return \"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_str = \"\"\n    for item in items:\n        if item[0] == \"(\":\n            new_str += item[1:]\n        else:\n            new_str += item\n    return new_str\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    m=0\n    n=n+1\n    while(m<=n):\n        if m%2 ==1:\n            m=m+1\n        else:\n            m=m-1\n    return m\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    return n%2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1):\n            if i == j:\n                count += 1\n    return count\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    \n    if n%2 == 1:\n        return False\n    if n%2 == 0:\n        return is_nonagonal(n-1) or is_nonagonal(n-2)\n    \n    else:\n        return False\n    \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = int(n)\n    \n    # The summation of the first n+2 nonagonals\n    sum = int(n*(n+1))\n    \n    # The even and odd numbers\n    even = s//2\n    odd = n - even\n    \n    # Sums\n    sum = sum + even + odd\n    \n    # Check\n    if sum % 2 == 0:\n        return even\n    else:\n        return odd\n    \nprint(is_nonagonal(1))\nprint(is_nonagonal(4))\nprint(is_nonagonal(6))\nprint(is_nonagonal(12))\nprint(is_nonagonal(50)"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n):\n        print(n-i, end=\" \")\n    print()\n    return n-"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Write your code here.\n    for i in range(1,n+1):\n        if(i % 2!= 0):\n            if(i % 3!= 0):\n                if(i % 5!= 0):\n                    if(i % 7!= 0):\n                        return i\n        \ndef list_divide_even(n): \n    '''\n    Write a function that takes an integer and returns the list of all the even numbers divisible by that number.\n    '''\n    # Write your code here.\n    numbers = []\n    for i in range(1,n+1):\n        if (i % 2 == 0):\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 2\n    elif n==2:\n        return 3\n    else:\n        return is_nonagonal(n-1)"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 0\n    for i in range(n-1): \n        for j in range(i+1, n): \n            if abs(n-i-j) == abs(i-j): \n                return n-i-j \n    return None\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if n % 2 == 1:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # regular expression\n    match = re.match(r'^(z)(z)(z)$', text, re.IGNORECASE | re.MULTILINE)\n    if match is None:\n        return False\n    # print(match)\n    return len(match.group(0)) > 2\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match_wordz = re.search(r'\\b\\w+\\b', text)\n    if match_wordz is not None:\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n    text = re.sub('\\W+', '', text)\n    text = text.replace('\\n','').replace('\\t','').replace('\\r','')\n    text = text.replace('-','').replace('_','').replace('/','')\n    wordz = re.findall(r'z', text)\n    text = ''\n    for word in wordz:\n        text = text + word +''\n    return text.lower()\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(z+)'\n    return re.search(pattern, text) is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text_clean = ''\n    for char in text:\n        if char == 'z':\n            text_clean += char\n        else:\n            text_clean += char\n    text_clean = re.sub('^\\s', '', text_clean)\n    text_clean = re.sub('\\s\\s','', text_clean)\n    text_clean = text_clean.lower()\n    text_clean = text_clean.strip()\n    \n    if text_clean.find('z') >= 0 or text_clean.find('\\z') >= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] in \"z\":\n        return \"Z\" not in text\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    end_index = len(text) - 1\n    start_index = 0\n    for i in range(len(text)):\n        if text[i].lower() == 'z':\n            end_index = i\n            break\n    for i in range(end_index, len(text)):\n        if text[i].lower() == 'z':\n            start_index = i\n            break\n    if start_index > 0:\n        for i in range(start_index, 0, -1):\n            if text[i] == 'z':\n                break\n    if end_index < len(text):\n        for i in range(end_index, len(text)):\n            if text[i] == 'z':\n                break\n    if text[0] == 'z':\n        for i in range(1, len(text)):\n            if text[i] == 'z':\n                break\n    return text[start_index:end_index + 1] == text[start_index:end_index + 1]\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_list = re.split('[a-zA-Z_]', text)\n    return len(text_list)!= 0 and len(text_list[0]) > 0 and len(text_list[-1]) == 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z':\n        if text[-1] == 'z':\n            return True\n        else:\n            return False\n    else:\n        if text[-1] == 'z':\n            if text[0] == 'z':\n                return True\n            else:\n                return False\n        else:\n            if text[0] == 'z':\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = 'z'\n    index = 0\n    while index < len(text) and not text[index].isdigit():\n        if text[index] == pattern:\n            return True\n        index += 1\n    return False\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    output = input[::-1]\n    for i in range(len(input)):\n        output[i] = input[i]\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print(\"reverse_Array_Upto_K(input, k):\")\n    j = k % len(input)\n    return j, input[::-1][j:]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Your code here\n    return input[k:] + input[:k]\n    \ndef reverse_array_strict(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_1(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_2(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_3(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_4(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_5(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_6(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_7(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_8(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_9(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_10(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_11(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_12(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_13(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_14(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_15(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_16(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_17(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = len(input)\n    for i in range(n // 2):\n        temp = input[i]\n        input[i] = input[n - 1 - i]\n        input[n - 1 - i] = temp\n    return input[:k] + input[n - k:]\n    \ndef reverse_array_18(input, k):\n    '''\n    Write a python function to reverse an array.\n    '''\n    # Your code here\n    n = le"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = input[::-1]\n    for i in range(len(input)):\n        for j in range(i, -1, -1):\n            if input[j] == reverse[j]:\n                break\n        else:\n            return input\n        reverse.insert(i, input[j])\n    return reverse\n    \n    \ndef array_dup(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    dup = input[:k]\n    for i in range(k, len(input)):\n        if dup[-1] == input[i]:\n            dup.append(input[i])\n            for j in range(k, i, -1):\n                if dup[-1] == input[j]:\n                    dup.append(input[j])\n            break\n    return dup\n    \n    \n    \ndef get_word(input):\n    '''\n    Write a python function to extract the word from a given array.\n    '''\n    for i in range(len(input)-1, -1, -1):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef get_k(input, k):\n    '''\n    Write a python function to extract the kth word from a given array.\n    '''\n    for i in range(k):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = input[::-1]\n    for i in range(len(input)):\n        for j in range(i, -1, -1):\n            if input[j] == reverse[j]:\n                break\n        else:\n            return input\n        reverse.insert(i, input[j])\n    return reverse\n    \n    \n    \ndef array_dup(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    dup = input[:k]\n    for i in range(k, len(input)):\n        if dup[-1] == input[i]:\n            dup.append(input[i])\n            for j in range(k, i, -1):\n                if dup[-1] == input[j]:\n                    dup.append(input[j])\n            break\n    return dup\n    \n    \n    \ndef get_word(input):\n    '''\n    Write a python function to extract the word from a given array.\n    '''\n    for i in range(len(input)-1, -1, -1):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef get_k(input, k):\n    '''\n    Write a python function to extract the kth word from a given array.\n    '''\n    for i in range(k):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = input[::-1]\n    for i in range(len(input)):\n        for j in range(i, -1, -1):\n            if input[j] == reverse[j]:\n                break\n        else:\n            return input\n        reverse.insert(i, input[j])\n    return reverse\n    \n    \n    \ndef array_dup(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    dup = input[:k]\n    for i in range(k, len(input)):\n        if dup[-1] == input[i]:\n            dup.append(input[i])\n            for j in range(k, i, -1):\n                if dup[-1] == input[j]:\n                    dup.append(input[j])\n            break\n    return dup\n    \n    \n    \ndef get_word(input):\n    '''\n    Write a python function to extract the word from a given array.\n    '''\n    for i in range(len(input)-1, -1, -1):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef get_k(input, k):\n    '''\n    Write a python function to extract the kth word from a given array.\n    '''\n    for i in range(k):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = input[::-1]\n    for i in range(len(input)):\n        for j in range(i, -1, -1):\n            if input[j] == reverse[j]:\n                break\n        else:\n            return input\n        reverse.insert(i, input[j])\n    return reverse\n    \n    \n    \ndef array_dup(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    dup = input[:k]\n    for i in range(k, len(input)):\n        if dup[-1] == input[i]:\n            dup.append(input[i])\n            for j in range(k, i, -1):\n                if dup[-1] == input[j]:\n                    dup.append(input[j])\n            break\n    return dup\n    \n    \n    \ndef get_word(input):\n    '''\n    Write a python function to extract the word from a given array.\n    '''\n    for i in range(len(input)-1, -1, -1):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef get_k(input, k):\n    '''\n    Write a python function to extract the kth word from a given array.\n    '''\n    for i in range(k):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = input[::-1]\n    for i in range(len(input)):\n        for j in range(i, -1, -1):\n            if input[j] == reverse[j]:\n                break\n        else:\n            return input\n        reverse.insert(i, input[j])\n    return reverse\n    \n    \n    \ndef array_dup(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    dup = input[:k]\n    for i in range(k, len(input)):\n        if dup[-1] == input[i]:\n            dup.append(input[i])\n            for j in range(k, i, -1):\n                if dup[-1] == input[j]:\n                    dup.append(input[j])\n            break\n    return dup\n    \n    \n    \ndef get_word(input):\n    '''\n    Write a python function to extract the word from a given array.\n    '''\n    for i in range(len(input)-1, -1, -1):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef get_k(input, k):\n    '''\n    Write a python function to extract the kth word from a given array.\n    '''\n    for i in range(k):\n        if input[i].isalpha():\n            return input[i]\n    return None\n    \n    \ndef reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = input[::-1"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = len(input) - 1\n    output = []\n    while i >= 0:\n        output.append(input[i])\n        i -= 1\n    output.reverse()\n    for i in range(len(output)):\n        output[i] = output[i] * k\n    return output\n    \ndef reverse_Array_Recursion(input, k): \n    '''\n    Write a recursive Python function to reverse an array upto a given position.\n    '''\n    if len(input) <= 1:\n        return input\n    return reverse_Array_Recursion(input[:-1], k) + [input[-1] * k]\n    \ndef reverse_Array_Recursion_List(input, k): \n    '''\n    Write a recursive Python function to reverse an array upto a given position.\n    '''\n    if len(input) <= 1:\n        return input\n    i = len(input) - 1\n    output = []\n    for x in range(i, -1, -1):\n        output.append(input[x] * k)\n    return output\n    \ndef reverse_Array_Recursion_List_K(input, k): \n    '''\n    Write a recursive Python function to reverse an array upto a given position.\n    '''\n    if len(input) <= 1:\n        return input\n    i = len(input) - 1\n    output = []\n    for x in range(i, -1, -1):\n        output.append(input[x] * k)\n    return output\n    \ndef reverse_Array_Recursion_HashTable(input, k): \n    '''\n    Write a recursive Python function to reverse an array upto a given position.\n    '''\n    if len(input) <= 1:\n        return input\n    table = {x: input[x] for x in range(len(input))}\n    return table\n    \ndef reverse_Array_Recursion_HashTable_List(input, k): \n    '''\n    Write a recursive Python function to reverse an array upto a given position.\n    '''\n    if len(input) <= 1:\n        return input\n    table = {}\n    for x in range(len(input)):\n        table[input[x]] = input[len(input) - x - 1]\n    return table\n    \ndef reverse_Array_Recursion_HashTable_List_K(input, k): \n    '''\n    Write a recursive Python function to reverse an array upto a given position.\n    '''\n    if len(input) <= 1:\n        return input\n    table = {}\n    for x in range(len(input)):\n        table[input[x]] = input[x] * k\n    return table\n    \ndef get_rec_dictionary(input): \n    '''\n    Write a dictionary Python function to get a dictionary that maps any non-repeating element to a position in the array.\n    '''\n    if len(input) <= 1:\n        return {}\n    rec_dic = {}\n    for x in range(len(input)):\n        if input[x] in rec_dic:\n            rec_dic[input[x]] = x\n        else:\n            rec_dic[input[x]] = x\n    return rec_dic\n    \ndef get_rec_list(input): \n    '''\n    Write a list Python function to get a list that maps any non-repeating element to a position in the array.\n    '''\n    if len(input) <= 1:\n        return []\n    rec_list = []\n    for x in range(len(input)):\n        if input[x] in rec_list:\n            rec_list.append(x)\n        else:\n            rec_list.append(x)\n    return rec_list\n    \ndef get_rec_list_K(input): \n    '''\n    Write a list Python function to get a list that maps any non-repeating element to a position in the array.\n    '''\n    if len(input) <= 1:\n        return []\n    rec_list = []\n    for x in range(len(input)):\n        if input[x] in rec_list:\n            rec_list.append(x)\n        else:\n            rec_list.append(x)\n    return rec_list\n    \ndef get_rec_hash_table(input): \n    '''\n    Write a dictionary Python function to get a dictionary that maps any non-repeating element to a position in the array.\n    '''\n    if len(input) <= 1:\n        return {}\n    rec_hash_table = {}\n    for x in range(len(input)):\n        if input[x] in rec_hash_table:\n            rec_hash_table[input[x]] = x\n        else:\n            rec_hash_table[input[x]] = x\n    return rec_hash_table\n    \ndef get_rec_hash_table_K(input): \n    '''\n    Write a dictionary Python function to get a dictionary that maps any non-repeating element to a position in the array.\n    '''\n    if len(input) <= 1:\n        return {}\n    rec_hash_table = {}\n    for x in range(len(input)):\n        if input[x] in rec_hash_table:\n            rec_hash_table[input[x]] = x\n        else:\n            rec_hash_table[input[x]] = x\n    return rec_hash_table\n    \ndef get_rec_hash_table_list(input): \n    '''\n    Write a list Python function to get a list that maps any non-repeating element to a position in the array.\n    '''\n    if len(input) <= 1:\n        return []\n    rec_hash_table = {}\n    for x in range(len(input)):\n        if input[x] in rec_hash_table:\n            rec_hash_table[input[x]] = x\n        else:\n            rec_hash_table[input[x]] = x\n    return rec_hash_table\n    \ndef get_rec_hash_table_list_K(input): \n    '''\n    Write a list Python function to get a list that maps any non-repeating element to a position in the array.\n    '''\n    if len(input) <= 1:\n        return []\n    rec_hash_table = {}\n    for x in range(len(input)):\n        if input[x] in rec_hash_table:\n            rec_hash_table[input[x]] = x\n        else:\n            rec_hash_table[input[x]] = x\n    return rec_hash_table\n    \ndef get_rec_hash_table_list_K_K(input): \n    '''\n    Write a list Python function to get a list that maps any non-repeating element to a position in the array.\n    '''\n    if len(input) <= 1:\n        return []\n    rec_hash_table = {}\n    for x in range(len(input)):\n        if input[x] in rec_hash_table:\n            rec_hash_table[input[x]] = x\n        else:\n            rec_hash_table[input[x]] = x\n    return rec_hash_table\n    \ndef reverse_Array_Recursion_HashTable_List_K_K(input, k): \n    '''\n    Write a recursive Python function to reverse an array upto a given position.\n    '''\n    if len(input) <= 1:\n        return input\n    table = {}\n    for x in range(len(input)):\n        if input[x] in table:\n            table[input[x]] = table[input[x]] + k\n        else:\n            table[input[x]] = table[input[x]] + k\n    return table\n    \ndef reverse_Array_Recursion_HashTable_List_K_K_K(input, k): \n    '''\n    Write a recursive Python function to reverse an array upto a given position.\n    '''\n    if len(input) <= 1:\n        return input\n    table = {}\n    for x in range(len(input)):\n        if input[x] in table:\n            table[input[x]] = table[input[x]] + k\n        else:\n            table[input[x]] = table[input[x]] + k\n    return table\n    \ndef reverse_Array_Recursion_Has"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input): \n        raise ValueError(\"k is greater than length of the array\") \n    else: \n        print(\"Reverse array starting from position \",k) \n        result = input[k] \n        while k > 0: \n            result = input[k] \n            k = k - 1 \n        return result \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) <= k: \n        return input\n    else: \n        # Reverse array upto position k \n        # using recursion \n        # till k-1 \n        return reverse_Array_Upto_K(input, k-1) + [input[-1]] \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Create an empty array to store the reversed elements.\n    reversed = []\n    \n    # Iterate through the array.\n    for i in range(len(input)):\n        # Set the index to the next element.\n        index = len(input) - i - 1\n        \n        # Iterate through the elements to the left.\n        for j in range(index):\n            # Store the element into the reversed array.\n            reversed.append(input[j])\n        \n        # Remove the index from the array.\n        input.pop(index)\n    \n    return reverse"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input) - 1\n    while(start < end):\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input\n        "
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    for i in range(k - 1, -1, -1):\n        input[i], input[i+1] = input[i+1], input[i]\n    \n    return ''.join(input)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup, test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1])\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        if type(value) == tuple:\n            test_tup = test_tup + (key,)\n        else:\n            test_tup = test_tup + (key, value)\n    \n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k, v in test_dict.items():\n        test_tup[k] = v\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k,v in test_dict.items():\n        if isinstance(v, dict):\n            test_tup.append((k, add_dict_to_tuple(test_tup, v)))\n        else:\n            test_tup.append((k, v))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # your code goes here\n    tuple_out = test_dict.copy()\n    tuple_out.update(test_tup)\n    return tuple_out\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    new_tuple += tuple(test_dict)\n    return new_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup += (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        if key in test_tup:\n            test_tup[key] = test_tup[key] + value\n        else:\n            test_tup[key] = value\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    return cost[0][0] / cost[-1][-1]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost is None or len(cost) == 0:\n        return None\n    \n    numCells = len(cost)\n    m = 0\n    maxAverage = 0\n    \n    for i in range(numCells):\n        for j in range(i + 1, numCells):\n            m += cost[i][j]\n            maxAverage += cost[i][j]/numCells\n    \n    return maxAverage/m\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    paths = []\n    for i in range(N):\n        paths.append([])\n        for j in range(N):\n            if i!= j:\n                paths[-1].append(cost[i][j])\n            else:\n                paths[-1].append(0)\n    for i in range(1, N):\n        for j in range(N - i):\n            paths[j].append(sum(paths[j+1:j+i+1])/i)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost) # N = number of rows\n    visited = [False for i in range(N)] # initially we have no visited cells\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # initilaize the paths with a start and end\n    paths = [[0, 0]] # path for the start, the end\n    # add the start to the list of visited cells\n    visited[0] = True\n    # add the start and end to the path\n    paths.append([0,0])\n    # add the next lowest cost cell to the paths\n    paths.append([0, lowest])\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cell\n    lowest = math.inf\n    # keep track of the lowest cost cel"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    totalCost = 0\n    visited = [0]*n\n    for i in range(n):\n        for j in range(n):\n            totalCost += cost[i][j]\n            visited[i] += 1\n    averageCost = totalCost/visited[n-1]\n    \n    path = [0]*n\n    for i in range(n):\n        path[i] = i\n        \n    for i in range(n):\n        for j in range(i+1,n):\n            path[i] = max(path[i],path[j])\n    \n    return averageCost, path\n    \ndef minAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average over all existing paths.\n    '''\n    n = len(cost)\n    totalCost = 0\n    visited = [0]*n\n    for i in range(n):\n        for j in range(n):\n            totalCost += cost[i][j]\n            visited[i] += 1\n    averageCost = totalCost/visited[n-1]\n    \n    path = [0]*n\n    for i in range(n):\n        path[i] = i\n        \n    for i in range(n):\n        for j in range(i+1,n):\n            path[i] = min(path[i],path[j])\n    \n    return averageCost, path\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    '''\n    parameters\n    cost: A list of lists of integers. Each cell is a list containing the cost incurred for each cell.\n    '''\n    \n    if(len(cost)!= len(cost[0])):\n        raise Exception(\"Invalid cost matrix\")\n    \n    for i in range(len(cost)):\n        cost[i].append(cost[i][0])\n        for j in range(len(cost[i])-1):\n            cost[i][j] += cost[i][j+1]\n            if(j+1 == len(cost[i])-1):\n                cost[i][j+1] += cost[i][j]\n    \n    # Find the average for each cell\n    total = 0\n    for i in range(len(cost)):\n        total += cost[i][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    path=[]\n    n=len(cost)\n    total=0\n    for i in range(0,n):\n        total+=cost[i][i]\n    path.append(total/n)\n    for i in range(n-1,0,-1):\n        total=0\n        for j in range(0,n):\n            total+=cost[i][j]\n        path.append(total/n)\n    return path\ndef findPath(N,cost):\n    '''\n    Given a square matrix of size N*N and a list of costs, which are all of size N*N, return a path that contains the nodes that have the lowest costs.\n    '''\n    minPath=[]\n    minCost=float('inf')\n    for i in range(0,N):\n        path=[]\n        for j in range(0,N):\n            path.append(i)\n        path.append(N-1)\n        total=0\n        for j in range(0,N):\n            total+=cost[j][j]\n        path.append(total/N)\n        minPath.append(path)\n    for i in range(0,N):\n        for j in range(0,N):\n            if minPath[i][j]==N:\n                minPath[i][j]=N-1\n            if minPath[i][j]==0:\n                minPath[i][j]=j\n    return minPath"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_paths = []\n    for i in range(N):\n        for j in range(N):\n            if i!= 0:\n                max_paths.append((j,i))\n    max_paths.sort(key = lambda x : x[1])\n    paths_value = []\n    for i,j in max_paths:\n        paths_value.append(cost[i][j])\n    return sum(paths_value)//len(paths_value)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # verify if valid matrix\n    if len(cost)!= N*N:\n        return -1\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    visited = [False for _ in range(N)]\n    queue = deque()\n    for i in range(N):\n        for j in range(N):\n            if not visited[i] and cost[i][j] >= 0:\n                visited[i] = True\n                queue.append([i, j])\n    while queue:\n        current = queue.popleft()\n        print(current)\n        for cell in range(N):\n            if not visited[cell] and cost[current[0]][cell] >= 0:\n                visited[cell] = True\n                queue.append([cell, current[1]])\n    \n    return sum(sum(i) for i in visited) // len(visited)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    for student in students:\n        student_height = students[student][0]\n        student_weight = students[student][1]\n        if student_height>h and student_weight>w:\n            students[student] = (student_height,student_weight)\n    \n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students.keys():\n        if (student[1][1] > h[student[0]] and student[1][1] >= w[student[0]]):\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    s = students.copy()\n    for i in s:\n        if all(isinstance(j, float) for j in i):\n            if all(j >= h for j in i[1]):\n                s.remove(i)\n        elif not all(isinstance(j, float) for j in i):\n            if all(j >= w for j in i[1]):\n                s.remove(i)\n    return s\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [ (s,h,w) for s in students if h <= s[1] <= w ]\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for i in students:\n        if i[1][0] >= h and i[1][1] >= w:\n            result[i[0]] = i\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_students = []\n    for student in students.keys():\n        if (min(students[student][0]) >= h and min(students[student][1]) >= w):\n            filter_students.append(student)\n    return filter_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    student_dict = {}\n    for i in students:\n        student_dict[i[0]] = (i[1][0],i[1][1])\n    for i in student_dict:\n        if (student_dict[i][0] > h and student_dict[i][1] > w) or (student_dict[i][0] > h and student_dict[i][1] < w):\n            students.pop(i)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # TODO: replace with your code\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students.values():\n        if (student[1][0] >= h and student[1][1] >= w):\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    minimum_height = students[h][1]\n    minimum_weight = students[w][1]\n    return [student for student in students if student[1]>=minimum_height and student[1]>=minimum_weight]\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_set1 = set(nums1)\n    num_set2 = set(nums2)\n    count = 0\n    if len(num_set1)!= len(num_set2):\n        return count\n    for i in range(len(num_set1)):\n        if num_set1[i] == num_set2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    counter = 0\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            if nums1[i] == nums2[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    l = 0\n    r = 0\n    while l < len(nums1) and r < len(nums2):\n        if nums1[l] == nums2[r]:\n            l += 1\n            r += 1\n        else:\n            if nums1[l] < nums2[r]:\n                l += 1\n            else:\n                r += 1\n    return l - r\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pair = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums1)):\n            if nums1[i] == nums2[j]:\n                same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # 1.Initialize the dictionary\n    dict1 = dict(zip(nums1, range(len(nums1))))\n    dict2 = dict(zip(nums2, range(len(nums2))))\n    # 2.Iterate over both lists.\n    # 3.If the values are the same, increment the count.\n    # 4.Else, increment the count of the pair.\n    count1 = 0\n    count2 = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count1 += 1\n            else:\n                count2 += 1\n    # Return the count.\n    return count1, count2\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i, num in enumerate(nums1):\n        if num == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(map(count_pair, nums1, nums2))\n    \ndef count_pair(num1, num2):\n    '''\n    The input is defined as a list of same length. The output is the index of the numbers where the lists are the same values.\n    '''\n    count = 0\n    for i,j in zip(num1, num2):\n        if i == j:\n            count += 1\n        else:\n            break\n    return count\n    \ndef count_all(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count all numbers that are present in both lists.\n    '''\n    return sum(map(count_all_pair, nums1, nums2))\n    \ndef count_all_pair(num1, num2):\n    '''\n    The input is defined as a list of numbers. The output is the number of numbers that are present in both lists.\n    '''\n    count = 0\n    for i,j in zip(num1, num2):\n        if i == j:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #OR\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base:\n        sum += base % 10\n        base = int(base / 10)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_num = 0\n    for i in range(len(base)):\n        power_num += int(base[i])**power\n    return power_num\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    if base == 1:\n        return power\n    \n    return base + power_base_sum(base - 1, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    for i in range(len(base)):\n        sum_digits += int(base[i])\n    return sum_digits ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power <= 0:\n        return 1\n    return base * power_base_sum(base, power - 1)"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base!= 0:\n        # Increase base by 1\n        base = base * 10\n        # Divide the base by 10 and add the remainder to the sum\n        sum += base % 10\n        base //= 10\n    # Divide by 10 to divide the power by 10 and add the remainder\n    return sum % power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < base:\n        return 0\n    elif base == 10:\n        return power\n    else:\n        return power_base_sum(base, power - base) + power_base_sum(base, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while base:\n        result += base%10\n        base = int(base/10)\n    if power < 0:\n        result += 1\n    while result > power:\n        result -= 10\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base:\n        sum += int(base)\n        base = int(base) % 10\n    sum += power\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_numbers = []\n    power_numbers.append(power)\n    for i in range(power + 1):\n        power_numbers.append(i)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[=\\s]*\\s*\\w+)',text1)\n    return data\n    \ndef extract_date(text1):\n    '''\n    Write a function to extract date from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[-]\\s*\\w+)',text1)\n    return data\n    \ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotation marks \".\" of the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)',text1)\n    return data\n    \ndef extract_money(text1):\n    '''\n    Write a function to extract money from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\d+)',text1)\n    return data\n    \ndef extract_money2(text1):\n    '''\n    Write a function to extract money from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\d+)',text1)\n    return data\n    \ndef extract_name(text1):\n    '''\n    Write a function to extract name from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)',text1)\n    return data\n    \ndef extract_number2(text1):\n    '''\n    Write a function to extract number from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\d+)',text1)\n    return data\n    \ndef extract_telephone(text1):\n    '''\n    Write a function to extract telephone from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\d+)\\s*',text1)\n    return data\n    \ndef extract_user_name(text1):\n    '''\n    Write a function to extract username from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_user_phone(text1):\n    '''\n    Write a function to extract phone from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\d+)\\s*',text1)\n    return data\n    \ndef extract_country(text1):\n    '''\n    Write a function to extract country from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_city(text1):\n    '''\n    Write a function to extract city from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_address(text1):\n    '''\n    Write a function to extract address from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_address2(text1):\n    '''\n    Write a function to extract address from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_user_email(text1):\n    '''\n    Write a function to extract email from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_user_gender(text1):\n    '''\n    Write a function to extract gender from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_is_private(text1):\n    '''\n    Write a function to extract is_private from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_phone_number(text1):\n    '''\n    Write a function to extract phone number from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_vat(text1):\n    '''\n    Write a function to extract vat from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_position(text1):\n    '''\n    Write a function to extract position from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_industry(text1):\n    '''\n    Write a function to extract industry from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_industries(text1):\n    '''\n    Write a function to extract industries from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_location(text1):\n    '''\n    Write a function to extract location from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_message(text1):\n    '''\n    Write a function to extract message from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_message_line(text1):\n    '''\n    Write a function to extract message from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_subject(text1):\n    '''\n    Write a function to extract subject from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^\\s]*)\\s*[.]\\s*\\w+)\\s*',text1)\n    return data\n    \ndef extract_titles(text1):\n    '''\n    Write a function to extract titles from the given string.\n    '''\n    data = re.findall(r'^\\s*(([^"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotations = [\"(\", \")\"]\n    for quot in quotations:\n        text1 = text1.replace(quot, \" \")\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    dic = {}\n    \n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            dic[i] = text1[i]\n            \n    return dic\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\w+\\'', text1)\n    return result\ndef extract_question(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\'\\w+\\'', text1)\n    return result\ndef extract_answer(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\'\\w+\\'?\\w+\\'', text1)\n    return result\ndef remove_question_answer(text):\n    '''\n    Write a function to remove values between quotation marks \" \" from the given string.\n    '''\n    result = re.sub(r'\\'', \"\", text)\n    result = re.sub(r'\"', \"\", result)\n    return result\ndef format_answer(text):\n    '''\n    Write a function to format the given value into the given string format.\n    '''\n    result = re.sub(r'\\'', \"\", text)\n    result = re.sub(r'\"', \"\", result)\n    return result\ndef compare(a, b):\n    '''\n    Write a function to compare two given values.\n    '''\n    if len(a)>len(b):\n        return 1\n    elif len(a)<len(b):\n        return -1\n    elif a==b:\n        return 0\n    else:\n        return -1\ndef clean_string(text):\n    '''\n    Write a function to clean the given value to their proper format.\n    '''\n    result = text.lower()\n    result = remove_question_answer(result)\n    result = remove_question_answer(result)\n    result = re.sub(r'\\'', \"\", result)\n    result = re.sub(r'\"', \"\", result)\n    result = remove_question_answer(result)\n    result = remove_question_answer(result)\n    result = re.sub(r'\\?', \"\", result)\n    result = re.sub(r'\\!', \"\", result)\n    result = re.sub(r'\\|', \"\", result)\n    result = re.sub(r'\\;', \"\", result)\n    result = re.sub(r'\\s', \"\", result)\n    result = re.sub(r'[^\\w\\s\\d\\n]','', result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\n','', result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result = re.sub(r'\\s', \" \", result)\n    result "
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text_string = re.sub(r\"'''\", '\"', text1)\n    text_string = re.sub(r\"'''\", '\"', text_string)\n    return text_string\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = r\"[^\\s{}]+\"\n    regex = regex.replace('\"','')\n    text2 = re.sub(regex,\"\",text1)\n    regex2 = r\"(?<=\\w):\"\n    regex2 = regex2.replace('\"','')\n    text3 = re.sub(regex2,\"\",text2)\n    return text3\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    arr = []\n    quotation = r'\\([^()]*\\)'\n    text = re.findall(quotation, text1)\n    text =''.join(text)\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace(',', '')\n    for i in text:\n        if i in ['(', ')','']:\n            arr.append(i)\n    return arr\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.replace('\\n', '')\n    text = text.replace('\\t', '')\n    text = text.replace('\\'', '')\n    text = text.replace('\"', '')\n    text = text.replace('\\\"', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    str = re.findall(r'\\w+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]+\\s[,]"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.sub('[{}]+', '', text1)\n    text1 = re.sub('(\\s)+','', text1)\n    text1 = text1.replace(\"\\n\", \" \")\n    return text1\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n    # Get the first element of the tuple\n    t_1 = test_tup[0]\n    # Get the last element of the tuple\n    t_N = test_tup[-1]\n    # Multiply the first element with the rest of the elements of the tuple\n    return t_1, t_N*t_N\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # your code goes here\n    return tuple(map(lambda x: x*x, test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Create a dictionary of element to its index.\n    index = {}\n    for i in range(len(test_tup)):\n        index[test_tup[i]] = i\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = tuple(map(lambda x: int(x) * int(x), test_tup))\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    x = 0\n    for i in range(len(test_tup)):\n        x += test_tup[i] * test_tup[i+1]\n    return x\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2, t_3 = test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i * t_i for i, t_i in zip(test_tup, test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply(t_1,t_2):\n        return tuple(map(lambda a: a * t_2,t_1))\n    def multiply_elements(tup):\n        return tuple(map(lambda a: a * tup[0],tup[1:]))\n    tup_1 = list(test_tup)\n    tup_1.insert(0,tup_1[0])\n    tup_1 = multiply(tup_1,[])\n    tup_1 = multiply_elements(tup_1)\n    return tup_1\n    \ndef is_palindrome(test_tup):\n    '''\n    A tuple of ints is palindrome if it contains the same elements as the tuple, i.e., it is the same order of the elements in the tuple. \n    A tuple of non-negative integers is palindrome if it contains the same elements as the tuple, i.e., it is the same order of the elements in the tuple.\n    '''\n    def is_palindrome(tup):\n        tup = tuple(tup)\n        tup_len = len(tup)\n        if tup_len == 0:\n            return True\n        elif tup_len == 1:\n            return True if tup[0] == tup[0] else False\n        elif tup_len == 2:\n            if tup[0] == tup[1]:\n                return True\n            else:\n                return False\n        else:\n            if tup[0] == tup[1] and tup[1] == tup[2]:\n                return True\n            else:\n                return False\n    for i in range(0,len(test_tup)):\n        tup = test_tup[i]\n        if is_palindrome(tup):\n            test_tup[i] = multiply(tup,[])\n    return test_tup\ndef is_palindrome_list(test_tup):\n    '''\n    A tuple of non-negative integers is palindrome if it contains the same elements as the tuple, i.e., it is the same order of the elements in the tuple. \n    A tuple of non-negative integers is palindrome if it contains the same elements as the tuple, i.e., it is the same order of the elements in the tuple.\n    '''\n    def is_palindrome(tup):\n        tup = tuple(tup)\n        tup_len = len(tup)\n        if tup_len == 0:\n            return True\n        elif tup_len == 1:\n            return True if tup[0] == tup[0] else False\n        elif tup_len == 2:\n            if tup[0] == tup[1]:\n                return True\n            else:\n                return False\n        else:\n            if tup[0] == tup[1] and tup[1] == tup[2]:\n                return True\n            else:\n                return False\n    for i in range(0,len(test_tup)):\n        tup = test_tup[i]\n        if is_palindrome(tup):\n            test_tup[i] = multiply(tup,[])\n    return test_tup\n    \ndef multiply_numbers_list(test_tup):\n    '''\n    Write a function that takes as input a tuple of non-negative integers and returns an array of numbers, where each number is the product of the two numbers in the tuple.\n    '''\n    test_tup = multiply_numbers(test_tup)\n    test_tup = multiply_numbers_list(test_tup)\n    return test_tup\ndef multiply_numbers(test_tup):\n    '''\n    Write a function that takes as input a tuple of non-negative integers and returns an array of numbers, where each number is the product of the two numbers in the tuple.\n    '''\n    test_tup = list(test_tup)\n    tup_len = len(test_tup)\n    if tup_len == 0:\n        return []\n    elif tup_len == 1:\n        return [test_tup[0]]\n    elif tup_len == 2:\n        return [test_tup[0] * test_tup[1]]\n    else:\n        test_tup = test_tup[:-1]\n        test_tup = multiply_numbers(test_tup)\n        return test_tup\ndef is_prime(test_tup):\n    '''\n    A tuple of non-negative integers is prime if it contains only 2 distinct elements, i.e., it is the same order of the elements in the tuple.\n    '''\n    def is_prime(tup):\n        tup = tuple(tup)\n        tup_len = len(tup)\n        if tup_len == 0:\n            return True\n        elif tup_len == 1:\n            return True if tup[0] == tup[0] else False\n        elif tup_len == 2:\n            if tup[0] == tup[0]:\n                return True\n            else:\n                return False\n        else:\n            for i in range(0,tup_len-2):\n                if tup[i] == tup[i+1] and tup[i+1]!= 0:\n                    return True\n            return False\n    for i in range(0,len(test_tup)):\n        tup = test_tup[i]\n        if is_prime(tup):\n            test_tup[i] = multiply(tup,[])\n    return test_tup\ndef is_prime_list(test_tup):\n    '''\n    A tuple of non-negative integers is prime if it contains only 2 distinct elements, i.e., it is the same order of the elements in the tuple.\n    '''\n    test_tup = multiply_numbers_list(test_tup)\n    test_tup = multiply_numbers(test_tup)\n    test_tup = is_prime(test_tup)\n    test_tup = list(test_tup)\n    test_tup = multiply_numbers_list(test_tup)\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)-1):\n        res = res + (test_tup[i],)\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = t_2 = t_3 = t_4 = 0\n    for i in range(len(test_tup)-1):\n        t_1 = t_1 + test_tup[i]\n        t_2 = t_2 + test_tup[i+1]\n        t_3 = t_3 + test_tup[i]*test_tup[i+1]\n        t_4 = t_4 + test_tup[i]*test_tup[i+1]*test_tup[i+2]\n    return (t_1,t_2,t_3,t_4)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #for loop in range of len(lst)\n    for i in range(len(lst1)):\n        lst1[i] = lst1[i] + lst2[i]\n    #return the ndarray object\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = 0\n    for i in lst1:\n        result += i\n    for i in lst2:\n        result += i\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # WRITE YOUR CODE HERE\n    s=0\n    for i in lst1:\n        s+=i\n    for i in lst2:\n        s+=i\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    out_list = []\n    for i in range(len(lst1)):\n        out_list.append(lst1[i] + lst2[i])\n    return out_list\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in range(len(lst1)):\n        sum = sum + lst1[i] + lst2[i]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(lst1[i] + lst2[i]) for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(lst1[i]+lst2[i]) for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        return [lst1[0]+lst2[0]]+sum_list(lst1[1:],lst2[1:])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    list1=[]\n    for i in range(len(lst1)):\n        list1.append(lst1[i]+lst2[i])\n    return list1\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n    "
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = groupby(nums, key=lambda x: x*x)\n    for group in list(grouped):\n        if len(group) > 1:\n            return nums\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    set_nums = set(nums)\n    #Using the set, each element is in a different set, if another element is in the same set, remove it.\n    #Otherwise, add it to the set.\n    set_diff = set_nums.difference(set(nums))\n    #Using the set, if there are any duplicate elements, remove duplicate elements from the set.\n    #Otherwise, add the element to the set.\n    if set_diff:\n        nums = list(set_diff)\n        nums.sort()\n        return nums\n    else:\n        nums.append(nums.pop(0))\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # find the group of elements in nums\n    # remove duplicate\n    # return the group\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums)"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    #print(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set(nums)\n    nums_set = list(nums_set)\n    for i in range(len(nums)):\n        if nums[i] in nums_set:\n            nums_set.remove(nums[i])\n    return nums_set\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # iterate through the list\n    # if the current number is equal to the previous one\n    # return True\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #initialize empty list\n    duplicates = []\n    #iterate through the list\n    for i in range(len(nums)):\n        #if first element of list is the same as the current element, append it to duplicates\n        if nums[i] == nums[i-1]:\n            duplicates.append(nums[i])\n            continue\n        else:\n            #check if the previous element is the same as the current element, if yes append it to the list\n            if nums[i-1] == nums[i]:\n                duplicates.append(nums[i])\n                continue\n            else:\n                return False\n    #return the final list of duplicates\n    return duplicates\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] == nums[i] and j > i:\n                lst.append(nums[j])\n    return lst\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #consecutive duplicate problem\n    # the concept of consecutive duplicate \n    #is to be called by counting the number of \n    #repeating items and then adding those items \n    # together as a single list. \n    # for example, if nums = [1,1,2,2,2,2,2,2] then \n    # after removing, 1,1,2,2,2,2,2,2,2,2,2 \n    # if 2 repeats twice, then it will add 2 to each time \n    # as it repeats 1,1,2,2,2,2,2\n    # this is called the consecutive duplicate problem.\n    if len(set(nums)) == len(nums):\n        return nums\n    else:\n        i = 0\n        for item in nums:\n            if i == 0 or item!= nums[i-1]:\n                nums[i] = nums[i-1]\n            else:\n                i += 1\n                nums[i] = item\n        return nums\n    \ndef group_itr(nums):\n    '''\n    Write a function to group all the elements of a given list.\n    '''\n    # get a list of all the elements\n    nums = list(nums)\n    # sort the list\n    nums.sort()\n    # create a dictionary of groups\n    groups = {}\n    # initialize each key as an empty string\n    for i in range(len(nums)):\n        groups.setdefault(i, []).append(nums[i])\n    # group each key by its value\n    for i in groups:\n        for j in groups[i]:\n            nums[i] = j\n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #sigma = (r**2)/(3*math.pi*h)\n    #print(sigma)\n    #sigma = math.sqrt(sigma)\n    #print(sigma)\n    #print(math.pi)\n    #radius = r\n    #height = h\n    #print(radius)\n    #print(height)\n    #print(math.pi)\n    #radius = r\n    #height = h\n    #print(radius)\n    #print(height)\n    #print(math.pi)\n    \n    return (r**2)/(3*math.pi*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r**2 + r + h**2)**.5\ndef lateralsurface_cylindrical_cone(r,theta,phi):\n    '''\n    Write a function to find the lateral surface area of a cylindrical cone given radius r and theta and phi.\n    '''\n    r2 = r**2 + math.cos(theta) * math.cos(phi)\n    return (r2**2 + r2 + theta**2 + phi**2)**.5\ndef lateralsurface_polycone(r,n):\n    '''\n    Write a function to find the lateral surface area of a polycones given radius r and the number of cones.\n    '''\n    s = 0\n    for i in range(n):\n        s += lateralsurface_cylindrical_cone(r,math.radians(180.0-360.0*i/n),math.radians(180.0))\n    return s\ndef midpoint_cone(r,h,e=0.0001):\n    '''\n    Write a function to compute the midpoint of a cone given its radius r and its height h.\n    The midpoint is calculated by:\n        The midpoint is at the end of the cone\n        The midpoint is at the start of the cone\n        The midpoint is at the middle of the cone\n    '''\n    return (r + (r + e)**(1/2)) / 2\ndef midpoint_cylindrical_cone(r,theta,phi):\n    '''\n    Write a function to compute the midpoint of a cone given its radius r and its height h.\n    The midpoint is calculated by:\n        The midpoint is at the end of the cone\n        The midpoint is at the start of the cone\n        The midpoint is at the middle of the cone\n    '''\n    return (r + r + r**2 + (r + e)**(1/2)) / 2\ndef midpoint_polycone(r,n):\n    '''\n    Write a function to compute the midpoint of a polycones given its radius r and its number of cones.\n    The midpoint is calculated by:\n        The midpoint is at the end of the cone\n        The midpoint is at the start of the cone\n        The midpoint is at the middle of the cone\n    '''\n    s = 0\n    for i in range(n):\n        s += midpoint_cone(r,math.radians(180.0-360.0*i/n))\n    return s\ndef intersection(a,b):\n    '''\n    Write a function to check whether two polynomials in the form ax + by + cz + d = 0.\n    '''\n    x = a * a + b * b\n    y = a * b * b\n    z = a * b\n    d = a * b * c\n    return x * y * z * d\ndef intersection_all(a,b):\n    '''\n    Write a function to check whether two polynomials in the form ax + by + cz + d = 0.\n    '''\n    x = a * a + b * b\n    y = a * b * b\n    z = a * b\n    d = a * b * c\n    return x * y * z * d\ndef maximum(a,b):\n    '''\n    Write a function to find the maximum of two numbers.\n    '''\n    return a + b\ndef minimum(a,b):\n    '''\n    Write a function to find the minimum of two numbers.\n    '''\n    return a - b\ndef curve_length(r,h,n=6):\n    '''\n    Write a function to compute the length of a curve given its radius r and its height h.\n    The curve length is the number of segments in the curve (the number of times that the curve ends)\n    '''\n    return int(math.ceil(h * (math.sqrt(1-r**2))) / (math.sqrt(1-r**2)))\ndef curve_area(r,h,n=6):\n    '''\n    Write a function to compute the area of a curve given its radius r and its height h.\n    The curve area is the product of the number of segments that the curve ends.\n    '''\n    return r**2 * curve_length(r,h,n)\ndef curve_ratio(r,h,n=6):\n    '''\n    Write a function to compute the ratio of a curve given its radius r and its height h.\n    The curve ratio is the product of the number of segments that the curve ends divided by the number of segments in the curve.\n    '''\n    return r**2 * curve_length(r,h,n)/ curve_length(r,h,n)\ndef curve_gradient(r,h,n=6):\n    '''\n    Write a function to compute the gradient of a curve given its radius r and its height h.\n    The curve gradient is the product of the number of segments that the curve ends divided by the number of segments in the curve divided by the number of segments in the curve.\n    '''\n    return r**2 * (curve_length(r,h)/curve_length(r,h,n)) * curve_length(r,h,n)/(curve_length(r,h,n) * curve_length(r,h,n))\ndef curve_intersection(a,b):\n    '''\n    Write a function to check if two curves are intersecting each other.\n    '''\n    return intersection(a,b)\ndef curve_surface_area(r,h,n=6):\n    '''\n    Write a function to compute the surface area of a curve given its radius r and its height h.\n    The surface area is the area of the intersection of two curves.\n    '''\n    return (curve_area(r,h,n) - curve_area(r,h,n-1))\ndef curve_surface_area_inverse(r,h,n=6):\n    '''\n    Write a function to compute the inverse surface area of a curve given its radius r and its height h.\n    The inverse surface area is the area of the intersection of two curves divided by the area of the curve divided by the area of the curve divided by the number of segments in the curve divided by the number of segments in the curve.\n    '''\n    return (curve_area(r,h,n) + curve_area(r,h,n-1)) / (curve_area(r,h,n) * curve_length(r,h,n) / curve_length(r,h,n-1))\ndef curve_surface_ratio(r,h,n=6):\n    '''\n    Write a function to compute the ratio of a curve given its radius r and its height h.\n    The surface ratio is the product of the area of the curve divided by the area of the curve divided by the area of the curve divided by the number of segments in the curve divided by the number of segments in the curve.\n    '''\n    return (curve_area(r,h,n) / curve_area(r,h,n-1)) * curve_length(r,h,n) / curve_length(r,h,n)\ndef curve_surface_area_inverse(r,h,n=6):\n    '''\n    Write a function to compute the inverse surface area of a curve given its radius r and its height h.\n    The inverse surface area is the area of the intersection of two curves divided by the area of the curve divided by the area of the curve divided by the area of the curve divided by the number of segments in the curve divided by the number of segments in the curve.\n    '''\n    return (curve_area(r,h,n) + curve_area(r,h,n-1)) / (curve_area(r,h,n) * curve_length(r,h,n) / curve_length(r,h,n-1))\ndef surface_normal_to_direction(surface_normal):\n    '''\n    Write a function to get the direction of the surface normal in a given direction.\n    '''\n    c = surface_normal.unit()\n    return surface_normal.normalized() * c\ndef surface_normal_to_direction_inverse(surface_normal):\n    '''\n    Write a function to get the direction of the surface normal in a given direction in the direction of the surface normal.\n    '''\n    c = surface_normal.unit()\n    return (surface_normal.normalized("
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Write your code here\n    area = (h*math.tan(math.radians(90-90/2)))*(math.sin(math.radians(90-90/2)) + math.cos(math.radians(90-90/2))*(1-(math.tan(math.radians(90-90/2)))**2))\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (3/4)*(4*math.pi*r*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # theta = theta_radiation(r,h)\n    # print(\"\\t*** here is the area of cone from theta: %s \" % (theta))\n    a = math.pi * (r ** 2)\n    b = h * math.sin(math.pi * r) * math.sin(math.pi * h)\n    c = h * math.sin(math.pi * r) * math.cos(math.pi * h)\n    return (a * c) / (math.sqrt(b))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Convert the input r and h to degrees\n    r = round(r*180/math.pi,2)\n    h = round(h*180/math.pi,2)\n    #Return the area of a cone of radius r and height h\n    return round((math.pi*r**2)*(h**2),2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = math.pi*r*r\n    h=math.sin(h)*h\n    b = math.pi*r*r - h\n    c = math.pi*r*r - (a + b)\n    d = math.pi*r*r - (a - b)\n    e = math.pi*r*r + h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    if r*h >= 1:\n        # print(\"The cone can't be solid with height less than 1. Please enter the height greater than 0.\")\n        return None\n    \n    x = r*math.cos(math.radians(h))\n    y = r*math.sin(math.radians(h))\n    \n    return x*x + y*y*1\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #The area of the cone is a surface of a surface\n    return 0.5*(h**2)*(1+math.cos(math.radians(90-90-r)))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi * r**2)*(h/2)\n    return area\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = \"\"\n    \n    # Go through each character in the string\n    for character in text:\n        # Check if character is a space\n        if character == \" \":\n            # If character is a space, replace it with :\n            result = result + \":\"\n        # Check if character is a comma\n        elif character == \",\":\n            # If character is a comma, replace it with,\n            result = result + \",\"\n        # Check if character is a dot\n        elif character == \".\":\n            # If character is a dot, replace it with.\n            result = result + \".\"\n        # Check if character is a space\n        else:\n            # If character is not a space, replace it with :\n            result = result + character\n    \n    # Remove any remaining leading spaces from the result\n    result = re.sub(\" +\", \"\", result)\n    \n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    text = text.replace(\" \",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")\n    text = text.replace(\".\",\": \")"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r\"[.,:;?!'\\n]*\"\n    matcher = re.compile(pattern, re.M)\n    text = re.sub(pattern, r\"\\1: \", text)\n    text = re.sub(pattern, r\": \", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = re.sub(pattern, r\"\\n\", text)\n    text = r"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'(\\s|,|\\.)+', ':', text)\n    text = re.sub(r'(\\?|!|\\*|\\|\\||\\.|\\;|\\=)', ':', text)\n    text = re.sub(r'(\\.)+', ':', text)\n    text = re.sub(r'(\\|)', ':', text)\n    text = re.sub(r'(\\:)', ':', text)\n    text = re.sub(r'(\\,|\\?|\\!|\\*|\\|\\||\\;|\\=)', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"[^a-zA-Z\\s]\", \":\", text)\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\d+\\s\", \":\", text)\n    text = re.sub(r\"\\w+\\s\", \":\", text)\n    text = re.sub(r\"[^\\w\\s]\", \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|\\n|\\r|\\t|,|:|;|-|\\_|\\+|\\||\\.|~|@|\\[|\\]|\\(|\\)')\n    return pattern.sub(r'\\1: ', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace('-',':')\n    text = text.replace('_','')\n    text = text.replace('.',':')\n    text = text.replace('[','::')\n    text = text.replace(']','::')\n    text = text.replace('{','::')\n    text = text.replace('}','::')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('  ', ':')\n    text = text.replace('  ', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace(' ', ':')\n    text = text.replace('|', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace('|', ':')\n    text = text.replace('(', ':')\n    text = text.replace(')', ':')\n    text = text.replace('\\n', ':')\n    text = text.replace('\\t', ':')\n    text = text.replace('\\r', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('[', ':')\n    text = text.replace(']', ':')\n    text = text.replace('(', ':')\n    text = text.replace(')', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('{', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('[\\xad]', ':')\n    text = text.replace('[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('%', ':')\n    text = text.replace('%', ':')\n    text = text.replace('+', ':')\n    text = text.replace('+', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace(' ', ':')\n    text = text.replace('(', ':')\n    text = text.replace(')', ':')\n    text = text.replace('\\n', ':')\n    text = text.replace('\\t', ':')\n    text = text.replace('\\r', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('(', ':')\n    text = text.replace(')', ':')\n    text = text.replace('[', ':')\n    text = text.replace(']', ':')\n    text = text.replace('[\\xad]', ':')\n    text = text.replace('[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('\\\\', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('[\\xad]', ':')\n    text = text.replace('[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('\\\\', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('\\xad', ':')\n    text = text.replace('[\\xad]', ':')\n    text = text.replace('[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace('{[\\xad]', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace(']\\xad', ':')\n    text = text.replace('{', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace('(',':')\n    text = text.replace(')',':')\n    text = text.replace('{',':')\n    text = text.replace('}',':')\n    text = text.replace('[',':')\n    text = text.replace(']',':')\n    text = text.replace('{',':')\n    text = text.replace('}',':')\n    text = text.replace('\"',':')\n    text = text.replace(\"'\",':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    # Replace all spaces with a colon\n    text = text.replace(' ',':')\n    \n    # Replace all commas with a space\n    text = text.replace(',',' ')\n    \n    # Replace all dots with a colon\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text.replace('.',':')\n    \n    # Replace all double dots with a space\n    text = text"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A)-1\n    while(i<j):\n        mid = (i+j)//2\n        if(A[mid] == x):\n            return mid\n        if(A[mid] < x):\n            i = mid+1\n        else:\n            j = mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # keep track of array\n    left = 0\n    right = len(A) - 1\n    \n    # use binary search to find the index of the first occurence of x\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    low, high = 0, len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low+high)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        raise IndexError('The array is empty')\n    # Step 1: Check if x is present in the array\n    for i in range(0, len(A)):\n        if A[i] == x:\n            return i\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    # Pick the smallest value in array and find the index of that value\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pas"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[x] == x:\n        return x\n    if A[x] < x:\n        return find_first_occurrence(A, x)\n    else:\n        return find_first_occurrence(A, A[x])\n    \n    \ndef find_second_occurrence(A, x):\n    '''\n    Write a function to find the index of the second occurrence of a given number in a sorted array.\n    '''\n    if A[x] == x:\n        return x\n    if A[x] < x:\n        return find_second_occurrence(A, x)\n    else:\n        return find_second_occurrence(A, A[x])\n    \n    \ndef count_positives(A):\n    '''\n    Write a function to count the number of positive values in a sorted array.\n    '''\n    return sum(map(lambda x: 1 if x > 0 else 0, A))\n    \ndef count_negatives(A):\n    '''\n    Write a function to count the number of negative values in a sorted array.\n    '''\n    return sum(map(lambda x: 1 if x < 0 else 0, A))\n    \ndef binary_search(A, x):\n    '''\n    Write a function to find the index of the number x in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = int((low + high) / 2)\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n    return None\n    \ndef count_matching(A, x):\n    '''\n    Write a function to count the number of positive and negative values that match a given number.\n    '''\n    matching = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            matching += 1\n    return matching\n    \n    \ndef binary_search_slow(A, x):\n    '''\n    Write a function to find the index of the number x in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = int((low + high) / 2)\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n    return None\n    \ndef smallest_or_greatest_element(A):\n    '''\n    Write a function to return the smallest number in a sorted array.\n    '''\n    return A[0]\n    \ndef largest_or_smallest_element(A):\n    '''\n    Write a function to return the largest number in a sorted array.\n    '''\n    return A[-1]\n    \n    \ndef bin_search(A, x, lo, hi):\n    '''\n    Write a function that finds the index of the element x in a sorted array.\n    '''\n    if lo == hi:\n        return None\n    mid = int((lo + hi) / 2)\n    if A[mid] == x:\n        return mid\n    elif A[mid] > x:\n        return bin_search(A, x, lo, mid - 1)\n    elif A[mid] < x:\n        return bin_search(A, x, mid + 1, hi)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    arr.sort()\n    ans = 0\n    for i in range(0, n):\n        if i == 0:\n            for j in range(0, n - i):\n                ans += arr[j + i]\n            continue\n        if i == n - 1:\n            for j in range(i - 1, -1, -1):\n                ans += arr[j]\n        else:\n            for j in range(i, n):\n                ans += arr[j]\n        continue\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # 1. Creating the list of sublists\n    sublists = []\n    for i in range(len(arr)):\n        sublists.append(arr[i:])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        prod = arr[0]\n        for i in range(1, len(arr)):\n            prod = prod * arr[i]\n        return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_list = []\n    for i in range(len(arr)):\n        sum_list.append(0)\n        for j in range(i, len(arr)):\n            sum_list[i] += arr[j]\n    return sum(sum_list)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def isPalindrome(s):\n        for i in range(int(len(s)/2)):\n            if s[i]!= s[-1-i]:\n                return False\n        return True\n    \n    def add_two_numbers(num_1, num_2):\n        sum = 0\n        for i in range(len(num_1)):\n            sum += num_1[i] * num_2[i]\n        return sum\n    \n    def isSubstring(s):\n        for i in range(len(s)):\n            if isPalindrome(s[:i+1]):\n                if isPalindrome(s[i+1:]):\n                    return True\n        return False\n    \n    def isSubstring2(s):\n        for i in range(len(s)):\n            if isPalindrome(s[i:]):\n                if isPalindrome(s[:i]):\n                    return True\n        return False\n        \n    total = 0\n    for i in range(len(arr)):\n        total += add_two_numbers(arr[i], arr[i])\n    \n    if total == 0:\n        return True\n    \n    elif isSubstring2(total) == True:\n        return True\n    \n    else:\n        return False\n        \n    \nprint(sum_Of_Subarray_Prod([2, 4, 3, 6, 9]))\nprint(sum_Of_Subarray_Prod([2, 4, 3, 6, 1]))\nprint(sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]))\nprint(sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18]))"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum += arr[i]*arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    s = 0\n    p = 1\n    n = len(arr)\n    m = len(arr[0])\n    for i in range(n):\n        if arr[i][0] == arr[i][1]:\n            for j in range(1,m):\n                if arr[i][j] == arr[i][j-1]:\n                    s = s + arr[i][j]\n                else:\n                    s = s + arr[i][j] * p\n                p = 1\n        else:\n            s = s + arr[i][0] * p\n            p = 1\n        p = p * len(arr[i])\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # set of unique elements in the given list\n    set_of_elements = set(arr)\n    # set of product of all possible subarrays\n    sum_set_prod_arr = set()\n    # for every element in the given list\n    for i in set_of_elements:\n        # find subarrays of the given element\n        arr_subarrays = []\n        for j in arr:\n            if i == j:\n                arr_subarrays.append(j)\n        # sum all subarrays with current element\n        sum_set_prod_arr.update(sum(arr_subarrays))\n    return sum(sum_set_prod_arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if j!=i:\n                sum=sum+arr[i]+arr[j]\n    return sum\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Your code here\n    # convert binary numbers to decimal numbers\n    dec = [int(b) for b in bin(n)[2:]]\n    dec[0] = n & 0xffff\n    dec[-1] = (n >> 16) & 0xffff\n    dec[1] = (n >> 8) & 0xffff\n    dec[2] = (n >> 0) & 0xffff\n    # convert it to bits\n    bits = []\n    for i in dec:\n        bits.append(bin(i)[2:].zfill(8))\n    # add the first bit of every bit\n    for bit in bits:\n        bit = bit + '0'\n        # convert it to an integer\n        i = int(bit, 2)\n        # if it's the first bit\n        if i == 0:\n            # set it as the first bit\n            return\n    # if the last bit\n    if bits[-1] == '1':\n        # if it's the last bit\n        return\n    # if it's not\n    else:\n        # set the last bit\n        return\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return bin(n)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    swap = 0\n    while n > 0:\n        swap = n & 1\n        n = n >> 1\n    return swap\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    lst = list(n)\n    lst.pop(0)\n    lst.pop()\n    n = ''.join(lst)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = 0\n    y = 0\n    while n!= 0:\n        n, x = divmod(n, 2)\n        if x == 1:\n            y = n\n    print(y)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n:\n        n = n & 0xFF\n        n = n | 0x80\n        n = n | 0x40\n    else:\n        n = n & 0xFF\n        n = n | 0x80\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    x = bin(n)[2:]\n    x = x[:len(x) - (len(x) % 8)]\n    if x.count('1')!= len(x) % 8:\n        if x.count('0')!= len(x) % 8:\n            print(f\"Invalid number, number is not a multiple of 8.\")\n            return\n        else:\n            x = x[len(x) - len(x) % 8:]\n            if len(x) > 1:\n                x = x + '0'\n    else:\n        x = x[len(x) - len(x) % 8:]\n        if len(x) > 1:\n            x = x + '1'\n    return x\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    # https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits-python-code-examples/\n    # Python examples to demonstrate the function.\n    num = (n & 0xff) + (n >> 8)\n    if num < 16:\n        return num\n    else:\n        if num % 2:\n            return num + 1\n        else:\n            return num\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    c = n & 0b00000000\n    b = n >> 8\n    a = n >> 16\n    n = c ^ (1 << 32)\n    n = a ^ b\n    return n\n    \ndef main():\n    #constants \n    number = 0\n    number_len = 0\n    middle = 0\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bits = n & 1\n    n >>= 1\n    if bits == 1:\n        return n\n    else:\n        return ~(n & 1)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while a[left] < x and right >= 0:\n        if a[right] < x:\n            right -= 1\n        else:\n            a[left], a[right] = a[right], a[left]\n            left += 1\n    if a[left] == x:\n        a[left], a[right] = a[right], a[left]\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    '''\n    --Constraints--\n        -Input: a, x\n        -Output: the index where the value of x should be inserted\n    '''\n    if a == None or x == None:\n        return None\n    elif a < x:\n        return bisect.bisect_left(a, x, 'left')\n    else:\n        return bisect.bisect_left(a, x, 'right')\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # code here\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    # Find the index of the value x in a\n    i = bisect.bisect_left(a, x)\n    # If the index isn't at the end of a,\n    # then insert it\n    if i < n:\n        # Update the end of the list\n        a[i] = x\n        # Replace the value at the end of a\n        # with the new x value\n        a[i+1:] = [x]\n        return i\n    # If the index is the end of a,\n    # then we need to return the index of the\n    # value x\n    return n-1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    # Find the index of the value x in a\n    i = bisect.bisect_right(a, x)\n    # If the index isn't at the end of a,\n    # then insert it\n    if i < n:\n        # Update the end of the list\n        a[i] = x\n        # Replace the value at the end of a\n        # with the new x value\n        a[i+1:] = [x]\n        return i\n    # If the index is the end of a,\n    # then we need to return the index of the\n    # value x\n    return n-1\n    \ndef find_min_in_list(a):\n    '''\n    Write a function to find the minimum value in a sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the left index\n    left = left_insertion(a, a[0])\n    # Find the right index\n    right = right_insertion(a, a[-1])\n    # Find the minimum value in the list\n    if left < right:\n        # Compare the values in the lists\n        i = bisect.bisect_left(a, a[left])\n        j = bisect.bisect_right(a, a[right])\n        # Compare the values\n        if a[i] < a[j]:\n            return a[i]\n        else:\n            return a[j]\n    else:\n        return a[right]\n    \ndef find_max_in_list(a):\n    '''\n    Write a function to find the maximum value in a sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the left index\n    left = left_insertion(a, a[0])\n    # Find the right index\n    right = right_insertion(a, a[-1])\n    # Find the maximum value in the list\n    if left < right:\n        # Compare the values in the lists\n        i = bisect.bisect_left(a, a[left])\n        j = bisect.bisect_right(a, a[right])\n        # Compare the values\n        if a[i] > a[j]:\n            return a[i]\n        else:\n            return a[j]\n    else:\n        return a[right]\n    \n    "
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x == 0:\n        return 0\n    else:\n        i = bisect.bisect_left(a,x)\n        if i==0:\n            return i\n        else:\n            if a[i-1]<x:\n                return i-1\n            else:\n                return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while i < len(a):\n        if a[i] < x:\n            a.insert(i, x)\n            i = len(a)\n        else:\n            i = i + 1\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while right > left:\n        mid = left + (right - left) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x > a[0]:\n        return 0\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left_idx = bisect.bisect_left(a, x)\n    return left_idx\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.findall(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return any(re.match(regex, string) for string in string.lower())\n    \ndef main():\n    '''\n    Write your own main function here.\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    else: \n        return False\ndef upper_check_str(string): \n    '''\n    Write a function to check whether the given string is upper case \n    '''\n    return string.isupper()\ndef lower_check_str(string): \n    '''\n    Write a function to check whether the given string is lower case \n    '''\n    return string.islower()\ndef phone_check_str(string): \n    '''\n    Write a function to check whether the given string is phone number \n    '''\n    return string.isdigit()\ndef check_age(string): \n    '''\n    Write a function to check whether the given string is age or not\n    '''\n    return string.isnumeric()\ndef is_digit_check_str(string): \n    '''\n    Write a function to check whether the given string is digit or not\n    '''\n    return string.isdigit()\ndef is_vowel_check_str(string): \n    '''\n    Write a function to check whether the given string is vowel or not\n    '''\n    return string.isupper() and string.islower() and string.isalpha() and string.isdigit()\ndef is_valid_input(string): \n    '''\n    Write a function to check whether the given string is valid or not\n    '''\n    if is_digit_check_str(string) and check_age(string) and upper_check_str(string) and lower_check_str(string) and phone_check_str(string) and not(is_vowel_check_str(string)): \n        return True\n    else: \n        return False\ndef phone_checker(): \n    '''\n    Write a function to check the valid phone number\n    '''\n    phone = input('Enter the phone number in the format (12-34-5678): ')\n    if not is_valid_input(phone): \n        print('Invalid phone number')\n        return phone_checker()\n    else: \n        return phone \ndef first_name_checker(string): \n    '''\n    Write a function to check whether the given string is first name or not\n    '''\n    if len(string) >= 8 and not(check_age(string)): \n        return True \n    else: \n        return False\ndef last_name_checker(string): \n    '''\n    Write a function to check whether the given string is last name or not\n    '''\n    if len(string) >= 8 and not(check_age(string)): \n        return True \n    else: \n        return False\ndef user_checker(string): \n    '''\n    Write a function to check whether the given string is user or not\n    '''\n    if len(string) >= 7 and not(check_age(string)): \n        return True \n    else: \n        return False\ndef user_name_checker(string): \n    '''\n    Write a function to check whether the given string is user name or not\n    '''\n    if len(string) >= 7 and not(check_age(string)): \n        return True \n    else: \n        return False\ndef user_age_checker(string): \n    '''\n    Write a function to check whether the given string is user age or not\n    '''\n    if len(string) >= 7 and not(check_age(string)): \n        return True \n    else: \n        return False\ndef name_checker(string): \n    '''\n    Write a function to check whether the given string is user name or not\n    '''\n    if len(string) >= 7 and not(check_age(string)): \n        return True \n    else: \n        return False\ndef is_space_checker(string): \n    '''\n    Write a function to check whether the given string is space or not\n    '''\n    if check_age(string): \n        return True \n    else: \n        return False\ndef is_digit_checker(string): \n    '''\n    Write a function to check whether the given string is digit or not\n    '''\n    if check_age(string): \n        return True \n    else: \n        return False\ndef is_vowel_checker(string): \n    '''\n    Write a function to check whether the given string is vowel or not\n    '''\n    if check_age(string): \n        return True \n    else: \n        return False\ndef is_valid_input_checker(string): \n    '''\n    Write a function to check whether the given string is valid or not\n    '''\n    if is_digit_checker(string) and is_vowel_checker(string) and not(is_space_checker(string)): \n        return True \n    else: \n        return False\ndef cambio_1(string): \n    '''\n    Write a function to check whether the given string is a cambio or not \n    '''\n    if len(string) < 3: \n        return False\n    else: \n        if not(is_valid_input_checker(string)): \n            return False\n        if not(check_age(string)): \n            return False\n        if not(upper_check_str(string)): \n            return False\n        if not(lower_check_str(string)): \n            return False\n        if not(phone_check_str(string)): \n            return False\n        if not(first_name_checker(string)): \n            return False\n        if not(last_name_checker(string)): \n            return False\n        if not(user_checker(string)): \n            return False\n        if not(user_name_checker(string)): \n            return False\n        if not(user_age_checker(string)): \n            return False\n        if not(name_checker(string)): \n            return False\n        if not(is_space_checker(string)): \n            return False\n        if not(is_digit_checker(string)): \n            return False\n        if not(is_vowel_checker(string)): \n            return False\n        if not(is_valid_input(string)): \n            return False\n        else: \n            return True\ndef cambio_2(string): \n    '''\n    Write a function to check whether the given string is a cambio or not \n    '''\n    if len(string) < 3: \n        return False\n    else: \n        if not(is_valid_input_checker(string)): \n            return False\n        if not(check_age(string)): \n            return False\n        if not(upper_check_str(string)): \n            return False\n        if not(lower_check_str(string)): \n            return False\n        if not(phone_check_str(string)): \n            return False\n        if not(first_name_checker(string)): \n            return False\n        if not(last_name_checker(string)): \n            return False\n        if not(user_checker(string)): \n            return False\n        if not(user_name_checker(string)): \n            return False\n        if not(user_age_checker(string)): \n            return False\n        if not(name_checker(string)): \n            return False\n        if not(is_space_checker(string)): \n            return False\n        if not(is_digit_checker(string)): \n            return False\n        if not(is_vowel_checker(string)): \n            return False\n        if not(is_valid_input(string)): \n            return False\n        else: \n            return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'AEIOU':\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].lower() in ['a', 'e', 'i', 'o', 'u']:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['A','E','I','O','U']\n    for char in string:\n        if char in vowels:\n            return True\n        else:\n            return False\ndef check_num(num):\n    '''\n    Write a function to check whether the given number is a number.\n    '''\n    for char in str(num):\n        if char not in ['0','1','2','3','4','5','6','7','8','9']:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return 1 + geometric_sum(n - 1)\n    \n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    return 1 + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # TODO: define this function so that it returns the sum of the geometric_sum of 2, 3 and 4\n    return ((n*(n+1))/2)\n    # return n * (n + 1) / 2\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = n \n    while k > 0: \n        if (k % 3 == 0): \n            return (k) \n        k = k / 3\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    lst=[]\n    max=0\n    for i in range(1,(math.sqrt(n))+1):\n        if n%i==0:\n            if n//i>max:\n                max=n//i\n                index=i\n    lst.append(index)\n    return lst\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n < 3):\n        return 0\n    n_digits = math.floor(math.log10(n))\n    s = 0\n    for i in range(n_digits, -1, -1):\n        if(n % (10 ** i) == 0):\n            s = i\n            break\n    return s\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0:\n            return (n / i)\n    return n + 1\ndef find_Index2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    This function is called recursive function.\n    '''\n    if n < 10:\n        return n\n    else:\n        return (n % 10) + find_Index2(n // 10)\ndef find_Index_C(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    This function is called a counter-based function.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index_C(n // 10)\ndef count_digits(n):\n    '''\n    This is a function to find the count of digits in a number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n % 10) + count_digits(n // 10)\ndef find_Index3(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    This function is called a counter-based function.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index3(n // 10)\ndef count_digits2(n):\n    '''\n    This is a function to find the count of digits in a number.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + count_digits2(n // 10)\ndef count_digits3(n):\n    '''\n    This is a function to find the count of digits in a number. \n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + count_digits3(n // 10)\ndef find_Index_C2(n):\n    '''\n    This is a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index_C2(n // 10)\ndef count_digits3_C(n):\n    '''\n    This is a function to find the count of digits in a number. \n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + count_digits3_C(n // 10)\ndef find_Index_C3(n):\n    '''\n    This is a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index_C3(n // 10)\ndef sum_digits(n):\n    '''\n    This is a python function to find the sum of digits in a number.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + sum_digits(n // 10)\ndef find_Index_C4(n):\n    '''\n    This is a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index_C4(n // 10)\ndef count_digits4(n):\n    '''\n    This is a function to find the count of digits in a number.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + count_digits4(n // 10)\ndef count_digits5(n):\n    '''\n    This is a function to find the count of digits in a number. \n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + count_digits5(n // 10)\ndef find_Index_C6(n):\n    '''\n    This is a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index_C6(n // 10)\ndef count_digits6(n):\n    '''\n    This is a function to find the count of digits in a number. \n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + count_digits6(n // 10)\ndef find_Index_C7(n):\n    '''\n    This is a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index_C7(n // 10)\ndef count_digits7(n):\n    '''\n    This is a function to find the count of digits in a number. \n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + count_digits7(n // 10)\ndef find_Index_C8(n):\n    '''\n    This is a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index_C8(n // 10)\ndef count_digits8(n):\n    '''\n    This is a function to find the count of digits in a number.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + count_digits8(n // 10)\ndef find_Index_C9(n):\n    '''\n    This is a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index_C9(n // 10)\ndef sum_digits8(n):\n    '''\n    This is a function to find the sum of digits in a number.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + sum_digits8(n // 10)\ndef find_Index_C10(n):\n    '''\n    This is a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + find_Index_C10(n // 10)\ndef count_digits9(n):\n    '''\n    This is a function to find the count of digits in a number.\n    '''\n    if n == 1:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n - 1) % 10 + count_digit"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    n = str(n)\n    \n    min = n[0]\n    \n    for i in range(len(n)):\n        if n[i] < min:\n            min = n[i]\n            index = i+1\n            \n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # 1. Declare variables\n    # find the smallest number of digits and its index\n    lowerBound = 0\n    upperBound = n\n    ans = -1\n    while (upperBound - lowerBound > 1):\n        # calculate the middle index\n        mid = (lowerBound + upperBound) // 2\n        \n        # find the triangular number\n        triangle = 1\n        for i in range(1, mid + 1):\n            triangle *= i\n        \n        # find the index of the smallest number\n        if (triangle == n):\n            ans = mid\n            break\n        elif (triangle > n):\n            upperBound = mid\n        else:\n            lowerBound = mid\n    \n    return ans\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    while n%10!= 0: \n        n = n//10\n    return n\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 10: \n        return n \n    if n == 10: \n        return 0 \n    for i in range(1, n): \n        if i % 3 == 0 and i % 5 == 0: \n            return i \ndef find_N(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 10: \n        return n \n    for i in range(1, n): \n        if i % 3 == 0 and i % 5 == 0: \n            return i \ndef main(): \n    '''\n    Function to find and print the index of the smallest triangular number with the given number of digits.\n    '''\n    #n = int(input(\"Enter the number of digits: \"))\n    #print(find_Index(n))\n    #print(find_N(n))\n    #print(math.sqrt(4))\n    #print(math.pi)\n    #print(math.log(4))\n    #print(math.e)\n    #print(math.fabs(-1))\n    #print(math.sin(math.radians(60)))\n    print(math.pow(3, 1))\n    print(math.pow(5, 2))\n    print(math.pow(3, -1))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 2: \n        return -1\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for item in test_tup:\n        test_dict[item] = item\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val_dict = {}\n    for index, val in enumerate(test_tup):\n        if index % 2 == 0:\n            key_val_dict[val] = test_tup[index + 1]\n    return key_val_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) == 0:\n        return {}\n    key = test_tup[0]\n    value = test_tup[1:]\n    return {key: value}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dic={}\n    for i in range(len(test_tup)):\n        dic[test_tup[i][0]]=test_tup[i][1]\n    return dic\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(len(test_tup)):\n        result[test_tup[i][0]] = test_tup[i][1]\n    return result\n    \ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dict-to-adjacent-pair-tuple/\n    '''\n    result = []\n    for i in range(len(test_dict)):\n        result.append((test_dict[i][0],test_dict[i][1]))\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict((test_tup[i],i) for i in range(len(test_tup)))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)-1):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val = {}\n    for i in range(0,len(test_tup)):\n        key_val[test_tup[i][0]] = test_tup[i][1]\n    return key_val\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0], test_tup[1]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    def process_tuple(tup):\n        result = {}\n        for i in range(0, len(tup) - 1):\n            key = tup[i]\n            value = tup[i + 1]\n            result[key] = value\n        return result\n    result = process_tuple(test_tup)\n    return result\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    '''\n    This function should take two arguments:\n    1. String s\n    2. String result\n    It should return a boolean value\n    '''\n    for i in range(len(s)) :\n        s[i] = s[i].lower()\n        if s[i] in s :\n            if s[i]!= s[i+1] :\n                return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.lower()\n    if s == s :\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s=s.lower()\n    res=0\n    for i in s :\n        if i == s[0] :\n            res += 1\n        if i == s[-1] :\n            res += 1\n    return res==1\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if type(s)!= type(\"string\") :\n        return False\n    else:\n        for i in range(len(s)) :\n            if s[i]!= s[i+1] :\n                return False\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s :\n        if char not in char_set :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.replace(' ','')\n    return s.replace(s[0],\"\")==s[0]\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = (side[0]**2 + side[1]**2 + side[2]**2)**0.5\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return (3.0 * 3.0)\n    elif side == 2:\n        return (6.0 * 3.0)\n    elif side == 3:\n        return (12.0 * 3.0)\n    elif side == 4:\n        return (24.0 * 3.0)\n    elif side == 5:\n        return (45.0 * 3.0)\n    elif side == 6:\n        return (63.0 * 3.0)\n    elif side == 7:\n        return (72.0 * 3.0)\n    elif side == 8:\n        return (90.0 * 3.0)\n    elif side == 9:\n        return (180.0 * 3.0)\n    elif side == 10:\n        return (270.0 * 3.0)\n    elif side == 11:\n        return (360.0 * 3.0)\n    else:\n        print(\"Please enter a valid side.\")\n        return 0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # If the tetrahedron is a unit cube (5 is a power of 2)\n    if side == '5':\n        return 0.5 * math.pow(side, 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        side = \"a\"\n    elif side == 2:\n        side = \"b\"\n    elif side == 3:\n        side = \"c\"\n    elif side == 4:\n        side = \"d\"\n    elif side == 5:\n        side = \"e\"\n    elif side == 6:\n        side = \"f\"\n    else:\n        side = \"g\"\n    return round(6 * math.pi * (side ** 2), 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_sq = math.sqrt(side[0] ** 2 + side[1] ** 2 + side[2] ** 2)\n    side_inverse = math.sqrt(side[0] * side[1] * side[2])\n    side_triangle = math.sqrt(side_sq + side_inverse)\n    return side_triangle\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side * (side - 1) / 2\n    print(f\"The area of a tetrahedron is: {area}\")\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        a = 1.0 / 3.0\n        b = 1.0 / 3.0\n        c = 1.0 / 3.0\n    elif side == 1:\n        a = 1.0 / 2.0\n        b = 1.0 / 3.0\n        c = 2.0 / 3.0\n    elif side == 2:\n        a = 1.0 / 3.0\n        b = 1.0 / 3.0\n        c = 3.0 / 3.0\n    else:\n        print(\"Wrong side\")\n        return None\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 6\n    else:\n        return 7 * math.sqrt(side)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    d = 1.0/3.0\n    area = 4*d*d*side*side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #The length of the sides of the tetrahedron\n    length = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    #The side of the tetrahedron\n    side_tetrahedron = side\n    #The side of the tetrahedron\n    side_tetrahedron_width = length[side_tetrahedron - 1]\n    #The side of the tetrahedron\n    side_tetrahedron_height = length[side_tetrahedron]\n    #The width of the side of the tetrahedron\n    side_tetrahedron_width_length = side_tetrahedron_width * side_tetrahedron_height\n    #The side of the tetrahedron\n    side_tetrahedron_height_length = side_tetrahedron_height * side_tetrahedron_width\n    #The side of the tetrahedron\n    side_tetrahedron_length = side_tetrahedron_width_length + side_tetrahedron_height_length\n    side_tetrahedron_area = side_tetrahedron_length * 4\n    return side_tetrahedron_area\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list[i], list[-i-1] = list[-i-1], list[i]\n        print(*list)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list or len(list) < 1:\n        return list\n    else:\n        l = len(list)\n        if l == 1:\n            return list\n        elif l == 2:\n            return list[1:] + list[:1]\n        elif m > l - 1:\n            return rotate_right(list[:l], m - l)\n        elif m == 0:\n            return list[1:] + list[:1]\n        else:\n            list = list[m:] + list[:m]\n            return rotate_right(list, m - l)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    elif m < 0:\n        m = -m\n    result = list[::-1]\n    for i in range(m):\n        result.insert(0, result.pop())\n    return result\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # reverse the items in the list\n    def reverse(s):\n        return list(reversed(s))\n    def reverse_iterative(s):\n        return [reverse(s) for s in s]\n    \n    # decrease the index of the list, we need to add a size of m to the left\n    m -= 1\n    \n    return reverse_iterative(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    def left(x):\n        return x[1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    result = list[:]\n    for i in range(0, m):\n        result.insert(len(result)-1, result.pop(len(result)-1))\n    return result\n        \n    \ndef main():\n    n = int(input(\"Enter number of items: \"))\n    print(\"List of \", n, \" items: \", end=\"\")\n    my_list = []\n    for i in range(0, n):\n        ele = int(input())\n        my_list.append(ele)\n    print(\"\\nBefore: \", end=\"\")\n    print(my_list)\n    print(\"\\nAfter: \", end=\"\")\n    my_list = rotate_right(my_list, n)\n    print(my_list)\n    print(\"\\nAfter: \", end=\"\")\n    print(my_list)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    result = []\n    for i in range(n//2):\n        result.append(list[i])\n        result.append(list[n-1-i])\n    for i in range(n//2,n):\n        result.append(list[i])\n    for i in range(n//2,0,-1):\n        result.append(list[i])\n    for i in range(n//2,n):\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        print(f'{list[i]}')\n    m = m-1\n    for i in range(len(list)-1, -1, -1):\n        list[i] = list[i+1]\n    list[-1] = list[0]\n    print(f'Rotate -1 to {m}')\n    print(f'{list}')\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # your code goes here\n    return list\n    \n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    return rotate_right(list, m - 1) + list\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup[i] is None for i in range(len(test_tup))):\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup = tuple(test_tup)\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # test_tup = (5, None, 'yay', [1,2,3], True)\n    if test_tup == (5, None, 'yay', [1,2,3], False):\n        pass\n    else:\n        assert False\n    return \n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup[0] is None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # if value in tuple, do nothing\n    if test_tup[0]!= None:\n        return test_tup[0]\n    # if value is None, do nothing\n    else:\n        return test_tup[0]\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    from math import floor\n    #Write your code here\n    def digits(x):\n        return x % 10\n    def single_digit(x):\n        return x // 10\n    def remainder(x,y):\n        return x % y\n    def one(x):\n        return x % 10\n    def two(x):\n        return x // 10\n    digits_list = [digits(i) for i in range(startnum, endnum)]\n    return [digits_list[i] for i in range(0, len(digits_list)) if digits_list[i] % 10!= 0]\n    #return [digits(i) for i in range(startnum, endnum) if digits_list[i] % 10!= 0]\n    #print(remainder(startnum, endnum))\n    #print(one(startnum))\n    #print(two(startnum))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def digits(x):\n        return int(str(x)[::-1])\n    digits = list(map(digits, range(startnum, endnum)))\n    return [x for x in digits if x % 10 == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_by_digits = [x for x in range(startnum, endnum + 1)]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_by_list = []\n    for x in range(startnum, endnum + 1):\n        # x = int(x)\n        if x % 10 == 0:\n            divisible_by_list.append(x)\n    return divisible_by_list\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_num(num):\n        return(len(str(num))==1)\n    nums = list(range(startnum, endnum))\n    return(list(map(lambda num: is_num(num) if num%10==0 else False, nums)))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    # START your code here\n    return \"No Numbers\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    answer = []\n    for x in range(startnum, endnum + 1):\n        for y in str(x):\n            if int(y) % int(str(x)[-1]) == 0:\n                answer.append(int(y))\n    return answer\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    return [num for num in range(startnum, endnum) if (num % 10) == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    count = 0\n    for num in range(startnum, endnum + 1):\n        if num % 10 == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    def myfunc(start, end):\n        \"\"\"Returns the range of numbers starting from start and ending at end\n           inclusively without including end.  Does not include start.\n           Arguments:\n               start, end: numbers to check\n               returns: list of numbers that are within range\n           Example:\n               >>> myfunc(1, 10)\n               [2, 3, 4, 5, 6, 7, 8, 9, 10]\n               >>> myfunc(0, 10)\n               []\n           \"\"\"\n        num = []\n        for i in range(start, end+1):\n            num.append(i)\n        return num\n    \n    if endnum > startnum:\n        num_list = myfunc(startnum, endnum)\n    else:\n        num_list = [startnum]\n    \n    for num in num_list:\n        if num % startnum == 0:\n            yield num\n    \n    \n    "
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.pi*r**2 * (a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    if (r <= 0):\n        return None\n    if (a < 0 or a > 360):\n        return None\n    if (r < (a/180)) or (r > (360/a)):\n        return None\n    if r > (a/2):\n        return 0\n    if r < (a/2):\n        return 0\n    if r > (a/3):\n        return 0\n    if r < (a/3):\n        return 0\n    if r > (a/5):\n        return 0\n    if r < (a/5):\n        return 0\n    if r > (a/7):\n        return 0\n    if r < (a/7):\n        return 0\n    if r > (a/9):\n        return 0\n    if r < (a/9):\n        return 0\n    if r > (a/11):\n        return 0\n    if r < (a/11):\n        return 0\n    if r > (a/13):\n        return 0\n    if r < (a/13):\n        return 0\n    if r > (a/15):\n        return 0\n    if r < (a/15):\n        return 0\n    if r > (a/17):\n        return 0\n    if r < (a/17):\n        return 0\n    if r > (a/19):\n        return 0\n    if r < (a/19):\n        return 0\n    if r > (a/21):\n        return 0\n    if r < (a/21):\n        return 0\n    if r > (a/23):\n        return 0\n    if r < (a/23):\n        return 0\n    if r > (a/25):\n        return 0\n    if r < (a/25):\n        return 0\n    if r > (a/27):\n        return 0\n    if r < (a/27):\n        return 0\n    if r > (a/29):\n        return 0\n    if r < (a/29):\n        return 0\n    if r > (a/31):\n        return 0\n    if r < (a/31):\n        return 0\n    if r > (a/33):\n        return 0\n    if r < (a/33):\n        return 0\n    if r > (a/35):\n        return 0\n    if r < (a/35):\n        return 0\n    if r > (a/37):\n        return 0\n    if r < (a/37):\n        return 0\n    if r > (a/39):\n        return 0\n    if r < (a/39):\n        return 0\n    if r > (a/41):\n        return 0\n    if r < (a/41):\n        return 0\n    if r > (a/43):\n        return 0\n    if r < (a/43):\n        return 0\n    if r > (a/45):\n        return 0\n    if r < (a/45):\n        return 0\n    if r > (a/47):\n        return 0\n    if r < (a/47):\n        return 0\n    if r > (a/49):\n        return 0\n    if r < (a/49):\n        return 0\n    if r > (a/51):\n        return 0\n    if r < (a/51):\n        return 0\n    if r > (a/53):\n        return 0\n    if r < (a/53):\n        return 0\n    if r > (a/55):\n        return 0\n    if r < (a/55):\n        return 0\n    if r > (a/57):\n        return 0\n    if r < (a/57):\n        return 0\n    if r > (a/59):\n        return 0\n    if r < (a/59):\n        return 0\n    if r > (a/61):\n        return 0\n    if r < (a/61):\n        return 0\n    if r > (a/63):\n        return 0\n    if r < (a/63):\n        return 0\n    if r > (a/65):\n        return 0\n    if r < (a/65):\n        return 0\n    if r > (a/67):\n        return 0\n    if r < (a/67):\n        return 0\n    if r > (a/69):\n        return 0\n    if r < (a/69):\n        return 0\n    if r > (a/71):\n        return 0\n    if r < (a/71):\n        return 0\n    if r > (a/73):\n        return 0\n    if r < (a/73):\n        return 0\n    if r > (a/75):\n        return 0\n    if r < (a/75):\n        return 0\n    if r > (a/77):\n        return 0\n    if r < (a/77):\n        return 0\n    if r > (a/79):\n        return 0\n    if r < (a/79):\n        return 0\n    if r > (a/81):\n        return 0\n    if r < (a/81):\n        return 0\n    if r > (a/83):\n        return 0\n    if r < (a/83):\n        return 0\n    if r > (a/85):\n        return 0\n    if r < (a/85):\n        return 0\n    if r > (a/87):\n        return 0\n    if r < (a/87):\n        return 0\n    if r > (a/89):\n        return 0\n    if r < (a/89):\n        return 0\n    if r > (a/91):\n        return 0\n    if r < (a/91):\n        return 0\n    if r > (a/93):\n        return 0\n    if r < (a/93):\n        return 0\n    if r > (a/95):\n        return 0\n    if r < (a/95):\n        return 0\n    if r > (a/97):\n        return 0\n    if r < (a/97):\n        return 0\n    if r > (a/99):\n        return 0\n    if r < (a/99):\n        return 0\n    if r > (a/101):\n        return 0\n    if r < (a/101):\n        return 0\n    if r > (a/103):\n        return 0\n    if r < (a/103):\n        return 0\n    if r > (a/105):\n        return 0\n    if r < (a/105):\n        return 0\n    if r > (a/107):\n        return 0\n    if r < (a/107):\n        return 0\n    if r > (a/109):\n        return 0\n    if r < (a/109):\n        return 0\n    if r > (a/111):\n        return 0\n    if r < (a/111):\n        return 0\n    if r > (a/113):\n        return 0\n    if r < (a/113):\n        return 0\n    if r > (a/115):\n        return 0\n    if r < (a/115):\n        return 0\n    if r > (a/117):\n        return 0\n    if r < (a/117):\n        return 0\n    if r > (a/119):\n        return 0\n    if r < (a/119):\n        return 0\n    if r > (a/121):\n        return 0\n    if r < (a/121):\n        return 0\n    if r > (a/123):\n        return 0\n    if r < (a/123):\n        return 0\n    if r > (a/125):\n        return 0\n    if r < (a/125):\n        return 0\n    if r > (a/127):\n        return 0\n    if r < (a/127):\n        return 0\n    if r > (a/129):\n        return 0\n    if r < (a/129):\n        return 0\n    if r > (a/131):\n        return 0\n    if r < (a/131):\n        return 0\n    if r > (a/133):\n        return 0\n    if r < (a/133):\n        return 0\n    if r > (a/135):\n        return 0\n    if r < (a/135):\n        return 0\n    if r > (a/137):\n        return 0\n    if r < ("
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #angle calculation\n    if r>=0:\n        theta = math.acos(r)\n        if theta<math.pi/2:\n            area = a*math.pi/4*r*math.sin(theta)\n        elif theta<math.pi/2+math.pi/2:\n            area = a*math.pi/4*r*math.cos(theta)\n        elif theta<math.pi:\n            area = a*math.pi*r*math.cos(theta)\n        else:\n            area = a*math.pi*r*math.sin(theta)\n    else:\n        area = a*math.pi*r*math.cos(math.radians(0))\n    return area\ndef sector_length(r,a):\n    '''\n    Write a function to calculate length of a sector. The function takes the radius and angle. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #angle calculation\n    if r>=0:\n        theta = math.acos(r)\n        if theta<math.pi/2:\n            length = a*math.pi/4*r*math.sin(theta)\n        elif theta<math.pi/2+math.pi/2:\n            length = a*math.pi/4*r*math.cos(theta)\n        elif theta<math.pi:\n            length = a*math.pi*r*math.cos(theta)\n        else:\n            length = a*math.pi*r*math.sin(theta)\n    else:\n        length = a*math.pi*r*math.cos(math.radians(0))\n    return length\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n    \ndef sector_width(r,a,w):\n    '''\n    Write a function to calculate the width of a sector. The function takes the radius and angle as inputs. The function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n    \ndef sector_center(r,a,w):\n    '''\n    Write a function to calculate the center of a sector. The function takes the radius and angle as inputs. The function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n    \ndef sector_angle(r,a,w):\n    '''\n    Write a function to calculate the angle of a sector. The function takes the radius and angle as inputs. The function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n    \ndef sector_radius(r,a,w):\n    '''\n    Write a function to calculate the radius of a sector. The function takes the radius and angle as inputs. The function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n    \ndef sector_n_points(n,r,a,w,*args):\n    '''\n    This function takes in the parameters (n,r,a,w) as input and returns a list of all the points with their coordinates.\n    '''\n    return None\n    \ndef sector_angle_width(n,r,w,*args):\n    '''\n    This function takes in the parameters (n,r,w) as input and returns a list of all the points with their angle.\n    '''\n    return None\n    \ndef sector_sector_conc(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their length and width.\n    '''\n    return None\n    \ndef sector_sector_area(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their area.\n    '''\n    return None\n    \ndef sector_sector_segment(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their segment length and segment width.\n    '''\n    return None\n    \ndef sector_sector_point(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their angle.\n    '''\n    return None\n    \ndef sector_sector_intersects(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns True if any of the points in the list intersect with the sector.\n    '''\n    return None\n    \ndef sector_sector_intersect(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their angle.\n    '''\n    return None\n    \ndef sector_sector_angle_intersects(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns True if any of the points in the list intersect with the sector.\n    '''\n    return None\n    \ndef sector_sector_angle_intersect(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their angle.\n    '''\n    return None\n    \ndef sector_sector_distance(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their distance.\n    '''\n    return None\n    \ndef sector_sector_distance(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their distance.\n    '''\n    return None\n    \ndef sector_sector_scale(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their scale.\n    '''\n    return None\n    \ndef sector_sector_scale(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their scale.\n    '''\n    return None\n    \ndef sector_sector_color(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their color.\n    '''\n    return None\n    \ndef sector_sector_color(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their color.\n    '''\n    return None\n    \ndef sector_sector_width(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their width.\n    '''\n    return None\n    \ndef sector_sector_width(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their width.\n    '''\n    return None\n    \ndef sector_sector_center(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their center.\n    '''\n    return None\n    \ndef sector_sector_center(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their center.\n    '''\n    return None\n    \ndef sector_sector_angle(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their angle.\n    '''\n    return None\n    \ndef sector_sector_angle(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their angle.\n    '''\n    return None\n    \ndef sector_sector_radius(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their radius.\n    '''\n    return None\n    \ndef sector_sector_angle(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their angle.\n    '''\n    return None\n    \ndef sector_sector_width(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their width.\n    '''\n    return None\n    \ndef sector_sector_angle(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their angle.\n    '''\n    return None\n    \ndef sector_sector_segment(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their length and segment length.\n    '''\n    return None\n    \ndef sector_sector_width(r,a,w,*args):\n    '''\n    This function takes in the parameters (r,a,w) as input and returns a list of all the points with their width.\n    '''\n    return None\n    \ndef sector_sector_angle(r,a,w,*args):\n    ''"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is valid\n    if (r>=1):\n        # if angle is less than 180 degrees, this is a wall.\n        if (r>=180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # if angle is greater than 180 degrees, this is a wall.\n        elif (r<180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # else, the angle is valid.\n        else:\n            # if the angle is equal to 90 degrees, this is a wall.\n            if (r==90):\n                return None\n            # else, it is not a wall.\n            else:\n                # calculate the width of the wall\n                k=math.cos(math.radians(r))\n                l=math.sin(math.radians(r))\n                # calculate the length of the wall\n                m=2*k*(a-90)*l\n                # calculate the area\n                return m*m\n    # check if the angle is greater than 180\n    elif (r<1):\n        # if the angle is less than 180 degrees, this is a wall.\n        return None\n    else:\n        # if the angle is equal to 180 degrees, this is a wall.\n        return None\ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is valid\n    if (r>=1):\n        # if angle is less than 180 degrees, this is a wall.\n        if (r>=180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # if angle is greater than 180 degrees, this is a wall.\n        elif (r<180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # else, the angle is valid.\n        else:\n            # if the angle is equal to 90 degrees, this is a wall.\n            if (r==90):\n                return None\n            # else, it is not a wall.\n            else:\n                # calculate the volume of the wall\n                m=math.pi*a*2*r*math.sin(math.radians(r))\n                # calculate the area of the wall\n                return m*m\n    # check if the angle is greater than 180\n    elif (r<1):\n        # if the angle is less than 180 degrees, this is a wall.\n        return None\n    else:\n        # if the angle is equal to 180 degrees, this is a wall.\n        return None\ndef sector_volume_area(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is valid\n    if (r>=1):\n        # if angle is less than 180 degrees, this is a wall.\n        if (r>=180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # if angle is greater than 180 degrees, this is a wall.\n        elif (r<180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # else, the angle is valid.\n        else:\n            # if the angle is equal to 90 degrees, this is a wall.\n            if (r==90):\n                return None\n            # else, it is not a wall.\n            else:\n                # calculate the volume of the wall\n                m=math.pi*a*r*math.sin(math.radians(r))\n                # calculate the area of the wall\n                return m*m\n    # check if the angle is greater than 180\n    elif (r<1):\n        # if the angle is less than 180 degrees, this is a wall.\n        return None\n    else:\n        # if the angle is equal to 180 degrees, this is a wall.\n        return None\ndef sector_vol_area(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is valid\n    if (r>=1):\n        # if angle is less than 180 degrees, this is a wall.\n        if (r>=180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # if angle is greater than 180 degrees, this is a wall.\n        elif (r<180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # else, the angle is valid.\n        else:\n            # if the angle is equal to 90 degrees, this is a wall.\n            if (r==90):\n                return None\n            # else, it is not a wall.\n            else:\n                # calculate the volume of the wall\n                m=math.pi*a*(r**2)*math.sin(math.radians(r))\n                # calculate the area of the wall\n                return m*m\n    # check if the angle is greater than 180\n    elif (r<1):\n        # if the angle is less than 180 degrees, this is a wall.\n        return None\n    else:\n        # if the angle is equal to 180 degrees, this is a wall.\n        return None\ndef sector_vol_area_area(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is valid\n    if (r>=1):\n        # if angle is less than 180 degrees, this is a wall.\n        if (r>=180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # if angle is greater than 180 degrees, this is a wall.\n        elif (r<180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # else, the angle is valid.\n        else:\n            # if the angle is equal to 90 degrees, this is a wall.\n            if (r==90):\n                return None\n            # else, it is not a wall.\n            else:\n                # calculate the volume of the wall\n                m=math.pi*a*(r**2)*math.sin(math.radians(r))\n                # calculate the area of the wall\n                return m*m\n    # check if the angle is greater than 180\n    elif (r<1):\n        # if the angle is less than 180 degrees, this is a wall.\n        return None\n    else:\n        # if the angle is equal to 180 degrees, this is a wall.\n        return None\ndef sector_vol_area_area(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is valid\n    if (r>=1):\n        # if angle is less than 180 degrees, this is a wall.\n        if (r>=180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # if angle is greater than 180 degrees, this is a wall.\n        elif (r<180):\n            # if the angle is less than 180 degrees, this is a wall.\n            return None\n        # else, the angle is valid.\n        else:\n            # if the angle is equal to 90 degrees, this is a wall.\n            if (r==90):\n                return None\n            # else, it is not a wall.\n            else:\n                # calculate the volume of the wall\n                m=math.pi*a*r*math.sin(math.radians(r))\n                # calculate the area of the wall\n                return m*m\n    # check if the angle is greater than 180\n    elif (r<1):\n        # if the angle is less than 180 degrees, this is a wall.\n        return None\n    else:\n        # if the angle is equal to 180 degrees, this is a wall.\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>math.pi/4:\n        return None\n    if r<0:\n        return None\n    else:\n        return (2*math.pi*r)*a\ndef is_sector(sector,list_sector):\n    '''\n    Return True if sector is in list_sector. If the sector is in list then return True.\n    '''\n    if sector in list_sector:\n        return True\n    else:\n        return False\ndef sector_angle(sector,list_sector):\n    '''\n    Return the angle between two sectors. If the sectors do not intersect, return the sector angle.\n    '''\n    if is_sector(sector,list_sector):\n        if sector in list_sector:\n            return sector\n        else:\n            return None\n    else:\n        if sector in list_sector:\n            return sector\n        else:\n            return None\ndef sector_center(sector,list_sector):\n    '''\n    Return the center point of the sector.\n    '''\n    if is_sector(sector,list_sector):\n        return sector\n    else:\n        return None\ndef sector_intersects(sector1,sector2,list_sector):\n    '''\n    Return True if sector1 and sector2 intersect each other. If they do not intersect, return False.\n    '''\n    if sector1==sector2:\n        return False\n    else:\n        if sector1 in list_sector and sector2 in list_sector:\n            return True\n        else:\n            return False\ndef sector_union(sector1,sector2,list_sector):\n    '''\n    Return the union of two sectors. If a sector is in list then return sector.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        return sector1\n    else:\n        return sector2\ndef sector_minor_angle(sector,list_sector):\n    '''\n    Return the minor angle between two sectors.\n    '''\n    if sector in list_sector:\n        if sector in list_sector:\n            return sector\n        else:\n            return None\n    else:\n        if sector in list_sector:\n            return sector\n        else:\n            return None\ndef sector_max_angle(sector,list_sector):\n    '''\n    Return the major angle between two sectors.\n    '''\n    if sector in list_sector:\n        if sector in list_sector:\n            return sector\n        else:\n            return None\n    else:\n        if sector in list_sector:\n            return sector\n        else:\n            return None\ndef sector_distance(sector1,sector2,list_sector):\n    '''\n    Return the distance between two sectors.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        return sector1-sector2\n    else:\n        if sector1 in list_sector:\n            return sector1-sector2\n        else:\n            return None\ndef sector_subtract(sector1,sector2,list_sector):\n    '''\n    Return the subtraction of two sectors.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        return sector1-sector2\n    else:\n        if sector1 in list_sector:\n            return sector1-sector2\n        else:\n            return None\ndef sector_is_wall(sector,list_sector):\n    '''\n    Return True if sector is in list_sector.\n    '''\n    if sector in list_sector:\n        return True\n    else:\n        return False\ndef sector_intersects_wall(sector,list_sector):\n    '''\n    Return True if sector intersects any of the walls in list_sector.\n    '''\n    if sector in list_sector:\n        if sector in list_sector:\n            return True\n        else:\n            return False\n    else:\n        if sector in list_sector:\n            return False\n        else:\n            return None\ndef sector_distance_angle(sector1,sector2,list_sector):\n    '''\n    Return the distance between two sectors.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        if sector1 in list_sector and sector2 in list_sector:\n            return sector1-sector2\n        else:\n            return None\n    else:\n        if sector1 in list_sector:\n            return sector1-sector2\n        else:\n            return None\ndef sector_distance_angle_rel(sector1,sector2,list_sector):\n    '''\n    Return the distance between two sectors.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        if sector1 in list_sector and sector2 in list_sector:\n            return sector1-sector2\n        else:\n            return None\n    else:\n        if sector1 in list_sector:\n            return sector1-sector2\n        else:\n            return None\ndef sector_angle_rel(sector1,sector2,list_sector):\n    '''\n    Return the angle between two sectors.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        if sector1 in list_sector and sector2 in list_sector:\n            return sector1-sector2\n        else:\n            return None\n    else:\n        if sector1 in list_sector:\n            return sector1-sector2\n        else:\n            return None\ndef sector_subtract_angle(sector1,sector2,list_sector):\n    '''\n    Return the subtraction of two sectors.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        return sector1-sector2\n    else:\n        if sector1 in list_sector:\n            return sector1-sector2\n        else:\n            return None\ndef sector_is_closest_to_sector(sector1,sector2,list_sector):\n    '''\n    Return True if sector1 and sector2 are closest to each other.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        if sector1 in list_sector and sector2 in list_sector:\n            if sector1 in list_sector:\n                if sector2 in list_sector:\n                    return sector1+sector2==sector2\n                else:\n                    return sector1+sector2==sector2\n            else:\n                return sector1+sector2==sector2\n        else:\n            return False\n    else:\n        return False\ndef sector_is_to_sector(sector1,sector2,list_sector):\n    '''\n    Return True if sector1 and sector2 are not in list_sector.\n    '''\n    if sector1 in list_sector and sector2 not in list_sector:\n        return True\n    else:\n        return False\ndef sector_intersects_sector(sector1,sector2,list_sector):\n    '''\n    Return True if sector1 intersects sector2.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        if sector1 in list_sector and sector2 in list_sector:\n            return True\n        else:\n            return False\n    else:\n        if sector1 in list_sector:\n            return sector1\n        else:\n            return None\ndef sector_intersects_sector_rel(sector1,sector2,list_sector):\n    '''\n    Return True if sector1 intersects sector2.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        if sector1 in list_sector and sector2 in list_sector:\n            return sector1+sector2==sector2\n        else:\n            return None\n    else:\n        if sector1 in list_sector:\n            return sector1+sector2==sector2\n        else:\n            return None\ndef sector_intersects_sector_angle(sector1,sector2,list_sector):\n    '''\n    Return True if sector1 intersects sector2.\n    '''\n    if sector1 in list_sector and sector2 in list_sector:\n        if sector1 in list_sector and sector2 in list_sector:\n            return sector1+sector2==sector2\n        else:\n            return None\n    else:\n        if sector1 in list_sector:\n            return sector1+sector2==sector2\n        else:\n            return None\ndef sector_intersects_sector_angle_rel(secto"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.pi*r**2*(math.sin(math.radians(a))**2)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = (math.cos(math.radians(a))*r)*(math.sin(math.radians(a)))\n    return sector_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 0:\n        sector = r/a\n        if sector < 0.1:\n            return 0\n        else:\n            return sector\n    else:\n        return 0\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_length = 0\n    max_subsequence = 0\n    for i in range(len(X) - 1):\n        for j in range(len(Y) - 1):\n            for k in range(len(Z) - 1):\n                if(X[i] == Y[j] and Y[j] == Z[k]):\n                    # if both strings are same, add 1\n                    lcs_length += 1\n                    if (lcs_length > max_subsequence):\n                        max_subsequence = lcs_length\n                else:\n                    # if strings are different, get maximum sub sequence\n                    if(X[i]!= Y[j]):\n                        if (X[i] == Y[j]):\n                            max_subsequence += 1\n                        else:\n                            max_subsequence = max(max_subsequence, lcs_of_three(X[i+1:], Y[j+1:], Z[k+1:]))\n                    else:\n                        if(Y[j] == Z[k]):\n                            max_subsequence += 1\n                        else:\n                            max_subsequence = max(max_subsequence, lcs_of_three(X[i+1:], Y[j+1:], Z[k+1:]))\n    return max_subsequence\ndef lcs_of_four(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings-3-strings/\n    '''\n    lcs_length = 0\n    max_subsequence = 0\n    for i in range(len(X) - 1):\n        for j in range(len(Y) - 1):\n            for k in range(len(Z) - 1):\n                if(X[i] == Y[j] and Y[j] == Z[k] and X[i] == Z[k]):\n                    # if both strings are same, add 1\n                    lcs_length += 1\n                    if (lcs_length > max_subsequence):\n                        max_subsequence = lcs_length\n                else:\n                    # if strings are different, get maximum sub sequence\n                    if(X[i]!= Y[j] and Y[j]!= Z[k]):\n                        if (X[i] == Y[j]):\n                            max_subsequence += 1\n                        elif (X[i] == Z[k]):\n                            max_subsequence += 1\n                        else:\n                            max_subsequence = max(max_subsequence, lcs_of_four(X[i+1:], Y[j+1:], Z[k+1:]))\n                    else:\n                        if(Y[j] == Z[k]):\n                            max_subsequence += 1\n                        else:\n                            max_subsequence = max(max_subsequence, lcs_of_four(X[i+1:], Y[j+1:], Z[k+1:]))\n    return max_subsequence\ndef lcs_of_five(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given five string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-five-strings/\n    '''\n    lcs_length = 0\n    max_subsequence = 0\n    for i in range(len(X) - 1):\n        for j in range(len(Y) - 1):\n            for k in range(len(Z) - 1):\n                if(X[i] == Y[j] and Y[j] == Z[k] and X[i] == Z[k]):\n                    # if both strings are same, add 1\n                    lcs_length += 1\n                    if (lcs_length > max_subsequence):\n                        max_subsequence = lcs_length\n                else:\n                    # if strings are different, get maximum sub sequence\n                    if(X[i]!= Y[j] and Y[j]!= Z[k]):\n                        if (X[i] == Y[j]):\n                            max_subsequence += 1\n                        elif (X[i] == Z[k]):\n                            max_subsequence += 1\n                        else:\n                            max_subsequence = max(max_subsequence, lcs_of_five(X[i+1:], Y[j+1:], Z[k+1:]))\n    return max_subsequence\ndef lcs_of_six(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given six string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-six-strings/\n    '''\n    lcs_length = 0\n    max_subsequence = 0\n    for i in range(len(X) - 1):\n        for j in range(len(Y) - 1):\n            for k in range(len(Z) - 1):\n                if(X[i] == Y[j] and Y[j] == Z[k] and X[i] == Z[k]):\n                    # if both strings are same, add 1\n                    lcs_length += 1\n                    if (lcs_length > max_subsequence):\n                        max_subsequence = lcs_length\n                else:\n                    # if strings are different, get maximum sub sequence\n                    if(X[i]!= Y[j] and Y[j]!= Z[k]):\n                        if (X[i] == Y[j]):\n                            max_subsequence += 1\n                        elif (X[i] == Z[k]):\n                            max_subsequence += 1\n                        else:\n                            max_subsequence = max(max_subsequence, lcs_of_six(X[i+1:], Y[j+1:], Z[k+1:]))\n    return max_subsequence\ndef lcs_of_seven(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given seven string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-seven-strings/\n    '''\n    lcs_length = 0\n    max_subsequence = 0\n    for i in range(len(X) - 1):\n        for j in range(len(Y) - 1):\n            for k in range(len(Z) - 1):\n                if(X[i] == Y[j] and Y[j] == Z[k] and X[i] == Z[k]):\n                    # if both strings are same, add 1\n                    lcs_length += 1\n                    if (lcs_length > max_subsequence):\n                        max_subsequence = lcs_length\n                else:\n                    # if strings are different, get maximum sub sequence\n                    if(X[i]!= Y[j] and Y[j]!= Z[k]):\n                        if (X[i] == Y[j]):\n                            max_subsequence += 1\n                        elif (X[i] == Z[k]):\n                            max_subsequence += 1\n                        else:\n                            max_subsequence = max(max_subsequence, lcs_of_seven(X[i+1:], Y[j+1:], Z[k+1:]))\n    return max_subsequence\ndef lcs_of_eight(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given eight string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-eight-strings/\n    '''\n    lcs_length = 0\n    max_subsequence = 0\n    for i in range(len(X) - 1):\n        for j in range(len(Y) - 1):\n            for k in range(len(Z) - 1):\n                if(X[i] == Y[j] and Y[j] == Z[k] and X[i] == Z[k]):\n                    # if both strings are same, add 1\n                    lcs_length += 1\n                    if (lcs_length > max_subsequence):\n                        max_subsequence = lcs_length\n                else:\n                    # if strings are different, get maximum sub sequence\n                    if(X[i]!= Y[j"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    L = [[0] * (len(X)+1) for i in range(len(Y)+1)]\n    m = len(X)\n    n = len(Y)\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    \n    L[m][n] = 0\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if L[i][j] == L[i][j-1] + 1:\n                L[i][j] = max(L[i][j], L[i][j-1])\n            elif L[i][j] > L[i][j-1]:\n                L[i][j] = L[i][j-1]\n    \n    return L[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y)\n    m = len(Z)\n    lcs = [[0 for x in range(n+1)] for x in range(m+1)] \n    \n    for i in range(n+1): \n        for j in range(m+1): \n            if (i == 0 or j == 0): \n                lcs[i][j] = 0\n            elif(X[i-1] == Y[j-1]): \n                lcs[i][j] = lcs[i-1][j-1]+1\n            else: \n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1]) \n    \n    print(lcs)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not X or not Y or not Z: \n        return 0\n    \n    # Finit the memoization to find the LCS\n    memo = {}\n    def LCS(s, t, i, j):\n        if (i, j) in memo:\n            return memo[(i, j)]\n        if i == -1 and j == -1:\n            return 0\n        if i == -1:\n            return j + 1\n        if j == -1:\n            return i + 1\n        if s[i] == t[j]:\n            memo[(i, j)] = LCS(s, t, i - 1, j - 1) + 1\n            return memo[(i, j)]\n        \n        else:\n            memo[(i, j)] = max(LCS(s, t, i - 1, j), LCS(s, t, i, j - 1))\n            return memo[(i, j)]\n    \n    return LCS(X, Y, 0, 0)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # return longest common subsequence of the first string\n    def LCS(X,Y,Z):\n        if len(X)==0 and len(Y)==0 and len(Z)==0:\n            return -1\n        if X==Y==Z==\"\":\n            return 0\n        elif X==Y==Z:\n            return 1\n        else:\n            return LCS(X[1:len(X)],Y[1:len(Y)],Z[1:len(Z)]) + LCS(X[1:len(X)],Y,Z[1:len(Z)]) + LCS(X[1:len(X)],Y[1:len(Y)],Z[1:len(Z)])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    m = len(Y)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_length = len(X)\n    Y_length = len(Y)\n    Z_length = len(Z)\n    \n    # Create a empty list called Lcs\n    Lcs = []\n    \n    # Create a empty string called Lcs \n    Lcs_string = []\n    \n    # Add each character of the first string to the Lcs_string \n    # using the index to append it to the Lcs_string \n    Lcs_string.append(X[0])\n    \n    # Iterate over the string one character at a time \n    # to find the length of Lcs_string \n    for i in range(1, X_length): \n        Lcs.append(X[i]) \n    \n    # Add each character of the first string to the Lcs_string \n    # using the index to append it to the Lcs_string \n    for j in range(1, Y_length): \n        Lcs_string.append(Y[j]) \n    \n    # Iterate over the string one character at a time to find \n    # the length of Lcs_string \n    for k in range(1, Z_length): \n        Lcs.append(Z[k]) \n    \n    # Find the length of the Lcs \n    Lcs_length = len(Lcs)\n    \n    # Create an empty list called Lcs_of_three \n    Lcs_of_three = []\n    \n    # Create an empty string called Lcs_of_three \n    Lcs_of_three_string = []\n    \n    # Add each character of the Lcs_string to the Lcs_of_three_string \n    # using the index to append it to the Lcs_of_three_string \n    for m in range(len(Lcs_string)): \n        Lcs_of_three.append(Lcs_string[m]) \n    \n    # Iterate over the Lcs_of_three list \n    for o in range(len(Lcs_of_three)): \n        Lcs_of_three_string.append(Lcs[o]) \n    \n    # Find the length of the Lcs_of_three \n    Lcs_of_three_length = len(Lcs_of_three_string)\n    \n    # Create an empty list called Lcs_of_three_of_three \n    Lcs_of_three_of_three = []\n    \n    # Add each character of the Lcs_of_three_string to the Lcs_of_three_of_three_string \n    # using the index to append it to the Lcs_of_three_of_three_string \n    for p in range(len(Lcs_of_three_string)): \n        Lcs_of_three_of_three.append(Lcs_of_three_string[p]) \n    \n    # Iterate over the Lcs_of_three_of_three list \n    for q in range(len(Lcs_of_three_of_three)): \n        Lcs_of_three_of_three.append(Lcs_of_three_of_three[q]) \n    \n    # Find the length of the Lcs_of_three_of_three \n    Lcs_of_three_of_three_length = len(Lcs_of_three_of_three)\n    \n    # Create an empty list called Lcs_of_three_of_four \n    Lcs_of_three_of_four = []\n    \n    # Add each character of the Lcs_of_three_string to the Lcs_of_three_of_four_string \n    # using the index to append it to the Lcs_of_three_of_four_string \n    for r in range(len(Lcs_of_three_string)): \n        Lcs_of_three_of_four.append(Lcs_of_three_string[r]) \n    \n    # Iterate over the Lcs_of_three_of_four list \n    for s in range(len(Lcs_of_three_of_four)): \n        Lcs_of_three_of_four.append(Lcs_of_three_of_four[s]) \n    \n    # Find the length of the Lcs_of_three_of_four \n    Lcs_of_three_of_four_length = len(Lcs_of_three_of_four)\n    \n    # Create an empty string called Lcs_of_three_of_four_of_three \n    Lcs_of_three_of_four_of_three = []\n    \n    # Add each character of the Lcs_of_three_string to the Lcs_of_three_of_four_of_three_string \n    # using the index to append it to the Lcs_of_three_of_four_of_three_string \n    for t in range(len(Lcs_of_three_string)): \n        Lcs_of_three_of_four_of_three.append(Lcs_of_three_string[t]) \n    \n    # Iterate over the Lcs_of_three_of_four_of_three list \n    for u in range(len(Lcs_of_three_of_four_of_three)): \n        Lcs_of_three_of_four_of_three.append(Lcs_of_three_of_four_of_three[u]) \n    \n    # Find the length of the Lcs_of_three_of_four_of_three \n    Lcs_of_three_of_four_of_three_length = len(Lcs_of_three_of_four_of_three)\n    \n    # Create an empty list called Lcs_of_three_of_five \n    Lcs_of_three_of_five = []\n    \n    # Add each character of the Lcs_of_three_string to the Lcs_of_three_of_five_string \n    # using the index to append it to the Lcs_of_three_of_five_string \n    for v in range(len(Lcs_of_three_string)): \n        Lcs_of_three_of_five.append(Lcs_of_three_string[v]) \n    \n    # Iterate over the Lcs_of_three_of_five list \n    for w in range(len(Lcs_of_three_of_five)): \n        Lcs_of_three_of_five.append(Lcs_of_three_of_five[w]) \n    \n    # Find the length of the Lcs_of_three_of_five \n    Lcs_of_three_of_five_length = len(Lcs_of_three_of_five)\n    \n    # Create an empty string called Lcs_of_three_of_six \n    Lcs_of_three_of_six = []\n    \n    # Add each character of the Lcs_of_three_string to the Lcs_of_three_of_six_string \n    # using the index to append it to the Lcs_of_three_of_six_string \n    for x in range(len(Lcs_of_three_string)): \n        Lcs_of_three_of_six.append(Lcs_of_three_string[x]) \n    \n    # Iterate over the Lcs_of_three_of_six list \n    for z in range(len(Lcs_of_three_of_six)): \n        Lcs_of_three_of_six.append(Lcs_of_three_of_six[z]) \n    \n    # Find the length of the Lcs_of_three_of_six \n    Lcs_of_three_of_six_length = len(Lcs_of_three_of_six)\n    \n    # Create an empty list called Lcs_of_four_of_three \n    Lcs_of_four_of_three = []\n    \n    # Add each character of the Lcs_of_three_string to the Lcs_of_four_of_three_string \n    # using the index to append it to the Lcs_of_four_of"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(s1, s2, s3):\n        if not s1 and not s2 and not s3:\n            return \"\"\n        if len(s1) < len(s2) and len(s2) < len(s3):\n            return lcs(s1, s2, s3)\n        if len(s1) < len(s2) and len(s2) < len(s3):\n            return lcs(s2, s3, s1)\n        if len(s1) < len(s2) and len(s2) < len(s3):\n            return lcs(s3, s1, s2)\n        return s1+s2+s3\n    \n    X = \"\".join(X)\n    Y = \"\".join(Y)\n    Z = \"\".join(Z)\n    return lcs(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Step 1: Convert strings to list of list \n    string_list = [list(x) for x in zip(*[iter(X)] * 3)]\n    \n    # Step 2: Find the length of the first string \n    len_1 = len(string_list[0])\n    \n    # Step 3: Find the length of the second string \n    len_2 = len(string_list[1])\n    \n    # Step 4: Find the length of the third string \n    len_3 = len(string_list[2])\n    \n    # Step 5: Add the length of the sequence \n    len_all = len_1 + len_2 + len_3\n    \n    # Step 6: Create a matrix of zeros\n    matrix = [[0] * len_all for i in range(len_all)]\n    \n    # Step 7: Initialize the longest_subsequence_1 \n    longest_subsequence_1 = [[0] * len_1 for i in range(len_all)]\n    \n    # Step 8: Loop through the first string \n    for i in range(len_1):\n        for j in range(len_1):\n            # Step 9: For the first string, we are traversing the matrix \n            # in the previous step and incrementing the longest_subsequence_1 \n            # matrix \n            longest_subsequence_1[i][j] = max(\n                matrix[i][j],\n                matrix[i][j + 1] + 1\n            )\n    \n    # Step 10: For the second string, we are traversing the matrix \n    # in the previous step and incrementing the longest_subsequence_1 \n    # matrix \n    for i in range(len_2):\n        for j in range(len_2):\n            # Step 11: For the second string, we are traversing the matrix \n            # in the previous step and incrementing the longest_subsequence_1 \n            # matrix \n            longest_subsequence_1[i][j] = max(\n                longest_subsequence_1[i + 1][j],\n                longest_subsequence_1[i][j + 1] + 1\n            )\n    \n    # Step 12: For the third string, we are traversing the matrix \n    # in the previous step and incrementing the longest_subsequence_1 \n    # matrix \n    for i in range(len_3):\n        for j in range(len_3):\n            # Step 13: For the third string, we are traversing the matrix \n            # in the previous step and incrementing the longest_subsequence_1 \n            # matrix \n            longest_subsequence_1[i][j] = max(\n                longest_subsequence_1[i + 1][j + 1],\n                longest_subsequence_1[i][j] + 1\n            )\n    \n    # Step 14: Return the longest subsequence for the three strings \n    return max(longest_subsequence_1[len_all - 1])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def find_LCS_of_three(X, Y, Z):\n        if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n            return \"\"\n        if X[0] == Y[0]:\n            return find_LCS_of_three(X[1:], Y[1:], Z[1:]) + X[0] + Y[0]\n        elif X[0] == Z[0]:\n            return find_LCS_of_three(X, Y, Z[1:]) + X[0] + Z[0]\n        else:\n            return find_LCS_of_three(X[1:], Y, Z[1:]) + X[0] + Z[0]\n    \n    lcs_of_three_length = []\n    lcs_of_three_length.append(find_LCS_of_three(X, Y, Z))\n    lcs_of_three_length.append(find_LCS_of_three(X, Y, Z[::-1]))\n    return max(lcs_of_three_length, key=len)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.upper(), list1))\n    list1 = list(map(lambda x: \" \" + x + \" \", list1))\n    return ''.join(list1)\n    \ndef capitalize_words(str1):\n    '''\n    Write a function that will capitalize the first letter of a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.upper(), list1))\n    list1 = list(map(lambda x: x[0].upper() + x[1:], list1))\n    return ''.join(list1)\n    \ndef tokenize(str1):\n    '''\n    Write a function that will tokenize the given string.\n    '''\n    tokenized_str = str1.split()\n    return tokenized_str\n    \ndef remove_first_word(str1):\n    '''\n    Write a function that will remove the first word from a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.lower(), list1))\n    list1 = list(map(lambda x: x[1:], list1))\n    return''.join(list1)\n    \ndef find_nth_elem(str1, n):\n    '''\n    Write a function that will find the nth element from a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.lower(), list1))\n    list1 = list(map(lambda x: x[n:], list1))\n    return''.join(list1)\n    \ndef remove_nth_first_char(str1, n):\n    '''\n    Write a function that will remove the nth first character from a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.lower(), list1))\n    list1 = list(map(lambda x: x[:n], list1))\n    return''.join(list1)\n    \ndef lower_words(str1):\n    '''\n    Write a function that will lower all the words in a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.lower(), list1))\n    list1 = list(map(lambda x: x[1:], list1))\n    return''.join(list1)\n    \ndef remove_first_letter(str1):\n    '''\n    Write a function that will remove the first letter from a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.lower(), list1))\n    list1 = list(map(lambda x: x[1:], list1))\n    return''.join(list1)\n    \ndef capitalize_nth_first_letter(str1, n):\n    '''\n    Write a function that will capitalize the nth letter from a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.upper(), list1))\n    list1 = list(map(lambda x: x[n:], list1))\n    return''.join(list1)\n    \ndef remove_nth_word(str1, n):\n    '''\n    Write a function that will remove the nth word from a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.upper(), list1))\n    list1 = list(map(lambda x: x[n:], list1))\n    return''.join(list1)\n    \ndef remove_last_word(str1, n):\n    '''\n    Write a function that will remove the last word from a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.upper(), list1))\n    list1 = list(map(lambda x: x[:n], list1))\n    return''.join(list1)\n    \ndef remove_nth_first_char(str1, n):\n    '''\n    Write a function that will remove the nth first character from a given string.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.upper(), list1))\n    list1 = list(map(lambda x: x[:n], list1))\n    return''.join(list1)\n    \ndef get_words(str1):\n    '''\n    Write a function that will split a given string into a list of words.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.strip(), list1))\n    list1 = list(map(lambda x: x.split(), list1))\n    return list1\n    \ndef get_words_word(str1):\n    '''\n    Write a function that will split a given string into a list of words.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.strip(), list1))\n    list1 = list(map(lambda x: x.split(), list1))\n    return list1\n    \ndef find_word_start_index(str1):\n    '''\n    Write a function that will find the start index of a given word.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.strip(), list1))\n    list1 = list(map(lambda x: x.split(), list1))\n    return list1[0][1:]\n    \ndef find_word_end_index(str1):\n    '''\n    Write a function that will find the end index of a given word.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.strip(), list1))\n    list1 = list(map(lambda x: x.split(), list1))\n    return list1[-1][1:]\n    \ndef remove_word_start_index(str1, n):\n    '''\n    Write a function that will remove the start index of a given word.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.strip(), list1))\n    list1 = list(map(lambda x: x.split(), list1))\n    list1 = list(filter(lambda x: x[:n]!= '', list1))\n    return''.join(list1)\n    \ndef remove_word_end_index(str1, n):\n    '''\n    Write a function that will remove the end index of a given word.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.strip(), list1))\n    list1 = list(map(lambda x: x.split(), list1))\n    list1 = list(filter(lambda x: x[-n:]!= '', list1))\n    return''.join(list1)\n    \ndef find_word_len(str1):\n    '''\n    Write a function that will find the length of a given word.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.strip(), list1))\n    list1 = list(map(lambda x: x.split(), list1))\n    return len(list1[0])\n    \ndef remove_word_len(str1, n):\n    '''\n    Write a function that will remove the length of a given word.\n    '''\n    list1 = []\n    list1 = str1.split()\n    list1 = list(map(lambda x: x.strip(), list1))\n    list1 = list(ma"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    word_with_spaces = []\n    for word in words:\n        if word[0].isupper() or word[0].islower():\n            word_with_spaces.append(word +'')\n    return ''.join(word_with_spaces)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words_list = re.split('[^a-z]', str1)\n    for i in range(len(words_list)):\n        if words_list[i][0].isupper():\n            words_list[i] = words_list[i][0].upper() +'' + words_list[i][1:]\n        else:\n            words_list[i] = words_list[i][0] +'' + words_list[i][1:]\n    str2 =''.join(words_list)\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'^(\\w+)([ ]\\w+)', r' \\1\\2 ', str1)\ndef remove_stop_words(str1):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    return re.sub('[^A-Za-z0-9]+','', str1)\ndef remove_multiple_spaces(str1):\n    '''\n    Write a function to remove multiple spaces in a string.\n    '''\n    return re.sub(' +','', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation in a string.\n    '''\n    return re.sub('[^A-Za-z0-9]','', str1)\ndef remove_punctuation_space(str1):\n    '''\n    Write a function to remove punctuation in a string.\n    '''\n    return re.sub('[ ]','', str1)\ndef remove_url(str1):\n    '''\n    Write a function to remove any URLs in a string.\n    '''\n    return re.sub('www\\.\\w+', '', str1)\ndef remove_acronyms(str1):\n    '''\n    Write a function to remove any acronyms in a string.\n    '''\n    return re.sub('([A-Z][a-z]{2,})\\.', r'\\1', str1)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove any special characters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9-_]+','', str1)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove any numbers from a string.\n    '''\n    return re.sub('[0-9]', '', str1)\ndef remove_emails(str1):\n    '''\n    Write a function to remove any email from a string.\n    '''\n    return re.sub('[a-zA-Z0-9._+-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+', '', str1)\ndef remove_symbols(str1):\n    '''\n    Write a function to remove any symbols from a string.\n    '''\n    return re.sub('[^0-9A-Za-z_]+', '', str1)\ndef remove_other_words(str1):\n    '''\n    Write a function to remove any words that are not lower case, numbers, symbols, special characters, and words that occur in a given string.\n    '''\n    return re.sub('[^A-Za-z0-9]+','', str1)\ndef remove_stop_words_numbers(str1):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    return re.sub('\\d+','', str1)\ndef remove_stop_words_symbols(str1):\n    '''\n    Write a function to remove symbols from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', str1)\ndef remove_stop_words_special_characters(str1):\n    '''\n    Write a function to remove special characters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9-_]+','', str1)\ndef remove_stop_words_email(str1):\n    '''\n    Write a function to remove any emails from a string.\n    '''\n    return re.sub('[a-zA-Z0-9._+-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+', '', str1)\ndef remove_stop_words_numbers_email(str1):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    return re.sub('\\d+','', str1)\ndef remove_stop_words_symbols_email(str1):\n    '''\n    Write a function to remove symbols from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', str1)\ndef remove_stop_words_other_words(str1):\n    '''\n    Write a function to remove any words that are not lower case, numbers, symbols, special characters, and words that occur in a given string.\n    '''\n    return re.sub('[^A-Za-z0-9]+','', str1)\ndef remove_numbers_other_words(str1):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    return re.sub('\\d+','', str1)\ndef remove_stop_words_numbers_other_words(str1):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    return re.sub('\\d+','', str1)\ndef remove_stop_words_symbols_other_words(str1):\n    '''\n    Write a function to remove symbols from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', str1)\ndef remove_stop_words_special_characters_other_words(str1):\n    '''\n    Write a function to remove special characters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', str1)\ndef remove_stop_words_email_other_words(str1):\n    '''\n    Write a function to remove any emails from a string.\n    '''\n    return re.sub('[a-zA-Z0-9._+-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+', '', str1)\ndef remove_stop_words_numbers_email_other_words(str1):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    return re.sub('\\d+','', str1)\ndef remove_stop_words_symbols_email_other_words(str1):\n    '''\n    Write a function to remove symbols from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', str1)\ndef remove_stop_words_other_words_email(str1):\n    '''\n    Write a function to remove any emails from a string.\n    '''\n    return re.sub('[a-zA-Z0-9._+-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+', '', str1)\ndef remove_other_words_email(str1):\n    '''\n    Write a function to remove any emails from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', str1)\ndef remove_numbers_other_words_email(str1):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    return re.sub('\\d+','', str1)\ndef remove_stop_words_numbers_other_words_email(str1):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    return re.sub('\\d+','', str1)\ndef remove_stop_words_symbols_other_words_email(str1):\n    '''\n    Write a function to remove symbols from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', str1)\ndef remove_stop_words_special_characters_other_words_email(str1):\n    '''\n    Write a function to remove special characters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', str1)\ndef remove_stop_words_email_other_words_email(str1):\n    '''\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    spaced_str1 = ''\n    for word in str1.split():\n        if word[0].isupper():\n            spaced_str1 += word +''\n        else:\n            spaced_str1 +='' + word +''\n    return spaced_str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    new_str = ''\n    for word in words:\n        if word[0].isupper():\n            new_str += word.capitalize()\n        else:\n            new_str += word.capitalize() +''\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    str1 = str1.replace('>','')\n    str1 = str1.replace('<','')\n    str1 = str1.replace('!','')\n    str1 = str1.replace('?','')\n    str1 = str1.replace('\"','')\n    str1 = str1.replace('\\'','')\n    str1 = str1.replace('$','')\n    str1 = str1.replace('&','')\n    str1 = str1.replace('?','')\n    str1 = str1.replace('.','')\n    str1 = str1.replace(';','')\n    str1 = str1.replace('\"','')\n    str1 = str1.replace(',','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace(')','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace('[','')\n    str1 = str1.replace(']','')\n    str1 = str1.replace(',','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace(')','')\n    str1 = str1.replace('{','')\n    str1 = str1.replace('}','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('.','')\n    str1 = str1.replace(':','')\n    str1 = str1.replace('&','')\n    str1 = str1.replace('*','')\n    str1 = str1.replace('%','')\n    str1 = str1.replace('&','')\n    str1 = str1.replace('$','')\n    str1 = str1.replace('@','')\n    str1 = str1.replace('@','')\n    str1 = str1.replace('^','')\n    str1 = str1.replace('!','')\n    str1 = str1.replace('@','')\n    str1 = str1.replace('#','')\n    str1 = str1.replace('&','')\n    str1 = str1.replace('*','')\n    str1 = str1.replace('%','')\n    str1 = str1.replace('&','')\n    str1 = str1.replace('$','')\n    str1 = str1.replace('+','')\n    str1 = str1.replace('_','')\n    str1 = str1.replace('[','')\n    str1 = str1.replace(']','')\n    str1 = str1.replace(',','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace(')','')\n    str1 = str1.replace('{','')\n    str1 = str1.replace('}','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace(')','')\n    str1 = str1.replace('{','')\n    str1 = str1.replace('}','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('<','')\n    str1 = str1.replace('>','')\n    str1 = str1.replace('<=','')\n    str1 = str1.replace('>=','')\n    str1 = str1.replace('=','')\n    str1 = str1.replace('\\\\','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('\\r','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\n','')"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # your code goes here\n    str1=str1.upper()\n    # print(str1)\n    words=str1.split()\n    # print(words)\n    new_words=[]\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word)\n        elif word[0].islower():\n            new_words.append(word)\n        else:\n            new_words.append(word.capitalize())\n    # print(new_words)\n    str1=' '.join(new_words)\n    # print(str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.split()\n    for i in range(len(str2)):\n        if str2[i][0] == 'a':\n            str2[i] ='' + str2[i]\n        elif str2[i][0] == 'e':\n            str2[i] ='' + str2[i]\n        elif str2[i][0] == 'i':\n            str2[i] ='' + str2[i]\n        elif str2[i][0] == 'o':\n            str2[i] ='' + str2[i]\n        elif str2[i][0] == 'u':\n            str2[i] ='' + str2[i]\n    return''.join(str2)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define a dictionary with capital words as keys and their associated word as values\n    capital_word_dict = dict()\n    # define a loop to iterate through the string\n    for word in str1:\n        # if the word starts with a capital letter, add it to the dictionary\n        if word[0].upper() in capital_word_dict.keys():\n            capital_word_dict[word[0].upper()] = word[1:]\n        else:\n            # if it doesn't start with a capital letter, just add it to the dictionary\n            capital_word_dict[word[0].upper()] = word[1:]\n    # return the dictionary\n    return capital_word_dict\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Your code here\n    #import math\n    # Your code goes here\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if nums_str is None or len(nums_str) == 0:\n        return nums_str\n    else:\n        sorted_nums = []\n        for num in nums_str:\n            if isinstance(num, str):\n                sorted_nums.append(int(num))\n            else:\n                sorted_nums.append(num)\n        return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(0, len(nums_str)):\n        for j in range(i, len(nums_str)):\n            if nums_str[i] > nums_str[j]:\n                nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # get list of numbers from user\n    list_nums = [int(x) for x in nums_str.split(',')]\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_lst = []\n    # convert to a list and then sort it\n    for num in nums_str:\n        num_lst.append(int(num))\n    num_lst.sort()\n    # convert to a string and return it\n    str_lst = \"\".join([str(num) for num in num_lst])\n    return str_lst\n    \ndef remove_duplicate_elements(lst):\n    '''\n    Write a function to remove duplicate elements from a given list.\n    '''\n    lst_with_duplicates = list(set(lst))\n    return lst_with_duplicates\n    \ndef generate_random_list(min_val, max_val, n):\n    '''\n    Write a function to generate a random list of numbers between min_val and max_val.\n    '''\n    lst = list(range(min_val, max_val + 1))\n    lst_with_duplicates = remove_duplicate_elements(lst)\n    #randomly pick n elements\n    n = len(lst_with_duplicates)\n    random_lst = []\n    for i in range(n):\n        random_lst.append(random.choice(lst_with_duplicates))\n    return random_lst\n    \ndef merge_list(lst_1, lst_2):\n    '''\n    Write a function to merge two given lists into one.\n    '''\n    new_lst = []\n    i = 0\n    j = 0\n    while i < len(lst_1) and j < len(lst_2):\n        if lst_1[i] < lst_2[j]:\n            new_lst.append(lst_1[i])\n            i += 1\n        else:\n            new_lst.append(lst_2[j])\n            j += 1\n    while i < len(lst_1):\n        new_lst.append(lst_1[i])\n        i += 1\n    while j < len(lst_2):\n        new_lst.append(lst_2[j])\n        j += 1\n    return new_lst\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_list = []\n    for num in nums_str:\n        new_list.append(float(num))\n    return sorted(new_list)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if type(nums_str) == str:\n        nums_str = nums_str.split(\",\")\n    sorted_nums = sorted(nums_str)\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(reverse=True)\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_list = []\n    for num in nums_str:\n        if num.isdigit():\n            sorted_list.append(float(num))\n        else:\n            sorted_list.append(int(num))\n    sorted_list.sort()\n    return sorted_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    \n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for el in test_tup:\n        test_list.append(el)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    list_copy = test_list[:]\n    list_copy.append(tuple(test_tup))\n    test_list = list_copy[:]\n    \n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_tup = tuple(test_tup)\n    test_list.append(new_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Check if the tuple is already in the list\n    if(test_tup in test_list):\n        # Add the tuple to the list\n        test_list.append(test_tup)\n    else:\n        # Add the tuple to the list\n        test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # create a list of tuples\n    test_list.append(test_tup)\n    # get the list length\n    list_len = len(test_list)\n    # get the index of the tuple to add\n    index = test_list.index(test_tup)\n    # add the tuple to the list\n    test_list.insert(index, test_tup)\n    # return the list\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef list_to_tuples(list_tuple):\n    '''\n    Create a tuple from a list.\n    '''\n    return tuple(list_tuple)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_tup[0] > test_tup[1]:\n        test_list.append(test_tup[1])\n    elif test_tup[0] < test_tup[1]:\n        test_list.append(test_tup[0])\n    else:\n        test_list.append(test_tup[0])\n        test_list.append(test_tup[1])\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for index, item in enumerate(test_list):\n        test_tup.append(item)\n        test_list[index] = tuple(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return arr[i] < arr[2 * i + 1]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the given array is empty\n    if i == 0:\n        return True\n    # Check if array[i] is greater than heap[i // 2]\n    elif arr[i] > arr[i//2]:\n        # If the i//2 index is greater than the index of array[i], then return False\n        return False\n    # If the i//2 index is not greater than the index of array[i], then return True\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or (i + 1) % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and arr[i] < arr[2 * i + 1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    elif arr[i] < arr[2*i+1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) - 1 and arr[i] < arr[i+1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Memoization Table\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return 45\n    if n == 45:\n        return 46\n    if n == 46:\n        return 47\n    if n == 47:\n        return 48\n    if n == 48:\n        return 49\n    if n == 49:\n        return 50\n    if n == 50:\n        return 51\n    if n == 51:\n        return 52\n    if n == 52:\n        return 53\n    if n == 53:\n        return 54\n    if n == 54:\n        return 55\n    if n == 55:\n        return 56\n    if n == 56:\n        return 57\n    if n == 57:\n        return 58\n    if n == 58:\n        return 59\n    if n == 59:\n        return 60\n    if n == 60:\n        return 61\n    if n == 61:\n        return 62\n    if n == 62:\n        return 63\n    if n == 63:\n        return 64\n    if n == 64:\n        return 65\n    if n == 65:\n        return 66\n    if n == 66:\n        return 67\n    if n == 67:\n        return 68\n    if n == 68:\n        return 69\n    if n == 69:\n        return 70\n    if n == 70:\n        return 71\n    if n == 71:\n        return 72\n    if n == 72:\n        return 73\n    if n == 73:\n        return 74\n    if n == 74:\n        return 75\n    if n == 75:\n        return 76\n    if n == 76:\n        return 77\n    if n == 77:\n        return 78\n    if n == 78:\n        return 79\n    if n == 79:\n        return 80\n    if n == 80:\n        return 81\n    if n == 81:\n        return 82\n    if n == 82:\n        return 83\n    if n == 83:\n        return 84\n    if n == 84:\n        return 85\n    if n == 85:\n        return 86\n    if n == 86:\n        return 87\n    if n == 87:\n        return 88\n    if n == 88:\n        return 89\n    if n == 89:\n        return 90\n    if n == 90:\n        return 91\n    if n == 91:\n        return 92\n    if n == 92:\n        return 93\n    if n == 93:\n        return 94\n    if n == 94:\n        return 95\n    if n == 95:\n        return 96\n    if n == 96:\n        return 97\n    if n == 97:\n        return 98\n    if n == 98:\n        return 99\n    if n == 99:\n        return 100\n    if n == 100:\n        return 101\n    if n == 101:\n        return 102\n    if n == 102:\n        return 103\n    if n == 103:\n        return 104\n    if n == 104:\n        return 105\n    if n == 105:\n        return 106\n    if n == 106:\n        return 107\n    if n == 107:\n        return 108\n    if n == 108:\n        return 109\n    if n == 109:\n        return 110\n    if n == 110:\n        return 111\n    if n == 111:\n        return 112\n    if n == 112:\n        return 113\n    if n == 113:\n        return 114\n    if n == 114:\n        return 115\n    if n == 115:\n        return 116\n    if n == 116:\n        return 117\n    if n == 117:\n        return 118\n    if n == 118:\n        return 119\n    if n == 119:\n        return 120\n    if n == 120:\n        return 121\n    if n == 121:\n        return 122\n    if n == 122:\n        return 123\n    if n == 123:\n        return 124\n    if n == 124:\n        return 125\n    if n == 125:\n        return 126\n    if n == 126:\n        return 127\n    if n == 127:\n        return 128\n    if n == 128:\n        return 129\n    if n == 129:\n        return 130\n    if n == 130:\n        return 131\n    if n == 131:\n        return 132\n    if n == 132:\n        return 133\n    if n == 133:\n        return 134\n    if n == 134:\n        return 135\n    if n == 135:\n        return 136\n    if n == 136:\n        return 137\n    if n == 137:\n        return 138\n    if n == 138:\n        return 139\n    if n == 139:\n        return 140\n    if n == 140:\n        return 141\n    if n == 141:\n        return 142\n    if n == 142:\n        return 143\n    if n == 143:\n        return 144\n    if n == 144:\n        return 145\n    if n == 145:\n        return 146\n    if n == 146:\n        return 147\n    if n == 147:\n        return 148\n    if n == 148:\n        return 149\n    if n == 149:\n        return 150\n    if n == 150:\n        return 151\n    if n == 151:\n        return 152\n    if n == 152:\n        return 153\n    if n == 153:\n        return 154\n    if n == 154:\n        return 155\n    if n == 155:\n        return 156\n    if n == 156:\n        return 157\n    if n == 157:\n        return 158\n    if n == 158:\n        return 159\n    if n == 159:\n        return 160\n    if n == 160:\n        return 161\n    if n == 161:\n        return 162\n    if n == 162:\n        return 163\n    if n == 163:\n        return 164\n    if n == 164:\n        return 165\n    if n == 165:\n        return 166\n    if n == 166:\n        return 167\n    if n == 167:\n        return 168\n    if n == 168:\n        return 169\n    if n == 169:\n        return 170\n    if n == 170:\n        return 171\n    if n == 171:\n        return 172\n    if n == 172:\n        return 173\n    if n == 173:\n        return 174\n    if n == 174:\n        return 175\n    if n == 175:\n        return 176\n    if n == 17"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # JACOBSTAL\n    # https://en.wikipedia.org/wiki/Jacobi_theorem\n    # https://www.geeksforgeeks.org/jacobsthal-lucas-numbers/\n    # https://en.wikipedia.org/wiki/Jacobi_theorem\n    # https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    # https://www.geeksforgeeks.org/jacobsthal-lucas-numbers/\n    # https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    # https://www.geeksforgeeks.org/jacobsthal-lucas-numbers/\n    # https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    # https://www.geeksforgeeks.org/jacobsthal-lucas-numbers/\n    # https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    result = 0\n    for i in range(n):\n        result += (i+1)*(i+1)\n    return result\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 2\n    elif n == 6:\n        return 2\n    elif n == 7:\n        return 2\n    elif n == 8:\n        return 2\n    elif n == 9:\n        return 3\n    elif n == 10:\n        return 3\n    elif n == 11:\n        return 3\n    elif n == 12:\n        return 4\n    elif n == 13:\n        return 4\n    elif n == 14:\n        return 4\n    elif n == 15:\n        return 4\n    elif n == 16:\n        return 4\n    elif n == 17:\n        return 5\n    elif n == 18:\n        return 5\n    elif n == 19:\n        return 5\n    elif n == 20:\n        return 5\n    elif n == 21:\n        return 5\n    elif n == 22:\n        return 5\n    elif n == 23:\n        return 5\n    elif n == 24:\n        return 5\n    elif n == 25:\n        return 5\n    elif n == 26:\n        return 5\n    elif n == 27:\n        return 5\n    elif n == 28:\n        return 5\n    elif n == 29:\n        return 5\n    elif n == 30:\n        return 5\n    elif n == 31:\n        return 5\n    elif n == 32:\n        return 5\n    elif n == 33:\n        return 5\n    elif n == 34:\n        return 5\n    elif n == 35:\n        return 5\n    elif n == 36:\n        return 5\n    elif n == 37:\n        return 5\n    elif n == 38:\n        return 5\n    elif n == 39:\n        return 5\n    elif n == 40:\n        return 5\n    elif n == 41:\n        return 5\n    elif n == 42:\n        return 5\n    elif n == 43:\n        return 5\n    elif n == 44:\n        return 5\n    elif n == 45:\n        return 5\n    elif n == 46:\n        return 5\n    elif n == 47:\n        return 5\n    elif n == 48:\n        return 5\n    elif n == 49:\n        return 5\n    elif n == 50:\n        return 5\n    elif n == 51:\n        return 5\n    elif n == 52:\n        return 5\n    elif n == 53:\n        return 5\n    elif n == 54:\n        return 5\n    elif n == 55:\n        return 5\n    elif n == 56:\n        return 5\n    elif n == 57:\n        return 5\n    elif n == 58:\n        return 5\n    elif n == 59:\n        return 5\n    elif n == 60:\n        return 5\n    elif n == 61:\n        return 5\n    elif n == 62:\n        return 5\n    elif n == 63:\n        return 5\n    elif n == 64:\n        return 5\n    elif n == 65:\n        return 5\n    elif n == 66:\n        return 5\n    elif n == 67:\n        return 5\n    elif n == 68:\n        return 5\n    elif n == 69:\n        return 5\n    elif n == 70:\n        return 5\n    elif n == 71:\n        return 5\n    elif n == 72:\n        return 5\n    elif n == 73:\n        return 5\n    elif n == 74:\n        return 5\n    elif n == 75:\n        return 5\n    elif n == 76:\n        return 5\n    elif n == 77:\n        return 5\n    elif n == 78:\n        return 5\n    elif n == 79:\n        return 5\n    elif n == 80:\n        return 5\n    elif n == 81:\n        return 5\n    elif n == 82:\n        return 5\n    elif n == 83:\n        return 5\n    elif n == 84:\n        return 5\n    elif n == 85:\n        return 5\n    elif n == 86:\n        return 5\n    elif n == 87:\n        return 5\n    elif n == 88:\n        return 5\n    elif n == 89:\n        return 5\n    elif n == 90:\n        return 5\n    elif n == 91:\n        return 5\n    elif n == 92:\n        return 5\n    elif n == 93:\n        return 5\n    elif n == 94:\n        return 5\n    elif n == 95:\n        return 5\n    elif n == 96:\n        return 5\n    elif n == 97:\n        return 5\n    elif n == 98:\n        return 5\n    elif n == 99:\n        return 5\n    elif n == 100:\n        return 5\n    elif n == 101:\n        return 5\n    elif n == 102:\n        return 5\n    elif n == 103:\n        return 5\n    elif n == 104:\n        return 5\n    elif n == 105:\n        return 5\n    elif n == 106:\n        return 5\n    elif n == 107:\n        return 5\n    elif n == 108:\n        return 5\n    elif n == 109:\n        return 5\n    elif n == 110:\n        return 5\n    elif n == 111:\n        return 5\n    elif n == 112:\n        return 5\n    elif n == 113:\n        return 5\n    elif n == 114:\n        return 5\n    elif n == 115:\n        return 5\n    elif n == 116:\n        return 5\n    elif n == 117:\n        return 5\n    elif n == 118:\n        return 5\n    elif n == 119:\n        return 5\n    elif n == 120:\n        return 5\n    elif n == 121:\n        return 5\n    elif n == 122:\n        return 5\n    elif n == 123:\n        return 5\n    elif n == 124:\n        return 5\n    elif n == 125:\n        return 5\n    elif n == 126:\n        return 5\n    elif n == 127:\n        return 5\n    elif n == 128:\n        return 5\n    elif n == 129:\n        return 5\n    elif n == 130:\n        return 5\n    elif n == 131:\n        return 5\n    elif n == 132:\n        return 5\n    elif n == 133:\n        return 5\n    elif n == 134:\n        return 5\n    elif n == 135:\n        return 5\n    elif n == 136:\n        return 5\n    elif n == 137:\n        return 5\n    elif n == 138:\n        return 5\n    elif n == 139:\n        return 5\n    elif n == 140:\n        return 5\n    elif n == 141:\n        return 5\n    elif n == 142:\n        return 5\n    elif n == 143:\n        return 5\n    elif n == 144:\n        return 5\n    elif n == 145:\n        return 5\n    elif n == 146:\n        return 5\n    elif n == 147:\n        return 5\n    elif n == 148:\n        return 5\n    elif n == 149:\n        return 5\n    elif n == 150:\n        return 5\n    elif n == 151:\n        return 5\n    elif n == 152:\n        return 5\n    elif n == 153:\n        return 5\n    elif n == 154:\n        return 5\n    elif n == 155:\n        return 5\n    elif n == 156:\n        return 5\n    elif n == 157:\n        return 5\n    elif n == 158:\n        return 5\n    elif n == 159:\n        return 5\n    elif n == 160:\n        return 5\n    elif n == 161:\n        return 5\n    elif "
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # IMPLEMENTATION\n    # Loop from 0 to n-1\n    # If n is greater than the number of elements, print the number and exit\n    # Else, print the first element of the sequence\n    # and call the function for n-1 times.\n    # Fill in the blank for n = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27\n    if n >= len(list_numbers):\n        print(list_numbers[n])\n        return\n    else:\n        jacobsthal_num(n+1)\n    "
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    for i in range(1, n):\n        if i % 5 == 0 and i % 3 == 0:\n            continue\n        elif i % 5 == 0:\n            print(i)\n            i += 1\n        elif i % 3 == 0:\n            print(i)\n            i += 1\n        else:\n            print(i)\n            i += 1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    from functools import reduce\n    if n<=0:\n        raise ValueError(\"This number cannot be negative.\")\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 4\n    if n==5:\n        return 5\n    if n==6:\n        return 6\n    if n==7:\n        return 7\n    if n==8:\n        return 8\n    if n==9:\n        return 9\n    if n==10:\n        return 10\n    if n==11:\n        return 11\n    if n==12:\n        return 12\n    if n==13:\n        return 13\n    if n==14:\n        return 14\n    if n==15:\n        return 15\n    if n==16:\n        return 16\n    if n==17:\n        return 17\n    if n==18:\n        return 18\n    if n==19:\n        return 19\n    if n==20:\n        return 20\n    if n==21:\n        return 21\n    if n==22:\n        return 22\n    if n==23:\n        return 23\n    if n==24:\n        return 24\n    if n==25:\n        return 25\n    if n==26:\n        return 26\n    if n==27:\n        return 27\n    if n==28:\n        return 28\n    if n==29:\n        return 29\n    if n==30:\n        return 30\n    if n==31:\n        return 31\n    if n==32:\n        return 32\n    if n==33:\n        return 33\n    if n==34:\n        return 34\n    if n==35:\n        return 35\n    if n==36:\n        return 36\n    if n==37:\n        return 37\n    if n==38:\n        return 38\n    if n==39:\n        return 39\n    if n==40:\n        return 40\n    if n==41:\n        return 41\n    if n==42:\n        return 42\n    if n==43:\n        return 43\n    if n==44:\n        return 44\n    if n==45:\n        return 45\n    if n==46:\n        return 46\n    if n==47:\n        return 47\n    if n==48:\n        return 48\n    if n==49:\n        return 49\n    if n==50:\n        return 50\n    if n==51:\n        return 51\n    if n==52:\n        return 52\n    if n==53:\n        return 53\n    if n==54:\n        return 54\n    if n==55:\n        return 55\n    if n==56:\n        return 56\n    if n==57:\n        return 57\n    if n==58:\n        return 58\n    if n==59:\n        return 59\n    if n==60:\n        return 60\n    if n==61:\n        return 61\n    if n==62:\n        return 62\n    if n==63:\n        return 63\n    if n==64:\n        return 64\n    if n==65:\n        return 65\n    if n==66:\n        return 66\n    if n==67:\n        return 67\n    if n==68:\n        return 68\n    if n==69:\n        return 69\n    if n==70:\n        return 70\n    if n==71:\n        return 71\n    if n==72:\n        return 72\n    if n==73:\n        return 73\n    if n==74:\n        return 74\n    if n==75:\n        return 75\n    if n==76:\n        return 76\n    if n==77:\n        return 77\n    if n==78:\n        return 78\n    if n==79:\n        return 79\n    if n==80:\n        return 80\n    if n==81:\n        return 81\n    if n==82:\n        return 82\n    if n==83:\n        return 83\n    if n==84:\n        return 84\n    if n==85:\n        return 85\n    if n==86:\n        return 86\n    if n==87:\n        return 87\n    if n==88:\n        return 88\n    if n==89:\n        return 89\n    if n==90:\n        return 90\n    if n==91:\n        return 91\n    if n==92:\n        return 92\n    if n==93:\n        return 93\n    if n==94:\n        return 94\n    if n==95:\n        return 95\n    if n==96:\n        return 96\n    if n==97:\n        return 97\n    if n==98:\n        return 98\n    if n==99:\n        return 99\n    if n==100:\n        return 100\n    if n==101:\n        return 101\n    if n==102:\n        return 102\n    if n==103:\n        return 103\n    if n==104:\n        return 104\n    if n==105:\n        return 105\n    if n==106:\n        return 106\n    if n==107:\n        return 107\n    if n==108:\n        return 108\n    if n==109:\n        return 109\n    if n==110:\n        return 110\n    if n==111:\n        return 111\n    if n==112:\n        return 112\n    if n==113:\n        return 113\n    if n==114:\n        return 114\n    if n==115:\n        return 115\n    if n==116:\n        return 116\n    if n==117:\n        return 117\n    if n==118:\n        return 118\n    if n==119:\n        return 119\n    if n==120:\n        return 120\n    if n==121:\n        return 121\n    if n==122:\n        return 122\n    if n==123:\n        return 123\n    if n==124:\n        return 124\n    if n==125:\n        return 125\n    if n==126:\n        return 126\n    if n==127:\n        return 127\n    if n==128:\n        return 128\n    if n==129:\n        return 129\n    if n==130:\n        return 130\n    if n==131:\n        return 131\n    if n==132:\n        return 132\n    if n==133:\n        return 133\n    if n==134:\n        return 134\n    if n==135:\n        return 135\n    if n==136:\n        return 136\n    if n==137:\n        return 137\n    if n==138:\n        return 138\n    if n==139:\n        return 139\n    if n==140:\n        return 140\n    if n==141:\n        return 141\n    if n==142:\n        return 142\n    if n==143:\n        return 143\n    if n==144:\n        return 144\n    if n==145:\n        return 145\n    if n==146:\n        return 146\n    if n==147:\n        return 147\n    if n==148:\n        return 148\n    if n==149:\n        return 149\n    if n==150:\n        return 150\n    if n==151:\n        return 151\n    if n==152:\n        return 152\n    if n==153:\n        return 153\n    if n==154:\n        return 154\n    if n==155:\n        return 155\n    if n==156:\n        return 156\n    if n==157:\n        return 157\n    if n==158:\n        return 158\n    if n==159:\n        return 159\n    if n==160:\n        return 160\n    if n==161:\n        return 161\n    if n==162:\n        return 162\n    if n==163:\n        return 163\n    if n==164:\n        return 164\n    if n==165:\n        return 165\n    if n==166:\n        return 166\n    if n==167:\n        return 167\n    if n==168:\n        return 168\n    if n==169:\n        return 169\n    if n==170:\n        return 170\n    if n==171:\n        return 171\n    if n==172:\n        return 172\n    if n==173:\n        return 173\n    if n==174:\n        return 174\n    if n==175"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    import math\n    \n    if n<0:\n        print(\"Error: Negative input\")\n        return -1\n    elif n==0:\n        print(\"First number is: 0\")\n        return 0\n    elif n==1:\n        print(\"The first number is: 1\")\n        return 1\n    elif n==2:\n        print(\"The first number is: 2\")\n        return 2\n    elif n==3:\n        print(\"The first number is: 3\")\n        return 3\n    elif n==4:\n        print(\"The first number is: 4\")\n        return 4\n    elif n==5:\n        print(\"The first number is: 5\")\n        return 5\n    elif n==6:\n        print(\"The first number is: 6\")\n        return 6\n    elif n==7:\n        print(\"The first number is: 7\")\n        return 7\n    elif n==8:\n        print(\"The first number is: 8\")\n        return 8\n    elif n==9:\n        print(\"The first number is: 9\")\n        return 9\n    elif n==10:\n        print(\"The first number is: 10\")\n        return 10\n    elif n==11:\n        print(\"The first number is: 11\")\n        return 11\n    elif n==12:\n        print(\"The first number is: 12\")\n        return 12\n    elif n==13:\n        print(\"The first number is: 13\")\n        return 13\n    elif n==14:\n        print(\"The first number is: 14\")\n        return 14\n    elif n==15:\n        print(\"The first number is: 15\")\n        return 15\n    elif n==16:\n        print(\"The first number is: 16\")\n        return 16\n    elif n==17:\n        print(\"The first number is: 17\")\n        return 17\n    elif n==18:\n        print(\"The first number is: 18\")\n        return 18\n    elif n==19:\n        print(\"The first number is: 19\")\n        return 19\n    elif n==20:\n        print(\"The first number is: 20\")\n        return 20\n    elif n==21:\n        print(\"The first number is: 21\")\n        return 21\n    elif n==22:\n        print(\"The first number is: 22\")\n        return 22\n    elif n==23:\n        print(\"The first number is: 23\")\n        return 23\n    elif n==24:\n        print(\"The first number is: 24\")\n        return 24\n    elif n==25:\n        print(\"The first number is: 25\")\n        return 25\n    elif n==26:\n        print(\"The first number is: 26\")\n        return 26\n    elif n==27:\n        print(\"The first number is: 27\")\n        return 27\n    elif n==28:\n        print(\"The first number is: 28\")\n        return 28\n    elif n==29:\n        print(\"The first number is: 29\")\n        return 29\n    elif n==30:\n        print(\"The first number is: 30\")\n        return 30\n    elif n==31:\n        print(\"The first number is: 31\")\n        return 31\n    elif n==32:\n        print(\"The first number is: 32\")\n        return 32\n    elif n==33:\n        print(\"The first number is: 33\")\n        return 33\n    elif n==34:\n        print(\"The first number is: 34\")\n        return 34\n    elif n==35:\n        print(\"The first number is: 35\")\n        return 35\n    elif n==36:\n        print(\"The first number is: 36\")\n        return 36\n    elif n==37:\n        print(\"The first number is: 37\")\n        return 37\n    elif n==38:\n        print(\"The first number is: 38\")\n        return 38\n    elif n==39:\n        print(\"The first number is: 39\")\n        return 39\n    elif n==40:\n        print(\"The first number is: 40\")\n        return 40\n    elif n==41:\n        print(\"The first number is: 41\")\n        return 41\n    elif n==42:\n        print(\"The first number is: 42\")\n        return 42\n    elif n==43:\n        print(\"The first number is: 43\")\n        return 43\n    elif n==44:\n        print(\"The first number is: 44\")\n        return 44\n    elif n==45:\n        print(\"The first number is: 45\")\n        return 45\n    elif n==46:\n        print(\"The first number is: 46\")\n        return 46\n    elif n==47:\n        print(\"The first number is: 47\")\n        return 47\n    elif n==48:\n        print(\"The first number is: 48\")\n        return 48\n    elif n==49:\n        print(\"The first number is: 49\")\n        return 49\n    elif n==50:\n        print(\"The first number is: 50\")\n        return 50\n    elif n==51:\n        print(\"The first number is: 51\")\n        return 51\n    elif n==52:\n        print(\"The first number is: 52\")\n        return 52\n    elif n==53:\n        print(\"The first number is: 53\")\n        return 53\n    elif n==54:\n        print(\"The first number is: 54\")\n        return 54\n    elif n==55:\n        print(\"The first number is: 55\")\n        return 55\n    elif n==56:\n        print(\"The first number is: 56\")\n        return 56\n    elif n==57:\n        print(\"The first number is: 57\")\n        return 57\n    elif n==58:\n        print(\"The first number is: 58\")\n        return 58\n    elif n==59:\n        print(\"The first number is: 59\")\n        return 59\n    elif n==60:\n        print(\"The first number is: 60\")\n        return 60\n    elif n==61:\n        print(\"The first number is: 61\")\n        return 61\n    elif n==62:\n        print(\"The first number is: 62\")\n        return 62\n    elif n==63:\n        print(\"The first number is: 63\")\n        return 63\n    elif n==64:\n        print(\"The first number is: 64\")\n        return 64\n    elif n==65:\n        print(\"The first number is: 65\")\n        return 65\n    elif n==66:\n        print(\"The first number is: 66\")\n        return 66\n    elif n==67:\n        print(\"The first number is: 67\")\n        return 67\n    elif n==68:\n        print(\"The first number is: 68\")\n        return 68\n    elif n==69:\n        print(\"The first number is: 69\")\n        return 69\n    elif n==70:\n        print(\"The first number is: 70\")\n        return 70\n    elif n==71:\n        print(\"The first number is: 71\")\n        return 71\n    elif n==72:\n        print(\"The first number is: 72\")\n        return 72\n    elif n==73:\n        print(\"The first number is: 73\")\n        return 73\n    elif n==74:\n        print(\"The first number is: 74\")\n        return 74\n    elif n==75:\n        print(\"The first number is: 75\")\n        return 75\n    elif n==76:\n        print(\"The first number is: 76\")\n        return 76\n    elif n==77:\n        print(\"The first number is: 77\")\n        return 77\n    elif n==78:\n        print(\"The first number is: 78\")\n        return 78\n    elif n==79:\n        print(\"The first number is: 79\")\n        return 79\n    elif n==80:\n        print(\"The first number is: 80\")\n        return 80\n    elif n==81:\n        print(\"The first number is: 81\")\n        return 81\n    elif n==82:\n        print(\"The first number is: 82\")\n        return 82\n    elif n==83:\n        print(\"The firs"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        print(\"\\nError: n must be >= 0.\")\n        return\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 43\n    elif n == 7:\n        return 85\n    elif n == 8:\n        return 171\n    elif n == 9:\n        return 341\n    elif n == 10:\n        return 683\n    elif n == 11:\n        return 1365\n    elif n == 12:\n        return 2731\n    elif n == 13:\n        return 685\n    elif n == 14:\n        return 1771\n    elif n == 15:\n        return 6983\n    elif n == 16:\n        return 2083\n    elif n == 17:\n        return 1007\n    elif n == 18:\n        return 13245\n    elif n == 19:\n        return 2291\n    elif n == 20:\n        return 5085\n    elif n == 21:\n        return 6058\n    elif n == 22:\n        return 6785\n    elif n == 23:\n        return 7175\n    elif n == 24:\n        return 8677\n    elif n == 25:\n        return 906\n    elif n == 26:\n        return 10174\n    elif n == 27:\n        return 13352\n    elif n == 28:\n        return 11042\n    elif n == 29:\n        return 13524\n    elif n == 30:\n        return 14845\n    elif n == 31:\n        return 16914\n    elif n == 32:\n        return 17387\n    elif n == 33:\n        return 18365\n    elif n == 34:\n        return 20427\n    elif n == 35:\n        return 2278\n    elif n == 36:\n        return 2489\n    elif n == 37:\n        return 2589\n    elif n == 38:\n        return 2625\n    elif n == 39:\n        return 2825\n    elif n == 40:\n        return 3005\n    elif n == 41:\n        return 3207\n    elif n == 42:\n        return 3437\n    elif n == 43:\n        return 3659\n    elif n == 44:\n        return 3829\n    elif n == 45:\n        return 4369\n    elif n == 46:\n        return 4669\n    elif n == 47:\n        return 4919\n    elif n == 48:\n        return 5177\n    elif n == 49:\n        return 5785\n    elif n == 50:\n        return 5867\n    elif n == 51:\n        return 6789\n    elif n == 52:\n        return 7371\n    elif n == 53:\n        return 7819\n    elif n == 54:\n        return 8031\n    elif n == 55:\n        return 8323\n    elif n == 56:\n        return 8939\n    elif n == 57:\n        return 9567\n    elif n == 58:\n        return 10225\n    elif n == 59:\n        return 10465\n    elif n == 60:\n        return 10995\n    elif n == 61:\n        return 10865\n    elif n == 62:\n        return 11185\n    elif n == 63:\n        return 11721\n    elif n == 64:\n        return 12429\n    elif n == 65:\n        return 12663\n    elif n == 66:\n        return 14159\n    elif n == 67:\n        return 14265\n    elif n == 68:\n        return 14745\n    elif n == 69:\n        return 15241\n    elif n == 70:\n        return 15573\n    elif n == 71:\n        return 15675\n    elif n == 72:\n        return 16175\n    elif n == 73:\n        return 16349\n    elif n == 74:\n        return 16675\n    elif n == 75:\n        return 17121\n    elif n == 76:\n        return 17395\n    elif n == 77:\n        return 18295\n    elif n == 78:\n        return 18607\n    elif n == 79:\n        return 19043\n    elif n == 80:\n        return 21907\n    elif n == 81:\n        return 22075\n    elif n == 82:\n        return 22477\n    elif n == 83:\n        return 22833\n    elif n == 84:\n        return 23159\n    elif n == 85:\n        return 23455\n    elif n == 86:\n        return 24013\n    elif n == 87:\n        return 24233\n    elif n == 88:\n        return 24597\n    elif n == 89:\n        return 25295\n    elif n == 90:\n        return 25579\n    elif n == 91:\n        return 26271\n    elif n == 92:\n        return 27147\n    elif n == 93:\n        return 28195\n    elif n == 94:\n        return 29299\n    elif n == 95:\n        return 30145\n    elif n == 96:\n        return 30889\n    elif n == 97:\n        return 31229\n    elif n == 98:\n        return 31421\n    elif n == 99:\n        return 32097\n    elif n == 100:\n        return 32563\n    elif n == 101:\n        return 33623\n    elif n == 102:\n        return 34113\n    elif n == 103:\n        return 35331\n    elif n == 104:\n        return 36023\n    elif n == 105:\n        return 36601\n    elif n == 106:\n        return 38281\n    elif n == 107:\n        return 39043\n    elif n == 108:\n        return 40381\n    elif n == 109:\n        return 41139\n    elif n == 110:\n        return 41981\n    elif n == 111:\n        return 43159\n    elif n == 112:\n        return 46317\n    elif n == 113:\n        return 47701\n    elif n == 114:\n        return 48411\n    elif n == 115:\n        return 49381\n    elif n == 116:\n        return 50391\n    elif n == 117:\n        return 51841\n    elif n == 118:\n        return 53333\n    elif n == 119:\n        return 54519\n    elif n == 120:\n        return 55643\n    elif n == 121:\n        return 56265\n    elif n == 122:\n        return 58125\n    elif n == 123:\n        return 59277\n    elif n == 124:\n        return 60219\n    elif n == 125:\n        return 62355\n    elif n == 126:\n        return 64417\n    elif n == 127:\n        return 66141\n    elif n == 128:\n        return 68509\n    elif n == 129:\n        return 70999\n    elif n == 130:\n        return 72543\n    elif n == 131:\n        return 74537\n    elif n == 132:\n        return 75377\n    elif n == 133:\n        return 77913\n    elif n == 134:\n        return 81531\n    elif n == 135:\n        return 83311\n    elif n == 136:\n        return 84639\n    elif n == 137:\n        return 86267\n    elif n == 138:\n        return 87519\n    elif n == 139:\n        return 89321\n    elif n == 140:\n        return 90137\n    elif n == 141:\n        return 91553\n    elif n == 142:\n        return 92647\n    elif n == 143:\n        return 93869\n    elif n == 144:\n        return 94931\n    elif n == 145:\n        return 95449\n    elif n == 146:\n        return 96209\n    e"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 0:\n        return len(test_list)\n    \n    elif K < 0:\n        return len(test_list)\n    \n    elif K == len(test_list):\n        return 1\n    \n    elif test_list[K] in test_list[:K]:\n        return 0\n    \n    else:\n        return min_k(test_list,K-1) + 1\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    if len(test_list) <= K:\n        return test_list\n    for i in range(0, len(test_list) - K + 1):\n        min_k.append(test_list[i])\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq\n    smallest = test_list[0]\n    smallest_index = 0\n    heapq.heapify(smallest)\n    for i in range(1, len(test_list)):\n        if smallest < test_list[i]:\n            heapq.heapreplace(smallest, test_list[i])\n            heapq.heapify(smallest)\n            smallest = smallest[0]\n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return test_list[0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    return [x for x in test_list if len(x) > K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = test_list[0]\n    index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i] < minimum:\n            minimum = test_list[i]\n            index = i\n    print(index)\n    return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 0:\n        return len(test_list)\n    elif K == 1:\n        if len(test_list) == 0:\n            return 0\n        else:\n            return min(min_k(test_list[1:], K-1), min_k(test_list[:-1], K-1))\n    else:\n        return min(min_k(test_list[1:], K-1), min_k(test_list[:-1], K-1))\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return test_list[0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Add code here\n    k_list = list(test_list[:K])\n    k_list.sort(key=lambda x: x[1])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return []\n    \n    res = [0] * len(test_list)\n    \n    # compare the length of the tuples in the sorted array\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][1] <= test_list[j][1]:\n                res[j] = test_list[j][2]\n    \n    # if the array is sorted, then the minimum k = 2\n    if len(res) == len(test_list):\n        return [0]\n    \n    # return the minimum k\n    else:\n        return res\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    if len(l1) == len(l2) == len(l3):\n        for element in l1:\n            if element in l2:\n                index_list.append(l1.index(element))\n            elif element in l3:\n                index_list.append(l2.index(element))\n        for element in l2:\n            if element in l1:\n                index_list.append(l3.index(element))\n            elif element in l3:\n                index_list.append(l2.index(element))\n        for element in l3:\n            if element in l1:\n                index_list.append(l3.index(element))\n            elif element in l2:\n                index_list.append(l1.index(element))\n    else:\n        print(\"Input must be in 2 lists!\")\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    #print(l1)\n    #print(l2)\n    #print(l3)\n    for i in range(len(l1)):\n        #print(l1[i])\n        for j in range(len(l2)):\n            #print(l2[j])\n            if l1[i] == l2[j] and l1[i] == l3[j]:\n                #print(l1[i])\n                index1 = i\n                #print(index1)\n                break\n    #print(index1)\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            #print(l2[j])\n            if l2[j] == l3[i] and l2[j] == l1[i]:\n                #print(l2[j])\n                index2 = j\n                #print(index2)\n                break\n    for i in range(len(l2)):\n        for j in range(len(l3)):\n            if l2[i] == l3[j] and l2[i] == l1[j]:\n                #print(l2[i])\n                index3 = i\n                #print(index3)\n                break\n    return index1, index2, index3\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            l4.append(l1[i])\n    return l4\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    if l1 == []:\n        return []\n    if l2 == []:\n        return []\n    if l3 == []:\n        return []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for index in range(len(l1)):\n        if l1[index] in l2 and l2[l1[index]] in l3:\n            index_list.append(l1[index])\n            l1[index] = l2[l1[index]]\n            l2[l1[index]] = l3[l3.index(l1[index])]\n            l3[l3.index(l1[index])] = 0\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            if l1[i] in l3:\n                index_list.append(l1[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # This function returns a list of lists. Each list in the returned list contains all the elements for the respective lists\n    # So, in order to get the common elements for the three lists, we need to subtract one element from each other\n    # since the index starts from 0.\n    # The list with only one element is the set of common elements. The rest of the list is the set of common elements\n    # In a complex way, we use a for loop, where we iterate through all the list elements, checking whether they are in the first list and adding them to the returned list\n    # Then we check if there are any common elements between the three lists, but if there are, we return them.\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # if we want to see all common elements in the three lists, we should use the map function instead of the list function\n    # remove duplicates\n    l1 = list(set(l1))\n    l2 = list(set(l2))\n    l3 = list(set(l3))\n    common = []\n    i = 0\n    j = 0\n    while i < len(l1) or j < len(l2) or j < len(l3):\n        if l1[i] == l2[j] and l2[j] == l3[i]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] == l2[j] or l1[i] == l3[j] or l2[j] == l3[i]:\n            i += 1\n        elif l1[i] == l3[j] or l2[j] == l3[i]:\n            j += 1\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return l1 + l2 + l3\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers_set = set(numbers)\n    second_smallest = None\n    for number in numbers:\n        if second_smallest == None or number < second_smallest:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    numbers.reverse()\n    numbers.append(numbers[-1])\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = 0\n    for i in range(len(numbers)):\n        if (smallest!= 0 and numbers[i] < smallest):\n            smallest = numbers[i]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    smallest_index = 0\n    for i in range(1,len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_number = None\n    smallest_number_index = None\n    for index, number in enumerate(numbers):\n        if smallest_number is None:\n            smallest_number = number\n            smallest_number_index = index\n        else:\n            if smallest_number > number:\n                smallest_number = number\n                smallest_number_index = index\n    return smallest_number, smallest_number_index\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) > 2:\n        numbers.sort()\n        return numbers[1]\n    else:\n        return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    smallest_index = 0\n    for index, num in enumerate(numbers):\n        if smallest > num:\n            smallest = num\n            smallest_index = index\n    return smallest_index\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by four 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by five 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by six 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by seven 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by eight 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by nine 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by ten 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_eleven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by eleven 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_twelve(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by twelve 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_thirteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by thirteen 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_fourteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by fourteen 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_fifteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by fifteen 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_sixteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by sixteen 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Create regex\n    regex = r'a[bc]*b'\n    #Regex code\n    match = re.search(regex,text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_seventeen(text):\n    '''\n    Write a function tha"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # create regex object\n    regex = re.compile(\"a\")\n    # if text contains 'b'\n    if regex.findall(text):\n        # match the pattern\n        m = regex.match(text)\n        # print(m.group())\n        # print(m.groups())\n        return m.group()\n    return \"\"\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower() #Change the case of the text variable\n    pattern = re.compile(r'a') #Set up the pattern object\n    if(pattern.search(text)!= None): #If the pattern is found, change the text variable\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_list = list(text)\n    i = 0\n    while i < len(text):\n        if text_list[i] == 'b':\n            if text_list[i-1] == 'a':\n                i = i + 1\n            else:\n                return False\n        elif text_list[i] == 'a':\n            if text_list[i+1] == 'b':\n                i = i + 1\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.{1,2}b{1,2}'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    '''\n    for i in range(len(text)):\n        #print(text[i])\n        if text[i] == \"a\" or text[i] == \"b\":\n            return True\n    '''\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('%', '')\n    text = text.replace('$', '')\n    text = text.replace('&', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('%', '')\n    text = text.replace('$', '')\n    text = text.replace('&', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('*', '')\n    text = text.replace('-', '')\n    text = text.replace('!', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('_', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('%', '')\n    text = text.replace('$', '')\n    text = text.replace('&', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('*', '')\n    text = text.replace('-', '')\n    text = text.replace('!', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('_', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('%', '')\n    text = text.replace('$', '')\n    text = text.replace('&', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('*', '')\n    text = text.replace('-', '')\n    text = text.replace('!', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('*', '')\n    text = text.replace('-', '')\n    text = text.replace('!', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('*', '')\n    text = text.replace('-', '')\n    text = text.replace('!', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('*', '')\n    text = text.replace('-', '')\n    text = text.replace('!', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('*', '')\n    text = text.replace('-', '')\n    text = text.replace('!', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match_zero = r\"a\\b\"\n    match_one = r\"b\\b\"\n    pattern_zero = r\"\\b\\w{2,}\"\n    pattern_one = r\"\\b\\w{2,}\"\n    text = re.findall(pattern_zero, text)\n    print(text)\n    print(text[0])\n    print(text[0][1])\n    print(text[0][3])\n    print(text[0][4])\n    print(text[0][6])\n    print(text[0][7])\n    print(text[0][8])\n    print(text[0][9])\n    print(text[0][10])\n    print(text[0][11])\n    print(text[0][12])\n    print(text[0][13])\n    print(text[0][14])\n    print(text[0][15])\n    print(text[0][16])\n    print(text[0][17])\n    print(text[0][18])\n    print(text[0][19])\n    print(text[0][20])\n    print(text[0][21])\n    print(text[0][22])\n    print(text[0][23])\n    print(text[0][24])\n    print(text[0][25])\n    print(text[0][26])\n    print(text[0][27])\n    print(text[0][28])\n    print(text[0][29])\n    print(text[0][30])\n    print(text[0][31])\n    print(text[0][32])\n    print(text[0][33])\n    print(text[0][34])\n    print(text[0][35])\n    print(text[0][36])\n    print(text[0][37])\n    print(text[0][38])\n    print(text[0][39])\n    print(text[0][40])\n    print(text[0][41])\n    print(text[0][42])\n    print(text[0][43])\n    print(text[0][44])\n    print(text[0][45])\n    print(text[0][46])\n    print(text[0][47])\n    print(text[0][48])\n    print(text[0][49])\n    print(text[0][50])\n    print(text[0][51])\n    print(text[0][52])\n    print(text[0][53])\n    print(text[0][54])\n    print(text[0][55])\n    print(text[0][56])\n    print(text[0][57])\n    print(text[0][58])\n    print(text[0][59])\n    print(text[0][60])\n    print(text[0][61])\n    print(text[0][62])\n    print(text[0][63])\n    print(text[0][64])\n    print(text[0][65])\n    print(text[0][66])\n    print(text[0][67])\n    print(text[0][68])\n    print(text[0][69])\n    print(text[0][70])\n    print(text[0][71])\n    print(text[0][72])\n    print(text[0][73])\n    print(text[0][74])\n    print(text[0][75])\n    print(text[0][76])\n    print(text[0][77])\n    print(text[0][78])\n    print(text[0][79])\n    print(text[0][80])\n    print(text[0][81])\n    print(text[0][82])\n    print(text[0][83])\n    print(text[0][84])\n    print(text[0][85])\n    print(text[0][86])\n    print(text[0][87])\n    print(text[0][88])\n    print(text[0][89])\n    print(text[0][90])\n    print(text[0][91])\n    print(text[0][92])\n    print(text[0][93])\n    print(text[0][94])\n    print(text[0][95])\n    print(text[0][96])\n    print(text[0][97])\n    print(text[0][98])\n    print(text[0][99])\n    print(text[0][100])\n    print(text[0][101])\n    print(text[0][102])\n    print(text[0][103])\n    print(text[0][104])\n    print(text[0][105])\n    print(text[0][106])\n    print(text[0][107])\n    print(text[0][108])\n    print(text[0][109])\n    print(text[0][110])\n    print(text[0][111])\n    print(text[0][112])\n    print(text[0][113])\n    print(text[0][114])\n    print(text[0][115])\n    print(text[0][116])\n    print(text[0][117])\n    print(text[0][118])\n    print(text[0][119])\n    print(text[0][120])\n    print(text[0][121])\n    print(text[0][122])\n    print(text[0][123])\n    print(text[0][124])\n    print(text[0][125])\n    print(text[0][126])\n    print(text[0][127])\n    print(text[0][128])\n    print(text[0][129])\n    print(text[0][130])\n    print(text[0][131])\n    print(text[0][132])\n    print(text[0][133])\n    print(text[0][134])\n    print(text[0][135])\n    print(text[0][136])\n    print(text[0][137])\n    print(text[0][138])\n    print(text[0][139])\n    print(text[0][140])\n    print(text[0][141])\n    print(text[0][142])\n    print(text[0][143])\n    print(text[0][144])\n    print(text[0][145])\n    print(text[0][146])\n    print(text[0][147])\n    print(text[0][148])\n    print(text[0][149])\n    print(text[0][150])\n    print(text[0][151])\n    print(text[0][152])\n    print(text[0][153])\n    print(text[0][154])\n    print(text[0][155])\n    print(text[0][156])\n    print(text[0][157])\n    print(text[0][158])\n    print(text[0][159])\n    print(text[0][160])\n    print(text[0][161])\n    print(text[0][162])\n    print(text[0][163])\n    print(text[0][164])\n    print(text[0][165])\n    print(text[0][166])\n    print(text[0][167])\n    print(text[0][168])\n    print(text[0][169])\n    print(text[0][170])\n    print(text[0][171])\n    print(text[0][172])\n    print(text[0][173])\n    print(text[0][174])\n    print(text[0][175])\n    print(text[0][176])\n    print(text[0][177])\n    print(text[0][178])\n    print(text[0][179])\n    print(text[0][180])\n    print(text[0][181])\n    print(text[0][182])\n    print(text[0][183])\n    print(text[0][184])\n    print(text[0][185])\n    print(text[0][186])\n    print(text[0][187])\n    print(text[0][188])\n    print(text[0][189])\n    print(text[0][190])\n    print(text[0][19"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by four or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by five or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by six or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by seven or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by eight or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by nine or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by ten or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by eleven or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by twelve or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by thirteen or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by fourteen or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by fifteen or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by sixteen or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_17(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by seventeen or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a\\w+\\w+b',text)\n    if result:\n        return result.group()\n    else:\n        return ''\n    \ndef text_match_zero_one_18(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by eighteen or more 'b's. https://www.w3resource.com/python-exercises/r"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p = re.compile('a(b)') #you can use any re.compile object\n    m = p.findall(text) #returns a list of tuples\n    return m\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #initializing count\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    for i in range(0, len(test_list)):\n        for j in range(len(test_list)-i-1):\n            if test_list[j] == test_list[j+1]:\n                reverse_count += 1\n    return reverse_count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    for i in test_list:\n        if i in reverse_dict:\n            reverse_dict[i] += 1\n        else:\n            reverse_dict[i] = 1\n    return reverse_dict\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def reverse_string(string):\n        return ''.join(reversed(string))\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    count = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    \n    if count == 0:\n        return 1\n    else:\n        return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    cnt = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if test_list[i] == test_list[j] and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    l = []\n    i = 0\n    j = 0\n    k = 0\n    m = 0\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    countDict = {}\n    for i in range(len(list1)):\n        countDict[(list1[i],)] = list1[i].count(list1[i])\n    return countDict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = dict()\n    for x in list1:\n        counter[tuple(x)] = counter.get(tuple(x), 0) + 1\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        tuple = (list1[i],i)\n        if tuple in dict:\n            dict[tuple] += 1\n        else:\n            dict[tuple] = 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    subdict = dict()\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list1[j]:\n                subdict[(i,j)] = list1.count(list1[i])\n    return subdict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #create a dictionary with the value of tuple as key and counter as value\n    dictionary = {}\n    for i in range(len(list1)):\n        tuple = tuple(list1[i])\n        if tuple in dictionary:\n            dictionary[tuple] = dictionary[tuple] + 1\n        else:\n            dictionary[tuple] = 1\n    return dictionary\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(0, len(list1)):\n        for j in range(i, len(list1)):\n            d[tuple(list1[i])] = list1[j]\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return { element : len(list1[i]) for i,element in enumerate(list1) }\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for i in range(len(list1)):\n        dic[list1[i]] = list1.count(list1[i])\n    return dic\n    \n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    num_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[0])):\n            if list1[i][j] not in num_dict:\n                num_dict[list1[i][j]] = 1\n            else:\n                num_dict[list1[i][j]] += 1\n    return num_dict\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return '.' in num and float(num) % 2 == 0\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    while num > 0:\n        if num % 10 == 0:\n            return False\n        num = num // 10\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import math\n    if len(str(num)) == 2:\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    s = str(num).split(\".\")\n    if len(s) > 1:\n        for i in range(len(s)):\n            if i == len(s)-1:\n                break\n            if not s[i].isdigit():\n                return False\n        else:\n            return True\n        return False\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n    except:\n        return False\n    elif len(num) == 1:\n        return False\n    elif len(num) == 2:\n        if num[0] == '0' and num[1] == '0':\n            return False\n        elif num[0] == '0' and num[1]!= '0':\n            return False\n        elif num[0]!= '0' and num[1] == '0':\n            return False\n        elif num[0]!= '0' and num[1]!= '0':\n            return False\n        else:\n            return True\n    elif len(num) == 3:\n        if num[0]!= '0' and num[1] == '0':\n            return False\n        elif num[0] == '0' and num[1] == '0':\n            return False\n        else:\n            return True\n    elif len(num) == 4:\n        if num[0] == '0' and num[1] == '0':\n            return False\n        elif num[0] == '0' and num[1] == '0':\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n    \n    # Write your code here\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return int(num) > 0 and num.__eq__(str(int(num)))\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # code here\n    return\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n=len(arr)\n    for i in range(0,n):\n        if arr[i]==arr[i] or arr[i]==arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_list=list(dict.fromkeys(arr))\n    if len(unique_list)==1:\n        print(\"The list contains one distinct element\")\n    else:\n        print(\"The list doesn't contain any distinct elements.\")\n        \n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for i in arr:\n        if i not in unique:\n            unique.append(i)\n    if len(unique) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    Unique_List = []\n    for i in arr:\n        if i not in Unique_List:\n            Unique_List.append(i)\n    return len(Unique_List)==1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return not any(list(dict.fromkeys(arr))!= set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #iterate over the list to check if its contains only one distinct element\n    for i in range(len(arr)):\n        #check if element appears only once\n        if arr.count(arr[i]) == 1:\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 12 and monthnum3 > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    check = True\n    if monthnum3 < 1 or monthnum3 > 12:\n        check = False\n    return check\ndef check_daynumber_number(daynum3):\n    '''\n    Write a function to check whether the given day number contains 1 to 31 days or not.\n    '''\n    check = True\n    if daynum3 < 1 or daynum3 > 31:\n        check = False\n    return check\ndef convert_dollars(dollars):\n    '''\n    Write a function to convert the given dollars to dollars in the format for the given month.\n    '''\n    dollars = int(dollars)\n    if dollars >= 100:\n        return(f'${dollars/100:,.2f}')\n    else:\n        return(f'${dollars:,.2f}')\ndef check_number(num3):\n    '''\n    Write a function to check whether the given number is a valid positive integer or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_uppercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_uppercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_uppercase_digits(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_digits(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_digits(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a function to check whether the given number of digits contains 0 or more digits or not.\n    '''\n    check = True\n    if num3 < 1:\n        check = False\n    return check\ndef check_number_digits_lowercase_lowercase_digits_lowercase_lowercase(num3):\n    '''\n    Write a functio"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 0:\n        return False\n    elif monthnum3 == 1:\n        if 0 < monthnum3 <= 3:\n            return True\n        else:\n            return False\n    elif monthnum3 == 2:\n        if 0 < monthnum3 <= 4:\n            return True\n        else:\n            return False\n    elif monthnum3 == 3:\n        if 0 < monthnum3 <= 5:\n            return True\n        else:\n            return False\n    elif monthnum3 == 4:\n        if 0 < monthnum3 <= 6:\n            return True\n        else:\n            return False\n    elif monthnum3 == 5:\n        if 0 < monthnum3 <= 7:\n            return True\n        else:\n            return False\n    elif monthnum3 == 6:\n        if 0 < monthnum3 <= 8:\n            return True\n        else:\n            return False\n    elif monthnum3 == 7:\n        if 0 < monthnum3 <= 9:\n            return True\n        else:\n            return False\n    elif monthnum3 == 8:\n        if 0 < monthnum3 <= 10:\n            return True\n        else:\n            return False\n    elif monthnum3 == 9:\n        if 0 < monthnum3 <= 11:\n            return True\n        else:\n            return False\n    elif monthnum3 == 10:\n        if 0 < monthnum3 <= 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        day = monthnum3 - 1\n        if day >= 0 and day <= 31:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # if the month number is less than 1 or greater than 12.\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    # if the month number is equal to 31 or less than 1.\n    elif monthnum3 == 31:\n        return True\n    # if the month number is equal to 30 or greater than 1.\n    elif monthnum3 == 30:\n        return True\n    # if the month number is equal to 28 or less than 1.\n    elif monthnum3 == 28:\n        return True\n    # if the month number is equal to 29 or greater than 1.\n    elif monthnum3 == 29:\n        return True\n    # if the month number is equal to 28 or greater than 31.\n    elif monthnum3 == 30:\n        return True\n    # if the month number is equal to 31 or less than 28.\n    elif monthnum3 == 31:\n        return True\n    # if the month number is equal to 30 or greater than 30.\n    elif monthnum3 == 31:\n        return True\n    # if the month number is greater than 30 or less than 28.\n    elif monthnum3 > 31:\n        return False\n    # if the month number is greater than 31 or less than 1.\n    elif monthnum3 > 1:\n        return False\n    \ndef check_daynumber_number(daynum3):\n    '''\n    Write a function to check whether the given day number contains 31 days or not. Days are given as number from 1 to 31.\n    '''\n    # if the day number is less than 1 or greater than 31.\n    if daynum3 < 1 or daynum3 > 31:\n        return False\n    # if the day number is equal to 1.\n    elif daynum3 == 1:\n        return True\n    # if the day number is equal to 30.\n    elif daynum3 == 30:\n        return True\n    # if the day number is equal to 31.\n    elif daynum3 == 31:\n        return True\n    # if the day number is equal to 30 or greater than 1.\n    elif daynum3 == 30:\n        return True\n    # if the day number is equal to 31 or greater than 31.\n    elif daynum3 == 31:\n        return True\n    # if the day number is greater than 30 or less than 1.\n    elif daynum3 == 30:\n        return True\n    # if the day number is greater than 31 or less than 31.\n    elif daynum3 == 31:\n        return True\n    # if the day number is greater than 31 or greater than 30.\n    elif daynum3 > 31:\n        return False\n    # if the day number is greater than 31 or less than 1.\n    elif daynum3 > 1:\n        return False\n    \ndef check_yearnumber(yearnum):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    # if the year is less than 1900 or greater than the current year.\n    if yearnum < 1900 or yearnum > 2021:\n        return False\n    # if the year is equal to 1900 or greater than the current year.\n    elif yearnum == 1900 or yearnum == 2021:\n        return True\n    # if the year is equal to 2000 or greater than the current year.\n    elif yearnum == 2000 or yearnum == 2021:\n        return True\n    # if the year is equal to 2020 or greater than the current year.\n    elif yearnum == 2020 or yearnum == 2021:\n        return True\n    # if the year is equal to 2100 or greater than the current year.\n    elif yearnum == 2100 or yearnum == 2021:\n        return True\n    # if the year is equal to 2100 or greater than the current year.\n    elif yearnum == 2200 or yearnum == 2201:\n        return True\n    # if the year is equal to 2200 or greater than 2202.\n    elif yearnum == 2201 or yearnum == 2202:\n        return True\n    # if the year is equal to 2200 or greater than 2201.\n    elif yearnum == 2202 or yearnum == 2201:\n        return True\n    # if the year is equal to 2200 or greater than 2202.\n    elif yearnum == 2201 or yearnum == 2202:\n        return False\n    # if the year is equal to 2201 or greater than 2200.\n    elif yearnum == 2200 or yearnum == 2201:\n        return False\n    # if the year is equal to 2200 or greater than 2202.\n    elif yearnum == 2201 or yearnum == 2202:\n        return False\n    # if the year is greater than 2201 or greater than 2200.\n    elif yearnum > 2201 or yearnum > 2200:\n        return False\n    # if the year is greater than 2201 or greater than 2200.\n    elif yearnum > 2201 and yearnum > 2200:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2202:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2202:\n        return False\n    # if the year is greater than 2201 or greater than 2201.\n    elif yearnum > 2201 and yearnum > 2202:\n        return False\n    # if the year is greater than 2201 or greater than 2201.\n    elif yearnum > 2201 and yearnum > 2202:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2201.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2201.\n    elif yearnum > 2201 and yearnum > 2202:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2202:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2202:\n        return False\n    # if the year is greater than 2201 or greater than 2201.\n    elif yearnum > 2201 and yearnum > 2202:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yearnum > 2201:\n        return False\n    # if the year is greater than 2201 or greater than 2202.\n    elif yearnum > 2201 and yea"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3>12 or monthnum3<1:\n        return 'Invalid input'\n    elif monthnum3==1:\n        if not is_leap_year(year=1900):\n            return 'Invalid input'\n    elif monthnum3==2:\n        if not is_leap_year(year=2000):\n            return 'Invalid input'\n    elif monthnum3==3:\n        if not is_leap_year(year=2010):\n            return 'Invalid input'\n    elif monthnum3==4:\n        if not is_leap_year(year=2020):\n            return 'Invalid input'\n    elif monthnum3==5:\n        if not is_leap_year(year=2021):\n            return 'Invalid input'\n    elif monthnum3==6:\n        if not is_leap_year(year=2022):\n            return 'Invalid input'\n    elif monthnum3==7:\n        if not is_leap_year(year=2023):\n            return 'Invalid input'\n    elif monthnum3==8:\n        if not is_leap_year(year=2024):\n            return 'Invalid input'\n    elif monthnum3==9:\n        if not is_leap_year(year=2025):\n            return 'Invalid input'\n    elif monthnum3==10:\n        if not is_leap_year(year=2026):\n            return 'Invalid input'\n    elif monthnum3==11:\n        if not is_leap_year(year=2027):\n            return 'Invalid input'\n    elif monthnum3==12:\n        if not is_leap_year(year=2028):\n            return 'Invalid input'\n    else:\n        return 'Invalid input'\n    \ndef get_months(monthnum):\n    '''\n    Write a function to get the months from the given month number.\n    '''\n    if monthnum==12:\n        return 'December'\n    elif monthnum==1:\n        if not is_leap_year(year=1900):\n            return 'Invalid input'\n    elif monthnum==2:\n        if not is_leap_year(year=2000):\n            return 'Invalid input'\n    elif monthnum==3:\n        if not is_leap_year(year=2010):\n            return 'Invalid input'\n    elif monthnum==4:\n        if not is_leap_year(year=2020):\n            return 'Invalid input'\n    elif monthnum==5:\n        if not is_leap_year(year=2021):\n            return 'Invalid input'\n    elif monthnum==6:\n        if not is_leap_year(year=2022):\n            return 'Invalid input'\n    elif monthnum==7:\n        if not is_leap_year(year=2023):\n            return 'Invalid input'\n    elif monthnum==8:\n        if not is_leap_year(year=2024):\n            return 'Invalid input'\n    elif monthnum==9:\n        if not is_leap_year(year=2025):\n            return 'Invalid input'\n    elif monthnum==10:\n        if not is_leap_year(year=2026):\n            return 'Invalid input'\n    elif monthnum==11:\n        if not is_leap_year(year=2027):\n            return 'Invalid input'\n    elif monthnum==12:\n        if not is_leap_year(year=2028):\n            return 'Invalid input'\n    else:\n        return 'Invalid input'\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return 'Invalid number'\n    else:\n        if monthnum3 == 1:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 6:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 2:\n                return 'Invalid number'\n        elif monthnum3 == 2:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 6:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 4:\n                return 'Invalid number'\n            elif monthnum3 == 8:\n                return 'Invalid number'\n            elif monthnum3 == 10:\n                return 'Invalid number'\n            elif monthnum3 == 12:\n                return 'Invalid number'\n        elif monthnum3 == 4:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 6:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 2:\n                return 'Invalid number'\n        elif monthnum3 == 5:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 6:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 4:\n                return 'Invalid number'\n            elif monthnum3 == 8:\n                return 'Invalid number'\n            elif monthnum3 == 10:\n                return 'Invalid number'\n            elif monthnum3 == 12:\n                return 'Invalid number'\n        elif monthnum3 == 6:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 6:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 2:\n                return 'Invalid number'\n        elif monthnum3 == 7:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 7:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 4:\n                return 'Invalid number'\n            elif monthnum3 == 8:\n                return 'Invalid number'\n            elif monthnum3 == 10:\n                return 'Invalid number'\n            elif monthnum3 == 12:\n                return 'Invalid number'\n        elif monthnum3 == 8:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 7:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 4:\n                return 'Invalid number'\n            elif monthnum3 == 8:\n                return 'Invalid number'\n            elif monthnum3 == 10:\n                return 'Invalid number'\n            elif monthnum3 == 12:\n                return 'Invalid number'\n        elif monthnum3 == 9:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 7:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 4:\n                return 'Invalid number'\n            elif monthnum3 == 8:\n                return 'Invalid number'\n            elif monthnum3 == 10:\n                return 'Invalid number'\n            elif monthnum3 == 12:\n                return 'Invalid number'\n        elif monthnum3 == 10:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 7:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 4:\n                return 'Invalid number'\n            elif monthnum3 == 8:\n                return 'Invalid number'\n            elif monthnum3 == 10:\n                return 'Invalid number'\n            elif monthnum3 == 12:\n                return 'Invalid number'\n        elif monthnum3 == 11:\n            if monthnum3 == 12:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 7:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 4:\n                return 'Invalid number'\n            elif monthnum3 == 8:\n                return 'Invalid number'\n            elif monthnum3 == 10:\n                return 'Invalid number'\n            elif monthnum3 == 12:\n                return 'Invalid number'\n        elif monthnum3 == 12:\n            if monthnum3 == 1:\n                return 'Invalid number'\n            elif monthnum3 == 2:\n                return 'Invalid number'\n            elif monthnum3 == 3:\n                return 'Invalid number'\n            elif monthnum3 == 4:\n                return 'Invalid number'\n            elif monthnum3 == 5:\n                return 'Invalid number'\n            elif monthnum3 == 6:\n                return 'Invalid number'\n            elif monthnum3 == 7:\n                return 'Invalid number'\n            elif monthnum3 == 8:\n                return 'Invalid number'\n            elif monthnum3 == 9:\n                return 'Invalid number'\n            elif monthnum3 == 10:\n                return 'Invalid number'\n            elif monthnum3 == 11:\n                return 'Invalid number'\n            elif monthnum3 == 12:\n                return 'Invalid number'\n    elif monthnum2 > 12:\n        if monthnum2 == 1:\n            if monthnum2 == 12:\n                return 'Invalid number'\n            elif monthnum2 == 3:\n                return 'Invalid number'\n            elif monthnum2 == 6:\n                return 'Invalid number'\n            elif monthnum2 == 9:\n                return 'Invalid number'\n            elif monthnum2 == 11:\n                return 'Invalid number'\n            elif monthnum2 == 4:\n                return 'Invalid number'\n            elif monthnum2 == 8:\n                return 'Invalid number'\n            elif monthnum2 == 10:\n                return 'Invalid number'\n            elif monthnum2 == 12:\n                return 'Invalid number'\n        elif monthnum2 == 2:\n            if monthnum2 == 12:\n                return 'Invalid number'\n            elif monthnum2 == 3:\n                return 'Invalid number'\n            elif monthnum2 == 6:\n                return 'Invalid number'\n            elif monthnum2 == 9:\n                return 'Invalid number'\n            elif monthnum2 == 11:\n                return 'Invalid number'\n            elif monthnum2 == 4:\n                return 'Invalid number'\n            elif monthnum2 == 8:\n                retur"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 2:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 3:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 4:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 5:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 6:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 7:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 8:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 9:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 10:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 11:\n        return 'Yes, the month number is correct'\n    elif monthnum3 == 12:\n        return 'Yes, the month number is correct'\n    else:\n        return 'No, the month number is not correct'\n    \n    "
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 1:\n            if day_1[monthnum3]!= 0:\n                if day_1[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 2:\n            if day_2[monthnum3]!= 0:\n                if day_2[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 3:\n            if day_3[monthnum3]!= 0:\n                if day_3[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 4:\n            if day_4[monthnum3]!= 0:\n                if day_4[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 5:\n            if day_5[monthnum3]!= 0:\n                if day_5[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 6:\n            if day_6[monthnum3]!= 0:\n                if day_6[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 7:\n            if day_7[monthnum3]!= 0:\n                if day_7[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 8:\n            if day_8[monthnum3]!= 0:\n                if day_8[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 9:\n            if day_9[monthnum3]!= 0:\n                if day_9[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 10:\n            if day_10[monthnum3]!= 0:\n                if day_10[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 11:\n            if day_11[monthnum3]!= 0:\n                if day_11[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 12:\n            if day_12[monthnum3]!= 0:\n                if day_12[monthnum3] % 30 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return 0\n    elif monthnum3 == 2:\n        return 1\n    elif monthnum3 == 3:\n        return 2\n    elif monthnum3 == 4:\n        return 3\n    elif monthnum3 == 5:\n        return 4\n    elif monthnum3 == 6:\n        return 5\n    elif monthnum3 == 7:\n        return 6\n    elif monthnum3 == 8:\n        return 7\n    elif monthnum3 == 9:\n        return 8\n    elif monthnum3 == 10:\n        return 9\n    elif monthnum3 == 11:\n        return 10\n    elif monthnum3 == 12:\n        return 11\n    else:\n        return -1\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = n\n    i,j = 0,0\n    for i in range(n):\n        diff = arr[i] - arr[j]\n        if diff < min_diff:\n            min_diff = diff\n        j += 1\n    return min_diff\n    \ndef find_smallest_diff(arr):\n    '''\n    Write a python function to find the smallest difference between any two elements in a given array. https://www.geeksforgeeks.org/find-smallest-difference-in-a-given-array/\n    '''\n    smallest_diff = n\n    i,j = 0,0\n    for i in range(n):\n        diff = arr[i] - arr[j]\n        if diff < smallest_diff:\n            smallest_diff = diff\n        j += 1\n    return smallest_diff\n    \ndef solution(arr):\n    '''\n    Write a python function to find the smallest difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-smallest-difference-in-a-given-array/\n    '''\n    i,j = 0,0\n    smallest_diff = n\n    for i in range(n):\n        diff = arr[i] - arr[j]\n        if diff < smallest_diff:\n            smallest_diff = diff\n        j += 1\n    return smallest_diff\n    \ndef main():\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    print(solution(arr))\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Return a 1 if the array is empty\n    if len(arr)==0:\n        return 1\n    \n    # Sort the array and return the minimum value\n    arr.sort()\n    return arr[n-1] - arr[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1] # default min_diff = 0\n    i = 1\n    while (i < n):\n        # diff = arr[i] - arr[i - 1]\n        diff = arr[i] - arr[i - 1]\n        if (diff < min_diff): # found a new minimum\n            min_diff = diff\n        i += 1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum_diff=999999999999999999\n    min_diff = 999999\n    for i in range(n-1):\n        for j in range(i,n):\n            diff = arr[i] - arr[j]\n            if diff < minimum_diff:\n                minimum_diff = diff\n                min_diff = arr[i] - arr[j]\n            # print(i,j,arr[i],arr[j])\n    # print(minimum_diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = arr[0] - arr[1]\n    i = 1\n    while i < n:\n        if arr[i] > arr[i - 1]:\n            diff = arr[i] - arr[i - 1]\n        i += 1\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    \n    for i in range(2, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum = arr[0]\n    i = 1\n    j = len(arr) - 1\n    while i < j:\n        minimum = min(arr[i], arr[j])\n        i += 1\n        j -= 1\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1:\n        return arr[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    if len(arr) == 1:\n        return arr[0] - arr[0]\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return arr[1] - arr[0]\n        else:\n            return arr[0] - arr[1]\n    min_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-2] > min_diff:\n            min_diff = arr[i] - arr[i-2]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # code here\n    #initialise min_diff array \n    min_diff = arr[0] - arr[1]\n    for i in range(2, n): \n        min_diff = min(min_diff, arr[i]-arr[i-2]) \n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for x in str:\n        if x.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    \ndef string_len(str):\n    '''\n    Write a python function to count string length.\n    '''\n    count = 0\n    for i in str:\n        count += 1\n    return count\n    \ndef reverse_string(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return str[::-1]\n    \ndef reverse_string_2(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    str = str[::-1]\n    return str\n    \ndef number_to_letters(num):\n    '''\n    Write a python function to count the number of letters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef calculate_index(str):\n    '''\n    Write a python function to find the index of a given letter in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef str_lcs(str1, str2):\n    '''\n    Write a python function to find the longest common substring in a given string.\n    '''\n    lcs = ''\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            if len(lcs) == 0:\n                lcs = str1[i:]\n            else:\n                lcs = lcs[:i] + str1[i:]\n    return lcs\n    \ndef remove_b(str):\n    '''\n    Write a python function to remove the best character in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef diff_s(str):\n    '''\n    Write a python function to count number of occurences of different character in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef count_substr(str):\n    '''\n    Write a python function to count the number of occurrences of substring in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n    \ndef str_length(str):\n    '''\n    Write a python function to count the number of characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        count += 1\n    return count\n    \ndef number_to_words(num):\n    '''\n    Write a python function to convert a number to words.\n    '''\n    count = 0\n    for i in str(num):\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef words_to_num(num):\n    '''\n    Write a python function to convert a number to words.\n    '''\n    count = 0\n    for i in str(num):\n        if i.isdigit():\n            count += 1\n    return count\n    \ndef find_num(str):\n    '''\n    Write a python function to find the number of occurrences of a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    \ndef find_num_2(str):\n    '''\n    Write a python function to find the number of occurrences of a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef find_num_3(str):\n    '''\n    Write a python function to find the number of occurrences of a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    \ndef first_non_repeating_character(str):\n    '''\n    Write a python function to find the first non repeating character in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef first_non_repeating_character_2(str):\n    '''\n    Write a python function to find the first non repeating character in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef letters_to_num(str):\n    '''\n    Write a python function to convert a string of letters to a number.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef num_to_letters(num):\n    '''\n    Write a python function to convert a number to letters.\n    '''\n    count = 0\n    for i in str(num):\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef letters_to_num_2(str):\n    '''\n    Write a python function to convert a string of letters to a number.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef is_vowel(s):\n    '''\n    Write a python function to check whether a string is a vowel.\n    '''\n    count = 0\n    for i in s:\n        if i.isalpha():\n            count += 1\n    return count == 1\n    \ndef is_vowel_2(s):\n    '''\n    Write a python function to check whether a string is a vowel.\n    '''\n    count = 0\n    for i in s:\n        if i.isalpha():\n            count += 1\n    return count == 1 and count!= len(s)\n    \ndef number_to_words_2(num):\n    '''\n    Write a python function to convert a number to words.\n    '''\n    count = 0\n    for i in str(num):\n        if i.isdigit():\n            count += 1\n    return count\n    \ndef make_dict(l):\n    '''\n    Write a python function to create a dictionary from a list of strings.\n    '''\n    d = dict()\n    for i in l:\n        d[i] = l.count(i)\n    return d\n    \ndef dict_to_str(d):\n    '''\n    Write a python function to convert a dictionary to a string.\n    '''\n    str = ''\n    for i in d:\n        str += i + '=' + str(d[i]) +''\n    return str\n    \ndef reverse_dict(d):\n    '''\n    Write a python function to reverse a dictionary.\n    '''\n    for i in d:\n        d[i] = d[i][::-1]\n    return d\n    \ndef count_dict(d):\n    '''\n    Write a python function to count the number of dictionary values.\n    '''\n    count = 0\n    for i in d:\n        count += d[i]\n    return count\n    \ndef reverse_dict_2(d):\n    '''\n    Write a python function to reverse a dictionary.\n    '''\n    for i in d:\n        d[i] = d[i][::-1]\n    return d\n    \ndef find_dict(d):\n    '''\n    Write a python function to find the number of dictionary values.\n    '''\n    count = 0\n    for i in d:\n        count += d[i]\n    return count\n    \ndef find_dict_2(d):\n    '''\n    Write a python function to find the number of dictionary values.\n    '''\n    count = 0\n    for i in d:\n        count += d[i]\n    return count\n    \ndef first_non_repeating_character_2(s):\n    '''\n    Write a python function to find the first non repeating character in a given string.\n    '''"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    def count_digits(x):\n        c=0\n        for i in range(len(x)):\n            if x[i]=='0':\n                c+=1\n        return c\n    return count_digits(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    dic_count={}\n    for i in str:\n        if i.isdigit():\n            if i in dic_count:\n                dic_count[i]+=1\n            else:\n                dic_count[i]=1\n    return dic_count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)-sum(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    # convert the string to lowercase\n    str = str.lower()\n    for char in str:\n        if char in '0123456789':\n            ctr += 1\n    print(f'Number of digits {ctr}')\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number=0\n    for i in str:\n        if i=='0':\n            number=number+1\n    return number\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    s = str.upper()\n    ctr = 0\n    for i in s:\n        if i.isnumeric():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # your code goes here\n    def cb_polite(n): \n        '''\n        Return the nth polite number.\n        '''\n        \n        for i in range(len(numbers)): \n            if numbers[i] == n: \n                return i \n                \n    return cb_polite(n)\n    \ndef anagram(lst): \n    '''\n    Write a function to check whether a list contains all the same letters.\n    '''\n    # your code goes here\n    def check_anagram(lst): \n        '''\n        Return True if all letters in a list are the same, \n        otherwise return False.\n        '''\n        \n        for i in lst: \n            if i not in lst: \n                return False\n        return True\n    \n    return check_anagram(lst)\n    \ndef is_prime(n): \n    '''\n    Write a function to check whether a number is prime.\n    '''\n    # your code goes here\n    if n < 2: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n%2 == 0 or n%3 == 0: \n        return False\n    \n    for i in range(5,int(math.sqrt(n))+1,6): \n        if n%i == 0: \n            return False\n        \n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    res = [0, 0]\n    for i in range(1, n + 1):\n        if (i % 2) == 0:\n            res[0] = i\n        else:\n            res[1] = i\n    return res[1]\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    lst = []\n    for i in range(n+1):\n        lst.append(i)\n    lst.append(n)\n    return lst\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0:\n        return False\n    a = int(math.sqrt(n))+1\n    i = 2*a-1\n    if n%i==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    if n > 0:\n        for i in range(n, 1, -1):\n            if (n % i) == 0:\n                count = count + 1\n                break\n            elif i == n:\n                count = count + 1\n                break\n        if count == 0:\n            return True\n        else:\n            return False\n    else:\n        print(\"Please input a positive integer!\")\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0 or n == 1: \n        return True \n    elif n == 2: \n        return True \n    else: \n        return False \n    \ndef power(x, n): \n    ''' \n    Compute x to the nth power \n    ''' \n    if n == 0: \n        return 1 \n    elif n < 0: \n        return None \n    elif n == 1: \n        return x \n    else: \n        return x * power(x, n - 1) \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Find the number of prime numbers less than or equal to n\n    if (n<2): \n        return True\n    else:\n        for i in range(2, n): \n            if (n % i == 0): \n                return False\n        return True\n    \n    \ndef is_even(n): \n    '''\n    Write a function to check whether a positive integer n is even. geeksforgeeks.org/is-even/\n    '''\n    if (n == 0): \n        return True\n    if (n % 2 == 0): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n % 2 == 1\ndef is_divisible(n): \n    '''\n    Write a function to check if a number is divisible by 2. geeksforgeeks.org/is-divisible-by-2/\n    '''\n    return (n % 2 == 0) and (n > 1)\ndef is_divisible_by_2(n): \n    '''\n    Write a function to check if a number is divisible by 2. geeksforgeeks.org/is-divisible-by-2/\n    '''\n    return is_divisible(n) and (n % 2 == 0)\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is palindrome. geeksforgeeks.org/is-palindrome/\n    '''\n    return str(n) == str(n)[::-1]\ndef is_palindrome_reverse(n):\n    '''\n    Write a function to check if a number is palindrome. geeksforgeeks.org/is-palindrome-reverse/\n    '''\n    return (n % 2) == 0 and (n > 1) and (n % 2 == 0)\ndef is_palindrome_reverse2(n):\n    '''\n    Write a function to check if a number is palindrome. geeksforgeeks.org/is-palindrome-reverse2/\n    '''\n    return is_palindrome_reverse(n) and (n % 2) == 0\ndef is_palindrome_reverse_even(n):\n    '''\n    Write a function to check if a number is palindrome. geeksforgeeks.org/is-palindrome-reverse-even/\n    '''\n    return (n % 2) == 0 and (n > 1) and (n % 2 == 0)\ndef is_palindrome_reverse_even2(n):\n    '''\n    Write a function to check if a number is palindrome. geeksforgeeks.org/is-palindrome-reverse-even2/\n    '''\n    return is_palindrome_reverse_even(n) and (n % 2) == 0\ndef is_palindrome_reverse_odd(n):\n    '''\n    Write a function to check if a number is palindrome. geeksforgeeks.org/is-palindrome-reverse-odd/\n    '''\n    return (n % 2) == 0 and (n > 1) and (n % 2!= 0)\ndef is_palindrome_reverse_odd2(n):\n    '''\n    Write a function to check if a number is palindrome. geeksforgeeks.org/is-palindrome-reverse-odd2/\n    '''\n    return is_palindrome_reverse_odd(n) and (n % 2) == 0\ndef is_palindrome_count(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count/\n    '''\n    if n % 2 == 0: return n\n    else: return (n % 2) * 2\ndef is_palindrome_count2(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count2/\n    '''\n    return (n % 2) * 2\ndef is_palindrome_count3(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count3/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count4(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count4/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count5(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count5/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count6(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count6/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count7(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count7/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count8(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count8/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count9(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count9/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count10(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count10/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count11(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count11/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count12(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count12/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count13(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count13/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count14(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count14/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count15(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count15/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count16(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count16/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count17(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count17/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count18(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count18/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count19(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count19/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count20(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count20/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count21(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count21/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count22(n):\n    '''\n    Write a function to count palindrome numbers. geeksforgeeks.org/is-palindrome-count22/\n    '''\n    return (n % 2) * 3\ndef is_palindrome_count23(n):\n    '''\n    Write "
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n in [0,1]: \n        return True\n    else: \n        for i in range(2,int(math.sqrt(n))+1): \n            if n%i==0: \n                return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 5\n    elif n == 5: \n        return 6\n    elif n == 6: \n        return 7\n    elif n == 7: \n        return 8\n    elif n == 8: \n        return 9\n    elif n == 9: \n        return 10\n    elif n == 10: \n        return 11\n    elif n == 11: \n        return 12\n    elif n == 12: \n        return 13\n    elif n == 13: \n        return 14\n    elif n == 14: \n        return 15\n    elif n == 15: \n        return 16\n    elif n == 16: \n        return 17\n    elif n == 17: \n        return 18\n    elif n == 18: \n        return 19\n    elif n == 19: \n        return 20\n    elif n == 20: \n        return 21\n    elif n == 21: \n        return 22\n    elif n == 22: \n        return 23\n    elif n == 23: \n        return 24\n    elif n == 24: \n        return 25\n    elif n == 25: \n        return 26\n    elif n == 26: \n        return 27\n    elif n == 27: \n        return 28\n    elif n == 28: \n        return 29\n    elif n == 29: \n        return 30\n    elif n == 30: \n        return 31\n    elif n == 31: \n        return 32\n    elif n == 32: \n        return 33\n    elif n == 33: \n        return 34\n    elif n == 34: \n        return 35\n    elif n == 35: \n        return 36\n    elif n == 36: \n        return 37\n    elif n == 37: \n        return 38\n    elif n == 38: \n        return 39\n    elif n == 39: \n        return 40\n    elif n == 40: \n        return 41\n    elif n == 41: \n        return 42\n    elif n == 42: \n        return 43\n    elif n == 43: \n        return 44\n    elif n == 44: \n        return 45\n    elif n == 45: \n        return 46\n    elif n == 46: \n        return 47\n    elif n == 47: \n        return 48\n    elif n == 48: \n        return 49\n    elif n == 49: \n        return 50\n    elif n == 50: \n        return 51\n    elif n == 51: \n        return 52\n    elif n == 52: \n        return 53\n    elif n == 53: \n        return 54\n    elif n == 54: \n        return 55\n    elif n == 55: \n        return 56\n    elif n == 56: \n        return 57\n    elif n == 57: \n        return 58\n    elif n == 58: \n        return 59\n    elif n == 59: \n        return 60\n    elif n == 60: \n        return 61\n    elif n == 61: \n        return 62\n    elif n == 62: \n        return 63\n    elif n == 63: \n        return 64\n    elif n == 64: \n        return 65\n    elif n == 65: \n        return 66\n    elif n == 66: \n        return 67\n    elif n == 67: \n        return 68\n    elif n == 68: \n        return 69\n    elif n == 69: \n        return 70\n    elif n == 70: \n        return 71\n    elif n == 71: \n        return 72\n    elif n == 72: \n        return 73\n    elif n == 73: \n        return 74\n    elif n == 74: \n        return 75\n    elif n == 75: \n        return 76\n    elif n == 76: \n        return 77\n    elif n == 77: \n        return 78\n    elif n == 78: \n        return 79\n    elif n == 79: \n        return 80\n    elif n == 80: \n        return 81\n    elif n == 81: \n        return 82\n    elif n == 82: \n        return 83\n    elif n == 83: \n        return 84\n    elif n == 84: \n        return 85\n    elif n == 85: \n        return 86\n    elif n == 86: \n        return 87\n    elif n == 87: \n        return 88\n    elif n == 88: \n        return 89\n    elif n == 89: \n        return 90\n    elif n == 90: \n        return 91\n    elif n == 91: \n        return 92\n    elif n == 92: \n        return 93\n    elif n == 93: \n        return 94\n    elif n == 94: \n        return 95\n    elif n == 95: \n        return 96\n    elif n == 96: \n        return 97\n    elif n == 97: \n        return 98\n    elif n == 98: \n        return 99\n    elif n == 99: \n        return 100\n    elif n == 100: \n        return 101\n    elif n == 101: \n        return 102\n    elif n == 102: \n        return 103\n    elif n == 103: \n        return 104\n    elif n == 104: \n        return 105\n    elif n == 105: \n        return 106\n    elif n == 106: \n        return 107\n    elif n == 107: \n        return 108\n    elif n == 108: \n        return 109\n    elif n == 109: \n        return 110\n    elif n == 110: \n        return 111\n    elif n == 111: \n        return 112\n    elif n == 112: \n        return 113\n    elif n == 113: \n        return 114\n    elif n == 114: \n        return 115\n    elif n == 115: \n        return 116\n    elif n == 116: \n        return 117\n    elif n == 117: \n        return 118\n    elif n == 118: \n        return 119\n    elif n == 119: \n        return 120\n    elif n == 120: \n        return 121\n    elif n == 121: \n        return 122\n    elif n == 122: \n        return 123\n    elif n == 123: \n        return 124\n    elif n == 124: \n        return 125\n    elif n == 125: \n        return 126\n    elif n == 126: \n        return 127\n    elif n == 127: \n        return 128\n    elif n == 128: \n        return 129\n    elif n == 129: \n        return 130\n    elif n == 130: \n        return 131\n    elif n == 131: \n        return 132\n    elif n == 132: \n        return 133\n    elif n == 133: \n        return 134\n    elif n == 134: \n        return 135\n    elif n == 135: \n        return 136\n    elif n == 136: \n        return 137\n    elif n == 137: \n        return 138\n    elif n == 138: \n        return 139\n    elif n == 139: \n        return 140\n    elif n == 140: \n        return 141\n    elif n == 141: \n        return 142\n    elif n == 142: \n        return 143\n    elif n == 143: \n        return 144\n    elif n == 144: \n        return 145\n    elif n == 145: \n        return 146\n    elif n == 146: \n        return 147\n    elif n == 147: \n        return 148\n    elif n == 148: \n        return 149\n    elif n == 149: \n        return 150\n    elif n == 150: \n        return 151\n    elif n == 151: \n        return 152\n    elif n == 152: \n        return 153\n    elif n == 153: \n    "
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [[i,i+1] for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    def pair_wise_gen(l1):\n        for x in range(0, len(l1)):\n            for y in range(0, len(l1)):\n                if l1[x] > l1[y]:\n                    if y == x:\n                        yield x, l1[x]\n                    else:\n                        yield x, l1[x]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        if l1[i+1] < l1[i]:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,y) for i,(x,y) in enumerate(zip(l1[:-1],l1[1:]))]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1_pairs = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            l1_pairs.append([l1[i],l1[j]])\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        if l1[i+1] == l1[i]:\n            pass\n        else:\n            l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            l2.append((l1[i], l1[j]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    if len(l1) <= 2:\n        return l1\n    \n    return [l1[i] + l1[i+1] for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(i, i+1) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            if l1[i]==l1[j]:\n                continue\n            else:\n                pair_list.append((l1[i],l1[j]))\n    return pair_list\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)-1):\n        if arr[i] + arr[i + 1] == sum:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if sum == arr[i] + arr[j] and (sum-arr[i])*(sum-arr[j]) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum // 2\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    numbers = len(arr)\n    if numbers < 2:\n        return numbers\n    pairs = 0\n    \n    for i in range(1, numbers):\n        pairs += (arr[i] - sum)\n        \n    if pairs == 1:\n        return numbers - 1\n    else:\n        return numbers - pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i + j == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count +=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum-arr.count(sum)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i] + arr[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for index in range(len(arr)):\n        for item in range(index + 1, len(arr)):\n            if arr[index] + arr[item] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # get the length\n    len1 = len(li1)\n    len2 = len(li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1) == 0 or len(li2) == 0:\n        return 'None'\n    else:\n        diff = 0\n        for i in range(len(li1)-1):\n            diff = diff + (li1[i+1] - li2[i])\n        return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # empty list for the return\n    res = []\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    x = []\n    y = []\n    for i in range(len(li1)):\n        x.append(li1[i])\n        y.append(li2[i])\n    return x,y\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff1=[]\n    diff2=[]\n    for i in li1:\n        diff1.append(abs(i-li2[0]))\n    for i in li2:\n        diff2.append(abs(i-li1[0]))\n    return diff1,diff2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # get index of the first item of l1\n    # get index of the first item of l2\n    i1 = li1.index(min(li1))\n    i2 = li2.index(min(li2))\n    # return the difference between the index\n    return li1[i1+1] - li2[i2+1]\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dif_list = []\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            dif_list.append(li1[i])\n    return dif_list\n    "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #print(li1)\n    #print(li2)\n    return(li1-li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)!= len(li2):\n        return None\n    diff = []\n    for i in range(0,len(li1)):\n        if li1[i]!= li2[i]:\n            diff.append(li1[i])\n    return diff\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum = sum + n**4\n    return sum\n    \nprint(odd_num_sum(3))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    while n>0:\n        sum=sum+((n%4)**3)\n        n=n//4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #possible cases\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    #0,1,2,3,4,5,6,7,8,9\n    #0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9\n    # 0,1,2,3,4,5,6,7,8,9"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 4 : \n        print(f'The sum of the first {n} natural numbers is {n}')\n    else : \n        return (n * n) + (4 * n) \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(n,0,-2) :\n        sum += x**4\n    return sum\nprint(odd_num_sum(10))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(range(1, n + 1, 2))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return odd_num_sum(n-1) + (2 ** (n/4)) \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n, 0, -4) : \n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n*n+4*n+2*n+2\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    # We have to create a stack for the expression \n    # which keeps track of each symbol \n    stack = []\n    # Creates a list of the stack elements which are used in the expression \n    # and appends it to the stack \n    # This is to find the opening symbol \n    open_symbols = []\n    # We have to add each symbol to the stack \n    for element in exp:\n        if element == '(':\n            stack.append(element)\n        elif element == ')':\n            # We want to delete the element which we just added to the stack \n            # and we want to add it to the open list \n            # The reason why we remove the elements from the stack \n            # and append it to the open list \n            # We do this by deleting the element \n            # from the stack \n            open_symbols.pop()\n            while len(stack) > 0:\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    break\n            open_symbols.append(element)\n    # The closed list is the open list plus the elements which we want to add \n    # as they are added to the stack \n    closed_list = open_symbols + stack \n    \n    # If we find an open symbol \n    if len(open_symbols)!= 0:\n        # If the opened symbol is the closed list then it is a symbol that is also not in the closed list \n        # and it is a symbol which is not in the opened list \n        # and it is not a number \n        if open_symbols[-1] in closed_list:\n            return False\n        else:\n            return True\n    # If we do not find an open symbol \n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i=='(':\n            stack.append(i)\n        elif i==')':\n            if not stack:\n                return 'invalid expression'\n            if stack[-1]=='(':\n                stack.pop()\n            else:\n                return 'invalid expression'\n    if not stack:\n        return 'valid expression'\n    return 'invalid expression'\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if not exp: return True\n    open_par = []\n    closed_par = []\n    queue = deque()\n    queue.append(exp)\n    closed_par.append((exp,0))\n    while queue:\n        parsed = queue.popleft()\n        if parsed in closed_par:\n            continue\n        for i in range(len(parsed)):\n            if parsed[i] == '(':\n                if parsed not in open_par:\n                    open_par.append(parsed[:i] + ')' + parsed[i + 1:])\n                    queue.append(parsed[:i] + ')' + parsed[i + 1:])\n            elif parsed[i] == ')':\n                if parsed not in closed_par:\n                    closed_par.append(parsed[:i] + '(' + parsed[i + 1:] + ')' + parsed[i + 1:])\n                    queue.append(parsed[:i] + '(' + parsed[i + 1:] + ')' + parsed[i + 1:])\n    if len(open_par)!= len(closed_par):\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack=[]\n    for i in exp:\n        if i==\"(\":\n            stack.append(i)\n        elif i==\")\":\n            if len(stack)==0:\n                return False\n            elif stack[-1]!=\"(\":\n                return False\n            else:\n                stack.pop()\n    if len(stack)>0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    my_stack = deque([])\n    balanced = True\n    for i in exp:\n        if i in ['(', ')']:\n            balanced = False\n            break\n        elif i == '{' or i == '[':\n            my_stack.append(i)\n        else:\n            if len(my_stack) == 0 or my_stack[-1]!= '(' or my_stack[-1]!= '}':\n                balanced = False\n            else:\n                my_stack.pop()\n    if len(my_stack) > 0:\n        balanced = False\n    if len(my_stack) > 0 and my_stack[-1] == '(':\n        balanced = False\n    if balanced == False:\n        return 'Unbalanced'\n    return 'Balanced'\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0 or stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    expression = []\n    for char in exp:\n        if char in '({[':\n            expression.append(char)\n        elif char in ')}]':\n            if not expression or char!= expression[-1]:\n                return False\n            expression.pop()\n    if expression:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([exp])\n    op_stack = deque([])\n    while len(stack)!= 0 or len(op_stack)!= 0:\n        if len(stack)!= 0:\n            top_node = stack.pop()\n            if type(top_node) is str:\n                return False\n            if type(top_node) is int:\n                continue\n            if top_node == '+':\n                op_stack.append(top_node)\n            elif top_node == '*':\n                op_stack.append(top_node)\n            elif top_node == ')':\n                while len(op_stack)!= 0 and not op_stack[-1] == '(':\n                    stack.append(op_stack.pop())\n                op_stack.pop()\n            elif top_node == '(':\n                while len(op_stack)!= 0 and not op_stack[-1] == '(':\n                    stack.append(op_stack.pop())\n                op_stack.pop()\n        elif len(op_stack)!= 0:\n            op = op_stack.pop()\n            while len(op_stack)!= 0 and op!= '(':\n                stack.append(op_stack.pop())\n            op_stack.pop()\n    return len(op_stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    if len(exp) < 2:\n        return exp\n    left = check_expression(exp[1:])\n    right = check_expression(exp[0:])\n    if len(left)!= len(right):\n        return \"not balanced\"\n    stack = deque()\n    for i in range(len(left)):\n        stack.append(left[i])\n        stack.append(right[i])\n    for i in range(len(right)):\n        if stack.popleft() == stack.pop() or stack.pop() == stack.pop():\n            return \"not balanced\"\n    return \"balanced\"\n    \ndef can_solve_expression(exp):\n    '''\n    Write a function to check if the given expression can be solved by finding the empty set of parentheses.\n    '''\n    \n    if len(exp) < 2:\n        return exp\n    elif len(exp) > 2:\n        left = check_expression(exp[1:])\n        right = check_expression(exp[0:])\n        if len(left)!= len(right):\n            return \"not balanced\"\n        stack = deque()\n        for i in range(len(left)):\n            stack.append(left[i])\n            stack.append(right[i])\n        if len(stack) == 0:\n            return \"balanced\"\n        else:\n            return \"not balanced\"\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Special case: empty string\n    if not exp:\n        return True\n    # Special case: empty number\n    if exp == '0':\n        return True\n    # Evaluate expression\n    # Parantheses\n    if exp[0] == '(' and exp[-1] == ')':\n        # Evaluate left parentheses\n        if not check_expression(exp[1:-1]):\n            return False\n        # Evaluate right parentheses\n        if not check_expression(exp[1:-1]):\n            return False\n        # If both are evaluated as '(' and ')', both should be balanced\n        if exp[1:-1] == '(':\n            return False\n    # Others\n    return check_expression(exp[1:-1])\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    check = 0\n    for i in range(len(test_str)):\n        if check == K:\n            return test_str[0:i]\n        else:\n            check += 1\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #remove words with K length.\n    res = []\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            res.append(test_str[i])\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 0: return test_str\n    if K < 0: return None\n    temp = test_str\n    if K == 0: return None\n    test_str = test_str.split(\" \")\n    test_str = list(filter(None, test_str))\n    test_str = list(map(str.strip, test_str))\n    test_str = list(filter(None, test_str))\n    length = 0\n    for word in test_str:\n        length += len(word)\n        \n    while length > K:\n        for i in range(len(test_str)):\n            if len(test_str[i]) < K:\n                test_str[i] = test_str[i] + \" \" * (K - len(test_str[i]))\n        test_str = test_str[:len(test_str)-1]\n        length -= len(test_str)\n    test_str = \" \".join(test_str)\n    test_str = test_str.split(\" \")\n    test_str = list(filter(None, test_str))\n    test_str = list(map(str.strip, test_str))\n    test_str = list(filter(None, test_str))\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K < 0:\n        return ''\n    if K == 0:\n        return test_str\n    elif K == 1:\n        return''\n    else:\n        new_str = test_str[0:K] + test_str[K+1:]\n        return remove_length(new_str, K - 1)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    replaced_words = []\n    for i in range(0, len(test_str)):\n        if test_str[i].isalpha():\n            length = len(test_str[i])\n            if length >= K:\n                replaced_words.append(test_str[i])\n    return \" \".join(replaced_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def remove_length_helper(s,n,k):\n        if len(s)==0:\n            return False\n        if len(s)==n:\n            if s[-1]==k:\n                return True\n        else:\n            for i in range(n-1):\n                if s[i]==s[i+1]:\n                    s=s[:i]+s[i+2:]\n                    break\n                else:\n                    return remove_length_helper(s,n,k)\n        return False\n    if remove_length_helper(test_str, len(test_str), K):\n        return test_str\n    return ''\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    words = []\n    words_length = []\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    import string\n    import re\n    return re.sub('[^a-zA-Z0-9]', '', test_str, flags=re.UNICODE)\n    \ntest_str = \"TEST TEST TEST TEST TEST TEST TEST\"\nK = 2\nprint(\"String after removing length: \" + remove_length(test_str, K))\nprint(\"String after removing length: \" + remove_length(test_str, 3))\nprint(\"String after removing length: \" + remove_length(test_str, 3))\nprint(\"String after removing length: \" + remove_length(test_str, 4))\nprint(\"String after removing length: \" + remove_length(test_str, 5))\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # 1) create an empty string to store the word\n    # 2) initialize a counter to keep track of how many word are removed\n    test_str = test_str.lower()\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace('  ','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('{','')\n    test_str = test_str.replace('\"','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('*','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('\"','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('*','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('|','')\n    test_str = test_str.replace('+','')\n    test_str = test_str.replace('=','')\n    test_str = test_str.replace('_','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('\"','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('*','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('_','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(',','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('*','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('\"','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test_str.replace(';','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(']','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace('}','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace('  ','')\n    test_str = test_str.replace('.','')\n    test_str = test_str.replace(':','')\n    test_str = test_str.replace('!','')\n    test_str = test_str.replace('?','')\n    test_str = test"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(\" \")\n    new_list = []\n    for word in words:\n        if len(word) == K:\n            new_list.append(word)\n    return \" \".join(new_list)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern:\n        return None\n    if not text:\n        return None\n    if not text[0] == pattern[0]:\n        return None\n    return [0,0]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # if len(text)==0:\n    #     return None\n    # if len(pattern)==0:\n    #     return None\n    # res = pattern[0]\n    # for i in range(1,len(pattern)):\n    #     res = res + pattern[i]\n    #     if res not in text:\n    #         return None\n    # return res\n    # case = 0\n    # res = ''\n    # for i in text:\n    #     if i not in pattern:\n    #         res = res + i\n    #     if case == 0:\n    #         if res not in text:\n    #             return None\n    #     case = 1\n    # return res\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.findall(pattern,text)\n    if match:\n        for i in match:\n            i = i[::-1]\n            i = i[1:-1]\n            if text.find(i) == text.find(i[::-1]) and text.find(i[::-1]) == 0:\n                return None\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #simple regex\n    pattern_lower = pattern.lower()\n    pattern_upper = pattern.upper()\n    pattern_digit = pattern.isdigit()\n    pattern_space = pattern.isspace()\n    pattern_split = pattern.split()\n    pattern_join = ''.join(pattern_split)\n    pattern_dot = '.'.join(pattern_split)\n    pattern_pattern = pattern_lower + pattern_upper + pattern_digit + pattern_space + pattern_split + pattern_join + pattern_dot\n    pattern = re.compile(pattern_pattern)\n    text = text.lower()\n    match_obj = pattern.search(text)\n    if match_obj:\n        return match_obj.start()\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #find the positions in the string\n    pos = []\n    for i in range(len(pattern)):\n        pos.append(text.find(pattern[i],i))\n        #print(pos)\n    #return the positions\n    return pos\ndef get_no_repeat(pattern):\n    '''\n    Write a function to find the number of occurrences of the substrings within a string.\n    '''\n    n_count = 0\n    for i in range(len(pattern)):\n        #print(pattern[i:i+len(pattern)])\n        n_count += len(re.findall(pattern[i:i+len(pattern)],text))\n        #print(n_count)\n    return n_count\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if(pattern.startswith(\"^\")):\n        substr = pattern[1:]\n    else:\n        substr = pattern\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        # pattern = pattern.encode('ascii','ignore')\n        pattern = re.compile(pattern).findall(text)\n        pattern = list(map(lambda x: x.decode('ascii','ignore')[1:-1], pattern))\n        pattern = set(pattern)\n        for i in pattern:\n            if i not in text:\n                return None\n        return pattern\n    except:\n        return None\n        \ndef get_all_pattern(text):\n    '''\n    Return all of the possible substrings of the given string.\n    '''\n    return occurance_substring(text,r'(?P<pattern>.*?)(?P<substring>.*?)(?P<end>.*?)$')\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace(' ','')\n    position = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[search] in text[search:]:\n                position = position + 1\n            search = search + 1\n        if position == len(text):\n            return None\n        search = 0\ndef index_substring(text, pattern):\n    '''\n    Write a function to find the position of a substring within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace(' ','')\n    position = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[search] in text[search:]:\n                position = position + 1\n            search = search + 1\n        if position == len(text):\n            return None\n        search = 0\ndef substring_pattern_2(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the position of the first occurrence of the substring.\n    '''\n    pattern = pattern.replace(' ','')\n    pattern_length = len(pattern)\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + pattern_length\n                if search + index == len(text):\n                    return search + index - pattern_length\n            search = search + 1\n        if index == len(pattern):\n            return None\n        search = 0\ndef substring_pattern_3(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the length of the first occurrence of the substring.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + 1\n                if search + index == len(text):\n                    return search + index - pattern_length\n            search = search + 1\n        if index == len(pattern):\n            return None\n        search = 0\ndef substring_pattern_4(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the length of the first occurrence of the substring and the length of the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + pattern_length\n                search = search + pattern_length\n            else:\n                search = search + 1\n        if index == len(pattern):\n            return search - pattern_length, search\n        search = 0\ndef substring_pattern_5(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the length of the first occurrence of the substring and the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + 1\n                search = search + 1\n            else:\n                search = search + 1\n        if index == len(pattern):\n            return search - len(pattern), search\n        search = 0\ndef substring_pattern_6(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the length of the first occurrence of the substring and the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + 1\n                search = search + 1\n            else:\n                search = search + 1\n        if index == len(pattern):\n            return search - len(pattern), search\n        search = 0\ndef substring_pattern_7(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the position of the first occurrence of the substring and the position of the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + pattern_length\n                search = search + pattern_length\n            else:\n                search = search + 1\n        if index == len(pattern):\n            return search - pattern_length, search\n        search = 0\ndef substring_pattern_8(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the substring of the first occurrence of the substring and the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + pattern_length\n                search = search + pattern_length\n            else:\n                search = search + 1\n        if index == len(pattern):\n            return search - pattern_length, search\n        search = 0\ndef substring_pattern_9(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the length of the first occurrence of the substring and the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + pattern_length\n                search = search + pattern_length\n            else:\n                search = search + 1\n        if index == len(pattern):\n            return search - pattern_length, search\n        search = 0\ndef substring_pattern_10(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the length of the first occurrence of the substring and the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + pattern_length\n                search = search + pattern_length\n            else:\n                search = search + 1\n        if index == len(pattern):\n            return search - pattern_length, search\n        search = 0\ndef substring_pattern_11(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the substring of the first occurrence of the substring and the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + 1\n                search = search + 1\n            else:\n                search = search + 1\n        if index == len(pattern):\n            return search - pattern_length, search\n        search = 0\ndef substring_pattern_12(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the substring of the first occurrence of the substring and the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index = index + 1\n                search = search + 1\n            else:\n                search = search + 1\n        if index == len(pattern):\n            return search - pattern_length, search\n        search = 0\ndef substring_pattern_13(text,pattern):\n    '''\n    Write a function to find the substring within a string, defined as the substring of the first occurrence of the substring and the substring itself.\n    '''\n    pattern = pattern.replace(' ','')\n    index = 0\n    search = 0\n    while True:\n        while search < len(text):\n            if pattern[index] in text[search:]:\n                index "
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for match in re.finditer(pattern,text):\n        start = match.start()\n        end = match.end()\n        if (start > end):\n            return None\n        else:\n            return start,end\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m:\n        start,end = m.span()\n        return start,end\n    return None\ndef remove_underscores(text):\n    '''\n    Remove all the underscores in the string passed to the function.\n    '''\n    text = text.replace('_',' ')\n    return text\ndef remove_punctuation(text):\n    '''\n    Remove all the punctuation from the string passed to the function.\n    '''\n    punctuation = '!\\\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n    for char in punctuation:\n        text = text.replace(char,' ')\n    return text\ndef remove_special(text):\n    '''\n    Remove all the special characters from the string passed to the function.\n    '''\n    special = '!$#@\\[\\]()_+-/*&:;<=>?@[\\\\]^`~'''\n    for char in special:\n        text = text.replace(char,' ')\n    return text\ndef replace_lower(text):\n    '''\n    Replace all the lowercase characters with uppercase characters.\n    '''\n    pattern = '[a-z]'\n    for char in pattern:\n        text = text.replace(char,'U')\n    return text\ndef replace_upper(text):\n    '''\n    Replace all the uppercase characters with lowercase characters.\n    '''\n    pattern = '[A-Z]'\n    for char in pattern:\n        text = text.replace(char,'L')\n    return text\ndef remove_multiple_tokens(text):\n    '''\n    Remove multiple consecutive tokens from a string.\n    '''\n    pattern = '[a-zA-Z0-9]*[' + '-' * (len(text) - 3) + ']+'\n    tokens = re.findall(pattern,text)\n    if len(tokens) > 1:\n        return text\n    return text\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # looping through the list and checking the odd index\n    odd_position_list = []\n    for index in range(len(nums)):\n        if index % 2!= 0:\n            odd_position_list.append(nums[index])\n            \n    # check the odd index\n    for index in range(len(odd_position_list)):\n        if odd_position_list[index] % 2 == 1:\n            return False\n    \n    # if the list is not empty\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)-1, -1, -2):\n        if nums[i]%2==1:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2 == 1:\n        return False\n    else:\n        odd_nums = []\n        for index in range(len(nums)):\n            if index % 2 == 0:\n                odd_nums.append(nums[index])\n        return len(odd_nums) % 2 == 1\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return any(n % 2 == 1 for n in nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index, value in enumerate(nums):\n        if index % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Your code here\n    \n    return True if nums[0] % 2 == 0 else False\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Create a list to store count.\n    count = 0\n    # Create a set to store vowels.\n    vowels = set(\"aeiouAEIOU\")\n    # Loop through the string.\n    for char in test_str:\n        # If the character is a vowel.\n        if char in vowels:\n            # Increment count.\n            count += 1\n    # Return the count.\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    vowel_count = 0\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_count = 0\n    for character in test_str:\n        if character in vowels:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    \n    for char in test_str:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            vowel_count += 1\n    \n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n    vowels = 'aeiouAEIOU'\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count=0\n    for char in test_str:\n        if char in \"aeiou\":\n            if char in \"aeiou\":\n                count += 1\n    return count\nprint(count_vowels(\"naaccccni\"))\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)):\n        if test_str[i] in VOWELS:\n            if test_str[i-1] in VOWELS:\n                count += 1\n            if test_str[i+1] in VOWELS:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for c in test_str:\n        if c in \"aeiouAEIOU\":\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # str_vowels = {}\n    # for i in range(0, len(test_str)):\n    #     if test_str[i].isupper():\n    #         str_vowels[test_str[i]] = str_vowels.get(test_str[i], 0) + 1\n    # for x in str_vowels:\n    #     if str_vowels.get(x) > 1:\n    #         print(x)\n    vowels = 'aeiouAEIOU'\n    vowels_dict = {}\n    count = 0\n    for x in range(len(test_str)):\n        if test_str[x].isupper() and test_str[x] not in vowels:\n            count += 1\n            vowels_dict[test_str[x]] = vowels_dict.get(test_str[x], 0) + 1\n        elif test_str[x] in vowels and test_str[x] not in vowels_dict:\n            vowels_dict[test_str[x]] = vowels_dict.get(test_str[x], 0) + 1\n            count += 1\n    for i in vowels_dict:\n        if vowels_dict.get(i) > 1:\n            print(i)\n    print(count)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # initialize an empty array\n    count = []\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum = sum + i\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    if len(arr)<=0:\n        return sum\n    for i in range(len(arr)):\n        if arr[i]!=arr[i]:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = []\n    for i in range(0, len(arr)):\n        if arr[i] not in s:\n            s.append(arr[i])\n    return sum(s)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # note: this method is not recursive. it can be directly called for the recursive recursion.\n    # we can easily take a look at the implementation of this method\n    # we call sum_of_non_repeated_elements\n    # but we can't do that in this class because we have to add it to the array which is one element long\n    # so we need to add the element itself \n    # and recursively call the sum_of_non_repeated_elements\n    # if the array is empty\n    # return 0\n    # if the array is non-empty\n    # then we do a lookup and then check the sum of each element \n    # if sum_of_non_repeated_elements is not 0 then\n    #    add the element to the sum\n    # else\n    #    return 0\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = sum(set(arr))\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Find the sum of non-repeated elements.\n    sum=0\n    for i in arr:\n        if i!=i:\n            sum+=i\n    return sum\narr = [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 19, 19, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\nprint(find_sum(arr))"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #arr=[]\n    #for i in arr:\n        #if i not in arr:\n            #arr.append(i)\n    #return sum(arr)\n    #Return the sum of the elements in a given array without repeated values.\n    #sum=0\n    #for i in arr:\n        #sum+=i\n    #return sum\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # initializing a empty set\n    set_ = set()\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count_of_element = {}\n    for element in arr:\n        if element in count_of_element:\n            count_of_element[element] = count_of_element[element] + 1\n        else:\n            count_of_element[element] = 1\n    return sum(count_of_element.values())\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2=[]\n    for element in list1:\n        if element not in list2:\n            list2.append(element)\n    return list2\ndef unpack_consecutive_duplicates(list2):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into sublists.\n    '''\n    for element in list2:\n        for i in range(len(element)):\n            if element[i]==element[i+1]:\n                element[i]=element[i]+element[i+1]\n                del element[i+1]\n    return list2\ndef is_valid(list1):\n    '''\n    Write a function to check if a given list is valid.\n    '''\n    if len(list1)%2==0:\n        return True\n    else:\n        return False\ndef is_sorted(list1):\n    '''\n    Write a function to check if a given list is sorted.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n        else:\n            return True\ndef merge_two_lists(list1, list2):\n    '''\n    Write a function to merge two lists.\n    '''\n    if len(list1)>len(list2):\n        for i in range(len(list1)):\n            list1[i] = list1[i] + list2[i]\n    else:\n        for i in range(len(list2)):\n            list2[i] = list2[i] + list1[i]\n    return list1+list2\ndef merge_sort(list1):\n    '''\n    Write a function to merge sorted list.\n    '''\n    if len(list1)>=2:\n        mid = len(list1)//2\n        list1_sort = merge_two_lists(list1, list1[mid:])\n        list1_sort.sort()\n        list1 += list1_sort\n        list1 = merge_sort(list1)\n    return list1\ndef merge_sort_from_start(list1, list2):\n    '''\n    Write a function to merge sorted list from start.\n    '''\n    if len(list1)>=2:\n        mid = len(list1)//2\n        list1_sort = merge_two_lists(list1, list1[mid:])\n        list1_sort.sort()\n        list2_sort = merge_two_lists(list2, list2[mid:])\n        list1_sort+= list2_sort\n        list1+=list1_sort\n        list1 = merge_sort_from_start(list1, list1[mid:])\n    return list1\ndef get_sorted_list(list1):\n    '''\n    Write a function to get a sorted list from a given list.\n    '''\n    list1.sort()\n    return list1\ndef get_sorted_list_from_start(list1, list2):\n    '''\n    Write a function to get a sorted list from start.\n    '''\n    list1.sort()\n    list2.sort()\n    return list1+list2\ndef count_unique_elements(list1):\n    '''\n    Write a function to count all unique elements in a list.\n    '''\n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return 1\n    elif len(list1)==2:\n        return 2\n    else:\n        count=0\n        for i in range(len(list1)):\n            if list1[i]==list1[i+1]:\n                count+=1\n            else:\n                break\n        return count\ndef count_unique_elements_from_start(list1, list2):\n    '''\n    Write a function to count all unique elements in a list.\n    '''\n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return 1\n    elif len(list1)==2:\n        return 2\n    else:\n        count=0\n        for i in range(len(list1)):\n            if list1[i]==list1[i+1]:\n                count+=1\n            else:\n                break\n        return count\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1, key=lambda x: x[0])\n    list_comb = list()\n    for group in grouped:\n        list_comb.append([list(group[0])])\n        list_comb.append([list(group[1])])\n    return list_comb\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    \n    d = []\n    \n    for i in range(0, len(list1)):\n        if list1[i] not in d:\n            d.append(list1[i])\n        \n        else:\n            j = d.index(list1[i]) + 1\n            if list1[i] not in d[:j]:\n                d[j] = list1[i]\n                \n    return d\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    out_list = []\n    temp_list = []\n    if len(list1) < 2:\n        return out_list\n    else:\n        for i in range(len(list1)):\n            if list1[i] == list1[i-1]:\n                temp_list.append(list1[i])\n                temp_list.append(list1[i-1])\n            else:\n                out_list.append(temp_list)\n                temp_list = [list1[i]]\n        out_list.append(temp_list)\n    return out_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # brute-force\n    list1.sort()\n    if len(list1) <= 1:\n        return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def duplicate_list(list):\n        \"\"\"\n        Packs a list into sublists of the same length\n        :param list: \n        :return:\n        \"\"\"\n        list_length = len(list)\n        consecutive_duplicates = []\n        for index in range(0, list_length):\n            consecutive_duplicates.append(list[index: index + 2])\n        return consecutive_duplicates\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    list2 = []\n    \n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n        else:\n            index = list1.index(item)\n            list2.insert(index, item)\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1)==1:\n        return [list1]\n    return [list1+list1[i+1:] for i, element in enumerate(list1) if len(element) > 1]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    out = []\n    \n    for i in range(len(list1)):\n        if list1[i]!= list1[i-1] and list1[i]!= list1[i+1]:\n            out.append([list1[i]])\n            \n    return out\n    \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_merge = []\n    final_list = []\n    length = len(list1)\n    counter = 0\n    #print(list1)\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # your code here\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in list1:\n        dict1[tuple(i)] = dict1.get(tuple(i),0) + 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \ndef test(func, list1, func_sublist):\n    '''\n    Write a function that will count the number of lists within a list.\n    '''\n    \n    def func_output(func, list1):\n        '''\n        Write a function that will count the number of lists within a list.\n        '''\n        count = {}\n        for i in list1:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        return count\n    \n    def func_func_output(func_output, list1):\n        '''\n        Write a function that will count the number of lists within a list.\n        '''\n        count = {}\n        for i in list1:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        return count\n    \n    if func == 'unique_sublists':\n        if func_sublist == 'all':\n            return func_output(func, list1)\n        elif func_sublist == 'dict':\n            return func_func_output(func_output, list1)\n        else:\n            return 'Error'\n    elif func == 'test':\n        if func_sublist == 'dict':\n            return func_output(func, list1)\n        elif func_sublist == 'list':\n            return func_func_output(func_output, list1)\n        else:\n            return 'Error'\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to hold the number of occurences of each list.\n    # {} is a dictionary that is empty, and every list is a tuple and the number of the tuple is the number of the list.\n    # e.g. {'apple': 2, 'banana': 3}\n    # Use a while loop to iterate through the whole list.\n    # Create an empty dictionary\n    dict1 = {}\n    # Start with the number of occurrences of each list\n    for i in list1:\n        # Check if the list is a tuple\n        if type(i) == tuple:\n            # Add 1 to the number of the list\n            dict1[i] = dict1.get(i,0) + 1\n    # Return the dictionary\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    dict_count = {}\n    for i in list1:\n        for k, v in enumerate(i):\n            if v in dict_count:\n                dict_count[v].append((i,k))\n            else:\n                dict_count[v] = [(i,k)]\n    return dict_count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if list1[i] == list1[j]:\n                dict[list1[i]] = dict.get(list1[i], 0) + 1\n    return dict\n    # test this function and make sure it works"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # CODE GOES HERE\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if list1 == []:\n        return {}\n    else:\n        s = 0\n        new_d = {}\n        for i in list1:\n            if type(i) is list:\n                s += len(i)\n            else:\n                new_d[i] = len(list1)\n        return new_d\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    sums = []\n    combination = combinations(test_list,2)\n    for k in combination:\n        sums.append(k)\n    return sums\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    sums = set()\n    for i in test_list:\n        for j in i:\n            sums.add(j)\n    print(sums)\n    print(len(sums))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_lists = []\n    for i in test_list:\n        l = []\n        for j in test_list:\n            if i + j not in test_list:\n                l.append(i+j)\n        comb_lists.append(l)\n    return comb_lists\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    result = []\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)):\n            result.append([i,j])\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combos = list(combinations(test_list, 2))\n    return combos\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = set(test_list[i])\n    test_list.sort()\n    return list(combinations(test_list,2))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list == []:\n        return 0\n    elif test_list[0] == 0:\n        return 0\n    else:\n        result = 1\n        for item in test_list:\n            if item == 0:\n                continue\n            elif item == 1:\n                result *= 1\n            else:\n                result *= item\n        return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result=[]\n    for k in range(0,len(test_list)-1):\n        for j in range(k+1,len(test_list)):\n            for i in combinations(test_list,k):\n                result.append(i)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = 0\n    test_list = list(test_list)\n    for i in test_list:\n        total += i\n    total = total - sum(test_list)\n    combinations_tuple = []\n    if total % 2!= 0:\n        for i in test_list:\n            combinations_tuple.append((i, i))\n    else:\n        for i in test_list:\n            combinations_tuple.append((i, i, i))\n    print(f\"Combinations of tuples are {combinations_tuple}\")\n    return combinations_tuple\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #returns list of tuples \n    #sum_list = []\n    def helper(t,s):\n        if len(s) == len(t):\n            sum_list.append(tuple(s))\n            return\n        for i in range(len(t)):\n            if len(s) >= 1:\n                #print(t,s)\n                helper(t+[i+1],s+[t[i]])\n            else:\n                #print(t,s)\n                helper(t+[i+1],s)\n    #Helper function to join tuples into list \n    #t = []\n    #print(type(t),type(test_list))\n    if type(test_list)!= list:\n        return \n    if test_list == []:\n        return \n    if type(test_list[0]) == tuple:\n        if test_list == []:\n            return \n        for i in test_list:\n            for j in i:\n                s = [j]\n                helper(t,s)\n                #print(s)\n                #print(sum_list)\n                #break\n    elif test_list == []:\n        return\n    else:\n        for i in test_list:\n            for j in i:\n                if type(j) == list:\n                    for k in j:\n                        s = [k]\n                        helper(t,s)\n                        #break\n                else:\n                    s = [j]\n                    helper(t,s)\n                    #break\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 : \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        if n % i == 0 : \n            return False\n    return True \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n+1) :\n        if n%i==0 :\n            count=count+1\n    if count%2==0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0: \n        return \"This is a 0. You can not divide by 0.\"\n    if (n % 2) == 0: \n        return \"The number is even.\"\n    if (n % 3) == 0: \n        return \"The number is odd.\"\n    else: \n        return \"This number is not a divisor.\"\n        \n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n == 2 or n == 3 : \n        return True\n    if n % 2 == 0 or n % 3 == 0 : \n        return False\n    if n <= 1: \n        return False\n    i = 5\n    while i*i <= n : \n        if n % i == 0 : \n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [] \n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            divisors.append(i) \n    if len(divisors) == 1 : \n        return \"Yes\" \n    else: \n        return \"No\" \n        \ndef is_prime(n) : \n    '''\n    Write a python function that returns True if n is a prime number and False otherwise.\n    '''\n    if n == 2 or n == 3 : \n        return True\n    if n % 2 == 0 or n % 3 == 0 : \n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0 or n % (i + 2) == 0: \n            return False\n    return True \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #Here the counter will be calculated \n    c = 0\n    #For every number n \n    for i in range(1,n+1) : \n        #If the number n is divisible by i then \n        # add 1 to c \n        if n % i == 0 : \n            c += 1\n    #If the condition is met return true \n    if c == 0 : \n        return True\n    #If it's not true return false \n    else : \n        return False\ndef is_prime(n) : \n    '''\n    This function checks whether the number n is prime or not. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n > 1 : \n        for i in range(2,n//2+1) : \n            if n % i == 0 : \n                return False\n        return True\n    return False\nprime = []\ncount = 0 \ndivisors = [] \nfor i in range(3,1000001) : \n    if is_prime(i) : \n        count += 1 \n        prime.append(i) \n        divisors.append(math.factorial(i)) \n        if count % 3 == 0 : \n            break"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for x in range(1,n+1) :\n        if n%x == 0 :\n            count = count + 1\n    if count == 2 :\n        print(\"number is divisors\")\n    else :\n        print(\"number is not divisors\")\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    divisors_count = 0\n    for i in range(1, n):\n        if (n % i) == 0 :\n            divisors_count += 1\n            divisors.append(i)\n    if divisors_count % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef find_prime(n) : \n    '''\n    Find the first prime number greater than n.\n    '''\n    prime = 2\n    while prime * prime <= n :\n        if n % prime == 0:\n            return prime \n        prime += 1 \ndef print_primes(n) : \n    '''\n    Print the prime numbers up to n.\n    '''\n    for i in range(2, n+1) :\n        if count_divisors(i) == \"Yes\" :\n            print(i, end=\" \") \ndef print_primes_recursive(n) : \n    '''\n    Print the prime numbers up to n.\n    '''\n    print(\" \")\n    if n == 1:\n        print(n)\n    else:\n        print(n, end=\" \")\n        for i in range(2, n+1) :\n            if count_divisors(i) == \"Yes\" :\n                print(i, end=\" \")\n                if i == n:\n                    print(0)\n                else:\n                    print_primes_recursive(i)\n                print(0)\n    print()\ndef count_divisors(n) : \n    '''\n    Write a python function to find the count of divisors of a number.\n    '''\n    divisors = []\n    divisors_count = 0\n    for i in range(1, n):\n        if (n % i) == 0:\n            divisors_count += 1\n            divisors.append(i)\n    if divisors_count % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef find_prime(n) : \n    '''\n    Find the first prime number greater than n.\n    '''\n    prime = 2\n    while prime * prime <= n :\n        if n % prime == 0:\n            return prime \n        prime += 1 \ndef print_primes(n) : \n    '''\n    Print the prime numbers up to n.\n    '''\n    for i in range(2, n+1) :\n        if count_divisors(i) == \"Yes\" :\n            print(i, end=\" \") \n            if i == n:\n                print(0)\n            else:\n                print_primes(i)\n                print(0)\ndef print_primes_recursive(n) : \n    '''\n    Print the prime numbers up to n.\n    '''\n    print(\" \")\n    if n == 1:\n        print(n)\n    else:\n        print(n, end=\" \")\n        for i in range(2, n+1):\n            if count_divisors(i) == \"Yes\" :\n                print(i, end=\" \")\n                if i == n:\n                    print(0)\n                else:\n                    print_primes_recursive(i)\n                print(0)\n    print()\ndef count_divisors(n) : \n    '''\n    Write a python function to find the count of divisors of a number.\n    '''\n    divisors = []\n    divisors_count = 0\n    for i in range(1, n):\n        if (n % i) == 0:\n            divisors_count += 1\n            divisors.append(i)\n    if divisors_count % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef find_prime(n) : \n    '''\n    Find the first prime number greater than n.\n    '''\n    prime = 2\n    while prime * prime <= n :\n        if n % prime == 0:\n            return prime \n        prime += 1 \ndef print_primes(n) : \n    '''\n    Print the prime numbers up to n.\n    '''\n    for i in range(2, n+1):\n        if count_divisors(i) == \"Yes\" :\n            print(i, end=\" \") \n            if i == n:\n                print(0)\n            else:\n                print_primes(i)\n                print(0)\ndef print_primes_recursive(n) : \n    '''\n    Print the prime numbers up to n.\n    '''\n    print(\" \")\n    if n == 1:\n        print(n)\n    else:\n        print(n, end=\" \")\n        for i in range(2, n+1):\n            if count_divisors(i) == \"Yes\" :\n                print(i, end=\" \")\n                if i == n:\n                    print(0)\n                else:\n                    print_primes_recursive(i)\n                print(0)\n    print()\ndef count_divisors(n) : \n    '''\n    Write a python function to find the count of divisors of a number.\n    '''\n    divisors = []\n    divisors_count = 0\n    for i in range(1, n):\n        if (n % i) == 0:\n            divisors_count += 1\n            divisors.append(i)\n    if divisors_count % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef find_prime(n) : \n    '''\n    Find the first prime number greater than n.\n    '''\n    prime = 2\n    while prime * prime <= n :\n        if n % prime == 0:\n            return prime \n        prime += 1 \ndef print_primes(n) : \n    '''\n    Print the prime numbers up to n.\n    '''\n    for i in range(2, n+1) :\n        if count_divisors(i) == \"Yes\" :\n            print(i, end=\" \") \n            if i == n:\n                print(0)\n            else:\n                print_primes(i)\n                print(0)\ndef print_primes_recursive(n) : \n    '''\n    Print the prime numbers up to n.\n    '''\n    print(\" \")\n    if n == 1:\n        print(n)\n    else:\n        print(n, end=\" \")\n        for i in range(2, n+1):\n            if count_divisors(i) == \"Yes\" :\n                print(i, end=\" \")\n                if i == n:\n                    print(0)\n                else:\n                    print_primes_recursive(i)\n                print(0)\n    print()\ndef count_divisors(n) : \n    '''\n    Write a python function to find the count of divisors of a number.\n    '''\n    divisors = []\n    divisors_count = 0\n    for i in range(1, n):\n        if (n % i) == 0:\n            divisors_count += 1\n            divisors.append(i)\n    if divisors_count % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef find_prime(n) : \n    '''\n    Find the first prime number greater than n.\n    '''\n    prime = 2\n    while prime * prime <= n :\n        if n % prime == 0:\n            return prime \n        prime += 1 \ndef print_primes(n) : \n    '''\n    Print the prime numbers up to n.\n    '''\n    for i in range(2, n+1):\n        if count_divisors(i) == \"Yes\" :\n            print(i, end=\" \") \n            if i == n:\n                print(0)\n            else:\n                print_primes(i)\n                print(0)\ndef print_primes_recursive(n) : \n    '''\n    Print the prime numbers up to n.\n    '"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divs = [2, 3, 5, 7]\n    if n in divs:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    odd_length = False\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            if odd_length == False:\n                result += arr[i]\n                odd_length = True\n            else:\n                result += arr[i] * 2\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_length = []\n    for i in range(len(arr)):\n        if i%2==0:\n            even_length.append(arr[i])\n    return sum(even_length)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    s = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] % 2 == 1:\n            s += arr[i]\n            \n    return s + odd_length_sum(arr[i + 1:])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_sums = 0\n    odd_sums = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sums += arr[i]\n        else:\n            odd_sums += arr[i]\n    return even_sums + odd_sums\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # initializing the sum\n    sum = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(0, n, 2):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    answer = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            answer += arr[i]\n    return answer\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_lengths = []\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    '''\n    Your answer should be a sum of all the odd length subarrays (except the ones with the odd length 1).\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    total = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2!= 0:\n            continue\n        total += arr[i]\n        \n    return total\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = 255\n    min_val = 0\n    max_val_round = max_val - min_val\n    max_val_round = max_val * 0.75\n    min_val_round = min_val - max_val_round\n    max_val_round = max_val * 1.25\n    min_val_round = min_val - max_val_round\n    r = int(r * max_val_round)\n    g = int(g * max_val_round)\n    b = int(b * max_val_round)\n    if r < 0:\n        r = 0\n    if g < 0:\n        g = 0\n    if b < 0:\n        b = 0\n    if r > max_val:\n        r = max_val\n    if g > max_val:\n        g = max_val\n    if b > max_val:\n        b = max_val\n    if r < min_val:\n        r = min_val\n    if g < min_val:\n        g = min_val\n    if b < min_val:\n        b = min_val\n    return (int(r/max_val_round), int(g/max_val_round), int(b/max_val_round))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    x = 0.299\n    y = 0.587\n    z = 0.114\n    h = 0.0\n    s = 0.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # r = float(r)\n    # g = float(g)\n    # b = float(b)\n    # h, s, v = 0, 0, 0\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # r = r/255.0\n    # g = g/255.0\n    # b = b/255.0\n    # h = 0.0\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # h = 1.0\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # s = 0.0\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # v = 0.0\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # h = (r + g + b) / 3.0\n    # s = 0.5 * (r + g + b)\n    # v = (r * r + g * g + b * b) / 5.0\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in h for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in s for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in v for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # h = (r * 0.2126) + (g * 0.7152) + (b * 0.0722)\n    # s = (r * 0.0722) + (g * 0.7152) + (b * 0.2126)\n    # v = (r * 0.2126) + (g * 0.2126) + (b * 0.0722)\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in h for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in s for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in v for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # h = (r + g + b) / 3.0 + (s - v) * 0.5\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in s for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in v for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # h = (r + g + b) / 3.0 + (s + v) * 0.5\n    # if not any(x in r for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in g for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in b for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in s for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')\n    # if not any(x in v for x in [0, 1, 2]):\n    #     raise Exception('RGB color values need to be in range 0-255.')"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r * 255\n    g = g * 255\n    b = b * 255\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0.0\n    s = 0.0\n    v = 0.0\n    if r > 0.5:\n        r = 1.0 - r\n        g = 1.0 - g\n        b = 1.0 - b\n        h = 1.0 - (r + g + b)\n        s = r\n    elif r < 0.5:\n        r = 1.0 - r\n        g = 1.0 - g\n        b = 1.0 - b\n        h = 1.0 - (r + g + b)\n        s = r\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r_f = float(r)\n    g_f = float(g)\n    b_f = float(b)\n    r_min = min(r_f, r_max)\n    g_min = min(g_f, g_max)\n    b_min = min(b_f, b_max)\n    \n    h = 0.0\n    s = 0.0\n    v = 0.0\n    \n    # hue = hue\n    # saturation = saturation\n    # value = value\n    \n    if r_min == r_max:\n        h = 0\n    else:\n        if g_min == g_max:\n            s = 0\n            v = 0\n        else:\n            h = (g_f - g_min) / (r_max - r_min)\n            \n            if g_min == g_max:\n                s = (g_f - g_min) / (r_max - r_min)\n            else:\n                s = 0\n                v = ((g_f - g_min) / (r_max - r_min)) * (g_max - g_min) + g_min\n                \n            h = h * (1 - s) + (r_f - r_min) * s\n            \n    # saturation\n    # value\n    \n    if v_min == v_max:\n        s = 0\n        v = 0\n    else:\n        if g_min == g_max:\n            v = 0\n            s = (g_f - g_min) / (r_max - r_min)\n        else:\n            v = (g_f - g_min) / (r_max - r_min)\n            \n            if g_min == g_max:\n                s = (g_f - g_min) / (r_max - r_min)\n            else:\n                s = 0\n                v = ((g_f - g_min) / (r_max - r_min)) * (g_max - g_min) + g_min\n                \n        h = h * (1 - v) + (r_f - r_min) * v\n        \n    return h, s, v\n    \ndef hs_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.programiz.com/python-programming/methods/built-in-functions/rename\n    '''\n    \n    h, s, v = int(h * 60), int(s * 100), int(v * 100)\n    \n    if v > 100:\n        r = v // 100\n        v = v % 100\n        \n    if v > 60:\n        g = v // 60\n        v = v % 60\n        \n    if v > 0:\n        b = v\n        \n    rgb = '#' + hex(r)[2:] + hex(g)[2:] + hex(b)[2:]\n    \n    return rgb\n    \n    \ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r = int(r)\n    g = int(g)\n    b = int(b)\n    \n    r_min = min(r, r_max)\n    g_min = min(g, g_max)\n    b_min = min(b, b_max)\n    \n    r_max = max(r_min, r_min + r_max)\n    g_max = max(g_min, g_max + g_max)\n    b_max = max(b_min, b_max + b_max)\n    \n    h = 0\n    s = 0\n    v = 0\n    \n    # hue = hue\n    # saturation = saturation\n    # value = value\n    \n    if r_max == r_min:\n        h = 0\n    else:\n        if g_min == g_max:\n            s = 0\n            v = 0\n        else:\n            h = (g_f - g_min) / (r_max - r_min)\n            \n            if g_min == g_max:\n                s = (g_f - g_min) / (r_max - r_min)\n            else:\n                s = 0\n                v = ((g_f - g_min) / (r_max - r_min)) * (g_max - g_min) + g_min\n                \n            h = h * (1 - s) + (r_f - r_min) * s\n            \n    # saturation\n    # value\n    \n    if v_min == v_max:\n        s = 0\n        v = 0\n    else:\n        if g_min == g_max:\n            v = 0\n            s = (g_f - g_min) / (r_max - r_min)\n        else:\n            v = (g_f - g_min) / (r_max - r_min)\n            \n            if g_min == g_max:\n                s = (g_f - g_min) / (r_max - r_min)\n            else:\n                s = 0\n                v = ((g_f - g_min) / (r_max - r_min)) * (g_max - g_min) + g_min\n                \n        h = h * (1 - v) + (r_f - r_min) * v\n        \n    return h, s, v\n    \n    \ndef rgb_to_hsv_rgb(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.programiz.com/python-programming/methods/built-in-functions/rename\n    '''\n    \n    r = int(r)\n    g = int(g)\n    b = int(b)\n    \n    r_min = min(r, r_max)\n    g_min = min(g, g_max)\n    b_min = min(b, b_max)\n    \n    r_max = max(r_min, r_min + r_max)\n    g_max = max(g_min, g_max + g_max)\n    b_max = max(b_min, b_max + b_max)\n    \n    h = 0\n    s = 0\n    v = 0\n    \n    # hue = hue\n    # saturation = saturation\n    # value = value\n    \n    if r_max == r_min:\n        h = 0\n    else:\n        if g_min == g_max:\n            s = 0\n            v = 0\n        else:\n            h = (g_f - g_min) / (r_max - r_min)\n            \n            if g_min == g_max:\n                s = (g_f - g_min) / (r_max - r_min)\n            else:\n                s = 0\n                v = ((g_f - g_min) / (r_max - r_min)) * (g_max - g_min) + g_min\n                \n            h = h * (1 - s) + (r_f - r_min) * s\n            \n    # saturation\n    # value\n    \n    if v_min == v_max:\n        s = 0\n        v = 0\n    else:\n        if g_min == g_max:\n            v = 0\n            s = (g_f - g_min) / (r_max - r_min)\n        else:\n            v = (g_f - g_min) / (r_max - r_min)\n            \n            if g_min == g_max:\n                s = (g_f - g_min) / (r_max - r_min)\n            else:\n                s = 0\n                v = ((g_f - g_min) / (r_max - r_min)) * (g_max - g_min) + g_min\n                \n        h = h * (1 - v) + (r_f - r_min) * v\n        \n    return h, s, "
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb_to_hsv = [(r - min(r)) / (max(r) - min(r)), (g - min(g)) / (max(g) - min(g)), (b - min(b)) / (max(b) - min(b))]\n    hue = cv2.cvtColor(rgb_to_hsv, cv2.COLOR_RGB2HSV)\n    hue[:, :, 2] = cv2.normalize(hue[:, :, 2], None, 0, 255, cv2.NORM_MINMAX)\n    hsv = np.zeros((rgb_to_hsv.shape[0], rgb_to_hsv.shape[1], 3), dtype=np.uint8)\n    for i in range(3):\n        hsv[:, :, i] = cv2.cvtColor(rgb_to_hsv, cv2.COLOR_RGB2HSV)\n    hsv = cv2.cvtColor(hsv, cv2.COLOR_HSV2RGB)\n    return hue, hsv\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    (maxr, maxg, maxb) = rgb_to_hsv(r, g, b)\n    (sr, sg, sb) = (maxr - r, maxg - g, maxb - b)\n    (v1, v2, v3) = (srb/sr, sg/sg, sbb/sb)\n    (hue_max, saturation_max, value_max) = (v1 * 6, v2 * 6, v3 * 6)\n    (hue_min, saturation_min, value_min) = (0, 0, 0)\n    (hue_range, saturation_range, value_range) = (hue_max - hue_min, saturation_max - saturation_min, value_max - value_min)\n    h = hue_max\n    s = saturation_max\n    v = value_max\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = int(r)\n    g = int(g)\n    b = int(b)\n    rgb = (r, g, b)\n    red_val = int(255 * (r / 255))\n    green_val = int(255 * (g / 255))\n    blue_val = int(255 * (b / 255))\n    rgb_val = (red_val, green_val, blue_val)\n    hue_val = (0, 0, 0)\n    hue_val = int(max(0, min(360, (rgb_val[0] * 6))))\n    saturation_val = (rgb_val[1] * 6) + (g - rgb_val[0])\n    light_val = (rgb_val[0] + rgb_val[1] + rgb_val[2]) / 6\n    if light_val < 1:\n        light_val = 1\n    elif light_val > 1:\n        light_val = 1\n    if hue_val < 0:\n        hue_val = 0\n    elif hue_val > 360:\n        hue_val = 360\n    if hue_val == 0:\n        hue_val = 0\n    else:\n        hue_val = ((hue_val * 360) / (360 * 6)) + 180\n    return (hue_val, saturation_val, light_val)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = (r*255.0)/255.0, (g*255.0)/255.0, (b*255.0)/255.0\n    m=(r+g+b)/3.0\n    d = (r-g-b)/(3.0-m)\n    h = 0.0 if d==0.0 else d*6.0 + m*6.0\n    s = 0.0 if d==0.0 else d*6.0 + m*2.0\n    v = 0.0 if d==0.0 else d*2.0\n    return hsv(h,s,v)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in list1:\n        if i % 2!= 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return(len(even) * len(odd))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod=1\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            prod*=list1[i]\n        else:\n            prod*=list1[i]\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    '''\n    def mul_even_odd(list1):\n        if len(list1)%2==0:\n            return(list1[0]*list1[1])\n        else:\n            return(list1[0]*list1[1]+list1[0]*list1[2])\n    '''\n    def mul_even_odd(list1):\n        for i in range(0,len(list1),2):\n            list1[i]*=list1[i+1]\n        return(list1[0]*list1[1])\n    return mul_even_odd(list1)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    odd_product = 1\n    even_product = 1\n    \n    for number in list1:\n        if number % 2 == 0:\n            product *= number\n            odd_product *= number\n            even_product *= number\n        else:\n            product *= number\n            odd_product *= number\n    \n    return product * odd_product * even_product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    print(\"Enter the list: \", end=\"\")\n    return int(input())\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # First, create a function to do this.\n    def do_first(list1):\n        '''\n        This function first multiplies all elements in a list.\n        '''\n        # Create a new list with only even number of elements.\n        list2 = []\n        for i in list1:\n            if i % 2 == 0:\n                list2.append(i)\n        return list2\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod=1\n    for i in range(len(list1)):\n        if i%2==0:\n            prod*=list1[i]\n        else:\n            prod*=list1[i]\n    return prod\n    \ndef find_sum(list2):\n    '''\n    Write a function to find the sum of elements of a given list.\n    '''\n    prod=mul_even_odd(list2)\n    sum=0\n    for i in list2:\n        sum+=i\n    return sum\n    \ndef find_sum_reverse(list2):\n    '''\n    Write a function to find the sum of elements of a given list.\n    '''\n    prod=mul_even_odd(list2)\n    sum=0\n    for i in range(len(list2)-1, -1, -1):\n        sum+=list2[i]\n    return sum\n    \ndef find_sum_accum(list2):\n    '''\n    Write a function to find the sum of elements of a given list.\n    '''\n    prod=mul_even_odd(list2)\n    sum=0\n    for i in range(len(list2)-1, -1, -1):\n        sum+=list2[i]\n    return sum\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd_product = 1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_odd_product *= list1[i]\n    return even_odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num = 0\n    for i in list1:\n        if i % 2 == 0:\n            num = num * i\n        else:\n            num = num * i\n    return num\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple_str = tuple(test_str)\n    test_tuple_int = tuple(test_tuple_str)\n    test_tuple_int = tuple(test_tuple_int)\n    test_tuple_int = tuple(test_tuple_int)\n    return test_tuple_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Write your code here\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    t_obj = tuple(test_str)\n    return t_obj\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    res = []\n    for v in test_str:\n        res.append(v)\n    return tuple(res)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    t = list(test_str)\n    t.sort()\n    return tuple(t)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(''.join(str(i) for i in test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # First make a tuple of the string and an integer\n    tuple_str_int = tuple(test_str)\n    return tuple_str_int\n    "
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    def binary_search(a, x):\n        '''\n        a: List[int]\n        x: int\n        '''\n        p = bisect.bisect_left(a, x)\n        return p if p!= len(a) and a[p] == x else -1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    # if x not in a:\n    #     a.insert(0, x)\n    #     return 1\n    # return 0\n    \n    left = 0\n    right = len(a) - 1\n    # print(left, right)\n    \n    # while left <= right:\n    #     middle = (left + right) // 2\n    #     middle_val = a[middle]\n    #     if x < middle_val:\n    #         left = middle + 1\n    #     else:\n    #         right = middle - 1\n    # return right\n    \n    while left <= right:\n        middle = (left + right) // 2\n        middle_val = a[middle]\n        if x < middle_val:\n            right = middle - 1\n        else:\n            left = middle + 1\n    return right\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    l, r = 0, n-1\n    i = bisect.bisect_right(a, x, lo=l, hi=r)\n    if i == 0:\n        return l\n    elif i == n:\n        return r\n    else:\n        return i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    m = len(a[0])\n    i = bisect.bisect_left(a, x, lo = 0, hi = n)\n    if i!= n:\n        return i\n    return n\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # insert value at index 0\n    if x > a[0]:\n        return (len(a) + 1)\n    # if value is greater, move to left\n    elif x > a[-1]:\n        return len(a)\n    # if value is less, move to right\n    elif x < a[0]:\n        return 0\n    # else, insert value at right index\n    else:\n        return (len(a) + 1)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l, r = 0, len(a)-1\n    while l <= r:\n        m = (l + r) // 2\n        if a[m] <= x:\n            if m == 0 or a[m-1] > x:\n                return m\n            l = m\n        else:\n            r = m - 1\n    return l + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # print a[::-1]\n    while True:\n        low = 0\n        high = len(a) - 1\n        mid = 0\n        while low <= high:\n            mid = int((low + high)/2)\n            if a[mid] > x:\n                high = mid - 1\n            else:\n                low = mid + 1\n        if low == high:\n            return low\n        else:\n            if a[low] < a[high]:\n                return low\n            else:\n                return high\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect_right(a, x)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('a([bc])b')\n    return pattern.search(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall('\\A\\d+b\\Z', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #split the string into a list of words\n    words = re.split('\\W+', text)\n    #split the string into a list of words\n    #words = re.split('[^A-Za-z]\\w+', text)\n    #replace all words that are not alphanumerics with lowercase\n    #lowercase_words = [word.lower() for word in words if not word.isalpha()]\n    lowercase_words = [word for word in words if word.isalpha()]\n    #split the string into a list of words\n    #lowercase_words = re.split('[^a-zA-Z]\\w+', text)\n    #replace all words that are not alphanumerics with lowercase\n    #lowercase_words = [word.lower() for word in lowercase_words if not word.isalpha()]\n    return lowercase_words\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'c'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'd'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'e'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'f'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'g'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'h'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'i'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'j'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'k'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'l'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen'm'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'n'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen 'o'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen 'p'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen 'q'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen 'r'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty's'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty 't'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_fourty(text):\n    '''\n    Write a function that matches a string that has an a followed by fourty 'u'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an a followed by fifty 'v'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has an a followed by seventy 'w'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by hundred 'x'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        end = len(text)\n    return text[start:end]\ndef text_match_thousand(text):\n    '''\n    Write a function that matches a string that has an a followed by thousand 'y'.\n    '''\n    start = text.find('a')\n    end = text.find('b', start)\n    if (end == -1):\n        en"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[a-zA-Z]+\\b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    count = 0\n    for char in text:\n        if char in 'abcdefghijklmnopqrstuvwxyz1234567890':\n            count += 1\n    if count < 3:\n        return False\n    return True\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'([^\\W])(b)(\\w+)(\\w+)')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n    return\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a was followed by b\n    # If a followed by b, return the text\n    # Otherwise, return None\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'a' and four 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d\n    # If a followed by b followed by c and d, return the text\n    # Otherwise, return None\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'a' and five 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f\n    # If a followed by b followed by c followed by d followed by e and f, return the text\n    # Otherwise, return None\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'a' and six 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f followed by g and h\n    # If a followed by b followed by c followed by d followed by e followed by f followed by g followed by h, return the text\n    # Otherwise, return None\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'a' and seven 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f followed by g and h followed by i and j\n    # If a followed by b followed by c followed by d followed by e followed by f followed by g followed by h followed by i followed by j, return the text\n    # Otherwise, return None\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'a' and eight 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f followed by g and h followed by i and j followed by k and l\n    # If a followed by b followed by c followed by d followed by e followed by f followed by g followed by h followed by i followed by k followed by l, return the text\n    # Otherwise, return None\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'a' and nine 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f followed by g and h followed by i and j followed by k and l\n    # If a followed by b followed by c followed by d followed by e followed by f followed by g followed by h followed by i followed by k followed by l, return the text\n    # Otherwise, return None\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'a' and ten 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f followed by g and h followed by i and j followed by k and l\n    # If a followed by b followed by c followed by d followed by e followed by f followed by g followed by h followed by i followed by k followed by l, return the text\n    # Otherwise, return None\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'a' and eleven 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f followed by g and h followed by i and j followed by k and l\n    # If a followed by b followed by c followed by d followed by e followed by f followed by g followed by h followed by i followed by k followed by l, return the text\n    # Otherwise, return None\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'a' and twelve 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f followed by g and h followed by i and j followed by k and l\n    # If a followed by b followed by c followed by d followed by e followed by f followed by g followed by h followed by i followed by k followed by l, return the text\n    # Otherwise, return None\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'a' and thirteen 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f followed by g and h followed by i and j followed by k and l\n    # If a followed by b followed by c followed by d followed by e followed by f followed by g followed by h followed by i followed by k followed by l, return the text\n    # Otherwise, return None\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'a' and fourteen 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n        return \"No match\"\n    return result.group()\n    # Find the indices of the a and b\n    # Determine if a followed by b followed by c and d followed by e and f followed by g and h followed by i and j followed by k and l\n    # If a followed by b followed by c followed by d followed by e followed by f followed by g followed by h followed by i followed by k followed by l, return the text\n    # Otherwise, return None\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'a' and fifteen 'b'.\n    '''\n    pattern = r\"(a|b)\"\n    result = re.match(pattern, text)\n    if result is None:\n    "
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Open the file named \"text.txt\" in \"r\" mode.\n    # Open the file named \"text_match_three.txt\" in \"w\" mode.\n    # Set the mode to \"r\".\n    with open(\"text.txt\", \"r\") as file:\n        lines = file.readlines()\n        lines = list(filter(None, lines)) # Eliminate empty lines.\n        lines = list(filter(None, lines)) # Eliminate empty lines.\n        for line in lines:\n            line = line.strip()\n            if line.find(\"#\") == -1:\n                pass\n            else:\n                print(\"match three: \", line)\n                output_file = open(\"text_match_three.txt\", \"a\")\n                output_file.write(line)\n                output_file.write(\"\\n\")\n                output_file.close()\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a\\bc\\w\"\n    return re.search(pattern,text)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = ()\n    index = 0\n    str_index = 0\n    while str_index < len(test_str):\n        if test_str[str_index].isalpha():\n            new_tuple = (test_str[str_index], test_list[index])\n            index += 1\n        elif test_str[str_index].isdigit():\n            new_tuple = (test_str[str_index], test_list[index])\n            index += 1\n        else:\n            if test_str[str_index] in test_list:\n                index += 1\n                str_index += 1\n            elif test_str[str_index].isalpha():\n                if index >= len(test_list):\n                    new_tuple = (test_str[str_index], test_list[index-len(test_list)])\n                    index += 1\n                else:\n                    new_tuple = (test_str[str_index], test_list[index])\n            elif test_str[str_index].isdigit():\n                new_tuple = (test_str[str_index], test_list[index])\n                index += 1\n            else:\n                new_tuple = (test_str[str_index], test_list[index])\n        test_tuple += new_tuple\n        str_index += 1\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(str, test_list))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if isinstance(test_list, tuple):\n        test_tuple = test_list\n    else:\n        test_tuple = tuple(test_list)\n    test_tuple = tuple([test_str] * len(test_tuple))\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if not test_list:\n        raise Exception(\"list is empty\")\n    if not test_str:\n        raise Exception(\"string is empty\")\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # if len(test_list) > 0:\n    #     return tuple(test_list[0], test_list[1:])\n    # else:\n    #     return None\n    # write test_list and return new tuple\n    return tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    res = list()\n    for i in test_str.split(','):\n        res.append(tuple(i.split(' ')))\n    return res\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_list + [test_str]\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list.insert(0,0)\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for x in test_list:\n        new_list.append(x)\n    return new_list\n    \ndef new_tuple_from_string(string):\n    '''\n    Write a function to create a new tuple from the given string.\n    '''\n    new_list = []\n    for char in string:\n        if char == ',' or char == '.':\n            new_list.append(char)\n    return tuple(new_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(map(eval, test_str.split(',')))\n    return new_tuple\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = []\n    for index, value in enumerate(nums):\n        if index % 2 == 0:\n            even.append(value)\n    return even\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            even_numbers.append(nums[i])\n    return even_numbers\n    \n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_numbers = []\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            odd_numbers.append(nums[i])\n    return odd_numbers\n    \n    \ndef triple_position(nums):\n    '''\n    Write a python function to check whether every triple index contains even numbers of a given list.\n    '''\n    triple_numbers = []\n    for i in range(len(nums)):\n        if nums[i] == 3:\n            triple_numbers.append(nums[i])\n    return triple_numbers\n    \n    \ndef check_even(nums):\n    '''\n    Write a python function to check whether the given list is even sorted.\n    '''\n    if nums == sorted(nums):\n        return True\n    return False\n    \n    \ndef check_odd(nums):\n    '''\n    Write a python function to check whether the given list is odd sorted.\n    '''\n    if nums == sorted(nums,reverse=True):\n        return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) % 2 == 0:\n        evens = []\n        \n        for i in range(0, len(nums), 2):\n            if nums[i] % 2 == 0 and nums[i] % 3 == 0:\n                evens.append(nums[i])\n        return evens\n    else:\n        return None\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    else:\n        return all(n%2 == 0 for n in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(0, n):\n        if (nums[i] % 2 == 0):\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_numbers.append(nums[i])\n    if len(even_numbers) == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            evens.append(nums[i])\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] % 2 == 0:\n            i += 1\n        if i == len(nums):\n            return True\n    return False\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if isinstance(i,tuple):\n            try:\n                test_tup.remove(i)\n            except ValueError:\n                pass\n        elif isinstance(i,tuple):\n            try:\n                test_tup.remove(i)\n            except TypeError:\n                pass\n        else:\n            pass\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = test_tup\n    test_tup = [x for x in tup if not x]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        for j in i:\n            if type(j) == tuple:\n                test_tup.remove(i)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(tuple(t) for t in test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return ()\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Empty tuple\n    if test_tup == ():\n        return ()\n    \n    # Find the index of the first element to remove\n    for i in range(0, len(test_tup)):\n        if test_tup[i] == () and i!= 0:\n            break\n    \n    # Remove the tuple\n    test_tup = test_tup[:i] + test_tup[i+1:]\n    \n    # Return the new tuple\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) > 1:\n        t1, t2 = test_tup\n        test_tup = (t2, t1)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # test\n    if not test_tup:\n        print(\"No arguments provided.\")\n    else:\n        print(\"Removing nested elements of the given tuple.\")\n        for i, el in enumerate(test_tup):\n            if type(el) == tuple:\n                test_tup[i] = remove_nested(el)\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        return\n    else:\n        if test_tup == ():\n            return\n        elif type(test_tup[0]) == tuple:\n            return remove_nested(test_tup[1:])\n        else:\n            return test_tup[1:]\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        count += len(i)\n    print(count)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    c = 0\n    \n    if len(input_list)==1:\n        return 1\n    elif len(input_list)==2:\n        if input_list[0]==input_list[1]:\n            return 2\n        else:\n            return 1\n    elif len(input_list)==3:\n        if input_list[0]==input_list[1]:\n            if input_list[0]==input_list[2]:\n                return 3\n            else:\n                return 2\n        else:\n            return 1\n    else:\n        return 1\n        \n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for x in input_list:\n        if type(x) == list:\n            counter += len(x)\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += len(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    lst = []\n    for i in input_list:\n        if type(i) == list:\n            lst.append(len(i))\n    return lst\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count_list = 0\n    if not input_list:\n        return None\n    if type(input_list) == list:\n        for i in input_list:\n            if type(i) == list:\n                count_list += count_list + 1\n    return count_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # write your code here\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #create a counter variable\n    counter = 0\n    #loop through the input list\n    for x in input_list:\n        #if the number of items is more than 1 and not the list itself, increment counter\n        if len(x) == 1:\n            counter += 1\n        #else increment counter by 1\n        else:\n            counter += 1\n            #if the length of the current list is equal to or greater than the number of lists, increment counter\n            if len(x) > len(input_list):\n                counter += 1\n    return counter\n    "
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #import random module to have a random number\n    import random\n    #create a list of 9 lists\n    empty_list = []\n    #for loop to put random numbers in list\n    for i in range(0,9):\n        empty_list.append(random.randint(1,9))\n    #print list\n    print (input_list)\n    #count the number of lists\n    count = 0\n    #for loop to count each list\n    for list in input_list:\n        #if the list is greater than 9 then it will count as a zero\n        if list > 9:\n            count += 1\n    #print the results\n    print(\"There are {} lists and there are {} empty lists.\".format(count,len(empty_list)))\n    "
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count_list = 0\n    \n    for i in range(len(input_list)):\n        count_list += 1\n    \n    return count_list\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n    \ndef find_min(arr):\n    '''\n    Write a python function to find the minum element in an unsorted array.\n    '''\n    return arr[0]\n    \ndef find_max(arr):\n    '''\n    Write a python function to find the max element in an unsorted array.\n    '''\n    return arr[len(arr)-1]\n    \ndef count_min(arr):\n    '''\n    Write a python function to count the number of occurrences of minimum element in an unsorted array.\n    '''\n    return arr.count(min(arr))\n    \ndef count_max(arr):\n    '''\n    Write a python function to count the number of occurrences of maximum element in an unsorted array.\n    '''\n    return arr.count(max(arr))\n    \ndef bubble_sort(arr):\n    '''\n    Write a python function to sort an unsorted array in ascending order.\n    '''\n    \n    for i in range(len(arr)):\n        swap = False\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n                swap = True\n                \n        if swap == False:\n            break\n        \n    return arr\n    \ndef selection_sort(arr):\n    '''\n    Write a python function to sort an unsorted array in ascending order.\n    '''\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1,len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i],arr[min_idx] = arr[min_idx],arr[i]\n    return arr\n    \ndef insertion_sort(arr):\n    '''\n    Write a python function to sort an unsorted array in ascending order.\n    '''\n    for i in range(1, len(arr)):\n        j = i\n        while j > 0 and arr[j] < arr[j-1]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n        \n    return arr\n    \ndef quick_sort(arr):\n    '''\n    Write a python function to sort an unsorted array in ascending order.\n    '''\n    def partition(arr, l, r):\n        x = arr[r]\n        i = l\n        for j in range(l, r):\n            if arr[j] <= x:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    \n    def quick_sort_rec(arr, l, r):\n        if l < r:\n            p = partition(arr, l, r)\n            quick_sort_rec(arr, l, p-1)\n            quick_sort_rec(arr, p+1, r)\n        return arr\n    \n    quick_sort_rec(arr, 0, len(arr)-1)\n    return arr\n    \ndef selection_sort_rec(arr):\n    '''\n    Write a python function to sort an unsorted array in ascending order.\n    '''\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        \n    return arr\n    \ndef heap_sort(arr):\n    '''\n    Write a python function to sort an unsorted array in ascending order.\n    '''\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[i] < arr[l]:\n            largest = l\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n            \n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    for i in range(n-1, -1, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n        \n    return arr\n    \ndef bubble_sort_rec(arr):\n    '''\n    Write a python function to sort an unsorted array in ascending order.\n    '''\n    for i in range(len(arr)):\n        swap = False\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swap = True\n                \n        if swap == False:\n            break\n    return arr\n    \ndef merge_sort(arr):\n    '''\n    Write a python function to sort an unsorted array in ascending order.\n    '''\n    def merge(arr, l, m, r):\n        n1 = m - l + 1\n        n2 = r - m\n        \n        temp = [0] * (n1 + n2 + 1)\n        \n        for i in range(0, n1 + n2 + 1):\n            if i >= l and i <= m:\n                temp[i] = arr[i]\n            elif i >= m:\n                temp[i] = arr[l + i - m]\n            elif i < l:\n                temp[i] = arr[l + i]\n        \n        i = 0\n        for i in range(0, n1 + n2):\n            arr[l + i] = temp[i]\n            i += 1\n        \n    def partition(arr, l, r):\n        x = arr[r]\n        i = l\n        for j in range(l, r):\n            if arr[j] <= x:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    \n    def quick_sort_rec(arr, l, r):\n        if l < r:\n            p = partition(arr, l, r)\n            quick_sort_rec(arr, l, p-1)\n            quick_sort_rec(arr, p+1, r)\n        return arr\n    \n    quick_sort_rec(arr, 0, len(arr)-1)\n    return arr\n    \ndef quick_sort_iter(arr):\n    '''\n    Write a python function to sort an unsorted array in ascending order.\n    '''\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l\n        for j in range(l, r):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    \n    def quick_sort_iter(arr, l, r):\n        if l < r:\n            p = partition(arr, l, r)\n            quick_sort_iter(arr, l, p-1)\n            quick_sort_iter(arr, p+1, r)\n    \n    quick_sort_iter(arr, 0, len(arr)-1)\n    return arr\n    \ndef heap_sort_iter(arr):\n    '''\n    Write a python function to sort a"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr)-1\n    \n    while l <= r:\n        m = (l + r)//2\n        if arr[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while l<r:\n        m=l+r-1\n        if arr[m]==x:\n            return m\n        if arr[m]<x:\n            l+=1\n        else:\n            r-=1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    if arr[0]==x:\n        return 0\n    \n    while arr[i]<x:\n        i+=1\n    return i-1\n    \ndef sort(arr,n):\n    '''\n    Write a python function to sort an array of integers using a heap method.\n    '''\n    # Get the smallest element as heap\n    i=0\n    arr1=[arr[0]]\n    heapq.heapify(arr1)\n    for i in range(1,len(arr)):\n        if arr1[0]<arr[i]:\n            heapq.heappop(arr1)\n            heapq.heappush(arr1,arr[i])\n    arr1.sort()\n    # Sort elements\n    for i in range(n):\n        arr[i]=arr1[i]\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lenght=len(arr)\n    if lenght==0:\n        return 0\n    elif lenght==1:\n        if arr[lenght-1]<x:\n            return lenght-1\n        else:\n            return 0\n    else:\n        mid=len(arr)//2\n        if arr[mid]<x:\n            return last(arr[mid+1:],x)\n        else:\n            return last(arr[:mid],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # return the first element of the sorted array\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            end = mid -1\n        else:\n            start = mid + 1\n    return None\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return 0\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr)-1\n    while (l<=r):\n        mid = (l+r)//2\n        if (arr[mid]==x):\n            return mid\n        elif (arr[mid]>x):\n            r = mid-1\n        else:\n            l = mid+1\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #    \n    #testcase    \n    #    test_a    :    a_b_c_d\n    #    test_a    :    abcd\n    #    test_a    :    Abcd\n    #    test_a    :    ab_cd\n    #test_a    :    ab_cd\n    #    test_a    :    abc\n    #test_a    :    abc\n    #    test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #    test_a    :    abc\n    #    test_a    :    abc\n    #    test_a    :    abc\n    #    test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #    test_a    :    abc\n    #    test_a    :    abc\n    #    test_a    :    abc\n    #    test_a    :    abc\n    #    test_a    :    abc\n    #    test_a    :    abc\n    #    test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    #test_a    :    abc\n    "
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_in_list = re.findall(r\"a\\b\", text)\n    #text_in_list = []\n    \n    for x in text_in_list:\n        if x == '\\n':\n            continue\n        else:\n            text = text.replace(x, 'a')\n    \n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match_str = '^[a-zA-Z]+[a-zA-Z]+b$'\n    return re.match(match_str, text)!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a\\w+b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    m = re.search('a', text)\n    if m:\n        start = m.start()\n        end = m.end()\n        result = text[start:end]\n        #print('start', start)\n        #print('end', end)\n        #print('result', result)\n        return result\n    else:\n        return 'None'\ndef text_starta_beginb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, beginning in 'b'.\n    '''\n    m = re.search('a', text)\n    if m:\n        start = m.start()\n        end = m.end()\n        result = text[start:end-1]\n        #print('start', start)\n        #print('end', end)\n        #print('result', result)\n        return result\n    else:\n        return 'None'\ndef text_enda_beginb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    m = re.search('a', text)\n    if m:\n        start = m.start()\n        end = m.end()\n        result = text[start:end+1]\n        #print('start', start)\n        #print('end', end)\n        #print('result', result)\n        return result\n    else:\n        return 'None'\ndef text_enda_beginb_list(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, beginning in 'b'.\n    '''\n    m = re.search('a', text)\n    if m:\n        start = m.start()\n        end = m.end()\n        result = text[start:end-1:2]\n        #print('start', start)\n        #print('end', end)\n        #print('result', result)\n        return result\n    else:\n        return 'None'\ndef text_endb_beginb_list(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    m = re.search('a', text)\n    if m:\n        start = m.start()\n        end = m.end()\n        result = text[start:end+1:2]\n        #print('start', start)\n        #print('end', end)\n        #print('result', result)\n        return result\n    else:\n        return 'None'\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_matches = re.search(r'(\\w+)a(\\w+)b', text)\n    print(text_matches.group(1))\n    print(text_matches.group(2))\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a\\s*([b]?)')\n    return pattern.search(text).group()\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)')\n    return pattern.search(text).group()\ndef text_endb_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and end with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and end with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and end with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    '''\n    pattern = re.compile(r'b\\s*([a]?)\\s*[b]?\\s*[b]?\\s*[b]?\\s*[b]?')\n    return pattern.search(text).group()\ndef text_endb_starta_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, beginning in 'a' and ending with 'b' and ending with 'b'.\n    ''"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    reg = re.compile(r'a\\s*(\\w+)?\\s*(b)\\s*(a)')\n    match = reg.match(text)\n    if match:\n        return match.group(1)+match.group(3)\n    else:\n        return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(r'(a){2}.*b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a[^\\s\\.]+b[^\\s\\.]*', text).group(0)\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    if dict == None:\n        return 0\n    else:\n        for item in dict:\n            total += dict[item]\n        return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total = total + dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    #initialize sum to 0\n    sum = 0\n    #loop through all items\n    for key in dict:\n        sum += dict[key]\n    #return\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<0: \n        print(\"Please enter a positive integer\") \n        return -1 \n    elif n==0: \n        return 0\n    else: \n        return n*sum_odd(n-1) \n  \n  "
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # return sum(range(l, r+1)) \n    # sum = 0\n    # for i in range(l, r+1):\n    #     if i % 2 == 1:\n    #         sum += i\n    # return sum\n    sum = 0\n    for i in range(0, n):\n        if i % 2!= 0:\n            sum += i\n    return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for num in range(l, r+1): \n        if num % 2!= 0: \n            sum += num\n    return sum\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n\n    sum = 0\n    while l < r: \n        if l % 2 == 0: \n            sum = sum + l \n            l = l + 1\n        else: \n            r = r - 1 \n    return sum \n    "
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n >= l and n <= r:\n        return n\n    else:\n        return 0\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l=0\n    r=1\n    sum=0\n    while(l<n):\n        if(l%2==1):\n            sum+=r\n        else:\n            sum+=l\n        l+=1\n        r+=1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n < 1: \n        raise ValueError('n must be greater than 0')\n    if n < 1: \n        return -1\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n < 0: \n        return -1\n    for i in range(0, n+1): \n        if i % 2 == 1: \n            sum += i \n    return sum \nprint(sum_odd(100))"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if (i % 2!= 0):\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total=0\n    for i in range(0,len(arr)):\n        total=total+arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr.sort()\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for element in arr:\n        total = total + element\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total = total + i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n<0:\n        print(\"Not possible\")\n    else:\n        n=n&((~n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n&(~(n)|1)\n        n=n+d\n        n=n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    result = ''\n    d = abs(d)\n    n = n & 0xffffffff\n    while n:\n        result = result + int(bin(n & 0xffffffff)[-d:])\n        n >>= d\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp=n\n    temp=temp>>d\n    temp=temp<<d\n    return temp\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % n;\n    return (n >> d) + (n & ~(1 << d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & 0xffffffffffffffff\n    n = (n >> 32) | ((n << 1) & 0xffffffffffffffff) # ^ (xor with xor=1)\n    n = (n >> 32) | (n << 1) # xor with xor=1\n    n = (n >> 16) | (n << 2)\n    n = (n >> 8) | (n << 3)\n    n = (n >> 4) | (n << 5)\n    n = (n >> 2) | (n << 3)\n    n = n | (n >> 2)\n    n = n | (n << 1)\n    n = n | (n << 4)\n    n = n | (n << 8)\n    n = n | (n << 7)\n    n = n | (n << 6)\n    n = n | (n << 5)\n    n = n | (n << 2)\n    n = n | (n << 1)\n    n = n | (n << 7)\n    n = n | (n << 5)\n    n = n | (n << 4)\n    n = n | (n << 1)\n    n = n | (n << 6)\n    n = n | (n << 3)\n    return n\ndef bit_len(x):\n    '''\n    Find the length of a binary number x.\n    '''\n    count = 0\n    while x!= 0:\n        x >>= 1\n        count += 1\n    return count\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    x=n\n    y=n\n    z=n\n    a=n\n    if n<0:\n        z=-n\n        n=n*-1\n    for i in range(d):\n        if n&1:\n            n=n>>1\n            x=x>>1\n            y=y>>1\n            z=z>>1\n        if n&2:\n            n=n>>2\n            x=x<<1\n            y=y<<1\n            z=z<<1\n        if n&4:\n            n=n>>4\n            x=x<<1\n            y=y<<1\n            z=z<<1\n    return z,y,x,n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a = 0\n    for i in range(d,0,-1):\n        a += 1\n        if(a % 2 == 0):\n            n = n ^ (1 << i)\n            a = 0\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    r=n&1        \n    n=(n>>1)&2**d    \n    n=(n>>d)&1\n    return n|r\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    r=n&1\n    n=(n&(n-1))&1\n    n=(n>>d)&1\n    return n|r\n    \ndef get_bits(n,b):\n    '''\n    Write a function to return a list of b bits.\n    '''\n    if(b==1):\n        return [1]\n    else:\n        p=get_bits(n&1,b-1)\n        p+=[0]*(b-1)\n        p[-1]=1\n        return p\n    \ndef get_first_k_bits(n,k):\n    '''\n    Return a list of n bits starting with k bits.\n    '''\n    p=[0]*n\n    p[0]=1\n    for i in range(1,n):\n        p[i]=p[i-1]\n    for i in range(k):\n        p[1]=1\n    return p\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" +\", \" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    regex_pattern = r'\\s'\n    text = re.sub(regex_pattern, \" \", text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespace characters with a single space\n    text = re.sub(' +','', text)\n    # Lowercase the text, stripping any remaining whitespace\n    text = text.lower()\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    res = []\n    text = str(text)\n    while True:\n        if not text.startswith(' '):\n            break\n        res.append(text[1:])\n        text = text[1:]\n        if not text.startswith(' '):\n            break\n        res.append(text[1:])\n        text = text[1:]\n    return''.join(res)\ndef replace_spaces(text):\n    '''\n    Write a function to replace all whitespaces in a string with a single space.\n    '''\n    return re.sub(' +','', text)\ndef read_txt(path):\n    '''\n    Read a txt file and return a list of lines.\n    '''\n    with open(path) as f:\n        lines = f.readlines()\n    return lines\ndef read_all_files(path):\n    '''\n    Read all files in a folder and return a list of lines.\n    '''\n    files = []\n    for file in os.listdir(path):\n        files.append(os.path.join(path, file))\n    return files\ndef to_lower(text):\n    '''\n    Write a function to convert a string to lower case.\n    '''\n    text = remove_all_spaces(text)\n    text = text.replace(' ', '_').lower()\n    return text\ndef tokenize(text):\n    '''\n    Write a function to tokenize a string.\n    '''\n    tokens = re.findall('\\w+', text)\n    return tokens\ndef tokenize_line(line):\n    '''\n    Write a function to tokenize a line of text.\n    '''\n    tokens = tokenize(line)\n    return tokens\ndef convert_to_number(text):\n    '''\n    Write a function to convert a string of digits to a number.\n    '''\n    text = remove_all_spaces(text)\n    return int(text)\ndef generate_tokens(text):\n    '''\n    Write a function to generate a sequence of tokens.\n    '''\n    return tokenize(text)\ndef generate_numbers(text):\n    '''\n    Write a function to generate a sequence of numbers.\n    '''\n    return [convert_to_number(text[i:i+4]) for i in range(0, len(text), 4)]\ndef get_not_beginning_of_line(line):\n    '''\n    Write a function to remove all whitespaces from a line of text.\n    '''\n    text = remove_all_spaces(line)\n    text = remove_all_spaces(text[:len(text)-1])\n    return text\ndef get_not_start_of_line(line):\n    '''\n    Write a function to remove all whitespaces from a line of text.\n    '''\n    text = remove_all_spaces(line)\n    text = remove_all_spaces(text[:len(text)-1])\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    text = remove_all_spaces(text)\n    text = re.sub(r'[!?\"\\'`.\\'\\(\\)_\\[\\]]', '', text)\n    return text\ndef get_length(text):\n    '''\n    Write a function to get the length of a string.\n    '''\n    return len(text)\ndef count_lines(text):\n    '''\n    Write a function to count the number of lines in a string.\n    '''\n    return len(text.split('\\n'))\ndef get_lines_of_text(text):\n    '''\n    Write a function to get the lines of a string.\n    '''\n    return text.split('\\n')\ndef count_words(text):\n    '''\n    Write a function to get the words of a string.\n    '''\n    return len(text.split(' '))\ndef remove_non_punctuation(text):\n    '''\n    Write a function to remove all non-punctuation from a string.\n    '''\n    text = remove_all_spaces(text)\n    text = re.sub(r'[^!\\\"\\'`.\\'\\(\\)_\\[\\]]', '', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    text = remove_all_spaces(text)\n    text = re.sub(r'[!?\"\\'`.\\'\\(\\)_\\[\\]]', '', text)\n    return text\ndef read_lines(text, n):\n    '''\n    Write a function to read a file line by line and return a list of strings.\n    '''\n    lines = []\n    for i in range(n):\n        lines.append(get_not_start_of_line(read_line(text)))\n    return lines\ndef remove_non_numbers(text):\n    '''\n    Write a function to remove all non-numbers from a string.\n    '''\n    text = remove_all_spaces(text)\n    text = re.sub(r'[!#].*[!#]', '', text)\n    return text\ndef read_numbers(text):\n    '''\n    Write a function to read a file of numbers and return a list of strings.\n    '''\n    lines = []\n    for line in read_lines(text, 3):\n        line = remove_non_numbers(line)\n        lines.append(line)\n    return lines\ndef get_first_n_words(text):\n    '''\n    Write a function to get the first n words of a text.\n    '''\n    return text.split(' ')[:5]\ndef get_first_n_words_list(text):\n    '''\n    Write a function to get the first n words of a text.\n    '''\n    return text.split(' ')[:5]\ndef get_first_n_words_line(text):\n    '''\n    Write a function to get the first n words of a text.\n    '''\n    return text.split(' ')[:5]\ndef get_first_n_words_list_line(text):\n    '''\n    Write a function to get the first n words of a text.\n    '''\n    return text.split(' ')[:5]\ndef get_first_n_words_line(text):\n    '''\n    Write a function to get the first n words of a text.\n    '''\n    return text.split(' ')[:5]\ndef get_first_n_words_line(text):\n    '''\n    Write a function to get the first n words of a text.\n    '''\n    return text.split(' ')[:5]\ndef remove_first_n_words(text):\n    '''\n    Write a function to remove the first n words of a text.\n    '''\n    text = remove_all_spaces(text)\n    text = re.sub(r'[!#].*[!#]', '', text)\n    return text\ndef remove_first_n_words_line(text):\n    '''\n    Write a function to remove the first n words of a text.\n    '''\n    text = remove_all_spaces(text)\n    text = re.sub(r'[!#].*[!#]', '', text)\n    return text\ndef get_last_n_words(text):\n    '''\n    Write a function to get the last n words of a text.\n    '''\n    return text.split(' ')[-5:]\ndef get_last_n_words_line(text):\n    '''\n    Write a function to get the last n words of a text.\n    '''\n    return text.split(' ')[-5:]\ndef get_last_n_words_list(text):\n    '''\n    Write a function to get the last n words of a text.\n    '''\n    return text.split(' ')[-5:]\ndef get_last_n_words_line(text):\n    '''\n    Write a function to get the last n words of a text.\n    '''\n    return text.split(' ')[-5:]\ndef get_last_n_words_list_line(text)"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    new_string = re.sub(' +','', text)\n    return new_string\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_number(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[0-9]', '', text)\ndef remove_stop_word(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    return re.sub(r'\\W', '', text)\ndef remove_links(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_links_1(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_punctuation_1(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_number_1(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[0-9]', '', text)\ndef remove_stop_word_1(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    return re.sub(r'\\W', '', text)\ndef remove_links_2(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_links_1_2(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_punctuation_2(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_number_2(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[0-9]', '', text)\ndef remove_stop_word_2(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    return re.sub(r'\\W', '', text)\ndef remove_links_3(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_links_1_3(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_punctuation_3(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_number_3(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[0-9]', '', text)\ndef remove_stop_word_3(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    return re.sub(r'\\W', '', text)\ndef remove_links_4(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_links_1_4(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_punctuation_4(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_number_4(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[0-9]', '', text)\ndef remove_stop_word_4(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    return re.sub(r'\\W', '', text)\ndef remove_links_5(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_links_1_5(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_punctuation_5(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_number_5(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[0-9]', '', text)\ndef remove_stop_word_5(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    return re.sub(r'\\W', '', text)\ndef remove_links_6(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_links_1_6(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_punctuation_6(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_number_6(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[0-9]', '', text)\ndef remove_stop_word_6(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    return re.sub(r'\\W', '', text)\ndef remove_links_7(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_links_1_7(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_punctuation_7(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_number_7(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[0-9]', '', text)\ndef remove_stop_word_7(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    return re.sub(r'\\W', '', text)\ndef remove_links_8(text):\n    '''\n    Write a function to remove links from a string.\n    '''\n    return re.sub(r'\\[\\w+\\"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pass\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    try:\n        print(len(list(filter(x.is_integer(), y))))\n        print(len(list(filter(x.is_integer(), z))))\n    except:\n        print('Wrong format, can not count numbers')\n    \ndef two_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from two given integers.\n    '''\n    try:\n        print(len(list(filter(x.is_integer(), y))))\n        print(len(list(filter(x.is_integer(), z))))\n    except:\n        print('Wrong format, can not count numbers')\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(3):\n        if (x==y) and (y==z):\n            count += 1\n        elif (x==z) and (z==y):\n            count += 1\n        elif (x==y) and (z==z):\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a=x.count(x)\n    b=y.count(y)\n    c=z.count(z)\n    if a+b+c!=0:\n        return a+b+c\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    i=0\n    while(i<len(x)):\n        if(x[i]==y[i]==z[i]):\n            i=i+1\n        else:\n            i=i+1\n    return i\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #declare a list to store the value\n    value_list = []\n    #iterate through two numbers\n    for i in range(2):\n        #add the values\n        value_list.append(x)\n        value_list.append(y)\n        value_list.append(z)\n    #Count the numbers in the list\n    value_list.sort()\n    #Return the value\n    return value_list[0]*value_list[1]*value_list[2]\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #if all inputs are integers and there are no negative inputs, then return 0\n    if all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n        #if all inputs are integers and there are no negative inputs, then return 0\n        if all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x==0,y==0,z==0]):\n            return 0\n        #if all inputs are integers and there are negative inputs, then return 0\n        elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x==0,y!=0,z!=0]):\n            return 0\n        #if all inputs are integers and there are negative inputs, then return 0\n        elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n            return 0\n        else:\n            #if all inputs are integers, then return the number of equal numbers\n            return len([x,y,z])\n    #if all inputs are integers and there are no negative inputs, then return 0\n    elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n        #if all inputs are integers and there are no negative inputs, then return 0\n        if all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x==0,y==0,z==0]):\n            return 0\n        #if all inputs are integers and there are negative inputs, then return 0\n        elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n            return 0\n        else:\n            #if all inputs are integers, then return the number of equal numbers\n            return len([x,y,z])\n    #if all inputs are integers and there are negative inputs, then return 0\n    elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n        #if all inputs are integers and there are negative inputs, then return 0\n        if all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x==0,y!=0,z!=0]):\n            return 0\n        #if all inputs are integers and there are negative inputs, then return 0\n        elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n            return 0\n        else:\n            #if all inputs are integers, then return the number of equal numbers\n            return len([x,y,z])\n    #if all inputs are integers and there are negative inputs, then return 0\n    elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n        #if all inputs are integers and there are negative inputs, then return 0\n        if all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x==0,y!=0,z!=0]):\n            return 0\n        #if all inputs are integers and there are negative inputs, then return 0\n        elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n            return 0\n        else:\n            #if all inputs are integers, then return the number of equal numbers\n            return len([x,y,z])\n    #if all inputs are integers and there are negative inputs, then return 0\n    elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n        #if all inputs are integers and there are negative inputs, then return 0\n        if all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x==0,y!=0,z!=0]):\n            return 0\n        #if all inputs are integers and there are negative inputs, then return 0\n        elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n            return 0\n        else:\n            #if all inputs are integers, then return the number of equal numbers\n            return len([x,y,z])\n    #if all inputs are integers and there are negative inputs, then return 0\n    elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n        #if all inputs are integers and there are negative inputs, then return 0\n        if all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x==0,y!=0,z!=0]):\n            return 0\n        #if all inputs are integers and there are negative inputs, then return 0\n        elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n            return 0\n        else:\n            #if all inputs are integers, then return the number of equal numbers\n            return len([x,y,z])\n    else:\n        #if all inputs are integers and there are negative inputs, then return 0\n        if all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n            return 0\n        #if all inputs are integers and there are negative inputs, then return 0\n        elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x==0,y!=0,z!=0]):\n            return 0\n        #if all inputs are integers, then return the number of equal numbers\n        elif all([isinstance(x,int) and isinstance(y,int) and isinstance(z,int)]) and all([x!=0,y!=0,z!=0]):\n            return 0\n        else:\n            #if all inputs are integers, then return the number of equal numbers\n            return len([x,y,z])"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x) == len(y),'The number of elements is not equal'\n    assert len(x) == len(z),'The number of elements is not equal'\n    assert len(x)==len(set(x)),'The number of elements is not equal'\n    assert len(x)==len(set(y)),'The number of elements is not equal'\n    assert len(x)==len(set(z)),'The number of elements is not equal'\n    assert all(x==y)==all(x==z),'The elements are not equal'\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c=0\n    for i in range(3):\n        if(x==y and y==z):\n            c=c+1\n    return c\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x.count(y) + x.count(z) + y.count(z)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    s = 0\n    e = n - 1\n    while s <= e:\n        if arr[s] < arr[e]:\n            return e - s\n        if arr[s] > arr[e]:\n            s += 1\n        if s == e:\n            return 0\n        else:\n            e -= 1\n    return 1\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    \n    # base cases\n    if n == 2:\n        return 1\n    \n    # count all possible rotations\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i] > arr[j]:\n                break\n        # 2 cases\n        if j == i:\n            count += 1\n        elif i == j:\n            count += 2\n        # 4 cases\n        elif arr[i]!= arr[j] and arr[i] > arr[j] and j < i:\n            count += 4\n    \n    # check for the first and last element\n    if arr[0] < arr[-1]:\n        count += 1\n    \n    # return the result\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            count+=1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    i = 0\n    j = 0\n    while i < n:\n        if arr[i] > arr[j]:\n            count += 1\n            j += 1\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        mid = left + ((right - left) >> 1)\n        if arr[mid] < arr[mid + 1]:\n            left = mid + 1\n        elif arr[mid] < arr[mid + 1] and arr[mid] < arr[mid + 2]:\n            right = mid\n        else:\n            return mid - left + 1\n    \n    return left - right\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # if len(arr) <= 1:\n    #     return 0\n    \n    left_pointer = 0\n    right_pointer = len(arr) - 1\n    ans = 0\n    while(left_pointer < right_pointer):\n        if arr[left_pointer] > arr[right_pointer]:\n            ans += 1\n            right_pointer -= 1\n        elif arr[left_pointer] < arr[right_pointer]:\n            left_pointer += 1\n        else:\n            ans += 1\n            right_pointer -= 1\n    return ans\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    d = {}\n    for i in range(n):\n        d[arr[i]] = d.get(arr[i],0) + 1\n    d = sorted(d.items(), key=lambda item: item[1])\n    if d[-1][1] % 2 == 1:\n        return d[-1][1]\n    else:\n        return d[-1][1] - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    # O(n)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]>arr[j]:\n                count+=1\n    return count\n    # O(1)\n    #return count_rotations(arr)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = n\n    sq = n\n    i = i\n    sq = int(sq)\n    sq = math.sqrt(sq)\n    while(i % 2 == 0):\n        i = i / 2\n        i = int(i)\n    while(sq % 2 == 0):\n        sq = sq / 2\n        sq = int(sq)\n    if (sq == i and n > i):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == n:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, n):\n        if (n % i == 0):\n            return False\n    return True\n    \n    \ndef check_if_prime(n) :\n    '''\n    a basic prime checker in python\n    '''\n    for i in range(2, n) :\n        if (n % i) == 0 :\n            return False\n    return True\n    \n    \ndef prime_checker(n) :\n    '''\n    a checker to see if a number is prime or not\n    '''\n    if (n <= 1) :\n        return False\n    if n == 2 :\n        return True\n    if n == 3 :\n        return True\n    if n % 2 == 0 :\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, n) :\n        if (n % i == 0):\n            return False\n    return True\n    \n    \ndef prime_checker2(n) :\n    '''\n    a checker to see if a number is prime or not\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 :\n        return True\n    if n == 3 :\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, n) :\n        if (n % i == 0):\n            return False\n    return True\n    \n    \ndef prime_checker3(n) :\n    '''\n    a checker to see if a number is prime or not\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 :\n        return True\n    if n == 3 :\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, n) :\n        if (n % i == 0):\n            return False\n    return True\n    \n    \ndef main() :\n    print(\"\\n------------Prime Number Checker------------\")\n    print(\"\\n--------PRIMES--------\")\n    print(\"\\n1. Check if a number is a prime number\")\n    print(\"\\n2. Check if a number is a prime number\")\n    print(\"\\n3. Check if a number is a prime number\")\n    print(\"\\n4. Check if a number is a prime number\")\n    print(\"\\n5. Check if a number is a prime number\")\n    print(\"\\n-----------------------\")\n    print(\"\\n\\n\")\n    print(\"\\nPRIMES\")\n    print(\"\\n\\n\")\n    \n    ch = int(input(\"\\nEnter the number : \"))\n    \n    if ch == 1 :\n        print(\"\\n--------PRIME NUMBERS--------\")\n        print(\"\\n--------PRIMES--------\")\n        print(\"\\n1. Check if a number is a prime number\")\n        print(\"\\n2. Check if a number is a prime number\")\n        print(\"\\n3. Check if a number is a prime number\")\n        print(\"\\n4. Check if a number is a prime number\")\n        print(\"\\n5. Check if a number is a prime number\")\n        print(\"\\n-----------------------\")\n        print(\"\\n\\n\")\n        print(\"\\nPRIMES\")\n        print(\"\\n\\n\")\n        \n        print(\"\\n2. Check if a number is a perfect square\")\n        print(\"\\n3. Check if a number is a perfect square\")\n        print(\"\\n4. Check if a number is a perfect square\")\n        print(\"\\n5. Check if a number is a perfect square\")\n        print(\"\\n-----------------------\")\n        print(\"\\n\\n\")\n        \n        ch1 = int(input(\"\\nEnter the number : \"))\n        \n        if (check_if_prime(ch1) == True) :\n            print(\"\\n\\n\", \"Good\", \"\\n\\n\")\n            print(\"\\n\", \"PRIMES\", \"\\n\\n\")\n        else:\n            print(\"\\n\\n\", \"Bad\", \"\\n\\n\")\n            print(\"\\n\", \"PRIMES\", \"\\n\\n\")\n    \n    elif ch == 2 :\n        print(\"\\n--------PRIME NUMBERS--------\")\n        print(\"\\n--------PRIMES--------\")\n        print(\"\\n1. Check if a number is a prime number\")\n        print(\"\\n2. Check if a number is a prime number\")\n        print(\"\\n3. Check if a number is a prime number\")\n        print(\"\\n4. Check if a number is a prime number\")\n        print(\"\\n5. Check if a number is a prime number\")\n        print(\"\\n6. Check if a number is a prime number\")\n        print(\"\\n7. Check if a number is a prime number\")\n        print(\"\\n8. Check if a number is a prime number\")\n        print(\"\\n9. Check if a number is a prime number\")\n        print(\"\\n10. Check if a number is a prime number\")\n        print(\"\\n-----------------------\")\n        print(\"\\n\\n\")\n        \n        ch2 = int(input(\"\\nEnter the number : \"))\n        \n        if (check_if_prime(ch2) == True) :\n            print(\"\\n\\n\", \"Good\", \"\\n\\n\")\n            print(\"\\n\", \"PRIMES\", \"\\n\\n\")\n        else:\n            print(\"\\n\\n\", \"Bad\", \"\\n\\n\")\n            print(\"\\n\", \"PRIMES\", \"\\n\\n\")\n            \n    elif ch == 3 :\n        print(\"\\n--------PRIME NUMBERS--------\")\n        print(\"\\n--------PRIMES--------\")\n        print(\"\\n1. Check if a number is a prime number\")\n        print(\"\\n2. Check if a number is a prime number\")\n        print(\"\\n3. Check if a number is a prime number\")\n        print(\"\\n4. Check if a number is a prime number\")\n        print(\"\\n5. Check if a number is a prime number\")\n        print(\"\\n6. Check if a number is a prime number\")\n        print(\"\\n7. Check if a number is a prime number\")\n        print(\"\\n8. Check if a number is a prime number\")\n        print(\"\\n9. Check if a number is a prime number\")\n        print(\"\\n10. Check if a number is a prime number\")\n        print(\"\\n-----------------------\")\n        print(\"\\n\\n\")\n        \n        ch3 = int(input(\"\\nEnter the number : \"))\n        \n        if (check_if_prime(ch3) == True) :\n            print(\"\\n\\n\", \"Good\", \"\\n\\n\")\n            print(\"\\n\", \"PRIMES\", \"\\n\\n\")\n        else:\n            print(\"\\n\\n\", \"Bad\", \"\\n\\n\")\n            print(\"\\n\", \"PRIMES\", \"\\n\\n\")\n            \n    elif ch == 4 :\n        print(\"\\n--------PRIME NUMBERS--------\")\n        print(\"\\n--------PRIMES--------\")\n        print(\"\\n1. Check if a number is a prime number\")\n        print(\"\\n2. Check if a number is a prime number\")\n        print(\"\\n3. Check if a number is a prime number\")\n        print(\"\\n4. Check if a number is a prime number\")\n        print(\"\\n5. Check if a number is a prime number\")\n        print(\"\\n6. Check if a number is a prime number\")\n        print(\"\\n7. Check if a number is a prime number\")\n        print(\"\\n8. Check if a number is a prime number\")\n        print(\"\\n9. Check if a number is a prime number\")\n        print(\"\\n10. Check if a number is a prime number\")\n        print(\"\\n-----------------------\")\n        print(\"\\n\\n\")\n        \n        ch4 = int(input(\"\\nEnter the number : \"))\n        \n        if (check_if_prime(ch4) == True) :\n            print(\"\\n\\n\", \"Good\", \"\\n\\"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n <= 1):\n        return True\n    if (n % 2) == 0:\n        return False\n    if (n % 3) == 0:\n        return True\n    if (n % 5) == 0:\n        return False\n    # n % 2!= 0 or n % 3!= 0 or n % 5!= 0\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return False\n    elif n%2 == 0:\n        return False\n    elif n%3 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    if n == 0 :\n        return True\n    elif n == 1 :\n        return False\n    else :\n        sqr = n*n\n        div = 2\n        while (div*div <= sqr) :\n            if sqr % div == 0 :\n                return False\n            div += 1\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n < 1:\n        return False\n    else:\n        if n%2 == 0:\n            return is_perfect_square(n//2)\n        else:\n            return is_perfect_square(3*n+1)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==1:\n        return True\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    sq = int(n**0.5)\n    if sq==int(sq**0.5) and sq%2==0:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == n) :\n        return True\n    if (n % 2 == 0) :\n        return False\n    if (n < 2) :\n        return False\n    \n    while (n > 1) :\n        if (n % n == 0) :\n            return False\n        n = n//n\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        print(\"INVALID INPUT\")\n    else :\n        sum = 0\n        for num in range(1,n+1) :\n            if n % num == 0 :\n                sum = sum + num\n        if n == sum :\n            print(\"The number is a perfect square\")\n        else :\n            print(\"The number is not a perfect square\")\n        return\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    return is_perfect_square(int(n**0.5))\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==0:\n        return True\n    else:\n        if len(arr)%2==0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    l = []\n    for i in range(len(arr)):\n        l.append(arr[i])\n    for i in range(len(l)//2):\n        if l[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if(arr[0]%2==0):\n        return True\n    else:\n        return False\n    \ndef is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product*i\n    return product%2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if(i % 2) == 0:\n            return False\n    return True\n    \ndef is_product_even_2(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    if sum % 2 == 0:\n        return False\n    return True\n    \ndef is_product_even_3(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if(i % 2) == 0:\n            return False\n    return True\n    \ndef is_product_odd(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    if sum % 2 == 1:\n        return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # We'll use this list:\n    # {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}\n    #\n    # Here we'll use:\n    # arr = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    #\n    # Then we'll use:\n    # product = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62]\n    #\n    # We'll return:\n    # True if the product of numbers in arr is even, else False\n    \n    # Create a new array that will hold the product of the numbers in arr\n    product = [1]\n    \n    # Loop through the numbers in arr\n    for number in arr:\n        \n        # Add number to the product\n        product.append(number * product[-1])\n    \n    # Return whether the product is even or not\n    return product[-1] % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return True\n    else:\n        temp = arr[0] * arr[1]\n        for i in range(2, len(arr)):\n            temp *= arr[i]\n        if temp == (arr[0] * arr[1]) :\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) <= 1:\n        return False\n    if len(arr) % 2 == 0:\n        if arr[0] % 2 == 0 and arr[1] % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for n in arr:\n        if n % 2 == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return arr[0] % 2 == 0\n    if len(arr) == 2:\n        return arr[0] % 2 == 0 and arr[1] % 2 == 0\n    if len(arr) == 3:\n        return arr[0] % 2 == 0 and arr[1] % 2 == 0 and arr[2] % 2 == 0\n    if len(arr) == 4:\n        return arr[0] % 2 == 0 and arr[1] % 2 == 0 and arr[2] % 2 == 0 and arr[3] % 2 == 0\n    if len(arr) == 5:\n        return arr[0] % 2 == 0 and arr[1] % 2 == 0 and arr[2] % 2 == 0 and arr[3] % 2 == 0 and arr[4] % 2 == 0\n    if len(arr) == 6:\n        return arr[0] % 2 == 0 and arr[1] % 2 == 0 and arr[2] % 2 == 0 and arr[3] % 2 == 0 and arr[4] % 2 == 0 and arr[5] % 2 == 0\n    if len(arr) == 7:\n        return arr[0] % 2 == 0 and arr[1] % 2 == 0 and arr[2] % 2 == 0 and arr[3] % 2 == 0 and arr[4] % 2 == 0 and arr[5] % 2 == 0 and arr[6] % 2 == 0\n    \n    \ndef solution(nums):\n    answer = []\n    \n    # [1,1,1,1,1,1,1,1] \uc774\ub7f0\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5b4\uc57c \ud558\ub294\ub370 \uc544\uc9c1 \ubd88\uad6c\ud560 \uc218 \uc5c6\uc74c. \uc5ec\uae30\uc11c \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29\ud5a5\uc744 \ubc14\uafd4\uc11c \ubc14\uafd4\uc57c\ud558\ub2c8 \ub9cc\uc57d \uc548\ub098\uc628 \uc21c\uc11c\uac00 \uc548 \ub4e4\uc5b4\uac04\ub2e4\uba74 \uacb0\uad6d \uacbd\uc7c1\uc774 \uc5c6\uae30\ub54c\ubb38.\n    # \ub610\ub294 \ud480\uc774\uc2dc\ud0ac \uc218 \uc788\ub2e4.\n    # [2,3,2,1,2,1,2,1] \uc774\ub7f0\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5b4\uc57c \ud558\ub294\ub370 \uc544\uc9c1 \ubd88\uad6c\ud560 \uc218 \uc5c6\uc74c. \uc5ec\uae30\uc11c \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29\ud5a5\uc744 \ubc14\uafd4\uc11c \ubc14\uafd4\uc57c\ud558\ub2c8 \ub9cc\uc57d \uc548\ub098\uc628 \uc21c\uc11c\uac00 \uc548 \ub4e4\uc5b4\uac04\ub2e4\uba74 \uacb0\uad6d \uacbd\uc7c1\uc774 \uc5c6\uae30\ub54c\ubb38.\n    # \ub610\ub294 \ud480\uc774\uc2dc\ud0ac \uc218 \uc788\ub2e4.\n    # [1,1,1,1,1,1,1,1] \uc774\ub7f0\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5b4\uc57c \ud558\ub294\ub370 \uc544\uc9c1 \ubd88\uad6c\ud560 \uc218 \uc5c6\uc74c. \uc5ec\uae30\uc11c \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29\ud5a5\uc744 \ubc14\uafd4\uc11c \ubc14\uafd4\uc57c\ud558\ub2c8 \ub9cc\uc57d \uc548\ub098\uc628 \uc21c\uc11c\uac00 \uc548 \ub4e4\uc5b4\uac04\ub2e4\uba74 \uacb0\uad6d \uacbd\uc7c1\uc774 \uc5c6\uae30\ub54c\ubb38.\n    # [1,2,1,2,1,2,1,2] \uc774\ub7f0\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5b4\uc57c \ud558\ub294\ub370 \uc544\uc9c1 \ubd88\uad6c\ud560 \uc218 \uc5c6\uc74c. \uc5ec\uae30\uc11c \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29\ud5a5\uc744 \ubc14\uafd4\uc11c \ubc14\uafd4\uc57c\ud558\ub2c8 \ub9cc\uc57d \uc548\ub098\uc628 \uc21c\uc11c\uac00 \uc548 \ub4e4\uc5b4\uac04\ub2e4\uba74 \uacb0\uad6d \uacbd\uc7c1\uc774 \uc5c6\uae30\ub54c\ubb38.\n    # [2,1,2,1,2,1,1,1] \uc774\ub7f0\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5b4\uc57c \ud558\ub294\ub370 \uc544\uc9c1 \ubd88\uad6c\ud560 \uc218 \uc5c6\uc74c. \uc5ec\uae30\uc11c \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29\ud5a5\uc744 \ubc14\uafd4\uc11c \ubc14\uafd4\uc57c\ud558\ub2c8 \ub9cc\uc57d \uc548\ub098\uc628 \uc21c\uc11c\uac00 \uc548 \ub4e4\uc5b4\uac04\ub2e4\uba74 \uacb0\uad6d \uacbd\uc7c1\uc774 \uc5c6\uae30\ub54c\ubb38.\n    # [3,3,3,3,3,3,3,3] \uc774\ub7f0\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5b4\uc57c \ud558\ub294\ub370 \uc544\uc9c1 \ubd88\uad6c\ud560 \uc218 \uc5c6\uc74c. \uc5ec\uae30\uc11c \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29\ud5a5\uc744 \ubc14\uafd4\uc11c \ubc14\uafd4\uc57c\ud558\ub2c8 \ub9cc\uc57d \uc548\ub098\uc628 \uc21c\uc11c\uac00 \uc548 \ub4e4\uc5b4\uac04\ub2e4\uba74 \uacb0\uad6d \uacbd\uc7c1\uc774 \uc5c6\uae30\ub54c\ubb38.\n    # [4,2,4,2,4,2,4,2] \uc774\ub7f0\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5b4\uc57c \ud558\ub294\ub370 \uc544\uc9c1 \ubd88\uad6c\ud560 \uc218 \uc5c6\uc74c. \uc5ec\uae30\uc11c \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29\ud5a5\uc744 \ubc14\uafd4\uc11c \ubc14\uafd4\uc57c\ud558\ub2c8 \ub9cc\uc57d \uc548\ub098\uc628 \uc21c\uc11c\uac00 \uc548 \ub4e4\uc5b4\uac04\ub2e4\uba74 \uacb0\uad6d \uacbd\uc7c1\uc774 \uc5c6\uae30\ub54c\ubb38.\n    # [5,5,5,5,5,5,5,5] \uc774\ub7f0\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5b4\uc57c \ud558\ub294\ub370 \uc544\uc9c1 \ubd88\uad6c\ud560 \uc218 \uc5c6\uc74c. \uc5ec\uae30\uc11c \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    counter = 0 \n    for n in arr: \n        counter = counter + 1 \n        if n % 2 == 0: \n            counter = counter - 1 \n        if counter % 2 == 0: \n            return False \n    return True \n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sums = []\n    sum_list = []\n    for lst in lists:\n        sums.append(sum(lst))\n    for item in sums:\n        for item2 in sums:\n            if item + item2 > item2:\n                sum_list.append(item + item2)\n    return sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    sum_list = []\n    for i in lists:\n        sum_list.append(sum(i))\n    for j in range(len(sum_list)):\n        if sum_list[j] == max(sum_list):\n            max_list.append(lists[j])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    temp_list = []\n    sum = 0\n    for i in lists:\n        temp_list.append(i)\n        sum = max(sum, sum(i))\n    for i in range(len(temp_list)):\n        for j in range(len(temp_list)):\n            if i!= j:\n                if sum == temp_list[i] + temp_list[j]:\n                    temp_list[i], temp_list[j] = temp_list[j], temp_list[i]\n    return temp_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > 0:\n                highest_sum.append(lists[i][j])\n    return highest_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    else:\n        max_sum = -1\n        for i in range(len(lists)):\n            for j in range(len(lists[i])):\n                if lists[i][j] > max_sum:\n                    max_sum = lists[i][j]\n        return [lists, max_sum]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    i = 0\n    sum_max = 0\n    for element in lists:\n        if element[i] > sum_max:\n            sum_max = element[i]\n            result = element\n        i += 1\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    for l in lists:\n        result.append([])\n        for i in l:\n            result[-1].append(i)\n    result[-1].append(max(result[-1][0]))\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    new_list = []\n    total = 0\n    max_sum = 0\n    for list in lists:\n        for i in list:\n            total = total + i\n        new_list.append(list)\n    for j in range(0, len(new_list)):\n        if (new_list[j] == new_list[j+1]):\n            pass\n        else:\n            if (new_list[j] > max_sum):\n                max_sum = new_list[j]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # TODO: Write your code here\n    return max_sum_list_helper(lists)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max([c.isupper() for c in test_str.lower()])\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if max_run < i+1:\n                max_run = i+1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_r = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] not in test_str[i].upper():\n                max_r += 1\n    return max_r\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    return ''.join([\n        char if char.isupper()\n        else char\n        for char in test_str\n    ])\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    max_run_lower = 0\n    max_run_uppercase = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run_count += 1\n    return run_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_uppercase = 0\n    for char in test_str:\n        if char.isupper():\n            if char.isupper() > max_uppercase:\n                max_uppercase = char.isupper()\n            else:\n                continue\n        else:\n            if char.islower() > max_uppercase:\n                max_uppercase = char.islower()\n            else:\n                continue\n    return max_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l_upper = []\n    s_lower = []\n    l_lower = []\n    for i in test_str:\n        if i.isupper():\n            l_upper.append(i)\n        elif i.islower():\n            l_lower.append(i)\n    for i in l_lower:\n        if i in l_upper:\n            if i.isupper():\n                l_lower.remove(i)\n            else:\n                l_upper.remove(i)\n        else:\n            pass\n    for i in l_upper:\n        if i in l_lower:\n            s_lower.append(i)\n        else:\n            pass\n    return max(s_lower)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in test_str:\n        if i.isupper():\n            if i.isupper():\n                max_run = max_run + 1\n            else:\n                max_run = max_run - 1\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Write your code here\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_lst=[]\n    for i in nums:\n        if i%2!=0:\n            odd_lst.append(i)\n    return odd_lst[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    start = 0\n    end = len(nums) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if nums[mid] % 2:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return nums[start]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[nums%2]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums.sort()\n    return nums[int(len(nums)/2)]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    index = 0\n    while index < len(nums):\n        if (index % 2)!= 0:\n            index += 1\n        else:\n            index += 1\n    return nums[index]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return 'No numbers are odd.'\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # loop through the list\n    for i in range(len(nums)):\n        # if list contains a odd number, return it\n        if nums[i] % 2 == 1:\n            return nums[i]\n    # otherwise return -1\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return [i for i in nums if i%2!=0][0]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    K = list(K) # to make the list easier to access\n    if len(test_tup) % 2!= 0:\n        return False\n    for i in range(0, len(test_tup), 2):\n        if test_tup[i] in K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K < 1 or type(test_tup)!= tuple:\n        return 'The given tuple must be a tuple of at least two elements.'\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = list(test_tup)\n    check_K = []\n    for element in test_tup:\n        if element % K == 0:\n            check_K.append(element)\n    check_K = list(set(check_K))\n    return len(check_K) == 1\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_tup = ()\n    for i in range(len(test_tup)):\n        if i >= K:\n            break\n        if i % 2 == 0:\n            check_tup = check_tup + (test_tup[i])\n    return check_tup\n    \ndef search(test_tup, K):\n    '''\n    Write a function to return the index of the element whose k or not\n    is the given number.\n    '''\n    check_tup = ()\n    K = check_K(test_tup, K)\n    for i in range(len(K)):\n        if K[i] == test_tup[i]:\n            return i\n    return -1\n    \ndef get_next_element(test_tup, K):\n    '''\n    Write a function that returns the next element in the given tuples.\n    '''\n    check_tup = ()\n    K = check_K(test_tup, K)\n    for i in range(len(K)):\n        if K[i] == test_tup[i]:\n            return i\n    return -1\n    \ndef remove_duplicates(test_tup):\n    '''\n    Write a function that removes the duplicates in the given tuples.\n    '''\n    check_tup = ()\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            check_tup = check_tup + (test_tup[i])\n    for j in range(len(check_tup)):\n        if check_tup[j]!= check_tup[j+1]:\n            return remove_duplicates(check_tup)\n    return check_tup\n    \ndef is_ascending(test_tup):\n    '''\n    Write a function that returns True if the given tuples are in ascending order\n    and False otherwise.\n    '''\n    check_tup = ()\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            check_tup = check_tup + (test_tup[i])\n    for j in range(len(check_tup)):\n        if check_tup[j] <= check_tup[j+1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i % K == 0:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) <= K:\n        print(\"Checking if it contains at least {} values\".format(K))\n        return True\n    else:\n        print(\"Checking if it contains at most {} values\".format(K))\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i < K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    N = len(test_tup)\n    for i in range(N):\n        if test_tup[i][0] == K:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for item in test_tup2:\n        if item < test_tup1[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0, len(test_tup1)):\n        if (test_tup2[i] < test_tup1[i]) == False:\n            print(\"False\")\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuple not of the same length'\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return 'Tuple contains smaller than its corresponding element'\n    return 'Tuple contains the same value'\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Implement this function\n    check = True\n    for element in test_tup2:\n        if element < test_tup1[0]:\n            check = False\n    return check\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if(test_tup2[i] < test_tup1[i]):\n            return False\n    return True\n    "
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in test_tup1:\n        if i not in test_tup2:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n"
    }
]